var Yw = Object.defineProperty;
var Zw = (e, t, r) => t in e ? Yw(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r;
var Yi = (e, t, r) => (Zw(e, typeof t != "symbol" ? t + "" : t, r), r);
import Qn from "buffer";
import np from "events";
import ip from "util";
import Jw from "string_decoder";
import Xu from "assert";
var En = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function op(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
var Yu = { exports: {} };
Yu.exports;
(function(e) {
  (function(t, r) {
    function n(E, f) {
      if (!E)
        throw new Error(f || "Assertion failed");
    }
    function i(E, f) {
      E.super_ = f;
      var h = function() {
      };
      h.prototype = f.prototype, E.prototype = new h(), E.prototype.constructor = E;
    }
    function o(E, f, h) {
      if (o.isBN(E))
        return E;
      this.negative = 0, this.words = null, this.length = 0, this.red = null, E !== null && ((f === "le" || f === "be") && (h = f, f = 10), this._init(E || 0, f || 10, h || "be"));
    }
    typeof t == "object" ? t.exports = o : r.BN = o, o.BN = o, o.wordSize = 26;
    var s;
    try {
      typeof window < "u" && typeof window.Buffer < "u" ? s = window.Buffer : s = require("buffer").Buffer;
    } catch {
    }
    o.isBN = function(f) {
      return f instanceof o ? !0 : f !== null && typeof f == "object" && f.constructor.wordSize === o.wordSize && Array.isArray(f.words);
    }, o.max = function(f, h) {
      return f.cmp(h) > 0 ? f : h;
    }, o.min = function(f, h) {
      return f.cmp(h) < 0 ? f : h;
    }, o.prototype._init = function(f, h, v) {
      if (typeof f == "number")
        return this._initNumber(f, h, v);
      if (typeof f == "object")
        return this._initArray(f, h, v);
      h === "hex" && (h = 16), n(h === (h | 0) && h >= 2 && h <= 36), f = f.toString().replace(/\s+/g, "");
      var m = 0;
      f[0] === "-" && (m++, this.negative = 1), m < f.length && (h === 16 ? this._parseHex(f, m, v) : (this._parseBase(f, h, m), v === "le" && this._initArray(this.toArray(), h, v)));
    }, o.prototype._initNumber = function(f, h, v) {
      f < 0 && (this.negative = 1, f = -f), f < 67108864 ? (this.words = [f & 67108863], this.length = 1) : f < 4503599627370496 ? (this.words = [
        f & 67108863,
        f / 67108864 & 67108863
      ], this.length = 2) : (n(f < 9007199254740992), this.words = [
        f & 67108863,
        f / 67108864 & 67108863,
        1
      ], this.length = 3), v === "le" && this._initArray(this.toArray(), h, v);
    }, o.prototype._initArray = function(f, h, v) {
      if (n(typeof f.length == "number"), f.length <= 0)
        return this.words = [0], this.length = 1, this;
      this.length = Math.ceil(f.length / 3), this.words = new Array(this.length);
      for (var m = 0; m < this.length; m++)
        this.words[m] = 0;
      var _, R, G = 0;
      if (v === "be")
        for (m = f.length - 1, _ = 0; m >= 0; m -= 3)
          R = f[m] | f[m - 1] << 8 | f[m - 2] << 16, this.words[_] |= R << G & 67108863, this.words[_ + 1] = R >>> 26 - G & 67108863, G += 24, G >= 26 && (G -= 26, _++);
      else if (v === "le")
        for (m = 0, _ = 0; m < f.length; m += 3)
          R = f[m] | f[m + 1] << 8 | f[m + 2] << 16, this.words[_] |= R << G & 67108863, this.words[_ + 1] = R >>> 26 - G & 67108863, G += 24, G >= 26 && (G -= 26, _++);
      return this._strip();
    };
    function a(E, f) {
      var h = E.charCodeAt(f);
      if (h >= 48 && h <= 57)
        return h - 48;
      if (h >= 65 && h <= 70)
        return h - 55;
      if (h >= 97 && h <= 102)
        return h - 87;
      n(!1, "Invalid character in " + E);
    }
    function c(E, f, h) {
      var v = a(E, h);
      return h - 1 >= f && (v |= a(E, h - 1) << 4), v;
    }
    o.prototype._parseHex = function(f, h, v) {
      this.length = Math.ceil((f.length - h) / 6), this.words = new Array(this.length);
      for (var m = 0; m < this.length; m++)
        this.words[m] = 0;
      var _ = 0, R = 0, G;
      if (v === "be")
        for (m = f.length - 1; m >= h; m -= 2)
          G = c(f, h, m) << _, this.words[R] |= G & 67108863, _ >= 18 ? (_ -= 18, R += 1, this.words[R] |= G >>> 26) : _ += 8;
      else {
        var P = f.length - h;
        for (m = P % 2 === 0 ? h + 1 : h; m < f.length; m += 2)
          G = c(f, h, m) << _, this.words[R] |= G & 67108863, _ >= 18 ? (_ -= 18, R += 1, this.words[R] |= G >>> 26) : _ += 8;
      }
      this._strip();
    };
    function d(E, f, h, v) {
      for (var m = 0, _ = 0, R = Math.min(E.length, h), G = f; G < R; G++) {
        var P = E.charCodeAt(G) - 48;
        m *= v, P >= 49 ? _ = P - 49 + 10 : P >= 17 ? _ = P - 17 + 10 : _ = P, n(P >= 0 && _ < v, "Invalid character"), m += _;
      }
      return m;
    }
    o.prototype._parseBase = function(f, h, v) {
      this.words = [0], this.length = 1;
      for (var m = 0, _ = 1; _ <= 67108863; _ *= h)
        m++;
      m--, _ = _ / h | 0;
      for (var R = f.length - v, G = R % m, P = Math.min(R, R - G) + v, p = 0, H = v; H < P; H += m)
        p = d(f, H, H + m, h), this.imuln(_), this.words[0] + p < 67108864 ? this.words[0] += p : this._iaddn(p);
      if (G !== 0) {
        var oe = 1;
        for (p = d(f, H, f.length, h), H = 0; H < G; H++)
          oe *= h;
        this.imuln(oe), this.words[0] + p < 67108864 ? this.words[0] += p : this._iaddn(p);
      }
      this._strip();
    }, o.prototype.copy = function(f) {
      f.words = new Array(this.length);
      for (var h = 0; h < this.length; h++)
        f.words[h] = this.words[h];
      f.length = this.length, f.negative = this.negative, f.red = this.red;
    };
    function w(E, f) {
      E.words = f.words, E.length = f.length, E.negative = f.negative, E.red = f.red;
    }
    if (o.prototype._move = function(f) {
      w(f, this);
    }, o.prototype.clone = function() {
      var f = new o(null);
      return this.copy(f), f;
    }, o.prototype._expand = function(f) {
      for (; this.length < f; )
        this.words[this.length++] = 0;
      return this;
    }, o.prototype._strip = function() {
      for (; this.length > 1 && this.words[this.length - 1] === 0; )
        this.length--;
      return this._normSign();
    }, o.prototype._normSign = function() {
      return this.length === 1 && this.words[0] === 0 && (this.negative = 0), this;
    }, typeof Symbol < "u" && typeof Symbol.for == "function")
      try {
        o.prototype[Symbol.for("nodejs.util.inspect.custom")] = g;
      } catch {
        o.prototype.inspect = g;
      }
    else
      o.prototype.inspect = g;
    function g() {
      return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
    }
    var O = [
      "",
      "0",
      "00",
      "000",
      "0000",
      "00000",
      "000000",
      "0000000",
      "00000000",
      "000000000",
      "0000000000",
      "00000000000",
      "000000000000",
      "0000000000000",
      "00000000000000",
      "000000000000000",
      "0000000000000000",
      "00000000000000000",
      "000000000000000000",
      "0000000000000000000",
      "00000000000000000000",
      "000000000000000000000",
      "0000000000000000000000",
      "00000000000000000000000",
      "000000000000000000000000",
      "0000000000000000000000000"
    ], N = [
      0,
      0,
      25,
      16,
      12,
      11,
      10,
      9,
      8,
      8,
      7,
      7,
      7,
      7,
      6,
      6,
      6,
      6,
      6,
      6,
      6,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5,
      5
    ], B = [
      0,
      0,
      33554432,
      43046721,
      16777216,
      48828125,
      60466176,
      40353607,
      16777216,
      43046721,
      1e7,
      19487171,
      35831808,
      62748517,
      7529536,
      11390625,
      16777216,
      24137569,
      34012224,
      47045881,
      64e6,
      4084101,
      5153632,
      6436343,
      7962624,
      9765625,
      11881376,
      14348907,
      17210368,
      20511149,
      243e5,
      28629151,
      33554432,
      39135393,
      45435424,
      52521875,
      60466176
    ];
    o.prototype.toString = function(f, h) {
      f = f || 10, h = h | 0 || 1;
      var v;
      if (f === 16 || f === "hex") {
        v = "";
        for (var m = 0, _ = 0, R = 0; R < this.length; R++) {
          var G = this.words[R], P = ((G << m | _) & 16777215).toString(16);
          _ = G >>> 24 - m & 16777215, m += 2, m >= 26 && (m -= 26, R--), _ !== 0 || R !== this.length - 1 ? v = O[6 - P.length] + P + v : v = P + v;
        }
        for (_ !== 0 && (v = _.toString(16) + v); v.length % h !== 0; )
          v = "0" + v;
        return this.negative !== 0 && (v = "-" + v), v;
      }
      if (f === (f | 0) && f >= 2 && f <= 36) {
        var p = N[f], H = B[f];
        v = "";
        var oe = this.clone();
        for (oe.negative = 0; !oe.isZero(); ) {
          var ne = oe.modrn(H).toString(f);
          oe = oe.idivn(H), oe.isZero() ? v = ne + v : v = O[p - ne.length] + ne + v;
        }
        for (this.isZero() && (v = "0" + v); v.length % h !== 0; )
          v = "0" + v;
        return this.negative !== 0 && (v = "-" + v), v;
      }
      n(!1, "Base should be between 2 and 36");
    }, o.prototype.toNumber = function() {
      var f = this.words[0];
      return this.length === 2 ? f += this.words[1] * 67108864 : this.length === 3 && this.words[2] === 1 ? f += 4503599627370496 + this.words[1] * 67108864 : this.length > 2 && n(!1, "Number can only safely store up to 53 bits"), this.negative !== 0 ? -f : f;
    }, o.prototype.toJSON = function() {
      return this.toString(16, 2);
    }, s && (o.prototype.toBuffer = function(f, h) {
      return this.toArrayLike(s, f, h);
    }), o.prototype.toArray = function(f, h) {
      return this.toArrayLike(Array, f, h);
    };
    var I = function(f, h) {
      return f.allocUnsafe ? f.allocUnsafe(h) : new f(h);
    };
    o.prototype.toArrayLike = function(f, h, v) {
      this._strip();
      var m = this.byteLength(), _ = v || Math.max(1, m);
      n(m <= _, "byte array longer than desired length"), n(_ > 0, "Requested array length <= 0");
      var R = I(f, _), G = h === "le" ? "LE" : "BE";
      return this["_toArrayLike" + G](R, m), R;
    }, o.prototype._toArrayLikeLE = function(f, h) {
      for (var v = 0, m = 0, _ = 0, R = 0; _ < this.length; _++) {
        var G = this.words[_] << R | m;
        f[v++] = G & 255, v < f.length && (f[v++] = G >> 8 & 255), v < f.length && (f[v++] = G >> 16 & 255), R === 6 ? (v < f.length && (f[v++] = G >> 24 & 255), m = 0, R = 0) : (m = G >>> 24, R += 2);
      }
      if (v < f.length)
        for (f[v++] = m; v < f.length; )
          f[v++] = 0;
    }, o.prototype._toArrayLikeBE = function(f, h) {
      for (var v = f.length - 1, m = 0, _ = 0, R = 0; _ < this.length; _++) {
        var G = this.words[_] << R | m;
        f[v--] = G & 255, v >= 0 && (f[v--] = G >> 8 & 255), v >= 0 && (f[v--] = G >> 16 & 255), R === 6 ? (v >= 0 && (f[v--] = G >> 24 & 255), m = 0, R = 0) : (m = G >>> 24, R += 2);
      }
      if (v >= 0)
        for (f[v--] = m; v >= 0; )
          f[v--] = 0;
    }, Math.clz32 ? o.prototype._countBits = function(f) {
      return 32 - Math.clz32(f);
    } : o.prototype._countBits = function(f) {
      var h = f, v = 0;
      return h >= 4096 && (v += 13, h >>>= 13), h >= 64 && (v += 7, h >>>= 7), h >= 8 && (v += 4, h >>>= 4), h >= 2 && (v += 2, h >>>= 2), v + h;
    }, o.prototype._zeroBits = function(f) {
      if (f === 0)
        return 26;
      var h = f, v = 0;
      return h & 8191 || (v += 13, h >>>= 13), h & 127 || (v += 7, h >>>= 7), h & 15 || (v += 4, h >>>= 4), h & 3 || (v += 2, h >>>= 2), h & 1 || v++, v;
    }, o.prototype.bitLength = function() {
      var f = this.words[this.length - 1], h = this._countBits(f);
      return (this.length - 1) * 26 + h;
    };
    function M(E) {
      for (var f = new Array(E.bitLength()), h = 0; h < f.length; h++) {
        var v = h / 26 | 0, m = h % 26;
        f[h] = E.words[v] >>> m & 1;
      }
      return f;
    }
    o.prototype.zeroBits = function() {
      if (this.isZero())
        return 0;
      for (var f = 0, h = 0; h < this.length; h++) {
        var v = this._zeroBits(this.words[h]);
        if (f += v, v !== 26)
          break;
      }
      return f;
    }, o.prototype.byteLength = function() {
      return Math.ceil(this.bitLength() / 8);
    }, o.prototype.toTwos = function(f) {
      return this.negative !== 0 ? this.abs().inotn(f).iaddn(1) : this.clone();
    }, o.prototype.fromTwos = function(f) {
      return this.testn(f - 1) ? this.notn(f).iaddn(1).ineg() : this.clone();
    }, o.prototype.isNeg = function() {
      return this.negative !== 0;
    }, o.prototype.neg = function() {
      return this.clone().ineg();
    }, o.prototype.ineg = function() {
      return this.isZero() || (this.negative ^= 1), this;
    }, o.prototype.iuor = function(f) {
      for (; this.length < f.length; )
        this.words[this.length++] = 0;
      for (var h = 0; h < f.length; h++)
        this.words[h] = this.words[h] | f.words[h];
      return this._strip();
    }, o.prototype.ior = function(f) {
      return n((this.negative | f.negative) === 0), this.iuor(f);
    }, o.prototype.or = function(f) {
      return this.length > f.length ? this.clone().ior(f) : f.clone().ior(this);
    }, o.prototype.uor = function(f) {
      return this.length > f.length ? this.clone().iuor(f) : f.clone().iuor(this);
    }, o.prototype.iuand = function(f) {
      var h;
      this.length > f.length ? h = f : h = this;
      for (var v = 0; v < h.length; v++)
        this.words[v] = this.words[v] & f.words[v];
      return this.length = h.length, this._strip();
    }, o.prototype.iand = function(f) {
      return n((this.negative | f.negative) === 0), this.iuand(f);
    }, o.prototype.and = function(f) {
      return this.length > f.length ? this.clone().iand(f) : f.clone().iand(this);
    }, o.prototype.uand = function(f) {
      return this.length > f.length ? this.clone().iuand(f) : f.clone().iuand(this);
    }, o.prototype.iuxor = function(f) {
      var h, v;
      this.length > f.length ? (h = this, v = f) : (h = f, v = this);
      for (var m = 0; m < v.length; m++)
        this.words[m] = h.words[m] ^ v.words[m];
      if (this !== h)
        for (; m < h.length; m++)
          this.words[m] = h.words[m];
      return this.length = h.length, this._strip();
    }, o.prototype.ixor = function(f) {
      return n((this.negative | f.negative) === 0), this.iuxor(f);
    }, o.prototype.xor = function(f) {
      return this.length > f.length ? this.clone().ixor(f) : f.clone().ixor(this);
    }, o.prototype.uxor = function(f) {
      return this.length > f.length ? this.clone().iuxor(f) : f.clone().iuxor(this);
    }, o.prototype.inotn = function(f) {
      n(typeof f == "number" && f >= 0);
      var h = Math.ceil(f / 26) | 0, v = f % 26;
      this._expand(h), v > 0 && h--;
      for (var m = 0; m < h; m++)
        this.words[m] = ~this.words[m] & 67108863;
      return v > 0 && (this.words[m] = ~this.words[m] & 67108863 >> 26 - v), this._strip();
    }, o.prototype.notn = function(f) {
      return this.clone().inotn(f);
    }, o.prototype.setn = function(f, h) {
      n(typeof f == "number" && f >= 0);
      var v = f / 26 | 0, m = f % 26;
      return this._expand(v + 1), h ? this.words[v] = this.words[v] | 1 << m : this.words[v] = this.words[v] & ~(1 << m), this._strip();
    }, o.prototype.iadd = function(f) {
      var h;
      if (this.negative !== 0 && f.negative === 0)
        return this.negative = 0, h = this.isub(f), this.negative ^= 1, this._normSign();
      if (this.negative === 0 && f.negative !== 0)
        return f.negative = 0, h = this.isub(f), f.negative = 1, h._normSign();
      var v, m;
      this.length > f.length ? (v = this, m = f) : (v = f, m = this);
      for (var _ = 0, R = 0; R < m.length; R++)
        h = (v.words[R] | 0) + (m.words[R] | 0) + _, this.words[R] = h & 67108863, _ = h >>> 26;
      for (; _ !== 0 && R < v.length; R++)
        h = (v.words[R] | 0) + _, this.words[R] = h & 67108863, _ = h >>> 26;
      if (this.length = v.length, _ !== 0)
        this.words[this.length] = _, this.length++;
      else if (v !== this)
        for (; R < v.length; R++)
          this.words[R] = v.words[R];
      return this;
    }, o.prototype.add = function(f) {
      var h;
      return f.negative !== 0 && this.negative === 0 ? (f.negative = 0, h = this.sub(f), f.negative ^= 1, h) : f.negative === 0 && this.negative !== 0 ? (this.negative = 0, h = f.sub(this), this.negative = 1, h) : this.length > f.length ? this.clone().iadd(f) : f.clone().iadd(this);
    }, o.prototype.isub = function(f) {
      if (f.negative !== 0) {
        f.negative = 0;
        var h = this.iadd(f);
        return f.negative = 1, h._normSign();
      } else if (this.negative !== 0)
        return this.negative = 0, this.iadd(f), this.negative = 1, this._normSign();
      var v = this.cmp(f);
      if (v === 0)
        return this.negative = 0, this.length = 1, this.words[0] = 0, this;
      var m, _;
      v > 0 ? (m = this, _ = f) : (m = f, _ = this);
      for (var R = 0, G = 0; G < _.length; G++)
        h = (m.words[G] | 0) - (_.words[G] | 0) + R, R = h >> 26, this.words[G] = h & 67108863;
      for (; R !== 0 && G < m.length; G++)
        h = (m.words[G] | 0) + R, R = h >> 26, this.words[G] = h & 67108863;
      if (R === 0 && G < m.length && m !== this)
        for (; G < m.length; G++)
          this.words[G] = m.words[G];
      return this.length = Math.max(this.length, G), m !== this && (this.negative = 1), this._strip();
    }, o.prototype.sub = function(f) {
      return this.clone().isub(f);
    };
    function T(E, f, h) {
      h.negative = f.negative ^ E.negative;
      var v = E.length + f.length | 0;
      h.length = v, v = v - 1 | 0;
      var m = E.words[0] | 0, _ = f.words[0] | 0, R = m * _, G = R & 67108863, P = R / 67108864 | 0;
      h.words[0] = G;
      for (var p = 1; p < v; p++) {
        for (var H = P >>> 26, oe = P & 67108863, ne = Math.min(p, f.length - 1), V = Math.max(0, p - E.length + 1); V <= ne; V++) {
          var Y = p - V | 0;
          m = E.words[Y] | 0, _ = f.words[V] | 0, R = m * _ + oe, H += R / 67108864 | 0, oe = R & 67108863;
        }
        h.words[p] = oe | 0, P = H | 0;
      }
      return P !== 0 ? h.words[p] = P | 0 : h.length--, h._strip();
    }
    var k = function(f, h, v) {
      var m = f.words, _ = h.words, R = v.words, G = 0, P, p, H, oe = m[0] | 0, ne = oe & 8191, V = oe >>> 13, Y = m[1] | 0, Q = Y & 8191, ie = Y >>> 13, de = m[2] | 0, L = de & 8191, $ = de >>> 13, ee = m[3] | 0, re = ee & 8191, ae = ee >>> 13, me = m[4] | 0, ge = me & 8191, Re = me >>> 13, lr = m[5] | 0, Le = lr & 8191, De = lr >>> 13, ye = m[6] | 0, Oe = ye & 8191, S = ye >>> 13, U = m[7] | 0, j = U & 8191, y = U >>> 13, u = m[8] | 0, l = u & 8191, x = u >>> 13, D = m[9] | 0, K = D & 8191, J = D >>> 13, ce = _[0] | 0, se = ce & 8191, fe = ce >>> 13, Te = _[1] | 0, le = Te & 8191, Ye = Te >>> 13, Xi = _[2] | 0, nt = Xi & 8191, it = Xi >>> 13, Vl = _[3] | 0, ot = Vl & 8191, st = Vl >>> 13, ql = _[4] | 0, at = ql & 8191, ft = ql >>> 13, Wl = _[5] | 0, ct = Wl & 8191, ut = Wl >>> 13, jl = _[6] | 0, ht = jl & 8191, lt = jl >>> 13, zl = _[7] | 0, dt = zl & 8191, pt = zl >>> 13, Xl = _[8] | 0, gt = Xl & 8191, yt = Xl >>> 13, Yl = _[9] | 0, wt = Yl & 8191, vt = Yl >>> 13;
      v.negative = f.negative ^ h.negative, v.length = 19, P = Math.imul(ne, se), p = Math.imul(ne, fe), p = p + Math.imul(V, se) | 0, H = Math.imul(V, fe);
      var Ff = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (Ff >>> 26) | 0, Ff &= 67108863, P = Math.imul(Q, se), p = Math.imul(Q, fe), p = p + Math.imul(ie, se) | 0, H = Math.imul(ie, fe), P = P + Math.imul(ne, le) | 0, p = p + Math.imul(ne, Ye) | 0, p = p + Math.imul(V, le) | 0, H = H + Math.imul(V, Ye) | 0;
      var Kf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (Kf >>> 26) | 0, Kf &= 67108863, P = Math.imul(L, se), p = Math.imul(L, fe), p = p + Math.imul($, se) | 0, H = Math.imul($, fe), P = P + Math.imul(Q, le) | 0, p = p + Math.imul(Q, Ye) | 0, p = p + Math.imul(ie, le) | 0, H = H + Math.imul(ie, Ye) | 0, P = P + Math.imul(ne, nt) | 0, p = p + Math.imul(ne, it) | 0, p = p + Math.imul(V, nt) | 0, H = H + Math.imul(V, it) | 0;
      var Gf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (Gf >>> 26) | 0, Gf &= 67108863, P = Math.imul(re, se), p = Math.imul(re, fe), p = p + Math.imul(ae, se) | 0, H = Math.imul(ae, fe), P = P + Math.imul(L, le) | 0, p = p + Math.imul(L, Ye) | 0, p = p + Math.imul($, le) | 0, H = H + Math.imul($, Ye) | 0, P = P + Math.imul(Q, nt) | 0, p = p + Math.imul(Q, it) | 0, p = p + Math.imul(ie, nt) | 0, H = H + Math.imul(ie, it) | 0, P = P + Math.imul(ne, ot) | 0, p = p + Math.imul(ne, st) | 0, p = p + Math.imul(V, ot) | 0, H = H + Math.imul(V, st) | 0;
      var Vf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (Vf >>> 26) | 0, Vf &= 67108863, P = Math.imul(ge, se), p = Math.imul(ge, fe), p = p + Math.imul(Re, se) | 0, H = Math.imul(Re, fe), P = P + Math.imul(re, le) | 0, p = p + Math.imul(re, Ye) | 0, p = p + Math.imul(ae, le) | 0, H = H + Math.imul(ae, Ye) | 0, P = P + Math.imul(L, nt) | 0, p = p + Math.imul(L, it) | 0, p = p + Math.imul($, nt) | 0, H = H + Math.imul($, it) | 0, P = P + Math.imul(Q, ot) | 0, p = p + Math.imul(Q, st) | 0, p = p + Math.imul(ie, ot) | 0, H = H + Math.imul(ie, st) | 0, P = P + Math.imul(ne, at) | 0, p = p + Math.imul(ne, ft) | 0, p = p + Math.imul(V, at) | 0, H = H + Math.imul(V, ft) | 0;
      var qf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (qf >>> 26) | 0, qf &= 67108863, P = Math.imul(Le, se), p = Math.imul(Le, fe), p = p + Math.imul(De, se) | 0, H = Math.imul(De, fe), P = P + Math.imul(ge, le) | 0, p = p + Math.imul(ge, Ye) | 0, p = p + Math.imul(Re, le) | 0, H = H + Math.imul(Re, Ye) | 0, P = P + Math.imul(re, nt) | 0, p = p + Math.imul(re, it) | 0, p = p + Math.imul(ae, nt) | 0, H = H + Math.imul(ae, it) | 0, P = P + Math.imul(L, ot) | 0, p = p + Math.imul(L, st) | 0, p = p + Math.imul($, ot) | 0, H = H + Math.imul($, st) | 0, P = P + Math.imul(Q, at) | 0, p = p + Math.imul(Q, ft) | 0, p = p + Math.imul(ie, at) | 0, H = H + Math.imul(ie, ft) | 0, P = P + Math.imul(ne, ct) | 0, p = p + Math.imul(ne, ut) | 0, p = p + Math.imul(V, ct) | 0, H = H + Math.imul(V, ut) | 0;
      var Wf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (Wf >>> 26) | 0, Wf &= 67108863, P = Math.imul(Oe, se), p = Math.imul(Oe, fe), p = p + Math.imul(S, se) | 0, H = Math.imul(S, fe), P = P + Math.imul(Le, le) | 0, p = p + Math.imul(Le, Ye) | 0, p = p + Math.imul(De, le) | 0, H = H + Math.imul(De, Ye) | 0, P = P + Math.imul(ge, nt) | 0, p = p + Math.imul(ge, it) | 0, p = p + Math.imul(Re, nt) | 0, H = H + Math.imul(Re, it) | 0, P = P + Math.imul(re, ot) | 0, p = p + Math.imul(re, st) | 0, p = p + Math.imul(ae, ot) | 0, H = H + Math.imul(ae, st) | 0, P = P + Math.imul(L, at) | 0, p = p + Math.imul(L, ft) | 0, p = p + Math.imul($, at) | 0, H = H + Math.imul($, ft) | 0, P = P + Math.imul(Q, ct) | 0, p = p + Math.imul(Q, ut) | 0, p = p + Math.imul(ie, ct) | 0, H = H + Math.imul(ie, ut) | 0, P = P + Math.imul(ne, ht) | 0, p = p + Math.imul(ne, lt) | 0, p = p + Math.imul(V, ht) | 0, H = H + Math.imul(V, lt) | 0;
      var jf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (jf >>> 26) | 0, jf &= 67108863, P = Math.imul(j, se), p = Math.imul(j, fe), p = p + Math.imul(y, se) | 0, H = Math.imul(y, fe), P = P + Math.imul(Oe, le) | 0, p = p + Math.imul(Oe, Ye) | 0, p = p + Math.imul(S, le) | 0, H = H + Math.imul(S, Ye) | 0, P = P + Math.imul(Le, nt) | 0, p = p + Math.imul(Le, it) | 0, p = p + Math.imul(De, nt) | 0, H = H + Math.imul(De, it) | 0, P = P + Math.imul(ge, ot) | 0, p = p + Math.imul(ge, st) | 0, p = p + Math.imul(Re, ot) | 0, H = H + Math.imul(Re, st) | 0, P = P + Math.imul(re, at) | 0, p = p + Math.imul(re, ft) | 0, p = p + Math.imul(ae, at) | 0, H = H + Math.imul(ae, ft) | 0, P = P + Math.imul(L, ct) | 0, p = p + Math.imul(L, ut) | 0, p = p + Math.imul($, ct) | 0, H = H + Math.imul($, ut) | 0, P = P + Math.imul(Q, ht) | 0, p = p + Math.imul(Q, lt) | 0, p = p + Math.imul(ie, ht) | 0, H = H + Math.imul(ie, lt) | 0, P = P + Math.imul(ne, dt) | 0, p = p + Math.imul(ne, pt) | 0, p = p + Math.imul(V, dt) | 0, H = H + Math.imul(V, pt) | 0;
      var zf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (zf >>> 26) | 0, zf &= 67108863, P = Math.imul(l, se), p = Math.imul(l, fe), p = p + Math.imul(x, se) | 0, H = Math.imul(x, fe), P = P + Math.imul(j, le) | 0, p = p + Math.imul(j, Ye) | 0, p = p + Math.imul(y, le) | 0, H = H + Math.imul(y, Ye) | 0, P = P + Math.imul(Oe, nt) | 0, p = p + Math.imul(Oe, it) | 0, p = p + Math.imul(S, nt) | 0, H = H + Math.imul(S, it) | 0, P = P + Math.imul(Le, ot) | 0, p = p + Math.imul(Le, st) | 0, p = p + Math.imul(De, ot) | 0, H = H + Math.imul(De, st) | 0, P = P + Math.imul(ge, at) | 0, p = p + Math.imul(ge, ft) | 0, p = p + Math.imul(Re, at) | 0, H = H + Math.imul(Re, ft) | 0, P = P + Math.imul(re, ct) | 0, p = p + Math.imul(re, ut) | 0, p = p + Math.imul(ae, ct) | 0, H = H + Math.imul(ae, ut) | 0, P = P + Math.imul(L, ht) | 0, p = p + Math.imul(L, lt) | 0, p = p + Math.imul($, ht) | 0, H = H + Math.imul($, lt) | 0, P = P + Math.imul(Q, dt) | 0, p = p + Math.imul(Q, pt) | 0, p = p + Math.imul(ie, dt) | 0, H = H + Math.imul(ie, pt) | 0, P = P + Math.imul(ne, gt) | 0, p = p + Math.imul(ne, yt) | 0, p = p + Math.imul(V, gt) | 0, H = H + Math.imul(V, yt) | 0;
      var Xf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (Xf >>> 26) | 0, Xf &= 67108863, P = Math.imul(K, se), p = Math.imul(K, fe), p = p + Math.imul(J, se) | 0, H = Math.imul(J, fe), P = P + Math.imul(l, le) | 0, p = p + Math.imul(l, Ye) | 0, p = p + Math.imul(x, le) | 0, H = H + Math.imul(x, Ye) | 0, P = P + Math.imul(j, nt) | 0, p = p + Math.imul(j, it) | 0, p = p + Math.imul(y, nt) | 0, H = H + Math.imul(y, it) | 0, P = P + Math.imul(Oe, ot) | 0, p = p + Math.imul(Oe, st) | 0, p = p + Math.imul(S, ot) | 0, H = H + Math.imul(S, st) | 0, P = P + Math.imul(Le, at) | 0, p = p + Math.imul(Le, ft) | 0, p = p + Math.imul(De, at) | 0, H = H + Math.imul(De, ft) | 0, P = P + Math.imul(ge, ct) | 0, p = p + Math.imul(ge, ut) | 0, p = p + Math.imul(Re, ct) | 0, H = H + Math.imul(Re, ut) | 0, P = P + Math.imul(re, ht) | 0, p = p + Math.imul(re, lt) | 0, p = p + Math.imul(ae, ht) | 0, H = H + Math.imul(ae, lt) | 0, P = P + Math.imul(L, dt) | 0, p = p + Math.imul(L, pt) | 0, p = p + Math.imul($, dt) | 0, H = H + Math.imul($, pt) | 0, P = P + Math.imul(Q, gt) | 0, p = p + Math.imul(Q, yt) | 0, p = p + Math.imul(ie, gt) | 0, H = H + Math.imul(ie, yt) | 0, P = P + Math.imul(ne, wt) | 0, p = p + Math.imul(ne, vt) | 0, p = p + Math.imul(V, wt) | 0, H = H + Math.imul(V, vt) | 0;
      var Yf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (Yf >>> 26) | 0, Yf &= 67108863, P = Math.imul(K, le), p = Math.imul(K, Ye), p = p + Math.imul(J, le) | 0, H = Math.imul(J, Ye), P = P + Math.imul(l, nt) | 0, p = p + Math.imul(l, it) | 0, p = p + Math.imul(x, nt) | 0, H = H + Math.imul(x, it) | 0, P = P + Math.imul(j, ot) | 0, p = p + Math.imul(j, st) | 0, p = p + Math.imul(y, ot) | 0, H = H + Math.imul(y, st) | 0, P = P + Math.imul(Oe, at) | 0, p = p + Math.imul(Oe, ft) | 0, p = p + Math.imul(S, at) | 0, H = H + Math.imul(S, ft) | 0, P = P + Math.imul(Le, ct) | 0, p = p + Math.imul(Le, ut) | 0, p = p + Math.imul(De, ct) | 0, H = H + Math.imul(De, ut) | 0, P = P + Math.imul(ge, ht) | 0, p = p + Math.imul(ge, lt) | 0, p = p + Math.imul(Re, ht) | 0, H = H + Math.imul(Re, lt) | 0, P = P + Math.imul(re, dt) | 0, p = p + Math.imul(re, pt) | 0, p = p + Math.imul(ae, dt) | 0, H = H + Math.imul(ae, pt) | 0, P = P + Math.imul(L, gt) | 0, p = p + Math.imul(L, yt) | 0, p = p + Math.imul($, gt) | 0, H = H + Math.imul($, yt) | 0, P = P + Math.imul(Q, wt) | 0, p = p + Math.imul(Q, vt) | 0, p = p + Math.imul(ie, wt) | 0, H = H + Math.imul(ie, vt) | 0;
      var Zf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (Zf >>> 26) | 0, Zf &= 67108863, P = Math.imul(K, nt), p = Math.imul(K, it), p = p + Math.imul(J, nt) | 0, H = Math.imul(J, it), P = P + Math.imul(l, ot) | 0, p = p + Math.imul(l, st) | 0, p = p + Math.imul(x, ot) | 0, H = H + Math.imul(x, st) | 0, P = P + Math.imul(j, at) | 0, p = p + Math.imul(j, ft) | 0, p = p + Math.imul(y, at) | 0, H = H + Math.imul(y, ft) | 0, P = P + Math.imul(Oe, ct) | 0, p = p + Math.imul(Oe, ut) | 0, p = p + Math.imul(S, ct) | 0, H = H + Math.imul(S, ut) | 0, P = P + Math.imul(Le, ht) | 0, p = p + Math.imul(Le, lt) | 0, p = p + Math.imul(De, ht) | 0, H = H + Math.imul(De, lt) | 0, P = P + Math.imul(ge, dt) | 0, p = p + Math.imul(ge, pt) | 0, p = p + Math.imul(Re, dt) | 0, H = H + Math.imul(Re, pt) | 0, P = P + Math.imul(re, gt) | 0, p = p + Math.imul(re, yt) | 0, p = p + Math.imul(ae, gt) | 0, H = H + Math.imul(ae, yt) | 0, P = P + Math.imul(L, wt) | 0, p = p + Math.imul(L, vt) | 0, p = p + Math.imul($, wt) | 0, H = H + Math.imul($, vt) | 0;
      var Jf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (Jf >>> 26) | 0, Jf &= 67108863, P = Math.imul(K, ot), p = Math.imul(K, st), p = p + Math.imul(J, ot) | 0, H = Math.imul(J, st), P = P + Math.imul(l, at) | 0, p = p + Math.imul(l, ft) | 0, p = p + Math.imul(x, at) | 0, H = H + Math.imul(x, ft) | 0, P = P + Math.imul(j, ct) | 0, p = p + Math.imul(j, ut) | 0, p = p + Math.imul(y, ct) | 0, H = H + Math.imul(y, ut) | 0, P = P + Math.imul(Oe, ht) | 0, p = p + Math.imul(Oe, lt) | 0, p = p + Math.imul(S, ht) | 0, H = H + Math.imul(S, lt) | 0, P = P + Math.imul(Le, dt) | 0, p = p + Math.imul(Le, pt) | 0, p = p + Math.imul(De, dt) | 0, H = H + Math.imul(De, pt) | 0, P = P + Math.imul(ge, gt) | 0, p = p + Math.imul(ge, yt) | 0, p = p + Math.imul(Re, gt) | 0, H = H + Math.imul(Re, yt) | 0, P = P + Math.imul(re, wt) | 0, p = p + Math.imul(re, vt) | 0, p = p + Math.imul(ae, wt) | 0, H = H + Math.imul(ae, vt) | 0;
      var Qf = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (Qf >>> 26) | 0, Qf &= 67108863, P = Math.imul(K, at), p = Math.imul(K, ft), p = p + Math.imul(J, at) | 0, H = Math.imul(J, ft), P = P + Math.imul(l, ct) | 0, p = p + Math.imul(l, ut) | 0, p = p + Math.imul(x, ct) | 0, H = H + Math.imul(x, ut) | 0, P = P + Math.imul(j, ht) | 0, p = p + Math.imul(j, lt) | 0, p = p + Math.imul(y, ht) | 0, H = H + Math.imul(y, lt) | 0, P = P + Math.imul(Oe, dt) | 0, p = p + Math.imul(Oe, pt) | 0, p = p + Math.imul(S, dt) | 0, H = H + Math.imul(S, pt) | 0, P = P + Math.imul(Le, gt) | 0, p = p + Math.imul(Le, yt) | 0, p = p + Math.imul(De, gt) | 0, H = H + Math.imul(De, yt) | 0, P = P + Math.imul(ge, wt) | 0, p = p + Math.imul(ge, vt) | 0, p = p + Math.imul(Re, wt) | 0, H = H + Math.imul(Re, vt) | 0;
      var ec = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (ec >>> 26) | 0, ec &= 67108863, P = Math.imul(K, ct), p = Math.imul(K, ut), p = p + Math.imul(J, ct) | 0, H = Math.imul(J, ut), P = P + Math.imul(l, ht) | 0, p = p + Math.imul(l, lt) | 0, p = p + Math.imul(x, ht) | 0, H = H + Math.imul(x, lt) | 0, P = P + Math.imul(j, dt) | 0, p = p + Math.imul(j, pt) | 0, p = p + Math.imul(y, dt) | 0, H = H + Math.imul(y, pt) | 0, P = P + Math.imul(Oe, gt) | 0, p = p + Math.imul(Oe, yt) | 0, p = p + Math.imul(S, gt) | 0, H = H + Math.imul(S, yt) | 0, P = P + Math.imul(Le, wt) | 0, p = p + Math.imul(Le, vt) | 0, p = p + Math.imul(De, wt) | 0, H = H + Math.imul(De, vt) | 0;
      var tc = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (tc >>> 26) | 0, tc &= 67108863, P = Math.imul(K, ht), p = Math.imul(K, lt), p = p + Math.imul(J, ht) | 0, H = Math.imul(J, lt), P = P + Math.imul(l, dt) | 0, p = p + Math.imul(l, pt) | 0, p = p + Math.imul(x, dt) | 0, H = H + Math.imul(x, pt) | 0, P = P + Math.imul(j, gt) | 0, p = p + Math.imul(j, yt) | 0, p = p + Math.imul(y, gt) | 0, H = H + Math.imul(y, yt) | 0, P = P + Math.imul(Oe, wt) | 0, p = p + Math.imul(Oe, vt) | 0, p = p + Math.imul(S, wt) | 0, H = H + Math.imul(S, vt) | 0;
      var rc = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (rc >>> 26) | 0, rc &= 67108863, P = Math.imul(K, dt), p = Math.imul(K, pt), p = p + Math.imul(J, dt) | 0, H = Math.imul(J, pt), P = P + Math.imul(l, gt) | 0, p = p + Math.imul(l, yt) | 0, p = p + Math.imul(x, gt) | 0, H = H + Math.imul(x, yt) | 0, P = P + Math.imul(j, wt) | 0, p = p + Math.imul(j, vt) | 0, p = p + Math.imul(y, wt) | 0, H = H + Math.imul(y, vt) | 0;
      var nc = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (nc >>> 26) | 0, nc &= 67108863, P = Math.imul(K, gt), p = Math.imul(K, yt), p = p + Math.imul(J, gt) | 0, H = Math.imul(J, yt), P = P + Math.imul(l, wt) | 0, p = p + Math.imul(l, vt) | 0, p = p + Math.imul(x, wt) | 0, H = H + Math.imul(x, vt) | 0;
      var ic = (G + P | 0) + ((p & 8191) << 13) | 0;
      G = (H + (p >>> 13) | 0) + (ic >>> 26) | 0, ic &= 67108863, P = Math.imul(K, wt), p = Math.imul(K, vt), p = p + Math.imul(J, wt) | 0, H = Math.imul(J, vt);
      var oc = (G + P | 0) + ((p & 8191) << 13) | 0;
      return G = (H + (p >>> 13) | 0) + (oc >>> 26) | 0, oc &= 67108863, R[0] = Ff, R[1] = Kf, R[2] = Gf, R[3] = Vf, R[4] = qf, R[5] = Wf, R[6] = jf, R[7] = zf, R[8] = Xf, R[9] = Yf, R[10] = Zf, R[11] = Jf, R[12] = Qf, R[13] = ec, R[14] = tc, R[15] = rc, R[16] = nc, R[17] = ic, R[18] = oc, G !== 0 && (R[19] = G, v.length++), v;
    };
    Math.imul || (k = T);
    function F(E, f, h) {
      h.negative = f.negative ^ E.negative, h.length = E.length + f.length;
      for (var v = 0, m = 0, _ = 0; _ < h.length - 1; _++) {
        var R = m;
        m = 0;
        for (var G = v & 67108863, P = Math.min(_, f.length - 1), p = Math.max(0, _ - E.length + 1); p <= P; p++) {
          var H = _ - p, oe = E.words[H] | 0, ne = f.words[p] | 0, V = oe * ne, Y = V & 67108863;
          R = R + (V / 67108864 | 0) | 0, Y = Y + G | 0, G = Y & 67108863, R = R + (Y >>> 26) | 0, m += R >>> 26, R &= 67108863;
        }
        h.words[_] = G, v = R, R = m;
      }
      return v !== 0 ? h.words[_] = v : h.length--, h._strip();
    }
    function X(E, f, h) {
      return F(E, f, h);
    }
    o.prototype.mulTo = function(f, h) {
      var v, m = this.length + f.length;
      return this.length === 10 && f.length === 10 ? v = k(this, f, h) : m < 63 ? v = T(this, f, h) : m < 1024 ? v = F(this, f, h) : v = X(this, f, h), v;
    }, o.prototype.mul = function(f) {
      var h = new o(null);
      return h.words = new Array(this.length + f.length), this.mulTo(f, h);
    }, o.prototype.mulf = function(f) {
      var h = new o(null);
      return h.words = new Array(this.length + f.length), X(this, f, h);
    }, o.prototype.imul = function(f) {
      return this.clone().mulTo(f, this);
    }, o.prototype.imuln = function(f) {
      var h = f < 0;
      h && (f = -f), n(typeof f == "number"), n(f < 67108864);
      for (var v = 0, m = 0; m < this.length; m++) {
        var _ = (this.words[m] | 0) * f, R = (_ & 67108863) + (v & 67108863);
        v >>= 26, v += _ / 67108864 | 0, v += R >>> 26, this.words[m] = R & 67108863;
      }
      return v !== 0 && (this.words[m] = v, this.length++), h ? this.ineg() : this;
    }, o.prototype.muln = function(f) {
      return this.clone().imuln(f);
    }, o.prototype.sqr = function() {
      return this.mul(this);
    }, o.prototype.isqr = function() {
      return this.imul(this.clone());
    }, o.prototype.pow = function(f) {
      var h = M(f);
      if (h.length === 0)
        return new o(1);
      for (var v = this, m = 0; m < h.length && h[m] === 0; m++, v = v.sqr())
        ;
      if (++m < h.length)
        for (var _ = v.sqr(); m < h.length; m++, _ = _.sqr())
          h[m] !== 0 && (v = v.mul(_));
      return v;
    }, o.prototype.iushln = function(f) {
      n(typeof f == "number" && f >= 0);
      var h = f % 26, v = (f - h) / 26, m = 67108863 >>> 26 - h << 26 - h, _;
      if (h !== 0) {
        var R = 0;
        for (_ = 0; _ < this.length; _++) {
          var G = this.words[_] & m, P = (this.words[_] | 0) - G << h;
          this.words[_] = P | R, R = G >>> 26 - h;
        }
        R && (this.words[_] = R, this.length++);
      }
      if (v !== 0) {
        for (_ = this.length - 1; _ >= 0; _--)
          this.words[_ + v] = this.words[_];
        for (_ = 0; _ < v; _++)
          this.words[_] = 0;
        this.length += v;
      }
      return this._strip();
    }, o.prototype.ishln = function(f) {
      return n(this.negative === 0), this.iushln(f);
    }, o.prototype.iushrn = function(f, h, v) {
      n(typeof f == "number" && f >= 0);
      var m;
      h ? m = (h - h % 26) / 26 : m = 0;
      var _ = f % 26, R = Math.min((f - _) / 26, this.length), G = 67108863 ^ 67108863 >>> _ << _, P = v;
      if (m -= R, m = Math.max(0, m), P) {
        for (var p = 0; p < R; p++)
          P.words[p] = this.words[p];
        P.length = R;
      }
      if (R !== 0)
        if (this.length > R)
          for (this.length -= R, p = 0; p < this.length; p++)
            this.words[p] = this.words[p + R];
        else
          this.words[0] = 0, this.length = 1;
      var H = 0;
      for (p = this.length - 1; p >= 0 && (H !== 0 || p >= m); p--) {
        var oe = this.words[p] | 0;
        this.words[p] = H << 26 - _ | oe >>> _, H = oe & G;
      }
      return P && H !== 0 && (P.words[P.length++] = H), this.length === 0 && (this.words[0] = 0, this.length = 1), this._strip();
    }, o.prototype.ishrn = function(f, h, v) {
      return n(this.negative === 0), this.iushrn(f, h, v);
    }, o.prototype.shln = function(f) {
      return this.clone().ishln(f);
    }, o.prototype.ushln = function(f) {
      return this.clone().iushln(f);
    }, o.prototype.shrn = function(f) {
      return this.clone().ishrn(f);
    }, o.prototype.ushrn = function(f) {
      return this.clone().iushrn(f);
    }, o.prototype.testn = function(f) {
      n(typeof f == "number" && f >= 0);
      var h = f % 26, v = (f - h) / 26, m = 1 << h;
      if (this.length <= v)
        return !1;
      var _ = this.words[v];
      return !!(_ & m);
    }, o.prototype.imaskn = function(f) {
      n(typeof f == "number" && f >= 0);
      var h = f % 26, v = (f - h) / 26;
      if (n(this.negative === 0, "imaskn works only with positive numbers"), this.length <= v)
        return this;
      if (h !== 0 && v++, this.length = Math.min(v, this.length), h !== 0) {
        var m = 67108863 ^ 67108863 >>> h << h;
        this.words[this.length - 1] &= m;
      }
      return this._strip();
    }, o.prototype.maskn = function(f) {
      return this.clone().imaskn(f);
    }, o.prototype.iaddn = function(f) {
      return n(typeof f == "number"), n(f < 67108864), f < 0 ? this.isubn(-f) : this.negative !== 0 ? this.length === 1 && (this.words[0] | 0) <= f ? (this.words[0] = f - (this.words[0] | 0), this.negative = 0, this) : (this.negative = 0, this.isubn(f), this.negative = 1, this) : this._iaddn(f);
    }, o.prototype._iaddn = function(f) {
      this.words[0] += f;
      for (var h = 0; h < this.length && this.words[h] >= 67108864; h++)
        this.words[h] -= 67108864, h === this.length - 1 ? this.words[h + 1] = 1 : this.words[h + 1]++;
      return this.length = Math.max(this.length, h + 1), this;
    }, o.prototype.isubn = function(f) {
      if (n(typeof f == "number"), n(f < 67108864), f < 0)
        return this.iaddn(-f);
      if (this.negative !== 0)
        return this.negative = 0, this.iaddn(f), this.negative = 1, this;
      if (this.words[0] -= f, this.length === 1 && this.words[0] < 0)
        this.words[0] = -this.words[0], this.negative = 1;
      else
        for (var h = 0; h < this.length && this.words[h] < 0; h++)
          this.words[h] += 67108864, this.words[h + 1] -= 1;
      return this._strip();
    }, o.prototype.addn = function(f) {
      return this.clone().iaddn(f);
    }, o.prototype.subn = function(f) {
      return this.clone().isubn(f);
    }, o.prototype.iabs = function() {
      return this.negative = 0, this;
    }, o.prototype.abs = function() {
      return this.clone().iabs();
    }, o.prototype._ishlnsubmul = function(f, h, v) {
      var m = f.length + v, _;
      this._expand(m);
      var R, G = 0;
      for (_ = 0; _ < f.length; _++) {
        R = (this.words[_ + v] | 0) + G;
        var P = (f.words[_] | 0) * h;
        R -= P & 67108863, G = (R >> 26) - (P / 67108864 | 0), this.words[_ + v] = R & 67108863;
      }
      for (; _ < this.length - v; _++)
        R = (this.words[_ + v] | 0) + G, G = R >> 26, this.words[_ + v] = R & 67108863;
      if (G === 0)
        return this._strip();
      for (n(G === -1), G = 0, _ = 0; _ < this.length; _++)
        R = -(this.words[_] | 0) + G, G = R >> 26, this.words[_] = R & 67108863;
      return this.negative = 1, this._strip();
    }, o.prototype._wordDiv = function(f, h) {
      var v = this.length - f.length, m = this.clone(), _ = f, R = _.words[_.length - 1] | 0, G = this._countBits(R);
      v = 26 - G, v !== 0 && (_ = _.ushln(v), m.iushln(v), R = _.words[_.length - 1] | 0);
      var P = m.length - _.length, p;
      if (h !== "mod") {
        p = new o(null), p.length = P + 1, p.words = new Array(p.length);
        for (var H = 0; H < p.length; H++)
          p.words[H] = 0;
      }
      var oe = m.clone()._ishlnsubmul(_, 1, P);
      oe.negative === 0 && (m = oe, p && (p.words[P] = 1));
      for (var ne = P - 1; ne >= 0; ne--) {
        var V = (m.words[_.length + ne] | 0) * 67108864 + (m.words[_.length + ne - 1] | 0);
        for (V = Math.min(V / R | 0, 67108863), m._ishlnsubmul(_, V, ne); m.negative !== 0; )
          V--, m.negative = 0, m._ishlnsubmul(_, 1, ne), m.isZero() || (m.negative ^= 1);
        p && (p.words[ne] = V);
      }
      return p && p._strip(), m._strip(), h !== "div" && v !== 0 && m.iushrn(v), {
        div: p || null,
        mod: m
      };
    }, o.prototype.divmod = function(f, h, v) {
      if (n(!f.isZero()), this.isZero())
        return {
          div: new o(0),
          mod: new o(0)
        };
      var m, _, R;
      return this.negative !== 0 && f.negative === 0 ? (R = this.neg().divmod(f, h), h !== "mod" && (m = R.div.neg()), h !== "div" && (_ = R.mod.neg(), v && _.negative !== 0 && _.iadd(f)), {
        div: m,
        mod: _
      }) : this.negative === 0 && f.negative !== 0 ? (R = this.divmod(f.neg(), h), h !== "mod" && (m = R.div.neg()), {
        div: m,
        mod: R.mod
      }) : this.negative & f.negative ? (R = this.neg().divmod(f.neg(), h), h !== "div" && (_ = R.mod.neg(), v && _.negative !== 0 && _.isub(f)), {
        div: R.div,
        mod: _
      }) : f.length > this.length || this.cmp(f) < 0 ? {
        div: new o(0),
        mod: this
      } : f.length === 1 ? h === "div" ? {
        div: this.divn(f.words[0]),
        mod: null
      } : h === "mod" ? {
        div: null,
        mod: new o(this.modrn(f.words[0]))
      } : {
        div: this.divn(f.words[0]),
        mod: new o(this.modrn(f.words[0]))
      } : this._wordDiv(f, h);
    }, o.prototype.div = function(f) {
      return this.divmod(f, "div", !1).div;
    }, o.prototype.mod = function(f) {
      return this.divmod(f, "mod", !1).mod;
    }, o.prototype.umod = function(f) {
      return this.divmod(f, "mod", !0).mod;
    }, o.prototype.divRound = function(f) {
      var h = this.divmod(f);
      if (h.mod.isZero())
        return h.div;
      var v = h.div.negative !== 0 ? h.mod.isub(f) : h.mod, m = f.ushrn(1), _ = f.andln(1), R = v.cmp(m);
      return R < 0 || _ === 1 && R === 0 ? h.div : h.div.negative !== 0 ? h.div.isubn(1) : h.div.iaddn(1);
    }, o.prototype.modrn = function(f) {
      var h = f < 0;
      h && (f = -f), n(f <= 67108863);
      for (var v = (1 << 26) % f, m = 0, _ = this.length - 1; _ >= 0; _--)
        m = (v * m + (this.words[_] | 0)) % f;
      return h ? -m : m;
    }, o.prototype.modn = function(f) {
      return this.modrn(f);
    }, o.prototype.idivn = function(f) {
      var h = f < 0;
      h && (f = -f), n(f <= 67108863);
      for (var v = 0, m = this.length - 1; m >= 0; m--) {
        var _ = (this.words[m] | 0) + v * 67108864;
        this.words[m] = _ / f | 0, v = _ % f;
      }
      return this._strip(), h ? this.ineg() : this;
    }, o.prototype.divn = function(f) {
      return this.clone().idivn(f);
    }, o.prototype.egcd = function(f) {
      n(f.negative === 0), n(!f.isZero());
      var h = this, v = f.clone();
      h.negative !== 0 ? h = h.umod(f) : h = h.clone();
      for (var m = new o(1), _ = new o(0), R = new o(0), G = new o(1), P = 0; h.isEven() && v.isEven(); )
        h.iushrn(1), v.iushrn(1), ++P;
      for (var p = v.clone(), H = h.clone(); !h.isZero(); ) {
        for (var oe = 0, ne = 1; !(h.words[0] & ne) && oe < 26; ++oe, ne <<= 1)
          ;
        if (oe > 0)
          for (h.iushrn(oe); oe-- > 0; )
            (m.isOdd() || _.isOdd()) && (m.iadd(p), _.isub(H)), m.iushrn(1), _.iushrn(1);
        for (var V = 0, Y = 1; !(v.words[0] & Y) && V < 26; ++V, Y <<= 1)
          ;
        if (V > 0)
          for (v.iushrn(V); V-- > 0; )
            (R.isOdd() || G.isOdd()) && (R.iadd(p), G.isub(H)), R.iushrn(1), G.iushrn(1);
        h.cmp(v) >= 0 ? (h.isub(v), m.isub(R), _.isub(G)) : (v.isub(h), R.isub(m), G.isub(_));
      }
      return {
        a: R,
        b: G,
        gcd: v.iushln(P)
      };
    }, o.prototype._invmp = function(f) {
      n(f.negative === 0), n(!f.isZero());
      var h = this, v = f.clone();
      h.negative !== 0 ? h = h.umod(f) : h = h.clone();
      for (var m = new o(1), _ = new o(0), R = v.clone(); h.cmpn(1) > 0 && v.cmpn(1) > 0; ) {
        for (var G = 0, P = 1; !(h.words[0] & P) && G < 26; ++G, P <<= 1)
          ;
        if (G > 0)
          for (h.iushrn(G); G-- > 0; )
            m.isOdd() && m.iadd(R), m.iushrn(1);
        for (var p = 0, H = 1; !(v.words[0] & H) && p < 26; ++p, H <<= 1)
          ;
        if (p > 0)
          for (v.iushrn(p); p-- > 0; )
            _.isOdd() && _.iadd(R), _.iushrn(1);
        h.cmp(v) >= 0 ? (h.isub(v), m.isub(_)) : (v.isub(h), _.isub(m));
      }
      var oe;
      return h.cmpn(1) === 0 ? oe = m : oe = _, oe.cmpn(0) < 0 && oe.iadd(f), oe;
    }, o.prototype.gcd = function(f) {
      if (this.isZero())
        return f.abs();
      if (f.isZero())
        return this.abs();
      var h = this.clone(), v = f.clone();
      h.negative = 0, v.negative = 0;
      for (var m = 0; h.isEven() && v.isEven(); m++)
        h.iushrn(1), v.iushrn(1);
      do {
        for (; h.isEven(); )
          h.iushrn(1);
        for (; v.isEven(); )
          v.iushrn(1);
        var _ = h.cmp(v);
        if (_ < 0) {
          var R = h;
          h = v, v = R;
        } else if (_ === 0 || v.cmpn(1) === 0)
          break;
        h.isub(v);
      } while (!0);
      return v.iushln(m);
    }, o.prototype.invm = function(f) {
      return this.egcd(f).a.umod(f);
    }, o.prototype.isEven = function() {
      return (this.words[0] & 1) === 0;
    }, o.prototype.isOdd = function() {
      return (this.words[0] & 1) === 1;
    }, o.prototype.andln = function(f) {
      return this.words[0] & f;
    }, o.prototype.bincn = function(f) {
      n(typeof f == "number");
      var h = f % 26, v = (f - h) / 26, m = 1 << h;
      if (this.length <= v)
        return this._expand(v + 1), this.words[v] |= m, this;
      for (var _ = m, R = v; _ !== 0 && R < this.length; R++) {
        var G = this.words[R] | 0;
        G += _, _ = G >>> 26, G &= 67108863, this.words[R] = G;
      }
      return _ !== 0 && (this.words[R] = _, this.length++), this;
    }, o.prototype.isZero = function() {
      return this.length === 1 && this.words[0] === 0;
    }, o.prototype.cmpn = function(f) {
      var h = f < 0;
      if (this.negative !== 0 && !h)
        return -1;
      if (this.negative === 0 && h)
        return 1;
      this._strip();
      var v;
      if (this.length > 1)
        v = 1;
      else {
        h && (f = -f), n(f <= 67108863, "Number is too big");
        var m = this.words[0] | 0;
        v = m === f ? 0 : m < f ? -1 : 1;
      }
      return this.negative !== 0 ? -v | 0 : v;
    }, o.prototype.cmp = function(f) {
      if (this.negative !== 0 && f.negative === 0)
        return -1;
      if (this.negative === 0 && f.negative !== 0)
        return 1;
      var h = this.ucmp(f);
      return this.negative !== 0 ? -h | 0 : h;
    }, o.prototype.ucmp = function(f) {
      if (this.length > f.length)
        return 1;
      if (this.length < f.length)
        return -1;
      for (var h = 0, v = this.length - 1; v >= 0; v--) {
        var m = this.words[v] | 0, _ = f.words[v] | 0;
        if (m !== _) {
          m < _ ? h = -1 : m > _ && (h = 1);
          break;
        }
      }
      return h;
    }, o.prototype.gtn = function(f) {
      return this.cmpn(f) === 1;
    }, o.prototype.gt = function(f) {
      return this.cmp(f) === 1;
    }, o.prototype.gten = function(f) {
      return this.cmpn(f) >= 0;
    }, o.prototype.gte = function(f) {
      return this.cmp(f) >= 0;
    }, o.prototype.ltn = function(f) {
      return this.cmpn(f) === -1;
    }, o.prototype.lt = function(f) {
      return this.cmp(f) === -1;
    }, o.prototype.lten = function(f) {
      return this.cmpn(f) <= 0;
    }, o.prototype.lte = function(f) {
      return this.cmp(f) <= 0;
    }, o.prototype.eqn = function(f) {
      return this.cmpn(f) === 0;
    }, o.prototype.eq = function(f) {
      return this.cmp(f) === 0;
    }, o.red = function(f) {
      return new q(f);
    }, o.prototype.toRed = function(f) {
      return n(!this.red, "Already a number in reduction context"), n(this.negative === 0, "red works only with positives"), f.convertTo(this)._forceRed(f);
    }, o.prototype.fromRed = function() {
      return n(this.red, "fromRed works only with numbers in reduction context"), this.red.convertFrom(this);
    }, o.prototype._forceRed = function(f) {
      return this.red = f, this;
    }, o.prototype.forceRed = function(f) {
      return n(!this.red, "Already a number in reduction context"), this._forceRed(f);
    }, o.prototype.redAdd = function(f) {
      return n(this.red, "redAdd works only with red numbers"), this.red.add(this, f);
    }, o.prototype.redIAdd = function(f) {
      return n(this.red, "redIAdd works only with red numbers"), this.red.iadd(this, f);
    }, o.prototype.redSub = function(f) {
      return n(this.red, "redSub works only with red numbers"), this.red.sub(this, f);
    }, o.prototype.redISub = function(f) {
      return n(this.red, "redISub works only with red numbers"), this.red.isub(this, f);
    }, o.prototype.redShl = function(f) {
      return n(this.red, "redShl works only with red numbers"), this.red.shl(this, f);
    }, o.prototype.redMul = function(f) {
      return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, f), this.red.mul(this, f);
    }, o.prototype.redIMul = function(f) {
      return n(this.red, "redMul works only with red numbers"), this.red._verify2(this, f), this.red.imul(this, f);
    }, o.prototype.redSqr = function() {
      return n(this.red, "redSqr works only with red numbers"), this.red._verify1(this), this.red.sqr(this);
    }, o.prototype.redISqr = function() {
      return n(this.red, "redISqr works only with red numbers"), this.red._verify1(this), this.red.isqr(this);
    }, o.prototype.redSqrt = function() {
      return n(this.red, "redSqrt works only with red numbers"), this.red._verify1(this), this.red.sqrt(this);
    }, o.prototype.redInvm = function() {
      return n(this.red, "redInvm works only with red numbers"), this.red._verify1(this), this.red.invm(this);
    }, o.prototype.redNeg = function() {
      return n(this.red, "redNeg works only with red numbers"), this.red._verify1(this), this.red.neg(this);
    }, o.prototype.redPow = function(f) {
      return n(this.red && !f.red, "redPow(normalNum)"), this.red._verify1(this), this.red.pow(this, f);
    };
    var Z = {
      k256: null,
      p224: null,
      p192: null,
      p25519: null
    };
    function z(E, f) {
      this.name = E, this.p = new o(f, 16), this.n = this.p.bitLength(), this.k = new o(1).iushln(this.n).isub(this.p), this.tmp = this._tmp();
    }
    z.prototype._tmp = function() {
      var f = new o(null);
      return f.words = new Array(Math.ceil(this.n / 13)), f;
    }, z.prototype.ireduce = function(f) {
      var h = f, v;
      do
        this.split(h, this.tmp), h = this.imulK(h), h = h.iadd(this.tmp), v = h.bitLength();
      while (v > this.n);
      var m = v < this.n ? -1 : h.ucmp(this.p);
      return m === 0 ? (h.words[0] = 0, h.length = 1) : m > 0 ? h.isub(this.p) : h.strip !== void 0 ? h.strip() : h._strip(), h;
    }, z.prototype.split = function(f, h) {
      f.iushrn(this.n, 0, h);
    }, z.prototype.imulK = function(f) {
      return f.imul(this.k);
    };
    function te() {
      z.call(
        this,
        "k256",
        "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
      );
    }
    i(te, z), te.prototype.split = function(f, h) {
      for (var v = 4194303, m = Math.min(f.length, 9), _ = 0; _ < m; _++)
        h.words[_] = f.words[_];
      if (h.length = m, f.length <= 9) {
        f.words[0] = 0, f.length = 1;
        return;
      }
      var R = f.words[9];
      for (h.words[h.length++] = R & v, _ = 10; _ < f.length; _++) {
        var G = f.words[_] | 0;
        f.words[_ - 10] = (G & v) << 4 | R >>> 22, R = G;
      }
      R >>>= 22, f.words[_ - 10] = R, R === 0 && f.length > 10 ? f.length -= 10 : f.length -= 9;
    }, te.prototype.imulK = function(f) {
      f.words[f.length] = 0, f.words[f.length + 1] = 0, f.length += 2;
      for (var h = 0, v = 0; v < f.length; v++) {
        var m = f.words[v] | 0;
        h += m * 977, f.words[v] = h & 67108863, h = m * 64 + (h / 67108864 | 0);
      }
      return f.words[f.length - 1] === 0 && (f.length--, f.words[f.length - 1] === 0 && f.length--), f;
    };
    function b() {
      z.call(
        this,
        "p224",
        "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
      );
    }
    i(b, z);
    function A() {
      z.call(
        this,
        "p192",
        "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
      );
    }
    i(A, z);
    function C() {
      z.call(
        this,
        "25519",
        "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
      );
    }
    i(C, z), C.prototype.imulK = function(f) {
      for (var h = 0, v = 0; v < f.length; v++) {
        var m = (f.words[v] | 0) * 19 + h, _ = m & 67108863;
        m >>>= 26, f.words[v] = _, h = m;
      }
      return h !== 0 && (f.words[f.length++] = h), f;
    }, o._prime = function(f) {
      if (Z[f])
        return Z[f];
      var h;
      if (f === "k256")
        h = new te();
      else if (f === "p224")
        h = new b();
      else if (f === "p192")
        h = new A();
      else if (f === "p25519")
        h = new C();
      else
        throw new Error("Unknown prime " + f);
      return Z[f] = h, h;
    };
    function q(E) {
      if (typeof E == "string") {
        var f = o._prime(E);
        this.m = f.p, this.prime = f;
      } else
        n(E.gtn(1), "modulus must be greater than 1"), this.m = E, this.prime = null;
    }
    q.prototype._verify1 = function(f) {
      n(f.negative === 0, "red works only with positives"), n(f.red, "red works only with red numbers");
    }, q.prototype._verify2 = function(f, h) {
      n((f.negative | h.negative) === 0, "red works only with positives"), n(
        f.red && f.red === h.red,
        "red works only with red numbers"
      );
    }, q.prototype.imod = function(f) {
      return this.prime ? this.prime.ireduce(f)._forceRed(this) : (w(f, f.umod(this.m)._forceRed(this)), f);
    }, q.prototype.neg = function(f) {
      return f.isZero() ? f.clone() : this.m.sub(f)._forceRed(this);
    }, q.prototype.add = function(f, h) {
      this._verify2(f, h);
      var v = f.add(h);
      return v.cmp(this.m) >= 0 && v.isub(this.m), v._forceRed(this);
    }, q.prototype.iadd = function(f, h) {
      this._verify2(f, h);
      var v = f.iadd(h);
      return v.cmp(this.m) >= 0 && v.isub(this.m), v;
    }, q.prototype.sub = function(f, h) {
      this._verify2(f, h);
      var v = f.sub(h);
      return v.cmpn(0) < 0 && v.iadd(this.m), v._forceRed(this);
    }, q.prototype.isub = function(f, h) {
      this._verify2(f, h);
      var v = f.isub(h);
      return v.cmpn(0) < 0 && v.iadd(this.m), v;
    }, q.prototype.shl = function(f, h) {
      return this._verify1(f), this.imod(f.ushln(h));
    }, q.prototype.imul = function(f, h) {
      return this._verify2(f, h), this.imod(f.imul(h));
    }, q.prototype.mul = function(f, h) {
      return this._verify2(f, h), this.imod(f.mul(h));
    }, q.prototype.isqr = function(f) {
      return this.imul(f, f.clone());
    }, q.prototype.sqr = function(f) {
      return this.mul(f, f);
    }, q.prototype.sqrt = function(f) {
      if (f.isZero())
        return f.clone();
      var h = this.m.andln(3);
      if (n(h % 2 === 1), h === 3) {
        var v = this.m.add(new o(1)).iushrn(2);
        return this.pow(f, v);
      }
      for (var m = this.m.subn(1), _ = 0; !m.isZero() && m.andln(1) === 0; )
        _++, m.iushrn(1);
      n(!m.isZero());
      var R = new o(1).toRed(this), G = R.redNeg(), P = this.m.subn(1).iushrn(1), p = this.m.bitLength();
      for (p = new o(2 * p * p).toRed(this); this.pow(p, P).cmp(G) !== 0; )
        p.redIAdd(G);
      for (var H = this.pow(p, m), oe = this.pow(f, m.addn(1).iushrn(1)), ne = this.pow(f, m), V = _; ne.cmp(R) !== 0; ) {
        for (var Y = ne, Q = 0; Y.cmp(R) !== 0; Q++)
          Y = Y.redSqr();
        n(Q < V);
        var ie = this.pow(H, new o(1).iushln(V - Q - 1));
        oe = oe.redMul(ie), H = ie.redSqr(), ne = ne.redMul(H), V = Q;
      }
      return oe;
    }, q.prototype.invm = function(f) {
      var h = f._invmp(this.m);
      return h.negative !== 0 ? (h.negative = 0, this.imod(h).redNeg()) : this.imod(h);
    }, q.prototype.pow = function(f, h) {
      if (h.isZero())
        return new o(1).toRed(this);
      if (h.cmpn(1) === 0)
        return f.clone();
      var v = 4, m = new Array(1 << v);
      m[0] = new o(1).toRed(this), m[1] = f;
      for (var _ = 2; _ < m.length; _++)
        m[_] = this.mul(m[_ - 1], f);
      var R = m[0], G = 0, P = 0, p = h.bitLength() % 26;
      for (p === 0 && (p = 26), _ = h.length - 1; _ >= 0; _--) {
        for (var H = h.words[_], oe = p - 1; oe >= 0; oe--) {
          var ne = H >> oe & 1;
          if (R !== m[0] && (R = this.sqr(R)), ne === 0 && G === 0) {
            P = 0;
            continue;
          }
          G <<= 1, G |= ne, P++, !(P !== v && (_ !== 0 || oe !== 0)) && (R = this.mul(R, m[G]), P = 0, G = 0);
        }
        p = 26;
      }
      return R;
    }, q.prototype.convertTo = function(f) {
      var h = f.umod(this.m);
      return h === f ? h.clone() : h;
    }, q.prototype.convertFrom = function(f) {
      var h = f.clone();
      return h.red = null, h;
    }, o.mont = function(f) {
      return new W(f);
    };
    function W(E) {
      q.call(this, E), this.shift = this.m.bitLength(), this.shift % 26 !== 0 && (this.shift += 26 - this.shift % 26), this.r = new o(1).iushln(this.shift), this.r2 = this.imod(this.r.sqr()), this.rinv = this.r._invmp(this.m), this.minv = this.rinv.mul(this.r).isubn(1).div(this.m), this.minv = this.minv.umod(this.r), this.minv = this.r.sub(this.minv);
    }
    i(W, q), W.prototype.convertTo = function(f) {
      return this.imod(f.ushln(this.shift));
    }, W.prototype.convertFrom = function(f) {
      var h = this.imod(f.mul(this.rinv));
      return h.red = null, h;
    }, W.prototype.imul = function(f, h) {
      if (f.isZero() || h.isZero())
        return f.words[0] = 0, f.length = 1, f;
      var v = f.imul(h), m = v.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), _ = v.isub(m).iushrn(this.shift), R = _;
      return _.cmp(this.m) >= 0 ? R = _.isub(this.m) : _.cmpn(0) < 0 && (R = _.iadd(this.m)), R._forceRed(this);
    }, W.prototype.mul = function(f, h) {
      if (f.isZero() || h.isZero())
        return new o(0)._forceRed(this);
      var v = f.mul(h), m = v.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m), _ = v.isub(m).iushrn(this.shift), R = _;
      return _.cmp(this.m) >= 0 ? R = _.isub(this.m) : _.cmpn(0) < 0 && (R = _.iadd(this.m)), R._forceRed(this);
    }, W.prototype.invm = function(f) {
      var h = this.imod(f._invmp(this.m).mul(this.r2));
      return h._forceRed(this);
    };
  })(e, En);
})(Yu);
var Qw = Yu.exports;
const ev = /* @__PURE__ */ op(Qw), tv = "logger/5.7.0";
let Zl = !1, Jl = !1;
const oa = { debug: 1, default: 2, info: 2, warning: 3, error: 4, off: 5 };
let Ql = oa.default, sc = null;
function rv() {
  try {
    const e = [];
    if (["NFD", "NFC", "NFKD", "NFKC"].forEach((t) => {
      try {
        if ("test".normalize(t) !== "test")
          throw new Error("bad normalize");
      } catch {
        e.push(t);
      }
    }), e.length)
      throw new Error("missing " + e.join(", "));
    if (String.fromCharCode(233).normalize("NFD") !== String.fromCharCode(101, 769))
      throw new Error("broken implementation");
  } catch (e) {
    return e.message;
  }
  return null;
}
const e0 = rv();
var ou;
(function(e) {
  e.DEBUG = "DEBUG", e.INFO = "INFO", e.WARNING = "WARNING", e.ERROR = "ERROR", e.OFF = "OFF";
})(ou || (ou = {}));
var Mr;
(function(e) {
  e.UNKNOWN_ERROR = "UNKNOWN_ERROR", e.NOT_IMPLEMENTED = "NOT_IMPLEMENTED", e.UNSUPPORTED_OPERATION = "UNSUPPORTED_OPERATION", e.NETWORK_ERROR = "NETWORK_ERROR", e.SERVER_ERROR = "SERVER_ERROR", e.TIMEOUT = "TIMEOUT", e.BUFFER_OVERRUN = "BUFFER_OVERRUN", e.NUMERIC_FAULT = "NUMERIC_FAULT", e.MISSING_NEW = "MISSING_NEW", e.INVALID_ARGUMENT = "INVALID_ARGUMENT", e.MISSING_ARGUMENT = "MISSING_ARGUMENT", e.UNEXPECTED_ARGUMENT = "UNEXPECTED_ARGUMENT", e.CALL_EXCEPTION = "CALL_EXCEPTION", e.INSUFFICIENT_FUNDS = "INSUFFICIENT_FUNDS", e.NONCE_EXPIRED = "NONCE_EXPIRED", e.REPLACEMENT_UNDERPRICED = "REPLACEMENT_UNDERPRICED", e.UNPREDICTABLE_GAS_LIMIT = "UNPREDICTABLE_GAS_LIMIT", e.TRANSACTION_REPLACED = "TRANSACTION_REPLACED", e.ACTION_REJECTED = "ACTION_REJECTED";
})(Mr || (Mr = {}));
const t0 = "0123456789abcdef";
class $e {
  constructor(t) {
    Object.defineProperty(this, "version", {
      enumerable: !0,
      value: t,
      writable: !1
    });
  }
  _log(t, r) {
    const n = t.toLowerCase();
    oa[n] == null && this.throwArgumentError("invalid log level name", "logLevel", t), !(Ql > oa[n]) && console.log.apply(console, r);
  }
  debug(...t) {
    this._log($e.levels.DEBUG, t);
  }
  info(...t) {
    this._log($e.levels.INFO, t);
  }
  warn(...t) {
    this._log($e.levels.WARNING, t);
  }
  makeError(t, r, n) {
    if (Jl)
      return this.makeError("censored error", r, {});
    r || (r = $e.errors.UNKNOWN_ERROR), n || (n = {});
    const i = [];
    Object.keys(n).forEach((c) => {
      const d = n[c];
      try {
        if (d instanceof Uint8Array) {
          let w = "";
          for (let g = 0; g < d.length; g++)
            w += t0[d[g] >> 4], w += t0[d[g] & 15];
          i.push(c + "=Uint8Array(0x" + w + ")");
        } else
          i.push(c + "=" + JSON.stringify(d));
      } catch {
        i.push(c + "=" + JSON.stringify(n[c].toString()));
      }
    }), i.push(`code=${r}`), i.push(`version=${this.version}`);
    const o = t;
    let s = "";
    switch (r) {
      case Mr.NUMERIC_FAULT: {
        s = "NUMERIC_FAULT";
        const c = t;
        switch (c) {
          case "overflow":
          case "underflow":
          case "division-by-zero":
            s += "-" + c;
            break;
          case "negative-power":
          case "negative-width":
            s += "-unsupported";
            break;
          case "unbound-bitwise-result":
            s += "-unbound-result";
            break;
        }
        break;
      }
      case Mr.CALL_EXCEPTION:
      case Mr.INSUFFICIENT_FUNDS:
      case Mr.MISSING_NEW:
      case Mr.NONCE_EXPIRED:
      case Mr.REPLACEMENT_UNDERPRICED:
      case Mr.TRANSACTION_REPLACED:
      case Mr.UNPREDICTABLE_GAS_LIMIT:
        s = r;
        break;
    }
    s && (t += " [ See: https://links.ethers.org/v5-errors-" + s + " ]"), i.length && (t += " (" + i.join(", ") + ")");
    const a = new Error(t);
    return a.reason = o, a.code = r, Object.keys(n).forEach(function(c) {
      a[c] = n[c];
    }), a;
  }
  throwError(t, r, n) {
    throw this.makeError(t, r, n);
  }
  throwArgumentError(t, r, n) {
    return this.throwError(t, $e.errors.INVALID_ARGUMENT, {
      argument: r,
      value: n
    });
  }
  assert(t, r, n, i) {
    t || this.throwError(r, n, i);
  }
  assertArgument(t, r, n, i) {
    t || this.throwArgumentError(r, n, i);
  }
  checkNormalize(t) {
    e0 && this.throwError("platform missing String.prototype.normalize", $e.errors.UNSUPPORTED_OPERATION, {
      operation: "String.prototype.normalize",
      form: e0
    });
  }
  checkSafeUint53(t, r) {
    typeof t == "number" && (r == null && (r = "value not safe"), (t < 0 || t >= 9007199254740991) && this.throwError(r, $e.errors.NUMERIC_FAULT, {
      operation: "checkSafeInteger",
      fault: "out-of-safe-range",
      value: t
    }), t % 1 && this.throwError(r, $e.errors.NUMERIC_FAULT, {
      operation: "checkSafeInteger",
      fault: "non-integer",
      value: t
    }));
  }
  checkArgumentCount(t, r, n) {
    n ? n = ": " + n : n = "", t < r && this.throwError("missing argument" + n, $e.errors.MISSING_ARGUMENT, {
      count: t,
      expectedCount: r
    }), t > r && this.throwError("too many arguments" + n, $e.errors.UNEXPECTED_ARGUMENT, {
      count: t,
      expectedCount: r
    });
  }
  checkNew(t, r) {
    (t === Object || t == null) && this.throwError("missing new", $e.errors.MISSING_NEW, { name: r.name });
  }
  checkAbstract(t, r) {
    t === r ? this.throwError("cannot instantiate abstract class " + JSON.stringify(r.name) + " directly; use a sub-class", $e.errors.UNSUPPORTED_OPERATION, { name: t.name, operation: "new" }) : (t === Object || t == null) && this.throwError("missing new", $e.errors.MISSING_NEW, { name: r.name });
  }
  static globalLogger() {
    return sc || (sc = new $e(tv)), sc;
  }
  static setCensorship(t, r) {
    if (!t && r && this.globalLogger().throwError("cannot permanently disable censorship", $e.errors.UNSUPPORTED_OPERATION, {
      operation: "setCensorship"
    }), Zl) {
      if (!t)
        return;
      this.globalLogger().throwError("error censorship permanent", $e.errors.UNSUPPORTED_OPERATION, {
        operation: "setCensorship"
      });
    }
    Jl = !!t, Zl = !!r;
  }
  static setLogLevel(t) {
    const r = oa[t.toLowerCase()];
    if (r == null) {
      $e.globalLogger().warn("invalid log level - " + t);
      return;
    }
    Ql = r;
  }
  static from(t) {
    return new $e(t);
  }
}
$e.errors = Mr;
$e.levels = ou;
const nv = "bytes/5.7.0", ac = new $e(nv);
function iv(e) {
  return !!e.toHexString;
}
function r0(e) {
  return typeof e == "number" && e == e && e % 1 === 0;
}
function sp(e) {
  if (e == null)
    return !1;
  if (e.constructor === Uint8Array)
    return !0;
  if (typeof e == "string" || !r0(e.length) || e.length < 0)
    return !1;
  for (let t = 0; t < e.length; t++) {
    const r = e[t];
    if (!r0(r) || r < 0 || r >= 256)
      return !1;
  }
  return !0;
}
function su(e, t) {
  return !(typeof e != "string" || !e.match(/^0x[0-9A-Fa-f]*$/) || t && e.length !== 2 + 2 * t);
}
const fc = "0123456789abcdef";
function ov(e, t) {
  if (t || (t = {}), typeof e == "number") {
    ac.checkSafeUint53(e, "invalid hexlify value");
    let r = "";
    for (; e; )
      r = fc[e & 15] + r, e = Math.floor(e / 16);
    return r.length ? (r.length % 2 && (r = "0" + r), "0x" + r) : "0x00";
  }
  if (typeof e == "bigint")
    return e = e.toString(16), e.length % 2 ? "0x0" + e : "0x" + e;
  if (t.allowMissingPrefix && typeof e == "string" && e.substring(0, 2) !== "0x" && (e = "0x" + e), iv(e))
    return e.toHexString();
  if (su(e))
    return e.length % 2 && (t.hexPad === "left" ? e = "0x0" + e.substring(2) : t.hexPad === "right" ? e += "0" : ac.throwArgumentError("hex data is odd-length", "value", e)), e.toLowerCase();
  if (sp(e)) {
    let r = "0x";
    for (let n = 0; n < e.length; n++) {
      let i = e[n];
      r += fc[(i & 240) >> 4] + fc[i & 15];
    }
    return r;
  }
  return ac.throwArgumentError("invalid hexlify value", "value", e);
}
const sv = "bignumber/5.7.0";
var au = ev.BN;
const ln = new $e(sv), cc = {}, n0 = 9007199254740991;
let i0 = !1, Fa = class Rr {
  constructor(t, r) {
    t !== cc && ln.throwError("cannot call constructor directly; use BigNumber.from", $e.errors.UNSUPPORTED_OPERATION, {
      operation: "new (BigNumber)"
    }), this._hex = r, this._isBigNumber = !0, Object.freeze(this);
  }
  fromTwos(t) {
    return ir(Be(this).fromTwos(t));
  }
  toTwos(t) {
    return ir(Be(this).toTwos(t));
  }
  abs() {
    return this._hex[0] === "-" ? Rr.from(this._hex.substring(1)) : this;
  }
  add(t) {
    return ir(Be(this).add(Be(t)));
  }
  sub(t) {
    return ir(Be(this).sub(Be(t)));
  }
  div(t) {
    return Rr.from(t).isZero() && dr("division-by-zero", "div"), ir(Be(this).div(Be(t)));
  }
  mul(t) {
    return ir(Be(this).mul(Be(t)));
  }
  mod(t) {
    const r = Be(t);
    return r.isNeg() && dr("division-by-zero", "mod"), ir(Be(this).umod(r));
  }
  pow(t) {
    const r = Be(t);
    return r.isNeg() && dr("negative-power", "pow"), ir(Be(this).pow(r));
  }
  and(t) {
    const r = Be(t);
    return (this.isNegative() || r.isNeg()) && dr("unbound-bitwise-result", "and"), ir(Be(this).and(r));
  }
  or(t) {
    const r = Be(t);
    return (this.isNegative() || r.isNeg()) && dr("unbound-bitwise-result", "or"), ir(Be(this).or(r));
  }
  xor(t) {
    const r = Be(t);
    return (this.isNegative() || r.isNeg()) && dr("unbound-bitwise-result", "xor"), ir(Be(this).xor(r));
  }
  mask(t) {
    return (this.isNegative() || t < 0) && dr("negative-width", "mask"), ir(Be(this).maskn(t));
  }
  shl(t) {
    return (this.isNegative() || t < 0) && dr("negative-width", "shl"), ir(Be(this).shln(t));
  }
  shr(t) {
    return (this.isNegative() || t < 0) && dr("negative-width", "shr"), ir(Be(this).shrn(t));
  }
  eq(t) {
    return Be(this).eq(Be(t));
  }
  lt(t) {
    return Be(this).lt(Be(t));
  }
  lte(t) {
    return Be(this).lte(Be(t));
  }
  gt(t) {
    return Be(this).gt(Be(t));
  }
  gte(t) {
    return Be(this).gte(Be(t));
  }
  isNegative() {
    return this._hex[0] === "-";
  }
  isZero() {
    return Be(this).isZero();
  }
  toNumber() {
    try {
      return Be(this).toNumber();
    } catch {
      dr("overflow", "toNumber", this.toString());
    }
    return null;
  }
  toBigInt() {
    try {
      return BigInt(this.toString());
    } catch {
    }
    return ln.throwError("this platform does not support BigInt", $e.errors.UNSUPPORTED_OPERATION, {
      value: this.toString()
    });
  }
  toString() {
    return arguments.length > 0 && (arguments[0] === 10 ? i0 || (i0 = !0, ln.warn("BigNumber.toString does not accept any parameters; base-10 is assumed")) : arguments[0] === 16 ? ln.throwError("BigNumber.toString does not accept any parameters; use bigNumber.toHexString()", $e.errors.UNEXPECTED_ARGUMENT, {}) : ln.throwError("BigNumber.toString does not accept parameters", $e.errors.UNEXPECTED_ARGUMENT, {})), Be(this).toString(10);
  }
  toHexString() {
    return this._hex;
  }
  toJSON(t) {
    return { type: "BigNumber", hex: this.toHexString() };
  }
  static from(t) {
    if (t instanceof Rr)
      return t;
    if (typeof t == "string")
      return t.match(/^-?0x[0-9a-f]+$/i) ? new Rr(cc, is(t)) : t.match(/^-?[0-9]+$/) ? new Rr(cc, is(new au(t))) : ln.throwArgumentError("invalid BigNumber string", "value", t);
    if (typeof t == "number")
      return t % 1 && dr("underflow", "BigNumber.from", t), (t >= n0 || t <= -n0) && dr("overflow", "BigNumber.from", t), Rr.from(String(t));
    const r = t;
    if (typeof r == "bigint")
      return Rr.from(r.toString());
    if (sp(r))
      return Rr.from(ov(r));
    if (r)
      if (r.toHexString) {
        const n = r.toHexString();
        if (typeof n == "string")
          return Rr.from(n);
      } else {
        let n = r._hex;
        if (n == null && r.type === "BigNumber" && (n = r.hex), typeof n == "string" && (su(n) || n[0] === "-" && su(n.substring(1))))
          return Rr.from(n);
      }
    return ln.throwArgumentError("invalid BigNumber value", "value", t);
  }
  static isBigNumber(t) {
    return !!(t && t._isBigNumber);
  }
};
function is(e) {
  if (typeof e != "string")
    return is(e.toString(16));
  if (e[0] === "-")
    return e = e.substring(1), e[0] === "-" && ln.throwArgumentError("invalid hex", "value", e), e = is(e), e === "0x00" ? e : "-" + e;
  if (e.substring(0, 2) !== "0x" && (e = "0x" + e), e === "0x")
    return "0x00";
  for (e.length % 2 && (e = "0x0" + e.substring(2)); e.length > 4 && e.substring(0, 4) === "0x00"; )
    e = "0x" + e.substring(4);
  return e;
}
function ir(e) {
  return Fa.from(is(e));
}
function Be(e) {
  const t = Fa.from(e).toHexString();
  return t[0] === "-" ? new au("-" + t.substring(3), 16) : new au(t.substring(2), 16);
}
function dr(e, t, r) {
  const n = { fault: e, operation: t };
  return r != null && (n.value = r), ln.throwError(e, $e.errors.NUMERIC_FAULT, n);
}
const nn = (e) => typeof e == "string" || typeof e == "number" || e instanceof Fa, gn = (e, t = 8) => {
  const r = Fa.from(e || 0);
  return {
    amount: () => r,
    plus: (n, i = t) => gn(r.add(nn(n) ? n : n.amount()), i),
    minus: (n, i = t) => gn(r.sub(nn(n) ? n : n.amount()), i),
    times: (n, i = t) => gn(r.mul(nn(n) ? n : n.amount()), i),
    div: (n, i = t) => gn(r.div(nn(n) ? n : n.amount()), i),
    lt: (n) => r.lt(nn(n) ? n : n.amount()),
    lte: (n) => r.lte(nn(n) ? n : n.amount()),
    gt: (n) => r.gt(nn(n) ? n : n.amount()),
    gte: (n) => r.gte(nn(n) ? n : n.amount()),
    eq: (n) => r.eq(nn(n) ? n : n.amount()),
    decimal: t
  };
};
var we = /* @__PURE__ */ ((e) => (e.INVALID_INPUT_PARAMETERS = "1000", e.UNKNOWN_PROVIDERS = "1001", e.CANNOT_FIND_INBOUND_ADDRESS = "1002", e.NO_INBOUND_ADDRESSES = "1003", e.CHAIN_HALTED_OR_UNSUPPORTED = "1004", e.MISSING_INPUT_PARAMETER = "1005", e.INVALID_TYPE_GENERIC = "1100", e.INVALID_NUMBER_STRING = "1101", e.INVALID_NUMBER = "1102", e.INVALID_BOOLEAN = "1103", e.INVALID_OBJECT = "1104", e.INVALID_ARRAY = "1105", e.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER = "2000", e.SELL_BUY_ASSETS_ARE_THE_SAME = "2001", e.MISSING_SOURCE_ADDRESS_FOR_SYNTH = "2002", e.AFF_ADDRESS_AND_BPS_OR_NEITHER = "2003", e.AFF_ADDRESS_TOO_LONG = "2004", e.AFF_BPS_INTEGER_0_100 = "2005", e.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN = "2006", e.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN = "2007", e.PREFERRED_PROFVIDER_NOT_SUPPORTED = "2008", e.DESTINATION_ADDRESS_SMART_CONTRACT = "2009", e.BUY_AMOUNT_MUST_BE_POSITIVE_INTEGER = "2010", e.SOURCE_ADDRESS_SMART_CONTRACT = "2011", e.INVALID_PROVIDER = "2100", e.MISSING_CROSS_CHAIN_PROVIDER = "2101", e.MISSING_AVAX_PROVIDER = "2102", e.MISSING_BSC_PROVIDER = "2103", e.MISSING_ETH_PROVIDER = "2104", e.INVALID_PROVIDER_FOR_SWAP_OUT = "2105", e.MISSING_ARB_PROVIDER = "2106", e.INVALID_CHAIN = "2200", e.INVALID_ASSET = "2201", e.INVALID_ASSET_IDENTIFIER = "2202", e.UNSUPPORTED_CHAIN = "2204", e.UNSUPPORTED_ASSET = "2203", e.UNSUPPORTED_ASSET_FOR_SWAPOUT = "2205", e.INVALID_SOURCE_ADDRESS = "2300", e.INVALID_DESTINATION_ADDRESS = "2301", e.THORNODE_QUOTE_GENERIC_ERROR = "3000", e.NOT_ENOUGH_SYNTH_BALANCE = "3001", e.SYNTH_MINTING_CAP_REACHED = "3002", e.INVALID_QUOTE_MODE = "4000", e.NO_QUOTES = "4001", e.SERVICE_UNAVAILABLE_GENERIC = "5000", e.MISSING_GAS_DATA_GENERIC = "5100", e.MISSING_TOKEN_INFO_GENERIC = "5200", e.CANT_FIND_TOKEN_LIST = "5201", e.NO_PRICE = "5202", e.PRICE_IS_STALE = "5203", e.ADDRESS_NOT_WHITELISTED = "6000", e.ADDRESS_ALREADY_CLAIMED = "6001", e.TEMPORARY_ERROR = "9999", e))(we || {});
we.INVALID_INPUT_PARAMETERS + "", we.UNKNOWN_PROVIDERS + "", we.CANNOT_FIND_INBOUND_ADDRESS + "", we.NO_INBOUND_ADDRESSES + "", we.CHAIN_HALTED_OR_UNSUPPORTED + "", we.MISSING_INPUT_PARAMETER + "", we.INVALID_TYPE_GENERIC + "", we.INVALID_NUMBER_STRING + "", we.INVALID_NUMBER + "", we.INVALID_BOOLEAN + "", we.INVALID_OBJECT + "", we.INVALID_ARRAY + "", we.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER + "", we.SELL_BUY_ASSETS_ARE_THE_SAME + "", we.MISSING_SOURCE_ADDRESS_FOR_SYNTH + "", we.AFF_ADDRESS_AND_BPS_OR_NEITHER + "", we.AFF_ADDRESS_TOO_LONG + "", we.AFF_BPS_INTEGER_0_100 + "", we.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN + "", we.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN + "", we.PREFERRED_PROFVIDER_NOT_SUPPORTED + "", we.DESTINATION_ADDRESS_SMART_CONTRACT + "", we.BUY_AMOUNT_MUST_BE_POSITIVE_INTEGER + "", we.INVALID_PROVIDER + "", we.MISSING_CROSS_CHAIN_PROVIDER + "", we.MISSING_AVAX_PROVIDER + "", we.MISSING_BSC_PROVIDER + "", we.MISSING_ETH_PROVIDER + "", we.MISSING_ARB_PROVIDER + "", we.INVALID_PROVIDER_FOR_SWAP_OUT + "", we.INVALID_CHAIN + "", we.INVALID_ASSET + "", we.UNSUPPORTED_CHAIN + "", we.UNSUPPORTED_ASSET + "", we.UNSUPPORTED_ASSET_FOR_SWAPOUT + "", we.THORNODE_QUOTE_GENERIC_ERROR + "", we.INVALID_SOURCE_ADDRESS + "", we.INVALID_DESTINATION_ADDRESS + "", we.NOT_ENOUGH_SYNTH_BALANCE + "", we.SYNTH_MINTING_CAP_REACHED + "", we.INVALID_QUOTE_MODE + "", we.NO_QUOTES + "", we.SERVICE_UNAVAILABLE_GENERIC + "", we.MISSING_GAS_DATA_GENERIC + "", we.MISSING_TOKEN_INFO_GENERIC + "", we.CANT_FIND_TOKEN_LIST + "", we.NO_PRICE + "", we.PRICE_IS_STALE + "", we.ADDRESS_NOT_WHITELISTED + "", we.ADDRESS_ALREADY_CLAIMED + "";
var Ue = /* @__PURE__ */ ((e) => (e.Arbitrum = "ARB", e.Avalanche = "AVAX", e.Binance = "BNB", e.BinanceSmartChain = "BSC", e.Bitcoin = "BTC", e.BitcoinCash = "BCH", e.Cosmos = "GAIA", e.Dogecoin = "DOGE", e.Ethereum = "ETH", e.Litecoin = "LTC", e.Optimism = "OP", e.Polygon = "MATIC", e.THORChain = "THOR", e))(Ue || {}), ap = /* @__PURE__ */ ((e) => (e.ARB = "m/44'/60'/0'/0", e.AVAX = "m/44'/60'/0'/0", e.BCH = "m/44'/145'/0'/0", e.BNB = "m/44'/714'/0'/0", e.BSC = "m/44'/60'/0'/0", e.BTC = "m/84'/0'/0'/0", e.DOGE = "m/44'/3'/0'/0", e.ETH = "m/44'/60'/0'/0", e.GAIA = "m/44'/118'/0'/0", e.LTC = "m/84'/2'/0'/0", e.MATIC = "m/44'/60'/0'/0", e.OP = "m/44'/60'/0'/0", e.THOR = "m/44'/931'/0'/0", e))(ap || {}), Zu = /* @__PURE__ */ ((e) => (e[e.ARB = 18] = "ARB", e[e.AVAX = 18] = "AVAX", e[e.BCH = 8] = "BCH", e[e.BNB = 8] = "BNB", e[e.BSC = 18] = "BSC", e[e.BTC = 8] = "BTC", e[e.DOGE = 8] = "DOGE", e[e.ETH = 18] = "ETH", e[e.GAIA = 6] = "GAIA", e[e.LTC = 8] = "LTC", e[e.MATIC = 18] = "MATIC", e[e.OP = 18] = "OP", e[e.THOR = 8] = "THOR", e))(Zu || {}), Ju = /* @__PURE__ */ ((e) => (e.Arbitrum = "42161", e.ArbitrumHex = "0xa4b1", e.Avalanche = "43114", e.AvalancheHex = "0xa86a", e.Binance = "Binance-Chain-Tigris", e.BinanceHex = "", e.BinanceSmartChain = "56", e.BinanceSmartChainHex = "0x38", e.Bitcoin = "bitcoin", e.BitcoinHex = "", e.BitcoinCash = "bitcoincash", e.BitcoinCashHex = "", e.Cosmos = "cosmoshub-4", e.CosmosHex = "", e.Dogecoin = "dogecoin", e.DogecoinHex = "", e.Ethereum = "1", e.EthereumHex = "0x1", e.Litecoin = "litecoin", e.LitecoinHex = "", e.Optimism = "10", e.OptimismHex = "0xa", e.Polygon = "137", e.PolygonHex = "0x89", e.THORChain = "thorchain-mainnet-v1", e.THORChainHex = "", e.THORChainStagenet = "thorchain-stagenet-v2", e))(Ju || {}), Oo = /* @__PURE__ */ ((e) => (e.Arbitrum = "https://arb1.arbitrum.io/rpc", e.Avalanche = "https://node-router.thorswap.net/avalanche-c", e.Binance = "", e.BinanceSmartChain = "https://bsc-dataseed.binance.org", e.Bitcoin = "https://node-router.thorswap.net/bitcoin", e.BitcoinCash = "https://node-router.thorswap.net/bitcoin-cash", e.Cosmos = "https://node-router.thorswap.net/cosmos/rpc", e.Dogecoin = "https://node-router.thorswap.net/dogecoin", e.Ethereum = "https://node-router.thorswap.net/ethereum", e.Litecoin = "https://node-router.thorswap.net/litecoin", e.Optimism = "https://mainnet.optimism.io", e.Polygon = "https://polygon-rpc.com", e.THORChain = "https://rpc.thorswap.net", e.THORChainStagenet = "https://stagenet-rpc.ninerealms.com", e))(Oo || {});
const Ka = Object.values(Ue), av = Object.keys(Ue), Qu = Ka.reduce(
  (e, t) => {
    const r = av.find((n) => Ue[n] === t);
    return r && (e[t] = r), e;
  },
  {}
);
Ka.reduce(
  (e, t) => (e[t] = Ju[Qu[t]], e),
  {}
);
Ka.reduce(
  (e, t) => (e[t] = Oo[Qu[t]], e),
  {}
);
Ka.reduce(
  (e, t) => (e[t] = Ju[`${Qu[t]}Hex`], e),
  {}
);
var Lr = /* @__PURE__ */ ((e) => (e.Average = "average", e.Fast = "fast", e.Fastest = "fastest", e))(Lr || {});
Lr.Average + "", Lr.Fast + "", Lr.Fastest + "";
const fp = async (e, t) => {
  const r = Object.entries(t || {}).reduce((i, [o, s]) => (s && (i[o] = s), i), {});
  return (await fetch(
    `${e}${t ? `?${new URLSearchParams(r).toString()}` : ""}`,
    { method: "GET", mode: "cors", credentials: "omit" }
  )).json();
}, fv = async (e, t, r, n = !1) => {
  const i = await fetch(`${e}`, {
    method: "POST",
    headers: r,
    body: t
  });
  return n ? i.text() : i.json();
};
var cv = /^-?(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?$/i, uc = Math.ceil, vr = Math.floor, sr = "[BigNumber Error] ", o0 = sr + "Number primitive has more than 15 significant digits: ", Br = 1e14, Ee = 14, hc = 9007199254740991, lc = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13], An = 1e7, Ot = 1e9;
function cp(e) {
  var t, r, n, i = k.prototype = { constructor: k, toString: null, valueOf: null }, o = new k(1), s = 20, a = 4, c = -7, d = 21, w = -1e7, g = 1e7, O = !1, N = 1, B = 0, I = {
    prefix: "",
    groupSize: 3,
    secondaryGroupSize: 0,
    groupSeparator: ",",
    decimalSeparator: ".",
    fractionGroupSize: 0,
    fractionGroupSeparator: " ",
    // non-breaking space
    suffix: ""
  }, M = "0123456789abcdefghijklmnopqrstuvwxyz", T = !0;
  function k(b, A) {
    var C, q, W, E, f, h, v, m, _ = this;
    if (!(_ instanceof k))
      return new k(b, A);
    if (A == null) {
      if (b && b._isBigNumber === !0) {
        _.s = b.s, !b.c || b.e > g ? _.c = _.e = null : b.e < w ? _.c = [_.e = 0] : (_.e = b.e, _.c = b.c.slice());
        return;
      }
      if ((h = typeof b == "number") && b * 0 == 0) {
        if (_.s = 1 / b < 0 ? (b = -b, -1) : 1, b === ~~b) {
          for (E = 0, f = b; f >= 10; f /= 10, E++)
            ;
          E > g ? _.c = _.e = null : (_.e = E, _.c = [b]);
          return;
        }
        m = String(b);
      } else {
        if (!cv.test(m = String(b)))
          return n(_, m, h);
        _.s = m.charCodeAt(0) == 45 ? (m = m.slice(1), -1) : 1;
      }
      (E = m.indexOf(".")) > -1 && (m = m.replace(".", "")), (f = m.search(/e/i)) > 0 ? (E < 0 && (E = f), E += +m.slice(f + 1), m = m.substring(0, f)) : E < 0 && (E = m.length);
    } else {
      if (Qe(A, 2, M.length, "Base"), A == 10 && T)
        return _ = new k(b), z(_, s + _.e + 1, a);
      if (m = String(b), h = typeof b == "number") {
        if (b * 0 != 0)
          return n(_, m, h, A);
        if (_.s = 1 / b < 0 ? (m = m.slice(1), -1) : 1, k.DEBUG && m.replace(/^0\.0*|\./, "").length > 15)
          throw Error(o0 + b);
      } else
        _.s = m.charCodeAt(0) === 45 ? (m = m.slice(1), -1) : 1;
      for (C = M.slice(0, A), E = f = 0, v = m.length; f < v; f++)
        if (C.indexOf(q = m.charAt(f)) < 0) {
          if (q == ".") {
            if (f > E) {
              E = v;
              continue;
            }
          } else if (!W && (m == m.toUpperCase() && (m = m.toLowerCase()) || m == m.toLowerCase() && (m = m.toUpperCase()))) {
            W = !0, f = -1, E = 0;
            continue;
          }
          return n(_, String(b), h, A);
        }
      h = !1, m = r(m, A, 10, _.s), (E = m.indexOf(".")) > -1 ? m = m.replace(".", "") : E = m.length;
    }
    for (f = 0; m.charCodeAt(f) === 48; f++)
      ;
    for (v = m.length; m.charCodeAt(--v) === 48; )
      ;
    if (m = m.slice(f, ++v)) {
      if (v -= f, h && k.DEBUG && v > 15 && (b > hc || b !== vr(b)))
        throw Error(o0 + _.s * b);
      if ((E = E - f - 1) > g)
        _.c = _.e = null;
      else if (E < w)
        _.c = [_.e = 0];
      else {
        if (_.e = E, _.c = [], f = (E + 1) % Ee, E < 0 && (f += Ee), f < v) {
          for (f && _.c.push(+m.slice(0, f)), v -= Ee; f < v; )
            _.c.push(+m.slice(f, f += Ee));
          f = Ee - (m = m.slice(f)).length;
        } else
          f -= v;
        for (; f--; m += "0")
          ;
        _.c.push(+m);
      }
    } else
      _.c = [_.e = 0];
  }
  k.clone = cp, k.ROUND_UP = 0, k.ROUND_DOWN = 1, k.ROUND_CEIL = 2, k.ROUND_FLOOR = 3, k.ROUND_HALF_UP = 4, k.ROUND_HALF_DOWN = 5, k.ROUND_HALF_EVEN = 6, k.ROUND_HALF_CEIL = 7, k.ROUND_HALF_FLOOR = 8, k.EUCLID = 9, k.config = k.set = function(b) {
    var A, C;
    if (b != null)
      if (typeof b == "object") {
        if (b.hasOwnProperty(A = "DECIMAL_PLACES") && (C = b[A], Qe(C, 0, Ot, A), s = C), b.hasOwnProperty(A = "ROUNDING_MODE") && (C = b[A], Qe(C, 0, 8, A), a = C), b.hasOwnProperty(A = "EXPONENTIAL_AT") && (C = b[A], C && C.pop ? (Qe(C[0], -Ot, 0, A), Qe(C[1], 0, Ot, A), c = C[0], d = C[1]) : (Qe(C, -Ot, Ot, A), c = -(d = C < 0 ? -C : C))), b.hasOwnProperty(A = "RANGE"))
          if (C = b[A], C && C.pop)
            Qe(C[0], -Ot, -1, A), Qe(C[1], 1, Ot, A), w = C[0], g = C[1];
          else if (Qe(C, -Ot, Ot, A), C)
            w = -(g = C < 0 ? -C : C);
          else
            throw Error(sr + A + " cannot be zero: " + C);
        if (b.hasOwnProperty(A = "CRYPTO"))
          if (C = b[A], C === !!C)
            if (C)
              if (typeof crypto < "u" && crypto && (crypto.getRandomValues || crypto.randomBytes))
                O = C;
              else
                throw O = !C, Error(sr + "crypto unavailable");
            else
              O = C;
          else
            throw Error(sr + A + " not true or false: " + C);
        if (b.hasOwnProperty(A = "MODULO_MODE") && (C = b[A], Qe(C, 0, 9, A), N = C), b.hasOwnProperty(A = "POW_PRECISION") && (C = b[A], Qe(C, 0, Ot, A), B = C), b.hasOwnProperty(A = "FORMAT"))
          if (C = b[A], typeof C == "object")
            I = C;
          else
            throw Error(sr + A + " not an object: " + C);
        if (b.hasOwnProperty(A = "ALPHABET"))
          if (C = b[A], typeof C == "string" && !/^.?$|[+\-.\s]|(.).*\1/.test(C))
            T = C.slice(0, 10) == "0123456789", M = C;
          else
            throw Error(sr + A + " invalid: " + C);
      } else
        throw Error(sr + "Object expected: " + b);
    return {
      DECIMAL_PLACES: s,
      ROUNDING_MODE: a,
      EXPONENTIAL_AT: [c, d],
      RANGE: [w, g],
      CRYPTO: O,
      MODULO_MODE: N,
      POW_PRECISION: B,
      FORMAT: I,
      ALPHABET: M
    };
  }, k.isBigNumber = function(b) {
    if (!b || b._isBigNumber !== !0)
      return !1;
    if (!k.DEBUG)
      return !0;
    var A, C, q = b.c, W = b.e, E = b.s;
    e:
      if ({}.toString.call(q) == "[object Array]") {
        if ((E === 1 || E === -1) && W >= -Ot && W <= Ot && W === vr(W)) {
          if (q[0] === 0) {
            if (W === 0 && q.length === 1)
              return !0;
            break e;
          }
          if (A = (W + 1) % Ee, A < 1 && (A += Ee), String(q[0]).length == A) {
            for (A = 0; A < q.length; A++)
              if (C = q[A], C < 0 || C >= Br || C !== vr(C))
                break e;
            if (C !== 0)
              return !0;
          }
        }
      } else if (q === null && W === null && (E === null || E === 1 || E === -1))
        return !0;
    throw Error(sr + "Invalid BigNumber: " + b);
  }, k.maximum = k.max = function() {
    return X(arguments, -1);
  }, k.minimum = k.min = function() {
    return X(arguments, 1);
  }, k.random = function() {
    var b = 9007199254740992, A = Math.random() * b & 2097151 ? function() {
      return vr(Math.random() * b);
    } : function() {
      return (Math.random() * 1073741824 | 0) * 8388608 + (Math.random() * 8388608 | 0);
    };
    return function(C) {
      var q, W, E, f, h, v = 0, m = [], _ = new k(o);
      if (C == null ? C = s : Qe(C, 0, Ot), f = uc(C / Ee), O)
        if (crypto.getRandomValues) {
          for (q = crypto.getRandomValues(new Uint32Array(f *= 2)); v < f; )
            h = q[v] * 131072 + (q[v + 1] >>> 11), h >= 9e15 ? (W = crypto.getRandomValues(new Uint32Array(2)), q[v] = W[0], q[v + 1] = W[1]) : (m.push(h % 1e14), v += 2);
          v = f / 2;
        } else if (crypto.randomBytes) {
          for (q = crypto.randomBytes(f *= 7); v < f; )
            h = (q[v] & 31) * 281474976710656 + q[v + 1] * 1099511627776 + q[v + 2] * 4294967296 + q[v + 3] * 16777216 + (q[v + 4] << 16) + (q[v + 5] << 8) + q[v + 6], h >= 9e15 ? crypto.randomBytes(7).copy(q, v) : (m.push(h % 1e14), v += 7);
          v = f / 7;
        } else
          throw O = !1, Error(sr + "crypto unavailable");
      if (!O)
        for (; v < f; )
          h = A(), h < 9e15 && (m[v++] = h % 1e14);
      for (f = m[--v], C %= Ee, f && C && (h = lc[Ee - C], m[v] = vr(f / h) * h); m[v] === 0; m.pop(), v--)
        ;
      if (v < 0)
        m = [E = 0];
      else {
        for (E = -1; m[0] === 0; m.splice(0, 1), E -= Ee)
          ;
        for (v = 1, h = m[0]; h >= 10; h /= 10, v++)
          ;
        v < Ee && (E -= Ee - v);
      }
      return _.e = E, _.c = m, _;
    };
  }(), k.sum = function() {
    for (var b = 1, A = arguments, C = new k(A[0]); b < A.length; )
      C = C.plus(A[b++]);
    return C;
  }, r = function() {
    var b = "0123456789";
    function A(C, q, W, E) {
      for (var f, h = [0], v, m = 0, _ = C.length; m < _; ) {
        for (v = h.length; v--; h[v] *= q)
          ;
        for (h[0] += E.indexOf(C.charAt(m++)), f = 0; f < h.length; f++)
          h[f] > W - 1 && (h[f + 1] == null && (h[f + 1] = 0), h[f + 1] += h[f] / W | 0, h[f] %= W);
      }
      return h.reverse();
    }
    return function(C, q, W, E, f) {
      var h, v, m, _, R, G, P, p, H = C.indexOf("."), oe = s, ne = a;
      for (H >= 0 && (_ = B, B = 0, C = C.replace(".", ""), p = new k(q), G = p.pow(C.length - H), B = _, p.c = A(
        on(pr(G.c), G.e, "0"),
        10,
        W,
        b
      ), p.e = p.c.length), P = A(C, q, W, f ? (h = M, b) : (h = b, M)), m = _ = P.length; P[--_] == 0; P.pop())
        ;
      if (!P[0])
        return h.charAt(0);
      if (H < 0 ? --m : (G.c = P, G.e = m, G.s = E, G = t(G, p, oe, ne, W), P = G.c, R = G.r, m = G.e), v = m + oe + 1, H = P[v], _ = W / 2, R = R || v < 0 || P[v + 1] != null, R = ne < 4 ? (H != null || R) && (ne == 0 || ne == (G.s < 0 ? 3 : 2)) : H > _ || H == _ && (ne == 4 || R || ne == 6 && P[v - 1] & 1 || ne == (G.s < 0 ? 8 : 7)), v < 1 || !P[0])
        C = R ? on(h.charAt(1), -oe, h.charAt(0)) : h.charAt(0);
      else {
        if (P.length = v, R)
          for (--W; ++P[--v] > W; )
            P[v] = 0, v || (++m, P = [1].concat(P));
        for (_ = P.length; !P[--_]; )
          ;
        for (H = 0, C = ""; H <= _; C += h.charAt(P[H++]))
          ;
        C = on(C, m, h.charAt(0));
      }
      return C;
    };
  }(), t = function() {
    function b(q, W, E) {
      var f, h, v, m, _ = 0, R = q.length, G = W % An, P = W / An | 0;
      for (q = q.slice(); R--; )
        v = q[R] % An, m = q[R] / An | 0, f = P * v + m * G, h = G * v + f % An * An + _, _ = (h / E | 0) + (f / An | 0) + P * m, q[R] = h % E;
      return _ && (q = [_].concat(q)), q;
    }
    function A(q, W, E, f) {
      var h, v;
      if (E != f)
        v = E > f ? 1 : -1;
      else
        for (h = v = 0; h < E; h++)
          if (q[h] != W[h]) {
            v = q[h] > W[h] ? 1 : -1;
            break;
          }
      return v;
    }
    function C(q, W, E, f) {
      for (var h = 0; E--; )
        q[E] -= h, h = q[E] < W[E] ? 1 : 0, q[E] = h * f + q[E] - W[E];
      for (; !q[0] && q.length > 1; q.splice(0, 1))
        ;
    }
    return function(q, W, E, f, h) {
      var v, m, _, R, G, P, p, H, oe, ne, V, Y, Q, ie, de, L, $, ee = q.s == W.s ? 1 : -1, re = q.c, ae = W.c;
      if (!re || !re[0] || !ae || !ae[0])
        return new k(
          // Return NaN if either NaN, or both Infinity or 0.
          !q.s || !W.s || (re ? ae && re[0] == ae[0] : !ae) ? NaN : (
            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.
            re && re[0] == 0 || !ae ? ee * 0 : ee / 0
          )
        );
      for (H = new k(ee), oe = H.c = [], m = q.e - W.e, ee = E + m + 1, h || (h = Br, m = br(q.e / Ee) - br(W.e / Ee), ee = ee / Ee | 0), _ = 0; ae[_] == (re[_] || 0); _++)
        ;
      if (ae[_] > (re[_] || 0) && m--, ee < 0)
        oe.push(1), R = !0;
      else {
        for (ie = re.length, L = ae.length, _ = 0, ee += 2, G = vr(h / (ae[0] + 1)), G > 1 && (ae = b(ae, G, h), re = b(re, G, h), L = ae.length, ie = re.length), Q = L, ne = re.slice(0, L), V = ne.length; V < L; ne[V++] = 0)
          ;
        $ = ae.slice(), $ = [0].concat($), de = ae[0], ae[1] >= h / 2 && de++;
        do {
          if (G = 0, v = A(ae, ne, L, V), v < 0) {
            if (Y = ne[0], L != V && (Y = Y * h + (ne[1] || 0)), G = vr(Y / de), G > 1)
              for (G >= h && (G = h - 1), P = b(ae, G, h), p = P.length, V = ne.length; A(P, ne, p, V) == 1; )
                G--, C(P, L < p ? $ : ae, p, h), p = P.length, v = 1;
            else
              G == 0 && (v = G = 1), P = ae.slice(), p = P.length;
            if (p < V && (P = [0].concat(P)), C(ne, P, V, h), V = ne.length, v == -1)
              for (; A(ae, ne, L, V) < 1; )
                G++, C(ne, L < V ? $ : ae, V, h), V = ne.length;
          } else
            v === 0 && (G++, ne = [0]);
          oe[_++] = G, ne[0] ? ne[V++] = re[Q] || 0 : (ne = [re[Q]], V = 1);
        } while ((Q++ < ie || ne[0] != null) && ee--);
        R = ne[0] != null, oe[0] || oe.splice(0, 1);
      }
      if (h == Br) {
        for (_ = 1, ee = oe[0]; ee >= 10; ee /= 10, _++)
          ;
        z(H, E + (H.e = _ + m * Ee - 1) + 1, f, R);
      } else
        H.e = m, H.r = +R;
      return H;
    };
  }();
  function F(b, A, C, q) {
    var W, E, f, h, v;
    if (C == null ? C = a : Qe(C, 0, 8), !b.c)
      return b.toString();
    if (W = b.c[0], f = b.e, A == null)
      v = pr(b.c), v = q == 1 || q == 2 && (f <= c || f >= d) ? ks(v, f) : on(v, f, "0");
    else if (b = z(new k(b), A, C), E = b.e, v = pr(b.c), h = v.length, q == 1 || q == 2 && (A <= E || E <= c)) {
      for (; h < A; v += "0", h++)
        ;
      v = ks(v, E);
    } else if (A -= f, v = on(v, E, "0"), E + 1 > h) {
      if (--A > 0)
        for (v += "."; A--; v += "0")
          ;
    } else if (A += E - h, A > 0)
      for (E + 1 == h && (v += "."); A--; v += "0")
        ;
    return b.s < 0 && W ? "-" + v : v;
  }
  function X(b, A) {
    for (var C, q, W = 1, E = new k(b[0]); W < b.length; W++)
      q = new k(b[W]), (!q.s || (C = ni(E, q)) === A || C === 0 && E.s === A) && (E = q);
    return E;
  }
  function Z(b, A, C) {
    for (var q = 1, W = A.length; !A[--W]; A.pop())
      ;
    for (W = A[0]; W >= 10; W /= 10, q++)
      ;
    return (C = q + C * Ee - 1) > g ? b.c = b.e = null : C < w ? b.c = [b.e = 0] : (b.e = C, b.c = A), b;
  }
  n = function() {
    var b = /^(-?)0([xbo])(?=\w[\w.]*$)/i, A = /^([^.]+)\.$/, C = /^\.([^.]+)$/, q = /^-?(Infinity|NaN)$/, W = /^\s*\+(?=[\w.])|^\s+|\s+$/g;
    return function(E, f, h, v) {
      var m, _ = h ? f : f.replace(W, "");
      if (q.test(_))
        E.s = isNaN(_) ? null : _ < 0 ? -1 : 1;
      else {
        if (!h && (_ = _.replace(b, function(R, G, P) {
          return m = (P = P.toLowerCase()) == "x" ? 16 : P == "b" ? 2 : 8, !v || v == m ? G : R;
        }), v && (m = v, _ = _.replace(A, "$1").replace(C, "0.$1")), f != _))
          return new k(_, m);
        if (k.DEBUG)
          throw Error(sr + "Not a" + (v ? " base " + v : "") + " number: " + f);
        E.s = null;
      }
      E.c = E.e = null;
    };
  }();
  function z(b, A, C, q) {
    var W, E, f, h, v, m, _, R = b.c, G = lc;
    if (R) {
      e: {
        for (W = 1, h = R[0]; h >= 10; h /= 10, W++)
          ;
        if (E = A - W, E < 0)
          E += Ee, f = A, v = R[m = 0], _ = vr(v / G[W - f - 1] % 10);
        else if (m = uc((E + 1) / Ee), m >= R.length)
          if (q) {
            for (; R.length <= m; R.push(0))
              ;
            v = _ = 0, W = 1, E %= Ee, f = E - Ee + 1;
          } else
            break e;
        else {
          for (v = h = R[m], W = 1; h >= 10; h /= 10, W++)
            ;
          E %= Ee, f = E - Ee + W, _ = f < 0 ? 0 : vr(v / G[W - f - 1] % 10);
        }
        if (q = q || A < 0 || // Are there any non-zero digits after the rounding digit?
        // The expression  n % pows10[d - j - 1]  returns all digits of n to the right
        // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.
        R[m + 1] != null || (f < 0 ? v : v % G[W - f - 1]), q = C < 4 ? (_ || q) && (C == 0 || C == (b.s < 0 ? 3 : 2)) : _ > 5 || _ == 5 && (C == 4 || q || C == 6 && // Check whether the digit to the left of the rounding digit is odd.
        (E > 0 ? f > 0 ? v / G[W - f] : 0 : R[m - 1]) % 10 & 1 || C == (b.s < 0 ? 8 : 7)), A < 1 || !R[0])
          return R.length = 0, q ? (A -= b.e + 1, R[0] = G[(Ee - A % Ee) % Ee], b.e = -A || 0) : R[0] = b.e = 0, b;
        if (E == 0 ? (R.length = m, h = 1, m--) : (R.length = m + 1, h = G[Ee - E], R[m] = f > 0 ? vr(v / G[W - f] % G[f]) * h : 0), q)
          for (; ; )
            if (m == 0) {
              for (E = 1, f = R[0]; f >= 10; f /= 10, E++)
                ;
              for (f = R[0] += h, h = 1; f >= 10; f /= 10, h++)
                ;
              E != h && (b.e++, R[0] == Br && (R[0] = 1));
              break;
            } else {
              if (R[m] += h, R[m] != Br)
                break;
              R[m--] = 0, h = 1;
            }
        for (E = R.length; R[--E] === 0; R.pop())
          ;
      }
      b.e > g ? b.c = b.e = null : b.e < w && (b.c = [b.e = 0]);
    }
    return b;
  }
  function te(b) {
    var A, C = b.e;
    return C === null ? b.toString() : (A = pr(b.c), A = C <= c || C >= d ? ks(A, C) : on(A, C, "0"), b.s < 0 ? "-" + A : A);
  }
  return i.absoluteValue = i.abs = function() {
    var b = new k(this);
    return b.s < 0 && (b.s = 1), b;
  }, i.comparedTo = function(b, A) {
    return ni(this, new k(b, A));
  }, i.decimalPlaces = i.dp = function(b, A) {
    var C, q, W, E = this;
    if (b != null)
      return Qe(b, 0, Ot), A == null ? A = a : Qe(A, 0, 8), z(new k(E), b + E.e + 1, A);
    if (!(C = E.c))
      return null;
    if (q = ((W = C.length - 1) - br(this.e / Ee)) * Ee, W = C[W])
      for (; W % 10 == 0; W /= 10, q--)
        ;
    return q < 0 && (q = 0), q;
  }, i.dividedBy = i.div = function(b, A) {
    return t(this, new k(b, A), s, a);
  }, i.dividedToIntegerBy = i.idiv = function(b, A) {
    return t(this, new k(b, A), 0, 1);
  }, i.exponentiatedBy = i.pow = function(b, A) {
    var C, q, W, E, f, h, v, m, _, R = this;
    if (b = new k(b), b.c && !b.isInteger())
      throw Error(sr + "Exponent not an integer: " + te(b));
    if (A != null && (A = new k(A)), h = b.e > 14, !R.c || !R.c[0] || R.c[0] == 1 && !R.e && R.c.length == 1 || !b.c || !b.c[0])
      return _ = new k(Math.pow(+te(R), h ? b.s * (2 - Rs(b)) : +te(b))), A ? _.mod(A) : _;
    if (v = b.s < 0, A) {
      if (A.c ? !A.c[0] : !A.s)
        return new k(NaN);
      q = !v && R.isInteger() && A.isInteger(), q && (R = R.mod(A));
    } else {
      if (b.e > 9 && (R.e > 0 || R.e < -1 || (R.e == 0 ? R.c[0] > 1 || h && R.c[1] >= 24e7 : R.c[0] < 8e13 || h && R.c[0] <= 9999975e7)))
        return E = R.s < 0 && Rs(b) ? -0 : 0, R.e > -1 && (E = 1 / E), new k(v ? 1 / E : E);
      B && (E = uc(B / Ee + 2));
    }
    for (h ? (C = new k(0.5), v && (b.s = 1), m = Rs(b)) : (W = Math.abs(+te(b)), m = W % 2), _ = new k(o); ; ) {
      if (m) {
        if (_ = _.times(R), !_.c)
          break;
        E ? _.c.length > E && (_.c.length = E) : q && (_ = _.mod(A));
      }
      if (W) {
        if (W = vr(W / 2), W === 0)
          break;
        m = W % 2;
      } else if (b = b.times(C), z(b, b.e + 1, 1), b.e > 14)
        m = Rs(b);
      else {
        if (W = +te(b), W === 0)
          break;
        m = W % 2;
      }
      R = R.times(R), E ? R.c && R.c.length > E && (R.c.length = E) : q && (R = R.mod(A));
    }
    return q ? _ : (v && (_ = o.div(_)), A ? _.mod(A) : E ? z(_, B, a, f) : _);
  }, i.integerValue = function(b) {
    var A = new k(this);
    return b == null ? b = a : Qe(b, 0, 8), z(A, A.e + 1, b);
  }, i.isEqualTo = i.eq = function(b, A) {
    return ni(this, new k(b, A)) === 0;
  }, i.isFinite = function() {
    return !!this.c;
  }, i.isGreaterThan = i.gt = function(b, A) {
    return ni(this, new k(b, A)) > 0;
  }, i.isGreaterThanOrEqualTo = i.gte = function(b, A) {
    return (A = ni(this, new k(b, A))) === 1 || A === 0;
  }, i.isInteger = function() {
    return !!this.c && br(this.e / Ee) > this.c.length - 2;
  }, i.isLessThan = i.lt = function(b, A) {
    return ni(this, new k(b, A)) < 0;
  }, i.isLessThanOrEqualTo = i.lte = function(b, A) {
    return (A = ni(this, new k(b, A))) === -1 || A === 0;
  }, i.isNaN = function() {
    return !this.s;
  }, i.isNegative = function() {
    return this.s < 0;
  }, i.isPositive = function() {
    return this.s > 0;
  }, i.isZero = function() {
    return !!this.c && this.c[0] == 0;
  }, i.minus = function(b, A) {
    var C, q, W, E, f = this, h = f.s;
    if (b = new k(b, A), A = b.s, !h || !A)
      return new k(NaN);
    if (h != A)
      return b.s = -A, f.plus(b);
    var v = f.e / Ee, m = b.e / Ee, _ = f.c, R = b.c;
    if (!v || !m) {
      if (!_ || !R)
        return _ ? (b.s = -A, b) : new k(R ? f : NaN);
      if (!_[0] || !R[0])
        return R[0] ? (b.s = -A, b) : new k(_[0] ? f : (
          // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity
          a == 3 ? -0 : 0
        ));
    }
    if (v = br(v), m = br(m), _ = _.slice(), h = v - m) {
      for ((E = h < 0) ? (h = -h, W = _) : (m = v, W = R), W.reverse(), A = h; A--; W.push(0))
        ;
      W.reverse();
    } else
      for (q = (E = (h = _.length) < (A = R.length)) ? h : A, h = A = 0; A < q; A++)
        if (_[A] != R[A]) {
          E = _[A] < R[A];
          break;
        }
    if (E && (W = _, _ = R, R = W, b.s = -b.s), A = (q = R.length) - (C = _.length), A > 0)
      for (; A--; _[C++] = 0)
        ;
    for (A = Br - 1; q > h; ) {
      if (_[--q] < R[q]) {
        for (C = q; C && !_[--C]; _[C] = A)
          ;
        --_[C], _[q] += Br;
      }
      _[q] -= R[q];
    }
    for (; _[0] == 0; _.splice(0, 1), --m)
      ;
    return _[0] ? Z(b, _, m) : (b.s = a == 3 ? -1 : 1, b.c = [b.e = 0], b);
  }, i.modulo = i.mod = function(b, A) {
    var C, q, W = this;
    return b = new k(b, A), !W.c || !b.s || b.c && !b.c[0] ? new k(NaN) : !b.c || W.c && !W.c[0] ? new k(W) : (N == 9 ? (q = b.s, b.s = 1, C = t(W, b, 0, 3), b.s = q, C.s *= q) : C = t(W, b, 0, N), b = W.minus(C.times(b)), !b.c[0] && N == 1 && (b.s = W.s), b);
  }, i.multipliedBy = i.times = function(b, A) {
    var C, q, W, E, f, h, v, m, _, R, G, P, p, H, oe, ne = this, V = ne.c, Y = (b = new k(b, A)).c;
    if (!V || !Y || !V[0] || !Y[0])
      return !ne.s || !b.s || V && !V[0] && !Y || Y && !Y[0] && !V ? b.c = b.e = b.s = null : (b.s *= ne.s, !V || !Y ? b.c = b.e = null : (b.c = [0], b.e = 0)), b;
    for (q = br(ne.e / Ee) + br(b.e / Ee), b.s *= ne.s, v = V.length, R = Y.length, v < R && (p = V, V = Y, Y = p, W = v, v = R, R = W), W = v + R, p = []; W--; p.push(0))
      ;
    for (H = Br, oe = An, W = R; --W >= 0; ) {
      for (C = 0, G = Y[W] % oe, P = Y[W] / oe | 0, f = v, E = W + f; E > W; )
        m = V[--f] % oe, _ = V[f] / oe | 0, h = P * m + _ * G, m = G * m + h % oe * oe + p[E] + C, C = (m / H | 0) + (h / oe | 0) + P * _, p[E--] = m % H;
      p[E] = C;
    }
    return C ? ++q : p.splice(0, 1), Z(b, p, q);
  }, i.negated = function() {
    var b = new k(this);
    return b.s = -b.s || null, b;
  }, i.plus = function(b, A) {
    var C, q = this, W = q.s;
    if (b = new k(b, A), A = b.s, !W || !A)
      return new k(NaN);
    if (W != A)
      return b.s = -A, q.minus(b);
    var E = q.e / Ee, f = b.e / Ee, h = q.c, v = b.c;
    if (!E || !f) {
      if (!h || !v)
        return new k(W / 0);
      if (!h[0] || !v[0])
        return v[0] ? b : new k(h[0] ? q : W * 0);
    }
    if (E = br(E), f = br(f), h = h.slice(), W = E - f) {
      for (W > 0 ? (f = E, C = v) : (W = -W, C = h), C.reverse(); W--; C.push(0))
        ;
      C.reverse();
    }
    for (W = h.length, A = v.length, W - A < 0 && (C = v, v = h, h = C, A = W), W = 0; A; )
      W = (h[--A] = h[A] + v[A] + W) / Br | 0, h[A] = Br === h[A] ? 0 : h[A] % Br;
    return W && (h = [W].concat(h), ++f), Z(b, h, f);
  }, i.precision = i.sd = function(b, A) {
    var C, q, W, E = this;
    if (b != null && b !== !!b)
      return Qe(b, 1, Ot), A == null ? A = a : Qe(A, 0, 8), z(new k(E), b, A);
    if (!(C = E.c))
      return null;
    if (W = C.length - 1, q = W * Ee + 1, W = C[W]) {
      for (; W % 10 == 0; W /= 10, q--)
        ;
      for (W = C[0]; W >= 10; W /= 10, q++)
        ;
    }
    return b && E.e + 1 > q && (q = E.e + 1), q;
  }, i.shiftedBy = function(b) {
    return Qe(b, -hc, hc), this.times("1e" + b);
  }, i.squareRoot = i.sqrt = function() {
    var b, A, C, q, W, E = this, f = E.c, h = E.s, v = E.e, m = s + 4, _ = new k("0.5");
    if (h !== 1 || !f || !f[0])
      return new k(!h || h < 0 && (!f || f[0]) ? NaN : f ? E : 1 / 0);
    if (h = Math.sqrt(+te(E)), h == 0 || h == 1 / 0 ? (A = pr(f), (A.length + v) % 2 == 0 && (A += "0"), h = Math.sqrt(+A), v = br((v + 1) / 2) - (v < 0 || v % 2), h == 1 / 0 ? A = "5e" + v : (A = h.toExponential(), A = A.slice(0, A.indexOf("e") + 1) + v), C = new k(A)) : C = new k(h + ""), C.c[0]) {
      for (v = C.e, h = v + m, h < 3 && (h = 0); ; )
        if (W = C, C = _.times(W.plus(t(E, W, m, 1))), pr(W.c).slice(0, h) === (A = pr(C.c)).slice(0, h))
          if (C.e < v && --h, A = A.slice(h - 3, h + 1), A == "9999" || !q && A == "4999") {
            if (!q && (z(W, W.e + s + 2, 0), W.times(W).eq(E))) {
              C = W;
              break;
            }
            m += 4, h += 4, q = 1;
          } else {
            (!+A || !+A.slice(1) && A.charAt(0) == "5") && (z(C, C.e + s + 2, 1), b = !C.times(C).eq(E));
            break;
          }
    }
    return z(C, C.e + s + 1, a, b);
  }, i.toExponential = function(b, A) {
    return b != null && (Qe(b, 0, Ot), b++), F(this, b, A, 1);
  }, i.toFixed = function(b, A) {
    return b != null && (Qe(b, 0, Ot), b = b + this.e + 1), F(this, b, A);
  }, i.toFormat = function(b, A, C) {
    var q, W = this;
    if (C == null)
      b != null && A && typeof A == "object" ? (C = A, A = null) : b && typeof b == "object" ? (C = b, b = A = null) : C = I;
    else if (typeof C != "object")
      throw Error(sr + "Argument not an object: " + C);
    if (q = W.toFixed(b, A), W.c) {
      var E, f = q.split("."), h = +C.groupSize, v = +C.secondaryGroupSize, m = C.groupSeparator || "", _ = f[0], R = f[1], G = W.s < 0, P = G ? _.slice(1) : _, p = P.length;
      if (v && (E = h, h = v, v = E, p -= E), h > 0 && p > 0) {
        for (E = p % h || h, _ = P.substr(0, E); E < p; E += h)
          _ += m + P.substr(E, h);
        v > 0 && (_ += m + P.slice(E)), G && (_ = "-" + _);
      }
      q = R ? _ + (C.decimalSeparator || "") + ((v = +C.fractionGroupSize) ? R.replace(
        new RegExp("\\d{" + v + "}\\B", "g"),
        "$&" + (C.fractionGroupSeparator || "")
      ) : R) : _;
    }
    return (C.prefix || "") + q + (C.suffix || "");
  }, i.toFraction = function(b) {
    var A, C, q, W, E, f, h, v, m, _, R, G, P = this, p = P.c;
    if (b != null && (h = new k(b), !h.isInteger() && (h.c || h.s !== 1) || h.lt(o)))
      throw Error(sr + "Argument " + (h.isInteger() ? "out of range: " : "not an integer: ") + te(h));
    if (!p)
      return new k(P);
    for (A = new k(o), m = C = new k(o), q = v = new k(o), G = pr(p), E = A.e = G.length - P.e - 1, A.c[0] = lc[(f = E % Ee) < 0 ? Ee + f : f], b = !b || h.comparedTo(A) > 0 ? E > 0 ? A : m : h, f = g, g = 1 / 0, h = new k(G), v.c[0] = 0; _ = t(h, A, 0, 1), W = C.plus(_.times(q)), W.comparedTo(b) != 1; )
      C = q, q = W, m = v.plus(_.times(W = m)), v = W, A = h.minus(_.times(W = A)), h = W;
    return W = t(b.minus(C), q, 0, 1), v = v.plus(W.times(m)), C = C.plus(W.times(q)), v.s = m.s = P.s, E = E * 2, R = t(m, q, E, a).minus(P).abs().comparedTo(
      t(v, C, E, a).minus(P).abs()
    ) < 1 ? [m, q] : [v, C], g = f, R;
  }, i.toNumber = function() {
    return +te(this);
  }, i.toPrecision = function(b, A) {
    return b != null && Qe(b, 1, Ot), F(this, b, A, 2);
  }, i.toString = function(b) {
    var A, C = this, q = C.s, W = C.e;
    return W === null ? q ? (A = "Infinity", q < 0 && (A = "-" + A)) : A = "NaN" : (b == null ? A = W <= c || W >= d ? ks(pr(C.c), W) : on(pr(C.c), W, "0") : b === 10 && T ? (C = z(new k(C), s + W + 1, a), A = on(pr(C.c), C.e, "0")) : (Qe(b, 2, M.length, "Base"), A = r(on(pr(C.c), W, "0"), 10, b, q, !0)), q < 0 && C.c[0] && (A = "-" + A)), A;
  }, i.valueOf = i.toJSON = function() {
    return te(this);
  }, i._isBigNumber = !0, i[Symbol.toStringTag] = "BigNumber", i[Symbol.for("nodejs.util.inspect.custom")] = i.valueOf, e != null && k.set(e), k;
}
function br(e) {
  var t = e | 0;
  return e > 0 || e === t ? t : t - 1;
}
function pr(e) {
  for (var t, r, n = 1, i = e.length, o = e[0] + ""; n < i; ) {
    for (t = e[n++] + "", r = Ee - t.length; r--; t = "0" + t)
      ;
    o += t;
  }
  for (i = o.length; o.charCodeAt(--i) === 48; )
    ;
  return o.slice(0, i + 1 || 1);
}
function ni(e, t) {
  var r, n, i = e.c, o = t.c, s = e.s, a = t.s, c = e.e, d = t.e;
  if (!s || !a)
    return null;
  if (r = i && !i[0], n = o && !o[0], r || n)
    return r ? n ? 0 : -a : s;
  if (s != a)
    return s;
  if (r = s < 0, n = c == d, !i || !o)
    return n ? 0 : !i ^ r ? 1 : -1;
  if (!n)
    return c > d ^ r ? 1 : -1;
  for (a = (c = i.length) < (d = o.length) ? c : d, s = 0; s < a; s++)
    if (i[s] != o[s])
      return i[s] > o[s] ^ r ? 1 : -1;
  return c == d ? 0 : c > d ^ r ? 1 : -1;
}
function Qe(e, t, r, n) {
  if (e < t || e > r || e !== vr(e))
    throw Error(sr + (n || "Argument") + (typeof e == "number" ? e < t || e > r ? " out of range: " : " not an integer: " : " not a primitive number: ") + String(e));
}
function Rs(e) {
  var t = e.c.length - 1;
  return br(e.e / Ee) == t && e.c[t] % 2 != 0;
}
function ks(e, t) {
  return (e.length > 1 ? e.charAt(0) + "." + e.slice(1) : e) + (t < 0 ? "e" : "e+") + t;
}
function on(e, t, r) {
  var n, i;
  if (t < 0) {
    for (i = r + "."; ++t; i += r)
      ;
    e = i + e;
  } else if (n = e.length, ++t > n) {
    for (i = r, t -= n; --t; i += r)
      ;
    e += i;
  } else
    t < n && (e = e.slice(0, t) + "." + e.slice(t));
  return e;
}
var dc = cp(), uv = Object.defineProperty, hv = (e, t, r) => t in e ? uv(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r, kr = (e, t, r) => (hv(e, typeof t != "symbol" ? t + "" : t, r), r), si = /* @__PURE__ */ ((e) => (e.THOR = "THOR", e.RUNE = "RUNE", e.ATOM = "ATOM", e.MUON = "MUON", e.USDC = "USDC", e))(si || {}), ve = /* @__PURE__ */ ((e) => (e.INVALID_INPUT_PARAMETERS = "1000", e.UNKNOWN_PROVIDERS = "1001", e.CANNOT_FIND_INBOUND_ADDRESS = "1002", e.NO_INBOUND_ADDRESSES = "1003", e.CHAIN_HALTED_OR_UNSUPPORTED = "1004", e.MISSING_INPUT_PARAMETER = "1005", e.INVALID_TYPE_GENERIC = "1100", e.INVALID_NUMBER_STRING = "1101", e.INVALID_NUMBER = "1102", e.INVALID_BOOLEAN = "1103", e.INVALID_OBJECT = "1104", e.INVALID_ARRAY = "1105", e.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER = "2000", e.SELL_BUY_ASSETS_ARE_THE_SAME = "2001", e.MISSING_SOURCE_ADDRESS_FOR_SYNTH = "2002", e.AFF_ADDRESS_AND_BPS_OR_NEITHER = "2003", e.AFF_ADDRESS_TOO_LONG = "2004", e.AFF_BPS_INTEGER_0_100 = "2005", e.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN = "2006", e.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN = "2007", e.PREFERRED_PROFVIDER_NOT_SUPPORTED = "2008", e.DESTINATION_ADDRESS_SMART_CONTRACT = "2009", e.BUY_AMOUNT_MUST_BE_POSITIVE_INTEGER = "2010", e.SOURCE_ADDRESS_SMART_CONTRACT = "2011", e.INVALID_PROVIDER = "2100", e.MISSING_CROSS_CHAIN_PROVIDER = "2101", e.MISSING_AVAX_PROVIDER = "2102", e.MISSING_BSC_PROVIDER = "2103", e.MISSING_ETH_PROVIDER = "2104", e.INVALID_PROVIDER_FOR_SWAP_OUT = "2105", e.MISSING_ARB_PROVIDER = "2106", e.INVALID_CHAIN = "2200", e.INVALID_ASSET = "2201", e.INVALID_ASSET_IDENTIFIER = "2202", e.UNSUPPORTED_CHAIN = "2204", e.UNSUPPORTED_ASSET = "2203", e.UNSUPPORTED_ASSET_FOR_SWAPOUT = "2205", e.INVALID_SOURCE_ADDRESS = "2300", e.INVALID_DESTINATION_ADDRESS = "2301", e.THORNODE_QUOTE_GENERIC_ERROR = "3000", e.NOT_ENOUGH_SYNTH_BALANCE = "3001", e.SYNTH_MINTING_CAP_REACHED = "3002", e.INVALID_QUOTE_MODE = "4000", e.NO_QUOTES = "4001", e.SERVICE_UNAVAILABLE_GENERIC = "5000", e.MISSING_GAS_DATA_GENERIC = "5100", e.MISSING_TOKEN_INFO_GENERIC = "5200", e.CANT_FIND_TOKEN_LIST = "5201", e.NO_PRICE = "5202", e.PRICE_IS_STALE = "5203", e.ADDRESS_NOT_WHITELISTED = "6000", e.ADDRESS_ALREADY_CLAIMED = "6001", e.TEMPORARY_ERROR = "9999", e))(ve || {});
ve.INVALID_INPUT_PARAMETERS + "", ve.UNKNOWN_PROVIDERS + "", ve.CANNOT_FIND_INBOUND_ADDRESS + "", ve.NO_INBOUND_ADDRESSES + "", ve.CHAIN_HALTED_OR_UNSUPPORTED + "", ve.MISSING_INPUT_PARAMETER + "", ve.INVALID_TYPE_GENERIC + "", ve.INVALID_NUMBER_STRING + "", ve.INVALID_NUMBER + "", ve.INVALID_BOOLEAN + "", ve.INVALID_OBJECT + "", ve.INVALID_ARRAY + "", ve.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER + "", ve.SELL_BUY_ASSETS_ARE_THE_SAME + "", ve.MISSING_SOURCE_ADDRESS_FOR_SYNTH + "", ve.AFF_ADDRESS_AND_BPS_OR_NEITHER + "", ve.AFF_ADDRESS_TOO_LONG + "", ve.AFF_BPS_INTEGER_0_100 + "", ve.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN + "", ve.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN + "", ve.PREFERRED_PROFVIDER_NOT_SUPPORTED + "", ve.DESTINATION_ADDRESS_SMART_CONTRACT + "", ve.BUY_AMOUNT_MUST_BE_POSITIVE_INTEGER + "", ve.INVALID_PROVIDER + "", ve.MISSING_CROSS_CHAIN_PROVIDER + "", ve.MISSING_AVAX_PROVIDER + "", ve.MISSING_BSC_PROVIDER + "", ve.MISSING_ETH_PROVIDER + "", ve.MISSING_ARB_PROVIDER + "", ve.INVALID_PROVIDER_FOR_SWAP_OUT + "", ve.INVALID_CHAIN + "", ve.INVALID_ASSET + "", ve.UNSUPPORTED_CHAIN + "", ve.UNSUPPORTED_ASSET + "", ve.UNSUPPORTED_ASSET_FOR_SWAPOUT + "", ve.THORNODE_QUOTE_GENERIC_ERROR + "", ve.INVALID_SOURCE_ADDRESS + "", ve.INVALID_DESTINATION_ADDRESS + "", ve.NOT_ENOUGH_SYNTH_BALANCE + "", ve.SYNTH_MINTING_CAP_REACHED + "", ve.INVALID_QUOTE_MODE + "", ve.NO_QUOTES + "", ve.SERVICE_UNAVAILABLE_GENERIC + "", ve.MISSING_GAS_DATA_GENERIC + "", ve.MISSING_TOKEN_INFO_GENERIC + "", ve.CANT_FIND_TOKEN_LIST + "", ve.NO_PRICE + "", ve.PRICE_IS_STALE + "", ve.ADDRESS_NOT_WHITELISTED + "", ve.ADDRESS_ALREADY_CLAIMED + "";
var pe = /* @__PURE__ */ ((e) => (e.Arbitrum = "ARB", e.Avalanche = "AVAX", e.Binance = "BNB", e.BinanceSmartChain = "BSC", e.Bitcoin = "BTC", e.BitcoinCash = "BCH", e.Cosmos = "GAIA", e.Dogecoin = "DOGE", e.Ethereum = "ETH", e.Litecoin = "LTC", e.Optimism = "OP", e.Polygon = "MATIC", e.THORChain = "THOR", e))(pe || {}), qo = /* @__PURE__ */ ((e) => (e[e.ARB = 18] = "ARB", e[e.AVAX = 18] = "AVAX", e[e.BCH = 8] = "BCH", e[e.BNB = 8] = "BNB", e[e.BSC = 18] = "BSC", e[e.BTC = 8] = "BTC", e[e.DOGE = 8] = "DOGE", e[e.ETH = 18] = "ETH", e[e.GAIA = 6] = "GAIA", e[e.LTC = 8] = "LTC", e[e.MATIC = 18] = "MATIC", e[e.OP = 18] = "OP", e[e.THOR = 8] = "THOR", e))(qo || {}), eh = /* @__PURE__ */ ((e) => (e.Arbitrum = "42161", e.ArbitrumHex = "0xa4b1", e.Avalanche = "43114", e.AvalancheHex = "0xa86a", e.Binance = "Binance-Chain-Tigris", e.BinanceHex = "", e.BinanceSmartChain = "56", e.BinanceSmartChainHex = "0x38", e.Bitcoin = "bitcoin", e.BitcoinHex = "", e.BitcoinCash = "bitcoincash", e.BitcoinCashHex = "", e.Cosmos = "cosmoshub-4", e.CosmosHex = "", e.Dogecoin = "dogecoin", e.DogecoinHex = "", e.Ethereum = "1", e.EthereumHex = "0x1", e.Litecoin = "litecoin", e.LitecoinHex = "", e.Optimism = "10", e.OptimismHex = "0xa", e.Polygon = "137", e.PolygonHex = "0x89", e.THORChain = "thorchain-mainnet-v1", e.THORChainHex = "", e.THORChainStagenet = "thorchain-stagenet-v2", e))(eh || {}), up = /* @__PURE__ */ ((e) => (e.Arbitrum = "https://arb1.arbitrum.io/rpc", e.Avalanche = "https://node-router.thorswap.net/avalanche-c", e.Binance = "", e.BinanceSmartChain = "https://bsc-dataseed.binance.org", e.Bitcoin = "https://node-router.thorswap.net/bitcoin", e.BitcoinCash = "https://node-router.thorswap.net/bitcoin-cash", e.Cosmos = "https://node-router.thorswap.net/cosmos/rpc", e.Dogecoin = "https://node-router.thorswap.net/dogecoin", e.Ethereum = "https://node-router.thorswap.net/ethereum", e.Litecoin = "https://node-router.thorswap.net/litecoin", e.Optimism = "https://mainnet.optimism.io", e.Polygon = "https://polygon-rpc.com", e.THORChain = "https://rpc.thorswap.net", e.THORChainStagenet = "https://stagenet-rpc.ninerealms.com", e))(up || {});
const Ga = Object.values(pe), lv = Object.keys(pe), th = Ga.reduce(
  (e, t) => {
    const r = lv.find((n) => pe[n] === t);
    return r && (e[t] = r), e;
  },
  {}
);
Ga.reduce(
  (e, t) => (e[t] = eh[th[t]], e),
  {}
);
Ga.reduce(
  (e, t) => (e[t] = up[th[t]], e),
  {}
);
Ga.reduce(
  (e, t) => (e[t] = eh[`${th[t]}Hex`], e),
  {}
);
const dv = (e, t, r = !1) => {
  if (r)
    return "Synth";
  switch (e) {
    case pe.Bitcoin:
    case pe.BitcoinCash:
    case pe.Dogecoin:
    case pe.Litecoin:
    case pe.THORChain:
      return "Native";
    case pe.Cosmos:
      return t === "ATOM" ? "Native" : "GAIA";
    case pe.Binance:
      return t === pe.Binance ? "Native" : "BEP2";
    case pe.BinanceSmartChain:
      return t === pe.Binance ? "Native" : "BEP20";
    case pe.Ethereum:
      return t === pe.Ethereum ? "Native" : "ERC20";
    case pe.Avalanche:
      return t === pe.Avalanche ? "Native" : "AVAX";
    case pe.Polygon:
      return t === pe.Polygon ? "Native" : "POLYGON";
    case pe.Arbitrum:
      return [pe.Ethereum, pe.Arbitrum].includes(t) ? "Native" : "ARBITRUM";
    case pe.Optimism:
      return [pe.Ethereum, pe.Optimism].includes(t) ? "Native" : "OPTIMISM";
    default:
      return e;
  }
};
dc.ROUND_DOWN, dc.ROUND_HALF_UP, dc.ROUND_UP;
const pv = (e, t) => e === pe.Bitcoin ? "Bitcoin" : e === pe.Dogecoin ? "Dogecoin" : e === pe.Litecoin ? "Litecoin" : e === pe.BitcoinCash ? "Bitcoin Cash" : e === pe.Ethereum && t === "ETH" ? "Ethereum" : t, fu = class cu {
  constructor(t, r, n = !1, i) {
    kr(this, "chain"), kr(this, "symbol"), kr(this, "ticker"), kr(this, "type"), kr(this, "network"), kr(this, "name"), kr(this, "decimal"), kr(this, "isSynth", !1), kr(this, "L1Chain"), kr(this, "setDecimal", (o) => {
      this.decimal = o || qo[this.chain] || qo.THOR;
    }), this.chain = t, this.symbol = r.toUpperCase(), this.ticker = i || r.toUpperCase().split("-")[0], this.type = dv(t, this.ticker, n), this.name = n ? `Synth ${this.ticker}` : this.ticker, this.network = pv(t, this.ticker), this.decimal = n ? qo.THOR : qo[t], this.isSynth = n, this.L1Chain = n ? pe.THORChain : t;
  }
  static fromAssetString(t) {
    var r;
    if (!t)
      return null;
    const n = t.includes("/"), [i, ...o] = t.split(n ? "/" : "."), s = o.join("."), a = (r = s == null ? void 0 : s.split("-")) == null ? void 0 : r[0];
    return i && s && a ? new cu(i, s, n) : null;
  }
  getAssetObj() {
    if (this.isSynth) {
      const t = `${this.chain.toLowerCase()}/${this.symbol.toLowerCase()}`;
      return {
        chain: pe.THORChain,
        symbol: t,
        ticker: t
      };
    }
    return { chain: this.chain, symbol: this.symbol, ticker: this.ticker };
  }
  /**
   * convert asset entity to string
   * @returns L1 asset -> btc.btc, Synth asset -> btc/btc
   */
  toString() {
    return `${this.chain}${this.isSynth ? "/" : "."}${this.symbol}`;
  }
  toURLEncoded() {
    return `${this.isSynth ? "THOR." : ""}${this.chain}.${this.symbol}`;
  }
  // full compare chain, symbol, synth
  eq(t) {
    return this.chain === t.chain && this.symbol.toUpperCase() === t.symbol.toUpperCase() && this.ticker.toUpperCase() === t.ticker.toUpperCase() && this.isSynth === t.isSynth;
  }
  // compare chain, symbol but not synth
  shallowEq(t) {
    return this.chain === t.chain && this.symbol.toUpperCase() === t.symbol.toUpperCase() && this.ticker.toUpperCase() === t.ticker.toUpperCase();
  }
  isRUNE() {
    return this.eq(hp(pe.THORChain));
  }
  identifier() {
    return `${this.chain}.${this.symbol}`;
  }
  toSynth() {
    return this.isSynth ? this : new cu(pe.THORChain, `${this.chain}/${this.symbol}`, !0);
  }
};
kr(fu, "decodeFromURL", (e) => {
  var t, r, n;
  let i = e.toUpperCase();
  return i.startsWith("THOR.") && ((t = i.split("THOR.")) == null ? void 0 : t[1]) !== "RUNE" && (i = (n = (r = i.split("THOR.")) == null ? void 0 : r[1]) == null ? void 0 : n.replace(".", "/")), fu.fromAssetString(i);
});
let Kr = fu;
const gv = "THOR-0xa5f2211B9b8170F694421f2046281775E8468044", yv = "VTHOR-0x815C23eCA83261b6Ec689b60Cc4a58b54BC24D8D", Pr = {}, hp = (e, t = !1) => {
  if (Pr[e])
    return Pr[e];
  switch (e) {
    case pe.Avalanche:
    case pe.Binance:
    case pe.Bitcoin:
    case pe.BitcoinCash:
    case pe.Dogecoin:
    case pe.Ethereum:
    case pe.Litecoin: {
      const r = new Kr(e, e, t);
      return Pr[e] = r, r;
    }
    case pe.Optimism:
    case pe.Arbitrum: {
      const r = new Kr(e, pe.Ethereum, t);
      return r.setDecimal(18), Pr[e] = r, r;
    }
    case pe.BinanceSmartChain: {
      const r = new Kr(e, pe.Binance, t);
      return r.setDecimal(18), Pr[e] = r, r;
    }
    case pe.Polygon: {
      const r = new Kr(e, e, t);
      return r.setDecimal(18), Pr[e] = r, r;
    }
    case pe.Cosmos: {
      const r = new Kr(e, si.ATOM, t, si.ATOM);
      return Pr[e] = r, r;
    }
    case pe.THORChain: {
      const r = new Kr(pe.THORChain, si.RUNE, t, si.RUNE);
      return Pr[e] = r, r;
    }
    case "USD": {
      const r = new Kr(pe.THORChain, "USD-USD", t, "USD-USD");
      return Pr[e] = r, r;
    }
    case "ETH_THOR": {
      const r = new Kr(pe.Ethereum, gv, t);
      return r.setDecimal(18), Pr[e] = r, r;
    }
    case "ETH_VTHOR": {
      const r = new Kr(pe.Ethereum, yv, t);
      return r.setDecimal(18), Pr[e] = r, r;
    }
    default:
      return new Kr(pe.THORChain, si.RUNE, t, si.RUNE);
  }
};
function s0(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function ai(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function wv(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  s0(e.outputLen), s0(e.blockLen);
}
function wa(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function vv(e, t) {
  ai(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const pc = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const rh = (e) => e instanceof Uint8Array, co = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), Gr = (e, t) => e << 32 - t | e >>> t, bv = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!bv)
  throw new Error("Non little-endian hardware is not supported");
const mv = /* @__PURE__ */ Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function Ev(e) {
  if (!rh(e))
    throw new Error("Uint8Array expected");
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += mv[e[r]];
  return t;
}
function _v(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  const t = e.length;
  if (t % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + t);
  const r = new Uint8Array(t / 2);
  for (let n = 0; n < r.length; n++) {
    const i = n * 2, o = e.slice(i, i + 2), s = Number.parseInt(o, 16);
    if (Number.isNaN(s) || s < 0)
      throw new Error("Invalid byte sequence");
    r[n] = s;
  }
  return r;
}
function lp(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function nh(e) {
  if (typeof e == "string" && (e = lp(e)), !rh(e))
    throw new Error(`expected Uint8Array, got ${typeof e}`);
  return e;
}
function Wo(...e) {
  const t = new Uint8Array(e.reduce((n, i) => n + i.length, 0));
  let r = 0;
  return e.forEach((n) => {
    if (!rh(n))
      throw new Error("Uint8Array expected");
    t.set(n, r), r += n.length;
  }), t;
}
let dp = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
function ih(e) {
  const t = (n) => e().update(nh(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function Sv(e = 32) {
  if (pc && typeof pc.getRandomValues == "function")
    return pc.getRandomValues(new Uint8Array(e));
  throw new Error("crypto.getRandomValues must be defined");
}
let pp = class extends dp {
  constructor(t, r) {
    super(), this.finished = !1, this.destroyed = !1, wv(t);
    const n = nh(r);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const i = this.blockLen, o = new Uint8Array(i);
    o.set(n.length > i ? t.create().update(n).digest() : n);
    for (let s = 0; s < o.length; s++)
      o[s] ^= 54;
    this.iHash.update(o), this.oHash = t.create();
    for (let s = 0; s < o.length; s++)
      o[s] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(t) {
    return wa(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    wa(this), ai(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: r, iHash: n, finished: i, destroyed: o, blockLen: s, outputLen: a } = this;
    return t = t, t.finished = i, t.destroyed = o, t.blockLen = s, t.outputLen = a, t.oHash = r._cloneInto(t.oHash), t.iHash = n._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
};
const va = (e, t, r) => new pp(e, t).update(r).digest();
va.create = (e, t) => new pp(e, t);
function xv(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const i = BigInt(32), o = BigInt(4294967295), s = Number(r >> i & o), a = Number(r & o), c = n ? 4 : 0, d = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + d, a, n);
}
let oh = class extends dp {
  constructor(t, r, n, i) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = i, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = co(this.buffer);
  }
  update(t) {
    wa(this);
    const { view: r, buffer: n, blockLen: i } = this;
    t = nh(t);
    const o = t.length;
    for (let s = 0; s < o; ) {
      const a = Math.min(i - this.pos, o - s);
      if (a === i) {
        const c = co(t);
        for (; i <= o - s; s += i)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === i && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    wa(this), vv(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: i, isLE: o } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > i - s && (this.process(n, 0), s = 0);
    for (let g = s; g < i; g++)
      r[g] = 0;
    xv(n, i - 8, BigInt(this.length * 8), o), this.process(n, 0);
    const a = co(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const d = c / 4, w = this.get();
    if (d > w.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let g = 0; g < d; g++)
      a.setUint32(4 * g, w[g], o);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: i, finished: o, destroyed: s, pos: a } = this;
    return t.length = i, t.pos = a, t.finished = o, t.destroyed = s, i % r && t.buffer.set(n), t;
  }
};
const Iv = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]), gp = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (e, t) => t), Tv = /* @__PURE__ */ gp.map((e) => (9 * e + 5) % 16);
let sh = [gp], ah = [Tv];
for (let e = 0; e < 4; e++)
  for (let t of [sh, ah])
    t.push(t[e].map((r) => Iv[r]));
const yp = /* @__PURE__ */ [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((e) => new Uint8Array(e)), Av = /* @__PURE__ */ sh.map((e, t) => e.map((r) => yp[t][r])), Ov = /* @__PURE__ */ ah.map((e, t) => e.map((r) => yp[t][r])), Bv = /* @__PURE__ */ new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]), Pv = /* @__PURE__ */ new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]), Ms = (e, t) => e << t | e >>> 32 - t;
function a0(e, t, r, n) {
  return e === 0 ? t ^ r ^ n : e === 1 ? t & r | ~t & n : e === 2 ? (t | ~r) ^ n : e === 3 ? t & n | r & ~n : t ^ (r | ~n);
}
const Us = /* @__PURE__ */ new Uint32Array(16);
let Nv = class extends oh {
  constructor() {
    super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
  }
  get() {
    const { h0: t, h1: r, h2: n, h3: i, h4: o } = this;
    return [t, r, n, i, o];
  }
  set(t, r, n, i, o) {
    this.h0 = t | 0, this.h1 = r | 0, this.h2 = n | 0, this.h3 = i | 0, this.h4 = o | 0;
  }
  process(t, r) {
    for (let N = 0; N < 16; N++, r += 4)
      Us[N] = t.getUint32(r, !0);
    let n = this.h0 | 0, i = n, o = this.h1 | 0, s = o, a = this.h2 | 0, c = a, d = this.h3 | 0, w = d, g = this.h4 | 0, O = g;
    for (let N = 0; N < 5; N++) {
      const B = 4 - N, I = Bv[N], M = Pv[N], T = sh[N], k = ah[N], F = Av[N], X = Ov[N];
      for (let Z = 0; Z < 16; Z++) {
        const z = Ms(n + a0(N, o, a, d) + Us[T[Z]] + I, F[Z]) + g | 0;
        n = g, g = d, d = Ms(a, 10) | 0, a = o, o = z;
      }
      for (let Z = 0; Z < 16; Z++) {
        const z = Ms(i + a0(B, s, c, w) + Us[k[Z]] + M, X[Z]) + O | 0;
        i = O, O = w, w = Ms(c, 10) | 0, c = s, s = z;
      }
    }
    this.set(this.h1 + a + w | 0, this.h2 + d + O | 0, this.h3 + g + i | 0, this.h4 + n + s | 0, this.h0 + o + c | 0);
  }
  roundClean() {
    Us.fill(0);
  }
  destroy() {
    this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
  }
};
const Rv = /* @__PURE__ */ ih(() => new Nv()), kv = (e, t, r) => e & t ^ ~e & r, Mv = (e, t, r) => e & t ^ e & r ^ t & r, Uv = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), On = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Bn = /* @__PURE__ */ new Uint32Array(64);
let Cv = class extends oh {
  constructor() {
    super(64, 32, 8, !1), this.A = On[0] | 0, this.B = On[1] | 0, this.C = On[2] | 0, this.D = On[3] | 0, this.E = On[4] | 0, this.F = On[5] | 0, this.G = On[6] | 0, this.H = On[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: i, E: o, F: s, G: a, H: c } = this;
    return [t, r, n, i, o, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, i, o, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = i | 0, this.E = o | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let g = 0; g < 16; g++, r += 4)
      Bn[g] = t.getUint32(r, !1);
    for (let g = 16; g < 64; g++) {
      const O = Bn[g - 15], N = Bn[g - 2], B = Gr(O, 7) ^ Gr(O, 18) ^ O >>> 3, I = Gr(N, 17) ^ Gr(N, 19) ^ N >>> 10;
      Bn[g] = I + Bn[g - 7] + B + Bn[g - 16] | 0;
    }
    let { A: n, B: i, C: o, D: s, E: a, F: c, G: d, H: w } = this;
    for (let g = 0; g < 64; g++) {
      const O = Gr(a, 6) ^ Gr(a, 11) ^ Gr(a, 25), N = w + O + kv(a, c, d) + Uv[g] + Bn[g] | 0, I = (Gr(n, 2) ^ Gr(n, 13) ^ Gr(n, 22)) + Mv(n, i, o) | 0;
      w = d, d = c, c = a, a = s + N | 0, s = o, o = i, i = n, n = N + I | 0;
    }
    n = n + this.A | 0, i = i + this.B | 0, o = o + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, d = d + this.G | 0, w = w + this.H | 0, this.set(n, i, o, s, a, c, d, w);
  }
  roundClean() {
    Bn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
const fh = /* @__PURE__ */ ih(() => new Cv()), Cs = /* @__PURE__ */ BigInt(2 ** 32 - 1), uu = /* @__PURE__ */ BigInt(32);
function wp(e, t = !1) {
  return t ? { h: Number(e & Cs), l: Number(e >> uu & Cs) } : { h: Number(e >> uu & Cs) | 0, l: Number(e & Cs) | 0 };
}
function Hv(e, t = !1) {
  let r = new Uint32Array(e.length), n = new Uint32Array(e.length);
  for (let i = 0; i < e.length; i++) {
    const { h: o, l: s } = wp(e[i], t);
    [r[i], n[i]] = [o, s];
  }
  return [r, n];
}
const Lv = (e, t) => BigInt(e >>> 0) << uu | BigInt(t >>> 0), Dv = (e, t, r) => e >>> r, $v = (e, t, r) => e << 32 - r | t >>> r, Fv = (e, t, r) => e >>> r | t << 32 - r, Kv = (e, t, r) => e << 32 - r | t >>> r, Gv = (e, t, r) => e << 64 - r | t >>> r - 32, Vv = (e, t, r) => e >>> r - 32 | t << 64 - r, qv = (e, t) => t, Wv = (e, t) => e, jv = (e, t, r) => e << r | t >>> 32 - r, zv = (e, t, r) => t << r | e >>> 32 - r, Xv = (e, t, r) => t << r - 32 | e >>> 64 - r, Yv = (e, t, r) => e << r - 32 | t >>> 64 - r;
function Zv(e, t, r, n) {
  const i = (t >>> 0) + (n >>> 0);
  return { h: e + r + (i / 2 ** 32 | 0) | 0, l: i | 0 };
}
const Jv = (e, t, r) => (e >>> 0) + (t >>> 0) + (r >>> 0), Qv = (e, t, r, n) => t + r + n + (e / 2 ** 32 | 0) | 0, eb = (e, t, r, n) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0), tb = (e, t, r, n, i) => t + r + n + i + (e / 2 ** 32 | 0) | 0, rb = (e, t, r, n, i) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0) + (i >>> 0), nb = (e, t, r, n, i, o) => t + r + n + i + o + (e / 2 ** 32 | 0) | 0, ib = {
  fromBig: wp,
  split: Hv,
  toBig: Lv,
  shrSH: Dv,
  shrSL: $v,
  rotrSH: Fv,
  rotrSL: Kv,
  rotrBH: Gv,
  rotrBL: Vv,
  rotr32H: qv,
  rotr32L: Wv,
  rotlSH: jv,
  rotlSL: zv,
  rotlBH: Xv,
  rotlBL: Yv,
  add: Zv,
  add3L: Jv,
  add3H: Qv,
  add4L: eb,
  add4H: tb,
  add5H: nb,
  add5L: rb
}, xe = ib, [ob, sb] = /* @__PURE__ */ (() => xe.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((e) => BigInt(e))))(), Pn = /* @__PURE__ */ new Uint32Array(80), Nn = /* @__PURE__ */ new Uint32Array(80);
let ab = class extends oh {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: t, Al: r, Bh: n, Bl: i, Ch: o, Cl: s, Dh: a, Dl: c, Eh: d, El: w, Fh: g, Fl: O, Gh: N, Gl: B, Hh: I, Hl: M } = this;
    return [t, r, n, i, o, s, a, c, d, w, g, O, N, B, I, M];
  }
  // prettier-ignore
  set(t, r, n, i, o, s, a, c, d, w, g, O, N, B, I, M) {
    this.Ah = t | 0, this.Al = r | 0, this.Bh = n | 0, this.Bl = i | 0, this.Ch = o | 0, this.Cl = s | 0, this.Dh = a | 0, this.Dl = c | 0, this.Eh = d | 0, this.El = w | 0, this.Fh = g | 0, this.Fl = O | 0, this.Gh = N | 0, this.Gl = B | 0, this.Hh = I | 0, this.Hl = M | 0;
  }
  process(t, r) {
    for (let F = 0; F < 16; F++, r += 4)
      Pn[F] = t.getUint32(r), Nn[F] = t.getUint32(r += 4);
    for (let F = 16; F < 80; F++) {
      const X = Pn[F - 15] | 0, Z = Nn[F - 15] | 0, z = xe.rotrSH(X, Z, 1) ^ xe.rotrSH(X, Z, 8) ^ xe.shrSH(X, Z, 7), te = xe.rotrSL(X, Z, 1) ^ xe.rotrSL(X, Z, 8) ^ xe.shrSL(X, Z, 7), b = Pn[F - 2] | 0, A = Nn[F - 2] | 0, C = xe.rotrSH(b, A, 19) ^ xe.rotrBH(b, A, 61) ^ xe.shrSH(b, A, 6), q = xe.rotrSL(b, A, 19) ^ xe.rotrBL(b, A, 61) ^ xe.shrSL(b, A, 6), W = xe.add4L(te, q, Nn[F - 7], Nn[F - 16]), E = xe.add4H(W, z, C, Pn[F - 7], Pn[F - 16]);
      Pn[F] = E | 0, Nn[F] = W | 0;
    }
    let { Ah: n, Al: i, Bh: o, Bl: s, Ch: a, Cl: c, Dh: d, Dl: w, Eh: g, El: O, Fh: N, Fl: B, Gh: I, Gl: M, Hh: T, Hl: k } = this;
    for (let F = 0; F < 80; F++) {
      const X = xe.rotrSH(g, O, 14) ^ xe.rotrSH(g, O, 18) ^ xe.rotrBH(g, O, 41), Z = xe.rotrSL(g, O, 14) ^ xe.rotrSL(g, O, 18) ^ xe.rotrBL(g, O, 41), z = g & N ^ ~g & I, te = O & B ^ ~O & M, b = xe.add5L(k, Z, te, sb[F], Nn[F]), A = xe.add5H(b, T, X, z, ob[F], Pn[F]), C = b | 0, q = xe.rotrSH(n, i, 28) ^ xe.rotrBH(n, i, 34) ^ xe.rotrBH(n, i, 39), W = xe.rotrSL(n, i, 28) ^ xe.rotrBL(n, i, 34) ^ xe.rotrBL(n, i, 39), E = n & o ^ n & a ^ o & a, f = i & s ^ i & c ^ s & c;
      T = I | 0, k = M | 0, I = N | 0, M = B | 0, N = g | 0, B = O | 0, { h: g, l: O } = xe.add(d | 0, w | 0, A | 0, C | 0), d = a | 0, w = c | 0, a = o | 0, c = s | 0, o = n | 0, s = i | 0;
      const h = xe.add3L(C, W, f);
      n = xe.add3H(h, A, q, E), i = h | 0;
    }
    ({ h: n, l: i } = xe.add(this.Ah | 0, this.Al | 0, n | 0, i | 0)), { h: o, l: s } = xe.add(this.Bh | 0, this.Bl | 0, o | 0, s | 0), { h: a, l: c } = xe.add(this.Ch | 0, this.Cl | 0, a | 0, c | 0), { h: d, l: w } = xe.add(this.Dh | 0, this.Dl | 0, d | 0, w | 0), { h: g, l: O } = xe.add(this.Eh | 0, this.El | 0, g | 0, O | 0), { h: N, l: B } = xe.add(this.Fh | 0, this.Fl | 0, N | 0, B | 0), { h: I, l: M } = xe.add(this.Gh | 0, this.Gl | 0, I | 0, M | 0), { h: T, l: k } = xe.add(this.Hh | 0, this.Hl | 0, T | 0, k | 0), this.set(n, i, o, s, a, c, d, w, g, O, N, B, I, M, T, k);
  }
  roundClean() {
    Pn.fill(0), Nn.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
const f0 = /* @__PURE__ */ ih(() => new ab());
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const vp = BigInt(0), Va = BigInt(1), fb = BigInt(2), qa = (e) => e instanceof Uint8Array, cb = /* @__PURE__ */ Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function wo(e) {
  if (!qa(e))
    throw new Error("Uint8Array expected");
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += cb[e[r]];
  return t;
}
function bp(e) {
  const t = e.toString(16);
  return t.length & 1 ? `0${t}` : t;
}
function ch(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  return BigInt(e === "" ? "0" : `0x${e}`);
}
function vo(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  const t = e.length;
  if (t % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + t);
  const r = new Uint8Array(t / 2);
  for (let n = 0; n < r.length; n++) {
    const i = n * 2, o = e.slice(i, i + 2), s = Number.parseInt(o, 16);
    if (Number.isNaN(s) || s < 0)
      throw new Error("Invalid byte sequence");
    r[n] = s;
  }
  return r;
}
function vi(e) {
  return ch(wo(e));
}
function uh(e) {
  if (!qa(e))
    throw new Error("Uint8Array expected");
  return ch(wo(Uint8Array.from(e).reverse()));
}
function bo(e, t) {
  return vo(e.toString(16).padStart(t * 2, "0"));
}
function hh(e, t) {
  return bo(e, t).reverse();
}
function ub(e) {
  return vo(bp(e));
}
function Ur(e, t, r) {
  let n;
  if (typeof t == "string")
    try {
      n = vo(t);
    } catch (o) {
      throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${o}`);
    }
  else if (qa(t))
    n = Uint8Array.from(t);
  else
    throw new Error(`${e} must be hex string or Uint8Array`);
  const i = n.length;
  if (typeof r == "number" && i !== r)
    throw new Error(`${e} expected ${r} bytes, got ${i}`);
  return n;
}
function os(...e) {
  const t = new Uint8Array(e.reduce((n, i) => n + i.length, 0));
  let r = 0;
  return e.forEach((n) => {
    if (!qa(n))
      throw new Error("Uint8Array expected");
    t.set(n, r), r += n.length;
  }), t;
}
function hb(e, t) {
  if (e.length !== t.length)
    return !1;
  for (let r = 0; r < e.length; r++)
    if (e[r] !== t[r])
      return !1;
  return !0;
}
function lb(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function db(e) {
  let t;
  for (t = 0; e > vp; e >>= Va, t += 1)
    ;
  return t;
}
function pb(e, t) {
  return e >> BigInt(t) & Va;
}
const gb = (e, t, r) => e | (r ? Va : vp) << BigInt(t), lh = (e) => (fb << BigInt(e - 1)) - Va, gc = (e) => new Uint8Array(e), c0 = (e) => Uint8Array.from(e);
function mp(e, t, r) {
  if (typeof e != "number" || e < 2)
    throw new Error("hashLen must be a number");
  if (typeof t != "number" || t < 2)
    throw new Error("qByteLen must be a number");
  if (typeof r != "function")
    throw new Error("hmacFn must be a function");
  let n = gc(e), i = gc(e), o = 0;
  const s = () => {
    n.fill(1), i.fill(0), o = 0;
  }, a = (...g) => r(i, n, ...g), c = (g = gc()) => {
    i = a(c0([0]), g), n = a(), g.length !== 0 && (i = a(c0([1]), g), n = a());
  }, d = () => {
    if (o++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let g = 0;
    const O = [];
    for (; g < t; ) {
      n = a();
      const N = n.slice();
      O.push(N), g += n.length;
    }
    return os(...O);
  };
  return (g, O) => {
    s(), c(g);
    let N;
    for (; !(N = O(d())); )
      c();
    return s(), N;
  };
}
const yb = {
  bigint: (e) => typeof e == "bigint",
  function: (e) => typeof e == "function",
  boolean: (e) => typeof e == "boolean",
  string: (e) => typeof e == "string",
  stringOrUint8Array: (e) => typeof e == "string" || e instanceof Uint8Array,
  isSafeInteger: (e) => Number.isSafeInteger(e),
  array: (e) => Array.isArray(e),
  field: (e, t) => t.Fp.isValid(e),
  hash: (e) => typeof e == "function" && Number.isSafeInteger(e.outputLen)
};
function vs(e, t, r = {}) {
  const n = (i, o, s) => {
    const a = yb[o];
    if (typeof a != "function")
      throw new Error(`Invalid validator "${o}", expected function`);
    const c = e[i];
    if (!(s && c === void 0) && !a(c, e))
      throw new Error(`Invalid param ${String(i)}=${c} (${typeof c}), expected ${o}`);
  };
  for (const [i, o] of Object.entries(t))
    n(i, o, !1);
  for (const [i, o] of Object.entries(r))
    n(i, o, !0);
  return e;
}
const wb = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet: pb,
  bitLen: db,
  bitMask: lh,
  bitSet: gb,
  bytesToHex: wo,
  bytesToNumberBE: vi,
  bytesToNumberLE: uh,
  concatBytes: os,
  createHmacDrbg: mp,
  ensureBytes: Ur,
  equalBytes: hb,
  hexToBytes: vo,
  hexToNumber: ch,
  numberToBytesBE: bo,
  numberToBytesLE: hh,
  numberToHexUnpadded: bp,
  numberToVarBytesBE: ub,
  utf8ToBytes: lb,
  validateObject: vs
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Nt = BigInt(0), rt = BigInt(1), fi = BigInt(2), vb = BigInt(3), hu = BigInt(4), u0 = BigInt(5), h0 = BigInt(8);
BigInt(9);
BigInt(16);
function Jt(e, t) {
  const r = e % t;
  return r >= Nt ? r : t + r;
}
function bb(e, t, r) {
  if (r <= Nt || t < Nt)
    throw new Error("Expected power/modulo > 0");
  if (r === rt)
    return Nt;
  let n = rt;
  for (; t > Nt; )
    t & rt && (n = n * e % r), e = e * e % r, t >>= rt;
  return n;
}
function gr(e, t, r) {
  let n = e;
  for (; t-- > Nt; )
    n *= n, n %= r;
  return n;
}
function lu(e, t) {
  if (e === Nt || t <= Nt)
    throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);
  let r = Jt(e, t), n = t, i = Nt, o = rt;
  for (; r !== Nt; ) {
    const a = n / r, c = n % r, d = i - o * a;
    n = r, r = c, i = o, o = d;
  }
  if (n !== rt)
    throw new Error("invert: does not exist");
  return Jt(i, t);
}
function mb(e) {
  const t = (e - rt) / fi;
  let r, n, i;
  for (r = e - rt, n = 0; r % fi === Nt; r /= fi, n++)
    ;
  for (i = fi; i < e && bb(i, t, e) !== e - rt; i++)
    ;
  if (n === 1) {
    const s = (e + rt) / hu;
    return function(c, d) {
      const w = c.pow(d, s);
      if (!c.eql(c.sqr(w), d))
        throw new Error("Cannot find square root");
      return w;
    };
  }
  const o = (r + rt) / fi;
  return function(a, c) {
    if (a.pow(c, t) === a.neg(a.ONE))
      throw new Error("Cannot find square root");
    let d = n, w = a.pow(a.mul(a.ONE, i), r), g = a.pow(c, o), O = a.pow(c, r);
    for (; !a.eql(O, a.ONE); ) {
      if (a.eql(O, a.ZERO))
        return a.ZERO;
      let N = 1;
      for (let I = a.sqr(O); N < d && !a.eql(I, a.ONE); N++)
        I = a.sqr(I);
      const B = a.pow(w, rt << BigInt(d - N - 1));
      w = a.sqr(B), g = a.mul(g, B), O = a.mul(O, w), d = N;
    }
    return g;
  };
}
function Eb(e) {
  if (e % hu === vb) {
    const t = (e + rt) / hu;
    return function(n, i) {
      const o = n.pow(i, t);
      if (!n.eql(n.sqr(o), i))
        throw new Error("Cannot find square root");
      return o;
    };
  }
  if (e % h0 === u0) {
    const t = (e - u0) / h0;
    return function(n, i) {
      const o = n.mul(i, fi), s = n.pow(o, t), a = n.mul(i, s), c = n.mul(n.mul(a, fi), s), d = n.mul(a, n.sub(c, n.ONE));
      if (!n.eql(n.sqr(d), i))
        throw new Error("Cannot find square root");
      return d;
    };
  }
  return mb(e);
}
const _b = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function Sb(e) {
  const t = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, r = _b.reduce((n, i) => (n[i] = "function", n), t);
  return vs(e, r);
}
function xb(e, t, r) {
  if (r < Nt)
    throw new Error("Expected power > 0");
  if (r === Nt)
    return e.ONE;
  if (r === rt)
    return t;
  let n = e.ONE, i = t;
  for (; r > Nt; )
    r & rt && (n = e.mul(n, i)), i = e.sqr(i), r >>= rt;
  return n;
}
function Ib(e, t) {
  const r = new Array(t.length), n = t.reduce((o, s, a) => e.is0(s) ? o : (r[a] = o, e.mul(o, s)), e.ONE), i = e.inv(n);
  return t.reduceRight((o, s, a) => e.is0(s) ? o : (r[a] = e.mul(o, r[a]), e.mul(o, s)), i), r;
}
function Ep(e, t) {
  const r = t !== void 0 ? t : e.toString(2).length, n = Math.ceil(r / 8);
  return { nBitLength: r, nByteLength: n };
}
function Tb(e, t, r = !1, n = {}) {
  if (e <= Nt)
    throw new Error(`Expected Field ORDER > 0, got ${e}`);
  const { nBitLength: i, nByteLength: o } = Ep(e, t);
  if (o > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const s = Eb(e), a = Object.freeze({
    ORDER: e,
    BITS: i,
    BYTES: o,
    MASK: lh(i),
    ZERO: Nt,
    ONE: rt,
    create: (c) => Jt(c, e),
    isValid: (c) => {
      if (typeof c != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof c}`);
      return Nt <= c && c < e;
    },
    is0: (c) => c === Nt,
    isOdd: (c) => (c & rt) === rt,
    neg: (c) => Jt(-c, e),
    eql: (c, d) => c === d,
    sqr: (c) => Jt(c * c, e),
    add: (c, d) => Jt(c + d, e),
    sub: (c, d) => Jt(c - d, e),
    mul: (c, d) => Jt(c * d, e),
    pow: (c, d) => xb(a, c, d),
    div: (c, d) => Jt(c * lu(d, e), e),
    // Same as above, but doesn't normalize
    sqrN: (c) => c * c,
    addN: (c, d) => c + d,
    subN: (c, d) => c - d,
    mulN: (c, d) => c * d,
    inv: (c) => lu(c, e),
    sqrt: n.sqrt || ((c) => s(a, c)),
    invertBatch: (c) => Ib(a, c),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (c, d, w) => w ? d : c,
    toBytes: (c) => r ? hh(c, o) : bo(c, o),
    fromBytes: (c) => {
      if (c.length !== o)
        throw new Error(`Fp.fromBytes: expected ${o}, got ${c.length}`);
      return r ? uh(c) : vi(c);
    }
  });
  return Object.freeze(a);
}
function _p(e) {
  if (typeof e != "bigint")
    throw new Error("field order must be bigint");
  const t = e.toString(2).length;
  return Math.ceil(t / 8);
}
function Sp(e) {
  const t = _p(e);
  return t + Math.ceil(t / 2);
}
function Ab(e, t, r = !1) {
  const n = e.length, i = _p(t), o = Sp(t);
  if (n < 16 || n < o || n > 1024)
    throw new Error(`expected ${o}-1024 bytes of input, got ${n}`);
  const s = r ? vi(e) : uh(e), a = Jt(s, t - rt) + rt;
  return r ? hh(a, i) : bo(a, i);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Ob = BigInt(0), yc = BigInt(1);
function Bb(e, t) {
  const r = (i, o) => {
    const s = o.negate();
    return i ? s : o;
  }, n = (i) => {
    const o = Math.ceil(t / i) + 1, s = 2 ** (i - 1);
    return { windows: o, windowSize: s };
  };
  return {
    constTimeNegate: r,
    // non-const time multiplication ladder
    unsafeLadder(i, o) {
      let s = e.ZERO, a = i;
      for (; o > Ob; )
        o & yc && (s = s.add(a)), a = a.double(), o >>= yc;
      return s;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(i, o) {
      const { windows: s, windowSize: a } = n(o), c = [];
      let d = i, w = d;
      for (let g = 0; g < s; g++) {
        w = d, c.push(w);
        for (let O = 1; O < a; O++)
          w = w.add(d), c.push(w);
        d = w.double();
      }
      return c;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(i, o, s) {
      const { windows: a, windowSize: c } = n(i);
      let d = e.ZERO, w = e.BASE;
      const g = BigInt(2 ** i - 1), O = 2 ** i, N = BigInt(i);
      for (let B = 0; B < a; B++) {
        const I = B * c;
        let M = Number(s & g);
        s >>= N, M > c && (M -= O, s += yc);
        const T = I, k = I + Math.abs(M) - 1, F = B % 2 !== 0, X = M < 0;
        M === 0 ? w = w.add(r(F, o[T])) : d = d.add(r(X, o[k]));
      }
      return { p: d, f: w };
    },
    wNAFCached(i, o, s, a) {
      const c = i._WINDOW_SIZE || 1;
      let d = o.get(i);
      return d || (d = this.precomputeWindow(i, c), c !== 1 && o.set(i, a(d))), this.wNAF(c, d, s);
    }
  };
}
function xp(e) {
  return Sb(e.Fp), vs(e, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...Ep(e.n, e.nBitLength),
    ...e,
    p: e.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function Pb(e) {
  const t = xp(e);
  vs(t, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: r, Fp: n, a: i } = t;
  if (r) {
    if (!n.eql(i, n.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof r != "object" || typeof r.beta != "bigint" || typeof r.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...t });
}
const { bytesToNumberBE: Nb, hexToBytes: Rb } = wb, di = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(t = "") {
      super(t);
    }
  },
  _parseInt(e) {
    const { Err: t } = di;
    if (e.length < 2 || e[0] !== 2)
      throw new t("Invalid signature integer tag");
    const r = e[1], n = e.subarray(2, r + 2);
    if (!r || n.length !== r)
      throw new t("Invalid signature integer: wrong length");
    if (n[0] & 128)
      throw new t("Invalid signature integer: negative");
    if (n[0] === 0 && !(n[1] & 128))
      throw new t("Invalid signature integer: unnecessary leading zero");
    return { d: Nb(n), l: e.subarray(r + 2) };
  },
  toSig(e) {
    const { Err: t } = di, r = typeof e == "string" ? Rb(e) : e;
    if (!(r instanceof Uint8Array))
      throw new Error("ui8a expected");
    let n = r.length;
    if (n < 2 || r[0] != 48)
      throw new t("Invalid signature tag");
    if (r[1] !== n - 2)
      throw new t("Invalid signature: incorrect length");
    const { d: i, l: o } = di._parseInt(r.subarray(2)), { d: s, l: a } = di._parseInt(o);
    if (a.length)
      throw new t("Invalid signature: left bytes after parsing");
    return { r: i, s };
  },
  hexFromSig(e) {
    const t = (d) => Number.parseInt(d[0], 16) & 8 ? "00" + d : d, r = (d) => {
      const w = d.toString(16);
      return w.length & 1 ? `0${w}` : w;
    }, n = t(r(e.s)), i = t(r(e.r)), o = n.length / 2, s = i.length / 2, a = r(o), c = r(s);
    return `30${r(s + o + 4)}02${c}${i}02${a}${n}`;
  }
}, dn = BigInt(0), Er = BigInt(1);
BigInt(2);
const l0 = BigInt(3);
BigInt(4);
function kb(e) {
  const t = Pb(e), { Fp: r } = t, n = t.toBytes || ((B, I, M) => {
    const T = I.toAffine();
    return os(Uint8Array.from([4]), r.toBytes(T.x), r.toBytes(T.y));
  }), i = t.fromBytes || ((B) => {
    const I = B.subarray(1), M = r.fromBytes(I.subarray(0, r.BYTES)), T = r.fromBytes(I.subarray(r.BYTES, 2 * r.BYTES));
    return { x: M, y: T };
  });
  function o(B) {
    const { a: I, b: M } = t, T = r.sqr(B), k = r.mul(T, B);
    return r.add(r.add(k, r.mul(B, I)), M);
  }
  if (!r.eql(r.sqr(t.Gy), o(t.Gx)))
    throw new Error("bad generator point: equation left != right");
  function s(B) {
    return typeof B == "bigint" && dn < B && B < t.n;
  }
  function a(B) {
    if (!s(B))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function c(B) {
    const { allowedPrivateKeyLengths: I, nByteLength: M, wrapPrivateKey: T, n: k } = t;
    if (I && typeof B != "bigint") {
      if (B instanceof Uint8Array && (B = wo(B)), typeof B != "string" || !I.includes(B.length))
        throw new Error("Invalid key");
      B = B.padStart(M * 2, "0");
    }
    let F;
    try {
      F = typeof B == "bigint" ? B : vi(Ur("private key", B, M));
    } catch {
      throw new Error(`private key must be ${M} bytes, hex or bigint, not ${typeof B}`);
    }
    return T && (F = Jt(F, k)), a(F), F;
  }
  const d = /* @__PURE__ */ new Map();
  function w(B) {
    if (!(B instanceof g))
      throw new Error("ProjectivePoint expected");
  }
  class g {
    constructor(I, M, T) {
      if (this.px = I, this.py = M, this.pz = T, I == null || !r.isValid(I))
        throw new Error("x required");
      if (M == null || !r.isValid(M))
        throw new Error("y required");
      if (T == null || !r.isValid(T))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(I) {
      const { x: M, y: T } = I || {};
      if (!I || !r.isValid(M) || !r.isValid(T))
        throw new Error("invalid affine point");
      if (I instanceof g)
        throw new Error("projective point not allowed");
      const k = (F) => r.eql(F, r.ZERO);
      return k(M) && k(T) ? g.ZERO : new g(M, T, r.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(I) {
      const M = r.invertBatch(I.map((T) => T.pz));
      return I.map((T, k) => T.toAffine(M[k])).map(g.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(I) {
      const M = g.fromAffine(i(Ur("pointHex", I)));
      return M.assertValidity(), M;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(I) {
      return g.BASE.multiply(c(I));
    }
    // "Private method", don't use it directly
    _setWindowSize(I) {
      this._WINDOW_SIZE = I, d.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (t.allowInfinityPoint && !r.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: I, y: M } = this.toAffine();
      if (!r.isValid(I) || !r.isValid(M))
        throw new Error("bad point: x or y not FE");
      const T = r.sqr(M), k = o(I);
      if (!r.eql(T, k))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: I } = this.toAffine();
      if (r.isOdd)
        return !r.isOdd(I);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(I) {
      w(I);
      const { px: M, py: T, pz: k } = this, { px: F, py: X, pz: Z } = I, z = r.eql(r.mul(M, Z), r.mul(F, k)), te = r.eql(r.mul(T, Z), r.mul(X, k));
      return z && te;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new g(this.px, r.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: I, b: M } = t, T = r.mul(M, l0), { px: k, py: F, pz: X } = this;
      let Z = r.ZERO, z = r.ZERO, te = r.ZERO, b = r.mul(k, k), A = r.mul(F, F), C = r.mul(X, X), q = r.mul(k, F);
      return q = r.add(q, q), te = r.mul(k, X), te = r.add(te, te), Z = r.mul(I, te), z = r.mul(T, C), z = r.add(Z, z), Z = r.sub(A, z), z = r.add(A, z), z = r.mul(Z, z), Z = r.mul(q, Z), te = r.mul(T, te), C = r.mul(I, C), q = r.sub(b, C), q = r.mul(I, q), q = r.add(q, te), te = r.add(b, b), b = r.add(te, b), b = r.add(b, C), b = r.mul(b, q), z = r.add(z, b), C = r.mul(F, X), C = r.add(C, C), b = r.mul(C, q), Z = r.sub(Z, b), te = r.mul(C, A), te = r.add(te, te), te = r.add(te, te), new g(Z, z, te);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(I) {
      w(I);
      const { px: M, py: T, pz: k } = this, { px: F, py: X, pz: Z } = I;
      let z = r.ZERO, te = r.ZERO, b = r.ZERO;
      const A = t.a, C = r.mul(t.b, l0);
      let q = r.mul(M, F), W = r.mul(T, X), E = r.mul(k, Z), f = r.add(M, T), h = r.add(F, X);
      f = r.mul(f, h), h = r.add(q, W), f = r.sub(f, h), h = r.add(M, k);
      let v = r.add(F, Z);
      return h = r.mul(h, v), v = r.add(q, E), h = r.sub(h, v), v = r.add(T, k), z = r.add(X, Z), v = r.mul(v, z), z = r.add(W, E), v = r.sub(v, z), b = r.mul(A, h), z = r.mul(C, E), b = r.add(z, b), z = r.sub(W, b), b = r.add(W, b), te = r.mul(z, b), W = r.add(q, q), W = r.add(W, q), E = r.mul(A, E), h = r.mul(C, h), W = r.add(W, E), E = r.sub(q, E), E = r.mul(A, E), h = r.add(h, E), q = r.mul(W, h), te = r.add(te, q), q = r.mul(v, h), z = r.mul(f, z), z = r.sub(z, q), q = r.mul(f, W), b = r.mul(v, b), b = r.add(b, q), new g(z, te, b);
    }
    subtract(I) {
      return this.add(I.negate());
    }
    is0() {
      return this.equals(g.ZERO);
    }
    wNAF(I) {
      return N.wNAFCached(this, d, I, (M) => {
        const T = r.invertBatch(M.map((k) => k.pz));
        return M.map((k, F) => k.toAffine(T[F])).map(g.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(I) {
      const M = g.ZERO;
      if (I === dn)
        return M;
      if (a(I), I === Er)
        return this;
      const { endo: T } = t;
      if (!T)
        return N.unsafeLadder(this, I);
      let { k1neg: k, k1: F, k2neg: X, k2: Z } = T.splitScalar(I), z = M, te = M, b = this;
      for (; F > dn || Z > dn; )
        F & Er && (z = z.add(b)), Z & Er && (te = te.add(b)), b = b.double(), F >>= Er, Z >>= Er;
      return k && (z = z.negate()), X && (te = te.negate()), te = new g(r.mul(te.px, T.beta), te.py, te.pz), z.add(te);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(I) {
      a(I);
      let M = I, T, k;
      const { endo: F } = t;
      if (F) {
        const { k1neg: X, k1: Z, k2neg: z, k2: te } = F.splitScalar(M);
        let { p: b, f: A } = this.wNAF(Z), { p: C, f: q } = this.wNAF(te);
        b = N.constTimeNegate(X, b), C = N.constTimeNegate(z, C), C = new g(r.mul(C.px, F.beta), C.py, C.pz), T = b.add(C), k = A.add(q);
      } else {
        const { p: X, f: Z } = this.wNAF(M);
        T = X, k = Z;
      }
      return g.normalizeZ([T, k])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(I, M, T) {
      const k = g.BASE, F = (Z, z) => z === dn || z === Er || !Z.equals(k) ? Z.multiplyUnsafe(z) : Z.multiply(z), X = F(this, M).add(F(I, T));
      return X.is0() ? void 0 : X;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(I) {
      const { px: M, py: T, pz: k } = this, F = this.is0();
      I == null && (I = F ? r.ONE : r.inv(k));
      const X = r.mul(M, I), Z = r.mul(T, I), z = r.mul(k, I);
      if (F)
        return { x: r.ZERO, y: r.ZERO };
      if (!r.eql(z, r.ONE))
        throw new Error("invZ was invalid");
      return { x: X, y: Z };
    }
    isTorsionFree() {
      const { h: I, isTorsionFree: M } = t;
      if (I === Er)
        return !0;
      if (M)
        return M(g, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: I, clearCofactor: M } = t;
      return I === Er ? this : M ? M(g, this) : this.multiplyUnsafe(t.h);
    }
    toRawBytes(I = !0) {
      return this.assertValidity(), n(g, this, I);
    }
    toHex(I = !0) {
      return wo(this.toRawBytes(I));
    }
  }
  g.BASE = new g(t.Gx, t.Gy, r.ONE), g.ZERO = new g(r.ZERO, r.ONE, r.ZERO);
  const O = t.nBitLength, N = Bb(g, t.endo ? Math.ceil(O / 2) : O);
  return {
    CURVE: t,
    ProjectivePoint: g,
    normPrivateKeyToScalar: c,
    weierstrassEquation: o,
    isWithinCurveOrder: s
  };
}
function Mb(e) {
  const t = xp(e);
  return vs(t, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...t });
}
function Ub(e) {
  const t = Mb(e), { Fp: r, n } = t, i = r.BYTES + 1, o = 2 * r.BYTES + 1;
  function s(h) {
    return dn < h && h < r.ORDER;
  }
  function a(h) {
    return Jt(h, n);
  }
  function c(h) {
    return lu(h, n);
  }
  const { ProjectivePoint: d, normPrivateKeyToScalar: w, weierstrassEquation: g, isWithinCurveOrder: O } = kb({
    ...t,
    toBytes(h, v, m) {
      const _ = v.toAffine(), R = r.toBytes(_.x), G = os;
      return m ? G(Uint8Array.from([v.hasEvenY() ? 2 : 3]), R) : G(Uint8Array.from([4]), R, r.toBytes(_.y));
    },
    fromBytes(h) {
      const v = h.length, m = h[0], _ = h.subarray(1);
      if (v === i && (m === 2 || m === 3)) {
        const R = vi(_);
        if (!s(R))
          throw new Error("Point is not on curve");
        const G = g(R);
        let P = r.sqrt(G);
        const p = (P & Er) === Er;
        return (m & 1) === 1 !== p && (P = r.neg(P)), { x: R, y: P };
      } else if (v === o && m === 4) {
        const R = r.fromBytes(_.subarray(0, r.BYTES)), G = r.fromBytes(_.subarray(r.BYTES, 2 * r.BYTES));
        return { x: R, y: G };
      } else
        throw new Error(`Point of length ${v} was invalid. Expected ${i} compressed bytes or ${o} uncompressed bytes`);
    }
  }), N = (h) => wo(bo(h, t.nByteLength));
  function B(h) {
    const v = n >> Er;
    return h > v;
  }
  function I(h) {
    return B(h) ? a(-h) : h;
  }
  const M = (h, v, m) => vi(h.slice(v, m));
  class T {
    constructor(v, m, _) {
      this.r = v, this.s = m, this.recovery = _, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(v) {
      const m = t.nByteLength;
      return v = Ur("compactSignature", v, m * 2), new T(M(v, 0, m), M(v, m, 2 * m));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(v) {
      const { r: m, s: _ } = di.toSig(Ur("DER", v));
      return new T(m, _);
    }
    assertValidity() {
      if (!O(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!O(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(v) {
      return new T(this.r, this.s, v);
    }
    recoverPublicKey(v) {
      const { r: m, s: _, recovery: R } = this, G = te(Ur("msgHash", v));
      if (R == null || ![0, 1, 2, 3].includes(R))
        throw new Error("recovery id invalid");
      const P = R === 2 || R === 3 ? m + t.n : m;
      if (P >= r.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const p = R & 1 ? "03" : "02", H = d.fromHex(p + N(P)), oe = c(P), ne = a(-G * oe), V = a(_ * oe), Y = d.BASE.multiplyAndAddUnsafe(H, ne, V);
      if (!Y)
        throw new Error("point at infinify");
      return Y.assertValidity(), Y;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return B(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new T(this.r, a(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return vo(this.toDERHex());
    }
    toDERHex() {
      return di.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return vo(this.toCompactHex());
    }
    toCompactHex() {
      return N(this.r) + N(this.s);
    }
  }
  const k = {
    isValidPrivateKey(h) {
      try {
        return w(h), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: w,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const h = Sp(t.n);
      return Ab(t.randomBytes(h), t.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(h = 8, v = d.BASE) {
      return v._setWindowSize(h), v.multiply(BigInt(3)), v;
    }
  };
  function F(h, v = !0) {
    return d.fromPrivateKey(h).toRawBytes(v);
  }
  function X(h) {
    const v = h instanceof Uint8Array, m = typeof h == "string", _ = (v || m) && h.length;
    return v ? _ === i || _ === o : m ? _ === 2 * i || _ === 2 * o : h instanceof d;
  }
  function Z(h, v, m = !0) {
    if (X(h))
      throw new Error("first arg must be private key");
    if (!X(v))
      throw new Error("second arg must be public key");
    return d.fromHex(v).multiply(w(h)).toRawBytes(m);
  }
  const z = t.bits2int || function(h) {
    const v = vi(h), m = h.length * 8 - t.nBitLength;
    return m > 0 ? v >> BigInt(m) : v;
  }, te = t.bits2int_modN || function(h) {
    return a(z(h));
  }, b = lh(t.nBitLength);
  function A(h) {
    if (typeof h != "bigint")
      throw new Error("bigint expected");
    if (!(dn <= h && h < b))
      throw new Error(`bigint expected < 2^${t.nBitLength}`);
    return bo(h, t.nByteLength);
  }
  function C(h, v, m = q) {
    if (["recovered", "canonical"].some((ie) => ie in m))
      throw new Error("sign() legacy options not supported");
    const { hash: _, randomBytes: R } = t;
    let { lowS: G, prehash: P, extraEntropy: p } = m;
    G == null && (G = !0), h = Ur("msgHash", h), P && (h = Ur("prehashed msgHash", _(h)));
    const H = te(h), oe = w(v), ne = [A(oe), A(H)];
    if (p != null) {
      const ie = p === !0 ? R(r.BYTES) : p;
      ne.push(Ur("extraEntropy", ie));
    }
    const V = os(...ne), Y = H;
    function Q(ie) {
      const de = z(ie);
      if (!O(de))
        return;
      const L = c(de), $ = d.BASE.multiply(de).toAffine(), ee = a($.x);
      if (ee === dn)
        return;
      const re = a(L * a(Y + ee * oe));
      if (re === dn)
        return;
      let ae = ($.x === ee ? 0 : 2) | Number($.y & Er), me = re;
      return G && B(re) && (me = I(re), ae ^= 1), new T(ee, me, ae);
    }
    return { seed: V, k2sig: Q };
  }
  const q = { lowS: t.lowS, prehash: !1 }, W = { lowS: t.lowS, prehash: !1 };
  function E(h, v, m = q) {
    const { seed: _, k2sig: R } = C(h, v, m), G = t;
    return mp(G.hash.outputLen, G.nByteLength, G.hmac)(_, R);
  }
  d.BASE._setWindowSize(8);
  function f(h, v, m, _ = W) {
    var $;
    const R = h;
    if (v = Ur("msgHash", v), m = Ur("publicKey", m), "strict" in _)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: G, prehash: P } = _;
    let p, H;
    try {
      if (typeof R == "string" || R instanceof Uint8Array)
        try {
          p = T.fromDER(R);
        } catch (ee) {
          if (!(ee instanceof di.Err))
            throw ee;
          p = T.fromCompact(R);
        }
      else if (typeof R == "object" && typeof R.r == "bigint" && typeof R.s == "bigint") {
        const { r: ee, s: re } = R;
        p = new T(ee, re);
      } else
        throw new Error("PARSE");
      H = d.fromHex(m);
    } catch (ee) {
      if (ee.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (G && p.hasHighS())
      return !1;
    P && (v = t.hash(v));
    const { r: oe, s: ne } = p, V = te(v), Y = c(ne), Q = a(V * Y), ie = a(oe * Y), de = ($ = d.BASE.multiplyAndAddUnsafe(H, Q, ie)) == null ? void 0 : $.toAffine();
    return de ? a(de.x) === oe : !1;
  }
  return {
    CURVE: t,
    getPublicKey: F,
    getSharedSecret: Z,
    sign: E,
    verify: f,
    ProjectivePoint: d,
    Signature: T,
    utils: k
  };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function Cb(e) {
  return {
    hash: e,
    hmac: (t, ...r) => va(e, t, Wo(...r)),
    randomBytes: Sv
  };
}
function Hb(e, t) {
  const r = (n) => Ub({ ...e, ...Cb(n) });
  return Object.freeze({ ...r(t), create: r });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Ip = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), d0 = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), Lb = BigInt(1), du = BigInt(2), p0 = (e, t) => (e + t / du) / t;
function Db(e) {
  const t = Ip, r = BigInt(3), n = BigInt(6), i = BigInt(11), o = BigInt(22), s = BigInt(23), a = BigInt(44), c = BigInt(88), d = e * e * e % t, w = d * d * e % t, g = gr(w, r, t) * w % t, O = gr(g, r, t) * w % t, N = gr(O, du, t) * d % t, B = gr(N, i, t) * N % t, I = gr(B, o, t) * B % t, M = gr(I, a, t) * I % t, T = gr(M, c, t) * M % t, k = gr(T, a, t) * I % t, F = gr(k, r, t) * w % t, X = gr(F, s, t) * B % t, Z = gr(X, n, t) * d % t, z = gr(Z, du, t);
  if (!pu.eql(pu.sqr(z), e))
    throw new Error("Cannot find square root");
  return z;
}
const pu = Tb(Ip, void 0, void 0, { sqrt: Db }), zr = Hb({
  a: BigInt(0),
  b: BigInt(7),
  Fp: pu,
  n: d0,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (e) => {
      const t = d0, r = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), n = -Lb * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), i = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), o = r, s = BigInt("0x100000000000000000000000000000000"), a = p0(o * e, t), c = p0(-n * e, t);
      let d = Jt(e - a * r - c * i, t), w = Jt(-a * n - c * o, t);
      const g = d > s, O = w > s;
      if (g && (d = t - d), O && (w = t - w), d > s || w > s)
        throw new Error("splitScalar: Endomorphism failed, k=" + e);
      return { k1neg: g, k1: d, k2neg: O, k2: w };
    }
  }
}, fh);
BigInt(0);
zr.ProjectivePoint;
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// @__NO_SIDE_EFFECTS__
function dh(...e) {
  const t = (i, o) => (s) => i(o(s)), r = Array.from(e).reverse().reduce((i, o) => i ? t(i, o.encode) : o.encode, void 0), n = e.reduce((i, o) => i ? t(i, o.decode) : o.decode, void 0);
  return { encode: r, decode: n };
}
// @__NO_SIDE_EFFECTS__
function Tp(e) {
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return t.map((r) => {
        if (r < 0 || r >= e.length)
          throw new Error(`Digit index outside alphabet: ${r} (alphabet: ${e.length})`);
        return e[r];
      });
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("alphabet.decode input should be array of strings");
      return t.map((r) => {
        if (typeof r != "string")
          throw new Error(`alphabet.decode: not string element=${r}`);
        const n = e.indexOf(r);
        if (n === -1)
          throw new Error(`Unknown letter: "${r}". Allowed: ${e}`);
        return n;
      });
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Ap(e = "") {
  if (typeof e != "string")
    throw new Error("join separator should be string");
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("join.encode input should be array of strings");
      for (let r of t)
        if (typeof r != "string")
          throw new Error(`join.encode: non-string input=${r}`);
      return t.join(e);
    },
    decode: (t) => {
      if (typeof t != "string")
        throw new Error("join.decode input should be string");
      return t.split(e);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function $b(e, t = "=") {
  if (typeof t != "string")
    throw new Error("padding chr should be string");
  return {
    encode(r) {
      if (!Array.isArray(r) || r.length && typeof r[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let n of r)
        if (typeof n != "string")
          throw new Error(`padding.encode: non-string input=${n}`);
      for (; r.length * e % 8; )
        r.push(t);
      return r;
    },
    decode(r) {
      if (!Array.isArray(r) || r.length && typeof r[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of r)
        if (typeof i != "string")
          throw new Error(`padding.decode: non-string input=${i}`);
      let n = r.length;
      if (n * e % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; n > 0 && r[n - 1] === t; n--)
        if (!((n - 1) * e % 8))
          throw new Error("Invalid padding: string has too much padding");
      return r.slice(0, n);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function g0(e, t, r) {
  if (t < 2)
    throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);
  if (r < 2)
    throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);
  if (!Array.isArray(e))
    throw new Error("convertRadix: data should be array");
  if (!e.length)
    return [];
  let n = 0;
  const i = [], o = Array.from(e);
  for (o.forEach((s) => {
    if (s < 0 || s >= t)
      throw new Error(`Wrong integer: ${s}`);
  }); ; ) {
    let s = 0, a = !0;
    for (let c = n; c < o.length; c++) {
      const d = o[c], w = t * s + d;
      if (!Number.isSafeInteger(w) || t * s / t !== s || w - d !== t * s)
        throw new Error("convertRadix: carry overflow");
      s = w % r;
      const g = Math.floor(w / r);
      if (o[c] = g, !Number.isSafeInteger(g) || g * r + s !== w)
        throw new Error("convertRadix: carry overflow");
      if (a)
        g ? a = !1 : n = c;
      else
        continue;
    }
    if (i.push(s), a)
      break;
  }
  for (let s = 0; s < e.length - 1 && e[s] === 0; s++)
    i.push(0);
  return i.reverse();
}
const Op = /* @__NO_SIDE_EFFECTS__ */ (e, t) => t ? /* @__PURE__ */ Op(t, e % t) : e, ba = /* @__NO_SIDE_EFFECTS__ */ (e, t) => e + (t - /* @__PURE__ */ Op(e, t));
// @__NO_SIDE_EFFECTS__
function y0(e, t, r, n) {
  if (!Array.isArray(e))
    throw new Error("convertRadix2: data should be array");
  if (t <= 0 || t > 32)
    throw new Error(`convertRadix2: wrong from=${t}`);
  if (r <= 0 || r > 32)
    throw new Error(`convertRadix2: wrong to=${r}`);
  if (/* @__PURE__ */ ba(t, r) > 32)
    throw new Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${/* @__PURE__ */ ba(t, r)}`);
  let i = 0, o = 0;
  const s = 2 ** r - 1, a = [];
  for (const c of e) {
    if (c >= 2 ** t)
      throw new Error(`convertRadix2: invalid data word=${c} from=${t}`);
    if (i = i << t | c, o + t > 32)
      throw new Error(`convertRadix2: carry overflow pos=${o} from=${t}`);
    for (o += t; o >= r; o -= r)
      a.push((i >> o - r & s) >>> 0);
    i &= 2 ** o - 1;
  }
  if (i = i << r - o & s, !n && o >= t)
    throw new Error("Excess padding");
  if (!n && i)
    throw new Error(`Non-zero padding: ${i}`);
  return n && o > 0 && a.push(i >>> 0), a;
}
// @__NO_SIDE_EFFECTS__
function Bp(e) {
  return {
    encode: (t) => {
      if (!(t instanceof Uint8Array))
        throw new Error("radix.encode input should be Uint8Array");
      return /* @__PURE__ */ g0(Array.from(t), 2 ** 8, e);
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("radix.decode input should be array of strings");
      return Uint8Array.from(/* @__PURE__ */ g0(t, e, 2 ** 8));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Fb(e, t = !1) {
  if (e <= 0 || e > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (/* @__PURE__ */ ba(8, e) > 32 || /* @__PURE__ */ ba(e, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (r) => {
      if (!(r instanceof Uint8Array))
        throw new Error("radix2.encode input should be Uint8Array");
      return /* @__PURE__ */ y0(Array.from(r), 8, e, !t);
    },
    decode: (r) => {
      if (!Array.isArray(r) || r.length && typeof r[0] != "number")
        throw new Error("radix2.decode input should be array of strings");
      return Uint8Array.from(/* @__PURE__ */ y0(r, e, 8, t));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Pp(e, t) {
  if (typeof t != "function")
    throw new Error("checksum fn should be function");
  return {
    encode(r) {
      if (!(r instanceof Uint8Array))
        throw new Error("checksum.encode: input should be Uint8Array");
      const n = t(r).slice(0, e), i = new Uint8Array(r.length + e);
      return i.set(r), i.set(n, r.length), i;
    },
    decode(r) {
      if (!(r instanceof Uint8Array))
        throw new Error("checksum.decode: input should be Uint8Array");
      const n = r.slice(0, -e), i = t(n).slice(0, e), o = r.slice(-e);
      for (let s = 0; s < e; s++)
        if (i[s] !== o[s])
          throw new Error("Invalid checksum");
      return n;
    }
  };
}
const Hs = { alphabet: Tp, chain: dh, checksum: Pp, radix: Bp, radix2: Fb, join: Ap, padding: $b }, Kb = (e) => /* @__PURE__ */ dh(/* @__PURE__ */ Bp(58), /* @__PURE__ */ Tp(e), /* @__PURE__ */ Ap("")), Gb = /* @__PURE__ */ Kb("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"), Vb = (e) => /* @__PURE__ */ dh(/* @__PURE__ */ Pp(4, (t) => e(e(t))), Gb);
/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */
const Ls = zr.ProjectivePoint, wc = Vb(fh);
function w0(e) {
  return BigInt(`0x${Ev(e)}`);
}
function qb(e) {
  return _v(e.toString(16).padStart(64, "0"));
}
const Wb = lp("Bitcoin seed"), vc = { private: 76066276, public: 76067358 }, bc = 2147483648, jb = (e) => Rv(fh(e)), zb = (e) => co(e).getUint32(0, !1), Ds = (e) => {
  if (!Number.isSafeInteger(e) || e < 0 || e > 2 ** 32 - 1)
    throw new Error(`Invalid number=${e}. Should be from 0 to 2 ** 32 - 1`);
  const t = new Uint8Array(4);
  return co(t).setUint32(0, e, !1), t;
};
class ci {
  get fingerprint() {
    if (!this.pubHash)
      throw new Error("No publicKey set!");
    return zb(this.pubHash);
  }
  get identifier() {
    return this.pubHash;
  }
  get pubKeyHash() {
    return this.pubHash;
  }
  get privateKey() {
    return this.privKeyBytes || null;
  }
  get publicKey() {
    return this.pubKey || null;
  }
  get privateExtendedKey() {
    const t = this.privateKey;
    if (!t)
      throw new Error("No private key");
    return wc.encode(this.serialize(this.versions.private, Wo(new Uint8Array([0]), t)));
  }
  get publicExtendedKey() {
    if (!this.pubKey)
      throw new Error("No public key");
    return wc.encode(this.serialize(this.versions.public, this.pubKey));
  }
  static fromMasterSeed(t, r = vc) {
    if (ai(t), 8 * t.length < 128 || 8 * t.length > 512)
      throw new Error(`HDKey: wrong seed length=${t.length}. Should be between 128 and 512 bits; 256 bits is advised)`);
    const n = va(f0, Wb, t);
    return new ci({
      versions: r,
      chainCode: n.slice(32),
      privateKey: n.slice(0, 32)
    });
  }
  static fromExtendedKey(t, r = vc) {
    const n = wc.decode(t), i = co(n), o = i.getUint32(0, !1), s = {
      versions: r,
      depth: n[4],
      parentFingerprint: i.getUint32(5, !1),
      index: i.getUint32(9, !1),
      chainCode: n.slice(13, 45)
    }, a = n.slice(45), c = a[0] === 0;
    if (o !== r[c ? "private" : "public"])
      throw new Error("Version mismatch");
    return c ? new ci({ ...s, privateKey: a.slice(1) }) : new ci({ ...s, publicKey: a });
  }
  static fromJSON(t) {
    return ci.fromExtendedKey(t.xpriv);
  }
  constructor(t) {
    if (this.depth = 0, this.index = 0, this.chainCode = null, this.parentFingerprint = 0, !t || typeof t != "object")
      throw new Error("HDKey.constructor must not be called directly");
    if (this.versions = t.versions || vc, this.depth = t.depth || 0, this.chainCode = t.chainCode, this.index = t.index || 0, this.parentFingerprint = t.parentFingerprint || 0, !this.depth && (this.parentFingerprint || this.index))
      throw new Error("HDKey: zero depth with non-zero index/parent fingerprint");
    if (t.publicKey && t.privateKey)
      throw new Error("HDKey: publicKey and privateKey at same time.");
    if (t.privateKey) {
      if (!zr.utils.isValidPrivateKey(t.privateKey))
        throw new Error("Invalid private key");
      this.privKey = typeof t.privateKey == "bigint" ? t.privateKey : w0(t.privateKey), this.privKeyBytes = qb(this.privKey), this.pubKey = zr.getPublicKey(t.privateKey, !0);
    } else if (t.publicKey)
      this.pubKey = Ls.fromHex(t.publicKey).toRawBytes(!0);
    else
      throw new Error("HDKey: no public or private key provided");
    this.pubHash = jb(this.pubKey);
  }
  derive(t) {
    if (!/^[mM]'?/.test(t))
      throw new Error('Path must start with "m" or "M"');
    if (/^[mM]'?$/.test(t))
      return this;
    const r = t.replace(/^[mM]'?\//, "").split("/");
    let n = this;
    for (const i of r) {
      const o = /^(\d+)('?)$/.exec(i), s = o && o[1];
      if (!o || o.length !== 3 || typeof s != "string")
        throw new Error(`Invalid child index: ${i}`);
      let a = +s;
      if (!Number.isSafeInteger(a) || a >= bc)
        throw new Error("Invalid index");
      o[2] === "'" && (a += bc), n = n.deriveChild(a);
    }
    return n;
  }
  deriveChild(t) {
    if (!this.pubKey || !this.chainCode)
      throw new Error("No publicKey or chainCode set");
    let r = Ds(t);
    if (t >= bc) {
      const a = this.privateKey;
      if (!a)
        throw new Error("Could not derive hardened child key");
      r = Wo(new Uint8Array([0]), a, r);
    } else
      r = Wo(this.pubKey, r);
    const n = va(f0, this.chainCode, r), i = w0(n.slice(0, 32)), o = n.slice(32);
    if (!zr.utils.isValidPrivateKey(i))
      throw new Error("Tweak bigger than curve order");
    const s = {
      versions: this.versions,
      chainCode: o,
      depth: this.depth + 1,
      parentFingerprint: this.fingerprint,
      index: t
    };
    try {
      if (this.privateKey) {
        const a = Jt(this.privKey + i, zr.CURVE.n);
        if (!zr.utils.isValidPrivateKey(a))
          throw new Error("The tweak was out of range or the resulted private key is invalid");
        s.privateKey = a;
      } else {
        const a = Ls.fromHex(this.pubKey).add(Ls.fromPrivateKey(i));
        if (a.equals(Ls.ZERO))
          throw new Error("The tweak was equal to negative P, which made the result key invalid");
        s.publicKey = a.toRawBytes(!0);
      }
      return new ci(s);
    } catch {
      return this.deriveChild(t + 1);
    }
  }
  sign(t) {
    if (!this.privateKey)
      throw new Error("No privateKey set!");
    return ai(t, 32), zr.sign(t, this.privKey).toCompactRawBytes();
  }
  verify(t, r) {
    if (ai(t, 32), ai(r, 64), !this.publicKey)
      throw new Error("No publicKey set!");
    let n;
    try {
      n = zr.Signature.fromCompact(r);
    } catch {
      return !1;
    }
    return zr.verify(n, t, this.publicKey);
  }
  wipePrivateData() {
    return this.privKey = void 0, this.privKeyBytes && (this.privKeyBytes.fill(0), this.privKeyBytes = void 0), this;
  }
  toJSON() {
    return {
      xpriv: this.privateExtendedKey,
      xpub: this.publicExtendedKey
    };
  }
  serialize(t, r) {
    if (!this.chainCode)
      throw new Error("No chainCode set");
    return ai(r, 33), Wo(Ds(t), new Uint8Array([this.depth]), Ds(this.parentFingerprint), Ds(this.index), this.chainCode, r);
  }
}
var _n = {}, er = {}, kt = {};
Object.defineProperty(kt, "__esModule", { value: !0 });
kt.testnet = kt.regtest = kt.bitcoin = void 0;
kt.bitcoin = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "bc",
  bip32: {
    public: 76067358,
    private: 76066276
  },
  pubKeyHash: 0,
  scriptHash: 5,
  wif: 128
};
kt.regtest = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "bcrt",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
kt.testnet = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "tb",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
var Bo = {}, Wa = {}, rr = {}, vn = {};
Object.defineProperty(vn, "__esModule", { value: !0 });
vn.encode = vn.decode = vn.check = void 0;
function Xb(e) {
  if (e.length < 8 || e.length > 72 || e[0] !== 48 || e[1] !== e.length - 2 || e[2] !== 2)
    return !1;
  const t = e[3];
  if (t === 0 || 5 + t >= e.length || e[4 + t] !== 2)
    return !1;
  const r = e[5 + t];
  return !(r === 0 || 6 + t + r !== e.length || e[4] & 128 || t > 1 && e[4] === 0 && !(e[5] & 128) || e[t + 6] & 128 || r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128));
}
vn.check = Xb;
function Yb(e) {
  if (e.length < 8)
    throw new Error("DER sequence length is too short");
  if (e.length > 72)
    throw new Error("DER sequence length is too long");
  if (e[0] !== 48)
    throw new Error("Expected DER sequence");
  if (e[1] !== e.length - 2)
    throw new Error("DER sequence length is invalid");
  if (e[2] !== 2)
    throw new Error("Expected DER integer");
  const t = e[3];
  if (t === 0)
    throw new Error("R length is zero");
  if (5 + t >= e.length)
    throw new Error("R length is too long");
  if (e[4 + t] !== 2)
    throw new Error("Expected DER integer (2)");
  const r = e[5 + t];
  if (r === 0)
    throw new Error("S length is zero");
  if (6 + t + r !== e.length)
    throw new Error("S length is invalid");
  if (e[4] & 128)
    throw new Error("R value is negative");
  if (t > 1 && e[4] === 0 && !(e[5] & 128))
    throw new Error("R value excessively padded");
  if (e[t + 6] & 128)
    throw new Error("S value is negative");
  if (r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128))
    throw new Error("S value excessively padded");
  return {
    r: e.slice(4, 4 + t),
    s: e.slice(6 + t)
  };
}
vn.decode = Yb;
function Zb(e, t) {
  const r = e.length, n = t.length;
  if (r === 0)
    throw new Error("R length is zero");
  if (n === 0)
    throw new Error("S length is zero");
  if (r > 33)
    throw new Error("R length is too long");
  if (n > 33)
    throw new Error("S length is too long");
  if (e[0] & 128)
    throw new Error("R value is negative");
  if (t[0] & 128)
    throw new Error("S value is negative");
  if (r > 1 && e[0] === 0 && !(e[1] & 128))
    throw new Error("R value excessively padded");
  if (n > 1 && t[0] === 0 && !(t[1] & 128))
    throw new Error("S value excessively padded");
  const i = Buffer.allocUnsafe(6 + r + n);
  return i[0] = 48, i[1] = i.length - 2, i[2] = 2, i[3] = e.length, e.copy(i, 4), i[4 + r] = 2, i[5 + r] = t.length, t.copy(i, 6 + r), i;
}
vn.encode = Zb;
var Xn = {};
Object.defineProperty(Xn, "__esModule", { value: !0 });
Xn.REVERSE_OPS = Xn.OPS = void 0;
const gu = {
  OP_FALSE: 0,
  OP_0: 0,
  OP_PUSHDATA1: 76,
  OP_PUSHDATA2: 77,
  OP_PUSHDATA4: 78,
  OP_1NEGATE: 79,
  OP_RESERVED: 80,
  OP_TRUE: 81,
  OP_1: 81,
  OP_2: 82,
  OP_3: 83,
  OP_4: 84,
  OP_5: 85,
  OP_6: 86,
  OP_7: 87,
  OP_8: 88,
  OP_9: 89,
  OP_10: 90,
  OP_11: 91,
  OP_12: 92,
  OP_13: 93,
  OP_14: 94,
  OP_15: 95,
  OP_16: 96,
  OP_NOP: 97,
  OP_VER: 98,
  OP_IF: 99,
  OP_NOTIF: 100,
  OP_VERIF: 101,
  OP_VERNOTIF: 102,
  OP_ELSE: 103,
  OP_ENDIF: 104,
  OP_VERIFY: 105,
  OP_RETURN: 106,
  OP_TOALTSTACK: 107,
  OP_FROMALTSTACK: 108,
  OP_2DROP: 109,
  OP_2DUP: 110,
  OP_3DUP: 111,
  OP_2OVER: 112,
  OP_2ROT: 113,
  OP_2SWAP: 114,
  OP_IFDUP: 115,
  OP_DEPTH: 116,
  OP_DROP: 117,
  OP_DUP: 118,
  OP_NIP: 119,
  OP_OVER: 120,
  OP_PICK: 121,
  OP_ROLL: 122,
  OP_ROT: 123,
  OP_SWAP: 124,
  OP_TUCK: 125,
  OP_CAT: 126,
  OP_SUBSTR: 127,
  OP_LEFT: 128,
  OP_RIGHT: 129,
  OP_SIZE: 130,
  OP_INVERT: 131,
  OP_AND: 132,
  OP_OR: 133,
  OP_XOR: 134,
  OP_EQUAL: 135,
  OP_EQUALVERIFY: 136,
  OP_RESERVED1: 137,
  OP_RESERVED2: 138,
  OP_1ADD: 139,
  OP_1SUB: 140,
  OP_2MUL: 141,
  OP_2DIV: 142,
  OP_NEGATE: 143,
  OP_ABS: 144,
  OP_NOT: 145,
  OP_0NOTEQUAL: 146,
  OP_ADD: 147,
  OP_SUB: 148,
  OP_MUL: 149,
  OP_DIV: 150,
  OP_MOD: 151,
  OP_LSHIFT: 152,
  OP_RSHIFT: 153,
  OP_BOOLAND: 154,
  OP_BOOLOR: 155,
  OP_NUMEQUAL: 156,
  OP_NUMEQUALVERIFY: 157,
  OP_NUMNOTEQUAL: 158,
  OP_LESSTHAN: 159,
  OP_GREATERTHAN: 160,
  OP_LESSTHANOREQUAL: 161,
  OP_GREATERTHANOREQUAL: 162,
  OP_MIN: 163,
  OP_MAX: 164,
  OP_WITHIN: 165,
  OP_RIPEMD160: 166,
  OP_SHA1: 167,
  OP_SHA256: 168,
  OP_HASH160: 169,
  OP_HASH256: 170,
  OP_CODESEPARATOR: 171,
  OP_CHECKSIG: 172,
  OP_CHECKSIGVERIFY: 173,
  OP_CHECKMULTISIG: 174,
  OP_CHECKMULTISIGVERIFY: 175,
  OP_NOP1: 176,
  OP_NOP2: 177,
  OP_CHECKLOCKTIMEVERIFY: 177,
  OP_NOP3: 178,
  OP_CHECKSEQUENCEVERIFY: 178,
  OP_NOP4: 179,
  OP_NOP5: 180,
  OP_NOP6: 181,
  OP_NOP7: 182,
  OP_NOP8: 183,
  OP_NOP9: 184,
  OP_NOP10: 185,
  OP_CHECKSIGADD: 186,
  OP_PUBKEYHASH: 253,
  OP_PUBKEY: 254,
  OP_INVALIDOPCODE: 255
};
Xn.OPS = gu;
const Np = {};
Xn.REVERSE_OPS = Np;
for (const e of Object.keys(gu)) {
  const t = gu[e];
  Np[t] = e;
}
var qn = {};
Object.defineProperty(qn, "__esModule", { value: !0 });
qn.decode = qn.encode = qn.encodingLength = void 0;
const Fn = Xn;
function Rp(e) {
  return e < Fn.OPS.OP_PUSHDATA1 ? 1 : e <= 255 ? 2 : e <= 65535 ? 3 : 5;
}
qn.encodingLength = Rp;
function Jb(e, t, r) {
  const n = Rp(t);
  return n === 1 ? e.writeUInt8(t, r) : n === 2 ? (e.writeUInt8(Fn.OPS.OP_PUSHDATA1, r), e.writeUInt8(t, r + 1)) : n === 3 ? (e.writeUInt8(Fn.OPS.OP_PUSHDATA2, r), e.writeUInt16LE(t, r + 1)) : (e.writeUInt8(Fn.OPS.OP_PUSHDATA4, r), e.writeUInt32LE(t, r + 1)), n;
}
qn.encode = Jb;
function Qb(e, t) {
  const r = e.readUInt8(t);
  let n, i;
  if (r < Fn.OPS.OP_PUSHDATA1)
    n = r, i = 1;
  else if (r === Fn.OPS.OP_PUSHDATA1) {
    if (t + 2 > e.length)
      return null;
    n = e.readUInt8(t + 1), i = 2;
  } else if (r === Fn.OPS.OP_PUSHDATA2) {
    if (t + 3 > e.length)
      return null;
    n = e.readUInt16LE(t + 1), i = 3;
  } else {
    if (t + 5 > e.length)
      return null;
    if (r !== Fn.OPS.OP_PUSHDATA4)
      throw new Error("Unexpected opcode");
    n = e.readUInt32LE(t + 1), i = 5;
  }
  return {
    opcode: r,
    number: n,
    size: i
  };
}
qn.decode = Qb;
var mo = {};
Object.defineProperty(mo, "__esModule", { value: !0 });
mo.encode = mo.decode = void 0;
function em(e, t, r) {
  t = t || 4, r = r === void 0 ? !0 : r;
  const n = e.length;
  if (n === 0)
    return 0;
  if (n > t)
    throw new TypeError("Script number overflow");
  if (r && !(e[n - 1] & 127) && (n <= 1 || !(e[n - 2] & 128)))
    throw new Error("Non-minimally encoded script number");
  if (n === 5) {
    const o = e.readUInt32LE(0), s = e.readUInt8(4);
    return s & 128 ? -((s & -129) * 4294967296 + o) : s * 4294967296 + o;
  }
  let i = 0;
  for (let o = 0; o < n; ++o)
    i |= e[o] << 8 * o;
  return e[n - 1] & 128 ? -(i & ~(128 << 8 * (n - 1))) : i;
}
mo.decode = em;
function tm(e) {
  return e > 2147483647 ? 5 : e > 8388607 ? 4 : e > 32767 ? 3 : e > 127 ? 2 : e > 0 ? 1 : 0;
}
function rm(e) {
  let t = Math.abs(e);
  const r = tm(t), n = Buffer.allocUnsafe(r), i = e < 0;
  for (let o = 0; o < r; ++o)
    n.writeUInt8(t & 255, o), t >>= 8;
  return n[r - 1] & 128 ? n.writeUInt8(i ? 128 : 0, r - 1) : i && (n[r - 1] |= 128), n;
}
mo.encode = rm;
var Eo = {}, $t = {}, ss = {
  Array: function(e) {
    return e != null && e.constructor === Array;
  },
  Boolean: function(e) {
    return typeof e == "boolean";
  },
  Function: function(e) {
    return typeof e == "function";
  },
  Nil: function(e) {
    return e == null;
  },
  Number: function(e) {
    return typeof e == "number";
  },
  Object: function(e) {
    return typeof e == "object";
  },
  String: function(e) {
    return typeof e == "string";
  },
  "": function() {
    return !0;
  }
};
ss.Null = ss.Nil;
for (var v0 in ss)
  ss[v0].toJSON = (function(e) {
    return e;
  }).bind(null, v0);
var ph = ss, bi = ph;
function kp(e) {
  return e.name || e.toString().match(/function (.*?)\s*\(/)[1];
}
function gh(e) {
  return bi.Nil(e) ? "" : kp(e.constructor);
}
function nm(e) {
  return bi.Function(e) ? "" : bi.String(e) ? JSON.stringify(e) : e && bi.Object(e) ? "" : e;
}
function yh(e, t) {
  Error.captureStackTrace && Error.captureStackTrace(e, t);
}
function ma(e) {
  return bi.Function(e) ? e.toJSON ? e.toJSON() : kp(e) : bi.Array(e) ? "Array" : e && bi.Object(e) ? "Object" : e !== void 0 ? e : "";
}
function Mp(e, t, r) {
  var n = nm(t);
  return "Expected " + ma(e) + ", got" + (r !== "" ? " " + r : "") + (n !== "" ? " " + n : "");
}
function Sn(e, t, r) {
  r = r || gh(t), this.message = Mp(e, t, r), yh(this, Sn), this.__type = e, this.__value = t, this.__valueTypeName = r;
}
Sn.prototype = Object.create(Error.prototype);
Sn.prototype.constructor = Sn;
function im(e, t, r, n, i) {
  var o = '" of type ';
  return t === "key" && (o = '" with key type '), Mp('property "' + ma(r) + o + ma(e), n, i);
}
function uo(e, t, r, n, i) {
  e ? (i = i || gh(n), this.message = im(e, r, t, n, i)) : this.message = 'Unexpected property "' + t + '"', yh(this, Sn), this.__label = r, this.__property = t, this.__type = e, this.__value = n, this.__valueTypeName = i;
}
uo.prototype = Object.create(Error.prototype);
uo.prototype.constructor = Sn;
function om(e, t) {
  return new Sn(e, {}, t);
}
function sm(e, t, r) {
  return e instanceof uo ? (t = t + "." + e.__property, e = new uo(
    e.__type,
    t,
    e.__label,
    e.__value,
    e.__valueTypeName
  )) : e instanceof Sn && (e = new uo(
    e.__type,
    t,
    r,
    e.__value,
    e.__valueTypeName
  )), yh(e), e;
}
var Up = {
  TfTypeError: Sn,
  TfPropertyTypeError: uo,
  tfCustomError: om,
  tfSubError: sm,
  tfJSON: ma,
  getValueTypeName: gh
}, mc, b0;
function am() {
  if (b0)
    return mc;
  b0 = 1;
  var e = ph, t = Up;
  function r(z) {
    return Buffer.isBuffer(z);
  }
  function n(z) {
    return typeof z == "string" && /^([0-9a-f]{2})+$/i.test(z);
  }
  function i(z, te) {
    var b = z.toJSON();
    function A(C) {
      if (!z(C))
        return !1;
      if (C.length === te)
        return !0;
      throw t.tfCustomError(b + "(Length: " + te + ")", b + "(Length: " + C.length + ")");
    }
    return A.toJSON = function() {
      return b;
    }, A;
  }
  var o = i.bind(null, e.Array), s = i.bind(null, r), a = i.bind(null, n), c = i.bind(null, e.String);
  function d(z, te, b) {
    b = b || e.Number;
    function A(C, q) {
      return b(C, q) && C > z && C < te;
    }
    return A.toJSON = function() {
      return `${b.toJSON()} between [${z}, ${te}]`;
    }, A;
  }
  var w = Math.pow(2, 53) - 1;
  function g(z) {
    return typeof z == "number" && isFinite(z);
  }
  function O(z) {
    return z << 24 >> 24 === z;
  }
  function N(z) {
    return z << 16 >> 16 === z;
  }
  function B(z) {
    return (z | 0) === z;
  }
  function I(z) {
    return typeof z == "number" && z >= -w && z <= w && Math.floor(z) === z;
  }
  function M(z) {
    return (z & 255) === z;
  }
  function T(z) {
    return (z & 65535) === z;
  }
  function k(z) {
    return z >>> 0 === z;
  }
  function F(z) {
    return typeof z == "number" && z >= 0 && z <= w && Math.floor(z) === z;
  }
  var X = {
    ArrayN: o,
    Buffer: r,
    BufferN: s,
    Finite: g,
    Hex: n,
    HexN: a,
    Int8: O,
    Int16: N,
    Int32: B,
    Int53: I,
    Range: d,
    StringN: c,
    UInt8: M,
    UInt16: T,
    UInt32: k,
    UInt53: F
  };
  for (var Z in X)
    X[Z].toJSON = (function(z) {
      return z;
    }).bind(null, Z);
  return mc = X, mc;
}
var bs = Up, Qt = ph, sn = bs.tfJSON, Cp = bs.TfTypeError, Hp = bs.TfPropertyTypeError, $s = bs.tfSubError;
bs.getValueTypeName;
var pn = {
  arrayOf: function(t, r) {
    t = Xr(t), r = r || {};
    function n(i, o) {
      return !Qt.Array(i) || Qt.Nil(i) || r.minLength !== void 0 && i.length < r.minLength || r.maxLength !== void 0 && i.length > r.maxLength || r.length !== void 0 && i.length !== r.length ? !1 : i.every(function(s, a) {
        try {
          return ar(t, s, o);
        } catch (c) {
          throw $s(c, a);
        }
      });
    }
    return n.toJSON = function() {
      var i = "[" + sn(t) + "]";
      return r.length !== void 0 ? i += "{" + r.length + "}" : (r.minLength !== void 0 || r.maxLength !== void 0) && (i += "{" + (r.minLength === void 0 ? 0 : r.minLength) + "," + (r.maxLength === void 0 ? 1 / 0 : r.maxLength) + "}"), i;
    }, n;
  },
  maybe: function e(t) {
    t = Xr(t);
    function r(n, i) {
      return Qt.Nil(n) || t(n, i, e);
    }
    return r.toJSON = function() {
      return "?" + sn(t);
    }, r;
  },
  map: function(t, r) {
    t = Xr(t), r && (r = Xr(r));
    function n(i, o) {
      if (!Qt.Object(i) || Qt.Nil(i))
        return !1;
      for (var s in i) {
        try {
          r && ar(r, s, o);
        } catch (c) {
          throw $s(c, s, "key");
        }
        try {
          var a = i[s];
          ar(t, a, o);
        } catch (c) {
          throw $s(c, s);
        }
      }
      return !0;
    }
    return r ? n.toJSON = function() {
      return "{" + sn(r) + ": " + sn(t) + "}";
    } : n.toJSON = function() {
      return "{" + sn(t) + "}";
    }, n;
  },
  object: function(t) {
    var r = {};
    for (var n in t)
      r[n] = Xr(t[n]);
    function i(o, s) {
      if (!Qt.Object(o) || Qt.Nil(o))
        return !1;
      var a;
      try {
        for (a in r) {
          var c = r[a], d = o[a];
          ar(c, d, s);
        }
      } catch (w) {
        throw $s(w, a);
      }
      if (s) {
        for (a in o)
          if (!r[a])
            throw new Hp(void 0, a);
      }
      return !0;
    }
    return i.toJSON = function() {
      return sn(r);
    }, i;
  },
  anyOf: function() {
    var t = [].slice.call(arguments).map(Xr);
    function r(n, i) {
      return t.some(function(o) {
        try {
          return ar(o, n, i);
        } catch {
          return !1;
        }
      });
    }
    return r.toJSON = function() {
      return t.map(sn).join("|");
    }, r;
  },
  allOf: function() {
    var t = [].slice.call(arguments).map(Xr);
    function r(n, i) {
      return t.every(function(o) {
        try {
          return ar(o, n, i);
        } catch {
          return !1;
        }
      });
    }
    return r.toJSON = function() {
      return t.map(sn).join(" & ");
    }, r;
  },
  quacksLike: function(t) {
    function r(n) {
      return !0;
    }
    return r.toJSON = function() {
      return t;
    }, r;
  },
  tuple: function() {
    var t = [].slice.call(arguments).map(Xr);
    function r(n, i) {
      return !0;
    }
    return r.toJSON = function() {
      return "(" + t.map(sn).join(", ") + ")";
    }, r;
  },
  value: function(t) {
    function r(n) {
      return !0;
    }
    return r.toJSON = function() {
      return t;
    }, r;
  }
};
pn.oneOf = pn.anyOf;
function Xr(e) {
  if (Qt.String(e))
    return e[0] === "?" ? pn.maybe(e.slice(1)) : Qt[e] || pn.quacksLike(e);
  if (e && Qt.Object(e)) {
    if (Qt.Array(e)) {
      if (e.length !== 1)
        throw new TypeError("Expected compile() parameter of type Array of length 1");
      return pn.arrayOf(e[0]);
    }
    return pn.object(e);
  } else if (Qt.Function(e))
    return e;
  return pn.value(e);
}
function ar(e, t, r, n) {
  if (Qt.Function(e)) {
    if (e(t, r))
      return !0;
    throw new Cp(n || e, t);
  }
  return ar(Xr(e), t, r);
}
for (var Wn in Qt)
  ar[Wn] = Qt[Wn];
for (Wn in pn)
  ar[Wn] = pn[Wn];
var m0 = am();
for (Wn in m0)
  ar[Wn] = m0[Wn];
ar.compile = Xr;
ar.TfTypeError = Cp;
ar.TfPropertyTypeError = Hp;
var Ve = ar;
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.oneOf = e.Null = e.BufferN = e.Function = e.UInt32 = e.UInt8 = e.tuple = e.maybe = e.Hex = e.Buffer = e.String = e.Boolean = e.Array = e.Number = e.Hash256bit = e.Hash160bit = e.Buffer256bit = e.isTaptree = e.isTapleaf = e.TAPLEAF_VERSION_MASK = e.Network = e.ECPoint = e.Satoshi = e.Signer = e.BIP32Path = e.UInt31 = e.isPoint = e.typeforce = void 0;
  const t = Qn;
  e.typeforce = Ve;
  const r = t.Buffer.alloc(32, 0), n = t.Buffer.from(
    "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
    "hex"
  );
  function i(N) {
    if (!t.Buffer.isBuffer(N) || N.length < 33)
      return !1;
    const B = N[0], I = N.slice(1, 33);
    if (I.compare(r) === 0 || I.compare(n) >= 0)
      return !1;
    if ((B === 2 || B === 3) && N.length === 33)
      return !0;
    const M = N.slice(33);
    return M.compare(r) === 0 || M.compare(n) >= 0 ? !1 : B === 4 && N.length === 65;
  }
  e.isPoint = i;
  const o = Math.pow(2, 31) - 1;
  function s(N) {
    return e.typeforce.UInt32(N) && N <= o;
  }
  e.UInt31 = s;
  function a(N) {
    return e.typeforce.String(N) && !!N.match(/^(m\/)?(\d+'?\/)*\d+'?$/);
  }
  e.BIP32Path = a, a.toJSON = () => "BIP32 derivation path";
  function c(N) {
    return (e.typeforce.Buffer(N.publicKey) || typeof N.getPublicKey == "function") && typeof N.sign == "function";
  }
  e.Signer = c;
  const d = 21 * 1e14;
  function w(N) {
    return e.typeforce.UInt53(N) && N <= d;
  }
  e.Satoshi = w, e.ECPoint = e.typeforce.quacksLike("Point"), e.Network = e.typeforce.compile({
    messagePrefix: e.typeforce.oneOf(
      e.typeforce.Buffer,
      e.typeforce.String
    ),
    bip32: {
      public: e.typeforce.UInt32,
      private: e.typeforce.UInt32
    },
    pubKeyHash: e.typeforce.UInt8,
    scriptHash: e.typeforce.UInt8,
    wif: e.typeforce.UInt8
  }), e.TAPLEAF_VERSION_MASK = 254;
  function g(N) {
    return !N || !("output" in N) || !t.Buffer.isBuffer(N.output) ? !1 : N.version !== void 0 ? (N.version & e.TAPLEAF_VERSION_MASK) === N.version : !0;
  }
  e.isTapleaf = g;
  function O(N) {
    return (0, e.Array)(N) ? N.length !== 2 ? !1 : N.every((B) => O(B)) : g(N);
  }
  e.isTaptree = O, e.Buffer256bit = e.typeforce.BufferN(32), e.Hash160bit = e.typeforce.BufferN(20), e.Hash256bit = e.typeforce.BufferN(32), e.Number = e.typeforce.Number, e.Array = e.typeforce.Array, e.Boolean = e.typeforce.Boolean, e.String = e.typeforce.String, e.Buffer = e.typeforce.Buffer, e.Hex = e.typeforce.Hex, e.maybe = e.typeforce.maybe, e.tuple = e.typeforce.tuple, e.UInt8 = e.typeforce.UInt8, e.UInt32 = e.typeforce.UInt32, e.Function = e.typeforce.Function, e.BufferN = e.typeforce.BufferN, e.Null = e.typeforce.Null, e.oneOf = e.typeforce.oneOf;
})($t);
Object.defineProperty(Eo, "__esModule", { value: !0 });
Eo.encode = Eo.decode = void 0;
const Lp = vn, yu = $t, { typeforce: fm } = yu, E0 = Buffer.alloc(1, 0);
function _0(e) {
  let t = 0;
  for (; e[t] === 0; )
    ++t;
  return t === e.length ? E0 : (e = e.slice(t), e[0] & 128 ? Buffer.concat([E0, e], 1 + e.length) : e);
}
function S0(e) {
  e[0] === 0 && (e = e.slice(1));
  const t = Buffer.alloc(32, 0), r = Math.max(0, 32 - e.length);
  return e.copy(t, r), t;
}
function cm(e) {
  const t = e.readUInt8(e.length - 1), r = t & -129;
  if (r <= 0 || r >= 4)
    throw new Error("Invalid hashType " + t);
  const n = Lp.decode(e.slice(0, -1)), i = S0(n.r), o = S0(n.s);
  return { signature: Buffer.concat([i, o], 64), hashType: t };
}
Eo.decode = cm;
function um(e, t) {
  fm(
    {
      signature: yu.BufferN(64),
      hashType: yu.UInt8
    },
    { signature: e, hashType: t }
  );
  const r = t & -129;
  if (r <= 0 || r >= 4)
    throw new Error("Invalid hashType " + t);
  const n = Buffer.allocUnsafe(1);
  n.writeUInt8(t, 0);
  const i = _0(e.slice(0, 32)), o = _0(e.slice(32, 64));
  return Buffer.concat([Lp.encode(i, o), n]);
}
Eo.encode = um;
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.signature = e.number = e.isCanonicalScriptSignature = e.isDefinedHashType = e.isCanonicalPubKey = e.toStack = e.fromASM = e.toASM = e.decompile = e.compile = e.isPushOnly = e.OPS = void 0;
  const t = vn, r = Xn;
  Object.defineProperty(e, "OPS", {
    enumerable: !0,
    get: function() {
      return r.OPS;
    }
  });
  const n = qn, i = mo, o = Eo, s = $t, { typeforce: a } = s, c = r.OPS.OP_RESERVED;
  function d(b) {
    return s.Number(b) && (b === r.OPS.OP_0 || b >= r.OPS.OP_1 && b <= r.OPS.OP_16 || b === r.OPS.OP_1NEGATE);
  }
  function w(b) {
    return s.Buffer(b) || d(b);
  }
  function g(b) {
    return s.Array(b) && b.every(w);
  }
  e.isPushOnly = g;
  function O(b) {
    if (b.length === 0)
      return r.OPS.OP_0;
    if (b.length === 1) {
      if (b[0] >= 1 && b[0] <= 16)
        return c + b[0];
      if (b[0] === 129)
        return r.OPS.OP_1NEGATE;
    }
  }
  function N(b) {
    return Buffer.isBuffer(b);
  }
  function B(b) {
    return s.Array(b);
  }
  function I(b) {
    return Buffer.isBuffer(b);
  }
  function M(b) {
    if (N(b))
      return b;
    a(s.Array, b);
    const A = b.reduce((W, E) => I(E) ? E.length === 1 && O(E) !== void 0 ? W + 1 : W + n.encodingLength(E.length) + E.length : W + 1, 0), C = Buffer.allocUnsafe(A);
    let q = 0;
    if (b.forEach((W) => {
      if (I(W)) {
        const E = O(W);
        if (E !== void 0) {
          C.writeUInt8(E, q), q += 1;
          return;
        }
        q += n.encode(C, W.length, q), W.copy(C, q), q += W.length;
      } else
        C.writeUInt8(W, q), q += 1;
    }), q !== C.length)
      throw new Error("Could not decode chunks");
    return C;
  }
  e.compile = M;
  function T(b) {
    if (B(b))
      return b;
    a(s.Buffer, b);
    const A = [];
    let C = 0;
    for (; C < b.length; ) {
      const q = b[C];
      if (q > r.OPS.OP_0 && q <= r.OPS.OP_PUSHDATA4) {
        const W = n.decode(b, C);
        if (W === null || (C += W.size, C + W.number > b.length))
          return null;
        const E = b.slice(C, C + W.number);
        C += W.number;
        const f = O(E);
        f !== void 0 ? A.push(f) : A.push(E);
      } else
        A.push(q), C += 1;
    }
    return A;
  }
  e.decompile = T;
  function k(b) {
    return N(b) && (b = T(b)), b.map((A) => {
      if (I(A)) {
        const C = O(A);
        if (C === void 0)
          return A.toString("hex");
        A = C;
      }
      return r.REVERSE_OPS[A];
    }).join(" ");
  }
  e.toASM = k;
  function F(b) {
    return a(s.String, b), M(
      b.split(" ").map((A) => r.OPS[A] !== void 0 ? r.OPS[A] : (a(s.Hex, A), Buffer.from(A, "hex")))
    );
  }
  e.fromASM = F;
  function X(b) {
    return b = T(b), a(g, b), b.map((A) => I(A) ? A : A === r.OPS.OP_0 ? Buffer.allocUnsafe(0) : i.encode(A - c));
  }
  e.toStack = X;
  function Z(b) {
    return s.isPoint(b);
  }
  e.isCanonicalPubKey = Z;
  function z(b) {
    const A = b & -129;
    return A > 0 && A < 4;
  }
  e.isDefinedHashType = z;
  function te(b) {
    return !Buffer.isBuffer(b) || !z(b[b.length - 1]) ? !1 : t.check(b.slice(0, -1));
  }
  e.isCanonicalScriptSignature = te, e.number = i, e.signature = o;
})(rr);
var hr = {};
Object.defineProperty(hr, "__esModule", { value: !0 });
hr.value = hr.prop = void 0;
function hm(e, t, r) {
  Object.defineProperty(e, t, {
    configurable: !0,
    enumerable: !0,
    get() {
      const n = r.call(this);
      return this[t] = n, n;
    },
    set(n) {
      Object.defineProperty(this, t, {
        configurable: !0,
        enumerable: !0,
        value: n,
        writable: !0
      });
    }
  });
}
hr.prop = hm;
function lm(e) {
  let t;
  return () => (t !== void 0 || (t = e()), t);
}
hr.value = lm;
Object.defineProperty(Wa, "__esModule", { value: !0 });
Wa.p2data = void 0;
const dm = kt, sa = rr, an = $t, x0 = hr, I0 = sa.OPS;
function pm(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => r.equals(t[n]));
}
function gm(e, t) {
  if (!e.data && !e.output)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, an.typeforce)(
    {
      network: an.typeforce.maybe(an.typeforce.Object),
      output: an.typeforce.maybe(an.typeforce.Buffer),
      data: an.typeforce.maybe(
        an.typeforce.arrayOf(an.typeforce.Buffer)
      )
    },
    e
  );
  const n = { name: "embed", network: e.network || dm.bitcoin };
  if (x0.prop(n, "output", () => {
    if (e.data)
      return sa.compile([I0.OP_RETURN].concat(e.data));
  }), x0.prop(n, "data", () => {
    if (e.output)
      return sa.decompile(e.output).slice(1);
  }), t.validate && e.output) {
    const i = sa.decompile(e.output);
    if (i[0] !== I0.OP_RETURN)
      throw new TypeError("Output is invalid");
    if (!i.slice(1).every(an.typeforce.Buffer))
      throw new TypeError("Output is invalid");
    if (e.data && !pm(e.data, n.data))
      throw new TypeError("Data mismatch");
  }
  return Object.assign(n, e);
}
Wa.p2data = gm;
var ja = {};
Object.defineProperty(ja, "__esModule", { value: !0 });
ja.p2ms = void 0;
const ym = kt, to = rr, Et = $t, Rn = hr, ro = to.OPS, Fs = ro.OP_RESERVED;
function T0(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => r.equals(t[n]));
}
function wm(e, t) {
  if (!e.input && !e.output && !(e.pubkeys && e.m !== void 0) && !e.signatures)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {});
  function r(c) {
    return to.isCanonicalScriptSignature(c) || (t.allowIncomplete && c === ro.OP_0) !== void 0;
  }
  (0, Et.typeforce)(
    {
      network: Et.typeforce.maybe(Et.typeforce.Object),
      m: Et.typeforce.maybe(Et.typeforce.Number),
      n: Et.typeforce.maybe(Et.typeforce.Number),
      output: Et.typeforce.maybe(Et.typeforce.Buffer),
      pubkeys: Et.typeforce.maybe(
        Et.typeforce.arrayOf(Et.isPoint)
      ),
      signatures: Et.typeforce.maybe(
        Et.typeforce.arrayOf(r)
      ),
      input: Et.typeforce.maybe(Et.typeforce.Buffer)
    },
    e
  );
  const i = { network: e.network || ym.bitcoin };
  let o = [], s = !1;
  function a(c) {
    s || (s = !0, o = to.decompile(c), i.m = o[0] - Fs, i.n = o[o.length - 2] - Fs, i.pubkeys = o.slice(1, -2));
  }
  if (Rn.prop(i, "output", () => {
    if (e.m && i.n && e.pubkeys)
      return to.compile(
        [].concat(
          Fs + e.m,
          e.pubkeys,
          Fs + i.n,
          ro.OP_CHECKMULTISIG
        )
      );
  }), Rn.prop(i, "m", () => {
    if (i.output)
      return a(i.output), i.m;
  }), Rn.prop(i, "n", () => {
    if (i.pubkeys)
      return i.pubkeys.length;
  }), Rn.prop(i, "pubkeys", () => {
    if (e.output)
      return a(e.output), i.pubkeys;
  }), Rn.prop(i, "signatures", () => {
    if (e.input)
      return to.decompile(e.input).slice(1);
  }), Rn.prop(i, "input", () => {
    if (e.signatures)
      return to.compile([ro.OP_0].concat(e.signatures));
  }), Rn.prop(i, "witness", () => {
    if (i.input)
      return [];
  }), Rn.prop(i, "name", () => {
    if (!(!i.m || !i.n))
      return `p2ms(${i.m} of ${i.n})`;
  }), t.validate) {
    if (e.output) {
      if (a(e.output), !Et.typeforce.Number(o[0]))
        throw new TypeError("Output is invalid");
      if (!Et.typeforce.Number(o[o.length - 2]))
        throw new TypeError("Output is invalid");
      if (o[o.length - 1] !== ro.OP_CHECKMULTISIG)
        throw new TypeError("Output is invalid");
      if (i.m <= 0 || i.n > 16 || i.m > i.n || i.n !== o.length - 3)
        throw new TypeError("Output is invalid");
      if (!i.pubkeys.every((c) => (0, Et.isPoint)(c)))
        throw new TypeError("Output is invalid");
      if (e.m !== void 0 && e.m !== i.m)
        throw new TypeError("m mismatch");
      if (e.n !== void 0 && e.n !== i.n)
        throw new TypeError("n mismatch");
      if (e.pubkeys && !T0(e.pubkeys, i.pubkeys))
        throw new TypeError("Pubkeys mismatch");
    }
    if (e.pubkeys) {
      if (e.n !== void 0 && e.n !== e.pubkeys.length)
        throw new TypeError("Pubkey count mismatch");
      if (i.n = e.pubkeys.length, i.n < i.m)
        throw new TypeError("Pubkey count cannot be less than m");
    }
    if (e.signatures) {
      if (e.signatures.length < i.m)
        throw new TypeError("Not enough signatures provided");
      if (e.signatures.length > i.m)
        throw new TypeError("Too many signatures provided");
    }
    if (e.input) {
      if (e.input[0] !== ro.OP_0)
        throw new TypeError("Input is invalid");
      if (i.signatures.length === 0 || !i.signatures.every(r))
        throw new TypeError("Input has invalid signature(s)");
      if (e.signatures && !T0(e.signatures, i.signatures))
        throw new TypeError("Signature mismatch");
      if (e.m !== void 0 && e.m !== e.signatures.length)
        throw new TypeError("Signature count mismatch");
    }
  }
  return Object.assign(i, e);
}
ja.p2ms = wm;
var za = {};
Object.defineProperty(za, "__esModule", { value: !0 });
za.p2pk = void 0;
const vm = kt, no = rr, Nr = $t, Zi = hr, A0 = no.OPS;
function bm(e, t) {
  if (!e.input && !e.output && !e.pubkey && !e.input && !e.signature)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, Nr.typeforce)(
    {
      network: Nr.typeforce.maybe(Nr.typeforce.Object),
      output: Nr.typeforce.maybe(Nr.typeforce.Buffer),
      pubkey: Nr.typeforce.maybe(Nr.isPoint),
      signature: Nr.typeforce.maybe(no.isCanonicalScriptSignature),
      input: Nr.typeforce.maybe(Nr.typeforce.Buffer)
    },
    e
  );
  const r = Zi.value(() => no.decompile(e.input)), i = { name: "p2pk", network: e.network || vm.bitcoin };
  if (Zi.prop(i, "output", () => {
    if (e.pubkey)
      return no.compile([e.pubkey, A0.OP_CHECKSIG]);
  }), Zi.prop(i, "pubkey", () => {
    if (e.output)
      return e.output.slice(1, -1);
  }), Zi.prop(i, "signature", () => {
    if (e.input)
      return r()[0];
  }), Zi.prop(i, "input", () => {
    if (e.signature)
      return no.compile([e.signature]);
  }), Zi.prop(i, "witness", () => {
    if (i.input)
      return [];
  }), t.validate) {
    if (e.output) {
      if (e.output[e.output.length - 1] !== A0.OP_CHECKSIG)
        throw new TypeError("Output is invalid");
      if (!(0, Nr.isPoint)(i.pubkey))
        throw new TypeError("Output pubkey is invalid");
      if (e.pubkey && !e.pubkey.equals(i.pubkey))
        throw new TypeError("Pubkey mismatch");
    }
    if (e.signature && e.input && !e.input.equals(i.input))
      throw new TypeError("Signature mismatch");
    if (e.input) {
      if (r().length !== 1)
        throw new TypeError("Input is invalid");
      if (!no.isCanonicalScriptSignature(i.signature))
        throw new TypeError("Input has invalid signature");
    }
  }
  return Object.assign(i, e);
}
za.p2pk = bm;
var Xa = {}, et = {}, wu = { exports: {} };
typeof Object.create == "function" ? wu.exports = function(t, r) {
  r && (t.super_ = r, t.prototype = Object.create(r.prototype, {
    constructor: {
      value: t,
      enumerable: !1,
      writable: !0,
      configurable: !0
    }
  }));
} : wu.exports = function(t, r) {
  if (r) {
    t.super_ = r;
    var n = function() {
    };
    n.prototype = r.prototype, t.prototype = new n(), t.prototype.constructor = t;
  }
};
var Mt = wu.exports, vu = { exports: {} };
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
(function(e, t) {
  var r = Qn, n = r.Buffer;
  function i(s, a) {
    for (var c in s)
      a[c] = s[c];
  }
  n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow ? e.exports = r : (i(r, t), t.Buffer = o);
  function o(s, a, c) {
    return n(s, a, c);
  }
  o.prototype = Object.create(n.prototype), i(n, o), o.from = function(s, a, c) {
    if (typeof s == "number")
      throw new TypeError("Argument must not be a number");
    return n(s, a, c);
  }, o.alloc = function(s, a, c) {
    if (typeof s != "number")
      throw new TypeError("Argument must be a number");
    var d = n(s);
    return a !== void 0 ? typeof c == "string" ? d.fill(a, c) : d.fill(a) : d.fill(0), d;
  }, o.allocUnsafe = function(s) {
    if (typeof s != "number")
      throw new TypeError("Argument must be a number");
    return n(s);
  }, o.allocUnsafeSlow = function(s) {
    if (typeof s != "number")
      throw new TypeError("Argument must be a number");
    return r.SlowBuffer(s);
  };
})(vu, vu.exports);
var Ce = vu.exports, bu = { exports: {} }, Dp = np.EventEmitter, Ec, O0;
function mm() {
  if (O0)
    return Ec;
  O0 = 1;
  function e(B, I) {
    var M = Object.keys(B);
    if (Object.getOwnPropertySymbols) {
      var T = Object.getOwnPropertySymbols(B);
      I && (T = T.filter(function(k) {
        return Object.getOwnPropertyDescriptor(B, k).enumerable;
      })), M.push.apply(M, T);
    }
    return M;
  }
  function t(B) {
    for (var I = 1; I < arguments.length; I++) {
      var M = arguments[I] != null ? arguments[I] : {};
      I % 2 ? e(Object(M), !0).forEach(function(T) {
        r(B, T, M[T]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(B, Object.getOwnPropertyDescriptors(M)) : e(Object(M)).forEach(function(T) {
        Object.defineProperty(B, T, Object.getOwnPropertyDescriptor(M, T));
      });
    }
    return B;
  }
  function r(B, I, M) {
    return I = s(I), I in B ? Object.defineProperty(B, I, { value: M, enumerable: !0, configurable: !0, writable: !0 }) : B[I] = M, B;
  }
  function n(B, I) {
    if (!(B instanceof I))
      throw new TypeError("Cannot call a class as a function");
  }
  function i(B, I) {
    for (var M = 0; M < I.length; M++) {
      var T = I[M];
      T.enumerable = T.enumerable || !1, T.configurable = !0, "value" in T && (T.writable = !0), Object.defineProperty(B, s(T.key), T);
    }
  }
  function o(B, I, M) {
    return I && i(B.prototype, I), M && i(B, M), Object.defineProperty(B, "prototype", { writable: !1 }), B;
  }
  function s(B) {
    var I = a(B, "string");
    return typeof I == "symbol" ? I : String(I);
  }
  function a(B, I) {
    if (typeof B != "object" || B === null)
      return B;
    var M = B[Symbol.toPrimitive];
    if (M !== void 0) {
      var T = M.call(B, I || "default");
      if (typeof T != "object")
        return T;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (I === "string" ? String : Number)(B);
  }
  var c = Qn, d = c.Buffer, w = ip, g = w.inspect, O = g && g.custom || "inspect";
  function N(B, I, M) {
    d.prototype.copy.call(B, I, M);
  }
  return Ec = /* @__PURE__ */ function() {
    function B() {
      n(this, B), this.head = null, this.tail = null, this.length = 0;
    }
    return o(B, [{
      key: "push",
      value: function(M) {
        var T = {
          data: M,
          next: null
        };
        this.length > 0 ? this.tail.next = T : this.head = T, this.tail = T, ++this.length;
      }
    }, {
      key: "unshift",
      value: function(M) {
        var T = {
          data: M,
          next: this.head
        };
        this.length === 0 && (this.tail = T), this.head = T, ++this.length;
      }
    }, {
      key: "shift",
      value: function() {
        if (this.length !== 0) {
          var M = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, M;
        }
      }
    }, {
      key: "clear",
      value: function() {
        this.head = this.tail = null, this.length = 0;
      }
    }, {
      key: "join",
      value: function(M) {
        if (this.length === 0)
          return "";
        for (var T = this.head, k = "" + T.data; T = T.next; )
          k += M + T.data;
        return k;
      }
    }, {
      key: "concat",
      value: function(M) {
        if (this.length === 0)
          return d.alloc(0);
        for (var T = d.allocUnsafe(M >>> 0), k = this.head, F = 0; k; )
          N(k.data, T, F), F += k.data.length, k = k.next;
        return T;
      }
      // Consumes a specified amount of bytes or characters from the buffered data.
    }, {
      key: "consume",
      value: function(M, T) {
        var k;
        return M < this.head.data.length ? (k = this.head.data.slice(0, M), this.head.data = this.head.data.slice(M)) : M === this.head.data.length ? k = this.shift() : k = T ? this._getString(M) : this._getBuffer(M), k;
      }
    }, {
      key: "first",
      value: function() {
        return this.head.data;
      }
      // Consumes a specified amount of characters from the buffered data.
    }, {
      key: "_getString",
      value: function(M) {
        var T = this.head, k = 1, F = T.data;
        for (M -= F.length; T = T.next; ) {
          var X = T.data, Z = M > X.length ? X.length : M;
          if (Z === X.length ? F += X : F += X.slice(0, M), M -= Z, M === 0) {
            Z === X.length ? (++k, T.next ? this.head = T.next : this.head = this.tail = null) : (this.head = T, T.data = X.slice(Z));
            break;
          }
          ++k;
        }
        return this.length -= k, F;
      }
      // Consumes a specified amount of bytes from the buffered data.
    }, {
      key: "_getBuffer",
      value: function(M) {
        var T = d.allocUnsafe(M), k = this.head, F = 1;
        for (k.data.copy(T), M -= k.data.length; k = k.next; ) {
          var X = k.data, Z = M > X.length ? X.length : M;
          if (X.copy(T, T.length - M, 0, Z), M -= Z, M === 0) {
            Z === X.length ? (++F, k.next ? this.head = k.next : this.head = this.tail = null) : (this.head = k, k.data = X.slice(Z));
            break;
          }
          ++F;
        }
        return this.length -= F, T;
      }
      // Make sure the linked list only shows the minimal necessary information.
    }, {
      key: O,
      value: function(M, T) {
        return g(this, t(t({}, T), {}, {
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: !1
        }));
      }
    }]), B;
  }(), Ec;
}
function Em(e, t) {
  var r = this, n = this._readableState && this._readableState.destroyed, i = this._writableState && this._writableState.destroyed;
  return n || i ? (t ? t(e) : e && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, process.nextTick(mu, this, e)) : process.nextTick(mu, this, e)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(e || null, function(o) {
    !t && o ? r._writableState ? r._writableState.errorEmitted ? process.nextTick(aa, r) : (r._writableState.errorEmitted = !0, process.nextTick(B0, r, o)) : process.nextTick(B0, r, o) : t ? (process.nextTick(aa, r), t(o)) : process.nextTick(aa, r);
  }), this);
}
function B0(e, t) {
  mu(e, t), aa(e);
}
function aa(e) {
  e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close");
}
function _m() {
  this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
}
function mu(e, t) {
  e.emit("error", t);
}
function Sm(e, t) {
  var r = e._readableState, n = e._writableState;
  r && r.autoDestroy || n && n.autoDestroy ? e.destroy(t) : e.emit("error", t);
}
var $p = {
  destroy: Em,
  undestroy: _m,
  errorOrDestroy: Sm
}, Ti = {};
function xm(e, t) {
  e.prototype = Object.create(t.prototype), e.prototype.constructor = e, e.__proto__ = t;
}
var Fp = {};
function Or(e, t, r) {
  r || (r = Error);
  function n(o, s, a) {
    return typeof t == "string" ? t : t(o, s, a);
  }
  var i = /* @__PURE__ */ function(o) {
    xm(s, o);
    function s(a, c, d) {
      return o.call(this, n(a, c, d)) || this;
    }
    return s;
  }(r);
  i.prototype.name = r.name, i.prototype.code = e, Fp[e] = i;
}
function P0(e, t) {
  if (Array.isArray(e)) {
    var r = e.length;
    return e = e.map(function(n) {
      return String(n);
    }), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : r === 2 ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);
  } else
    return "of ".concat(t, " ").concat(String(e));
}
function Im(e, t, r) {
  return e.substr(!r || r < 0 ? 0 : +r, t.length) === t;
}
function Tm(e, t, r) {
  return (r === void 0 || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
}
function Am(e, t, r) {
  return typeof r != "number" && (r = 0), r + t.length > e.length ? !1 : e.indexOf(t, r) !== -1;
}
Or("ERR_INVALID_OPT_VALUE", function(e, t) {
  return 'The value "' + t + '" is invalid for option "' + e + '"';
}, TypeError);
Or("ERR_INVALID_ARG_TYPE", function(e, t, r) {
  var n;
  typeof t == "string" && Im(t, "not ") ? (n = "must not be", t = t.replace(/^not /, "")) : n = "must be";
  var i;
  if (Tm(e, " argument"))
    i = "The ".concat(e, " ").concat(n, " ").concat(P0(t, "type"));
  else {
    var o = Am(e, ".") ? "property" : "argument";
    i = 'The "'.concat(e, '" ').concat(o, " ").concat(n, " ").concat(P0(t, "type"));
  }
  return i += ". Received type ".concat(typeof r), i;
}, TypeError);
Or("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
Or("ERR_METHOD_NOT_IMPLEMENTED", function(e) {
  return "The " + e + " method is not implemented";
});
Or("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
Or("ERR_STREAM_DESTROYED", function(e) {
  return "Cannot call " + e + " after a stream was destroyed";
});
Or("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
Or("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
Or("ERR_STREAM_WRITE_AFTER_END", "write after end");
Or("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
Or("ERR_UNKNOWN_ENCODING", function(e) {
  return "Unknown encoding: " + e;
}, TypeError);
Or("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
Ti.codes = Fp;
var Om = Ti.codes.ERR_INVALID_OPT_VALUE;
function Bm(e, t, r) {
  return e.highWaterMark != null ? e.highWaterMark : t ? e[r] : null;
}
function Pm(e, t, r, n) {
  var i = Bm(t, n, r);
  if (i != null) {
    if (!(isFinite(i) && Math.floor(i) === i) || i < 0) {
      var o = n ? r : "highWaterMark";
      throw new Om(o, i);
    }
    return Math.floor(i);
  }
  return e.objectMode ? 16 : 16 * 1024;
}
var Kp = {
  getHighWaterMark: Pm
}, Nm = Rm;
function Rm(e, t) {
  if (_c("noDeprecation"))
    return e;
  var r = !1;
  function n() {
    if (!r) {
      if (_c("throwDeprecation"))
        throw new Error(t);
      _c("traceDeprecation") ? console.trace(t) : console.warn(t), r = !0;
    }
    return e.apply(this, arguments);
  }
  return n;
}
function _c(e) {
  try {
    if (!En.localStorage)
      return !1;
  } catch {
    return !1;
  }
  var t = En.localStorage[e];
  return t == null ? !1 : String(t).toLowerCase() === "true";
}
var Sc, N0;
function Gp() {
  if (N0)
    return Sc;
  N0 = 1, Sc = b;
  function e(V) {
    var Y = this;
    this.next = null, this.entry = null, this.finish = function() {
      ne(Y, V);
    };
  }
  var t;
  b.WritableState = z;
  var r = {
    deprecate: Nm
  }, n = Dp, i = Qn.Buffer, o = (typeof En < "u" ? En : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function s(V) {
    return i.from(V);
  }
  function a(V) {
    return i.isBuffer(V) || V instanceof o;
  }
  var c = $p, d = Kp, w = d.getHighWaterMark, g = Ti.codes, O = g.ERR_INVALID_ARG_TYPE, N = g.ERR_METHOD_NOT_IMPLEMENTED, B = g.ERR_MULTIPLE_CALLBACK, I = g.ERR_STREAM_CANNOT_PIPE, M = g.ERR_STREAM_DESTROYED, T = g.ERR_STREAM_NULL_VALUES, k = g.ERR_STREAM_WRITE_AFTER_END, F = g.ERR_UNKNOWN_ENCODING, X = c.errorOrDestroy;
  Mt(b, n);
  function Z() {
  }
  function z(V, Y, Q) {
    t = t || _o(), V = V || {}, typeof Q != "boolean" && (Q = Y instanceof t), this.objectMode = !!V.objectMode, Q && (this.objectMode = this.objectMode || !!V.writableObjectMode), this.highWaterMark = w(this, V, "writableHighWaterMark", Q), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
    var ie = V.decodeStrings === !1;
    this.decodeStrings = !ie, this.defaultEncoding = V.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(de) {
      v(Y, de);
    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = V.emitClose !== !1, this.autoDestroy = !!V.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new e(this);
  }
  z.prototype.getBuffer = function() {
    for (var Y = this.bufferedRequest, Q = []; Y; )
      Q.push(Y), Y = Y.next;
    return Q;
  }, function() {
    try {
      Object.defineProperty(z.prototype, "buffer", {
        get: r.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch {
    }
  }();
  var te;
  typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (te = Function.prototype[Symbol.hasInstance], Object.defineProperty(b, Symbol.hasInstance, {
    value: function(Y) {
      return te.call(this, Y) ? !0 : this !== b ? !1 : Y && Y._writableState instanceof z;
    }
  })) : te = function(Y) {
    return Y instanceof this;
  };
  function b(V) {
    t = t || _o();
    var Y = this instanceof t;
    if (!Y && !te.call(b, this))
      return new b(V);
    this._writableState = new z(V, this, Y), this.writable = !0, V && (typeof V.write == "function" && (this._write = V.write), typeof V.writev == "function" && (this._writev = V.writev), typeof V.destroy == "function" && (this._destroy = V.destroy), typeof V.final == "function" && (this._final = V.final)), n.call(this);
  }
  b.prototype.pipe = function() {
    X(this, new I());
  };
  function A(V, Y) {
    var Q = new k();
    X(V, Q), process.nextTick(Y, Q);
  }
  function C(V, Y, Q, ie) {
    var de;
    return Q === null ? de = new T() : typeof Q != "string" && !Y.objectMode && (de = new O("chunk", ["string", "Buffer"], Q)), de ? (X(V, de), process.nextTick(ie, de), !1) : !0;
  }
  b.prototype.write = function(V, Y, Q) {
    var ie = this._writableState, de = !1, L = !ie.objectMode && a(V);
    return L && !i.isBuffer(V) && (V = s(V)), typeof Y == "function" && (Q = Y, Y = null), L ? Y = "buffer" : Y || (Y = ie.defaultEncoding), typeof Q != "function" && (Q = Z), ie.ending ? A(this, Q) : (L || C(this, ie, V, Q)) && (ie.pendingcb++, de = W(this, ie, L, V, Y, Q)), de;
  }, b.prototype.cork = function() {
    this._writableState.corked++;
  }, b.prototype.uncork = function() {
    var V = this._writableState;
    V.corked && (V.corked--, !V.writing && !V.corked && !V.bufferProcessing && V.bufferedRequest && R(this, V));
  }, b.prototype.setDefaultEncoding = function(Y) {
    if (typeof Y == "string" && (Y = Y.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((Y + "").toLowerCase()) > -1))
      throw new F(Y);
    return this._writableState.defaultEncoding = Y, this;
  }, Object.defineProperty(b.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function q(V, Y, Q) {
    return !V.objectMode && V.decodeStrings !== !1 && typeof Y == "string" && (Y = i.from(Y, Q)), Y;
  }
  Object.defineProperty(b.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function W(V, Y, Q, ie, de, L) {
    if (!Q) {
      var $ = q(Y, ie, de);
      ie !== $ && (Q = !0, de = "buffer", ie = $);
    }
    var ee = Y.objectMode ? 1 : ie.length;
    Y.length += ee;
    var re = Y.length < Y.highWaterMark;
    if (re || (Y.needDrain = !0), Y.writing || Y.corked) {
      var ae = Y.lastBufferedRequest;
      Y.lastBufferedRequest = {
        chunk: ie,
        encoding: de,
        isBuf: Q,
        callback: L,
        next: null
      }, ae ? ae.next = Y.lastBufferedRequest : Y.bufferedRequest = Y.lastBufferedRequest, Y.bufferedRequestCount += 1;
    } else
      E(V, Y, !1, ee, ie, de, L);
    return re;
  }
  function E(V, Y, Q, ie, de, L, $) {
    Y.writelen = ie, Y.writecb = $, Y.writing = !0, Y.sync = !0, Y.destroyed ? Y.onwrite(new M("write")) : Q ? V._writev(de, Y.onwrite) : V._write(de, L, Y.onwrite), Y.sync = !1;
  }
  function f(V, Y, Q, ie, de) {
    --Y.pendingcb, Q ? (process.nextTick(de, ie), process.nextTick(H, V, Y), V._writableState.errorEmitted = !0, X(V, ie)) : (de(ie), V._writableState.errorEmitted = !0, X(V, ie), H(V, Y));
  }
  function h(V) {
    V.writing = !1, V.writecb = null, V.length -= V.writelen, V.writelen = 0;
  }
  function v(V, Y) {
    var Q = V._writableState, ie = Q.sync, de = Q.writecb;
    if (typeof de != "function")
      throw new B();
    if (h(Q), Y)
      f(V, Q, ie, Y, de);
    else {
      var L = G(Q) || V.destroyed;
      !L && !Q.corked && !Q.bufferProcessing && Q.bufferedRequest && R(V, Q), ie ? process.nextTick(m, V, Q, L, de) : m(V, Q, L, de);
    }
  }
  function m(V, Y, Q, ie) {
    Q || _(V, Y), Y.pendingcb--, ie(), H(V, Y);
  }
  function _(V, Y) {
    Y.length === 0 && Y.needDrain && (Y.needDrain = !1, V.emit("drain"));
  }
  function R(V, Y) {
    Y.bufferProcessing = !0;
    var Q = Y.bufferedRequest;
    if (V._writev && Q && Q.next) {
      var ie = Y.bufferedRequestCount, de = new Array(ie), L = Y.corkedRequestsFree;
      L.entry = Q;
      for (var $ = 0, ee = !0; Q; )
        de[$] = Q, Q.isBuf || (ee = !1), Q = Q.next, $ += 1;
      de.allBuffers = ee, E(V, Y, !0, Y.length, de, "", L.finish), Y.pendingcb++, Y.lastBufferedRequest = null, L.next ? (Y.corkedRequestsFree = L.next, L.next = null) : Y.corkedRequestsFree = new e(Y), Y.bufferedRequestCount = 0;
    } else {
      for (; Q; ) {
        var re = Q.chunk, ae = Q.encoding, me = Q.callback, ge = Y.objectMode ? 1 : re.length;
        if (E(V, Y, !1, ge, re, ae, me), Q = Q.next, Y.bufferedRequestCount--, Y.writing)
          break;
      }
      Q === null && (Y.lastBufferedRequest = null);
    }
    Y.bufferedRequest = Q, Y.bufferProcessing = !1;
  }
  b.prototype._write = function(V, Y, Q) {
    Q(new N("_write()"));
  }, b.prototype._writev = null, b.prototype.end = function(V, Y, Q) {
    var ie = this._writableState;
    return typeof V == "function" ? (Q = V, V = null, Y = null) : typeof Y == "function" && (Q = Y, Y = null), V != null && this.write(V, Y), ie.corked && (ie.corked = 1, this.uncork()), ie.ending || oe(this, ie, Q), this;
  }, Object.defineProperty(b.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.length;
    }
  });
  function G(V) {
    return V.ending && V.length === 0 && V.bufferedRequest === null && !V.finished && !V.writing;
  }
  function P(V, Y) {
    V._final(function(Q) {
      Y.pendingcb--, Q && X(V, Q), Y.prefinished = !0, V.emit("prefinish"), H(V, Y);
    });
  }
  function p(V, Y) {
    !Y.prefinished && !Y.finalCalled && (typeof V._final == "function" && !Y.destroyed ? (Y.pendingcb++, Y.finalCalled = !0, process.nextTick(P, V, Y)) : (Y.prefinished = !0, V.emit("prefinish")));
  }
  function H(V, Y) {
    var Q = G(Y);
    if (Q && (p(V, Y), Y.pendingcb === 0 && (Y.finished = !0, V.emit("finish"), Y.autoDestroy))) {
      var ie = V._readableState;
      (!ie || ie.autoDestroy && ie.endEmitted) && V.destroy();
    }
    return Q;
  }
  function oe(V, Y, Q) {
    Y.ending = !0, H(V, Y), Q && (Y.finished ? process.nextTick(Q) : V.once("finish", Q)), Y.ended = !0, V.writable = !1;
  }
  function ne(V, Y, Q) {
    var ie = V.entry;
    for (V.entry = null; ie; ) {
      var de = ie.callback;
      Y.pendingcb--, de(Q), ie = ie.next;
    }
    Y.corkedRequestsFree.next = V;
  }
  return Object.defineProperty(b.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState === void 0 ? !1 : this._writableState.destroyed;
    },
    set: function(Y) {
      this._writableState && (this._writableState.destroyed = Y);
    }
  }), b.prototype.destroy = c.destroy, b.prototype._undestroy = c.undestroy, b.prototype._destroy = function(V, Y) {
    Y(V);
  }, Sc;
}
var xc, R0;
function _o() {
  if (R0)
    return xc;
  R0 = 1;
  var e = Object.keys || function(d) {
    var w = [];
    for (var g in d)
      w.push(g);
    return w;
  };
  xc = s;
  var t = qp(), r = Gp();
  Mt(s, t);
  for (var n = e(r.prototype), i = 0; i < n.length; i++) {
    var o = n[i];
    s.prototype[o] || (s.prototype[o] = r.prototype[o]);
  }
  function s(d) {
    if (!(this instanceof s))
      return new s(d);
    t.call(this, d), r.call(this, d), this.allowHalfOpen = !0, d && (d.readable === !1 && (this.readable = !1), d.writable === !1 && (this.writable = !1), d.allowHalfOpen === !1 && (this.allowHalfOpen = !1, this.once("end", a)));
  }
  Object.defineProperty(s.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  }), Object.defineProperty(s.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  }), Object.defineProperty(s.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.length;
    }
  });
  function a() {
    this._writableState.ended || process.nextTick(c, this);
  }
  function c(d) {
    d.end();
  }
  return Object.defineProperty(s.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState === void 0 || this._writableState === void 0 ? !1 : this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(w) {
      this._readableState === void 0 || this._writableState === void 0 || (this._readableState.destroyed = w, this._writableState.destroyed = w);
    }
  }), xc;
}
var Ic = {}, k0;
function M0() {
  if (k0)
    return Ic;
  k0 = 1;
  var e = Ce.Buffer, t = e.isEncoding || function(T) {
    switch (T = "" + T, T && T.toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
      case "raw":
        return !0;
      default:
        return !1;
    }
  };
  function r(T) {
    if (!T)
      return "utf8";
    for (var k; ; )
      switch (T) {
        case "utf8":
        case "utf-8":
          return "utf8";
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return "utf16le";
        case "latin1":
        case "binary":
          return "latin1";
        case "base64":
        case "ascii":
        case "hex":
          return T;
        default:
          if (k)
            return;
          T = ("" + T).toLowerCase(), k = !0;
      }
  }
  function n(T) {
    var k = r(T);
    if (typeof k != "string" && (e.isEncoding === t || !t(T)))
      throw new Error("Unknown encoding: " + T);
    return k || T;
  }
  Ic.StringDecoder = i;
  function i(T) {
    this.encoding = n(T);
    var k;
    switch (this.encoding) {
      case "utf16le":
        this.text = g, this.end = O, k = 4;
        break;
      case "utf8":
        this.fillLast = c, k = 4;
        break;
      case "base64":
        this.text = N, this.end = B, k = 3;
        break;
      default:
        this.write = I, this.end = M;
        return;
    }
    this.lastNeed = 0, this.lastTotal = 0, this.lastChar = e.allocUnsafe(k);
  }
  i.prototype.write = function(T) {
    if (T.length === 0)
      return "";
    var k, F;
    if (this.lastNeed) {
      if (k = this.fillLast(T), k === void 0)
        return "";
      F = this.lastNeed, this.lastNeed = 0;
    } else
      F = 0;
    return F < T.length ? k ? k + this.text(T, F) : this.text(T, F) : k || "";
  }, i.prototype.end = w, i.prototype.text = d, i.prototype.fillLast = function(T) {
    if (this.lastNeed <= T.length)
      return T.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    T.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, T.length), this.lastNeed -= T.length;
  };
  function o(T) {
    return T <= 127 ? 0 : T >> 5 === 6 ? 2 : T >> 4 === 14 ? 3 : T >> 3 === 30 ? 4 : T >> 6 === 2 ? -1 : -2;
  }
  function s(T, k, F) {
    var X = k.length - 1;
    if (X < F)
      return 0;
    var Z = o(k[X]);
    return Z >= 0 ? (Z > 0 && (T.lastNeed = Z - 1), Z) : --X < F || Z === -2 ? 0 : (Z = o(k[X]), Z >= 0 ? (Z > 0 && (T.lastNeed = Z - 2), Z) : --X < F || Z === -2 ? 0 : (Z = o(k[X]), Z >= 0 ? (Z > 0 && (Z === 2 ? Z = 0 : T.lastNeed = Z - 3), Z) : 0));
  }
  function a(T, k, F) {
    if ((k[0] & 192) !== 128)
      return T.lastNeed = 0, "�";
    if (T.lastNeed > 1 && k.length > 1) {
      if ((k[1] & 192) !== 128)
        return T.lastNeed = 1, "�";
      if (T.lastNeed > 2 && k.length > 2 && (k[2] & 192) !== 128)
        return T.lastNeed = 2, "�";
    }
  }
  function c(T) {
    var k = this.lastTotal - this.lastNeed, F = a(this, T);
    if (F !== void 0)
      return F;
    if (this.lastNeed <= T.length)
      return T.copy(this.lastChar, k, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
    T.copy(this.lastChar, k, 0, T.length), this.lastNeed -= T.length;
  }
  function d(T, k) {
    var F = s(this, T, k);
    if (!this.lastNeed)
      return T.toString("utf8", k);
    this.lastTotal = F;
    var X = T.length - (F - this.lastNeed);
    return T.copy(this.lastChar, 0, X), T.toString("utf8", k, X);
  }
  function w(T) {
    var k = T && T.length ? this.write(T) : "";
    return this.lastNeed ? k + "�" : k;
  }
  function g(T, k) {
    if ((T.length - k) % 2 === 0) {
      var F = T.toString("utf16le", k);
      if (F) {
        var X = F.charCodeAt(F.length - 1);
        if (X >= 55296 && X <= 56319)
          return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = T[T.length - 2], this.lastChar[1] = T[T.length - 1], F.slice(0, -1);
      }
      return F;
    }
    return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = T[T.length - 1], T.toString("utf16le", k, T.length - 1);
  }
  function O(T) {
    var k = T && T.length ? this.write(T) : "";
    if (this.lastNeed) {
      var F = this.lastTotal - this.lastNeed;
      return k + this.lastChar.toString("utf16le", 0, F);
    }
    return k;
  }
  function N(T, k) {
    var F = (T.length - k) % 3;
    return F === 0 ? T.toString("base64", k) : (this.lastNeed = 3 - F, this.lastTotal = 3, F === 1 ? this.lastChar[0] = T[T.length - 1] : (this.lastChar[0] = T[T.length - 2], this.lastChar[1] = T[T.length - 1]), T.toString("base64", k, T.length - F));
  }
  function B(T) {
    var k = T && T.length ? this.write(T) : "";
    return this.lastNeed ? k + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : k;
  }
  function I(T) {
    return T.toString(this.encoding);
  }
  function M(T) {
    return T && T.length ? this.write(T) : "";
  }
  return Ic;
}
var U0 = Ti.codes.ERR_STREAM_PREMATURE_CLOSE;
function km(e) {
  var t = !1;
  return function() {
    if (!t) {
      t = !0;
      for (var r = arguments.length, n = new Array(r), i = 0; i < r; i++)
        n[i] = arguments[i];
      e.apply(this, n);
    }
  };
}
function Mm() {
}
function Um(e) {
  return e.setHeader && typeof e.abort == "function";
}
function Vp(e, t, r) {
  if (typeof t == "function")
    return Vp(e, null, t);
  t || (t = {}), r = km(r || Mm);
  var n = t.readable || t.readable !== !1 && e.readable, i = t.writable || t.writable !== !1 && e.writable, o = function() {
    e.writable || a();
  }, s = e._writableState && e._writableState.finished, a = function() {
    i = !1, s = !0, n || r.call(e);
  }, c = e._readableState && e._readableState.endEmitted, d = function() {
    n = !1, c = !0, i || r.call(e);
  }, w = function(B) {
    r.call(e, B);
  }, g = function() {
    var B;
    if (n && !c)
      return (!e._readableState || !e._readableState.ended) && (B = new U0()), r.call(e, B);
    if (i && !s)
      return (!e._writableState || !e._writableState.ended) && (B = new U0()), r.call(e, B);
  }, O = function() {
    e.req.on("finish", a);
  };
  return Um(e) ? (e.on("complete", a), e.on("abort", g), e.req ? O() : e.on("request", O)) : i && !e._writableState && (e.on("end", o), e.on("close", o)), e.on("end", d), e.on("finish", a), t.error !== !1 && e.on("error", w), e.on("close", g), function() {
    e.removeListener("complete", a), e.removeListener("abort", g), e.removeListener("request", O), e.req && e.req.removeListener("finish", a), e.removeListener("end", o), e.removeListener("close", o), e.removeListener("finish", a), e.removeListener("end", d), e.removeListener("error", w), e.removeListener("close", g);
  };
}
var wh = Vp, Tc, C0;
function Cm() {
  if (C0)
    return Tc;
  C0 = 1;
  var e;
  function t(F, X, Z) {
    return X = r(X), X in F ? Object.defineProperty(F, X, { value: Z, enumerable: !0, configurable: !0, writable: !0 }) : F[X] = Z, F;
  }
  function r(F) {
    var X = n(F, "string");
    return typeof X == "symbol" ? X : String(X);
  }
  function n(F, X) {
    if (typeof F != "object" || F === null)
      return F;
    var Z = F[Symbol.toPrimitive];
    if (Z !== void 0) {
      var z = Z.call(F, X || "default");
      if (typeof z != "object")
        return z;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (X === "string" ? String : Number)(F);
  }
  var i = wh, o = Symbol("lastResolve"), s = Symbol("lastReject"), a = Symbol("error"), c = Symbol("ended"), d = Symbol("lastPromise"), w = Symbol("handlePromise"), g = Symbol("stream");
  function O(F, X) {
    return {
      value: F,
      done: X
    };
  }
  function N(F) {
    var X = F[o];
    if (X !== null) {
      var Z = F[g].read();
      Z !== null && (F[d] = null, F[o] = null, F[s] = null, X(O(Z, !1)));
    }
  }
  function B(F) {
    process.nextTick(N, F);
  }
  function I(F, X) {
    return function(Z, z) {
      F.then(function() {
        if (X[c]) {
          Z(O(void 0, !0));
          return;
        }
        X[w](Z, z);
      }, z);
    };
  }
  var M = Object.getPrototypeOf(function() {
  }), T = Object.setPrototypeOf((e = {
    get stream() {
      return this[g];
    },
    next: function() {
      var X = this, Z = this[a];
      if (Z !== null)
        return Promise.reject(Z);
      if (this[c])
        return Promise.resolve(O(void 0, !0));
      if (this[g].destroyed)
        return new Promise(function(A, C) {
          process.nextTick(function() {
            X[a] ? C(X[a]) : A(O(void 0, !0));
          });
        });
      var z = this[d], te;
      if (z)
        te = new Promise(I(z, this));
      else {
        var b = this[g].read();
        if (b !== null)
          return Promise.resolve(O(b, !1));
        te = new Promise(this[w]);
      }
      return this[d] = te, te;
    }
  }, t(e, Symbol.asyncIterator, function() {
    return this;
  }), t(e, "return", function() {
    var X = this;
    return new Promise(function(Z, z) {
      X[g].destroy(null, function(te) {
        if (te) {
          z(te);
          return;
        }
        Z(O(void 0, !0));
      });
    });
  }), e), M), k = function(X) {
    var Z, z = Object.create(T, (Z = {}, t(Z, g, {
      value: X,
      writable: !0
    }), t(Z, o, {
      value: null,
      writable: !0
    }), t(Z, s, {
      value: null,
      writable: !0
    }), t(Z, a, {
      value: null,
      writable: !0
    }), t(Z, c, {
      value: X._readableState.endEmitted,
      writable: !0
    }), t(Z, w, {
      value: function(b, A) {
        var C = z[g].read();
        C ? (z[d] = null, z[o] = null, z[s] = null, b(O(C, !1))) : (z[o] = b, z[s] = A);
      },
      writable: !0
    }), Z));
    return z[d] = null, i(X, function(te) {
      if (te && te.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var b = z[s];
        b !== null && (z[d] = null, z[o] = null, z[s] = null, b(te)), z[a] = te;
        return;
      }
      var A = z[o];
      A !== null && (z[d] = null, z[o] = null, z[s] = null, A(O(void 0, !0))), z[c] = !0;
    }), X.on("readable", B.bind(null, z)), z;
  };
  return Tc = k, Tc;
}
var Ac, H0;
function Hm() {
  return H0 || (H0 = 1, Ac = function() {
    throw new Error("Readable.from is not available in the browser");
  }), Ac;
}
var Oc, L0;
function qp() {
  if (L0)
    return Oc;
  L0 = 1, Oc = A;
  var e;
  A.ReadableState = b, np.EventEmitter;
  var t = function($, ee) {
    return $.listeners(ee).length;
  }, r = Dp, n = Qn.Buffer, i = (typeof En < "u" ? En : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function o(L) {
    return n.from(L);
  }
  function s(L) {
    return n.isBuffer(L) || L instanceof i;
  }
  var a = ip, c;
  a && a.debuglog ? c = a.debuglog("stream") : c = function() {
  };
  var d = mm(), w = $p, g = Kp, O = g.getHighWaterMark, N = Ti.codes, B = N.ERR_INVALID_ARG_TYPE, I = N.ERR_STREAM_PUSH_AFTER_EOF, M = N.ERR_METHOD_NOT_IMPLEMENTED, T = N.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, k, F, X;
  Mt(A, r);
  var Z = w.errorOrDestroy, z = ["error", "close", "destroy", "pause", "resume"];
  function te(L, $, ee) {
    if (typeof L.prependListener == "function")
      return L.prependListener($, ee);
    !L._events || !L._events[$] ? L.on($, ee) : Array.isArray(L._events[$]) ? L._events[$].unshift(ee) : L._events[$] = [ee, L._events[$]];
  }
  function b(L, $, ee) {
    e = e || _o(), L = L || {}, typeof ee != "boolean" && (ee = $ instanceof e), this.objectMode = !!L.objectMode, ee && (this.objectMode = this.objectMode || !!L.readableObjectMode), this.highWaterMark = O(this, L, "readableHighWaterMark", ee), this.buffer = new d(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = L.emitClose !== !1, this.autoDestroy = !!L.autoDestroy, this.destroyed = !1, this.defaultEncoding = L.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, L.encoding && (k || (k = M0().StringDecoder), this.decoder = new k(L.encoding), this.encoding = L.encoding);
  }
  function A(L) {
    if (e = e || _o(), !(this instanceof A))
      return new A(L);
    var $ = this instanceof e;
    this._readableState = new b(L, this, $), this.readable = !0, L && (typeof L.read == "function" && (this._read = L.read), typeof L.destroy == "function" && (this._destroy = L.destroy)), r.call(this);
  }
  Object.defineProperty(A.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState === void 0 ? !1 : this._readableState.destroyed;
    },
    set: function($) {
      this._readableState && (this._readableState.destroyed = $);
    }
  }), A.prototype.destroy = w.destroy, A.prototype._undestroy = w.undestroy, A.prototype._destroy = function(L, $) {
    $(L);
  }, A.prototype.push = function(L, $) {
    var ee = this._readableState, re;
    return ee.objectMode ? re = !0 : typeof L == "string" && ($ = $ || ee.defaultEncoding, $ !== ee.encoding && (L = n.from(L, $), $ = ""), re = !0), C(this, L, $, !1, re);
  }, A.prototype.unshift = function(L) {
    return C(this, L, null, !0, !1);
  };
  function C(L, $, ee, re, ae) {
    c("readableAddChunk", $);
    var me = L._readableState;
    if ($ === null)
      me.reading = !1, v(L, me);
    else {
      var ge;
      if (ae || (ge = W(me, $)), ge)
        Z(L, ge);
      else if (me.objectMode || $ && $.length > 0)
        if (typeof $ != "string" && !me.objectMode && Object.getPrototypeOf($) !== n.prototype && ($ = o($)), re)
          me.endEmitted ? Z(L, new T()) : q(L, me, $, !0);
        else if (me.ended)
          Z(L, new I());
        else {
          if (me.destroyed)
            return !1;
          me.reading = !1, me.decoder && !ee ? ($ = me.decoder.write($), me.objectMode || $.length !== 0 ? q(L, me, $, !1) : R(L, me)) : q(L, me, $, !1);
        }
      else
        re || (me.reading = !1, R(L, me));
    }
    return !me.ended && (me.length < me.highWaterMark || me.length === 0);
  }
  function q(L, $, ee, re) {
    $.flowing && $.length === 0 && !$.sync ? ($.awaitDrain = 0, L.emit("data", ee)) : ($.length += $.objectMode ? 1 : ee.length, re ? $.buffer.unshift(ee) : $.buffer.push(ee), $.needReadable && m(L)), R(L, $);
  }
  function W(L, $) {
    var ee;
    return !s($) && typeof $ != "string" && $ !== void 0 && !L.objectMode && (ee = new B("chunk", ["string", "Buffer", "Uint8Array"], $)), ee;
  }
  A.prototype.isPaused = function() {
    return this._readableState.flowing === !1;
  }, A.prototype.setEncoding = function(L) {
    k || (k = M0().StringDecoder);
    var $ = new k(L);
    this._readableState.decoder = $, this._readableState.encoding = this._readableState.decoder.encoding;
    for (var ee = this._readableState.buffer.head, re = ""; ee !== null; )
      re += $.write(ee.data), ee = ee.next;
    return this._readableState.buffer.clear(), re !== "" && this._readableState.buffer.push(re), this._readableState.length = re.length, this;
  };
  var E = 1073741824;
  function f(L) {
    return L >= E ? L = E : (L--, L |= L >>> 1, L |= L >>> 2, L |= L >>> 4, L |= L >>> 8, L |= L >>> 16, L++), L;
  }
  function h(L, $) {
    return L <= 0 || $.length === 0 && $.ended ? 0 : $.objectMode ? 1 : L !== L ? $.flowing && $.length ? $.buffer.head.data.length : $.length : (L > $.highWaterMark && ($.highWaterMark = f(L)), L <= $.length ? L : $.ended ? $.length : ($.needReadable = !0, 0));
  }
  A.prototype.read = function(L) {
    c("read", L), L = parseInt(L, 10);
    var $ = this._readableState, ee = L;
    if (L !== 0 && ($.emittedReadable = !1), L === 0 && $.needReadable && (($.highWaterMark !== 0 ? $.length >= $.highWaterMark : $.length > 0) || $.ended))
      return c("read: emitReadable", $.length, $.ended), $.length === 0 && $.ended ? Q(this) : m(this), null;
    if (L = h(L, $), L === 0 && $.ended)
      return $.length === 0 && Q(this), null;
    var re = $.needReadable;
    c("need readable", re), ($.length === 0 || $.length - L < $.highWaterMark) && (re = !0, c("length less than watermark", re)), $.ended || $.reading ? (re = !1, c("reading or ended", re)) : re && (c("do read"), $.reading = !0, $.sync = !0, $.length === 0 && ($.needReadable = !0), this._read($.highWaterMark), $.sync = !1, $.reading || (L = h(ee, $)));
    var ae;
    return L > 0 ? ae = Y(L, $) : ae = null, ae === null ? ($.needReadable = $.length <= $.highWaterMark, L = 0) : ($.length -= L, $.awaitDrain = 0), $.length === 0 && ($.ended || ($.needReadable = !0), ee !== L && $.ended && Q(this)), ae !== null && this.emit("data", ae), ae;
  };
  function v(L, $) {
    if (c("onEofChunk"), !$.ended) {
      if ($.decoder) {
        var ee = $.decoder.end();
        ee && ee.length && ($.buffer.push(ee), $.length += $.objectMode ? 1 : ee.length);
      }
      $.ended = !0, $.sync ? m(L) : ($.needReadable = !1, $.emittedReadable || ($.emittedReadable = !0, _(L)));
    }
  }
  function m(L) {
    var $ = L._readableState;
    c("emitReadable", $.needReadable, $.emittedReadable), $.needReadable = !1, $.emittedReadable || (c("emitReadable", $.flowing), $.emittedReadable = !0, process.nextTick(_, L));
  }
  function _(L) {
    var $ = L._readableState;
    c("emitReadable_", $.destroyed, $.length, $.ended), !$.destroyed && ($.length || $.ended) && (L.emit("readable"), $.emittedReadable = !1), $.needReadable = !$.flowing && !$.ended && $.length <= $.highWaterMark, V(L);
  }
  function R(L, $) {
    $.readingMore || ($.readingMore = !0, process.nextTick(G, L, $));
  }
  function G(L, $) {
    for (; !$.reading && !$.ended && ($.length < $.highWaterMark || $.flowing && $.length === 0); ) {
      var ee = $.length;
      if (c("maybeReadMore read 0"), L.read(0), ee === $.length)
        break;
    }
    $.readingMore = !1;
  }
  A.prototype._read = function(L) {
    Z(this, new M("_read()"));
  }, A.prototype.pipe = function(L, $) {
    var ee = this, re = this._readableState;
    switch (re.pipesCount) {
      case 0:
        re.pipes = L;
        break;
      case 1:
        re.pipes = [re.pipes, L];
        break;
      default:
        re.pipes.push(L);
        break;
    }
    re.pipesCount += 1, c("pipe count=%d opts=%j", re.pipesCount, $);
    var ae = (!$ || $.end !== !1) && L !== process.stdout && L !== process.stderr, me = ae ? Re : j;
    re.endEmitted ? process.nextTick(me) : ee.once("end", me), L.on("unpipe", ge);
    function ge(y, u) {
      c("onunpipe"), y === ee && u && u.hasUnpiped === !1 && (u.hasUnpiped = !0, De());
    }
    function Re() {
      c("onend"), L.end();
    }
    var lr = P(ee);
    L.on("drain", lr);
    var Le = !1;
    function De() {
      c("cleanup"), L.removeListener("close", S), L.removeListener("finish", U), L.removeListener("drain", lr), L.removeListener("error", Oe), L.removeListener("unpipe", ge), ee.removeListener("end", Re), ee.removeListener("end", j), ee.removeListener("data", ye), Le = !0, re.awaitDrain && (!L._writableState || L._writableState.needDrain) && lr();
    }
    ee.on("data", ye);
    function ye(y) {
      c("ondata");
      var u = L.write(y);
      c("dest.write", u), u === !1 && ((re.pipesCount === 1 && re.pipes === L || re.pipesCount > 1 && de(re.pipes, L) !== -1) && !Le && (c("false write response, pause", re.awaitDrain), re.awaitDrain++), ee.pause());
    }
    function Oe(y) {
      c("onerror", y), j(), L.removeListener("error", Oe), t(L, "error") === 0 && Z(L, y);
    }
    te(L, "error", Oe);
    function S() {
      L.removeListener("finish", U), j();
    }
    L.once("close", S);
    function U() {
      c("onfinish"), L.removeListener("close", S), j();
    }
    L.once("finish", U);
    function j() {
      c("unpipe"), ee.unpipe(L);
    }
    return L.emit("pipe", ee), re.flowing || (c("pipe resume"), ee.resume()), L;
  };
  function P(L) {
    return function() {
      var ee = L._readableState;
      c("pipeOnDrain", ee.awaitDrain), ee.awaitDrain && ee.awaitDrain--, ee.awaitDrain === 0 && t(L, "data") && (ee.flowing = !0, V(L));
    };
  }
  A.prototype.unpipe = function(L) {
    var $ = this._readableState, ee = {
      hasUnpiped: !1
    };
    if ($.pipesCount === 0)
      return this;
    if ($.pipesCount === 1)
      return L && L !== $.pipes ? this : (L || (L = $.pipes), $.pipes = null, $.pipesCount = 0, $.flowing = !1, L && L.emit("unpipe", this, ee), this);
    if (!L) {
      var re = $.pipes, ae = $.pipesCount;
      $.pipes = null, $.pipesCount = 0, $.flowing = !1;
      for (var me = 0; me < ae; me++)
        re[me].emit("unpipe", this, {
          hasUnpiped: !1
        });
      return this;
    }
    var ge = de($.pipes, L);
    return ge === -1 ? this : ($.pipes.splice(ge, 1), $.pipesCount -= 1, $.pipesCount === 1 && ($.pipes = $.pipes[0]), L.emit("unpipe", this, ee), this);
  }, A.prototype.on = function(L, $) {
    var ee = r.prototype.on.call(this, L, $), re = this._readableState;
    return L === "data" ? (re.readableListening = this.listenerCount("readable") > 0, re.flowing !== !1 && this.resume()) : L === "readable" && !re.endEmitted && !re.readableListening && (re.readableListening = re.needReadable = !0, re.flowing = !1, re.emittedReadable = !1, c("on readable", re.length, re.reading), re.length ? m(this) : re.reading || process.nextTick(H, this)), ee;
  }, A.prototype.addListener = A.prototype.on, A.prototype.removeListener = function(L, $) {
    var ee = r.prototype.removeListener.call(this, L, $);
    return L === "readable" && process.nextTick(p, this), ee;
  }, A.prototype.removeAllListeners = function(L) {
    var $ = r.prototype.removeAllListeners.apply(this, arguments);
    return (L === "readable" || L === void 0) && process.nextTick(p, this), $;
  };
  function p(L) {
    var $ = L._readableState;
    $.readableListening = L.listenerCount("readable") > 0, $.resumeScheduled && !$.paused ? $.flowing = !0 : L.listenerCount("data") > 0 && L.resume();
  }
  function H(L) {
    c("readable nexttick read 0"), L.read(0);
  }
  A.prototype.resume = function() {
    var L = this._readableState;
    return L.flowing || (c("resume"), L.flowing = !L.readableListening, oe(this, L)), L.paused = !1, this;
  };
  function oe(L, $) {
    $.resumeScheduled || ($.resumeScheduled = !0, process.nextTick(ne, L, $));
  }
  function ne(L, $) {
    c("resume", $.reading), $.reading || L.read(0), $.resumeScheduled = !1, L.emit("resume"), V(L), $.flowing && !$.reading && L.read(0);
  }
  A.prototype.pause = function() {
    return c("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== !1 && (c("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;
  };
  function V(L) {
    var $ = L._readableState;
    for (c("flow", $.flowing); $.flowing && L.read() !== null; )
      ;
  }
  A.prototype.wrap = function(L) {
    var $ = this, ee = this._readableState, re = !1;
    L.on("end", function() {
      if (c("wrapped end"), ee.decoder && !ee.ended) {
        var ge = ee.decoder.end();
        ge && ge.length && $.push(ge);
      }
      $.push(null);
    }), L.on("data", function(ge) {
      if (c("wrapped data"), ee.decoder && (ge = ee.decoder.write(ge)), !(ee.objectMode && ge == null) && !(!ee.objectMode && (!ge || !ge.length))) {
        var Re = $.push(ge);
        Re || (re = !0, L.pause());
      }
    });
    for (var ae in L)
      this[ae] === void 0 && typeof L[ae] == "function" && (this[ae] = function(Re) {
        return function() {
          return L[Re].apply(L, arguments);
        };
      }(ae));
    for (var me = 0; me < z.length; me++)
      L.on(z[me], this.emit.bind(this, z[me]));
    return this._read = function(ge) {
      c("wrapped _read", ge), re && (re = !1, L.resume());
    }, this;
  }, typeof Symbol == "function" && (A.prototype[Symbol.asyncIterator] = function() {
    return F === void 0 && (F = Cm()), F(this);
  }), Object.defineProperty(A.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.highWaterMark;
    }
  }), Object.defineProperty(A.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState && this._readableState.buffer;
    }
  }), Object.defineProperty(A.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.flowing;
    },
    set: function($) {
      this._readableState && (this._readableState.flowing = $);
    }
  }), A._fromList = Y, Object.defineProperty(A.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.length;
    }
  });
  function Y(L, $) {
    if ($.length === 0)
      return null;
    var ee;
    return $.objectMode ? ee = $.buffer.shift() : !L || L >= $.length ? ($.decoder ? ee = $.buffer.join("") : $.buffer.length === 1 ? ee = $.buffer.first() : ee = $.buffer.concat($.length), $.buffer.clear()) : ee = $.buffer.consume(L, $.decoder), ee;
  }
  function Q(L) {
    var $ = L._readableState;
    c("endReadable", $.endEmitted), $.endEmitted || ($.ended = !0, process.nextTick(ie, $, L));
  }
  function ie(L, $) {
    if (c("endReadableNT", L.endEmitted, L.length), !L.endEmitted && L.length === 0 && (L.endEmitted = !0, $.readable = !1, $.emit("end"), L.autoDestroy)) {
      var ee = $._writableState;
      (!ee || ee.autoDestroy && ee.finished) && $.destroy();
    }
  }
  typeof Symbol == "function" && (A.from = function(L, $) {
    return X === void 0 && (X = Hm()), X(A, L, $);
  });
  function de(L, $) {
    for (var ee = 0, re = L.length; ee < re; ee++)
      if (L[ee] === $)
        return ee;
    return -1;
  }
  return Oc;
}
var Wp = xn, Ya = Ti.codes, Lm = Ya.ERR_METHOD_NOT_IMPLEMENTED, Dm = Ya.ERR_MULTIPLE_CALLBACK, $m = Ya.ERR_TRANSFORM_ALREADY_TRANSFORMING, Fm = Ya.ERR_TRANSFORM_WITH_LENGTH_0, Za = _o();
Mt(xn, Za);
function Km(e, t) {
  var r = this._transformState;
  r.transforming = !1;
  var n = r.writecb;
  if (n === null)
    return this.emit("error", new Dm());
  r.writechunk = null, r.writecb = null, t != null && this.push(t), n(e);
  var i = this._readableState;
  i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
}
function xn(e) {
  if (!(this instanceof xn))
    return new xn(e);
  Za.call(this, e), this._transformState = {
    afterTransform: Km.bind(this),
    needTransform: !1,
    transforming: !1,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && (typeof e.transform == "function" && (this._transform = e.transform), typeof e.flush == "function" && (this._flush = e.flush)), this.on("prefinish", Gm);
}
function Gm() {
  var e = this;
  typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(t, r) {
    D0(e, t, r);
  }) : D0(this, null, null);
}
xn.prototype.push = function(e, t) {
  return this._transformState.needTransform = !1, Za.prototype.push.call(this, e, t);
};
xn.prototype._transform = function(e, t, r) {
  r(new Lm("_transform()"));
};
xn.prototype._write = function(e, t, r) {
  var n = this._transformState;
  if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
    var i = this._readableState;
    (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
  }
};
xn.prototype._read = function(e) {
  var t = this._transformState;
  t.writechunk !== null && !t.transforming ? (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform)) : t.needTransform = !0;
};
xn.prototype._destroy = function(e, t) {
  Za.prototype._destroy.call(this, e, function(r) {
    t(r);
  });
};
function D0(e, t, r) {
  if (t)
    return e.emit("error", t);
  if (r != null && e.push(r), e._writableState.length)
    throw new Fm();
  if (e._transformState.transforming)
    throw new $m();
  return e.push(null);
}
var Vm = as, jp = Wp;
Mt(as, jp);
function as(e) {
  if (!(this instanceof as))
    return new as(e);
  jp.call(this, e);
}
as.prototype._transform = function(e, t, r) {
  r(null, e);
};
var Bc;
function qm(e) {
  var t = !1;
  return function() {
    t || (t = !0, e.apply(void 0, arguments));
  };
}
var zp = Ti.codes, Wm = zp.ERR_MISSING_ARGS, jm = zp.ERR_STREAM_DESTROYED;
function $0(e) {
  if (e)
    throw e;
}
function zm(e) {
  return e.setHeader && typeof e.abort == "function";
}
function Xm(e, t, r, n) {
  n = qm(n);
  var i = !1;
  e.on("close", function() {
    i = !0;
  }), Bc === void 0 && (Bc = wh), Bc(e, {
    readable: t,
    writable: r
  }, function(s) {
    if (s)
      return n(s);
    i = !0, n();
  });
  var o = !1;
  return function(s) {
    if (!i && !o) {
      if (o = !0, zm(e))
        return e.abort();
      if (typeof e.destroy == "function")
        return e.destroy();
      n(s || new jm("pipe"));
    }
  };
}
function F0(e) {
  e();
}
function Ym(e, t) {
  return e.pipe(t);
}
function Zm(e) {
  return !e.length || typeof e[e.length - 1] != "function" ? $0 : e.pop();
}
function Jm() {
  for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
    t[r] = arguments[r];
  var n = Zm(t);
  if (Array.isArray(t[0]) && (t = t[0]), t.length < 2)
    throw new Wm("streams");
  var i, o = t.map(function(s, a) {
    var c = a < t.length - 1, d = a > 0;
    return Xm(s, c, d, function(w) {
      i || (i = w), w && o.forEach(F0), !c && (o.forEach(F0), n(i));
    });
  });
  return t.reduce(Ym);
}
var Qm = Jm;
(function(e, t) {
  t = e.exports = qp(), t.Stream = t, t.Readable = t, t.Writable = Gp(), t.Duplex = _o(), t.Transform = Wp, t.PassThrough = Vm, t.finished = wh, t.pipeline = Qm;
})(bu, bu.exports);
var Xp = bu.exports, Ea = Ce.Buffer, Yp = Xp.Transform, e2 = Mt;
function t2(e, t) {
  if (!Ea.isBuffer(e) && typeof e != "string")
    throw new TypeError(t + " must be a string or a buffer");
}
function ei(e) {
  Yp.call(this), this._block = Ea.allocUnsafe(e), this._blockSize = e, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = !1;
}
e2(ei, Yp);
ei.prototype._transform = function(e, t, r) {
  var n = null;
  try {
    this.update(e, t);
  } catch (i) {
    n = i;
  }
  r(n);
};
ei.prototype._flush = function(e) {
  var t = null;
  try {
    this.push(this.digest());
  } catch (r) {
    t = r;
  }
  e(t);
};
ei.prototype.update = function(e, t) {
  if (t2(e, "Data"), this._finalized)
    throw new Error("Digest already called");
  Ea.isBuffer(e) || (e = Ea.from(e, t));
  for (var r = this._block, n = 0; this._blockOffset + e.length - n >= this._blockSize; ) {
    for (var i = this._blockOffset; i < this._blockSize; )
      r[i++] = e[n++];
    this._update(), this._blockOffset = 0;
  }
  for (; n < e.length; )
    r[this._blockOffset++] = e[n++];
  for (var o = 0, s = e.length * 8; s > 0; ++o)
    this._length[o] += s, s = this._length[o] / 4294967296 | 0, s > 0 && (this._length[o] -= 4294967296 * s);
  return this;
};
ei.prototype._update = function() {
  throw new Error("_update is not implemented");
};
ei.prototype.digest = function(e) {
  if (this._finalized)
    throw new Error("Digest already called");
  this._finalized = !0;
  var t = this._digest();
  e !== void 0 && (t = t.toString(e)), this._block.fill(0), this._blockOffset = 0;
  for (var r = 0; r < 4; ++r)
    this._length[r] = 0;
  return t;
};
ei.prototype._digest = function() {
  throw new Error("_digest is not implemented");
};
var Zp = ei, r2 = Mt, Jp = Zp, n2 = Ce.Buffer, i2 = new Array(16);
function Ja() {
  Jp.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
}
r2(Ja, Jp);
Ja.prototype._update = function() {
  for (var e = i2, t = 0; t < 16; ++t)
    e[t] = this._block.readInt32LE(t * 4);
  var r = this._a, n = this._b, i = this._c, o = this._d;
  r = Ft(r, n, i, o, e[0], 3614090360, 7), o = Ft(o, r, n, i, e[1], 3905402710, 12), i = Ft(i, o, r, n, e[2], 606105819, 17), n = Ft(n, i, o, r, e[3], 3250441966, 22), r = Ft(r, n, i, o, e[4], 4118548399, 7), o = Ft(o, r, n, i, e[5], 1200080426, 12), i = Ft(i, o, r, n, e[6], 2821735955, 17), n = Ft(n, i, o, r, e[7], 4249261313, 22), r = Ft(r, n, i, o, e[8], 1770035416, 7), o = Ft(o, r, n, i, e[9], 2336552879, 12), i = Ft(i, o, r, n, e[10], 4294925233, 17), n = Ft(n, i, o, r, e[11], 2304563134, 22), r = Ft(r, n, i, o, e[12], 1804603682, 7), o = Ft(o, r, n, i, e[13], 4254626195, 12), i = Ft(i, o, r, n, e[14], 2792965006, 17), n = Ft(n, i, o, r, e[15], 1236535329, 22), r = Kt(r, n, i, o, e[1], 4129170786, 5), o = Kt(o, r, n, i, e[6], 3225465664, 9), i = Kt(i, o, r, n, e[11], 643717713, 14), n = Kt(n, i, o, r, e[0], 3921069994, 20), r = Kt(r, n, i, o, e[5], 3593408605, 5), o = Kt(o, r, n, i, e[10], 38016083, 9), i = Kt(i, o, r, n, e[15], 3634488961, 14), n = Kt(n, i, o, r, e[4], 3889429448, 20), r = Kt(r, n, i, o, e[9], 568446438, 5), o = Kt(o, r, n, i, e[14], 3275163606, 9), i = Kt(i, o, r, n, e[3], 4107603335, 14), n = Kt(n, i, o, r, e[8], 1163531501, 20), r = Kt(r, n, i, o, e[13], 2850285829, 5), o = Kt(o, r, n, i, e[2], 4243563512, 9), i = Kt(i, o, r, n, e[7], 1735328473, 14), n = Kt(n, i, o, r, e[12], 2368359562, 20), r = Gt(r, n, i, o, e[5], 4294588738, 4), o = Gt(o, r, n, i, e[8], 2272392833, 11), i = Gt(i, o, r, n, e[11], 1839030562, 16), n = Gt(n, i, o, r, e[14], 4259657740, 23), r = Gt(r, n, i, o, e[1], 2763975236, 4), o = Gt(o, r, n, i, e[4], 1272893353, 11), i = Gt(i, o, r, n, e[7], 4139469664, 16), n = Gt(n, i, o, r, e[10], 3200236656, 23), r = Gt(r, n, i, o, e[13], 681279174, 4), o = Gt(o, r, n, i, e[0], 3936430074, 11), i = Gt(i, o, r, n, e[3], 3572445317, 16), n = Gt(n, i, o, r, e[6], 76029189, 23), r = Gt(r, n, i, o, e[9], 3654602809, 4), o = Gt(o, r, n, i, e[12], 3873151461, 11), i = Gt(i, o, r, n, e[15], 530742520, 16), n = Gt(n, i, o, r, e[2], 3299628645, 23), r = Vt(r, n, i, o, e[0], 4096336452, 6), o = Vt(o, r, n, i, e[7], 1126891415, 10), i = Vt(i, o, r, n, e[14], 2878612391, 15), n = Vt(n, i, o, r, e[5], 4237533241, 21), r = Vt(r, n, i, o, e[12], 1700485571, 6), o = Vt(o, r, n, i, e[3], 2399980690, 10), i = Vt(i, o, r, n, e[10], 4293915773, 15), n = Vt(n, i, o, r, e[1], 2240044497, 21), r = Vt(r, n, i, o, e[8], 1873313359, 6), o = Vt(o, r, n, i, e[15], 4264355552, 10), i = Vt(i, o, r, n, e[6], 2734768916, 15), n = Vt(n, i, o, r, e[13], 1309151649, 21), r = Vt(r, n, i, o, e[4], 4149444226, 6), o = Vt(o, r, n, i, e[11], 3174756917, 10), i = Vt(i, o, r, n, e[2], 718787259, 15), n = Vt(n, i, o, r, e[9], 3951481745, 21), this._a = this._a + r | 0, this._b = this._b + n | 0, this._c = this._c + i | 0, this._d = this._d + o | 0;
};
Ja.prototype._digest = function() {
  this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
  var e = n2.allocUnsafe(16);
  return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), e;
};
function Qa(e, t) {
  return e << t | e >>> 32 - t;
}
function Ft(e, t, r, n, i, o, s) {
  return Qa(e + (t & r | ~t & n) + i + o | 0, s) + t | 0;
}
function Kt(e, t, r, n, i, o, s) {
  return Qa(e + (t & n | r & ~n) + i + o | 0, s) + t | 0;
}
function Gt(e, t, r, n, i, o, s) {
  return Qa(e + (t ^ r ^ n) + i + o | 0, s) + t | 0;
}
function Vt(e, t, r, n, i, o, s) {
  return Qa(e + (r ^ (t | ~n)) + i + o | 0, s) + t | 0;
}
var Qp = Ja, Pc = Qn.Buffer, o2 = Mt, e1 = Zp, s2 = new Array(16), Uo = [
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8,
  3,
  10,
  14,
  4,
  9,
  15,
  8,
  1,
  2,
  7,
  0,
  6,
  13,
  11,
  5,
  12,
  1,
  9,
  11,
  10,
  0,
  8,
  12,
  4,
  13,
  3,
  7,
  15,
  14,
  5,
  6,
  2,
  4,
  0,
  5,
  9,
  7,
  12,
  2,
  10,
  14,
  1,
  3,
  8,
  11,
  6,
  15,
  13
], Co = [
  5,
  14,
  7,
  0,
  9,
  2,
  11,
  4,
  13,
  6,
  15,
  8,
  1,
  10,
  3,
  12,
  6,
  11,
  3,
  7,
  0,
  13,
  5,
  10,
  14,
  15,
  8,
  12,
  4,
  9,
  1,
  2,
  15,
  5,
  1,
  3,
  7,
  14,
  6,
  9,
  11,
  8,
  12,
  2,
  10,
  0,
  4,
  13,
  8,
  6,
  4,
  1,
  3,
  11,
  15,
  0,
  5,
  12,
  2,
  13,
  9,
  7,
  10,
  14,
  12,
  15,
  10,
  4,
  1,
  5,
  8,
  7,
  6,
  2,
  13,
  14,
  0,
  3,
  9,
  11
], Ho = [
  11,
  14,
  15,
  12,
  5,
  8,
  7,
  9,
  11,
  13,
  14,
  15,
  6,
  7,
  9,
  8,
  7,
  6,
  8,
  13,
  11,
  9,
  7,
  15,
  7,
  12,
  15,
  9,
  11,
  7,
  13,
  12,
  11,
  13,
  6,
  7,
  14,
  9,
  13,
  15,
  14,
  8,
  13,
  6,
  5,
  12,
  7,
  5,
  11,
  12,
  14,
  15,
  14,
  15,
  9,
  8,
  9,
  14,
  5,
  6,
  8,
  6,
  5,
  12,
  9,
  15,
  5,
  11,
  6,
  8,
  13,
  12,
  5,
  12,
  13,
  14,
  11,
  8,
  5,
  6
], Lo = [
  8,
  9,
  9,
  11,
  13,
  15,
  15,
  5,
  7,
  7,
  8,
  11,
  14,
  14,
  12,
  6,
  9,
  13,
  15,
  7,
  12,
  8,
  9,
  11,
  7,
  7,
  12,
  7,
  6,
  15,
  13,
  11,
  9,
  7,
  15,
  11,
  8,
  6,
  6,
  14,
  12,
  13,
  5,
  14,
  13,
  13,
  7,
  5,
  15,
  5,
  8,
  11,
  14,
  14,
  6,
  14,
  6,
  9,
  12,
  9,
  12,
  5,
  15,
  8,
  8,
  5,
  12,
  9,
  12,
  5,
  14,
  6,
  8,
  13,
  6,
  5,
  15,
  13,
  11,
  11
], Do = [0, 1518500249, 1859775393, 2400959708, 2840853838], $o = [1352829926, 1548603684, 1836072691, 2053994217, 0];
function ef() {
  e1.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
}
o2(ef, e1);
ef.prototype._update = function() {
  for (var e = s2, t = 0; t < 16; ++t)
    e[t] = this._block.readInt32LE(t * 4);
  for (var r = this._a | 0, n = this._b | 0, i = this._c | 0, o = this._d | 0, s = this._e | 0, a = this._a | 0, c = this._b | 0, d = this._c | 0, w = this._d | 0, g = this._e | 0, O = 0; O < 80; O += 1) {
    var N, B;
    O < 16 ? (N = K0(r, n, i, o, s, e[Uo[O]], Do[0], Ho[O]), B = W0(a, c, d, w, g, e[Co[O]], $o[0], Lo[O])) : O < 32 ? (N = G0(r, n, i, o, s, e[Uo[O]], Do[1], Ho[O]), B = q0(a, c, d, w, g, e[Co[O]], $o[1], Lo[O])) : O < 48 ? (N = V0(r, n, i, o, s, e[Uo[O]], Do[2], Ho[O]), B = V0(a, c, d, w, g, e[Co[O]], $o[2], Lo[O])) : O < 64 ? (N = q0(r, n, i, o, s, e[Uo[O]], Do[3], Ho[O]), B = G0(a, c, d, w, g, e[Co[O]], $o[3], Lo[O])) : (N = W0(r, n, i, o, s, e[Uo[O]], Do[4], Ho[O]), B = K0(a, c, d, w, g, e[Co[O]], $o[4], Lo[O])), r = s, s = o, o = Si(i, 10), i = n, n = N, a = g, g = w, w = Si(d, 10), d = c, c = B;
  }
  var I = this._b + i + w | 0;
  this._b = this._c + o + g | 0, this._c = this._d + s + a | 0, this._d = this._e + r + c | 0, this._e = this._a + n + d | 0, this._a = I;
};
ef.prototype._digest = function() {
  this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
  var e = Pc.alloc ? Pc.alloc(20) : new Pc(20);
  return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), e.writeInt32LE(this._e, 16), e;
};
function Si(e, t) {
  return e << t | e >>> 32 - t;
}
function K0(e, t, r, n, i, o, s, a) {
  return Si(e + (t ^ r ^ n) + o + s | 0, a) + i | 0;
}
function G0(e, t, r, n, i, o, s, a) {
  return Si(e + (t & r | ~t & n) + o + s | 0, a) + i | 0;
}
function V0(e, t, r, n, i, o, s, a) {
  return Si(e + ((t | ~r) ^ n) + o + s | 0, a) + i | 0;
}
function q0(e, t, r, n, i, o, s, a) {
  return Si(e + (t & n | r & ~n) + o + s | 0, a) + i | 0;
}
function W0(e, t, r, n, i, o, s, a) {
  return Si(e + (t ^ (r | ~n)) + o + s | 0, a) + i | 0;
}
var vh = ef, t1 = { exports: {} }, r1 = Ce.Buffer;
function tf(e, t) {
  this._block = r1.alloc(e), this._finalSize = t, this._blockSize = e, this._len = 0;
}
tf.prototype.update = function(e, t) {
  typeof e == "string" && (t = t || "utf8", e = r1.from(e, t));
  for (var r = this._block, n = this._blockSize, i = e.length, o = this._len, s = 0; s < i; ) {
    for (var a = o % n, c = Math.min(i - s, n - a), d = 0; d < c; d++)
      r[a + d] = e[s + d];
    o += c, s += c, o % n === 0 && this._update(r);
  }
  return this._len += i, this;
};
tf.prototype.digest = function(e) {
  var t = this._len % this._blockSize;
  this._block[t] = 128, this._block.fill(0, t + 1), t >= this._finalSize && (this._update(this._block), this._block.fill(0));
  var r = this._len * 8;
  if (r <= 4294967295)
    this._block.writeUInt32BE(r, this._blockSize - 4);
  else {
    var n = (r & 4294967295) >>> 0, i = (r - n) / 4294967296;
    this._block.writeUInt32BE(i, this._blockSize - 8), this._block.writeUInt32BE(n, this._blockSize - 4);
  }
  this._update(this._block);
  var o = this._hash();
  return e ? o.toString(e) : o;
};
tf.prototype._update = function() {
  throw new Error("_update must be implemented by subclass");
};
var Po = tf, a2 = Mt, n1 = Po, f2 = Ce.Buffer, c2 = [
  1518500249,
  1859775393,
  -1894007588,
  -899497514
], u2 = new Array(80);
function ms() {
  this.init(), this._w = u2, n1.call(this, 64, 56);
}
a2(ms, n1);
ms.prototype.init = function() {
  return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
};
function h2(e) {
  return e << 5 | e >>> 27;
}
function l2(e) {
  return e << 30 | e >>> 2;
}
function d2(e, t, r, n) {
  return e === 0 ? t & r | ~t & n : e === 2 ? t & r | t & n | r & n : t ^ r ^ n;
}
ms.prototype._update = function(e) {
  for (var t = this._w, r = this._a | 0, n = this._b | 0, i = this._c | 0, o = this._d | 0, s = this._e | 0, a = 0; a < 16; ++a)
    t[a] = e.readInt32BE(a * 4);
  for (; a < 80; ++a)
    t[a] = t[a - 3] ^ t[a - 8] ^ t[a - 14] ^ t[a - 16];
  for (var c = 0; c < 80; ++c) {
    var d = ~~(c / 20), w = h2(r) + d2(d, n, i, o) + s + t[c] + c2[d] | 0;
    s = o, o = i, i = l2(n), n = r, r = w;
  }
  this._a = r + this._a | 0, this._b = n + this._b | 0, this._c = i + this._c | 0, this._d = o + this._d | 0, this._e = s + this._e | 0;
};
ms.prototype._hash = function() {
  var e = f2.allocUnsafe(20);
  return e.writeInt32BE(this._a | 0, 0), e.writeInt32BE(this._b | 0, 4), e.writeInt32BE(this._c | 0, 8), e.writeInt32BE(this._d | 0, 12), e.writeInt32BE(this._e | 0, 16), e;
};
var p2 = ms, g2 = Mt, i1 = Po, y2 = Ce.Buffer, w2 = [
  1518500249,
  1859775393,
  -1894007588,
  -899497514
], v2 = new Array(80);
function Es() {
  this.init(), this._w = v2, i1.call(this, 64, 56);
}
g2(Es, i1);
Es.prototype.init = function() {
  return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
};
function b2(e) {
  return e << 1 | e >>> 31;
}
function m2(e) {
  return e << 5 | e >>> 27;
}
function E2(e) {
  return e << 30 | e >>> 2;
}
function _2(e, t, r, n) {
  return e === 0 ? t & r | ~t & n : e === 2 ? t & r | t & n | r & n : t ^ r ^ n;
}
Es.prototype._update = function(e) {
  for (var t = this._w, r = this._a | 0, n = this._b | 0, i = this._c | 0, o = this._d | 0, s = this._e | 0, a = 0; a < 16; ++a)
    t[a] = e.readInt32BE(a * 4);
  for (; a < 80; ++a)
    t[a] = b2(t[a - 3] ^ t[a - 8] ^ t[a - 14] ^ t[a - 16]);
  for (var c = 0; c < 80; ++c) {
    var d = ~~(c / 20), w = m2(r) + _2(d, n, i, o) + s + t[c] + w2[d] | 0;
    s = o, o = i, i = E2(n), n = r, r = w;
  }
  this._a = r + this._a | 0, this._b = n + this._b | 0, this._c = i + this._c | 0, this._d = o + this._d | 0, this._e = s + this._e | 0;
};
Es.prototype._hash = function() {
  var e = y2.allocUnsafe(20);
  return e.writeInt32BE(this._a | 0, 0), e.writeInt32BE(this._b | 0, 4), e.writeInt32BE(this._c | 0, 8), e.writeInt32BE(this._d | 0, 12), e.writeInt32BE(this._e | 0, 16), e;
};
var S2 = Es, x2 = Mt, o1 = Po, I2 = Ce.Buffer, T2 = [
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
], A2 = new Array(64);
function _s() {
  this.init(), this._w = A2, o1.call(this, 64, 56);
}
x2(_s, o1);
_s.prototype.init = function() {
  return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
};
function O2(e, t, r) {
  return r ^ e & (t ^ r);
}
function B2(e, t, r) {
  return e & t | r & (e | t);
}
function P2(e) {
  return (e >>> 2 | e << 30) ^ (e >>> 13 | e << 19) ^ (e >>> 22 | e << 10);
}
function N2(e) {
  return (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
}
function R2(e) {
  return (e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3;
}
function k2(e) {
  return (e >>> 17 | e << 15) ^ (e >>> 19 | e << 13) ^ e >>> 10;
}
_s.prototype._update = function(e) {
  for (var t = this._w, r = this._a | 0, n = this._b | 0, i = this._c | 0, o = this._d | 0, s = this._e | 0, a = this._f | 0, c = this._g | 0, d = this._h | 0, w = 0; w < 16; ++w)
    t[w] = e.readInt32BE(w * 4);
  for (; w < 64; ++w)
    t[w] = k2(t[w - 2]) + t[w - 7] + R2(t[w - 15]) + t[w - 16] | 0;
  for (var g = 0; g < 64; ++g) {
    var O = d + N2(s) + O2(s, a, c) + T2[g] + t[g] | 0, N = P2(r) + B2(r, n, i) | 0;
    d = c, c = a, a = s, s = o + O | 0, o = i, i = n, n = r, r = O + N | 0;
  }
  this._a = r + this._a | 0, this._b = n + this._b | 0, this._c = i + this._c | 0, this._d = o + this._d | 0, this._e = s + this._e | 0, this._f = a + this._f | 0, this._g = c + this._g | 0, this._h = d + this._h | 0;
};
_s.prototype._hash = function() {
  var e = I2.allocUnsafe(32);
  return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e.writeInt32BE(this._h, 28), e;
};
var s1 = _s, M2 = Mt, U2 = s1, C2 = Po, H2 = Ce.Buffer, L2 = new Array(64);
function rf() {
  this.init(), this._w = L2, C2.call(this, 64, 56);
}
M2(rf, U2);
rf.prototype.init = function() {
  return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
};
rf.prototype._hash = function() {
  var e = H2.allocUnsafe(28);
  return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e;
};
var D2 = rf, $2 = Mt, a1 = Po, F2 = Ce.Buffer, j0 = [
  1116352408,
  3609767458,
  1899447441,
  602891725,
  3049323471,
  3964484399,
  3921009573,
  2173295548,
  961987163,
  4081628472,
  1508970993,
  3053834265,
  2453635748,
  2937671579,
  2870763221,
  3664609560,
  3624381080,
  2734883394,
  310598401,
  1164996542,
  607225278,
  1323610764,
  1426881987,
  3590304994,
  1925078388,
  4068182383,
  2162078206,
  991336113,
  2614888103,
  633803317,
  3248222580,
  3479774868,
  3835390401,
  2666613458,
  4022224774,
  944711139,
  264347078,
  2341262773,
  604807628,
  2007800933,
  770255983,
  1495990901,
  1249150122,
  1856431235,
  1555081692,
  3175218132,
  1996064986,
  2198950837,
  2554220882,
  3999719339,
  2821834349,
  766784016,
  2952996808,
  2566594879,
  3210313671,
  3203337956,
  3336571891,
  1034457026,
  3584528711,
  2466948901,
  113926993,
  3758326383,
  338241895,
  168717936,
  666307205,
  1188179964,
  773529912,
  1546045734,
  1294757372,
  1522805485,
  1396182291,
  2643833823,
  1695183700,
  2343527390,
  1986661051,
  1014477480,
  2177026350,
  1206759142,
  2456956037,
  344077627,
  2730485921,
  1290863460,
  2820302411,
  3158454273,
  3259730800,
  3505952657,
  3345764771,
  106217008,
  3516065817,
  3606008344,
  3600352804,
  1432725776,
  4094571909,
  1467031594,
  275423344,
  851169720,
  430227734,
  3100823752,
  506948616,
  1363258195,
  659060556,
  3750685593,
  883997877,
  3785050280,
  958139571,
  3318307427,
  1322822218,
  3812723403,
  1537002063,
  2003034995,
  1747873779,
  3602036899,
  1955562222,
  1575990012,
  2024104815,
  1125592928,
  2227730452,
  2716904306,
  2361852424,
  442776044,
  2428436474,
  593698344,
  2756734187,
  3733110249,
  3204031479,
  2999351573,
  3329325298,
  3815920427,
  3391569614,
  3928383900,
  3515267271,
  566280711,
  3940187606,
  3454069534,
  4118630271,
  4000239992,
  116418474,
  1914138554,
  174292421,
  2731055270,
  289380356,
  3203993006,
  460393269,
  320620315,
  685471733,
  587496836,
  852142971,
  1086792851,
  1017036298,
  365543100,
  1126000580,
  2618297676,
  1288033470,
  3409855158,
  1501505948,
  4234509866,
  1607167915,
  987167468,
  1816402316,
  1246189591
], K2 = new Array(160);
function Ss() {
  this.init(), this._w = K2, a1.call(this, 128, 112);
}
$2(Ss, a1);
Ss.prototype.init = function() {
  return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
};
function z0(e, t, r) {
  return r ^ e & (t ^ r);
}
function X0(e, t, r) {
  return e & t | r & (e | t);
}
function Y0(e, t) {
  return (e >>> 28 | t << 4) ^ (t >>> 2 | e << 30) ^ (t >>> 7 | e << 25);
}
function Z0(e, t) {
  return (e >>> 14 | t << 18) ^ (e >>> 18 | t << 14) ^ (t >>> 9 | e << 23);
}
function G2(e, t) {
  return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ e >>> 7;
}
function V2(e, t) {
  return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ (e >>> 7 | t << 25);
}
function q2(e, t) {
  return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ e >>> 6;
}
function W2(e, t) {
  return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ (e >>> 6 | t << 26);
}
function Bt(e, t) {
  return e >>> 0 < t >>> 0 ? 1 : 0;
}
Ss.prototype._update = function(e) {
  for (var t = this._w, r = this._ah | 0, n = this._bh | 0, i = this._ch | 0, o = this._dh | 0, s = this._eh | 0, a = this._fh | 0, c = this._gh | 0, d = this._hh | 0, w = this._al | 0, g = this._bl | 0, O = this._cl | 0, N = this._dl | 0, B = this._el | 0, I = this._fl | 0, M = this._gl | 0, T = this._hl | 0, k = 0; k < 32; k += 2)
    t[k] = e.readInt32BE(k * 4), t[k + 1] = e.readInt32BE(k * 4 + 4);
  for (; k < 160; k += 2) {
    var F = t[k - 30], X = t[k - 15 * 2 + 1], Z = G2(F, X), z = V2(X, F);
    F = t[k - 2 * 2], X = t[k - 2 * 2 + 1];
    var te = q2(F, X), b = W2(X, F), A = t[k - 7 * 2], C = t[k - 7 * 2 + 1], q = t[k - 16 * 2], W = t[k - 16 * 2 + 1], E = z + C | 0, f = Z + A + Bt(E, z) | 0;
    E = E + b | 0, f = f + te + Bt(E, b) | 0, E = E + W | 0, f = f + q + Bt(E, W) | 0, t[k] = f, t[k + 1] = E;
  }
  for (var h = 0; h < 160; h += 2) {
    f = t[h], E = t[h + 1];
    var v = X0(r, n, i), m = X0(w, g, O), _ = Y0(r, w), R = Y0(w, r), G = Z0(s, B), P = Z0(B, s), p = j0[h], H = j0[h + 1], oe = z0(s, a, c), ne = z0(B, I, M), V = T + P | 0, Y = d + G + Bt(V, T) | 0;
    V = V + ne | 0, Y = Y + oe + Bt(V, ne) | 0, V = V + H | 0, Y = Y + p + Bt(V, H) | 0, V = V + E | 0, Y = Y + f + Bt(V, E) | 0;
    var Q = R + m | 0, ie = _ + v + Bt(Q, R) | 0;
    d = c, T = M, c = a, M = I, a = s, I = B, B = N + V | 0, s = o + Y + Bt(B, N) | 0, o = i, N = O, i = n, O = g, n = r, g = w, w = V + Q | 0, r = Y + ie + Bt(w, V) | 0;
  }
  this._al = this._al + w | 0, this._bl = this._bl + g | 0, this._cl = this._cl + O | 0, this._dl = this._dl + N | 0, this._el = this._el + B | 0, this._fl = this._fl + I | 0, this._gl = this._gl + M | 0, this._hl = this._hl + T | 0, this._ah = this._ah + r + Bt(this._al, w) | 0, this._bh = this._bh + n + Bt(this._bl, g) | 0, this._ch = this._ch + i + Bt(this._cl, O) | 0, this._dh = this._dh + o + Bt(this._dl, N) | 0, this._eh = this._eh + s + Bt(this._el, B) | 0, this._fh = this._fh + a + Bt(this._fl, I) | 0, this._gh = this._gh + c + Bt(this._gl, M) | 0, this._hh = this._hh + d + Bt(this._hl, T) | 0;
};
Ss.prototype._hash = function() {
  var e = F2.allocUnsafe(64);
  function t(r, n, i) {
    e.writeInt32BE(r, i), e.writeInt32BE(n, i + 4);
  }
  return t(this._ah, this._al, 0), t(this._bh, this._bl, 8), t(this._ch, this._cl, 16), t(this._dh, this._dl, 24), t(this._eh, this._el, 32), t(this._fh, this._fl, 40), t(this._gh, this._gl, 48), t(this._hh, this._hl, 56), e;
};
var f1 = Ss, j2 = Mt, z2 = f1, X2 = Po, Y2 = Ce.Buffer, Z2 = new Array(160);
function nf() {
  this.init(), this._w = Z2, X2.call(this, 128, 112);
}
j2(nf, z2);
nf.prototype.init = function() {
  return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
};
nf.prototype._hash = function() {
  var e = Y2.allocUnsafe(48);
  function t(r, n, i) {
    e.writeInt32BE(r, i), e.writeInt32BE(n, i + 4);
  }
  return t(this._ah, this._al, 0), t(this._bh, this._bl, 8), t(this._ch, this._cl, 16), t(this._dh, this._dl, 24), t(this._eh, this._el, 32), t(this._fh, this._fl, 40), e;
};
var J2 = nf, Ai = t1.exports = function(t) {
  t = t.toLowerCase();
  var r = Ai[t];
  if (!r)
    throw new Error(t + " is not supported (we accept pull requests)");
  return new r();
};
Ai.sha = p2;
Ai.sha1 = S2;
Ai.sha224 = D2;
Ai.sha256 = s1;
Ai.sha384 = J2;
Ai.sha512 = f1;
var c1 = t1.exports, u1 = Ce.Buffer, h1 = Xp.Transform, Q2 = Jw.StringDecoder, eE = Mt;
function Dr(e) {
  h1.call(this), this.hashMode = typeof e == "string", this.hashMode ? this[e] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
}
eE(Dr, h1);
Dr.prototype.update = function(e, t, r) {
  typeof e == "string" && (e = u1.from(e, t));
  var n = this._update(e);
  return this.hashMode ? this : (r && (n = this._toString(n, r)), n);
};
Dr.prototype.setAutoPadding = function() {
};
Dr.prototype.getAuthTag = function() {
  throw new Error("trying to get auth tag in unsupported state");
};
Dr.prototype.setAuthTag = function() {
  throw new Error("trying to set auth tag in unsupported state");
};
Dr.prototype.setAAD = function() {
  throw new Error("trying to set aad in unsupported state");
};
Dr.prototype._transform = function(e, t, r) {
  var n;
  try {
    this.hashMode ? this._update(e) : this.push(this._update(e));
  } catch (i) {
    n = i;
  } finally {
    r(n);
  }
};
Dr.prototype._flush = function(e) {
  var t;
  try {
    this.push(this.__final());
  } catch (r) {
    t = r;
  }
  e(t);
};
Dr.prototype._finalOrDigest = function(e) {
  var t = this.__final() || u1.alloc(0);
  return e && (t = this._toString(t, e, !0)), t;
};
Dr.prototype._toString = function(e, t, r) {
  if (this._decoder || (this._decoder = new Q2(t), this._encoding = t), this._encoding !== t)
    throw new Error("can't switch encodings");
  var n = this._decoder.write(e);
  return r && (n += this._decoder.end()), n;
};
var bh = Dr, tE = Mt, rE = Qp, nE = vh, iE = c1, l1 = bh;
function of(e) {
  l1.call(this, "digest"), this._hash = e;
}
tE(of, l1);
of.prototype._update = function(e) {
  this._hash.update(e);
};
of.prototype._final = function() {
  return this._hash.digest();
};
var mh = function(t) {
  return t = t.toLowerCase(), t === "md5" ? new rE() : t === "rmd160" || t === "ripemd160" ? new nE() : new of(iE(t));
};
Object.defineProperty(et, "__esModule", { value: !0 });
et.taggedHash = et.hash256 = et.hash160 = et.sha256 = et.sha1 = et.ripemd160 = void 0;
const _a = mh, oE = vh;
function d1(e) {
  try {
    return _a("rmd160").update(e).digest();
  } catch {
    try {
      return _a("ripemd160").update(e).digest();
    } catch {
      return new oE().update(e).digest();
    }
  }
}
et.ripemd160 = d1;
function sE(e) {
  return _a("sha1").update(e).digest();
}
et.sha1 = sE;
function So(e) {
  return _a("sha256").update(e).digest();
}
et.sha256 = So;
function aE(e) {
  return d1(So(e));
}
et.hash160 = aE;
function fE(e) {
  return So(So(e));
}
et.hash256 = fE;
const cE = [
  "BIP0340/challenge",
  "BIP0340/aux",
  "BIP0340/nonce",
  "TapLeaf",
  "TapBranch",
  "TapSighash",
  "TapTweak",
  "KeyAgg list",
  "KeyAgg coefficient"
], uE = Object.fromEntries(
  cE.map((e) => {
    const t = So(Buffer.from(e));
    return [e, Buffer.concat([t, t])];
  })
);
function hE(e, t) {
  return So(Buffer.concat([uE[e], t]));
}
et.taggedHash = hE;
var Ks = Ce.Buffer;
function lE(e) {
  if (e.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), r = 0; r < t.length; r++)
    t[r] = 255;
  for (var n = 0; n < e.length; n++) {
    var i = e.charAt(n), o = i.charCodeAt(0);
    if (t[o] !== 255)
      throw new TypeError(i + " is ambiguous");
    t[o] = n;
  }
  var s = e.length, a = e.charAt(0), c = Math.log(s) / Math.log(256), d = Math.log(256) / Math.log(s);
  function w(N) {
    if ((Array.isArray(N) || N instanceof Uint8Array) && (N = Ks.from(N)), !Ks.isBuffer(N))
      throw new TypeError("Expected Buffer");
    if (N.length === 0)
      return "";
    for (var B = 0, I = 0, M = 0, T = N.length; M !== T && N[M] === 0; )
      M++, B++;
    for (var k = (T - M) * d + 1 >>> 0, F = new Uint8Array(k); M !== T; ) {
      for (var X = N[M], Z = 0, z = k - 1; (X !== 0 || Z < I) && z !== -1; z--, Z++)
        X += 256 * F[z] >>> 0, F[z] = X % s >>> 0, X = X / s >>> 0;
      if (X !== 0)
        throw new Error("Non-zero carry");
      I = Z, M++;
    }
    for (var te = k - I; te !== k && F[te] === 0; )
      te++;
    for (var b = a.repeat(B); te < k; ++te)
      b += e.charAt(F[te]);
    return b;
  }
  function g(N) {
    if (typeof N != "string")
      throw new TypeError("Expected String");
    if (N.length === 0)
      return Ks.alloc(0);
    for (var B = 0, I = 0, M = 0; N[B] === a; )
      I++, B++;
    for (var T = (N.length - B) * c + 1 >>> 0, k = new Uint8Array(T); N[B]; ) {
      var F = t[N.charCodeAt(B)];
      if (F === 255)
        return;
      for (var X = 0, Z = T - 1; (F !== 0 || X < M) && Z !== -1; Z--, X++)
        F += s * k[Z] >>> 0, k[Z] = F % 256 >>> 0, F = F / 256 >>> 0;
      if (F !== 0)
        throw new Error("Non-zero carry");
      M = X, B++;
    }
    for (var z = T - M; z !== T && k[z] === 0; )
      z++;
    var te = Ks.allocUnsafe(I + (T - z));
    te.fill(0, 0, I);
    for (var b = I; z !== T; )
      te[b++] = k[z++];
    return te;
  }
  function O(N) {
    var B = g(N);
    if (B)
      return B;
    throw new Error("Non-base" + s + " character");
  }
  return {
    encode: w,
    decodeUnsafe: g,
    decode: O
  };
}
var dE = lE, pE = dE, gE = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", yE = pE(gE), Nc = yE, wE = Ce.Buffer, vE = function(e) {
  function t(o) {
    var s = e(o);
    return Nc.encode(wE.concat([
      o,
      s
    ], o.length + 4));
  }
  function r(o) {
    var s = o.slice(0, -4), a = o.slice(-4), c = e(s);
    if (!(a[0] ^ c[0] | a[1] ^ c[1] | a[2] ^ c[2] | a[3] ^ c[3]))
      return s;
  }
  function n(o) {
    var s = Nc.decodeUnsafe(o);
    if (s)
      return r(s);
  }
  function i(o) {
    var s = Nc.decode(o), a = r(s);
    if (!a)
      throw new Error("Invalid checksum");
    return a;
  }
  return {
    encode: t,
    decode: i,
    decodeUnsafe: n
  };
}, J0 = mh, bE = vE;
function mE(e) {
  var t = J0("sha256").update(e).digest();
  return J0("sha256").update(t).digest();
}
var Oi = bE(mE);
Object.defineProperty(Xa, "__esModule", { value: !0 });
Xa.p2pkh = void 0;
const Rc = et, EE = kt, io = rr, jt = $t, fn = hr, Q0 = Oi, kn = io.OPS;
function _E(e, t) {
  if (!e.address && !e.hash && !e.output && !e.pubkey && !e.input)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, jt.typeforce)(
    {
      network: jt.typeforce.maybe(jt.typeforce.Object),
      address: jt.typeforce.maybe(jt.typeforce.String),
      hash: jt.typeforce.maybe(jt.typeforce.BufferN(20)),
      output: jt.typeforce.maybe(jt.typeforce.BufferN(25)),
      pubkey: jt.typeforce.maybe(jt.isPoint),
      signature: jt.typeforce.maybe(io.isCanonicalScriptSignature),
      input: jt.typeforce.maybe(jt.typeforce.Buffer)
    },
    e
  );
  const r = fn.value(() => {
    const s = Q0.decode(e.address), a = s.readUInt8(0), c = s.slice(1);
    return { version: a, hash: c };
  }), n = fn.value(() => io.decompile(e.input)), i = e.network || EE.bitcoin, o = { name: "p2pkh", network: i };
  if (fn.prop(o, "address", () => {
    if (!o.hash)
      return;
    const s = Buffer.allocUnsafe(21);
    return s.writeUInt8(i.pubKeyHash, 0), o.hash.copy(s, 1), Q0.encode(s);
  }), fn.prop(o, "hash", () => {
    if (e.output)
      return e.output.slice(3, 23);
    if (e.address)
      return r().hash;
    if (e.pubkey || o.pubkey)
      return Rc.hash160(e.pubkey || o.pubkey);
  }), fn.prop(o, "output", () => {
    if (o.hash)
      return io.compile([
        kn.OP_DUP,
        kn.OP_HASH160,
        o.hash,
        kn.OP_EQUALVERIFY,
        kn.OP_CHECKSIG
      ]);
  }), fn.prop(o, "pubkey", () => {
    if (e.input)
      return n()[1];
  }), fn.prop(o, "signature", () => {
    if (e.input)
      return n()[0];
  }), fn.prop(o, "input", () => {
    if (e.pubkey && e.signature)
      return io.compile([e.signature, e.pubkey]);
  }), fn.prop(o, "witness", () => {
    if (o.input)
      return [];
  }), t.validate) {
    let s = Buffer.from([]);
    if (e.address) {
      if (r().version !== i.pubKeyHash)
        throw new TypeError("Invalid version or Network mismatch");
      if (r().hash.length !== 20)
        throw new TypeError("Invalid address");
      s = r().hash;
    }
    if (e.hash) {
      if (s.length > 0 && !s.equals(e.hash))
        throw new TypeError("Hash mismatch");
      s = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 25 || e.output[0] !== kn.OP_DUP || e.output[1] !== kn.OP_HASH160 || e.output[2] !== 20 || e.output[23] !== kn.OP_EQUALVERIFY || e.output[24] !== kn.OP_CHECKSIG)
        throw new TypeError("Output is invalid");
      const a = e.output.slice(3, 23);
      if (s.length > 0 && !s.equals(a))
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.pubkey) {
      const a = Rc.hash160(e.pubkey);
      if (s.length > 0 && !s.equals(a))
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.input) {
      const a = n();
      if (a.length !== 2)
        throw new TypeError("Input is invalid");
      if (!io.isCanonicalScriptSignature(a[0]))
        throw new TypeError("Input has invalid signature");
      if (!(0, jt.isPoint)(a[1]))
        throw new TypeError("Input has invalid pubkey");
      if (e.signature && !e.signature.equals(a[0]))
        throw new TypeError("Signature mismatch");
      if (e.pubkey && !e.pubkey.equals(a[1]))
        throw new TypeError("Pubkey mismatch");
      const c = Rc.hash160(a[1]);
      if (s.length > 0 && !s.equals(c))
        throw new TypeError("Hash mismatch");
    }
  }
  return Object.assign(o, e);
}
Xa.p2pkh = _E;
var sf = {};
Object.defineProperty(sf, "__esModule", { value: !0 });
sf.p2sh = void 0;
const ed = et, SE = kt, hn = rr, Ze = $t, Vr = hr, td = Oi, Fo = hn.OPS;
function xE(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => r.equals(t[n]));
}
function IE(e, t) {
  if (!e.address && !e.hash && !e.output && !e.redeem && !e.input)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, Ze.typeforce)(
    {
      network: Ze.typeforce.maybe(Ze.typeforce.Object),
      address: Ze.typeforce.maybe(Ze.typeforce.String),
      hash: Ze.typeforce.maybe(Ze.typeforce.BufferN(20)),
      output: Ze.typeforce.maybe(Ze.typeforce.BufferN(23)),
      redeem: Ze.typeforce.maybe({
        network: Ze.typeforce.maybe(Ze.typeforce.Object),
        output: Ze.typeforce.maybe(Ze.typeforce.Buffer),
        input: Ze.typeforce.maybe(Ze.typeforce.Buffer),
        witness: Ze.typeforce.maybe(
          Ze.typeforce.arrayOf(Ze.typeforce.Buffer)
        )
      }),
      input: Ze.typeforce.maybe(Ze.typeforce.Buffer),
      witness: Ze.typeforce.maybe(
        Ze.typeforce.arrayOf(Ze.typeforce.Buffer)
      )
    },
    e
  );
  let r = e.network;
  r || (r = e.redeem && e.redeem.network || SE.bitcoin);
  const n = { network: r }, i = Vr.value(() => {
    const a = td.decode(e.address), c = a.readUInt8(0), d = a.slice(1);
    return { version: c, hash: d };
  }), o = Vr.value(() => hn.decompile(e.input)), s = Vr.value(() => {
    const a = o(), c = a[a.length - 1];
    return {
      network: r,
      output: c === Fo.OP_FALSE ? Buffer.from([]) : c,
      input: hn.compile(a.slice(0, -1)),
      witness: e.witness || []
    };
  });
  if (Vr.prop(n, "address", () => {
    if (!n.hash)
      return;
    const a = Buffer.allocUnsafe(21);
    return a.writeUInt8(n.network.scriptHash, 0), n.hash.copy(a, 1), td.encode(a);
  }), Vr.prop(n, "hash", () => {
    if (e.output)
      return e.output.slice(2, 22);
    if (e.address)
      return i().hash;
    if (n.redeem && n.redeem.output)
      return ed.hash160(n.redeem.output);
  }), Vr.prop(n, "output", () => {
    if (n.hash)
      return hn.compile([Fo.OP_HASH160, n.hash, Fo.OP_EQUAL]);
  }), Vr.prop(n, "redeem", () => {
    if (e.input)
      return s();
  }), Vr.prop(n, "input", () => {
    if (!(!e.redeem || !e.redeem.input || !e.redeem.output))
      return hn.compile(
        [].concat(hn.decompile(e.redeem.input), e.redeem.output)
      );
  }), Vr.prop(n, "witness", () => {
    if (n.redeem && n.redeem.witness)
      return n.redeem.witness;
    if (n.input)
      return [];
  }), Vr.prop(n, "name", () => {
    const a = ["p2sh"];
    return n.redeem !== void 0 && n.redeem.name !== void 0 && a.push(n.redeem.name), a.join("-");
  }), t.validate) {
    let a = Buffer.from([]);
    if (e.address) {
      if (i().version !== r.scriptHash)
        throw new TypeError("Invalid version or Network mismatch");
      if (i().hash.length !== 20)
        throw new TypeError("Invalid address");
      a = i().hash;
    }
    if (e.hash) {
      if (a.length > 0 && !a.equals(e.hash))
        throw new TypeError("Hash mismatch");
      a = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 23 || e.output[0] !== Fo.OP_HASH160 || e.output[1] !== 20 || e.output[22] !== Fo.OP_EQUAL)
        throw new TypeError("Output is invalid");
      const d = e.output.slice(2, 22);
      if (a.length > 0 && !a.equals(d))
        throw new TypeError("Hash mismatch");
      a = d;
    }
    const c = (d) => {
      if (d.output) {
        const w = hn.decompile(d.output);
        if (!w || w.length < 1)
          throw new TypeError("Redeem.output too short");
        const g = ed.hash160(d.output);
        if (a.length > 0 && !a.equals(g))
          throw new TypeError("Hash mismatch");
        a = g;
      }
      if (d.input) {
        const w = d.input.length > 0, g = d.witness && d.witness.length > 0;
        if (!w && !g)
          throw new TypeError("Empty input");
        if (w && g)
          throw new TypeError("Input and witness provided");
        if (w) {
          const O = hn.decompile(d.input);
          if (!hn.isPushOnly(O))
            throw new TypeError("Non push-only scriptSig");
        }
      }
    };
    if (e.input) {
      const d = o();
      if (!d || d.length < 1)
        throw new TypeError("Input too short");
      if (!Buffer.isBuffer(s().output))
        throw new TypeError("Input is invalid");
      c(s());
    }
    if (e.redeem) {
      if (e.redeem.network && e.redeem.network !== r)
        throw new TypeError("Network mismatch");
      if (e.input) {
        const d = s();
        if (e.redeem.output && !e.redeem.output.equals(d.output))
          throw new TypeError("Redeem.output mismatch");
        if (e.redeem.input && !e.redeem.input.equals(d.input))
          throw new TypeError("Redeem.input mismatch");
      }
      c(e.redeem);
    }
    if (e.witness && e.redeem && e.redeem.witness && !xE(e.redeem.witness, e.witness))
      throw new TypeError("Witness and redeem.witness mismatch");
  }
  return Object.assign(n, e);
}
sf.p2sh = IE;
var af = {}, In = {};
Object.defineProperty(In, "__esModule", { value: !0 });
In.bech32m = In.bech32 = void 0;
const Sa = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", p1 = {};
for (let e = 0; e < Sa.length; e++) {
  const t = Sa.charAt(e);
  p1[t] = e;
}
function ho(e) {
  const t = e >> 25;
  return (e & 33554431) << 5 ^ -(t >> 0 & 1) & 996825010 ^ -(t >> 1 & 1) & 642813549 ^ -(t >> 2 & 1) & 513874426 ^ -(t >> 3 & 1) & 1027748829 ^ -(t >> 4 & 1) & 705979059;
}
function rd(e) {
  let t = 1;
  for (let r = 0; r < e.length; ++r) {
    const n = e.charCodeAt(r);
    if (n < 33 || n > 126)
      return "Invalid prefix (" + e + ")";
    t = ho(t) ^ n >> 5;
  }
  t = ho(t);
  for (let r = 0; r < e.length; ++r) {
    const n = e.charCodeAt(r);
    t = ho(t) ^ n & 31;
  }
  return t;
}
function Eh(e, t, r, n) {
  let i = 0, o = 0;
  const s = (1 << r) - 1, a = [];
  for (let c = 0; c < e.length; ++c)
    for (i = i << t | e[c], o += t; o >= r; )
      o -= r, a.push(i >> o & s);
  if (n)
    o > 0 && a.push(i << r - o & s);
  else {
    if (o >= t)
      return "Excess padding";
    if (i << r - o & s)
      return "Non-zero padding";
  }
  return a;
}
function TE(e) {
  return Eh(e, 8, 5, !0);
}
function AE(e) {
  const t = Eh(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
}
function OE(e) {
  const t = Eh(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
  throw new Error(t);
}
function g1(e) {
  let t;
  e === "bech32" ? t = 1 : t = 734539939;
  function r(s, a, c) {
    if (c = c || 90, s.length + 7 + a.length > c)
      throw new TypeError("Exceeds length limit");
    s = s.toLowerCase();
    let d = rd(s);
    if (typeof d == "string")
      throw new Error(d);
    let w = s + "1";
    for (let g = 0; g < a.length; ++g) {
      const O = a[g];
      if (O >> 5)
        throw new Error("Non 5-bit word");
      d = ho(d) ^ O, w += Sa.charAt(O);
    }
    for (let g = 0; g < 6; ++g)
      d = ho(d);
    d ^= t;
    for (let g = 0; g < 6; ++g) {
      const O = d >> (5 - g) * 5 & 31;
      w += Sa.charAt(O);
    }
    return w;
  }
  function n(s, a) {
    if (a = a || 90, s.length < 8)
      return s + " too short";
    if (s.length > a)
      return "Exceeds length limit";
    const c = s.toLowerCase(), d = s.toUpperCase();
    if (s !== c && s !== d)
      return "Mixed-case string " + s;
    s = c;
    const w = s.lastIndexOf("1");
    if (w === -1)
      return "No separator character for " + s;
    if (w === 0)
      return "Missing prefix for " + s;
    const g = s.slice(0, w), O = s.slice(w + 1);
    if (O.length < 6)
      return "Data too short";
    let N = rd(g);
    if (typeof N == "string")
      return N;
    const B = [];
    for (let I = 0; I < O.length; ++I) {
      const M = O.charAt(I), T = p1[M];
      if (T === void 0)
        return "Unknown character " + M;
      N = ho(N) ^ T, !(I + 6 >= O.length) && B.push(T);
    }
    return N !== t ? "Invalid checksum for " + s : { prefix: g, words: B };
  }
  function i(s, a) {
    const c = n(s, a);
    if (typeof c == "object")
      return c;
  }
  function o(s, a) {
    const c = n(s, a);
    if (typeof c == "object")
      return c;
    throw new Error(c);
  }
  return {
    decodeUnsafe: i,
    decode: o,
    encode: r,
    toWords: TE,
    fromWordsUnsafe: AE,
    fromWords: OE
  };
}
In.bech32 = g1("bech32");
In.bech32m = g1("bech32m");
Object.defineProperty(af, "__esModule", { value: !0 });
af.p2wpkh = void 0;
const kc = et, BE = kt, fa = rr, _t = $t, Mn = hr, Gs = In, nd = fa.OPS, PE = Buffer.alloc(0);
function NE(e, t) {
  if (!e.address && !e.hash && !e.output && !e.pubkey && !e.witness)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, _t.typeforce)(
    {
      address: _t.typeforce.maybe(_t.typeforce.String),
      hash: _t.typeforce.maybe(_t.typeforce.BufferN(20)),
      input: _t.typeforce.maybe(_t.typeforce.BufferN(0)),
      network: _t.typeforce.maybe(_t.typeforce.Object),
      output: _t.typeforce.maybe(_t.typeforce.BufferN(22)),
      pubkey: _t.typeforce.maybe(_t.isPoint),
      signature: _t.typeforce.maybe(fa.isCanonicalScriptSignature),
      witness: _t.typeforce.maybe(
        _t.typeforce.arrayOf(_t.typeforce.Buffer)
      )
    },
    e
  );
  const r = Mn.value(() => {
    const o = Gs.bech32.decode(e.address), s = o.words.shift(), a = Gs.bech32.fromWords(o.words);
    return {
      version: s,
      prefix: o.prefix,
      data: Buffer.from(a)
    };
  }), n = e.network || BE.bitcoin, i = { name: "p2wpkh", network: n };
  if (Mn.prop(i, "address", () => {
    if (!i.hash)
      return;
    const o = Gs.bech32.toWords(i.hash);
    return o.unshift(0), Gs.bech32.encode(n.bech32, o);
  }), Mn.prop(i, "hash", () => {
    if (e.output)
      return e.output.slice(2, 22);
    if (e.address)
      return r().data;
    if (e.pubkey || i.pubkey)
      return kc.hash160(e.pubkey || i.pubkey);
  }), Mn.prop(i, "output", () => {
    if (i.hash)
      return fa.compile([nd.OP_0, i.hash]);
  }), Mn.prop(i, "pubkey", () => {
    if (e.pubkey)
      return e.pubkey;
    if (e.witness)
      return e.witness[1];
  }), Mn.prop(i, "signature", () => {
    if (e.witness)
      return e.witness[0];
  }), Mn.prop(i, "input", () => {
    if (i.witness)
      return PE;
  }), Mn.prop(i, "witness", () => {
    if (e.pubkey && e.signature)
      return [e.signature, e.pubkey];
  }), t.validate) {
    let o = Buffer.from([]);
    if (e.address) {
      if (n && n.bech32 !== r().prefix)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== 0)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 20)
        throw new TypeError("Invalid address data");
      o = r().data;
    }
    if (e.hash) {
      if (o.length > 0 && !o.equals(e.hash))
        throw new TypeError("Hash mismatch");
      o = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 22 || e.output[0] !== nd.OP_0 || e.output[1] !== 20)
        throw new TypeError("Output is invalid");
      if (o.length > 0 && !o.equals(e.output.slice(2)))
        throw new TypeError("Hash mismatch");
      o = e.output.slice(2);
    }
    if (e.pubkey) {
      const s = kc.hash160(e.pubkey);
      if (o.length > 0 && !o.equals(s))
        throw new TypeError("Hash mismatch");
      if (o = s, !(0, _t.isPoint)(e.pubkey) || e.pubkey.length !== 33)
        throw new TypeError("Invalid pubkey for p2wpkh");
    }
    if (e.witness) {
      if (e.witness.length !== 2)
        throw new TypeError("Witness is invalid");
      if (!fa.isCanonicalScriptSignature(e.witness[0]))
        throw new TypeError("Witness has invalid signature");
      if (!(0, _t.isPoint)(e.witness[1]) || e.witness[1].length !== 33)
        throw new TypeError("Witness has invalid pubkey");
      if (e.signature && !e.signature.equals(e.witness[0]))
        throw new TypeError("Signature mismatch");
      if (e.pubkey && !e.pubkey.equals(e.witness[1]))
        throw new TypeError("Pubkey mismatch");
      const s = kc.hash160(e.witness[1]);
      if (o.length > 0 && !o.equals(s))
        throw new TypeError("Hash mismatch");
    }
  }
  return Object.assign(i, e);
}
af.p2wpkh = NE;
var ff = {};
Object.defineProperty(ff, "__esModule", { value: !0 });
ff.p2wsh = void 0;
const id = et, RE = kt, Dn = rr, ze = $t, cn = hr, Vs = In, od = Dn.OPS, Mc = Buffer.alloc(0);
function kE(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => r.equals(t[n]));
}
function qs(e) {
  return !!(Buffer.isBuffer(e) && e.length === 65 && e[0] === 4 && (0, ze.isPoint)(e));
}
function ME(e, t) {
  if (!e.address && !e.hash && !e.output && !e.redeem && !e.witness)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, ze.typeforce)(
    {
      network: ze.typeforce.maybe(ze.typeforce.Object),
      address: ze.typeforce.maybe(ze.typeforce.String),
      hash: ze.typeforce.maybe(ze.typeforce.BufferN(32)),
      output: ze.typeforce.maybe(ze.typeforce.BufferN(34)),
      redeem: ze.typeforce.maybe({
        input: ze.typeforce.maybe(ze.typeforce.Buffer),
        network: ze.typeforce.maybe(ze.typeforce.Object),
        output: ze.typeforce.maybe(ze.typeforce.Buffer),
        witness: ze.typeforce.maybe(
          ze.typeforce.arrayOf(ze.typeforce.Buffer)
        )
      }),
      input: ze.typeforce.maybe(ze.typeforce.BufferN(0)),
      witness: ze.typeforce.maybe(
        ze.typeforce.arrayOf(ze.typeforce.Buffer)
      )
    },
    e
  );
  const r = cn.value(() => {
    const s = Vs.bech32.decode(e.address), a = s.words.shift(), c = Vs.bech32.fromWords(s.words);
    return {
      version: a,
      prefix: s.prefix,
      data: Buffer.from(c)
    };
  }), n = cn.value(() => Dn.decompile(e.redeem.input));
  let i = e.network;
  i || (i = e.redeem && e.redeem.network || RE.bitcoin);
  const o = { network: i };
  if (cn.prop(o, "address", () => {
    if (!o.hash)
      return;
    const s = Vs.bech32.toWords(o.hash);
    return s.unshift(0), Vs.bech32.encode(i.bech32, s);
  }), cn.prop(o, "hash", () => {
    if (e.output)
      return e.output.slice(2);
    if (e.address)
      return r().data;
    if (o.redeem && o.redeem.output)
      return id.sha256(o.redeem.output);
  }), cn.prop(o, "output", () => {
    if (o.hash)
      return Dn.compile([od.OP_0, o.hash]);
  }), cn.prop(o, "redeem", () => {
    if (e.witness)
      return {
        output: e.witness[e.witness.length - 1],
        input: Mc,
        witness: e.witness.slice(0, -1)
      };
  }), cn.prop(o, "input", () => {
    if (o.witness)
      return Mc;
  }), cn.prop(o, "witness", () => {
    if (e.redeem && e.redeem.input && e.redeem.input.length > 0 && e.redeem.output && e.redeem.output.length > 0) {
      const s = Dn.toStack(n());
      return o.redeem = Object.assign({ witness: s }, e.redeem), o.redeem.input = Mc, [].concat(s, e.redeem.output);
    }
    if (e.redeem && e.redeem.output && e.redeem.witness)
      return [].concat(e.redeem.witness, e.redeem.output);
  }), cn.prop(o, "name", () => {
    const s = ["p2wsh"];
    return o.redeem !== void 0 && o.redeem.name !== void 0 && s.push(o.redeem.name), s.join("-");
  }), t.validate) {
    let s = Buffer.from([]);
    if (e.address) {
      if (r().prefix !== i.bech32)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== 0)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 32)
        throw new TypeError("Invalid address data");
      s = r().data;
    }
    if (e.hash) {
      if (s.length > 0 && !s.equals(e.hash))
        throw new TypeError("Hash mismatch");
      s = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 34 || e.output[0] !== od.OP_0 || e.output[1] !== 32)
        throw new TypeError("Output is invalid");
      const a = e.output.slice(2);
      if (s.length > 0 && !s.equals(a))
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.redeem) {
      if (e.redeem.network && e.redeem.network !== i)
        throw new TypeError("Network mismatch");
      if (e.redeem.input && e.redeem.input.length > 0 && e.redeem.witness && e.redeem.witness.length > 0)
        throw new TypeError("Ambiguous witness source");
      if (e.redeem.output) {
        if (Dn.decompile(e.redeem.output).length === 0)
          throw new TypeError("Redeem.output is invalid");
        const a = id.sha256(e.redeem.output);
        if (s.length > 0 && !s.equals(a))
          throw new TypeError("Hash mismatch");
        s = a;
      }
      if (e.redeem.input && !Dn.isPushOnly(n()))
        throw new TypeError("Non push-only scriptSig");
      if (e.witness && e.redeem.witness && !kE(e.witness, e.redeem.witness))
        throw new TypeError("Witness and redeem.witness mismatch");
      if (e.redeem.input && n().some(qs) || e.redeem.output && (Dn.decompile(e.redeem.output) || []).some(
        qs
      ))
        throw new TypeError(
          "redeem.input or redeem.output contains uncompressed pubkey"
        );
    }
    if (e.witness && e.witness.length > 0) {
      const a = e.witness[e.witness.length - 1];
      if (e.redeem && e.redeem.output && !e.redeem.output.equals(a))
        throw new TypeError("Witness and redeem.output mismatch");
      if (e.witness.some(qs) || (Dn.decompile(a) || []).some(qs))
        throw new TypeError("Witness contains uncompressed pubkey");
    }
  }
  return Object.assign(o, e);
}
ff.p2wsh = ME;
var cf = {}, Yn = {};
Object.defineProperty(Yn, "__esModule", { value: !0 });
Yn.getEccLib = Yn.initEccLib = void 0;
const Qo = {};
function UE(e) {
  e ? e !== Qo.eccLib && (HE(e), Qo.eccLib = e) : Qo.eccLib = e;
}
Yn.initEccLib = UE;
function CE() {
  if (!Qo.eccLib)
    throw new Error(
      "No ECC Library provided. You must call initEccLib() with a valid TinySecp256k1Interface instance"
    );
  return Qo.eccLib;
}
Yn.getEccLib = CE;
const un = (e) => Buffer.from(e, "hex");
function HE(e) {
  yr(typeof e.isXOnlyPoint == "function"), yr(
    e.isXOnlyPoint(
      un("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), yr(
    e.isXOnlyPoint(
      un("fffffffffffffffffffffffffffffffffffffffffffffffffffffffeeffffc2e")
    )
  ), yr(
    e.isXOnlyPoint(
      un("f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9")
    )
  ), yr(
    e.isXOnlyPoint(
      un("0000000000000000000000000000000000000000000000000000000000000001")
    )
  ), yr(
    !e.isXOnlyPoint(
      un("0000000000000000000000000000000000000000000000000000000000000000")
    )
  ), yr(
    !e.isXOnlyPoint(
      un("fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f")
    )
  ), yr(typeof e.xOnlyPointAddTweak == "function"), LE.forEach((t) => {
    const r = e.xOnlyPointAddTweak(un(t.pubkey), un(t.tweak));
    t.result === null ? yr(r === null) : (yr(r !== null), yr(r.parity === t.parity), yr(Buffer.from(r.xOnlyPubkey).equals(un(t.result))));
  });
}
function yr(e) {
  if (!e)
    throw new Error("ecc library invalid");
}
const LE = [
  {
    pubkey: "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
    tweak: "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140",
    parity: -1,
    result: null
  },
  {
    pubkey: "1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b",
    tweak: "a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac",
    parity: 1,
    result: "e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf"
  },
  {
    pubkey: "2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991",
    tweak: "823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47",
    parity: 0,
    result: "9534f8dc8c6deda2dc007655981c78b49c5d96c778fbf363462a11ec9dfd948c"
  }
];
var uf = {}, St = {}, Eu = Ce.Buffer, DE = 9007199254740991;
function _h(e) {
  if (e < 0 || e > DE || e % 1 !== 0)
    throw new RangeError("value out of range");
}
function jo(e, t, r) {
  if (_h(e), t || (t = Eu.allocUnsafe(y1(e))), !Eu.isBuffer(t))
    throw new TypeError("buffer must be a Buffer instance");
  return r || (r = 0), e < 253 ? (t.writeUInt8(e, r), jo.bytes = 1) : e <= 65535 ? (t.writeUInt8(253, r), t.writeUInt16LE(e, r + 1), jo.bytes = 3) : e <= 4294967295 ? (t.writeUInt8(254, r), t.writeUInt32LE(e, r + 1), jo.bytes = 5) : (t.writeUInt8(255, r), t.writeUInt32LE(e >>> 0, r + 1), t.writeUInt32LE(e / 4294967296 | 0, r + 5), jo.bytes = 9), t;
}
function zo(e, t) {
  if (!Eu.isBuffer(e))
    throw new TypeError("buffer must be a Buffer instance");
  t || (t = 0);
  var r = e.readUInt8(t);
  if (r < 253)
    return zo.bytes = 1, r;
  if (r === 253)
    return zo.bytes = 3, e.readUInt16LE(t + 1);
  if (r === 254)
    return zo.bytes = 5, e.readUInt32LE(t + 1);
  zo.bytes = 9;
  var n = e.readUInt32LE(t + 1), i = e.readUInt32LE(t + 5), o = i * 4294967296 + n;
  return _h(o), o;
}
function y1(e) {
  return _h(e), e < 253 ? 1 : e <= 65535 ? 3 : e <= 4294967295 ? 5 : 9;
}
var hf = { encode: jo, decode: zo, encodingLength: y1 };
Object.defineProperty(St, "__esModule", { value: !0 });
St.BufferReader = St.BufferWriter = St.cloneBuffer = St.reverseBuffer = St.writeUInt64LE = St.readUInt64LE = St.varuint = void 0;
const mi = $t, { typeforce: w1 } = mi, fs = hf;
St.varuint = fs;
function v1(e, t) {
  if (typeof e != "number")
    throw new Error("cannot write a non-number as a number");
  if (e < 0)
    throw new Error("specified a negative value for writing an unsigned value");
  if (e > t)
    throw new Error("RangeError: value out of range");
  if (Math.floor(e) !== e)
    throw new Error("value has a fractional component");
}
function b1(e, t) {
  const r = e.readUInt32LE(t);
  let n = e.readUInt32LE(t + 4);
  return n *= 4294967296, v1(n + r, 9007199254740991), n + r;
}
St.readUInt64LE = b1;
function m1(e, t, r) {
  return v1(t, 9007199254740991), e.writeInt32LE(t & -1, r), e.writeUInt32LE(Math.floor(t / 4294967296), r + 4), r + 8;
}
St.writeUInt64LE = m1;
function $E(e) {
  if (e.length < 1)
    return e;
  let t = e.length - 1, r = 0;
  for (let n = 0; n < e.length / 2; n++)
    r = e[n], e[n] = e[t], e[t] = r, t--;
  return e;
}
St.reverseBuffer = $E;
function FE(e) {
  const t = Buffer.allocUnsafe(e.length);
  return e.copy(t), t;
}
St.cloneBuffer = FE;
class Sh {
  static withCapacity(t) {
    return new Sh(Buffer.alloc(t));
  }
  constructor(t, r = 0) {
    this.buffer = t, this.offset = r, w1(mi.tuple(mi.Buffer, mi.UInt32), [t, r]);
  }
  writeUInt8(t) {
    this.offset = this.buffer.writeUInt8(t, this.offset);
  }
  writeInt32(t) {
    this.offset = this.buffer.writeInt32LE(t, this.offset);
  }
  writeUInt32(t) {
    this.offset = this.buffer.writeUInt32LE(t, this.offset);
  }
  writeUInt64(t) {
    this.offset = m1(this.buffer, t, this.offset);
  }
  writeVarInt(t) {
    fs.encode(t, this.buffer, this.offset), this.offset += fs.encode.bytes;
  }
  writeSlice(t) {
    if (this.buffer.length < this.offset + t.length)
      throw new Error("Cannot write slice out of bounds");
    this.offset += t.copy(this.buffer, this.offset);
  }
  writeVarSlice(t) {
    this.writeVarInt(t.length), this.writeSlice(t);
  }
  writeVector(t) {
    this.writeVarInt(t.length), t.forEach((r) => this.writeVarSlice(r));
  }
  end() {
    if (this.buffer.length === this.offset)
      return this.buffer;
    throw new Error(`buffer size ${this.buffer.length}, offset ${this.offset}`);
  }
}
St.BufferWriter = Sh;
class KE {
  constructor(t, r = 0) {
    this.buffer = t, this.offset = r, w1(mi.tuple(mi.Buffer, mi.UInt32), [t, r]);
  }
  readUInt8() {
    const t = this.buffer.readUInt8(this.offset);
    return this.offset++, t;
  }
  readInt32() {
    const t = this.buffer.readInt32LE(this.offset);
    return this.offset += 4, t;
  }
  readUInt32() {
    const t = this.buffer.readUInt32LE(this.offset);
    return this.offset += 4, t;
  }
  readUInt64() {
    const t = b1(this.buffer, this.offset);
    return this.offset += 8, t;
  }
  readVarInt() {
    const t = fs.decode(this.buffer, this.offset);
    return this.offset += fs.decode.bytes, t;
  }
  readSlice(t) {
    if (this.buffer.length < this.offset + t)
      throw new Error("Cannot read slice out of bounds");
    const r = this.buffer.slice(this.offset, this.offset + t);
    return this.offset += t, r;
  }
  readVarSlice() {
    return this.readSlice(this.readVarInt());
  }
  readVector() {
    const t = this.readVarInt(), r = [];
    for (let n = 0; n < t; n++)
      r.push(this.readVarSlice());
    return r;
  }
}
St.BufferReader = KE;
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.tweakKey = e.tapTweakHash = e.tapleafHash = e.findScriptPath = e.toHashTree = e.rootHashFromPath = e.MAX_TAPTREE_DEPTH = e.LEAF_VERSION_TAPSCRIPT = void 0;
  const t = Qn, r = Yn, n = et, i = St, o = $t;
  e.LEAF_VERSION_TAPSCRIPT = 192, e.MAX_TAPTREE_DEPTH = 128;
  const s = (I) => "left" in I && "right" in I;
  function a(I, M) {
    if (I.length < 33)
      throw new TypeError(
        `The control-block length is too small. Got ${I.length}, expected min 33.`
      );
    const T = (I.length - 33) / 32;
    let k = M;
    for (let F = 0; F < T; F++) {
      const X = I.slice(33 + 32 * F, 65 + 32 * F);
      k.compare(X) < 0 ? k = N(k, X) : k = N(X, k);
    }
    return k;
  }
  e.rootHashFromPath = a;
  function c(I) {
    if ((0, o.isTapleaf)(I))
      return { hash: w(I) };
    const M = [c(I[0]), c(I[1])];
    M.sort((F, X) => F.hash.compare(X.hash));
    const [T, k] = M;
    return {
      hash: N(T.hash, k.hash),
      left: T,
      right: k
    };
  }
  e.toHashTree = c;
  function d(I, M) {
    if (s(I)) {
      const T = d(I.left, M);
      if (T !== void 0)
        return [...T, I.right.hash];
      const k = d(I.right, M);
      if (k !== void 0)
        return [...k, I.left.hash];
    } else if (I.hash.equals(M))
      return [];
  }
  e.findScriptPath = d;
  function w(I) {
    const M = I.version || e.LEAF_VERSION_TAPSCRIPT;
    return n.taggedHash(
      "TapLeaf",
      t.Buffer.concat([
        t.Buffer.from([M]),
        B(I.output)
      ])
    );
  }
  e.tapleafHash = w;
  function g(I, M) {
    return n.taggedHash(
      "TapTweak",
      t.Buffer.concat(M ? [I, M] : [I])
    );
  }
  e.tapTweakHash = g;
  function O(I, M) {
    if (!t.Buffer.isBuffer(I) || I.length !== 32 || M && M.length !== 32)
      return null;
    const T = g(I, M), k = (0, r.getEccLib)().xOnlyPointAddTweak(I, T);
    return !k || k.xOnlyPubkey === null ? null : {
      parity: k.parity,
      x: t.Buffer.from(k.xOnlyPubkey)
    };
  }
  e.tweakKey = O;
  function N(I, M) {
    return n.taggedHash("TapBranch", t.Buffer.concat([I, M]));
  }
  function B(I) {
    const M = i.varuint.encodingLength(I.length), T = t.Buffer.allocUnsafe(M);
    return i.varuint.encode(I.length, T), t.Buffer.concat([T, I]);
  }
})(uf);
Object.defineProperty(cf, "__esModule", { value: !0 });
cf.p2tr = void 0;
const Ws = Qn, GE = kt, _u = rr, Pe = $t, sd = Yn, or = uf, wr = hr, js = In, ad = _u.OPS, fd = 1, VE = 80;
function qE(e, t) {
  if (!e.address && !e.output && !e.pubkey && !e.internalPubkey && !(e.witness && e.witness.length > 1))
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, Pe.typeforce)(
    {
      address: Pe.typeforce.maybe(Pe.typeforce.String),
      input: Pe.typeforce.maybe(Pe.typeforce.BufferN(0)),
      network: Pe.typeforce.maybe(Pe.typeforce.Object),
      output: Pe.typeforce.maybe(Pe.typeforce.BufferN(34)),
      internalPubkey: Pe.typeforce.maybe(Pe.typeforce.BufferN(32)),
      hash: Pe.typeforce.maybe(Pe.typeforce.BufferN(32)),
      pubkey: Pe.typeforce.maybe(Pe.typeforce.BufferN(32)),
      signature: Pe.typeforce.maybe(Pe.typeforce.BufferN(64)),
      witness: Pe.typeforce.maybe(
        Pe.typeforce.arrayOf(Pe.typeforce.Buffer)
      ),
      scriptTree: Pe.typeforce.maybe(Pe.isTaptree),
      redeem: Pe.typeforce.maybe({
        output: Pe.typeforce.maybe(Pe.typeforce.Buffer),
        redeemVersion: Pe.typeforce.maybe(Pe.typeforce.Number),
        witness: Pe.typeforce.maybe(
          Pe.typeforce.arrayOf(Pe.typeforce.Buffer)
        )
      }),
      redeemVersion: Pe.typeforce.maybe(Pe.typeforce.Number)
    },
    e
  );
  const r = wr.value(() => {
    const a = js.bech32m.decode(e.address), c = a.words.shift(), d = js.bech32m.fromWords(a.words);
    return {
      version: c,
      prefix: a.prefix,
      data: Ws.Buffer.from(d)
    };
  }), n = wr.value(() => {
    if (!(!e.witness || !e.witness.length))
      return e.witness.length >= 2 && e.witness[e.witness.length - 1][0] === VE ? e.witness.slice(0, -1) : e.witness.slice();
  }), i = wr.value(() => {
    if (e.scriptTree)
      return (0, or.toHashTree)(e.scriptTree);
    if (e.hash)
      return { hash: e.hash };
  }), o = e.network || GE.bitcoin, s = { name: "p2tr", network: o };
  if (wr.prop(s, "address", () => {
    if (!s.pubkey)
      return;
    const a = js.bech32m.toWords(s.pubkey);
    return a.unshift(fd), js.bech32m.encode(o.bech32, a);
  }), wr.prop(s, "hash", () => {
    const a = i();
    if (a)
      return a.hash;
    const c = n();
    if (c && c.length > 1) {
      const d = c[c.length - 1], w = d[0] & Pe.TAPLEAF_VERSION_MASK, g = c[c.length - 2], O = (0, or.tapleafHash)({
        output: g,
        version: w
      });
      return (0, or.rootHashFromPath)(d, O);
    }
    return null;
  }), wr.prop(s, "output", () => {
    if (s.pubkey)
      return _u.compile([ad.OP_1, s.pubkey]);
  }), wr.prop(s, "redeemVersion", () => e.redeemVersion ? e.redeemVersion : e.redeem && e.redeem.redeemVersion !== void 0 && e.redeem.redeemVersion !== null ? e.redeem.redeemVersion : or.LEAF_VERSION_TAPSCRIPT), wr.prop(s, "redeem", () => {
    const a = n();
    if (!(!a || a.length < 2))
      return {
        output: a[a.length - 2],
        witness: a.slice(0, -2),
        redeemVersion: a[a.length - 1][0] & Pe.TAPLEAF_VERSION_MASK
      };
  }), wr.prop(s, "pubkey", () => {
    if (e.pubkey)
      return e.pubkey;
    if (e.output)
      return e.output.slice(2);
    if (e.address)
      return r().data;
    if (s.internalPubkey) {
      const a = (0, or.tweakKey)(s.internalPubkey, s.hash);
      if (a)
        return a.x;
    }
  }), wr.prop(s, "internalPubkey", () => {
    if (e.internalPubkey)
      return e.internalPubkey;
    const a = n();
    if (a && a.length > 1)
      return a[a.length - 1].slice(1, 33);
  }), wr.prop(s, "signature", () => {
    if (e.signature)
      return e.signature;
    const a = n();
    if (!(!a || a.length !== 1))
      return a[0];
  }), wr.prop(s, "witness", () => {
    if (e.witness)
      return e.witness;
    const a = i();
    if (a && e.redeem && e.redeem.output && e.internalPubkey) {
      const c = (0, or.tapleafHash)({
        output: e.redeem.output,
        version: s.redeemVersion
      }), d = (0, or.findScriptPath)(a, c);
      if (!d)
        return;
      const w = (0, or.tweakKey)(e.internalPubkey, a.hash);
      if (!w)
        return;
      const g = Ws.Buffer.concat(
        [
          Ws.Buffer.from([s.redeemVersion | w.parity]),
          e.internalPubkey
        ].concat(d)
      );
      return [e.redeem.output, g];
    }
    if (e.signature)
      return [e.signature];
  }), t.validate) {
    let a = Ws.Buffer.from([]);
    if (e.address) {
      if (o && o.bech32 !== r().prefix)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== fd)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 32)
        throw new TypeError("Invalid address data");
      a = r().data;
    }
    if (e.pubkey) {
      if (a.length > 0 && !a.equals(e.pubkey))
        throw new TypeError("Pubkey mismatch");
      a = e.pubkey;
    }
    if (e.output) {
      if (e.output.length !== 34 || e.output[0] !== ad.OP_1 || e.output[1] !== 32)
        throw new TypeError("Output is invalid");
      if (a.length > 0 && !a.equals(e.output.slice(2)))
        throw new TypeError("Pubkey mismatch");
      a = e.output.slice(2);
    }
    if (e.internalPubkey) {
      const w = (0, or.tweakKey)(e.internalPubkey, s.hash);
      if (a.length > 0 && !a.equals(w.x))
        throw new TypeError("Pubkey mismatch");
      a = w.x;
    }
    if (a && a.length && !(0, sd.getEccLib)().isXOnlyPoint(a))
      throw new TypeError("Invalid pubkey for p2tr");
    const c = i();
    if (e.hash && c && !e.hash.equals(c.hash))
      throw new TypeError("Hash mismatch");
    if (e.redeem && e.redeem.output && c) {
      const w = (0, or.tapleafHash)({
        output: e.redeem.output,
        version: s.redeemVersion
      });
      if (!(0, or.findScriptPath)(c, w))
        throw new TypeError("Redeem script not in tree");
    }
    const d = n();
    if (e.redeem && s.redeem) {
      if (e.redeem.redeemVersion && e.redeem.redeemVersion !== s.redeem.redeemVersion)
        throw new TypeError("Redeem.redeemVersion and witness mismatch");
      if (e.redeem.output) {
        if (_u.decompile(e.redeem.output).length === 0)
          throw new TypeError("Redeem.output is invalid");
        if (s.redeem.output && !e.redeem.output.equals(s.redeem.output))
          throw new TypeError("Redeem.output and witness mismatch");
      }
      if (e.redeem.witness && s.redeem.witness && !WE(e.redeem.witness, s.redeem.witness))
        throw new TypeError("Redeem.witness and witness mismatch");
    }
    if (d && d.length)
      if (d.length === 1) {
        if (e.signature && !e.signature.equals(d[0]))
          throw new TypeError("Signature mismatch");
      } else {
        const w = d[d.length - 1];
        if (w.length < 33)
          throw new TypeError(
            `The control-block length is too small. Got ${w.length}, expected min 33.`
          );
        if ((w.length - 33) % 32 !== 0)
          throw new TypeError(
            `The control-block length of ${w.length} is incorrect!`
          );
        const g = (w.length - 33) / 32;
        if (g > 128)
          throw new TypeError(
            `The script path is too long. Got ${g}, expected max 128.`
          );
        const O = w.slice(1, 33);
        if (e.internalPubkey && !e.internalPubkey.equals(O))
          throw new TypeError("Internal pubkey mismatch");
        if (!(0, sd.getEccLib)().isXOnlyPoint(O))
          throw new TypeError("Invalid internalPubkey for p2tr witness");
        const N = w[0] & Pe.TAPLEAF_VERSION_MASK, B = d[d.length - 2], I = (0, or.tapleafHash)({
          output: B,
          version: N
        }), M = (0, or.rootHashFromPath)(w, I), T = (0, or.tweakKey)(O, M);
        if (!T)
          throw new TypeError("Invalid outputKey for p2tr witness");
        if (a.length && !a.equals(T.x))
          throw new TypeError("Pubkey mismatch for p2tr witness");
        if (T.parity !== (w[0] & 1))
          throw new Error("Incorrect parity");
      }
  }
  return Object.assign(s, e);
}
cf.p2tr = qE;
function WE(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => r.equals(t[n]));
}
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.p2tr = e.p2wsh = e.p2wpkh = e.p2sh = e.p2pkh = e.p2pk = e.p2ms = e.embed = void 0;
  const t = Wa;
  Object.defineProperty(e, "embed", {
    enumerable: !0,
    get: function() {
      return t.p2data;
    }
  });
  const r = ja;
  Object.defineProperty(e, "p2ms", {
    enumerable: !0,
    get: function() {
      return r.p2ms;
    }
  });
  const n = za;
  Object.defineProperty(e, "p2pk", {
    enumerable: !0,
    get: function() {
      return n.p2pk;
    }
  });
  const i = Xa;
  Object.defineProperty(e, "p2pkh", {
    enumerable: !0,
    get: function() {
      return i.p2pkh;
    }
  });
  const o = sf;
  Object.defineProperty(e, "p2sh", {
    enumerable: !0,
    get: function() {
      return o.p2sh;
    }
  });
  const s = af;
  Object.defineProperty(e, "p2wpkh", {
    enumerable: !0,
    get: function() {
      return s.p2wpkh;
    }
  });
  const a = ff;
  Object.defineProperty(e, "p2wsh", {
    enumerable: !0,
    get: function() {
      return a.p2wsh;
    }
  });
  const c = cf;
  Object.defineProperty(e, "p2tr", {
    enumerable: !0,
    get: function() {
      return c.p2tr;
    }
  });
})(Bo);
Object.defineProperty(er, "__esModule", { value: !0 });
er.toOutputScript = er.fromOutputScript = er.toBech32 = er.toBase58Check = er.fromBech32 = er.fromBase58Check = void 0;
const E1 = kt, Zr = Bo, _1 = rr, zs = $t, lo = In, S1 = Oi, x1 = 40, I1 = 2, T1 = 16, A1 = 2, O1 = 80, B1 = "WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.";
function jE(e, t) {
  const r = e.slice(2);
  if (r.length < I1 || r.length > x1)
    throw new TypeError("Invalid program length for segwit address");
  const n = e[0] - O1;
  if (n < A1 || n > T1)
    throw new TypeError("Invalid version for segwit address");
  if (e[1] !== r.length)
    throw new TypeError("Invalid script for segwit address");
  return console.warn(B1), R1(r, n, t.bech32);
}
function P1(e) {
  const t = S1.decode(e);
  if (t.length < 21)
    throw new TypeError(e + " is too short");
  if (t.length > 21)
    throw new TypeError(e + " is too long");
  const r = t.readUInt8(0), n = t.slice(1);
  return { version: r, hash: n };
}
er.fromBase58Check = P1;
function N1(e) {
  let t, r;
  try {
    t = lo.bech32.decode(e);
  } catch {
  }
  if (t) {
    if (r = t.words[0], r !== 0)
      throw new TypeError(e + " uses wrong encoding");
  } else if (t = lo.bech32m.decode(e), r = t.words[0], r === 0)
    throw new TypeError(e + " uses wrong encoding");
  const n = lo.bech32.fromWords(t.words.slice(1));
  return {
    version: r,
    prefix: t.prefix,
    data: Buffer.from(n)
  };
}
er.fromBech32 = N1;
function zE(e, t) {
  (0, zs.typeforce)(
    (0, zs.tuple)(zs.Hash160bit, zs.UInt8),
    arguments
  );
  const r = Buffer.allocUnsafe(21);
  return r.writeUInt8(t, 0), e.copy(r, 1), S1.encode(r);
}
er.toBase58Check = zE;
function R1(e, t, r) {
  const n = lo.bech32.toWords(e);
  return n.unshift(t), t === 0 ? lo.bech32.encode(r, n) : lo.bech32m.encode(r, n);
}
er.toBech32 = R1;
function XE(e, t) {
  t = t || E1.bitcoin;
  try {
    return Zr.p2pkh({ output: e, network: t }).address;
  } catch {
  }
  try {
    return Zr.p2sh({ output: e, network: t }).address;
  } catch {
  }
  try {
    return Zr.p2wpkh({ output: e, network: t }).address;
  } catch {
  }
  try {
    return Zr.p2wsh({ output: e, network: t }).address;
  } catch {
  }
  try {
    return Zr.p2tr({ output: e, network: t }).address;
  } catch {
  }
  try {
    return jE(e, t);
  } catch {
  }
  throw new Error(_1.toASM(e) + " has no matching Address");
}
er.fromOutputScript = XE;
function YE(e, t) {
  t = t || E1.bitcoin;
  let r, n;
  try {
    r = P1(e);
  } catch {
  }
  if (r) {
    if (r.version === t.pubKeyHash)
      return Zr.p2pkh({ hash: r.hash }).output;
    if (r.version === t.scriptHash)
      return Zr.p2sh({ hash: r.hash }).output;
  } else {
    try {
      n = N1(e);
    } catch {
    }
    if (n) {
      if (n.prefix !== t.bech32)
        throw new Error(e + " has an invalid prefix");
      if (n.version === 0) {
        if (n.data.length === 20)
          return Zr.p2wpkh({ hash: n.data }).output;
        if (n.data.length === 32)
          return Zr.p2wsh({ hash: n.data }).output;
      } else if (n.version === 1) {
        if (n.data.length === 32)
          return Zr.p2tr({ pubkey: n.data }).output;
      } else if (n.version >= A1 && n.version <= T1 && n.data.length >= I1 && n.data.length <= x1)
        return console.warn(B1), _1.compile([
          n.version + O1,
          n.data
        ]);
    }
  }
  throw new Error(e + " has no matching Script");
}
er.toOutputScript = YE;
var lf = {}, df = {};
Object.defineProperty(df, "__esModule", { value: !0 });
df.fastMerkleRoot = void 0;
function ZE(e, t) {
  if (!Array.isArray(e))
    throw TypeError("Expected values Array");
  if (typeof t != "function")
    throw TypeError("Expected digest Function");
  let r = e.length;
  const n = e.concat();
  for (; r > 1; ) {
    let i = 0;
    for (let o = 0; o < r; o += 2, ++i) {
      const s = n[o], a = o + 1 === r ? s : n[o + 1], c = Buffer.concat([s, a]);
      n[i] = t(c);
    }
    r = i;
  }
  return n[0];
}
df.fastMerkleRoot = ZE;
var ti = {};
Object.defineProperty(ti, "__esModule", { value: !0 });
ti.Transaction = void 0;
const bt = St, zt = et, cd = rr, JE = rr, ke = $t, { typeforce: qr } = ke;
function jr(e) {
  const t = e.length;
  return bt.varuint.encodingLength(t) + t;
}
function QE(e) {
  const t = e.length;
  return bt.varuint.encodingLength(t) + e.reduce((r, n) => r + jr(n), 0);
}
const $n = Buffer.allocUnsafe(0), ud = [], Uc = Buffer.from(
  "0000000000000000000000000000000000000000000000000000000000000000",
  "hex"
), hd = Buffer.from(
  "0000000000000000000000000000000000000000000000000000000000000001",
  "hex"
), e_ = Buffer.from("ffffffffffffffff", "hex"), t_ = {
  script: $n,
  valueBuffer: e_
};
function r_(e) {
  return e.value !== void 0;
}
let $r = class qe {
  constructor() {
    this.version = 1, this.locktime = 0, this.ins = [], this.outs = [];
  }
  static fromBuffer(t, r) {
    const n = new bt.BufferReader(t), i = new qe();
    i.version = n.readInt32();
    const o = n.readUInt8(), s = n.readUInt8();
    let a = !1;
    o === qe.ADVANCED_TRANSACTION_MARKER && s === qe.ADVANCED_TRANSACTION_FLAG ? a = !0 : n.offset -= 2;
    const c = n.readVarInt();
    for (let w = 0; w < c; ++w)
      i.ins.push({
        hash: n.readSlice(32),
        index: n.readUInt32(),
        script: n.readVarSlice(),
        sequence: n.readUInt32(),
        witness: ud
      });
    const d = n.readVarInt();
    for (let w = 0; w < d; ++w)
      i.outs.push({
        value: n.readUInt64(),
        script: n.readVarSlice()
      });
    if (a) {
      for (let w = 0; w < c; ++w)
        i.ins[w].witness = n.readVector();
      if (!i.hasWitnesses())
        throw new Error("Transaction has superfluous witness data");
    }
    if (i.locktime = n.readUInt32(), r)
      return i;
    if (n.offset !== t.length)
      throw new Error("Transaction has unexpected data");
    return i;
  }
  static fromHex(t) {
    return qe.fromBuffer(Buffer.from(t, "hex"), !1);
  }
  static isCoinbaseHash(t) {
    qr(ke.Hash256bit, t);
    for (let r = 0; r < 32; ++r)
      if (t[r] !== 0)
        return !1;
    return !0;
  }
  isCoinbase() {
    return this.ins.length === 1 && qe.isCoinbaseHash(this.ins[0].hash);
  }
  addInput(t, r, n, i) {
    return qr(
      ke.tuple(
        ke.Hash256bit,
        ke.UInt32,
        ke.maybe(ke.UInt32),
        ke.maybe(ke.Buffer)
      ),
      arguments
    ), ke.Null(n) && (n = qe.DEFAULT_SEQUENCE), this.ins.push({
      hash: t,
      index: r,
      script: i || $n,
      sequence: n,
      witness: ud
    }) - 1;
  }
  addOutput(t, r) {
    return qr(ke.tuple(ke.Buffer, ke.Satoshi), arguments), this.outs.push({
      script: t,
      value: r
    }) - 1;
  }
  hasWitnesses() {
    return this.ins.some((t) => t.witness.length !== 0);
  }
  weight() {
    const t = this.byteLength(!1), r = this.byteLength(!0);
    return t * 3 + r;
  }
  virtualSize() {
    return Math.ceil(this.weight() / 4);
  }
  byteLength(t = !0) {
    const r = t && this.hasWitnesses();
    return (r ? 10 : 8) + bt.varuint.encodingLength(this.ins.length) + bt.varuint.encodingLength(this.outs.length) + this.ins.reduce((n, i) => n + 40 + jr(i.script), 0) + this.outs.reduce((n, i) => n + 8 + jr(i.script), 0) + (r ? this.ins.reduce((n, i) => n + QE(i.witness), 0) : 0);
  }
  clone() {
    const t = new qe();
    return t.version = this.version, t.locktime = this.locktime, t.ins = this.ins.map((r) => ({
      hash: r.hash,
      index: r.index,
      script: r.script,
      sequence: r.sequence,
      witness: r.witness
    })), t.outs = this.outs.map((r) => ({
      script: r.script,
      value: r.value
    })), t;
  }
  /**
   * Hash transaction for signing a specific input.
   *
   * Bitcoin uses a different hash for each signed transaction input.
   * This method copies the transaction, makes the necessary changes based on the
   * hashType, and then hashes the result.
   * This hash can then be used to sign the provided transaction input.
   */
  hashForSignature(t, r, n) {
    if (qr(
      ke.tuple(
        ke.UInt32,
        ke.Buffer,
        /* types.UInt8 */
        ke.Number
      ),
      arguments
    ), t >= this.ins.length)
      return hd;
    const i = cd.compile(
      cd.decompile(r).filter((a) => a !== JE.OPS.OP_CODESEPARATOR)
    ), o = this.clone();
    if ((n & 31) === qe.SIGHASH_NONE)
      o.outs = [], o.ins.forEach((a, c) => {
        c !== t && (a.sequence = 0);
      });
    else if ((n & 31) === qe.SIGHASH_SINGLE) {
      if (t >= this.outs.length)
        return hd;
      o.outs.length = t + 1;
      for (let a = 0; a < t; a++)
        o.outs[a] = t_;
      o.ins.forEach((a, c) => {
        c !== t && (a.sequence = 0);
      });
    }
    n & qe.SIGHASH_ANYONECANPAY ? (o.ins = [o.ins[t]], o.ins[0].script = i) : (o.ins.forEach((a) => {
      a.script = $n;
    }), o.ins[t].script = i);
    const s = Buffer.allocUnsafe(o.byteLength(!1) + 4);
    return s.writeInt32LE(n, s.length - 4), o.__toBuffer(s, 0, !1), zt.hash256(s);
  }
  hashForWitnessV1(t, r, n, i, o, s) {
    if (qr(
      ke.tuple(
        ke.UInt32,
        qr.arrayOf(ke.Buffer),
        qr.arrayOf(ke.Satoshi),
        ke.UInt32
      ),
      arguments
    ), n.length !== this.ins.length || r.length !== this.ins.length)
      throw new Error("Must supply prevout script and value for all inputs");
    const a = i === qe.SIGHASH_DEFAULT ? qe.SIGHASH_ALL : i & qe.SIGHASH_OUTPUT_MASK, d = (i & qe.SIGHASH_INPUT_MASK) === qe.SIGHASH_ANYONECANPAY, w = a === qe.SIGHASH_NONE, g = a === qe.SIGHASH_SINGLE;
    let O = $n, N = $n, B = $n, I = $n, M = $n;
    if (!d) {
      let X = bt.BufferWriter.withCapacity(
        36 * this.ins.length
      );
      this.ins.forEach((Z) => {
        X.writeSlice(Z.hash), X.writeUInt32(Z.index);
      }), O = zt.sha256(X.end()), X = bt.BufferWriter.withCapacity(
        8 * this.ins.length
      ), n.forEach((Z) => X.writeUInt64(Z)), N = zt.sha256(X.end()), X = bt.BufferWriter.withCapacity(
        r.map(jr).reduce((Z, z) => Z + z)
      ), r.forEach(
        (Z) => X.writeVarSlice(Z)
      ), B = zt.sha256(X.end()), X = bt.BufferWriter.withCapacity(
        4 * this.ins.length
      ), this.ins.forEach((Z) => X.writeUInt32(Z.sequence)), I = zt.sha256(X.end());
    }
    if (w || g) {
      if (g && t < this.outs.length) {
        const X = this.outs[t], Z = bt.BufferWriter.withCapacity(
          8 + jr(X.script)
        );
        Z.writeUInt64(X.value), Z.writeVarSlice(X.script), M = zt.sha256(Z.end());
      }
    } else {
      const X = this.outs.map((z) => 8 + jr(z.script)).reduce((z, te) => z + te), Z = bt.BufferWriter.withCapacity(X);
      this.outs.forEach((z) => {
        Z.writeUInt64(z.value), Z.writeVarSlice(z.script);
      }), M = zt.sha256(Z.end());
    }
    const T = (o ? 2 : 0) + (s ? 1 : 0), k = 174 - (d ? 49 : 0) - (w ? 32 : 0) + (s ? 32 : 0) + (o ? 37 : 0), F = bt.BufferWriter.withCapacity(k);
    if (F.writeUInt8(i), F.writeInt32(this.version), F.writeUInt32(this.locktime), F.writeSlice(O), F.writeSlice(N), F.writeSlice(B), F.writeSlice(I), w || g || F.writeSlice(M), F.writeUInt8(T), d) {
      const X = this.ins[t];
      F.writeSlice(X.hash), F.writeUInt32(X.index), F.writeUInt64(n[t]), F.writeVarSlice(r[t]), F.writeUInt32(X.sequence);
    } else
      F.writeUInt32(t);
    if (s) {
      const X = bt.BufferWriter.withCapacity(
        jr(s)
      );
      X.writeVarSlice(s), F.writeSlice(zt.sha256(X.end()));
    }
    return g && F.writeSlice(M), o && (F.writeSlice(o), F.writeUInt8(0), F.writeUInt32(4294967295)), zt.taggedHash(
      "TapSighash",
      Buffer.concat([Buffer.of(0), F.end()])
    );
  }
  hashForWitnessV0(t, r, n, i) {
    qr(
      ke.tuple(ke.UInt32, ke.Buffer, ke.Satoshi, ke.UInt32),
      arguments
    );
    let o = Buffer.from([]), s, a = Uc, c = Uc, d = Uc;
    if (i & qe.SIGHASH_ANYONECANPAY || (o = Buffer.allocUnsafe(36 * this.ins.length), s = new bt.BufferWriter(o, 0), this.ins.forEach((g) => {
      s.writeSlice(g.hash), s.writeUInt32(g.index);
    }), c = zt.hash256(o)), !(i & qe.SIGHASH_ANYONECANPAY) && (i & 31) !== qe.SIGHASH_SINGLE && (i & 31) !== qe.SIGHASH_NONE && (o = Buffer.allocUnsafe(4 * this.ins.length), s = new bt.BufferWriter(o, 0), this.ins.forEach((g) => {
      s.writeUInt32(g.sequence);
    }), d = zt.hash256(o)), (i & 31) !== qe.SIGHASH_SINGLE && (i & 31) !== qe.SIGHASH_NONE) {
      const g = this.outs.reduce((O, N) => O + 8 + jr(N.script), 0);
      o = Buffer.allocUnsafe(g), s = new bt.BufferWriter(o, 0), this.outs.forEach((O) => {
        s.writeUInt64(O.value), s.writeVarSlice(O.script);
      }), a = zt.hash256(o);
    } else if ((i & 31) === qe.SIGHASH_SINGLE && t < this.outs.length) {
      const g = this.outs[t];
      o = Buffer.allocUnsafe(8 + jr(g.script)), s = new bt.BufferWriter(o, 0), s.writeUInt64(g.value), s.writeVarSlice(g.script), a = zt.hash256(o);
    }
    o = Buffer.allocUnsafe(156 + jr(r)), s = new bt.BufferWriter(o, 0);
    const w = this.ins[t];
    return s.writeInt32(this.version), s.writeSlice(c), s.writeSlice(d), s.writeSlice(w.hash), s.writeUInt32(w.index), s.writeVarSlice(r), s.writeUInt64(n), s.writeUInt32(w.sequence), s.writeSlice(a), s.writeUInt32(this.locktime), s.writeUInt32(i), zt.hash256(o);
  }
  getHash(t) {
    return t && this.isCoinbase() ? Buffer.alloc(32, 0) : zt.hash256(this.__toBuffer(void 0, void 0, t));
  }
  getId() {
    return (0, bt.reverseBuffer)(this.getHash(!1)).toString(
      "hex"
    );
  }
  toBuffer(t, r) {
    return this.__toBuffer(t, r, !0);
  }
  toHex() {
    return this.toBuffer(void 0, void 0).toString("hex");
  }
  setInputScript(t, r) {
    qr(ke.tuple(ke.Number, ke.Buffer), arguments), this.ins[t].script = r;
  }
  setWitness(t, r) {
    qr(ke.tuple(ke.Number, [ke.Buffer]), arguments), this.ins[t].witness = r;
  }
  __toBuffer(t, r, n = !1) {
    t || (t = Buffer.allocUnsafe(this.byteLength(n)));
    const i = new bt.BufferWriter(
      t,
      r || 0
    );
    i.writeInt32(this.version);
    const o = n && this.hasWitnesses();
    return o && (i.writeUInt8(qe.ADVANCED_TRANSACTION_MARKER), i.writeUInt8(qe.ADVANCED_TRANSACTION_FLAG)), i.writeVarInt(this.ins.length), this.ins.forEach((s) => {
      i.writeSlice(s.hash), i.writeUInt32(s.index), i.writeVarSlice(s.script), i.writeUInt32(s.sequence);
    }), i.writeVarInt(this.outs.length), this.outs.forEach((s) => {
      r_(s) ? i.writeUInt64(s.value) : i.writeSlice(s.valueBuffer), i.writeVarSlice(s.script);
    }), o && this.ins.forEach((s) => {
      i.writeVector(s.witness);
    }), i.writeUInt32(this.locktime), r !== void 0 ? t.slice(r, i.offset) : t;
  }
};
ti.Transaction = $r;
$r.DEFAULT_SEQUENCE = 4294967295;
$r.SIGHASH_DEFAULT = 0;
$r.SIGHASH_ALL = 1;
$r.SIGHASH_NONE = 2;
$r.SIGHASH_SINGLE = 3;
$r.SIGHASH_ANYONECANPAY = 128;
$r.SIGHASH_OUTPUT_MASK = 3;
$r.SIGHASH_INPUT_MASK = 128;
$r.ADVANCED_TRANSACTION_MARKER = 0;
$r.ADVANCED_TRANSACTION_FLAG = 1;
Object.defineProperty(lf, "__esModule", { value: !0 });
lf.Block = void 0;
const ii = St, Cc = et, n_ = df, i_ = ti, k1 = $t, { typeforce: o_ } = k1, Hc = new TypeError(
  "Cannot compute merkle root for zero transactions"
), ld = new TypeError(
  "Cannot compute witness commit for non-segwit block"
);
let s_ = class oo {
  constructor() {
    this.version = 1, this.prevHash = void 0, this.merkleRoot = void 0, this.timestamp = 0, this.witnessCommit = void 0, this.bits = 0, this.nonce = 0, this.transactions = void 0;
  }
  static fromBuffer(t) {
    if (t.length < 80)
      throw new Error("Buffer too small (< 80 bytes)");
    const r = new ii.BufferReader(t), n = new oo();
    if (n.version = r.readInt32(), n.prevHash = r.readSlice(32), n.merkleRoot = r.readSlice(32), n.timestamp = r.readUInt32(), n.bits = r.readUInt32(), n.nonce = r.readUInt32(), t.length === 80)
      return n;
    const i = () => {
      const a = i_.Transaction.fromBuffer(
        r.buffer.slice(r.offset),
        !0
      );
      return r.offset += a.byteLength(), a;
    }, o = r.readVarInt();
    n.transactions = [];
    for (let a = 0; a < o; ++a) {
      const c = i();
      n.transactions.push(c);
    }
    const s = n.getWitnessCommit();
    return s && (n.witnessCommit = s), n;
  }
  static fromHex(t) {
    return oo.fromBuffer(Buffer.from(t, "hex"));
  }
  static calculateTarget(t) {
    const r = ((t & 4278190080) >> 24) - 3, n = t & 8388607, i = Buffer.alloc(32, 0);
    return i.writeUIntBE(n, 29 - r, 3), i;
  }
  static calculateMerkleRoot(t, r) {
    if (o_([{ getHash: k1.Function }], t), t.length === 0)
      throw Hc;
    if (r && !dd(t))
      throw ld;
    const n = t.map(
      (o) => o.getHash(r)
    ), i = (0, n_.fastMerkleRoot)(n, Cc.hash256);
    return r ? Cc.hash256(
      Buffer.concat([i, t[0].ins[0].witness[0]])
    ) : i;
  }
  getWitnessCommit() {
    if (!dd(this.transactions))
      return null;
    const t = this.transactions[0].outs.filter(
      (n) => n.script.slice(0, 6).equals(Buffer.from("6a24aa21a9ed", "hex"))
    ).map((n) => n.script.slice(6, 38));
    if (t.length === 0)
      return null;
    const r = t[t.length - 1];
    return r instanceof Buffer && r.length === 32 ? r : null;
  }
  hasWitnessCommit() {
    return this.witnessCommit instanceof Buffer && this.witnessCommit.length === 32 || this.getWitnessCommit() !== null;
  }
  hasWitness() {
    return a_(this.transactions);
  }
  weight() {
    const t = this.byteLength(!1, !1), r = this.byteLength(!1, !0);
    return t * 3 + r;
  }
  byteLength(t, r = !0) {
    return t || !this.transactions ? 80 : 80 + ii.varuint.encodingLength(this.transactions.length) + this.transactions.reduce((n, i) => n + i.byteLength(r), 0);
  }
  getHash() {
    return Cc.hash256(this.toBuffer(!0));
  }
  getId() {
    return (0, ii.reverseBuffer)(this.getHash()).toString("hex");
  }
  getUTCDate() {
    const t = /* @__PURE__ */ new Date(0);
    return t.setUTCSeconds(this.timestamp), t;
  }
  // TODO: buffer, offset compatibility
  toBuffer(t) {
    const r = Buffer.allocUnsafe(this.byteLength(t)), n = new ii.BufferWriter(r);
    return n.writeInt32(this.version), n.writeSlice(this.prevHash), n.writeSlice(this.merkleRoot), n.writeUInt32(this.timestamp), n.writeUInt32(this.bits), n.writeUInt32(this.nonce), t || !this.transactions || (ii.varuint.encode(
      this.transactions.length,
      r,
      n.offset
    ), n.offset += ii.varuint.encode.bytes, this.transactions.forEach((i) => {
      const o = i.byteLength();
      i.toBuffer(r, n.offset), n.offset += o;
    })), r;
  }
  toHex(t) {
    return this.toBuffer(t).toString("hex");
  }
  checkTxRoots() {
    const t = this.hasWitnessCommit();
    return !t && this.hasWitness() ? !1 : this.__checkMerkleRoot() && (t ? this.__checkWitnessCommit() : !0);
  }
  checkProofOfWork() {
    const t = (0, ii.reverseBuffer)(this.getHash()), r = oo.calculateTarget(this.bits);
    return t.compare(r) <= 0;
  }
  __checkMerkleRoot() {
    if (!this.transactions)
      throw Hc;
    const t = oo.calculateMerkleRoot(this.transactions);
    return this.merkleRoot.compare(t) === 0;
  }
  __checkWitnessCommit() {
    if (!this.transactions)
      throw Hc;
    if (!this.hasWitnessCommit())
      throw ld;
    const t = oo.calculateMerkleRoot(
      this.transactions,
      !0
    );
    return this.witnessCommit.compare(t) === 0;
  }
};
lf.Block = s_;
function dd(e) {
  return e instanceof Array && e[0] && e[0].ins && e[0].ins instanceof Array && e[0].ins[0] && e[0].ins[0].witness && e[0].ins[0].witness instanceof Array && e[0].ins[0].witness.length > 0;
}
function a_(e) {
  return e instanceof Array && e.some(
    (t) => typeof t == "object" && t.ins instanceof Array && t.ins.some(
      (r) => typeof r == "object" && r.witness instanceof Array && r.witness.length > 0
    )
  );
}
var pf = {}, xh = {}, Ih = {}, Th = {}, xs = {}, Bi = {}, Ut = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), function(t) {
    t[t.UNSIGNED_TX = 0] = "UNSIGNED_TX", t[t.GLOBAL_XPUB = 1] = "GLOBAL_XPUB";
  }(e.GlobalTypes || (e.GlobalTypes = {})), e.GLOBAL_TYPE_NAMES = ["unsignedTx", "globalXpub"], function(t) {
    t[t.NON_WITNESS_UTXO = 0] = "NON_WITNESS_UTXO", t[t.WITNESS_UTXO = 1] = "WITNESS_UTXO", t[t.PARTIAL_SIG = 2] = "PARTIAL_SIG", t[t.SIGHASH_TYPE = 3] = "SIGHASH_TYPE", t[t.REDEEM_SCRIPT = 4] = "REDEEM_SCRIPT", t[t.WITNESS_SCRIPT = 5] = "WITNESS_SCRIPT", t[t.BIP32_DERIVATION = 6] = "BIP32_DERIVATION", t[t.FINAL_SCRIPTSIG = 7] = "FINAL_SCRIPTSIG", t[t.FINAL_SCRIPTWITNESS = 8] = "FINAL_SCRIPTWITNESS", t[t.POR_COMMITMENT = 9] = "POR_COMMITMENT", t[t.TAP_KEY_SIG = 19] = "TAP_KEY_SIG", t[t.TAP_SCRIPT_SIG = 20] = "TAP_SCRIPT_SIG", t[t.TAP_LEAF_SCRIPT = 21] = "TAP_LEAF_SCRIPT", t[t.TAP_BIP32_DERIVATION = 22] = "TAP_BIP32_DERIVATION", t[t.TAP_INTERNAL_KEY = 23] = "TAP_INTERNAL_KEY", t[t.TAP_MERKLE_ROOT = 24] = "TAP_MERKLE_ROOT";
  }(e.InputTypes || (e.InputTypes = {})), e.INPUT_TYPE_NAMES = [
    "nonWitnessUtxo",
    "witnessUtxo",
    "partialSig",
    "sighashType",
    "redeemScript",
    "witnessScript",
    "bip32Derivation",
    "finalScriptSig",
    "finalScriptWitness",
    "porCommitment",
    "tapKeySig",
    "tapScriptSig",
    "tapLeafScript",
    "tapBip32Derivation",
    "tapInternalKey",
    "tapMerkleRoot"
  ], function(t) {
    t[t.REDEEM_SCRIPT = 0] = "REDEEM_SCRIPT", t[t.WITNESS_SCRIPT = 1] = "WITNESS_SCRIPT", t[t.BIP32_DERIVATION = 2] = "BIP32_DERIVATION", t[t.TAP_INTERNAL_KEY = 5] = "TAP_INTERNAL_KEY", t[t.TAP_TREE = 6] = "TAP_TREE", t[t.TAP_BIP32_DERIVATION = 7] = "TAP_BIP32_DERIVATION";
  }(e.OutputTypes || (e.OutputTypes = {})), e.OUTPUT_TYPE_NAMES = [
    "redeemScript",
    "witnessScript",
    "bip32Derivation",
    "tapInternalKey",
    "tapTree",
    "tapBip32Derivation"
  ];
})(Ut);
var Pi = {};
Object.defineProperty(Pi, "__esModule", { value: !0 });
const M1 = Ut, f_ = (e) => [...Array(e).keys()];
function c_(e) {
  if (e.key[0] !== M1.GlobalTypes.GLOBAL_XPUB)
    throw new Error(
      "Decode Error: could not decode globalXpub with key 0x" + e.key.toString("hex")
    );
  if (e.key.length !== 79 || ![2, 3].includes(e.key[46]))
    throw new Error(
      "Decode Error: globalXpub has invalid extended pubkey in key 0x" + e.key.toString("hex")
    );
  if (e.value.length / 4 % 1 !== 0)
    throw new Error(
      "Decode Error: Global GLOBAL_XPUB value length should be multiple of 4"
    );
  const t = e.key.slice(1), r = {
    masterFingerprint: e.value.slice(0, 4),
    extendedPubkey: t,
    path: "m"
  };
  for (const n of f_(e.value.length / 4 - 1)) {
    const i = e.value.readUInt32LE(n * 4 + 4), o = !!(i & 2147483648), s = i & 2147483647;
    r.path += "/" + s.toString(10) + (o ? "'" : "");
  }
  return r;
}
Pi.decode = c_;
function u_(e) {
  const t = Buffer.from([M1.GlobalTypes.GLOBAL_XPUB]), r = Buffer.concat([t, e.extendedPubkey]), n = e.path.split("/"), i = Buffer.allocUnsafe(n.length * 4);
  e.masterFingerprint.copy(i, 0);
  let o = 4;
  return n.slice(1).forEach((s) => {
    const a = s.slice(-1) === "'";
    let c = 2147483647 & parseInt(a ? s.slice(0, -1) : s, 10);
    a && (c += 2147483648), i.writeUInt32LE(c, o), o += 4;
  }), {
    key: r,
    value: i
  };
}
Pi.encode = u_;
Pi.expected = "{ masterFingerprint: Buffer; extendedPubkey: Buffer; path: string; }";
function h_(e) {
  const t = e.extendedPubkey, r = e.masterFingerprint, n = e.path;
  return Buffer.isBuffer(t) && t.length === 78 && [2, 3].indexOf(t[45]) > -1 && Buffer.isBuffer(r) && r.length === 4 && typeof n == "string" && !!n.match(/^m(\/\d+'?)*$/);
}
Pi.check = h_;
function l_(e, t, r) {
  const n = t.extendedPubkey.toString("hex");
  return r.has(n) ? !1 : (r.add(n), e.filter((i) => i.extendedPubkey.equals(t.extendedPubkey)).length === 0);
}
Pi.canAddToArray = l_;
var Ah = {};
Object.defineProperty(Ah, "__esModule", { value: !0 });
const d_ = Ut;
function p_(e) {
  return {
    key: Buffer.from([d_.GlobalTypes.UNSIGNED_TX]),
    value: e.toBuffer()
  };
}
Ah.encode = p_;
var Ni = {};
Object.defineProperty(Ni, "__esModule", { value: !0 });
const U1 = Ut;
function g_(e) {
  if (e.key[0] !== U1.InputTypes.FINAL_SCRIPTSIG)
    throw new Error(
      "Decode Error: could not decode finalScriptSig with key 0x" + e.key.toString("hex")
    );
  return e.value;
}
Ni.decode = g_;
function y_(e) {
  return {
    key: Buffer.from([U1.InputTypes.FINAL_SCRIPTSIG]),
    value: e
  };
}
Ni.encode = y_;
Ni.expected = "Buffer";
function w_(e) {
  return Buffer.isBuffer(e);
}
Ni.check = w_;
function v_(e, t) {
  return !!e && !!t && e.finalScriptSig === void 0;
}
Ni.canAdd = v_;
var Ri = {};
Object.defineProperty(Ri, "__esModule", { value: !0 });
const C1 = Ut;
function b_(e) {
  if (e.key[0] !== C1.InputTypes.FINAL_SCRIPTWITNESS)
    throw new Error(
      "Decode Error: could not decode finalScriptWitness with key 0x" + e.key.toString("hex")
    );
  return e.value;
}
Ri.decode = b_;
function m_(e) {
  return {
    key: Buffer.from([C1.InputTypes.FINAL_SCRIPTWITNESS]),
    value: e
  };
}
Ri.encode = m_;
Ri.expected = "Buffer";
function E_(e) {
  return Buffer.isBuffer(e);
}
Ri.check = E_;
function __(e, t) {
  return !!e && !!t && e.finalScriptWitness === void 0;
}
Ri.canAdd = __;
var ki = {};
Object.defineProperty(ki, "__esModule", { value: !0 });
const H1 = Ut;
function S_(e) {
  if (e.key[0] !== H1.InputTypes.NON_WITNESS_UTXO)
    throw new Error(
      "Decode Error: could not decode nonWitnessUtxo with key 0x" + e.key.toString("hex")
    );
  return e.value;
}
ki.decode = S_;
function x_(e) {
  return {
    key: Buffer.from([H1.InputTypes.NON_WITNESS_UTXO]),
    value: e
  };
}
ki.encode = x_;
ki.expected = "Buffer";
function I_(e) {
  return Buffer.isBuffer(e);
}
ki.check = I_;
function T_(e, t) {
  return !!e && !!t && e.nonWitnessUtxo === void 0;
}
ki.canAdd = T_;
var Mi = {};
Object.defineProperty(Mi, "__esModule", { value: !0 });
const L1 = Ut;
function A_(e) {
  if (e.key[0] !== L1.InputTypes.PARTIAL_SIG)
    throw new Error(
      "Decode Error: could not decode partialSig with key 0x" + e.key.toString("hex")
    );
  if (!(e.key.length === 34 || e.key.length === 66) || ![2, 3, 4].includes(e.key[1]))
    throw new Error(
      "Decode Error: partialSig has invalid pubkey in key 0x" + e.key.toString("hex")
    );
  return {
    pubkey: e.key.slice(1),
    signature: e.value
  };
}
Mi.decode = A_;
function O_(e) {
  const t = Buffer.from([L1.InputTypes.PARTIAL_SIG]);
  return {
    key: Buffer.concat([t, e.pubkey]),
    value: e.signature
  };
}
Mi.encode = O_;
Mi.expected = "{ pubkey: Buffer; signature: Buffer; }";
function B_(e) {
  return Buffer.isBuffer(e.pubkey) && Buffer.isBuffer(e.signature) && [33, 65].includes(e.pubkey.length) && [2, 3, 4].includes(e.pubkey[0]) && P_(e.signature);
}
Mi.check = B_;
function P_(e) {
  if (!Buffer.isBuffer(e) || e.length < 9 || e[0] !== 48 || e.length !== e[1] + 3 || e[2] !== 2)
    return !1;
  const t = e[3];
  if (t > 33 || t < 1 || e[3 + t + 1] !== 2)
    return !1;
  const r = e[3 + t + 2];
  return !(r > 33 || r < 1 || e.length !== 3 + t + 2 + r + 2);
}
function N_(e, t, r) {
  const n = t.pubkey.toString("hex");
  return r.has(n) ? !1 : (r.add(n), e.filter((i) => i.pubkey.equals(t.pubkey)).length === 0);
}
Mi.canAddToArray = N_;
var Ui = {};
Object.defineProperty(Ui, "__esModule", { value: !0 });
const D1 = Ut;
function R_(e) {
  if (e.key[0] !== D1.InputTypes.POR_COMMITMENT)
    throw new Error(
      "Decode Error: could not decode porCommitment with key 0x" + e.key.toString("hex")
    );
  return e.value.toString("utf8");
}
Ui.decode = R_;
function k_(e) {
  return {
    key: Buffer.from([D1.InputTypes.POR_COMMITMENT]),
    value: Buffer.from(e, "utf8")
  };
}
Ui.encode = k_;
Ui.expected = "string";
function M_(e) {
  return typeof e == "string";
}
Ui.check = M_;
function U_(e, t) {
  return !!e && !!t && e.porCommitment === void 0;
}
Ui.canAdd = U_;
var Ci = {};
Object.defineProperty(Ci, "__esModule", { value: !0 });
const $1 = Ut;
function C_(e) {
  if (e.key[0] !== $1.InputTypes.SIGHASH_TYPE)
    throw new Error(
      "Decode Error: could not decode sighashType with key 0x" + e.key.toString("hex")
    );
  return e.value.readUInt32LE(0);
}
Ci.decode = C_;
function H_(e) {
  const t = Buffer.from([$1.InputTypes.SIGHASH_TYPE]), r = Buffer.allocUnsafe(4);
  return r.writeUInt32LE(e, 0), {
    key: t,
    value: r
  };
}
Ci.encode = H_;
Ci.expected = "number";
function L_(e) {
  return typeof e == "number";
}
Ci.check = L_;
function D_(e, t) {
  return !!e && !!t && e.sighashType === void 0;
}
Ci.canAdd = D_;
var Hi = {};
Object.defineProperty(Hi, "__esModule", { value: !0 });
const F1 = Ut;
function $_(e) {
  if (e.key[0] !== F1.InputTypes.TAP_KEY_SIG || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapKeySig with key 0x" + e.key.toString("hex")
    );
  if (!K1(e.value))
    throw new Error(
      "Decode Error: tapKeySig not a valid 64-65-byte BIP340 signature"
    );
  return e.value;
}
Hi.decode = $_;
function F_(e) {
  return { key: Buffer.from([F1.InputTypes.TAP_KEY_SIG]), value: e };
}
Hi.encode = F_;
Hi.expected = "Buffer";
function K1(e) {
  return Buffer.isBuffer(e) && (e.length === 64 || e.length === 65);
}
Hi.check = K1;
function K_(e, t) {
  return !!e && !!t && e.tapKeySig === void 0;
}
Hi.canAdd = K_;
var Li = {};
Object.defineProperty(Li, "__esModule", { value: !0 });
const G1 = Ut;
function G_(e) {
  if (e.key[0] !== G1.InputTypes.TAP_LEAF_SCRIPT)
    throw new Error(
      "Decode Error: could not decode tapLeafScript with key 0x" + e.key.toString("hex")
    );
  if ((e.key.length - 2) % 32 !== 0)
    throw new Error(
      "Decode Error: tapLeafScript has invalid control block in key 0x" + e.key.toString("hex")
    );
  const t = e.value[e.value.length - 1];
  if ((e.key[1] & 254) !== t)
    throw new Error(
      "Decode Error: tapLeafScript bad leaf version in key 0x" + e.key.toString("hex")
    );
  const r = e.value.slice(0, -1);
  return { controlBlock: e.key.slice(1), script: r, leafVersion: t };
}
Li.decode = G_;
function V_(e) {
  const t = Buffer.from([G1.InputTypes.TAP_LEAF_SCRIPT]), r = Buffer.from([e.leafVersion]);
  return {
    key: Buffer.concat([t, e.controlBlock]),
    value: Buffer.concat([e.script, r])
  };
}
Li.encode = V_;
Li.expected = "{ controlBlock: Buffer; leafVersion: number, script: Buffer; }";
function q_(e) {
  return Buffer.isBuffer(e.controlBlock) && (e.controlBlock.length - 1) % 32 === 0 && (e.controlBlock[0] & 254) === e.leafVersion && Buffer.isBuffer(e.script);
}
Li.check = q_;
function W_(e, t, r) {
  const n = t.controlBlock.toString("hex");
  return r.has(n) ? !1 : (r.add(n), e.filter((i) => i.controlBlock.equals(t.controlBlock)).length === 0);
}
Li.canAddToArray = W_;
var Di = {};
Object.defineProperty(Di, "__esModule", { value: !0 });
const V1 = Ut;
function j_(e) {
  if (e.key[0] !== V1.InputTypes.TAP_MERKLE_ROOT || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapMerkleRoot with key 0x" + e.key.toString("hex")
    );
  if (!q1(e.value))
    throw new Error("Decode Error: tapMerkleRoot not a 32-byte hash");
  return e.value;
}
Di.decode = j_;
function z_(e) {
  return { key: Buffer.from([V1.InputTypes.TAP_MERKLE_ROOT]), value: e };
}
Di.encode = z_;
Di.expected = "Buffer";
function q1(e) {
  return Buffer.isBuffer(e) && e.length === 32;
}
Di.check = q1;
function X_(e, t) {
  return !!e && !!t && e.tapMerkleRoot === void 0;
}
Di.canAdd = X_;
var $i = {};
Object.defineProperty($i, "__esModule", { value: !0 });
const W1 = Ut;
function Y_(e) {
  if (e.key[0] !== W1.InputTypes.TAP_SCRIPT_SIG)
    throw new Error(
      "Decode Error: could not decode tapScriptSig with key 0x" + e.key.toString("hex")
    );
  if (e.key.length !== 65)
    throw new Error(
      "Decode Error: tapScriptSig has invalid key 0x" + e.key.toString("hex")
    );
  if (e.value.length !== 64 && e.value.length !== 65)
    throw new Error(
      "Decode Error: tapScriptSig has invalid signature in key 0x" + e.key.toString("hex")
    );
  const t = e.key.slice(1, 33), r = e.key.slice(33);
  return {
    pubkey: t,
    leafHash: r,
    signature: e.value
  };
}
$i.decode = Y_;
function Z_(e) {
  const t = Buffer.from([W1.InputTypes.TAP_SCRIPT_SIG]);
  return {
    key: Buffer.concat([t, e.pubkey, e.leafHash]),
    value: e.signature
  };
}
$i.encode = Z_;
$i.expected = "{ pubkey: Buffer; leafHash: Buffer; signature: Buffer; }";
function J_(e) {
  return Buffer.isBuffer(e.pubkey) && Buffer.isBuffer(e.leafHash) && Buffer.isBuffer(e.signature) && e.pubkey.length === 32 && e.leafHash.length === 32 && (e.signature.length === 64 || e.signature.length === 65);
}
$i.check = J_;
function Q_(e, t, r) {
  const n = t.pubkey.toString("hex") + t.leafHash.toString("hex");
  return r.has(n) ? !1 : (r.add(n), e.filter(
    (i) => i.pubkey.equals(t.pubkey) && i.leafHash.equals(t.leafHash)
  ).length === 0);
}
$i.canAddToArray = Q_;
var Fi = {}, rn = {}, Fr = {};
Object.defineProperty(Fr, "__esModule", { value: !0 });
const eS = 9007199254740991;
function Oh(e) {
  if (e < 0 || e > eS || e % 1 !== 0)
    throw new RangeError("value out of range");
}
function Xo(e, t, r) {
  if (Oh(e), t || (t = Buffer.allocUnsafe(j1(e))), !Buffer.isBuffer(t))
    throw new TypeError("buffer must be a Buffer instance");
  return r || (r = 0), e < 253 ? (t.writeUInt8(e, r), Object.assign(Xo, { bytes: 1 })) : e <= 65535 ? (t.writeUInt8(253, r), t.writeUInt16LE(e, r + 1), Object.assign(Xo, { bytes: 3 })) : e <= 4294967295 ? (t.writeUInt8(254, r), t.writeUInt32LE(e, r + 1), Object.assign(Xo, { bytes: 5 })) : (t.writeUInt8(255, r), t.writeUInt32LE(e >>> 0, r + 1), t.writeUInt32LE(e / 4294967296 | 0, r + 5), Object.assign(Xo, { bytes: 9 })), t;
}
Fr.encode = Xo;
function Yo(e, t) {
  if (!Buffer.isBuffer(e))
    throw new TypeError("buffer must be a Buffer instance");
  t || (t = 0);
  const r = e.readUInt8(t);
  if (r < 253)
    return Object.assign(Yo, { bytes: 1 }), r;
  if (r === 253)
    return Object.assign(Yo, { bytes: 3 }), e.readUInt16LE(t + 1);
  if (r === 254)
    return Object.assign(Yo, { bytes: 5 }), e.readUInt32LE(t + 1);
  {
    Object.assign(Yo, { bytes: 9 });
    const n = e.readUInt32LE(t + 1), o = e.readUInt32LE(t + 5) * 4294967296 + n;
    return Oh(o), o;
  }
}
Fr.decode = Yo;
function j1(e) {
  return Oh(e), e < 253 ? 1 : e <= 65535 ? 3 : e <= 4294967295 ? 5 : 9;
}
Fr.encodingLength = j1;
Object.defineProperty(rn, "__esModule", { value: !0 });
const Xs = Fr;
rn.range = (e) => [...Array(e).keys()];
function tS(e) {
  if (e.length < 1)
    return e;
  let t = e.length - 1, r = 0;
  for (let n = 0; n < e.length / 2; n++)
    r = e[n], e[n] = e[t], e[t] = r, t--;
  return e;
}
rn.reverseBuffer = tS;
function rS(e) {
  const t = e.map(z1);
  return t.push(Buffer.from([0])), Buffer.concat(t);
}
rn.keyValsToBuffer = rS;
function z1(e) {
  const t = e.key.length, r = e.value.length, n = Xs.encodingLength(t), i = Xs.encodingLength(r), o = Buffer.allocUnsafe(
    n + t + i + r
  );
  return Xs.encode(t, o, 0), e.key.copy(o, n), Xs.encode(r, o, n + t), e.value.copy(o, n + t + i), o;
}
rn.keyValToBuffer = z1;
function X1(e, t) {
  if (typeof e != "number")
    throw new Error("cannot write a non-number as a number");
  if (e < 0)
    throw new Error("specified a negative value for writing an unsigned value");
  if (e > t)
    throw new Error("RangeError: value out of range");
  if (Math.floor(e) !== e)
    throw new Error("value has a fractional component");
}
function nS(e, t) {
  const r = e.readUInt32LE(t);
  let n = e.readUInt32LE(t + 4);
  return n *= 4294967296, X1(n + r, 9007199254740991), n + r;
}
rn.readUInt64LE = nS;
function iS(e, t, r) {
  return X1(t, 9007199254740991), e.writeInt32LE(t & -1, r), e.writeUInt32LE(Math.floor(t / 4294967296), r + 4), r + 8;
}
rn.writeUInt64LE = iS;
Object.defineProperty(Fi, "__esModule", { value: !0 });
const Y1 = Ut, Z1 = rn, xa = Fr;
function oS(e) {
  if (e.key[0] !== Y1.InputTypes.WITNESS_UTXO)
    throw new Error(
      "Decode Error: could not decode witnessUtxo with key 0x" + e.key.toString("hex")
    );
  const t = Z1.readUInt64LE(e.value, 0);
  let r = 8;
  const n = xa.decode(e.value, r);
  r += xa.encodingLength(n);
  const i = e.value.slice(r);
  if (i.length !== n)
    throw new Error("Decode Error: WITNESS_UTXO script is not proper length");
  return {
    script: i,
    value: t
  };
}
Fi.decode = oS;
function sS(e) {
  const { script: t, value: r } = e, n = xa.encodingLength(t.length), i = Buffer.allocUnsafe(8 + n + t.length);
  return Z1.writeUInt64LE(i, r, 0), xa.encode(t.length, i, 8), t.copy(i, 8 + n), {
    key: Buffer.from([Y1.InputTypes.WITNESS_UTXO]),
    value: i
  };
}
Fi.encode = sS;
Fi.expected = "{ script: Buffer; value: number; }";
function aS(e) {
  return Buffer.isBuffer(e.script) && typeof e.value == "number";
}
Fi.check = aS;
function fS(e, t) {
  return !!e && !!t && e.witnessUtxo === void 0;
}
Fi.canAdd = fS;
var Ki = {};
Object.defineProperty(Ki, "__esModule", { value: !0 });
const J1 = Ut, Su = Fr;
function cS(e) {
  if (e.key[0] !== J1.OutputTypes.TAP_TREE || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapTree with key 0x" + e.key.toString("hex")
    );
  let t = 0;
  const r = [];
  for (; t < e.value.length; ) {
    const n = e.value[t++], i = e.value[t++], o = Su.decode(e.value, t);
    t += Su.encodingLength(o), r.push({
      depth: n,
      leafVersion: i,
      script: e.value.slice(t, t + o)
    }), t += o;
  }
  return { leaves: r };
}
Ki.decode = cS;
function uS(e) {
  const t = Buffer.from([J1.OutputTypes.TAP_TREE]), r = [].concat(
    ...e.leaves.map((n) => [
      Buffer.of(n.depth, n.leafVersion),
      Su.encode(n.script.length),
      n.script
    ])
  );
  return {
    key: t,
    value: Buffer.concat(r)
  };
}
Ki.encode = uS;
Ki.expected = "{ leaves: [{ depth: number; leafVersion: number, script: Buffer; }] }";
function hS(e) {
  return Array.isArray(e.leaves) && e.leaves.every(
    (t) => t.depth >= 0 && t.depth <= 128 && (t.leafVersion & 254) === t.leafVersion && Buffer.isBuffer(t.script)
  );
}
Ki.check = hS;
function lS(e, t) {
  return !!e && !!t && e.tapTree === void 0;
}
Ki.canAdd = lS;
var gf = {};
Object.defineProperty(gf, "__esModule", { value: !0 });
const dS = (e) => [...Array(e).keys()], pS = (e) => e.length === 33 && [2, 3].includes(e[0]) || e.length === 65 && e[0] === 4;
function gS(e, t = pS) {
  function r(a) {
    if (a.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode bip32Derivation with key 0x" + a.key.toString("hex")
      );
    const c = a.key.slice(1);
    if (!t(c))
      throw new Error(
        "Decode Error: bip32Derivation has invalid pubkey in key 0x" + a.key.toString("hex")
      );
    if (a.value.length / 4 % 1 !== 0)
      throw new Error(
        "Decode Error: Input BIP32_DERIVATION value length should be multiple of 4"
      );
    const d = {
      masterFingerprint: a.value.slice(0, 4),
      pubkey: c,
      path: "m"
    };
    for (const w of dS(a.value.length / 4 - 1)) {
      const g = a.value.readUInt32LE(w * 4 + 4), O = !!(g & 2147483648), N = g & 2147483647;
      d.path += "/" + N.toString(10) + (O ? "'" : "");
    }
    return d;
  }
  function n(a) {
    const c = Buffer.from([e]), d = Buffer.concat([c, a.pubkey]), w = a.path.split("/"), g = Buffer.allocUnsafe(w.length * 4);
    a.masterFingerprint.copy(g, 0);
    let O = 4;
    return w.slice(1).forEach((N) => {
      const B = N.slice(-1) === "'";
      let I = 2147483647 & parseInt(B ? N.slice(0, -1) : N, 10);
      B && (I += 2147483648), g.writeUInt32LE(I, O), O += 4;
    }), {
      key: d,
      value: g
    };
  }
  const i = "{ masterFingerprint: Buffer; pubkey: Buffer; path: string; }";
  function o(a) {
    return Buffer.isBuffer(a.pubkey) && Buffer.isBuffer(a.masterFingerprint) && typeof a.path == "string" && t(a.pubkey) && a.masterFingerprint.length === 4;
  }
  function s(a, c, d) {
    const w = c.pubkey.toString("hex");
    return d.has(w) ? !1 : (d.add(w), a.filter((g) => g.pubkey.equals(c.pubkey)).length === 0);
  }
  return {
    decode: r,
    encode: n,
    check: o,
    expected: i,
    canAddToArray: s
  };
}
gf.makeConverter = gS;
var Bh = {};
Object.defineProperty(Bh, "__esModule", { value: !0 });
function yS(e) {
  return t;
  function t(r) {
    let n;
    if (e.includes(r.key[0]) && (n = r.key.slice(1), !(n.length === 33 || n.length === 65) || ![2, 3, 4].includes(n[0])))
      throw new Error(
        "Format Error: invalid pubkey in key 0x" + r.key.toString("hex")
      );
    return n;
  }
}
Bh.makeChecker = yS;
var Ph = {};
Object.defineProperty(Ph, "__esModule", { value: !0 });
function wS(e) {
  function t(s) {
    if (s.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode redeemScript with key 0x" + s.key.toString("hex")
      );
    return s.value;
  }
  function r(s) {
    return {
      key: Buffer.from([e]),
      value: s
    };
  }
  const n = "Buffer";
  function i(s) {
    return Buffer.isBuffer(s);
  }
  function o(s, a) {
    return !!s && !!a && s.redeemScript === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: i,
    expected: n,
    canAdd: o
  };
}
Ph.makeConverter = wS;
var Nh = {};
Object.defineProperty(Nh, "__esModule", { value: !0 });
const Ys = Fr, vS = gf, bS = (e) => e.length === 32;
function mS(e) {
  const t = vS.makeConverter(e, bS);
  function r(s) {
    const a = Ys.decode(s.value), c = Ys.encodingLength(a), d = t.decode({
      key: s.key,
      value: s.value.slice(c + a * 32)
    }), w = new Array(a);
    for (let g = 0, O = c; g < a; g++, O += 32)
      w[g] = s.value.slice(O, O + 32);
    return Object.assign({}, d, { leafHashes: w });
  }
  function n(s) {
    const a = t.encode(s), c = Ys.encodingLength(s.leafHashes.length), d = Buffer.allocUnsafe(c);
    Ys.encode(s.leafHashes.length, d);
    const w = Buffer.concat([d, ...s.leafHashes, a.value]);
    return Object.assign({}, a, { value: w });
  }
  const i = "{ masterFingerprint: Buffer; pubkey: Buffer; path: string; leafHashes: Buffer[]; }";
  function o(s) {
    return Array.isArray(s.leafHashes) && s.leafHashes.every(
      (a) => Buffer.isBuffer(a) && a.length === 32
    ) && t.check(s);
  }
  return {
    decode: r,
    encode: n,
    check: o,
    expected: i,
    canAddToArray: t.canAddToArray
  };
}
Nh.makeConverter = mS;
var Rh = {};
Object.defineProperty(Rh, "__esModule", { value: !0 });
function ES(e) {
  function t(s) {
    if (s.key[0] !== e || s.key.length !== 1)
      throw new Error(
        "Decode Error: could not decode tapInternalKey with key 0x" + s.key.toString("hex")
      );
    if (s.value.length !== 32)
      throw new Error(
        "Decode Error: tapInternalKey not a 32-byte x-only pubkey"
      );
    return s.value;
  }
  function r(s) {
    return { key: Buffer.from([e]), value: s };
  }
  const n = "Buffer";
  function i(s) {
    return Buffer.isBuffer(s) && s.length === 32;
  }
  function o(s, a) {
    return !!s && !!a && s.tapInternalKey === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: i,
    expected: n,
    canAdd: o
  };
}
Rh.makeConverter = ES;
var kh = {};
Object.defineProperty(kh, "__esModule", { value: !0 });
function _S(e) {
  function t(s) {
    if (s.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode witnessScript with key 0x" + s.key.toString("hex")
      );
    return s.value;
  }
  function r(s) {
    return {
      key: Buffer.from([e]),
      value: s
    };
  }
  const n = "Buffer";
  function i(s) {
    return Buffer.isBuffer(s);
  }
  function o(s, a) {
    return !!s && !!a && s.witnessScript === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: i,
    expected: n,
    canAdd: o
  };
}
kh.makeConverter = _S;
Object.defineProperty(Bi, "__esModule", { value: !0 });
const ur = Ut, SS = Pi, xS = Ah, IS = Ni, TS = Ri, AS = ki, OS = Mi, BS = Ui, PS = Ci, NS = Hi, RS = Li, kS = Di, MS = $i, US = Fi, CS = Ki, Q1 = gf, Mh = Bh, eg = Ph, tg = Nh, rg = Rh, ng = kh, HS = {
  unsignedTx: xS,
  globalXpub: SS,
  // pass an Array of key bytes that require pubkey beside the key
  checkPubkey: Mh.makeChecker([])
};
Bi.globals = HS;
const LS = {
  nonWitnessUtxo: AS,
  partialSig: OS,
  sighashType: PS,
  finalScriptSig: IS,
  finalScriptWitness: TS,
  porCommitment: BS,
  witnessUtxo: US,
  bip32Derivation: Q1.makeConverter(
    ur.InputTypes.BIP32_DERIVATION
  ),
  redeemScript: eg.makeConverter(
    ur.InputTypes.REDEEM_SCRIPT
  ),
  witnessScript: ng.makeConverter(
    ur.InputTypes.WITNESS_SCRIPT
  ),
  checkPubkey: Mh.makeChecker([
    ur.InputTypes.PARTIAL_SIG,
    ur.InputTypes.BIP32_DERIVATION
  ]),
  tapKeySig: NS,
  tapScriptSig: MS,
  tapLeafScript: RS,
  tapBip32Derivation: tg.makeConverter(
    ur.InputTypes.TAP_BIP32_DERIVATION
  ),
  tapInternalKey: rg.makeConverter(
    ur.InputTypes.TAP_INTERNAL_KEY
  ),
  tapMerkleRoot: kS
};
Bi.inputs = LS;
const DS = {
  bip32Derivation: Q1.makeConverter(
    ur.OutputTypes.BIP32_DERIVATION
  ),
  redeemScript: eg.makeConverter(
    ur.OutputTypes.REDEEM_SCRIPT
  ),
  witnessScript: ng.makeConverter(
    ur.OutputTypes.WITNESS_SCRIPT
  ),
  checkPubkey: Mh.makeChecker([
    ur.OutputTypes.BIP32_DERIVATION
  ]),
  tapBip32Derivation: tg.makeConverter(
    ur.OutputTypes.TAP_BIP32_DERIVATION
  ),
  tapTree: CS,
  tapInternalKey: rg.makeConverter(
    ur.OutputTypes.TAP_INTERNAL_KEY
  )
};
Bi.outputs = DS;
Object.defineProperty(xs, "__esModule", { value: !0 });
const je = Bi, Ia = rn, pd = Fr, _e = Ut;
function $S(e, t) {
  let r = 0;
  function n() {
    const M = pd.decode(e, r);
    r += pd.encodingLength(M);
    const T = e.slice(r, r + M);
    return r += M, T;
  }
  function i() {
    const M = e.readUInt32BE(r);
    return r += 4, M;
  }
  function o() {
    const M = e.readUInt8(r);
    return r += 1, M;
  }
  function s() {
    const M = n(), T = n();
    return {
      key: M,
      value: T
    };
  }
  function a() {
    if (r >= e.length)
      throw new Error("Format Error: Unexpected End of PSBT");
    const M = e.readUInt8(r) === 0;
    return M && r++, M;
  }
  if (i() !== 1886610036)
    throw new Error("Format Error: Invalid Magic Number");
  if (o() !== 255)
    throw new Error(
      "Format Error: Magic Number must be followed by 0xff separator"
    );
  const c = [], d = {};
  for (; !a(); ) {
    const M = s(), T = M.key.toString("hex");
    if (d[T])
      throw new Error(
        "Format Error: Keys must be unique for global keymap: key " + T
      );
    d[T] = 1, c.push(M);
  }
  const w = c.filter(
    (M) => M.key[0] === _e.GlobalTypes.UNSIGNED_TX
  );
  if (w.length !== 1)
    throw new Error("Format Error: Only one UNSIGNED_TX allowed");
  const g = t(w[0].value), { inputCount: O, outputCount: N } = g.getInputOutputCounts(), B = [], I = [];
  for (const M of Ia.range(O)) {
    const T = {}, k = [];
    for (; !a(); ) {
      const F = s(), X = F.key.toString("hex");
      if (T[X])
        throw new Error(
          "Format Error: Keys must be unique for each input: input index " + M + " key " + X
        );
      T[X] = 1, k.push(F);
    }
    B.push(k);
  }
  for (const M of Ia.range(N)) {
    const T = {}, k = [];
    for (; !a(); ) {
      const F = s(), X = F.key.toString("hex");
      if (T[X])
        throw new Error(
          "Format Error: Keys must be unique for each output: output index " + M + " key " + X
        );
      T[X] = 1, k.push(F);
    }
    I.push(k);
  }
  return ig(g, {
    globalMapKeyVals: c,
    inputKeyVals: B,
    outputKeyVals: I
  });
}
xs.psbtFromBuffer = $S;
function Ht(e, t, r) {
  if (!t.equals(Buffer.from([r])))
    throw new Error(
      `Format Error: Invalid ${e} key: ${t.toString("hex")}`
    );
}
xs.checkKeyBuffer = Ht;
function ig(e, { globalMapKeyVals: t, inputKeyVals: r, outputKeyVals: n }) {
  const i = {
    unsignedTx: e
  };
  let o = 0;
  for (const w of t)
    switch (w.key[0]) {
      case _e.GlobalTypes.UNSIGNED_TX:
        if (Ht(
          "global",
          w.key,
          _e.GlobalTypes.UNSIGNED_TX
        ), o > 0)
          throw new Error("Format Error: GlobalMap has multiple UNSIGNED_TX");
        o++;
        break;
      case _e.GlobalTypes.GLOBAL_XPUB:
        i.globalXpub === void 0 && (i.globalXpub = []), i.globalXpub.push(je.globals.globalXpub.decode(w));
        break;
      default:
        i.unknownKeyVals || (i.unknownKeyVals = []), i.unknownKeyVals.push(w);
    }
  const s = r.length, a = n.length, c = [], d = [];
  for (const w of Ia.range(s)) {
    const g = {};
    for (const O of r[w])
      switch (je.inputs.checkPubkey(O), O.key[0]) {
        case _e.InputTypes.NON_WITNESS_UTXO:
          if (Ht(
            "input",
            O.key,
            _e.InputTypes.NON_WITNESS_UTXO
          ), g.nonWitnessUtxo !== void 0)
            throw new Error(
              "Format Error: Input has multiple NON_WITNESS_UTXO"
            );
          g.nonWitnessUtxo = je.inputs.nonWitnessUtxo.decode(O);
          break;
        case _e.InputTypes.WITNESS_UTXO:
          if (Ht(
            "input",
            O.key,
            _e.InputTypes.WITNESS_UTXO
          ), g.witnessUtxo !== void 0)
            throw new Error("Format Error: Input has multiple WITNESS_UTXO");
          g.witnessUtxo = je.inputs.witnessUtxo.decode(O);
          break;
        case _e.InputTypes.PARTIAL_SIG:
          g.partialSig === void 0 && (g.partialSig = []), g.partialSig.push(je.inputs.partialSig.decode(O));
          break;
        case _e.InputTypes.SIGHASH_TYPE:
          if (Ht(
            "input",
            O.key,
            _e.InputTypes.SIGHASH_TYPE
          ), g.sighashType !== void 0)
            throw new Error("Format Error: Input has multiple SIGHASH_TYPE");
          g.sighashType = je.inputs.sighashType.decode(O);
          break;
        case _e.InputTypes.REDEEM_SCRIPT:
          if (Ht(
            "input",
            O.key,
            _e.InputTypes.REDEEM_SCRIPT
          ), g.redeemScript !== void 0)
            throw new Error("Format Error: Input has multiple REDEEM_SCRIPT");
          g.redeemScript = je.inputs.redeemScript.decode(O);
          break;
        case _e.InputTypes.WITNESS_SCRIPT:
          if (Ht(
            "input",
            O.key,
            _e.InputTypes.WITNESS_SCRIPT
          ), g.witnessScript !== void 0)
            throw new Error("Format Error: Input has multiple WITNESS_SCRIPT");
          g.witnessScript = je.inputs.witnessScript.decode(O);
          break;
        case _e.InputTypes.BIP32_DERIVATION:
          g.bip32Derivation === void 0 && (g.bip32Derivation = []), g.bip32Derivation.push(
            je.inputs.bip32Derivation.decode(O)
          );
          break;
        case _e.InputTypes.FINAL_SCRIPTSIG:
          Ht(
            "input",
            O.key,
            _e.InputTypes.FINAL_SCRIPTSIG
          ), g.finalScriptSig = je.inputs.finalScriptSig.decode(O);
          break;
        case _e.InputTypes.FINAL_SCRIPTWITNESS:
          Ht(
            "input",
            O.key,
            _e.InputTypes.FINAL_SCRIPTWITNESS
          ), g.finalScriptWitness = je.inputs.finalScriptWitness.decode(
            O
          );
          break;
        case _e.InputTypes.POR_COMMITMENT:
          Ht(
            "input",
            O.key,
            _e.InputTypes.POR_COMMITMENT
          ), g.porCommitment = je.inputs.porCommitment.decode(O);
          break;
        case _e.InputTypes.TAP_KEY_SIG:
          Ht(
            "input",
            O.key,
            _e.InputTypes.TAP_KEY_SIG
          ), g.tapKeySig = je.inputs.tapKeySig.decode(O);
          break;
        case _e.InputTypes.TAP_SCRIPT_SIG:
          g.tapScriptSig === void 0 && (g.tapScriptSig = []), g.tapScriptSig.push(je.inputs.tapScriptSig.decode(O));
          break;
        case _e.InputTypes.TAP_LEAF_SCRIPT:
          g.tapLeafScript === void 0 && (g.tapLeafScript = []), g.tapLeafScript.push(je.inputs.tapLeafScript.decode(O));
          break;
        case _e.InputTypes.TAP_BIP32_DERIVATION:
          g.tapBip32Derivation === void 0 && (g.tapBip32Derivation = []), g.tapBip32Derivation.push(
            je.inputs.tapBip32Derivation.decode(O)
          );
          break;
        case _e.InputTypes.TAP_INTERNAL_KEY:
          Ht(
            "input",
            O.key,
            _e.InputTypes.TAP_INTERNAL_KEY
          ), g.tapInternalKey = je.inputs.tapInternalKey.decode(O);
          break;
        case _e.InputTypes.TAP_MERKLE_ROOT:
          Ht(
            "input",
            O.key,
            _e.InputTypes.TAP_MERKLE_ROOT
          ), g.tapMerkleRoot = je.inputs.tapMerkleRoot.decode(O);
          break;
        default:
          g.unknownKeyVals || (g.unknownKeyVals = []), g.unknownKeyVals.push(O);
      }
    c.push(g);
  }
  for (const w of Ia.range(a)) {
    const g = {};
    for (const O of n[w])
      switch (je.outputs.checkPubkey(O), O.key[0]) {
        case _e.OutputTypes.REDEEM_SCRIPT:
          if (Ht(
            "output",
            O.key,
            _e.OutputTypes.REDEEM_SCRIPT
          ), g.redeemScript !== void 0)
            throw new Error("Format Error: Output has multiple REDEEM_SCRIPT");
          g.redeemScript = je.outputs.redeemScript.decode(O);
          break;
        case _e.OutputTypes.WITNESS_SCRIPT:
          if (Ht(
            "output",
            O.key,
            _e.OutputTypes.WITNESS_SCRIPT
          ), g.witnessScript !== void 0)
            throw new Error("Format Error: Output has multiple WITNESS_SCRIPT");
          g.witnessScript = je.outputs.witnessScript.decode(O);
          break;
        case _e.OutputTypes.BIP32_DERIVATION:
          g.bip32Derivation === void 0 && (g.bip32Derivation = []), g.bip32Derivation.push(
            je.outputs.bip32Derivation.decode(O)
          );
          break;
        case _e.OutputTypes.TAP_INTERNAL_KEY:
          Ht(
            "output",
            O.key,
            _e.OutputTypes.TAP_INTERNAL_KEY
          ), g.tapInternalKey = je.outputs.tapInternalKey.decode(O);
          break;
        case _e.OutputTypes.TAP_TREE:
          Ht(
            "output",
            O.key,
            _e.OutputTypes.TAP_TREE
          ), g.tapTree = je.outputs.tapTree.decode(O);
          break;
        case _e.OutputTypes.TAP_BIP32_DERIVATION:
          g.tapBip32Derivation === void 0 && (g.tapBip32Derivation = []), g.tapBip32Derivation.push(
            je.outputs.tapBip32Derivation.decode(O)
          );
          break;
        default:
          g.unknownKeyVals || (g.unknownKeyVals = []), g.unknownKeyVals.push(O);
      }
    d.push(g);
  }
  return { globalMap: i, inputs: c, outputs: d };
}
xs.psbtFromKeyVals = ig;
var yf = {};
Object.defineProperty(yf, "__esModule", { value: !0 });
const Lc = Bi, gd = rn;
function FS({ globalMap: e, inputs: t, outputs: r }) {
  const { globalKeyVals: n, inputKeyVals: i, outputKeyVals: o } = og({
    globalMap: e,
    inputs: t,
    outputs: r
  }), s = gd.keyValsToBuffer(n), a = (g) => g.length === 0 ? [Buffer.from([0])] : g.map(gd.keyValsToBuffer), c = a(i), d = a(o), w = Buffer.allocUnsafe(5);
  return w.writeUIntBE(482972169471, 0, 5), Buffer.concat(
    [w, s].concat(c, d)
  );
}
yf.psbtToBuffer = FS;
const KS = (e, t) => e.key.compare(t.key);
function Dc(e, t) {
  const r = /* @__PURE__ */ new Set(), n = Object.entries(e).reduce((o, [s, a]) => {
    if (s === "unknownKeyVals")
      return o;
    const c = t[s];
    if (c === void 0)
      return o;
    const d = (Array.isArray(a) ? a : [a]).map(
      c.encode
    );
    return d.map((g) => g.key.toString("hex")).forEach((g) => {
      if (r.has(g))
        throw new Error("Serialize Error: Duplicate key: " + g);
      r.add(g);
    }), o.concat(d);
  }, []), i = e.unknownKeyVals ? e.unknownKeyVals.filter((o) => !r.has(o.key.toString("hex"))) : [];
  return n.concat(i).sort(KS);
}
function og({ globalMap: e, inputs: t, outputs: r }) {
  return {
    globalKeyVals: Dc(e, Lc.globals),
    inputKeyVals: t.map((n) => Dc(n, Lc.inputs)),
    outputKeyVals: r.map((n) => Dc(n, Lc.outputs))
  };
}
yf.psbtToKeyVals = og;
(function(e) {
  function t(r) {
    for (var n in r)
      e.hasOwnProperty(n) || (e[n] = r[n]);
  }
  Object.defineProperty(e, "__esModule", { value: !0 }), t(xs), t(yf);
})(Th);
Object.defineProperty(Ih, "__esModule", { value: !0 });
const $c = Th;
function GS(e) {
  const t = e[0], r = $c.psbtToKeyVals(t), n = e.slice(1);
  if (n.length === 0)
    throw new Error("Combine: Nothing to combine");
  const i = yd(t);
  if (i === void 0)
    throw new Error("Combine: Self missing transaction");
  const o = Ji(r.globalKeyVals), s = r.inputKeyVals.map(Ji), a = r.outputKeyVals.map(Ji);
  for (const c of n) {
    const d = yd(c);
    if (d === void 0 || !d.toBuffer().equals(i.toBuffer()))
      throw new Error(
        "Combine: One of the Psbts does not have the same transaction."
      );
    const w = $c.psbtToKeyVals(c);
    Ji(w.globalKeyVals).forEach(
      Fc(
        o,
        r.globalKeyVals,
        w.globalKeyVals
      )
    ), w.inputKeyVals.map(Ji).forEach(
      (B, I) => B.forEach(
        Fc(
          s[I],
          r.inputKeyVals[I],
          w.inputKeyVals[I]
        )
      )
    ), w.outputKeyVals.map(Ji).forEach(
      (B, I) => B.forEach(
        Fc(
          a[I],
          r.outputKeyVals[I],
          w.outputKeyVals[I]
        )
      )
    );
  }
  return $c.psbtFromKeyVals(i, {
    globalMapKeyVals: r.globalKeyVals,
    inputKeyVals: r.inputKeyVals,
    outputKeyVals: r.outputKeyVals
  });
}
Ih.combine = GS;
function Fc(e, t, r) {
  return (n) => {
    if (e.has(n))
      return;
    const i = r.filter((o) => o.key.toString("hex") === n)[0];
    t.push(i), e.add(n);
  };
}
function yd(e) {
  return e.globalMap.unsignedTx;
}
function Ji(e) {
  const t = /* @__PURE__ */ new Set();
  return e.forEach((r) => {
    const n = r.key.toString("hex");
    if (t.has(n))
      throw new Error("Combine: KeyValue Map keys should be unique");
    t.add(n);
  }), t;
}
var Uh = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 });
  const t = Bi;
  function r(N, B) {
    const I = N[B];
    if (I === void 0)
      throw new Error(`No input #${B}`);
    return I;
  }
  e.checkForInput = r;
  function n(N, B) {
    const I = N[B];
    if (I === void 0)
      throw new Error(`No output #${B}`);
    return I;
  }
  e.checkForOutput = n;
  function i(N, B, I) {
    if (N.key[0] < I)
      throw new Error(
        "Use the method for your specific key instead of addUnknownKeyVal*"
      );
    if (B && B.filter((M) => M.key.equals(N.key)).length !== 0)
      throw new Error(`Duplicate Key: ${N.key.toString("hex")}`);
  }
  e.checkHasKey = i;
  function o(N) {
    let B = 0;
    return Object.keys(N).forEach((I) => {
      Number(isNaN(Number(I))) && B++;
    }), B;
  }
  e.getEnumLength = o;
  function s(N, B) {
    let I = !1;
    if (B.nonWitnessUtxo || B.witnessUtxo) {
      const M = !!B.redeemScript, T = !!B.witnessScript, k = !M || !!B.finalScriptSig, F = !T || !!B.finalScriptWitness, X = !!B.finalScriptSig || !!B.finalScriptWitness;
      I = k && F && X;
    }
    if (I === !1)
      throw new Error(
        `Input #${N} has too much or too little data to clean`
      );
  }
  e.inputCheckUncleanFinalized = s;
  function a(N, B, I, M) {
    throw new Error(
      `Data for ${N} key ${B} is incorrect: Expected ${I} and got ${JSON.stringify(M)}`
    );
  }
  function c(N) {
    return (B, I) => {
      for (const M of Object.keys(B)) {
        const T = B[M], { canAdd: k, canAddToArray: F, check: X, expected: Z } = (
          // @ts-ignore
          t[N + "s"][M] || {}
        ), z = !!F;
        if (X)
          if (z) {
            if (!Array.isArray(T) || // @ts-ignore
            I[M] && !Array.isArray(I[M]))
              throw new Error(`Key type ${M} must be an array`);
            T.every(X) || a(N, M, Z, T);
            const te = I[M] || [], b = /* @__PURE__ */ new Set();
            if (!T.every((A) => F(te, A, b)))
              throw new Error("Can not add duplicate data to array");
            I[M] = te.concat(T);
          } else {
            if (X(T) || a(N, M, Z, T), !k(I, T))
              throw new Error(`Can not add duplicate data to ${N}`);
            I[M] = T;
          }
      }
    };
  }
  e.updateGlobal = c("global"), e.updateInput = c("input"), e.updateOutput = c("output");
  function d(N, B) {
    const I = N.length - 1, M = r(N, I);
    e.updateInput(B, M);
  }
  e.addInputAttributes = d;
  function w(N, B) {
    const I = N.length - 1, M = n(N, I);
    e.updateOutput(B, M);
  }
  e.addOutputAttributes = w;
  function g(N, B) {
    if (!Buffer.isBuffer(B) || B.length < 4)
      throw new Error("Set Version: Invalid Transaction");
    return B.writeUInt32LE(N, 0), B;
  }
  e.defaultVersionSetter = g;
  function O(N, B) {
    if (!Buffer.isBuffer(B) || B.length < 4)
      throw new Error("Set Locktime: Invalid Transaction");
    return B.writeUInt32LE(N, B.length - 4), B;
  }
  e.defaultLocktimeSetter = O;
})(Uh);
Object.defineProperty(xh, "__esModule", { value: !0 });
const VS = Ih, wd = Th, Kc = Ut, Ct = Uh;
let qS = class {
  constructor(t) {
    this.inputs = [], this.outputs = [], this.globalMap = {
      unsignedTx: t
    };
  }
  static fromBase64(t, r) {
    const n = Buffer.from(t, "base64");
    return this.fromBuffer(n, r);
  }
  static fromHex(t, r) {
    const n = Buffer.from(t, "hex");
    return this.fromBuffer(n, r);
  }
  static fromBuffer(t, r) {
    const n = wd.psbtFromBuffer(t, r), i = new this(n.globalMap.unsignedTx);
    return Object.assign(i, n), i;
  }
  toBase64() {
    return this.toBuffer().toString("base64");
  }
  toHex() {
    return this.toBuffer().toString("hex");
  }
  toBuffer() {
    return wd.psbtToBuffer(this);
  }
  updateGlobal(t) {
    return Ct.updateGlobal(t, this.globalMap), this;
  }
  updateInput(t, r) {
    const n = Ct.checkForInput(this.inputs, t);
    return Ct.updateInput(r, n), this;
  }
  updateOutput(t, r) {
    const n = Ct.checkForOutput(this.outputs, t);
    return Ct.updateOutput(r, n), this;
  }
  addUnknownKeyValToGlobal(t) {
    return Ct.checkHasKey(
      t,
      this.globalMap.unknownKeyVals,
      Ct.getEnumLength(Kc.GlobalTypes)
    ), this.globalMap.unknownKeyVals || (this.globalMap.unknownKeyVals = []), this.globalMap.unknownKeyVals.push(t), this;
  }
  addUnknownKeyValToInput(t, r) {
    const n = Ct.checkForInput(this.inputs, t);
    return Ct.checkHasKey(
      r,
      n.unknownKeyVals,
      Ct.getEnumLength(Kc.InputTypes)
    ), n.unknownKeyVals || (n.unknownKeyVals = []), n.unknownKeyVals.push(r), this;
  }
  addUnknownKeyValToOutput(t, r) {
    const n = Ct.checkForOutput(this.outputs, t);
    return Ct.checkHasKey(
      r,
      n.unknownKeyVals,
      Ct.getEnumLength(Kc.OutputTypes)
    ), n.unknownKeyVals || (n.unknownKeyVals = []), n.unknownKeyVals.push(r), this;
  }
  addInput(t) {
    this.globalMap.unsignedTx.addInput(t), this.inputs.push({
      unknownKeyVals: []
    });
    const r = t.unknownKeyVals || [], n = this.inputs.length - 1;
    if (!Array.isArray(r))
      throw new Error("unknownKeyVals must be an Array");
    return r.forEach(
      (i) => this.addUnknownKeyValToInput(n, i)
    ), Ct.addInputAttributes(this.inputs, t), this;
  }
  addOutput(t) {
    this.globalMap.unsignedTx.addOutput(t), this.outputs.push({
      unknownKeyVals: []
    });
    const r = t.unknownKeyVals || [], n = this.outputs.length - 1;
    if (!Array.isArray(r))
      throw new Error("unknownKeyVals must be an Array");
    return r.forEach(
      (i) => this.addUnknownKeyValToOutput(n, i)
    ), Ct.addOutputAttributes(this.outputs, t), this;
  }
  clearFinalizedInput(t) {
    const r = Ct.checkForInput(this.inputs, t);
    Ct.inputCheckUncleanFinalized(t, r);
    for (const n of Object.keys(r))
      [
        "witnessUtxo",
        "nonWitnessUtxo",
        "finalScriptSig",
        "finalScriptWitness",
        "unknownKeyVals"
      ].includes(n) || delete r[n];
    return this;
  }
  combine(...t) {
    const r = VS.combine([this].concat(t));
    return Object.assign(this, r), this;
  }
  getTransaction() {
    return this.globalMap.unsignedTx.toBuffer();
  }
};
xh.Psbt = qS;
var Je = {}, Fe = {};
Object.defineProperty(Fe, "__esModule", { value: !0 });
Fe.signatureBlocksAction = Fe.checkInputForSig = Fe.pubkeyInScript = Fe.pubkeyPositionInScript = Fe.witnessStackToScriptWitness = Fe.isP2TR = Fe.isP2SHScript = Fe.isP2WSHScript = Fe.isP2WPKH = Fe.isP2PKH = Fe.isP2PK = Fe.isP2MS = void 0;
const vd = Fr, es = rr, Zs = ti, WS = et, Gi = Bo;
function Vi(e) {
  return (t) => {
    try {
      return e({ output: t }), !0;
    } catch {
      return !1;
    }
  };
}
Fe.isP2MS = Vi(Gi.p2ms);
Fe.isP2PK = Vi(Gi.p2pk);
Fe.isP2PKH = Vi(Gi.p2pkh);
Fe.isP2WPKH = Vi(Gi.p2wpkh);
Fe.isP2WSHScript = Vi(Gi.p2wsh);
Fe.isP2SHScript = Vi(Gi.p2sh);
Fe.isP2TR = Vi(Gi.p2tr);
function jS(e) {
  let t = Buffer.allocUnsafe(0);
  function r(s) {
    t = Buffer.concat([t, Buffer.from(s)]);
  }
  function n(s) {
    const a = t.length, c = vd.encodingLength(s);
    t = Buffer.concat([t, Buffer.allocUnsafe(c)]), vd.encode(s, t, a);
  }
  function i(s) {
    n(s.length), r(s);
  }
  function o(s) {
    n(s.length), s.forEach(i);
  }
  return o(e), t;
}
Fe.witnessStackToScriptWitness = jS;
function sg(e, t) {
  const r = (0, WS.hash160)(e), n = e.slice(1, 33), i = es.decompile(t);
  if (i === null)
    throw new Error("Unknown script error");
  return i.findIndex((o) => typeof o == "number" ? !1 : o.equals(e) || o.equals(r) || o.equals(n));
}
Fe.pubkeyPositionInScript = sg;
function zS(e, t) {
  return sg(e, t) !== -1;
}
Fe.pubkeyInScript = zS;
function XS(e, t) {
  return YS(e).some(
    (n) => ag(n, es.signature.decode, t)
  );
}
Fe.checkInputForSig = XS;
function ag(e, t, r) {
  const { hashType: n } = t(e), i = [];
  switch (n & Zs.Transaction.SIGHASH_ANYONECANPAY && i.push("addInput"), n & 31) {
    case Zs.Transaction.SIGHASH_ALL:
      break;
    case Zs.Transaction.SIGHASH_SINGLE:
    case Zs.Transaction.SIGHASH_NONE:
      i.push("addOutput"), i.push("setInputSequence");
      break;
  }
  return i.indexOf(r) === -1;
}
Fe.signatureBlocksAction = ag;
function YS(e) {
  let t = [];
  if ((e.partialSig || []).length === 0) {
    if (!e.finalScriptSig && !e.finalScriptWitness)
      return [];
    t = ZS(e);
  } else
    t = e.partialSig;
  return t.map((r) => r.signature);
}
function ZS(e) {
  const t = e.finalScriptSig ? es.decompile(e.finalScriptSig) || [] : [], r = e.finalScriptWitness ? es.decompile(e.finalScriptWitness) || [] : [];
  return t.concat(r).filter((n) => Buffer.isBuffer(n) && es.isCanonicalScriptSignature(n)).map((n) => ({ signature: n }));
}
Object.defineProperty(Je, "__esModule", { value: !0 });
Je.checkTaprootInputForSigs = Je.tapTreeFromList = Je.tapTreeToList = Je.tweakInternalPubKey = Je.checkTaprootOutputFields = Je.checkTaprootInputFields = Je.isTaprootOutput = Je.isTaprootInput = Je.serializeTaprootSignature = Je.tapScriptFinalizer = Je.toXOnly = void 0;
const Ch = $t, JS = ti, wf = Fe, Zn = uf, QS = Bo, e3 = Fe, t3 = (e) => e.length === 32 ? e : e.slice(1, 33);
Je.toXOnly = t3;
function r3(e, t, r) {
  const n = m3(
    t,
    e,
    r
  );
  try {
    const o = v3(t, n).concat(n.script).concat(n.controlBlock);
    return {
      finalScriptWitness: (0, wf.witnessStackToScriptWitness)(o)
    };
  } catch (i) {
    throw new Error(`Can not finalize taproot input #${e}: ${i}`);
  }
}
Je.tapScriptFinalizer = r3;
function n3(e, t) {
  const r = t ? Buffer.from([t]) : Buffer.from([]);
  return Buffer.concat([e, r]);
}
Je.serializeTaprootSignature = n3;
function ca(e) {
  return e && !!(e.tapInternalKey || e.tapMerkleRoot || e.tapLeafScript && e.tapLeafScript.length || e.tapBip32Derivation && e.tapBip32Derivation.length || e.witnessUtxo && (0, wf.isP2TR)(e.witnessUtxo.script));
}
Je.isTaprootInput = ca;
function ua(e, t) {
  return e && !!(e.tapInternalKey || e.tapTree || e.tapBip32Derivation && e.tapBip32Derivation.length || t && (0, wf.isP2TR)(t));
}
Je.isTaprootOutput = ua;
function i3(e, t, r) {
  g3(e, t, r), w3(e, t, r);
}
Je.checkTaprootInputFields = i3;
function o3(e, t, r) {
  y3(e, t, r), s3(e, t);
}
Je.checkTaprootOutputFields = o3;
function s3(e, t) {
  if (!t.tapTree && !t.tapInternalKey)
    return;
  const r = t.tapInternalKey || e.tapInternalKey, n = t.tapTree || e.tapTree;
  if (r) {
    const { script: i } = e, o = a3(r, n);
    if (i && !i.equals(o))
      throw new Error("Error adding output. Script or address missmatch.");
  }
}
function a3(e, t) {
  const r = t && fg(t.leaves), { output: n } = (0, QS.p2tr)({
    internalPubkey: e,
    scriptTree: r
  });
  return n;
}
function f3(e, t) {
  const r = t.tapInternalKey, n = r && (0, Zn.tweakKey)(r, t.tapMerkleRoot);
  if (!n)
    throw new Error(
      `Cannot tweak tap internal key for input #${e}. Public key: ${r && r.toString("hex")}`
    );
  return n.x;
}
Je.tweakInternalPubKey = f3;
function c3(e) {
  if (!(0, Ch.isTaptree)(e))
    throw new Error(
      "Cannot convert taptree to tapleaf list. Expecting a tapree structure."
    );
  return xu(e);
}
Je.tapTreeToList = c3;
function fg(e = []) {
  return e.length === 1 && e[0].depth === 0 ? {
    output: e[0].script,
    version: e[0].leafVersion
  } : p3(e);
}
Je.tapTreeFromList = fg;
function u3(e, t) {
  return l3(e).some(
    (n) => (0, e3.signatureBlocksAction)(n, h3, t)
  );
}
Je.checkTaprootInputForSigs = u3;
function h3(e) {
  return {
    signature: e.slice(0, 64),
    hashType: e.slice(64)[0] || JS.Transaction.SIGHASH_DEFAULT
  };
}
function l3(e) {
  const t = [];
  if (e.tapKeySig && t.push(e.tapKeySig), e.tapScriptSig && t.push(...e.tapScriptSig.map((r) => r.signature)), !t.length) {
    const r = d3(e.finalScriptWitness);
    r && t.push(r);
  }
  return t;
}
function d3(e) {
  if (!e)
    return;
  const t = e.slice(2);
  if (t.length === 64 || t.length === 65)
    return t;
}
function xu(e, t = [], r = 0) {
  if (r > Zn.MAX_TAPTREE_DEPTH)
    throw new Error("Max taptree depth exceeded.");
  return e ? (0, Ch.isTapleaf)(e) ? (t.push({
    depth: r,
    leafVersion: e.version || Zn.LEAF_VERSION_TAPSCRIPT,
    script: e.output
  }), t) : (e[0] && xu(e[0], t, r + 1), e[1] && xu(e[1], t, r + 1), t) : [];
}
function p3(e) {
  let t;
  for (const r of e)
    if (t = Iu(r, t), !t)
      throw new Error("No room left to insert tapleaf in tree");
  return t;
}
function Iu(e, t, r = 0) {
  if (r > Zn.MAX_TAPTREE_DEPTH)
    throw new Error("Max taptree depth exceeded.");
  if (e.depth === r)
    return t ? void 0 : {
      output: e.script,
      version: e.leafVersion
    };
  if ((0, Ch.isTapleaf)(t))
    return;
  const n = Iu(e, t && t[0], r + 1);
  if (n)
    return [n, t && t[1]];
  const i = Iu(e, t && t[1], r + 1);
  if (i)
    return [t && t[0], i];
}
function g3(e, t, r) {
  const n = ca(e) && po(t), i = po(e) && ca(t), o = e === t && ca(t) && po(t);
  if (n || i || o)
    throw new Error(
      `Invalid arguments for Psbt.${r}. Cannot use both taproot and non-taproot fields.`
    );
}
function y3(e, t, r) {
  const n = ua(e) && po(t), i = po(e) && ua(t), o = e === t && ua(t) && po(t);
  if (n || i || o)
    throw new Error(
      `Invalid arguments for Psbt.${r}. Cannot use both taproot and non-taproot fields.`
    );
}
function w3(e, t, r) {
  if (t.tapMerkleRoot) {
    const n = (t.tapLeafScript || []).every(
      (o) => Gc(o, t.tapMerkleRoot)
    ), i = (e.tapLeafScript || []).every(
      (o) => Gc(o, t.tapMerkleRoot)
    );
    if (!n || !i)
      throw new Error(
        `Invalid arguments for Psbt.${r}. Tapleaf not part of taptree.`
      );
  } else if (e.tapMerkleRoot && !(t.tapLeafScript || []).every(
    (i) => Gc(i, e.tapMerkleRoot)
  ))
    throw new Error(
      `Invalid arguments for Psbt.${r}. Tapleaf not part of taptree.`
    );
}
function Gc(e, t) {
  if (!t)
    return !0;
  const r = (0, Zn.tapleafHash)({
    output: e.script,
    version: e.leafVersion
  });
  return (0, Zn.rootHashFromPath)(
    e.controlBlock,
    r
  ).equals(t);
}
function v3(e, t) {
  const r = (0, Zn.tapleafHash)({
    output: t.script,
    version: t.leafVersion
  });
  return (e.tapScriptSig || []).filter((n) => n.leafHash.equals(r)).map((n) => b3(t.script, n)).sort((n, i) => i.positionInScript - n.positionInScript).map((n) => n.signature);
}
function b3(e, t) {
  return Object.assign(
    {
      positionInScript: (0, wf.pubkeyPositionInScript)(
        t.pubkey,
        e
      )
    },
    t
  );
}
function m3(e, t, r) {
  if (!e.tapScriptSig || !e.tapScriptSig.length)
    throw new Error(
      `Can not finalize taproot input #${t}. No tapleaf script signature provided.`
    );
  const n = (e.tapLeafScript || []).sort((i, o) => i.controlBlock.length - o.controlBlock.length).find(
    (i) => E3(i, e.tapScriptSig, r)
  );
  if (!n)
    throw new Error(
      `Can not finalize taproot input #${t}. Signature for tapleaf script not found.`
    );
  return n;
}
function E3(e, t, r) {
  const n = (0, Zn.tapleafHash)({
    output: e.script,
    version: e.leafVersion
  });
  return (!r || r.equals(n)) && t.find((o) => o.leafHash.equals(n)) !== void 0;
}
function po(e) {
  return e && !!(e.redeemScript || e.witnessScript || e.bip32Derivation && e.bip32Derivation.length);
}
Object.defineProperty(pf, "__esModule", { value: !0 });
pf.Psbt = void 0;
const bd = xh, md = Fr, Xt = Uh, Ed = er, Ta = St, _3 = kt, xr = Bo, S3 = uf, bn = rr, Lt = ti, Xe = Je, xt = Fe, x3 = {
  /**
   * A bitcoinjs Network object. This is only used if you pass an `address`
   * parameter to addOutput. Otherwise it is not needed and can be left default.
   */
  network: _3.bitcoin,
  /**
   * When extractTransaction is called, the fee rate is checked.
   * THIS IS NOT TO BE RELIED ON.
   * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.
   */
  maximumFeeRate: 5e3
  // satoshi per byte
};
class Aa {
  static fromBase64(t, r = {}) {
    const n = Buffer.from(t, "base64");
    return this.fromBuffer(n, r);
  }
  static fromHex(t, r = {}) {
    const n = Buffer.from(t, "hex");
    return this.fromBuffer(n, r);
  }
  static fromBuffer(t, r = {}) {
    const n = bd.Psbt.fromBuffer(t, I3), i = new Aa(r, n);
    return P3(i.__CACHE.__TX, i.__CACHE), i;
  }
  constructor(t = {}, r = new bd.Psbt(new cg())) {
    this.data = r, this.opts = Object.assign({}, x3, t), this.__CACHE = {
      __NON_WITNESS_UTXO_TX_CACHE: [],
      __NON_WITNESS_UTXO_BUF_CACHE: [],
      __TX_IN_CACHE: {},
      __TX: this.data.globalMap.unsignedTx.tx,
      // Psbt's predecesor (TransactionBuilder - now removed) behavior
      // was to not confirm input values  before signing.
      // Even though we highly encourage people to get
      // the full parent transaction to verify values, the ability to
      // sign non-segwit inputs without the full transaction was often
      // requested. So the only way to activate is to use @ts-ignore.
      // We will disable exporting the Psbt when unsafe sign is active.
      // because it is not BIP174 compliant.
      __UNSAFE_SIGN_NONSEGWIT: !1
    }, this.data.inputs.length === 0 && this.setVersion(2);
    const n = (i, o, s, a) => Object.defineProperty(i, o, {
      enumerable: s,
      writable: a
    });
    n(this, "__CACHE", !1, !0), n(this, "opts", !1, !0);
  }
  get inputCount() {
    return this.data.inputs.length;
  }
  get version() {
    return this.__CACHE.__TX.version;
  }
  set version(t) {
    this.setVersion(t);
  }
  get locktime() {
    return this.__CACHE.__TX.locktime;
  }
  set locktime(t) {
    this.setLocktime(t);
  }
  get txInputs() {
    return this.__CACHE.__TX.ins.map((t) => ({
      hash: (0, Ta.cloneBuffer)(t.hash),
      index: t.index,
      sequence: t.sequence
    }));
  }
  get txOutputs() {
    return this.__CACHE.__TX.outs.map((t) => {
      let r;
      try {
        r = (0, Ed.fromOutputScript)(
          t.script,
          this.opts.network
        );
      } catch {
      }
      return {
        script: (0, Ta.cloneBuffer)(t.script),
        value: t.value,
        address: r
      };
    });
  }
  combine(...t) {
    return this.data.combine(...t.map((r) => r.data)), this;
  }
  clone() {
    const t = Aa.fromBuffer(this.data.toBuffer());
    return t.opts = JSON.parse(JSON.stringify(this.opts)), t;
  }
  setMaximumFeeRate(t) {
    Js(t), this.opts.maximumFeeRate = t;
  }
  setVersion(t) {
    Js(t), Ko(this.data.inputs, "setVersion");
    const r = this.__CACHE;
    return r.__TX.version = t, r.__EXTRACTED_TX = void 0, this;
  }
  setLocktime(t) {
    Js(t), Ko(this.data.inputs, "setLocktime");
    const r = this.__CACHE;
    return r.__TX.locktime = t, r.__EXTRACTED_TX = void 0, this;
  }
  setInputSequence(t, r) {
    Js(r), Ko(this.data.inputs, "setInputSequence");
    const n = this.__CACHE;
    if (n.__TX.ins.length <= t)
      throw new Error("Input index too high");
    return n.__TX.ins[t].sequence = r, n.__EXTRACTED_TX = void 0, this;
  }
  addInputs(t) {
    return t.forEach((r) => this.addInput(r)), this;
  }
  addInput(t) {
    if (arguments.length > 1 || !t || t.hash === void 0 || t.index === void 0)
      throw new Error(
        "Invalid arguments for Psbt.addInput. Requires single object with at least [hash] and [index]"
      );
    (0, Xe.checkTaprootInputFields)(t, t, "addInput"), Ko(this.data.inputs, "addInput"), t.witnessScript && Oa(t.witnessScript);
    const r = this.__CACHE;
    this.data.addInput(t);
    const n = r.__TX.ins[r.__TX.ins.length - 1];
    lg(r, n);
    const i = this.data.inputs.length - 1, o = this.data.inputs[i];
    return o.nonWitnessUtxo && Au(this.__CACHE, o, i), r.__FEE = void 0, r.__FEE_RATE = void 0, r.__EXTRACTED_TX = void 0, this;
  }
  addOutputs(t) {
    return t.forEach((r) => this.addOutput(r)), this;
  }
  addOutput(t) {
    if (arguments.length > 1 || !t || t.value === void 0 || t.address === void 0 && t.script === void 0)
      throw new Error(
        "Invalid arguments for Psbt.addOutput. Requires single object with at least [script or address] and [value]"
      );
    Ko(this.data.inputs, "addOutput");
    const { address: r } = t;
    if (typeof r == "string") {
      const { network: i } = this.opts, o = (0, Ed.toOutputScript)(r, i);
      t = Object.assign(t, { script: o });
    }
    (0, Xe.checkTaprootOutputFields)(t, t, "addOutput");
    const n = this.__CACHE;
    return this.data.addOutput(t), n.__FEE = void 0, n.__FEE_RATE = void 0, n.__EXTRACTED_TX = void 0, this;
  }
  extractTransaction(t) {
    if (!this.data.inputs.every(ug))
      throw new Error("Not finalized");
    const r = this.__CACHE;
    if (t || A3(this, r, this.opts), r.__EXTRACTED_TX)
      return r.__EXTRACTED_TX;
    const n = r.__TX.clone();
    return wg(this.data.inputs, n, r, !0), n;
  }
  getFeeRate() {
    return Td(
      "__FEE_RATE",
      "fee rate",
      this.data.inputs,
      this.__CACHE
    );
  }
  getFee() {
    return Td("__FEE", "fee", this.data.inputs, this.__CACHE);
  }
  finalizeAllInputs() {
    return (0, Xt.checkForInput)(this.data.inputs, 0), Go(this.data.inputs.length).forEach((t) => this.finalizeInput(t)), this;
  }
  finalizeInput(t, r) {
    const n = (0, Xt.checkForInput)(this.data.inputs, t);
    return (0, Xe.isTaprootInput)(n) ? this._finalizeTaprootInput(
      t,
      n,
      void 0,
      r
    ) : this._finalizeInput(t, n, r);
  }
  finalizeTaprootInput(t, r, n = Xe.tapScriptFinalizer) {
    const i = (0, Xt.checkForInput)(this.data.inputs, t);
    if ((0, Xe.isTaprootInput)(i))
      return this._finalizeTaprootInput(
        t,
        i,
        r,
        n
      );
    throw new Error(`Cannot finalize input #${t}. Not Taproot.`);
  }
  _finalizeInput(t, r, n = N3) {
    const { script: i, isP2SH: o, isP2WSH: s, isSegwit: a } = U3(
      t,
      r,
      this.__CACHE
    );
    if (!i)
      throw new Error(`No script found for input #${t}`);
    O3(r);
    const { finalScriptSig: c, finalScriptWitness: d } = n(
      t,
      r,
      i,
      a,
      o,
      s
    );
    if (c && this.data.updateInput(t, { finalScriptSig: c }), d && this.data.updateInput(t, { finalScriptWitness: d }), !c && !d)
      throw new Error(`Unknown error finalizing input #${t}`);
    return this.data.clearFinalizedInput(t), this;
  }
  _finalizeTaprootInput(t, r, n, i = Xe.tapScriptFinalizer) {
    if (!r.witnessUtxo)
      throw new Error(
        `Cannot finalize input #${t}. Missing withness utxo.`
      );
    if (r.tapKeySig) {
      const o = xr.p2tr({
        output: r.witnessUtxo.script,
        signature: r.tapKeySig
      }), s = (0, xt.witnessStackToScriptWitness)(
        o.witness
      );
      this.data.updateInput(t, { finalScriptWitness: s });
    } else {
      const { finalScriptWitness: o } = i(
        t,
        r,
        n
      );
      this.data.updateInput(t, { finalScriptWitness: o });
    }
    return this.data.clearFinalizedInput(t), this;
  }
  getInputType(t) {
    const r = (0, Xt.checkForInput)(this.data.inputs, t), n = vg(t, r, this.__CACHE), i = bf(
      n,
      t,
      "input",
      r.redeemScript || $3(r.finalScriptSig),
      r.witnessScript || F3(r.finalScriptWitness)
    ), o = i.type === "raw" ? "" : i.type + "-", s = Eg(i.meaningfulScript);
    return o + s;
  }
  inputHasPubkey(t, r) {
    const n = (0, Xt.checkForInput)(this.data.inputs, t);
    return L3(r, n, t, this.__CACHE);
  }
  inputHasHDKey(t, r) {
    const n = (0, Xt.checkForInput)(this.data.inputs, t), i = Sd(r);
    return !!n.bip32Derivation && n.bip32Derivation.some(i);
  }
  outputHasPubkey(t, r) {
    const n = (0, Xt.checkForOutput)(this.data.outputs, t);
    return D3(r, n, t, this.__CACHE);
  }
  outputHasHDKey(t, r) {
    const n = (0, Xt.checkForOutput)(this.data.outputs, t), i = Sd(r);
    return !!n.bip32Derivation && n.bip32Derivation.some(i);
  }
  validateSignaturesOfAllInputs(t) {
    return (0, Xt.checkForInput)(this.data.inputs, 0), Go(this.data.inputs.length).map(
      (n) => this.validateSignaturesOfInput(n, t)
    ).reduce((n, i) => i === !0 && n, !0);
  }
  validateSignaturesOfInput(t, r, n) {
    const i = this.data.inputs[t];
    return (0, Xe.isTaprootInput)(i) ? this.validateSignaturesOfTaprootInput(
      t,
      r,
      n
    ) : this._validateSignaturesOfInput(t, r, n);
  }
  _validateSignaturesOfInput(t, r, n) {
    const i = this.data.inputs[t], o = (i || {}).partialSig;
    if (!i || !o || o.length < 1)
      throw new Error("No signatures to validate");
    if (typeof r != "function")
      throw new Error("Need validator function to validate signatures");
    const s = n ? o.filter((g) => g.pubkey.equals(n)) : o;
    if (s.length < 1)
      throw new Error("No signatures for this pubkey");
    const a = [];
    let c, d, w;
    for (const g of s) {
      const O = bn.signature.decode(g.signature), { hash: N, script: B } = w !== O.hashType ? pg(
        t,
        Object.assign({}, i, { sighashType: O.hashType }),
        this.__CACHE,
        !0
      ) : { hash: c, script: d };
      w = O.hashType, c = N, d = B, hg(g.pubkey, B, "verify"), a.push(r(g.pubkey, N, O.signature));
    }
    return a.every((g) => g === !0);
  }
  validateSignaturesOfTaprootInput(t, r, n) {
    const i = this.data.inputs[t], o = (i || {}).tapKeySig, s = (i || {}).tapScriptSig;
    if (!i && !o && !(s && !s.length))
      throw new Error("No signatures to validate");
    if (typeof r != "function")
      throw new Error("Need validator function to validate signatures");
    n = n && (0, Xe.toXOnly)(n);
    const a = n ? Tu(
      t,
      i,
      this.data.inputs,
      n,
      this.__CACHE
    ) : k3(
      t,
      i,
      this.data.inputs,
      this.__CACHE
    );
    if (!a.length)
      throw new Error("No signatures for this pubkey");
    const c = a.find((d) => !!d.leafHash);
    if (o && c && !r(
      c.pubkey,
      c.hash,
      o
    ))
      return !1;
    if (s)
      for (const d of s) {
        const w = a.find((g) => d.pubkey.equals(g.pubkey));
        if (w && !r(
          d.pubkey,
          w.hash,
          d.signature
        ))
          return !1;
      }
    return !0;
  }
  signAllInputsHD(t, r = [Lt.Transaction.SIGHASH_ALL]) {
    if (!t || !t.publicKey || !t.fingerprint)
      throw new Error("Need HDSigner to sign input");
    const n = [];
    for (const i of Go(this.data.inputs.length))
      try {
        this.signInputHD(i, t, r), n.push(!0);
      } catch {
        n.push(!1);
      }
    if (n.every((i) => i === !1))
      throw new Error("No inputs were signed");
    return this;
  }
  signAllInputsHDAsync(t, r = [Lt.Transaction.SIGHASH_ALL]) {
    return new Promise((n, i) => {
      if (!t || !t.publicKey || !t.fingerprint)
        return i(new Error("Need HDSigner to sign input"));
      const o = [], s = [];
      for (const a of Go(this.data.inputs.length))
        s.push(
          this.signInputHDAsync(a, t, r).then(
            () => {
              o.push(!0);
            },
            () => {
              o.push(!1);
            }
          )
        );
      return Promise.all(s).then(() => {
        if (o.every((a) => a === !1))
          return i(new Error("No inputs were signed"));
        n();
      });
    });
  }
  signInputHD(t, r, n = [Lt.Transaction.SIGHASH_ALL]) {
    if (!r || !r.publicKey || !r.fingerprint)
      throw new Error("Need HDSigner to sign input");
    return Od(t, this.data.inputs, r).forEach((o) => this.signInput(t, o, n)), this;
  }
  signInputHDAsync(t, r, n = [Lt.Transaction.SIGHASH_ALL]) {
    return new Promise((i, o) => {
      if (!r || !r.publicKey || !r.fingerprint)
        return o(new Error("Need HDSigner to sign input"));
      const a = Od(t, this.data.inputs, r).map(
        (c) => this.signInputAsync(t, c, n)
      );
      return Promise.all(a).then(() => {
        i();
      }).catch(o);
    });
  }
  signAllInputs(t, r) {
    if (!t || !t.publicKey)
      throw new Error("Need Signer to sign input");
    const n = [];
    for (const i of Go(this.data.inputs.length))
      try {
        this.signInput(i, t, r), n.push(!0);
      } catch {
        n.push(!1);
      }
    if (n.every((i) => i === !1))
      throw new Error("No inputs were signed");
    return this;
  }
  signAllInputsAsync(t, r) {
    return new Promise((n, i) => {
      if (!t || !t.publicKey)
        return i(new Error("Need Signer to sign input"));
      const o = [], s = [];
      for (const [a] of this.data.inputs.entries())
        s.push(
          this.signInputAsync(a, t, r).then(
            () => {
              o.push(!0);
            },
            () => {
              o.push(!1);
            }
          )
        );
      return Promise.all(s).then(() => {
        if (o.every((a) => a === !1))
          return i(new Error("No inputs were signed"));
        n();
      });
    });
  }
  signInput(t, r, n) {
    if (!r || !r.publicKey)
      throw new Error("Need Signer to sign input");
    const i = (0, Xt.checkForInput)(this.data.inputs, t);
    return (0, Xe.isTaprootInput)(i) ? this._signTaprootInput(
      t,
      i,
      r,
      void 0,
      n
    ) : this._signInput(t, r, n);
  }
  signTaprootInput(t, r, n, i) {
    if (!r || !r.publicKey)
      throw new Error("Need Signer to sign input");
    const o = (0, Xt.checkForInput)(this.data.inputs, t);
    if ((0, Xe.isTaprootInput)(o))
      return this._signTaprootInput(
        t,
        o,
        r,
        n,
        i
      );
    throw new Error(`Input #${t} is not of type Taproot.`);
  }
  _signInput(t, r, n = [Lt.Transaction.SIGHASH_ALL]) {
    const { hash: i, sighashType: o } = Ad(
      this.data.inputs,
      t,
      r.publicKey,
      this.__CACHE,
      n
    ), s = [
      {
        pubkey: r.publicKey,
        signature: bn.signature.encode(r.sign(i), o)
      }
    ];
    return this.data.updateInput(t, { partialSig: s }), this;
  }
  _signTaprootInput(t, r, n, i, o = [Lt.Transaction.SIGHASH_DEFAULT]) {
    const s = this.checkTaprootHashesForSig(
      t,
      r,
      n,
      i,
      o
    ), a = s.filter((d) => !d.leafHash).map(
      (d) => (0, Xe.serializeTaprootSignature)(
        n.signSchnorr(d.hash),
        r.sighashType
      )
    )[0], c = s.filter((d) => !!d.leafHash).map((d) => ({
      pubkey: (0, Xe.toXOnly)(n.publicKey),
      signature: (0, Xe.serializeTaprootSignature)(
        n.signSchnorr(d.hash),
        r.sighashType
      ),
      leafHash: d.leafHash
    }));
    return a && this.data.updateInput(t, { tapKeySig: a }), c.length && this.data.updateInput(t, { tapScriptSig: c }), this;
  }
  signInputAsync(t, r, n) {
    return Promise.resolve().then(() => {
      if (!r || !r.publicKey)
        throw new Error("Need Signer to sign input");
      const i = (0, Xt.checkForInput)(this.data.inputs, t);
      return (0, Xe.isTaprootInput)(i) ? this._signTaprootInputAsync(
        t,
        i,
        r,
        void 0,
        n
      ) : this._signInputAsync(t, r, n);
    });
  }
  signTaprootInputAsync(t, r, n, i) {
    return Promise.resolve().then(() => {
      if (!r || !r.publicKey)
        throw new Error("Need Signer to sign input");
      const o = (0, Xt.checkForInput)(this.data.inputs, t);
      if ((0, Xe.isTaprootInput)(o))
        return this._signTaprootInputAsync(
          t,
          o,
          r,
          n,
          i
        );
      throw new Error(`Input #${t} is not of type Taproot.`);
    });
  }
  _signInputAsync(t, r, n = [Lt.Transaction.SIGHASH_ALL]) {
    const { hash: i, sighashType: o } = Ad(
      this.data.inputs,
      t,
      r.publicKey,
      this.__CACHE,
      n
    );
    return Promise.resolve(r.sign(i)).then((s) => {
      const a = [
        {
          pubkey: r.publicKey,
          signature: bn.signature.encode(s, o)
        }
      ];
      this.data.updateInput(t, { partialSig: a });
    });
  }
  async _signTaprootInputAsync(t, r, n, i, o = [Lt.Transaction.SIGHASH_DEFAULT]) {
    const s = this.checkTaprootHashesForSig(
      t,
      r,
      n,
      i,
      o
    ), a = [], c = s.filter((w) => !w.leafHash)[0];
    if (c) {
      const w = Promise.resolve(
        n.signSchnorr(c.hash)
      ).then((g) => ({
        tapKeySig: (0, Xe.serializeTaprootSignature)(
          g,
          r.sighashType
        )
      }));
      a.push(w);
    }
    const d = s.filter((w) => !!w.leafHash);
    if (d.length) {
      const w = d.map((g) => Promise.resolve(n.signSchnorr(g.hash)).then(
        (O) => ({ tapScriptSig: [
          {
            pubkey: (0, Xe.toXOnly)(n.publicKey),
            signature: (0, Xe.serializeTaprootSignature)(
              O,
              r.sighashType
            ),
            leafHash: g.leafHash
          }
        ] })
      ));
      a.push(...w);
    }
    return Promise.all(a).then((w) => {
      w.forEach((g) => this.data.updateInput(t, g));
    });
  }
  checkTaprootHashesForSig(t, r, n, i, o) {
    if (typeof n.signSchnorr != "function")
      throw new Error(
        `Need Schnorr Signer to sign taproot input #${t}.`
      );
    const s = Tu(
      t,
      r,
      this.data.inputs,
      n.publicKey,
      this.__CACHE,
      i,
      o
    );
    if (!s || !s.length)
      throw new Error(
        `Can not sign for input #${t} with the key ${n.publicKey.toString(
          "hex"
        )}`
      );
    return s;
  }
  toBuffer() {
    return Vc(this.__CACHE), this.data.toBuffer();
  }
  toHex() {
    return Vc(this.__CACHE), this.data.toHex();
  }
  toBase64() {
    return Vc(this.__CACHE), this.data.toBase64();
  }
  updateGlobal(t) {
    return this.data.updateGlobal(t), this;
  }
  updateInput(t, r) {
    return r.witnessScript && Oa(r.witnessScript), (0, Xe.checkTaprootInputFields)(
      this.data.inputs[t],
      r,
      "updateInput"
    ), this.data.updateInput(t, r), r.nonWitnessUtxo && Au(
      this.__CACHE,
      this.data.inputs[t],
      t
    ), this;
  }
  updateOutput(t, r) {
    const n = this.data.outputs[t];
    return (0, Xe.checkTaprootOutputFields)(
      n,
      r,
      "updateOutput"
    ), this.data.updateOutput(t, r), this;
  }
  addUnknownKeyValToGlobal(t) {
    return this.data.addUnknownKeyValToGlobal(t), this;
  }
  addUnknownKeyValToInput(t, r) {
    return this.data.addUnknownKeyValToInput(t, r), this;
  }
  addUnknownKeyValToOutput(t, r) {
    return this.data.addUnknownKeyValToOutput(t, r), this;
  }
  clearFinalizedInput(t) {
    return this.data.clearFinalizedInput(t), this;
  }
}
pf.Psbt = Aa;
const I3 = (e) => new cg(e);
class cg {
  constructor(t = Buffer.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0])) {
    this.tx = Lt.Transaction.fromBuffer(t), B3(this.tx), Object.defineProperty(this, "tx", {
      enumerable: !1,
      writable: !0
    });
  }
  getInputOutputCounts() {
    return {
      inputCount: this.tx.ins.length,
      outputCount: this.tx.outs.length
    };
  }
  addInput(t) {
    if (t.hash === void 0 || t.index === void 0 || !Buffer.isBuffer(t.hash) && typeof t.hash != "string" || typeof t.index != "number")
      throw new Error("Error adding input.");
    const r = typeof t.hash == "string" ? (0, Ta.reverseBuffer)(Buffer.from(t.hash, "hex")) : t.hash;
    this.tx.addInput(r, t.index, t.sequence);
  }
  addOutput(t) {
    if (t.script === void 0 || t.value === void 0 || !Buffer.isBuffer(t.script) || typeof t.value != "number")
      throw new Error("Error adding output.");
    this.tx.addOutput(t.script, t.value);
  }
  toBuffer() {
    return this.tx.toBuffer();
  }
}
function T3(e, t, r) {
  switch (r) {
    case "pubkey":
    case "pubkeyhash":
    case "witnesspubkeyhash":
      return _d(1, e.partialSig);
    case "multisig":
      const n = xr.p2ms({ output: t });
      return _d(n.m, e.partialSig, n.pubkeys);
    default:
      return !1;
  }
}
function Vc(e) {
  if (e.__UNSAFE_SIGN_NONSEGWIT !== !1)
    throw new Error("Not BIP174 compliant, can not export");
}
function _d(e, t, r) {
  if (!t)
    return !1;
  let n;
  if (r ? n = r.map((i) => {
    const o = K3(i);
    return t.find((s) => s.pubkey.equals(o));
  }).filter((i) => !!i) : n = t, n.length > e)
    throw new Error("Too many signatures");
  return n.length === e;
}
function ug(e) {
  return !!e.finalScriptSig || !!e.finalScriptWitness;
}
function Sd(e) {
  return (t) => !(!t.masterFingerprint.equals(e.fingerprint) || !e.derivePath(t.path).publicKey.equals(t.pubkey));
}
function Js(e) {
  if (typeof e != "number" || e !== Math.floor(e) || e > 4294967295 || e < 0)
    throw new Error("Invalid 32 bit integer");
}
function A3(e, t, r) {
  const n = t.__FEE_RATE || e.getFeeRate(), i = t.__EXTRACTED_TX.virtualSize(), o = n * i;
  if (n >= r.maximumFeeRate)
    throw new Error(
      `Warning: You are paying around ${(o / 1e8).toFixed(8)} in fees, which is ${n} satoshi per byte for a transaction with a VSize of ${i} bytes (segwit counted as 0.25 byte per byte). Use setMaximumFeeRate method to raise your threshold, or pass true to the first arg of extractTransaction.`
    );
}
function Ko(e, t) {
  e.forEach((r) => {
    if ((0, Xe.isTaprootInput)(r) ? (0, Xe.checkTaprootInputForSigs)(r, t) : (0, xt.checkInputForSig)(r, t))
      throw new Error("Can not modify transaction, signatures exist.");
  });
}
function O3(e) {
  if (!e.sighashType || !e.partialSig)
    return;
  const { partialSig: t, sighashType: r } = e;
  t.forEach((n) => {
    const { hashType: i } = bn.signature.decode(n.signature);
    if (r !== i)
      throw new Error("Signature sighash does not match input sighash type");
  });
}
function hg(e, t, r) {
  if (!(0, xt.pubkeyInScript)(e, t))
    throw new Error(
      `Can not ${r} for this input with the key ${e.toString("hex")}`
    );
}
function B3(e) {
  if (!e.ins.every(
    (r) => r.script && r.script.length === 0 && r.witness && r.witness.length === 0
  ))
    throw new Error("Format Error: Transaction ScriptSigs are not empty");
}
function P3(e, t) {
  e.ins.forEach((r) => {
    lg(t, r);
  });
}
function lg(e, t) {
  const r = (0, Ta.reverseBuffer)(Buffer.from(t.hash)).toString("hex") + ":" + t.index;
  if (e.__TX_IN_CACHE[r])
    throw new Error("Duplicate input detected.");
  e.__TX_IN_CACHE[r] = 1;
}
function dg(e, t) {
  return (r, n, i, o) => {
    const s = e({
      redeem: { output: i }
    }).output;
    if (!n.equals(s))
      throw new Error(
        `${t} for ${o} #${r} doesn't match the scriptPubKey in the prevout`
      );
  };
}
const xd = dg(xr.p2sh, "Redeem script"), Id = dg(
  xr.p2wsh,
  "Witness script"
);
function Td(e, t, r, n) {
  if (!r.every(ug))
    throw new Error(`PSBT must be finalized to calculate ${t}`);
  if (e === "__FEE_RATE" && n.__FEE_RATE)
    return n.__FEE_RATE;
  if (e === "__FEE" && n.__FEE)
    return n.__FEE;
  let i, o = !0;
  if (n.__EXTRACTED_TX ? (i = n.__EXTRACTED_TX, o = !1) : i = n.__TX.clone(), wg(r, i, n, o), e === "__FEE_RATE")
    return n.__FEE_RATE;
  if (e === "__FEE")
    return n.__FEE;
}
function N3(e, t, r, n, i, o) {
  const s = Eg(r);
  if (!T3(t, r, s))
    throw new Error(`Can not finalize input #${e}`);
  return R3(
    r,
    s,
    t.partialSig,
    n,
    i,
    o
  );
}
function R3(e, t, r, n, i, o) {
  let s, a;
  const c = M3(e, t, r), d = o ? xr.p2wsh({ redeem: c }) : null, w = i ? xr.p2sh({ redeem: d || c }) : null;
  return n ? (d ? a = (0, xt.witnessStackToScriptWitness)(
    d.witness
  ) : a = (0, xt.witnessStackToScriptWitness)(
    c.witness
  ), w && (s = w.input)) : w ? s = w.input : s = c.input, {
    finalScriptSig: s,
    finalScriptWitness: a
  };
}
function Ad(e, t, r, n, i) {
  const o = (0, Xt.checkForInput)(e, t), { hash: s, sighashType: a, script: c } = pg(
    t,
    o,
    n,
    !1,
    i
  );
  return hg(r, c, "sign"), {
    hash: s,
    sighashType: a
  };
}
function pg(e, t, r, n, i) {
  const o = r.__TX, s = t.sighashType || Lt.Transaction.SIGHASH_ALL;
  gg(s, i);
  let a, c;
  if (t.nonWitnessUtxo) {
    const g = vf(
      r,
      t,
      e
    ), O = o.ins[e].hash, N = g.getHash();
    if (!O.equals(N))
      throw new Error(
        `Non-witness UTXO hash for input #${e} doesn't match the hash specified in the prevout`
      );
    const B = o.ins[e].index;
    c = g.outs[B];
  } else if (t.witnessUtxo)
    c = t.witnessUtxo;
  else
    throw new Error("Need a Utxo input item for signing");
  const { meaningfulScript: d, type: w } = bf(
    c.script,
    e,
    "input",
    t.redeemScript,
    t.witnessScript
  );
  if (["p2sh-p2wsh", "p2wsh"].indexOf(w) >= 0)
    a = o.hashForWitnessV0(
      e,
      d,
      c.value,
      s
    );
  else if ((0, xt.isP2WPKH)(d)) {
    const g = xr.p2pkh({
      hash: d.slice(2)
    }).output;
    a = o.hashForWitnessV0(
      e,
      g,
      c.value,
      s
    );
  } else {
    if (t.nonWitnessUtxo === void 0 && r.__UNSAFE_SIGN_NONSEGWIT === !1)
      throw new Error(
        `Input #${e} has witnessUtxo but non-segwit script: ${d.toString("hex")}`
      );
    !n && r.__UNSAFE_SIGN_NONSEGWIT !== !1 && console.warn(
      `Warning: Signing non-segwit inputs without the full parent transaction means there is a chance that a miner could feed you incorrect information to trick you into paying large fees. This behavior is the same as Psbt's predecesor (TransactionBuilder - now removed) when signing non-segwit scripts. You are not able to export this Psbt with toBuffer|toBase64|toHex since it is not BIP174 compliant.
*********************
PROCEED WITH CAUTION!
*********************`
    ), a = o.hashForSignature(
      e,
      d,
      s
    );
  }
  return {
    script: d,
    sighashType: s,
    hash: a
  };
}
function k3(e, t, r, n) {
  const i = [];
  if (t.tapInternalKey) {
    const s = (0, Xe.tweakInternalPubKey)(e, t);
    i.push(s);
  }
  if (t.tapScriptSig) {
    const s = t.tapScriptSig.map((a) => a.pubkey);
    i.push(...s);
  }
  return i.map(
    (s) => Tu(e, t, r, s, n)
  ).flat();
}
function Tu(e, t, r, n, i, o, s) {
  const a = i.__TX, c = t.sighashType || Lt.Transaction.SIGHASH_DEFAULT;
  gg(c, s);
  const d = r.map(
    (B, I) => bg(I, B, i)
  ), w = d.map((B) => B.script), g = d.map((B) => B.value), O = [];
  if (t.tapInternalKey && !o) {
    const B = (0, Xe.tweakInternalPubKey)(e, t);
    if ((0, Xe.toXOnly)(n).equals(B)) {
      const I = a.hashForWitnessV1(
        e,
        w,
        g,
        c
      );
      O.push({ pubkey: n, hash: I });
    }
  }
  const N = (t.tapLeafScript || []).filter((B) => (0, xt.pubkeyInScript)(n, B.script)).map((B) => {
    const I = (0, S3.tapleafHash)({
      output: B.script,
      version: B.leafVersion
    });
    return Object.assign({ hash: I }, B);
  }).filter(
    (B) => !o || o.equals(B.hash)
  ).map((B) => {
    const I = a.hashForWitnessV1(
      e,
      w,
      g,
      Lt.Transaction.SIGHASH_DEFAULT,
      B.hash
    );
    return {
      pubkey: n,
      hash: I,
      leafHash: B.hash
    };
  });
  return O.concat(N);
}
function gg(e, t) {
  if (t && t.indexOf(e) < 0) {
    const r = H3(e);
    throw new Error(
      `Sighash type is not allowed. Retry the sign method passing the sighashTypes array of whitelisted types. Sighash type: ${r}`
    );
  }
}
function M3(e, t, r) {
  let n;
  switch (t) {
    case "multisig":
      const i = C3(e, r);
      n = xr.p2ms({
        output: e,
        signatures: i
      });
      break;
    case "pubkey":
      n = xr.p2pk({
        output: e,
        signature: r[0].signature
      });
      break;
    case "pubkeyhash":
      n = xr.p2pkh({
        output: e,
        pubkey: r[0].pubkey,
        signature: r[0].signature
      });
      break;
    case "witnesspubkeyhash":
      n = xr.p2wpkh({
        output: e,
        pubkey: r[0].pubkey,
        signature: r[0].signature
      });
      break;
  }
  return n;
}
function U3(e, t, r) {
  const n = r.__TX, i = {
    script: null,
    isSegwit: !1,
    isP2SH: !1,
    isP2WSH: !1
  };
  if (i.isP2SH = !!t.redeemScript, i.isP2WSH = !!t.witnessScript, t.witnessScript)
    i.script = t.witnessScript;
  else if (t.redeemScript)
    i.script = t.redeemScript;
  else if (t.nonWitnessUtxo) {
    const o = vf(
      r,
      t,
      e
    ), s = n.ins[e].index;
    i.script = o.outs[s].script;
  } else
    t.witnessUtxo && (i.script = t.witnessUtxo.script);
  return (t.witnessScript || (0, xt.isP2WPKH)(i.script)) && (i.isSegwit = !0), i;
}
function Od(e, t, r) {
  const n = (0, Xt.checkForInput)(t, e);
  if (!n.bip32Derivation || n.bip32Derivation.length === 0)
    throw new Error("Need bip32Derivation to sign with HD");
  const i = n.bip32Derivation.map((s) => {
    if (s.masterFingerprint.equals(r.fingerprint))
      return s;
  }).filter((s) => !!s);
  if (i.length === 0)
    throw new Error(
      "Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint"
    );
  return i.map((s) => {
    const a = r.derivePath(s.path);
    if (!s.pubkey.equals(a.publicKey))
      throw new Error("pubkey did not match bip32Derivation");
    return a;
  });
}
function C3(e, t) {
  return xr.p2ms({ output: e }).pubkeys.map((n) => (t.filter((i) => i.pubkey.equals(n))[0] || {}).signature).filter((n) => !!n);
}
function yg(e) {
  let t = 0;
  function r(s) {
    return t += s, e.slice(t - s, t);
  }
  function n() {
    const s = md.decode(e, t);
    return t += md.decode.bytes, s;
  }
  function i() {
    return r(n());
  }
  function o() {
    const s = n(), a = [];
    for (let c = 0; c < s; c++)
      a.push(i());
    return a;
  }
  return o();
}
function H3(e) {
  let t = e & Lt.Transaction.SIGHASH_ANYONECANPAY ? "SIGHASH_ANYONECANPAY | " : "";
  switch (e & 31) {
    case Lt.Transaction.SIGHASH_ALL:
      t += "SIGHASH_ALL";
      break;
    case Lt.Transaction.SIGHASH_SINGLE:
      t += "SIGHASH_SINGLE";
      break;
    case Lt.Transaction.SIGHASH_NONE:
      t += "SIGHASH_NONE";
      break;
  }
  return t;
}
function Au(e, t, r) {
  e.__NON_WITNESS_UTXO_BUF_CACHE[r] = t.nonWitnessUtxo;
  const n = Lt.Transaction.fromBuffer(t.nonWitnessUtxo);
  e.__NON_WITNESS_UTXO_TX_CACHE[r] = n;
  const i = e, o = r;
  delete t.nonWitnessUtxo, Object.defineProperty(t, "nonWitnessUtxo", {
    enumerable: !0,
    get() {
      const s = i.__NON_WITNESS_UTXO_BUF_CACHE[o], a = i.__NON_WITNESS_UTXO_TX_CACHE[o];
      if (s !== void 0)
        return s;
      {
        const c = a.toBuffer();
        return i.__NON_WITNESS_UTXO_BUF_CACHE[o] = c, c;
      }
    },
    set(s) {
      i.__NON_WITNESS_UTXO_BUF_CACHE[o] = s;
    }
  });
}
function wg(e, t, r, n) {
  let i = 0;
  e.forEach((c, d) => {
    if (n && c.finalScriptSig && (t.ins[d].script = c.finalScriptSig), n && c.finalScriptWitness && (t.ins[d].witness = yg(
      c.finalScriptWitness
    )), c.witnessUtxo)
      i += c.witnessUtxo.value;
    else if (c.nonWitnessUtxo) {
      const w = vf(r, c, d), g = t.ins[d].index, O = w.outs[g];
      i += O.value;
    }
  });
  const o = t.outs.reduce((c, d) => c + d.value, 0), s = i - o;
  if (s < 0)
    throw new Error("Outputs are spending more than Inputs");
  const a = t.virtualSize();
  r.__FEE = s, r.__EXTRACTED_TX = t, r.__FEE_RATE = Math.floor(s / a);
}
function vf(e, t, r) {
  const n = e.__NON_WITNESS_UTXO_TX_CACHE;
  return n[r] || Au(e, t, r), n[r];
}
function vg(e, t, r) {
  const { script: n } = bg(e, t, r);
  return n;
}
function bg(e, t, r) {
  if (t.witnessUtxo !== void 0)
    return {
      script: t.witnessUtxo.script,
      value: t.witnessUtxo.value
    };
  if (t.nonWitnessUtxo !== void 0) {
    const i = vf(
      r,
      t,
      e
    ).outs[r.__TX.ins[e].index];
    return { script: i.script, value: i.value };
  } else
    throw new Error("Can't find pubkey in input without Utxo data");
}
function L3(e, t, r, n) {
  const i = vg(r, t, n), { meaningfulScript: o } = bf(
    i,
    r,
    "input",
    t.redeemScript,
    t.witnessScript
  );
  return (0, xt.pubkeyInScript)(e, o);
}
function D3(e, t, r, n) {
  const i = n.__TX.outs[r].script, { meaningfulScript: o } = bf(
    i,
    r,
    "output",
    t.redeemScript,
    t.witnessScript
  );
  return (0, xt.pubkeyInScript)(e, o);
}
function $3(e) {
  if (!e)
    return;
  const t = bn.decompile(e);
  if (!t)
    return;
  const r = t[t.length - 1];
  if (!(!Buffer.isBuffer(r) || mg(r) || G3(r) || !bn.decompile(r)))
    return r;
}
function F3(e) {
  if (!e)
    return;
  const t = yg(e), r = t[t.length - 1];
  if (!(mg(r) || !bn.decompile(r)))
    return r;
}
function K3(e) {
  if (e.length === 65) {
    const t = e[64] & 1, r = e.slice(0, 33);
    return r[0] = 2 | t, r;
  }
  return e.slice();
}
function mg(e) {
  return e.length === 33 && bn.isCanonicalPubKey(e);
}
function G3(e) {
  return bn.isCanonicalScriptSignature(e);
}
function bf(e, t, r, n, i) {
  const o = (0, xt.isP2SHScript)(e), s = o && n && (0, xt.isP2WSHScript)(n), a = (0, xt.isP2WSHScript)(e);
  if (o && n === void 0)
    throw new Error("scriptPubkey is P2SH but redeemScript missing");
  if ((a || s) && i === void 0)
    throw new Error(
      "scriptPubkey or redeemScript is P2WSH but witnessScript missing"
    );
  let c;
  return s ? (c = i, xd(t, e, n, r), Id(t, n, i, r), Oa(c)) : a ? (c = i, Id(t, e, i, r), Oa(c)) : o ? (c = n, xd(t, e, n, r)) : c = e, {
    meaningfulScript: c,
    type: s ? "p2sh-p2wsh" : o ? "p2sh" : a ? "p2wsh" : "raw"
  };
}
function Oa(e) {
  if ((0, xt.isP2WPKH)(e) || (0, xt.isP2SHScript)(e))
    throw new Error("P2WPKH or P2SH can not be contained within P2WSH");
}
function Eg(e) {
  return (0, xt.isP2WPKH)(e) ? "witnesspubkeyhash" : (0, xt.isP2PKH)(e) ? "pubkeyhash" : (0, xt.isP2MS)(e) ? "multisig" : (0, xt.isP2PK)(e) ? "pubkey" : "nonstandard";
}
function Go(e) {
  return [...Array(e).keys()];
}
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.initEccLib = e.Transaction = e.opcodes = e.Psbt = e.Block = e.script = e.payments = e.networks = e.crypto = e.address = void 0;
  const t = er;
  e.address = t;
  const r = et;
  e.crypto = r;
  const n = kt;
  e.networks = n;
  const i = Bo;
  e.payments = i;
  const o = rr;
  e.script = o;
  var s = lf;
  Object.defineProperty(e, "Block", {
    enumerable: !0,
    get: function() {
      return s.Block;
    }
  });
  var a = pf;
  Object.defineProperty(e, "Psbt", {
    enumerable: !0,
    get: function() {
      return a.Psbt;
    }
  });
  var c = Xn;
  Object.defineProperty(e, "opcodes", {
    enumerable: !0,
    get: function() {
      return c.OPS;
    }
  });
  var d = ti;
  Object.defineProperty(e, "Transaction", {
    enumerable: !0,
    get: function() {
      return d.Transaction;
    }
  });
  var w = Yn;
  Object.defineProperty(e, "initEccLib", {
    enumerable: !0,
    get: function() {
      return w.initEccLib;
    }
  });
})(_n);
var Hh = {}, xo = {}, Io = {};
Object.defineProperty(Io, "__esModule", { value: !0 });
Io.testnet = Io.bitcoin = void 0;
Io.bitcoin = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "bc",
  bip32: {
    public: 76067358,
    private: 76066276
  },
  pubKeyHash: 0,
  scriptHash: 5,
  wif: 128
};
Io.testnet = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "tb",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
var _g = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.maybe = e.Boolean = e.Array = e.Buffer256bit = e.Network = e.typeforce = void 0, e.typeforce = Ve, e.Network = e.typeforce.compile({
    messagePrefix: e.typeforce.oneOf(
      e.typeforce.Buffer,
      e.typeforce.String
    ),
    bip32: {
      public: e.typeforce.UInt32,
      private: e.typeforce.UInt32
    },
    pubKeyHash: e.typeforce.UInt8,
    scriptHash: e.typeforce.UInt8,
    wif: e.typeforce.UInt8
  }), e.Buffer256bit = e.typeforce.BufferN(32), e.Array = e.typeforce.Array, e.Boolean = e.typeforce.Boolean, e.maybe = e.typeforce.maybe;
})(_g);
var Ou = { exports: {} }, qc = 65536, V3 = 4294967295;
function q3() {
  throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`);
}
var W3 = Ce.Buffer, Ba = En.crypto || En.msCrypto;
Ba && Ba.getRandomValues ? Ou.exports = j3 : Ou.exports = q3;
function j3(e, t) {
  if (e > V3)
    throw new RangeError("requested too many random bytes");
  var r = W3.allocUnsafe(e);
  if (e > 0)
    if (e > qc)
      for (var n = 0; n < e; n += qc)
        Ba.getRandomValues(r.slice(n, n + qc));
    else
      Ba.getRandomValues(r);
  return typeof t == "function" ? process.nextTick(function() {
    t(null, r);
  }) : r;
}
var Sg = Ou.exports, Bu = Oi;
function xg(e, t) {
  if (t !== void 0 && e[0] !== t)
    throw new Error("Invalid network version");
  if (e.length === 33)
    return {
      version: e[0],
      privateKey: e.slice(1, 33),
      compressed: !1
    };
  if (e.length !== 34)
    throw new Error("Invalid WIF length");
  if (e[33] !== 1)
    throw new Error("Invalid compression flag");
  return {
    version: e[0],
    privateKey: e.slice(1, 33),
    compressed: !0
  };
}
function Pu(e, t, r) {
  var n = new Buffer(r ? 34 : 33);
  return n.writeUInt8(e, 0), t.copy(n, 1), r && (n[33] = 1), n;
}
function z3(e, t) {
  return xg(Bu.decode(e), t);
}
function X3(e, t, r) {
  return typeof e == "number" ? Bu.encode(Pu(e, t, r)) : Bu.encode(
    Pu(
      e.version,
      e.privateKey,
      e.compressed
    )
  );
}
var Ig = {
  decode: z3,
  decodeRaw: xg,
  encode: X3,
  encodeRaw: Pu
}, mf = {};
Object.defineProperty(mf, "__esModule", { value: !0 });
mf.testEcc = void 0;
const He = (e) => Buffer.from(e, "hex");
function Y3(e) {
  qt(
    e.isPoint(
      He("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), qt(
    !e.isPoint(
      He("030000000000000000000000000000000000000000000000000000000000000005")
    )
  ), qt(
    e.isPrivate(
      He("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), qt(
    e.isPrivate(
      He("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
    )
  ), qt(
    !e.isPrivate(
      He("0000000000000000000000000000000000000000000000000000000000000000")
    )
  ), qt(
    !e.isPrivate(
      He("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")
    )
  ), qt(
    !e.isPrivate(
      He("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142")
    )
  ), qt(
    Buffer.from(
      e.pointCompress(
        He(
          "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
        ),
        !0
      )
    ).equals(
      He("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), qt(
    Buffer.from(
      e.pointCompress(
        He(
          "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
        ),
        !1
      )
    ).equals(
      He(
        "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
      )
    )
  ), qt(
    Buffer.from(
      e.pointCompress(
        He("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
        !0
      )
    ).equals(
      He("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), qt(
    Buffer.from(
      e.pointCompress(
        He("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
        !1
      )
    ).equals(
      He(
        "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
      )
    )
  ), qt(
    Buffer.from(
      e.pointFromScalar(
        He("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")
      )
    ).equals(
      He("02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99")
    )
  ), qt(
    Buffer.from(
      e.sign(
        He("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"),
        He("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
      )
    ).equals(
      He(
        "54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"
      )
    )
  ), qt(
    e.verify(
      He("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"),
      He("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
      He(
        "54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"
      )
    )
  ), e.signSchnorr && qt(
    Buffer.from(
      e.signSchnorr(
        He("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"),
        He("c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9"),
        He("c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906")
      )
    ).equals(
      He(
        "5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7"
      )
    )
  ), e.verifySchnorr && qt(
    e.verifySchnorr(
      He("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"),
      He("dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8"),
      He(
        "5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7"
      )
    )
  );
}
mf.testEcc = Y3;
function qt(e) {
  if (!e)
    throw new Error("ecc library invalid");
}
Object.defineProperty(xo, "__esModule", { value: !0 });
xo.ECPairFactory = xo.networks = void 0;
const Nu = Io;
xo.networks = Nu;
const Yt = _g, Z3 = Sg, Bd = Ig, J3 = mf, Wc = Yt.typeforce.maybe(
  Yt.typeforce.compile({
    compressed: Yt.maybe(Yt.Boolean),
    network: Yt.maybe(Yt.Network)
  })
);
function Q3(e) {
  (0, J3.testEcc)(e);
  function t(a) {
    return e.isPoint(a);
  }
  function r(a, c) {
    if (Yt.typeforce(Yt.Buffer256bit, a), !e.isPrivate(a))
      throw new TypeError("Private key not in range [1, n)");
    return Yt.typeforce(Wc, c), new s(a, void 0, c);
  }
  function n(a, c) {
    return Yt.typeforce(e.isPoint, a), Yt.typeforce(Wc, c), new s(void 0, a, c);
  }
  function i(a, c) {
    const d = Bd.decode(a), w = d.version;
    if (Yt.Array(c)) {
      if (c = c.filter((g) => w === g.wif).pop(), !c)
        throw new Error("Unknown network version");
    } else if (c = c || Nu.bitcoin, w !== c.wif)
      throw new Error("Invalid network version");
    return r(d.privateKey, {
      compressed: d.compressed,
      network: c
    });
  }
  function o(a) {
    Yt.typeforce(Wc, a), a === void 0 && (a = {});
    const c = a.rng || Z3;
    let d;
    do
      d = c(32), Yt.typeforce(Yt.Buffer256bit, d);
    while (!e.isPrivate(d));
    return r(d, a);
  }
  class s {
    constructor(c, d, w) {
      Yi(this, "__D");
      Yi(this, "__Q");
      Yi(this, "compressed");
      Yi(this, "network");
      Yi(this, "lowR");
      this.__D = c, this.__Q = d, this.lowR = !1, w === void 0 && (w = {}), this.compressed = w.compressed === void 0 ? !0 : w.compressed, this.network = w.network || Nu.bitcoin, d !== void 0 && (this.__Q = Buffer.from(e.pointCompress(d, this.compressed)));
    }
    get privateKey() {
      return this.__D;
    }
    get publicKey() {
      if (!this.__Q) {
        const c = e.pointFromScalar(this.__D, this.compressed);
        this.__Q = Buffer.from(c);
      }
      return this.__Q;
    }
    toWIF() {
      if (!this.__D)
        throw new Error("Missing private key");
      return Bd.encode(this.network.wif, this.__D, this.compressed);
    }
    sign(c, d) {
      if (!this.__D)
        throw new Error("Missing private key");
      if (d === void 0 && (d = this.lowR), d === !1)
        return Buffer.from(e.sign(c, this.__D));
      {
        let w = e.sign(c, this.__D);
        const g = Buffer.alloc(32, 0);
        let O = 0;
        for (; w[0] > 127; )
          O++, g.writeUIntLE(O, 0, 6), w = e.sign(c, this.__D, g);
        return Buffer.from(w);
      }
    }
    signSchnorr(c) {
      if (!this.privateKey)
        throw new Error("Missing private key");
      if (!e.signSchnorr)
        throw new Error("signSchnorr not supported by ecc library");
      return Buffer.from(e.signSchnorr(c, this.privateKey));
    }
    verify(c, d) {
      return e.verify(c, this.publicKey, d);
    }
    verifySchnorr(c, d) {
      if (!e.verifySchnorr)
        throw new Error("verifySchnorr not supported by ecc library");
      return e.verifySchnorr(c, this.publicKey.subarray(1, 33), d);
    }
  }
  return {
    isPoint: t,
    fromPrivateKey: r,
    fromPublicKey: n,
    fromWIF: i,
    makeRandom: o
  };
}
xo.ECPairFactory = Q3;
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.networks = e.ECPairFactory = e.default = void 0;
  var t = xo;
  Object.defineProperty(e, "default", {
    enumerable: !0,
    get: function() {
      return t.ECPairFactory;
    }
  }), Object.defineProperty(e, "ECPairFactory", {
    enumerable: !0,
    get: function() {
      return t.ECPairFactory;
    }
  }), Object.defineProperty(e, "networks", {
    enumerable: !0,
    get: function() {
      return t.networks;
    }
  });
})(Hh);
const Tg = (e) => {
  switch (e) {
    case Ue.Bitcoin:
    case Ue.BitcoinCash:
      return 550;
    case Ue.Litecoin:
      return 5500;
    case Ue.Dogecoin:
      return 1e5;
    default:
      throw new Error("Invalid Chain");
  }
}, Is = ({
  inputs: e,
  outputs: t,
  feeRate: r,
  chain: n = Ue.Bitcoin
}) => {
  r = Math.ceil(r);
  const i = "address" in e[0] ? Dh(e[0].address) : Lh.P2PKH, o = e.filter((g) => ts(g) * r <= g.value), s = Ag + t.reduce((g, O) => g + Mu(O, i), 0), a = t.reduce((g, O) => g + O.value, 0);
  let c = s * r, d = 0, w = [];
  for (const g of o) {
    const O = ts(g), N = r * O;
    c += N, d += g.value, w.push(g);
    const B = c + a;
    if (d < B)
      continue;
    const I = d - B, M = r * Mu({ address: "", value: 0 }, i);
    if (I > M) {
      const T = M + c, k = d - (a + T);
      if (k > Math.max(ts({}) * r, Tg(n)))
        return {
          inputs: w,
          outputs: t.concat({ value: k, address: "" }),
          fee: T
        };
    }
    return {
      inputs: w,
      outputs: t,
      fee: c
    };
  }
  return { fee: r * $h({ inputs: e, outputs: t, feeRate: r }) };
}, wN = 1e3, Ag = 4 + 1 + 1 + 4, ex = 1 + 8 + 1, tx = 32 + 4 + 1 + 4, rx = 107, Ts = (e) => {
  const t = Buffer.from(e, "utf8");
  return _n.script.compile([_n.opcodes.OP_RETURN, t]);
};
var Lh = /* @__PURE__ */ ((e) => (e.P2PKH = "P2PKH", e.P2WPKH = "P2WPKH", e))(Lh || {});
const Ru = {
  P2PKH: 148,
  //   [UTXOScriptType.P2SH]: 91,
  P2WPKH: 68
}, ku = {
  P2PKH: 34,
  //   [UTXOScriptType.P2SH]: 91,
  P2WPKH: 31
}, Dh = (e) => {
  if (e.startsWith("bc1") || e.startsWith("ltc1"))
    return "P2WPKH";
  if (e.startsWith("1") || e.startsWith("L") || e.startsWith("D") || e.startsWith("bitcoincash:q") || e.startsWith("q"))
    return "P2PKH";
  throw new Error("Invalid address");
}, $h = ({ inputs: e, outputs: t, feeRate: r }) => {
  const n = "address" in e[0] ? Dh(e[0].address) : "P2PKH", i = e.filter(
    (s) => s.value >= Ru[
      "type" in s ? s.type : "P2PKH"
      /* P2PKH */
    ] * Math.ceil(r)
  ).reduce((s, a) => s + ts(a), 0), o = (t == null ? void 0 : t.reduce((s, a) => s + Mu(a), 0)) || ku[n];
  return Ag + i + o;
}, ts = (e) => "type" in e ? Ru[e.type] : "address" in e ? Ru[Dh(e.address)] : tx + rx, Mu = (e, t) => "script" in e ? ex + e.script.length + (e.script.length >= 74 ? 2 : 1) : t ? ku[t] : ku.P2PKH;
function Uu(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function nx(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function Og(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function ix(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Uu(e.outputLen), Uu(e.blockLen);
}
function ox(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function sx(e, t) {
  Og(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const Ir = {
  number: Uu,
  bool: nx,
  bytes: Og,
  hash: ix,
  exists: ox,
  output: sx
};
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const ax = (e) => e instanceof Uint8Array, ha = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), Wr = (e, t) => e << 32 - t | e >>> t, fx = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!fx)
  throw new Error("Non little-endian hardware is not supported");
Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function cx(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function cs(e) {
  if (typeof e == "string" && (e = cx(e)), !ax(e))
    throw new Error(`expected Uint8Array, got ${typeof e}`);
  return e;
}
class Bg {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
const ux = (e) => Object.prototype.toString.call(e) === "[object Object]" && e.constructor === Object;
function hx(e, t) {
  if (t !== void 0 && (typeof t != "object" || !ux(t)))
    throw new Error("Options should be object or undefined");
  return Object.assign(e, t);
}
function No(e) {
  const t = (n) => e().update(cs(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
class Pg extends Bg {
  constructor(t, r) {
    super(), this.finished = !1, this.destroyed = !1, Ir.hash(t);
    const n = cs(r);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const i = this.blockLen, o = new Uint8Array(i);
    o.set(n.length > i ? t.create().update(n).digest() : n);
    for (let s = 0; s < o.length; s++)
      o[s] ^= 54;
    this.iHash.update(o), this.oHash = t.create();
    for (let s = 0; s < o.length; s++)
      o[s] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(t) {
    return Ir.exists(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    Ir.exists(this), Ir.bytes(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: r, iHash: n, finished: i, destroyed: o, blockLen: s, outputLen: a } = this;
    return t = t, t.finished = i, t.destroyed = o, t.blockLen = s, t.outputLen = a, t.oHash = r._cloneInto(t.oHash), t.iHash = n._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
}
const Ng = (e, t, r) => new Pg(e, t).update(r).digest();
Ng.create = (e, t) => new Pg(e, t);
function lx(e, t, r, n) {
  Ir.hash(e);
  const i = hx({ dkLen: 32, asyncTick: 10 }, n), { c: o, dkLen: s, asyncTick: a } = i;
  if (Ir.number(o), Ir.number(s), Ir.number(a), o < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const c = cs(t), d = cs(r), w = new Uint8Array(s), g = Ng.create(e, c), O = g._cloneInto().update(d);
  return { c: o, dkLen: s, asyncTick: a, DK: w, PRF: g, PRFSalt: O };
}
function dx(e, t, r, n, i) {
  return e.destroy(), t.destroy(), n && n.destroy(), i.fill(0), r;
}
function px(e, t, r, n) {
  const { c: i, dkLen: o, DK: s, PRF: a, PRFSalt: c } = lx(e, t, r, n);
  let d;
  const w = new Uint8Array(4), g = ha(w), O = new Uint8Array(a.outputLen);
  for (let N = 1, B = 0; B < o; N++, B += a.outputLen) {
    const I = s.subarray(B, B + a.outputLen);
    g.setInt32(0, N, !1), (d = c._cloneInto(d)).update(w).digestInto(O), I.set(O.subarray(0, I.length));
    for (let M = 1; M < i; M++) {
      a._cloneInto(d).update(O).digestInto(O);
      for (let T = 0; T < I.length; T++)
        I[T] ^= O[T];
    }
  }
  return dx(a, c, s, d, O);
}
function gx(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const i = BigInt(32), o = BigInt(4294967295), s = Number(r >> i & o), a = Number(r & o), c = n ? 4 : 0, d = n ? 0 : 4;
  e.setUint32(t + c, s, n), e.setUint32(t + d, a, n);
}
class Rg extends Bg {
  constructor(t, r, n, i) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = i, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = ha(this.buffer);
  }
  update(t) {
    Ir.exists(this);
    const { view: r, buffer: n, blockLen: i } = this;
    t = cs(t);
    const o = t.length;
    for (let s = 0; s < o; ) {
      const a = Math.min(i - this.pos, o - s);
      if (a === i) {
        const c = ha(t);
        for (; i <= o - s; s += i)
          this.process(c, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === i && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    Ir.exists(this), Ir.output(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: i, isLE: o } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > i - s && (this.process(n, 0), s = 0);
    for (let g = s; g < i; g++)
      r[g] = 0;
    gx(n, i - 8, BigInt(this.length * 8), o), this.process(n, 0);
    const a = ha(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const d = c / 4, w = this.get();
    if (d > w.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let g = 0; g < d; g++)
      a.setUint32(4 * g, w[g], o);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: i, finished: o, destroyed: s, pos: a } = this;
    return t.length = i, t.pos = a, t.finished = o, t.destroyed = s, i % r && t.buffer.set(n), t;
  }
}
const yx = (e, t, r) => e & t ^ ~e & r, wx = (e, t, r) => e & t ^ e & r ^ t & r, vx = new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Un = new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Cn = new Uint32Array(64);
class kg extends Rg {
  constructor() {
    super(64, 32, 8, !1), this.A = Un[0] | 0, this.B = Un[1] | 0, this.C = Un[2] | 0, this.D = Un[3] | 0, this.E = Un[4] | 0, this.F = Un[5] | 0, this.G = Un[6] | 0, this.H = Un[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: i, E: o, F: s, G: a, H: c } = this;
    return [t, r, n, i, o, s, a, c];
  }
  // prettier-ignore
  set(t, r, n, i, o, s, a, c) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = i | 0, this.E = o | 0, this.F = s | 0, this.G = a | 0, this.H = c | 0;
  }
  process(t, r) {
    for (let g = 0; g < 16; g++, r += 4)
      Cn[g] = t.getUint32(r, !1);
    for (let g = 16; g < 64; g++) {
      const O = Cn[g - 15], N = Cn[g - 2], B = Wr(O, 7) ^ Wr(O, 18) ^ O >>> 3, I = Wr(N, 17) ^ Wr(N, 19) ^ N >>> 10;
      Cn[g] = I + Cn[g - 7] + B + Cn[g - 16] | 0;
    }
    let { A: n, B: i, C: o, D: s, E: a, F: c, G: d, H: w } = this;
    for (let g = 0; g < 64; g++) {
      const O = Wr(a, 6) ^ Wr(a, 11) ^ Wr(a, 25), N = w + O + yx(a, c, d) + vx[g] + Cn[g] | 0, I = (Wr(n, 2) ^ Wr(n, 13) ^ Wr(n, 22)) + wx(n, i, o) | 0;
      w = d, d = c, c = a, a = s + N | 0, s = o, o = i, i = n, n = N + I | 0;
    }
    n = n + this.A | 0, i = i + this.B | 0, o = o + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, c = c + this.F | 0, d = d + this.G | 0, w = w + this.H | 0, this.set(n, i, o, s, a, c, d, w);
  }
  roundClean() {
    Cn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
class bx extends kg {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
}
const mx = No(() => new kg());
No(() => new bx());
const Qs = BigInt(2 ** 32 - 1), Cu = BigInt(32);
function Mg(e, t = !1) {
  return t ? { h: Number(e & Qs), l: Number(e >> Cu & Qs) } : { h: Number(e >> Cu & Qs) | 0, l: Number(e & Qs) | 0 };
}
function Ex(e, t = !1) {
  let r = new Uint32Array(e.length), n = new Uint32Array(e.length);
  for (let i = 0; i < e.length; i++) {
    const { h: o, l: s } = Mg(e[i], t);
    [r[i], n[i]] = [o, s];
  }
  return [r, n];
}
const _x = (e, t) => BigInt(e >>> 0) << Cu | BigInt(t >>> 0), Sx = (e, t, r) => e >>> r, xx = (e, t, r) => e << 32 - r | t >>> r, Ix = (e, t, r) => e >>> r | t << 32 - r, Tx = (e, t, r) => e << 32 - r | t >>> r, Ax = (e, t, r) => e << 64 - r | t >>> r - 32, Ox = (e, t, r) => e >>> r - 32 | t << 64 - r, Bx = (e, t) => t, Px = (e, t) => e, Nx = (e, t, r) => e << r | t >>> 32 - r, Rx = (e, t, r) => t << r | e >>> 32 - r, kx = (e, t, r) => t << r - 32 | e >>> 64 - r, Mx = (e, t, r) => e << r - 32 | t >>> 64 - r;
function Ux(e, t, r, n) {
  const i = (t >>> 0) + (n >>> 0);
  return { h: e + r + (i / 2 ** 32 | 0) | 0, l: i | 0 };
}
const Cx = (e, t, r) => (e >>> 0) + (t >>> 0) + (r >>> 0), Hx = (e, t, r, n) => t + r + n + (e / 2 ** 32 | 0) | 0, Lx = (e, t, r, n) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0), Dx = (e, t, r, n, i) => t + r + n + i + (e / 2 ** 32 | 0) | 0, $x = (e, t, r, n, i) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0) + (i >>> 0), Fx = (e, t, r, n, i, o) => t + r + n + i + o + (e / 2 ** 32 | 0) | 0, Ie = {
  fromBig: Mg,
  split: Ex,
  toBig: _x,
  shrSH: Sx,
  shrSL: xx,
  rotrSH: Ix,
  rotrSL: Tx,
  rotrBH: Ax,
  rotrBL: Ox,
  rotr32H: Bx,
  rotr32L: Px,
  rotlSH: Nx,
  rotlSL: Rx,
  rotlBH: kx,
  rotlBL: Mx,
  add: Ux,
  add3L: Cx,
  add3H: Hx,
  add4L: Lx,
  add4H: Dx,
  add5H: Fx,
  add5L: $x
}, [Kx, Gx] = Ie.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((e) => BigInt(e))), Hn = new Uint32Array(80), Ln = new Uint32Array(80);
class Ef extends Rg {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: t, Al: r, Bh: n, Bl: i, Ch: o, Cl: s, Dh: a, Dl: c, Eh: d, El: w, Fh: g, Fl: O, Gh: N, Gl: B, Hh: I, Hl: M } = this;
    return [t, r, n, i, o, s, a, c, d, w, g, O, N, B, I, M];
  }
  // prettier-ignore
  set(t, r, n, i, o, s, a, c, d, w, g, O, N, B, I, M) {
    this.Ah = t | 0, this.Al = r | 0, this.Bh = n | 0, this.Bl = i | 0, this.Ch = o | 0, this.Cl = s | 0, this.Dh = a | 0, this.Dl = c | 0, this.Eh = d | 0, this.El = w | 0, this.Fh = g | 0, this.Fl = O | 0, this.Gh = N | 0, this.Gl = B | 0, this.Hh = I | 0, this.Hl = M | 0;
  }
  process(t, r) {
    for (let F = 0; F < 16; F++, r += 4)
      Hn[F] = t.getUint32(r), Ln[F] = t.getUint32(r += 4);
    for (let F = 16; F < 80; F++) {
      const X = Hn[F - 15] | 0, Z = Ln[F - 15] | 0, z = Ie.rotrSH(X, Z, 1) ^ Ie.rotrSH(X, Z, 8) ^ Ie.shrSH(X, Z, 7), te = Ie.rotrSL(X, Z, 1) ^ Ie.rotrSL(X, Z, 8) ^ Ie.shrSL(X, Z, 7), b = Hn[F - 2] | 0, A = Ln[F - 2] | 0, C = Ie.rotrSH(b, A, 19) ^ Ie.rotrBH(b, A, 61) ^ Ie.shrSH(b, A, 6), q = Ie.rotrSL(b, A, 19) ^ Ie.rotrBL(b, A, 61) ^ Ie.shrSL(b, A, 6), W = Ie.add4L(te, q, Ln[F - 7], Ln[F - 16]), E = Ie.add4H(W, z, C, Hn[F - 7], Hn[F - 16]);
      Hn[F] = E | 0, Ln[F] = W | 0;
    }
    let { Ah: n, Al: i, Bh: o, Bl: s, Ch: a, Cl: c, Dh: d, Dl: w, Eh: g, El: O, Fh: N, Fl: B, Gh: I, Gl: M, Hh: T, Hl: k } = this;
    for (let F = 0; F < 80; F++) {
      const X = Ie.rotrSH(g, O, 14) ^ Ie.rotrSH(g, O, 18) ^ Ie.rotrBH(g, O, 41), Z = Ie.rotrSL(g, O, 14) ^ Ie.rotrSL(g, O, 18) ^ Ie.rotrBL(g, O, 41), z = g & N ^ ~g & I, te = O & B ^ ~O & M, b = Ie.add5L(k, Z, te, Gx[F], Ln[F]), A = Ie.add5H(b, T, X, z, Kx[F], Hn[F]), C = b | 0, q = Ie.rotrSH(n, i, 28) ^ Ie.rotrBH(n, i, 34) ^ Ie.rotrBH(n, i, 39), W = Ie.rotrSL(n, i, 28) ^ Ie.rotrBL(n, i, 34) ^ Ie.rotrBL(n, i, 39), E = n & o ^ n & a ^ o & a, f = i & s ^ i & c ^ s & c;
      T = I | 0, k = M | 0, I = N | 0, M = B | 0, N = g | 0, B = O | 0, { h: g, l: O } = Ie.add(d | 0, w | 0, A | 0, C | 0), d = a | 0, w = c | 0, a = o | 0, c = s | 0, o = n | 0, s = i | 0;
      const h = Ie.add3L(C, W, f);
      n = Ie.add3H(h, A, q, E), i = h | 0;
    }
    ({ h: n, l: i } = Ie.add(this.Ah | 0, this.Al | 0, n | 0, i | 0)), { h: o, l: s } = Ie.add(this.Bh | 0, this.Bl | 0, o | 0, s | 0), { h: a, l: c } = Ie.add(this.Ch | 0, this.Cl | 0, a | 0, c | 0), { h: d, l: w } = Ie.add(this.Dh | 0, this.Dl | 0, d | 0, w | 0), { h: g, l: O } = Ie.add(this.Eh | 0, this.El | 0, g | 0, O | 0), { h: N, l: B } = Ie.add(this.Fh | 0, this.Fl | 0, N | 0, B | 0), { h: I, l: M } = Ie.add(this.Gh | 0, this.Gl | 0, I | 0, M | 0), { h: T, l: k } = Ie.add(this.Hh | 0, this.Hl | 0, T | 0, k | 0), this.set(n, i, o, s, a, c, d, w, g, O, N, B, I, M, T, k);
  }
  roundClean() {
    Hn.fill(0), Ln.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
}
class Vx extends Ef {
  constructor() {
    super(), this.Ah = -1942145080, this.Al = 424955298, this.Bh = 1944164710, this.Bl = -1982016298, this.Ch = 502970286, this.Cl = 855612546, this.Dh = 1738396948, this.Dl = 1479516111, this.Eh = 258812777, this.El = 2077511080, this.Fh = 2011393907, this.Fl = 79989058, this.Gh = 1067287976, this.Gl = 1780299464, this.Hh = 286451373, this.Hl = -1848208735, this.outputLen = 28;
  }
}
class qx extends Ef {
  constructor() {
    super(), this.Ah = 573645204, this.Al = -64227540, this.Bh = -1621794909, this.Bl = -934517566, this.Ch = 596883563, this.Cl = 1867755857, this.Dh = -1774684391, this.Dl = 1497426621, this.Eh = -1775747358, this.El = -1467023389, this.Fh = -1101128155, this.Fl = 1401305490, this.Gh = 721525244, this.Gl = 746961066, this.Hh = 246885852, this.Hl = -2117784414, this.outputLen = 32;
  }
}
class Wx extends Ef {
  constructor() {
    super(), this.Ah = -876896931, this.Al = -1056596264, this.Bh = 1654270250, this.Bl = 914150663, this.Ch = -1856437926, this.Cl = 812702999, this.Dh = 355462360, this.Dl = -150054599, this.Eh = 1731405415, this.El = -4191439, this.Fh = -1900787065, this.Fl = 1750603025, this.Gh = -619958771, this.Gl = 1694076839, this.Hh = 1203062813, this.Hl = -1090891868, this.outputLen = 48;
  }
}
const jx = No(() => new Ef());
No(() => new Vx());
No(() => new qx());
No(() => new Wx());
function Ug(e) {
  if (typeof e != "string")
    throw new TypeError(`Invalid mnemonic type: ${typeof e}`);
  return e.normalize("NFKD");
}
function Cg(e) {
  const t = Ug(e), r = t.split(" ");
  if (![12, 15, 18, 21, 24].includes(r.length))
    throw new Error("Invalid mnemonic");
  return { nfkd: t, words: r };
}
function zx(e) {
  Ir.bytes(e, 16, 20, 24, 28, 32);
}
const Xx = (e) => {
  const t = 8 - e.length / 4;
  return new Uint8Array([mx(e)[0] >> t << t]);
};
function Yx(e) {
  if (!Array.isArray(e) || e.length !== 2048 || typeof e[0] != "string")
    throw new Error("Worlist: expected array of 2048 strings");
  return e.forEach((t) => {
    if (typeof t != "string")
      throw new Error(`Wordlist: non-string element: ${t}`);
  }), Hs.chain(Hs.checksum(1, Xx), Hs.radix2(11, !0), Hs.alphabet(e));
}
function Zx(e, t) {
  const { words: r } = Cg(e), n = Yx(t).decode(r);
  return zx(n), n;
}
function Jx(e, t) {
  try {
    Zx(e, t);
  } catch {
    return !1;
  }
  return !0;
}
const Qx = (e) => Ug(`mnemonic${e}`);
function eI(e, t = "") {
  return px(jx, Cg(e).nfkd, Qx(t), { c: 2048, dkLen: 64 });
}
const tI = `abandon
ability
able
about
above
absent
absorb
abstract
absurd
abuse
access
accident
account
accuse
achieve
acid
acoustic
acquire
across
act
action
actor
actress
actual
adapt
add
addict
address
adjust
admit
adult
advance
advice
aerobic
affair
afford
afraid
again
age
agent
agree
ahead
aim
air
airport
aisle
alarm
album
alcohol
alert
alien
all
alley
allow
almost
alone
alpha
already
also
alter
always
amateur
amazing
among
amount
amused
analyst
anchor
ancient
anger
angle
angry
animal
ankle
announce
annual
another
answer
antenna
antique
anxiety
any
apart
apology
appear
apple
approve
april
arch
arctic
area
arena
argue
arm
armed
armor
army
around
arrange
arrest
arrive
arrow
art
artefact
artist
artwork
ask
aspect
assault
asset
assist
assume
asthma
athlete
atom
attack
attend
attitude
attract
auction
audit
august
aunt
author
auto
autumn
average
avocado
avoid
awake
aware
away
awesome
awful
awkward
axis
baby
bachelor
bacon
badge
bag
balance
balcony
ball
bamboo
banana
banner
bar
barely
bargain
barrel
base
basic
basket
battle
beach
bean
beauty
because
become
beef
before
begin
behave
behind
believe
below
belt
bench
benefit
best
betray
better
between
beyond
bicycle
bid
bike
bind
biology
bird
birth
bitter
black
blade
blame
blanket
blast
bleak
bless
blind
blood
blossom
blouse
blue
blur
blush
board
boat
body
boil
bomb
bone
bonus
book
boost
border
boring
borrow
boss
bottom
bounce
box
boy
bracket
brain
brand
brass
brave
bread
breeze
brick
bridge
brief
bright
bring
brisk
broccoli
broken
bronze
broom
brother
brown
brush
bubble
buddy
budget
buffalo
build
bulb
bulk
bullet
bundle
bunker
burden
burger
burst
bus
business
busy
butter
buyer
buzz
cabbage
cabin
cable
cactus
cage
cake
call
calm
camera
camp
can
canal
cancel
candy
cannon
canoe
canvas
canyon
capable
capital
captain
car
carbon
card
cargo
carpet
carry
cart
case
cash
casino
castle
casual
cat
catalog
catch
category
cattle
caught
cause
caution
cave
ceiling
celery
cement
census
century
cereal
certain
chair
chalk
champion
change
chaos
chapter
charge
chase
chat
cheap
check
cheese
chef
cherry
chest
chicken
chief
child
chimney
choice
choose
chronic
chuckle
chunk
churn
cigar
cinnamon
circle
citizen
city
civil
claim
clap
clarify
claw
clay
clean
clerk
clever
click
client
cliff
climb
clinic
clip
clock
clog
close
cloth
cloud
clown
club
clump
cluster
clutch
coach
coast
coconut
code
coffee
coil
coin
collect
color
column
combine
come
comfort
comic
common
company
concert
conduct
confirm
congress
connect
consider
control
convince
cook
cool
copper
copy
coral
core
corn
correct
cost
cotton
couch
country
couple
course
cousin
cover
coyote
crack
cradle
craft
cram
crane
crash
crater
crawl
crazy
cream
credit
creek
crew
cricket
crime
crisp
critic
crop
cross
crouch
crowd
crucial
cruel
cruise
crumble
crunch
crush
cry
crystal
cube
culture
cup
cupboard
curious
current
curtain
curve
cushion
custom
cute
cycle
dad
damage
damp
dance
danger
daring
dash
daughter
dawn
day
deal
debate
debris
decade
december
decide
decline
decorate
decrease
deer
defense
define
defy
degree
delay
deliver
demand
demise
denial
dentist
deny
depart
depend
deposit
depth
deputy
derive
describe
desert
design
desk
despair
destroy
detail
detect
develop
device
devote
diagram
dial
diamond
diary
dice
diesel
diet
differ
digital
dignity
dilemma
dinner
dinosaur
direct
dirt
disagree
discover
disease
dish
dismiss
disorder
display
distance
divert
divide
divorce
dizzy
doctor
document
dog
doll
dolphin
domain
donate
donkey
donor
door
dose
double
dove
draft
dragon
drama
drastic
draw
dream
dress
drift
drill
drink
drip
drive
drop
drum
dry
duck
dumb
dune
during
dust
dutch
duty
dwarf
dynamic
eager
eagle
early
earn
earth
easily
east
easy
echo
ecology
economy
edge
edit
educate
effort
egg
eight
either
elbow
elder
electric
elegant
element
elephant
elevator
elite
else
embark
embody
embrace
emerge
emotion
employ
empower
empty
enable
enact
end
endless
endorse
enemy
energy
enforce
engage
engine
enhance
enjoy
enlist
enough
enrich
enroll
ensure
enter
entire
entry
envelope
episode
equal
equip
era
erase
erode
erosion
error
erupt
escape
essay
essence
estate
eternal
ethics
evidence
evil
evoke
evolve
exact
example
excess
exchange
excite
exclude
excuse
execute
exercise
exhaust
exhibit
exile
exist
exit
exotic
expand
expect
expire
explain
expose
express
extend
extra
eye
eyebrow
fabric
face
faculty
fade
faint
faith
fall
false
fame
family
famous
fan
fancy
fantasy
farm
fashion
fat
fatal
father
fatigue
fault
favorite
feature
february
federal
fee
feed
feel
female
fence
festival
fetch
fever
few
fiber
fiction
field
figure
file
film
filter
final
find
fine
finger
finish
fire
firm
first
fiscal
fish
fit
fitness
fix
flag
flame
flash
flat
flavor
flee
flight
flip
float
flock
floor
flower
fluid
flush
fly
foam
focus
fog
foil
fold
follow
food
foot
force
forest
forget
fork
fortune
forum
forward
fossil
foster
found
fox
fragile
frame
frequent
fresh
friend
fringe
frog
front
frost
frown
frozen
fruit
fuel
fun
funny
furnace
fury
future
gadget
gain
galaxy
gallery
game
gap
garage
garbage
garden
garlic
garment
gas
gasp
gate
gather
gauge
gaze
general
genius
genre
gentle
genuine
gesture
ghost
giant
gift
giggle
ginger
giraffe
girl
give
glad
glance
glare
glass
glide
glimpse
globe
gloom
glory
glove
glow
glue
goat
goddess
gold
good
goose
gorilla
gospel
gossip
govern
gown
grab
grace
grain
grant
grape
grass
gravity
great
green
grid
grief
grit
grocery
group
grow
grunt
guard
guess
guide
guilt
guitar
gun
gym
habit
hair
half
hammer
hamster
hand
happy
harbor
hard
harsh
harvest
hat
have
hawk
hazard
head
health
heart
heavy
hedgehog
height
hello
helmet
help
hen
hero
hidden
high
hill
hint
hip
hire
history
hobby
hockey
hold
hole
holiday
hollow
home
honey
hood
hope
horn
horror
horse
hospital
host
hotel
hour
hover
hub
huge
human
humble
humor
hundred
hungry
hunt
hurdle
hurry
hurt
husband
hybrid
ice
icon
idea
identify
idle
ignore
ill
illegal
illness
image
imitate
immense
immune
impact
impose
improve
impulse
inch
include
income
increase
index
indicate
indoor
industry
infant
inflict
inform
inhale
inherit
initial
inject
injury
inmate
inner
innocent
input
inquiry
insane
insect
inside
inspire
install
intact
interest
into
invest
invite
involve
iron
island
isolate
issue
item
ivory
jacket
jaguar
jar
jazz
jealous
jeans
jelly
jewel
job
join
joke
journey
joy
judge
juice
jump
jungle
junior
junk
just
kangaroo
keen
keep
ketchup
key
kick
kid
kidney
kind
kingdom
kiss
kit
kitchen
kite
kitten
kiwi
knee
knife
knock
know
lab
label
labor
ladder
lady
lake
lamp
language
laptop
large
later
latin
laugh
laundry
lava
law
lawn
lawsuit
layer
lazy
leader
leaf
learn
leave
lecture
left
leg
legal
legend
leisure
lemon
lend
length
lens
leopard
lesson
letter
level
liar
liberty
library
license
life
lift
light
like
limb
limit
link
lion
liquid
list
little
live
lizard
load
loan
lobster
local
lock
logic
lonely
long
loop
lottery
loud
lounge
love
loyal
lucky
luggage
lumber
lunar
lunch
luxury
lyrics
machine
mad
magic
magnet
maid
mail
main
major
make
mammal
man
manage
mandate
mango
mansion
manual
maple
marble
march
margin
marine
market
marriage
mask
mass
master
match
material
math
matrix
matter
maximum
maze
meadow
mean
measure
meat
mechanic
medal
media
melody
melt
member
memory
mention
menu
mercy
merge
merit
merry
mesh
message
metal
method
middle
midnight
milk
million
mimic
mind
minimum
minor
minute
miracle
mirror
misery
miss
mistake
mix
mixed
mixture
mobile
model
modify
mom
moment
monitor
monkey
monster
month
moon
moral
more
morning
mosquito
mother
motion
motor
mountain
mouse
move
movie
much
muffin
mule
multiply
muscle
museum
mushroom
music
must
mutual
myself
mystery
myth
naive
name
napkin
narrow
nasty
nation
nature
near
neck
need
negative
neglect
neither
nephew
nerve
nest
net
network
neutral
never
news
next
nice
night
noble
noise
nominee
noodle
normal
north
nose
notable
note
nothing
notice
novel
now
nuclear
number
nurse
nut
oak
obey
object
oblige
obscure
observe
obtain
obvious
occur
ocean
october
odor
off
offer
office
often
oil
okay
old
olive
olympic
omit
once
one
onion
online
only
open
opera
opinion
oppose
option
orange
orbit
orchard
order
ordinary
organ
orient
original
orphan
ostrich
other
outdoor
outer
output
outside
oval
oven
over
own
owner
oxygen
oyster
ozone
pact
paddle
page
pair
palace
palm
panda
panel
panic
panther
paper
parade
parent
park
parrot
party
pass
patch
path
patient
patrol
pattern
pause
pave
payment
peace
peanut
pear
peasant
pelican
pen
penalty
pencil
people
pepper
perfect
permit
person
pet
phone
photo
phrase
physical
piano
picnic
picture
piece
pig
pigeon
pill
pilot
pink
pioneer
pipe
pistol
pitch
pizza
place
planet
plastic
plate
play
please
pledge
pluck
plug
plunge
poem
poet
point
polar
pole
police
pond
pony
pool
popular
portion
position
possible
post
potato
pottery
poverty
powder
power
practice
praise
predict
prefer
prepare
present
pretty
prevent
price
pride
primary
print
priority
prison
private
prize
problem
process
produce
profit
program
project
promote
proof
property
prosper
protect
proud
provide
public
pudding
pull
pulp
pulse
pumpkin
punch
pupil
puppy
purchase
purity
purpose
purse
push
put
puzzle
pyramid
quality
quantum
quarter
question
quick
quit
quiz
quote
rabbit
raccoon
race
rack
radar
radio
rail
rain
raise
rally
ramp
ranch
random
range
rapid
rare
rate
rather
raven
raw
razor
ready
real
reason
rebel
rebuild
recall
receive
recipe
record
recycle
reduce
reflect
reform
refuse
region
regret
regular
reject
relax
release
relief
rely
remain
remember
remind
remove
render
renew
rent
reopen
repair
repeat
replace
report
require
rescue
resemble
resist
resource
response
result
retire
retreat
return
reunion
reveal
review
reward
rhythm
rib
ribbon
rice
rich
ride
ridge
rifle
right
rigid
ring
riot
ripple
risk
ritual
rival
river
road
roast
robot
robust
rocket
romance
roof
rookie
room
rose
rotate
rough
round
route
royal
rubber
rude
rug
rule
run
runway
rural
sad
saddle
sadness
safe
sail
salad
salmon
salon
salt
salute
same
sample
sand
satisfy
satoshi
sauce
sausage
save
say
scale
scan
scare
scatter
scene
scheme
school
science
scissors
scorpion
scout
scrap
screen
script
scrub
sea
search
season
seat
second
secret
section
security
seed
seek
segment
select
sell
seminar
senior
sense
sentence
series
service
session
settle
setup
seven
shadow
shaft
shallow
share
shed
shell
sheriff
shield
shift
shine
ship
shiver
shock
shoe
shoot
shop
short
shoulder
shove
shrimp
shrug
shuffle
shy
sibling
sick
side
siege
sight
sign
silent
silk
silly
silver
similar
simple
since
sing
siren
sister
situate
six
size
skate
sketch
ski
skill
skin
skirt
skull
slab
slam
sleep
slender
slice
slide
slight
slim
slogan
slot
slow
slush
small
smart
smile
smoke
smooth
snack
snake
snap
sniff
snow
soap
soccer
social
sock
soda
soft
solar
soldier
solid
solution
solve
someone
song
soon
sorry
sort
soul
sound
soup
source
south
space
spare
spatial
spawn
speak
special
speed
spell
spend
sphere
spice
spider
spike
spin
spirit
split
spoil
sponsor
spoon
sport
spot
spray
spread
spring
spy
square
squeeze
squirrel
stable
stadium
staff
stage
stairs
stamp
stand
start
state
stay
steak
steel
stem
step
stereo
stick
still
sting
stock
stomach
stone
stool
story
stove
strategy
street
strike
strong
struggle
student
stuff
stumble
style
subject
submit
subway
success
such
sudden
suffer
sugar
suggest
suit
summer
sun
sunny
sunset
super
supply
supreme
sure
surface
surge
surprise
surround
survey
suspect
sustain
swallow
swamp
swap
swarm
swear
sweet
swift
swim
swing
switch
sword
symbol
symptom
syrup
system
table
tackle
tag
tail
talent
talk
tank
tape
target
task
taste
tattoo
taxi
teach
team
tell
ten
tenant
tennis
tent
term
test
text
thank
that
theme
then
theory
there
they
thing
this
thought
three
thrive
throw
thumb
thunder
ticket
tide
tiger
tilt
timber
time
tiny
tip
tired
tissue
title
toast
tobacco
today
toddler
toe
together
toilet
token
tomato
tomorrow
tone
tongue
tonight
tool
tooth
top
topic
topple
torch
tornado
tortoise
toss
total
tourist
toward
tower
town
toy
track
trade
traffic
tragic
train
transfer
trap
trash
travel
tray
treat
tree
trend
trial
tribe
trick
trigger
trim
trip
trophy
trouble
truck
true
truly
trumpet
trust
truth
try
tube
tuition
tumble
tuna
tunnel
turkey
turn
turtle
twelve
twenty
twice
twin
twist
two
type
typical
ugly
umbrella
unable
unaware
uncle
uncover
under
undo
unfair
unfold
unhappy
uniform
unique
unit
universe
unknown
unlock
until
unusual
unveil
update
upgrade
uphold
upon
upper
upset
urban
urge
usage
use
used
useful
useless
usual
utility
vacant
vacuum
vague
valid
valley
valve
van
vanish
vapor
various
vast
vault
vehicle
velvet
vendor
venture
venue
verb
verify
version
very
vessel
veteran
viable
vibrant
vicious
victory
video
view
village
vintage
violin
virtual
virus
visa
visit
visual
vital
vivid
vocal
voice
void
volcano
volume
vote
voyage
wage
wagon
wait
walk
wall
walnut
want
warfare
warm
warrior
wash
wasp
waste
water
wave
way
wealth
weapon
wear
weasel
weather
web
wedding
weekend
weird
welcome
west
wet
whale
what
wheat
wheel
when
where
whip
whisper
wide
width
wife
wild
will
win
window
wine
wing
wink
winner
winter
wire
wisdom
wise
wish
witness
wolf
woman
wonder
wood
wool
word
work
world
worry
worth
wrap
wreck
wrestle
wrist
write
wrong
yard
year
yellow
you
young
youth
zebra
zero
zone
zoo`.split(`
`);
var Fh = {
  name: "BitcoinCash",
  per1: 1e8,
  unit: "BCH"
}, rI = Object.assign({}, {
  hashGenesisBlock: "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  // nDefaultPort
  port: 8333,
  portRpc: 8332,
  protocol: {
    // pchMessageStart
    magic: 3908297187
    // careful, sent over wire as little endian
  },
  // vSeeds
  seedsDns: [
    "seed.bitcoinabc.org",
    "seed-abc.bitcoinforks.org",
    "btccash-seeder.bitcoinunlimited.info",
    "seed.bitprim.org",
    "seed.deadalnix.me",
    "seeder.criptolayer.net"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 145,
    private: 128,
    public: 0,
    scripthash: 5
  }
}, Fh), nI = Object.assign({}, {
  hashGenesisBlock: "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943",
  port: 18333,
  portRpc: 18332,
  protocol: {
    magic: 4109624820
  },
  seedsDns: [
    "testnet-seed.bitcoinabc.org",
    "testnet-seed-abc.bitcoinforks.org",
    "testnet-seed.bitprim.org",
    "testnet-seed.deadalnix.me",
    "testnet-seeder.criptolayer.net"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Fh), iI = Object.assign({}, {
  hashGenesisBlock: "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206",
  port: 18444,
  portRpc: 18332,
  protocol: {
    magic: 4206867930
  },
  seedsDns: [],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Fh), oI = {
  main: rI,
  test: nI,
  regtest: iI
}, sI = {
  name: "BlackCoin",
  per1: 1e8,
  unit: "BLK"
}, aI = Object.assign({}, {
  hashGenesisBlock: "000001faef25dec4fbcf906e6242621df2c183bf232f263d0ba5b101911e4563",
  port: 15714,
  portRpc: 15715,
  protocol: {
    magic: 86127984
    // careful, sent over wire as little endian
  },
  seedsDns: [
    "rat4.blackcoin.co",
    "seed.blackcoin.co",
    "archon.darkfox.id.au",
    "foxy.seeds.darkfox.id.au",
    "6.syllabear.us.to",
    "bcseed.syllabear.us.to"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 10,
    private: 153,
    public: 25,
    scripthash: 85
  }
}, sI), fI = {
  main: aI,
  test: null
}, _f = {
  name: "Bitcoin",
  per1: 1e8,
  unit: "BTC",
  messagePrefix: `Bitcoin Signed Message:
`
}, cI = Object.assign({}, {
  hashGenesisBlock: "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  // nDefaultPort
  port: 8333,
  portRpc: 8332,
  protocol: {
    // pchMessageStart
    magic: 3652501241
    // careful, sent over wire as little endian
  },
  bech32: "bc",
  // vSeeds
  seedsDns: [
    "seed.bitcoin.sipa.be",
    "dnsseed.bluematt.me",
    "seed.bitcoinstats.com",
    "seed.bitcoin.jonasschnelli.ch",
    "seed.btc.petertodd.org",
    "seed.bitcoin.sprovoost.nl",
    "dnsseed.emzy.de"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 0,
    private: 128,
    public: 0,
    scripthash: 5
  }
}, _f), uI = Object.assign({}, {
  hashGenesisBlock: "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943",
  port: 18333,
  portRpc: 18332,
  protocol: {
    magic: 118034699
  },
  bech32: "tb",
  seedsDns: [
    "testnet-seed.alexykot.me",
    "testnet-seed.bitcoin.schildbach.de",
    "testnet-seed.bitcoin.petertodd.org",
    "testnet-seed.bluematt.me"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, _f), hI = Object.assign({}, {
  hashGenesisBlock: "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206",
  port: 18444,
  portRpc: 18332,
  protocol: {
    magic: 3669344250
  },
  bech32: "bcrt",
  seedsDns: [],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, _f), lI = Object.assign({}, {
  hashGenesisBlock: "f67ad7695d9b662a72ff3d8edbbb2de0bfa67b13974bb9910d116d5cbd863e68",
  port: 18555,
  portRpc: 18556,
  protocol: {
    magic: 303307798
  },
  bech32: "sb",
  seedsDns: [],
  versions: {
    bip32: {
      private: 69253376,
      public: 69254458
    },
    bip44: 115,
    private: 100,
    public: 63,
    scripthash: 123
  }
}, _f), dI = {
  main: cI,
  test: uI,
  regtest: hI,
  simnet: lI
}, Hg = {
  name: "Bitcoin Gold",
  unit: "BTG"
}, pI = Object.assign({}, {
  hashGenesisBlock: "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  // nDefaultPort
  port: 8338,
  protocol: {
    // pchMessageStart
    magic: 1148012513
    // careful, sent over wire as little endian
  },
  bech32: "btg",
  // vSeeds
  seedsDns: [
    "eu-dnsseed.bitcoingold-official.org",
    "dnsseed.bitcoingold.org",
    "dnsseed.btcgpu.org"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 156,
    private: 128,
    public: 38,
    scripthash: 23
  }
}, Hg), gI = Object.assign({}, {
  hashGenesisBlock: "0x00000000e0781ebe24b91eedc293adfea2f557b53ec379e78959de3853e6f9f6",
  port: 18338,
  portRpc: 18332,
  protocol: {
    magic: 1164855522
  },
  bech32: "tbtg",
  seedsDns: [
    "test-dnsseed.bitcoingold.org",
    "test-dnsseed.btcgpu.org",
    "eu-test-dnsseed.bitcoingold-official.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 156,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Hg), yI = {
  main: pI,
  test: gI
}, Kh = {
  name: "c0ban",
  unit: "RYO"
}, wI = Object.assign({}, {
  hashGenesisBlock: "000000005184ffce04351e687a3965b300ee011d26b2089232cd039273be4a67",
  // nDefaultPort
  port: 3881,
  portRpc: 3882,
  protocol: {
    magic: 1851928675
    // pchMessageStart
  },
  // vSeeds
  seedsDns: [
    "jp01.dnsseed.c0ban.com",
    "kr01.dnsseed.c0ban.com"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      // base58Prefixes[EXT_SECRET_KEY]
      public: 76067358
      // base58Prefixes[EXT_PUBLIC_KEY]
    },
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    bip44: 88888,
    // TODO: decide cbn bip44
    private: 136,
    // base58Prefixes[SECRET_KEY]
    public: 18,
    // base58Prefixes[PUBKEY_ADDRESS]
    scripthash: 28
    // base58Prefixes[SCRIPT_ADDRESS]
  }
}, Kh), vI = Object.assign({}, {
  hashGenesisBlock: "000000005184ffce04351e687a3965b300ee011d26b2089232cd039273be4a67",
  port: 13881,
  portRpc: 13882,
  protocol: {
    magic: 2390917251
    // pchMessageStart
  },
  seedsDns: [],
  versions: {
    bip32: {
      private: 70812552,
      // base58Prefixes[EXT_SECRET_KEY]
      public: 72910728
      // base58Prefixes[EXT_PUBLIC_KEY]
    },
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    bip44: 1,
    private: 238,
    // base58Prefixes[SECRET_KEY]
    public: 118,
    // base58Prefixes[PUBKEY_ADDRESS]
    scripthash: 198
    // base58Prefixes[SCRIPT_ADDRESS]
  }
}, Kh), bI = Object.assign({}, {
  hashGenesisBlock: "3249e44acac8fc67e6b94e882525cea6f5a9853e1ff7b4a1d5f470b23ff8ae11",
  port: 23881,
  portRpc: 23882,
  protocol: {
    magic: 3669344250
    // pchMessageStart
  },
  seedsDns: [],
  versions: {
    bip32: {
      private: 70617039,
      // base58Prefixes[EXT_SECRET_KEY]
      public: 70615956
      // base58Prefixes[EXT_PUBLIC_KEY]
    },
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    bip44: 1,
    private: 239,
    // base58Prefixes[SECRET_KEY]
    public: 111,
    // base58Prefixes[PUBKEY_ADDRESS]
    scripthash: 196
    // base58Prefixes[SCRIPT_ADDRESS]
  }
}, Kh), mI = {
  main: wI,
  test: vI,
  regtest: bI
}, Lg = {
  name: "CityCoin",
  isProofOfStake: !0
}, EI = Object.assign({}, {
  unit: "CITY",
  hashGenesisBlock: "00000b0517068e602ed5279c20168cfa1e69884ee4e784909652da34c361bff2",
  port: 4333,
  portRpc: 4334,
  protocol: {
    magic: 1129601281
  },
  seedsDns: [
    "seed.city-chain.org",
    "seed.city-coin.org",
    "seed.citychain.foundation",
    "seed.liberstad.com"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 1926,
    private: 237,
    public: 28,
    scripthash: 88
  }
}, Lg), _I = Object.assign({}, {
  unit: "TCITY",
  hashGenesisBlock: "00077765f625cc2cb6266544ff7d5a462f25be14ea1116dc2bd2fec17e40a5e3",
  port: 24333,
  portRpc: 24334,
  protocol: {
    magic: 1129600001
  },
  seedsDns: [
    "testseed.city-chain.org",
    "testseed.city-coin.org",
    "testseed.citychain.foundation"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 1926,
    private: 194,
    public: 66,
    scripthash: 196
  }
}, Lg), SI = {
  main: EI,
  test: _I
}, Dg = {
  name: "Dash",
  unit: "DASH"
}, xI = Object.assign({}, {
  hashGenesisBlock: "00000ffd590b1485b3caadc19b22e6379c733355108f107a430458cdf3407ab6",
  // nDefaultPort
  port: 9999,
  portRpc: 9998,
  protocol: {
    magic: 3177909439
    // careful, sent over wire as little endian
  },
  // vSeeds
  seedsDns: [
    "dash.org",
    "dnsseed.dash.org",
    "dashdot.io",
    "dnsseed.dashdot.io",
    "masternode.io",
    "dnsseed.masternode.io",
    "dashpay.io",
    "dnsseed.dashpay.io"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 5,
    private: 204,
    public: 76,
    scripthash: 16
  }
}, Dg), II = Object.assign({}, {
  hashGenesisBlock: "00000bafbc94add76cb75e2ec92894837288a481e5c005f6563d91623bf8bc2c",
  port: 19999,
  portRpc: 19998,
  seedsDns: [
    "dashdot.io",
    "testnet-seed.dashdot.io",
    "masternode.io",
    "test.dnsseed.masternode.io"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 140,
    scripthash: 19
  }
}, Dg), TI = {
  main: xI,
  test: II
}, $g = {
  name: "Denarius",
  unit: "DNR"
}, AI = Object.assign({}, {
  hashGenesisBlock: "00000d5dbbda01621cfc16bbc1f9bf3264d641a5dbf0de89fd0182c2c4828fcd",
  port: 33339,
  portRpc: 32339,
  protocol: {
    magic: 3035624186
  },
  seedsDns: [
    "denariusexplorer.org",
    "denarius.host",
    "denarius.tech",
    "denarius.network"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 116,
    private: 158,
    public: 30,
    scripthash: 90
  }
}, $g), OI = Object.assign({}, {
  hashGenesisBlock: "000086bfe8264d241f7f8e5393f747784b8ca2aa98bdd066278d590462a4fdb4",
  versions: {
    bip44: 1,
    private: 140,
    public: 18,
    scripthash: 116
  }
}, $g), BI = {
  main: AI,
  test: OI
}, Fg = {
  name: "Decred",
  unit: "DCR"
}, PI = Object.assign({}, {
  hashGenesisBlock: "298e5cc3d985bfe7f81dc135f360abe089edd4396b86d2de66b0cef42b21d980",
  port: 9108,
  portRpc: 9109,
  protocol: {
    magic: 4177573081
  },
  seedsDns: [
    "mainnet-seed.decred.mindcry.org",
    "mainnet-seed.decred.netpurgatory.com",
    "mainnet.decredseed.org",
    "mainnet-seed.decred.org"
  ],
  versions: {
    bip32: {
      private: 50177256,
      public: 50178342
    },
    bip44: 42,
    private: 8926,
    public: 1855,
    scripthash: 1818
  }
}, Fg), NI = Object.assign({}, {
  hashGenesisBlock: "5b7466edf6739adc9b32aaedc54e24bdc59a05f0ced855088835fe3cbe58375f",
  port: 19108,
  portRpc: 19109,
  protocol: {
    magic: 1223139429
  },
  seedsDns: [
    "testnet-seed.decred.mindcry.org",
    "testnet-seed.decred.netpurgatory.org",
    "testnet.decredseed.org",
    "testnet-seed.decred.org"
  ],
  versions: {
    bip32: {
      private: 70615959,
      public: 70617041
    },
    bip44: 42,
    private: 8974,
    public: 3873,
    scripthash: 3836
  }
}, Fg), RI = {
  main: PI,
  test: NI
}, kI = {
  name: "DigiByte",
  per1: 1e8,
  unit: "DGB"
}, MI = Object.assign({}, {
  hashGenesisBlock: "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  // nDefaultPort
  port: 12024,
  portRpc: 14022,
  protocol: {
    // pchMessageStart
    magic: 4207130330
    // careful, sent over wire as little endian
  },
  bech32: "dgb",
  // vSeeds
  seedsDns: [
    "seed.digibyte.io",
    "digiexplorer.info",
    "digihash.co"
  ],
  // base58Prefixes
  versions: {
    bip44: 2147483668,
    private: 128,
    public: 30,
    scripthash: 63,
    // new 'S' prefix
    scripthash2: 5
    // old '3' prefix
  }
}, kI), UI = { main: MI }, Kg = {
  name: "Dogecoin",
  unit: "DOGE"
}, CI = Object.assign({}, {
  hashGenesisBlock: "1a91e3dace36e2be3bf030a65679fe821aa1d6ef92e7c9902eb318182c355691",
  port: 22556,
  protocol: {
    magic: 3233857728
  },
  seedsDns: [
    "seed.multidoge.org",
    "seed2.multidoge.org"
  ],
  versions: {
    bip32: {
      private: 49988504,
      public: 49990397
    },
    bip44: 3,
    private: 158,
    public: 30,
    scripthash: 22
  }
}, Kg), HI = Object.assign({}, {
  hashGenesisBlock: "bb0a78264637406b6360aad926284d544d7049f45189db5664f3c4d07350559e",
  port: 44556,
  protocol: {
    magic: 4240553948
  },
  seedsDns: [
    "testseed.jrn.me.uk"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 241,
    public: 113,
    scripthash: 196
  }
}, Kg), LI = {
  main: CI,
  test: HI
}, Gh = {
  name: "Groestlcoin",
  per1: 1e8,
  unit: "GRS",
  messagePrefix: `GroestlCoin Signed Message:
`
}, DI = Object.assign({}, {
  hashGenesisBlock: "00000ac5927c594d49cc0bdb81759d0da8297eb614683d3acb62f0703b639023",
  // nDefaultPort
  port: 1331,
  portRpc: 1441,
  protocol: {
    // pchMessageStart
    magic: 3568615161
    // careful, sent over wire as little endian
  },
  bech32: "grs",
  // vSeeds
  seedsDns: [
    "dnsseed1.groestlcoin.org",
    "dnsseed2.groestlcoin.org",
    "dnsseed3.groestlcoin.org",
    "dnsseed4.groestlcoin.org"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 17,
    private: 128,
    public: 36,
    scripthash: 5
  }
}, Gh), $I = Object.assign({}, {
  hashGenesisBlock: "0x000000ffbb50fc9898cdd36ec163e6ba23230164c0052a28876255b7dcf2cd36",
  port: 17777,
  portRpc: 17766,
  protocol: {
    magic: 118034699
  },
  bech32: "tgrs",
  seedsDns: [
    "testnet-seed1.groestlcoin.org",
    "testnet-seed2.groestlcoin.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Gh), FI = Object.assign({}, {
  hashGenesisBlock: "0x000000ffbb50fc9898cdd36ec163e6ba23230164c0052a28876255b7dcf2cd36",
  port: 18888,
  portRpc: 18443,
  protocol: {
    magic: 3669344250
  },
  bech32: "grsrt",
  seedsDns: [],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Gh), KI = {
  main: DI,
  test: $I,
  regtest: FI
}, Gg = {
  name: "Litecoin",
  unit: "LTC"
}, GI = Object.assign({}, {
  hashGenesisBlock: "12a765e31ffd4059bada1e25190f6e98c99d9714d334efa41a195a7e7e04bfe2",
  port: 9333,
  protocol: {
    magic: 3686187259
  },
  bech32: "ltc",
  seedsDns: [
    "dnsseed.litecointools.com",
    "dnsseed.litecoinpool.org",
    "dnsseed.ltc.xurious.com",
    "dnsseed.koin-project.com",
    "dnsseed.weminemnc.com"
  ],
  versions: {
    bip32: {
      private: 27106558,
      public: 27108450
    },
    bip44: 2,
    private: 176,
    public: 48,
    scripthash: 50,
    scripthash2: 5
    // old '3' prefix. available for backward compatibility.
  }
}, Gg), VI = Object.assign({}, {
  hashGenesisBlock: "f5ae71e26c74beacc88382716aced69cddf3dffff24f384e1808905e0188f68f",
  bech32: "tltc",
  versions: {
    bip32: {
      private: 70709117,
      public: 70711009
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 58,
    scripthash2: 196
  }
}, Gg), qI = {
  main: GI,
  test: VI
}, Vg = {
  name: "Viacoin",
  unit: "VIA"
}, WI = Object.assign({}, {
  hashGenesisBlock: "4e9b54001f9976049830128ec0331515eaabe35a70970d79971da1539a400ba1",
  port: 5223,
  protocol: {
    magic: 3418777615
  },
  seedsDns: [
    "seed.viacoin.net",
    "viaseeder.barbatos.fr",
    "mainnet.viacoin.net"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 14,
    private: 199,
    public: 71,
    scripthash: 33
  }
}, Vg), jI = Object.assign({}, {
  hashGenesisBlock: "770aa712aa08fdcbdecc1c8df1b3e2d4e17a7cf6e63a28b785b32e74c96cb27d",
  port: 25223,
  protocol: {
    magic: 2465187241
  },
  seedsDns: [
    "testnet.viacoin.net",
    "seed-testnet.viacoin.net"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 255,
    public: 127,
    scripthash: 196
  }
}, Vg), zI = {
  main: WI,
  test: jI
}, qg = {
  name: "Monacoin",
  unit: "MONA"
}, XI = Object.assign({}, {
  hashGenesisBlock: "ff9f1c0116d19de7c9963845e129f9ed1bfc0b376eb54fd7afa42e0d418c8bb6",
  port: 9401,
  portRpc: 9402,
  protocol: {
    magic: 3686187259
  },
  bech32: "mona",
  seedsDns: [
    "dnsseed.monacoin.org"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 22,
    private: 176,
    private2: 178,
    // old wif
    public: 50,
    scripthash: 55,
    scripthash2: 5
    // old '3' prefix. available for backward compatibility.
  }
}, qg), YI = Object.assign({}, {
  hashGenesisBlock: "a2b106ceba3be0c6d097b2a6a6aacf9d638ba8258ae478158f449c321061e0b2",
  port: 19403,
  portRpc: 19402,
  protocol: {
    magic: 4056470269
  },
  bech32: "tmona",
  seedsDns: [
    "testnet-dnsseed.monacoin.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 117,
    scripthash2: 196
  }
}, qg), ZI = {
  main: XI,
  test: YI
}, JI = {
  name: "NuBits",
  per1: 1e6,
  unit: "NBT"
}, QI = Object.assign({}, {
  hashGenesisBlock: "000003cc2da5a0a289ad0a590c20a8b975219ddc1204efd169e947dd4cbad73f",
  // nDefaultPort
  port: 7890,
  portRpc: 14002,
  protocol: {
    // pchMessageStart
    magic: 3652501241
    // careful, sent over wire as little endian
  },
  // vSeeds
  seedsDns: [],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 12,
    private: 150,
    public: 25,
    scripthash: 26
  }
}, JI), eT = {
  main: QI
}, tT = {
  name: "Namecoin",
  unit: "NMC"
}, rT = Object.assign({}, {
  hashGenesisBlock: "000000000062b72c5e2ceb45fbc8587e807c155b0da735e6483dfba2f0a9c770",
  versions: {
    bip44: 7,
    private: 180,
    public: 52,
    scripthash: 5
  }
}, tT), nT = {
  main: rT,
  test: null
}, Wg = {
  name: "Peercoin",
  per1: 1e6,
  // util.h:40
  unit: "PPC",
  messagePrefix: `Peercoin Signed Message:
`
  // main.cpp:77
}, iT = Object.assign({}, {
  hashGenesisBlock: "0000000032fe677166d54963b62a4677d8957e87c508eaa4fd7eb1c880cd27e3",
  // main.h:84
  // nDefaultPort
  port: 9901,
  // protocol.h:18
  portRpc: 9902,
  // protocol.h:19
  protocol: {
    // pchMessageStart
    magic: 3857311974
    // careful, sent over wire as little endian protocol.cpp:31
  },
  // vSeeds
  seedsDns: [
    // net.cpp:1209
    "seed.peercoin.net",
    "seed2.peercoin.net",
    "seed.peercoin-library.org",
    "ppcseed.ns.7server.net"
  ],
  versions: {
    // not implemented in Peercoin <= v0.7.x nodes, only 3rd party wallets
    // https://github.com/jmacwhyte/recovery-phrase-recovery/blob/52073aba08e9d01032c0b5aff8c682911fe2e5fc/js/bitcoinjs-extensions.js#L58
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 6,
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    private: 183,
    // base58.h:402 ; 128 + PUBKEY_ADDRESS
    public: 55,
    // base58.h:276
    scripthash: 117
    // base58.h:277
  }
}, Wg), oT = Object.assign({}, {
  hashGenesisBlock: "00000001f757bb737f6596503e17cd17b0658ce630cc727c0cca81aec47c9f06",
  port: 9903,
  portRpc: 9904,
  protocol: {
    magic: 4022399691
  },
  seedsDns: [
    "tseed.peercoin.net",
    "tseed2.peercoin.net",
    "tseed.peercoin-library.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Wg), sT = {
  main: iT,
  test: oT
}, aT = {
  name: "Qtum",
  unit: "QTUM"
}, fT = Object.assign({}, {
  hashGenesisBlock: "000075aef83cf2853580f8ae8ce6f8c3096cfa21d98334d6e3f95e5582ed986c",
  // nDefaultPort
  port: 3888,
  protocol: {
    // pchMessageStart
    magic: 3550924785
    // careful, sent over wire as little endian
  },
  bech32: "qc",
  // vSeeds
  seedsDns: [
    "qtum3.dynu.net"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 2301,
    private: 128,
    public: 58,
    scripthash: 50
  }
}, aT), cT = {
  main: fT
}, jg = {
  name: "Ravencoin",
  unit: "RVN"
}, uT = Object.assign({}, {
  hashGenesisBlock: "0000006b444bc2f2ffe627be9d9e7e7a0730000870ef6eb6da46c8eae389df90",
  port: 8767,
  protocol: {
    magic: 1314275666
  },
  bech32: "rc",
  seedsDns: [
    "seed-raven.bitactivate.com",
    "seed-raven.ravencoin.com",
    "seed-raven.ravencoin.org"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 175,
    private: 128,
    public: 60,
    scripthash: 122
  }
}, jg), hT = Object.assign({}, {
  hashGenesisBlock: "000000ecfc5e6324a079542221d00e10362bdc894d56500c414060eea8a3ad5a",
  port: 18770,
  protocol: {
    magic: 1414420050
  },
  bech32: "tr",
  seedsDns: [
    "seed-testnet-raven.bitactivate.com",
    "seed-testnet-raven.ravencoin.com",
    "seed-testnet-raven.ravencoin.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, jg), lT = {
  main: uT,
  test: hT
}, zg = {
  name: "ReddCoin",
  unit: "RDD"
}, dT = Object.assign({}, {
  hashGenesisBlock: "b868e0d95a3c3c0e0dadc67ee587aaf9dc8acbf99e3b4b3110fad4eb74c1decc",
  versions: {
    bip44: 4,
    private: 189,
    public: 61,
    scripthash: 5
  }
}, zg), pT = Object.assign({}, {
  hashGenesisBlock: "a12ac9bd4cd26262c53a6277aafc61fe9dfe1e2b05eaa1ca148a5be8b394e35a",
  versions: {
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, zg), gT = {
  main: dT,
  test: pT
}, Vh = {
  name: "Vertcoin",
  unit: "VTC"
}, yT = Object.assign({}, {
  hashGenesisBlock: "4d96a915f49d40b1e5c2844d1ee2dccb90013a990ccea12c492d22110489f0c4",
  // nDefaultPort
  port: 5889,
  protocol: {
    // pchMessageStart
    magic: 3669344250
    // careful, sent over wire as little endian
  },
  bech32: "vtc",
  // vSeeds
  seedsDns: [
    "useast1.vtconline.org",
    "vtc.gertjaap.org",
    "seed.vtc.bryangoodson.org",
    "dnsseed.pknight.ca",
    "seed.orderofthetaco.org",
    "seed.alexturek.org",
    "vertcoin.mbl.cash"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 28,
    private: 128,
    public: 71,
    scripthash: 5
  }
}, Vh), wT = Object.assign({}, {
  hashGenesisBlock: "cee8f24feb7a64c8f07916976aa4855decac79b6741a8ec2e32e2747497ad2c9",
  port: 15889,
  // portRpc: 18332,
  protocol: {
    magic: 1953654134
  },
  bech32: "tvtc",
  seedsDns: [
    "jlovejoy.mit.edu",
    "gertjaap.ddns.net",
    "fr1.vtconline.org",
    "tvtc.vertcoin.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    private: 239,
    public: 74,
    scripthash: 196
  }
}, Vh), vT = Object.assign({}, {
  hashGenesisBlock: "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206",
  port: 18444,
  // portRpc: 18332,
  protocol: {
    magic: 3669344250
  },
  seedsDns: [],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Vh), bT = {
  main: yT,
  test: wT,
  regtest: vT
}, Xg = {
  name: "x42",
  isProofOfStake: !0
}, mT = Object.assign({}, {
  unit: "x42",
  hashGenesisBlock: "04ffe583707a96c1c2eb54af33a4b1dc6d9d8e09fea8c9a7b097ba88f0cb64c4",
  port: 52342,
  portRpc: 52343,
  protocol: {
    magic: 55731778
  },
  seedsDns: [
    "mainnet1.x42seed.host",
    "mainnetnode1.x42seed.host",
    "tech.x42.cloud",
    "x42.seed.blockcore.net"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 424242,
    private: 203,
    public: 75,
    scripthash: 125
  }
}, Xg), ET = Object.assign({}, {
  unit: "Tx42",
  hashGenesisBlock: "a92bf124a1e6f237015440d5f1e1999bdef8e321f2d3fdc367eb2f7733b17854",
  port: 62342,
  portRpc: 62343,
  protocol: {
    magic: 72508994
  },
  seedsDns: [
    "testnet1.x42seed.host"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 424242,
    private: 193,
    public: 65,
    scripthash: 196
  }
}, Xg), _T = {
  main: mT,
  test: ET
}, Yg = {
  name: "Zcash",
  unit: "ZEC"
}, ST = Object.assign({}, {
  hashGenesisBlock: "00040fe8ec8471911baa1db1266ea15dd06b4a8a5c453883c000b031973dce08",
  // nDefaultPort
  port: 8233,
  portRpc: 8232,
  protocol: {
    // pchMessageStart
    magic: 1680337188
    // careful, sent over wire as little endian
  },
  // vSeeds
  seedsDns: [
    "dnsseed.z.cash",
    "dnsseed.str4d.xyz",
    "dnsseed.znodes.org"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 133,
    private: 128,
    public: 7352,
    scripthash: 7357
  }
}, Yg), xT = Object.assign({}, {
  hashGenesisBlock: "0x05a60a92d99d85997cce3b87616c089f6124d7342af37106edc76126334a2c38",
  port: 18233,
  portRpc: 18232,
  protocol: {
    magic: 3220773626
  },
  seedsDns: [
    "dnsseed.testnet.z.cash"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 133,
    private: 239,
    public: 7461,
    scripthash: 7354
  }
}, Yg), IT = {
  main: ST,
  test: xT
}, TT = Ce.Buffer, Zg = [
  oI,
  fI,
  dI,
  yI,
  mI,
  SI,
  TI,
  BI,
  RI,
  UI,
  LI,
  KI,
  qI,
  zI,
  ZI,
  eT,
  nT,
  sT,
  cT,
  lT,
  gT,
  bT,
  _T,
  IT
], Yr = {};
Zg.forEach(function(e) {
  var t = e.main.unit.toLowerCase(), r = e.main.name.toLowerCase();
  e.main.testnet = !1, e.main.toBitcoinJS = ea.bind(e.main), e.main.toBitcore = ta.bind(e.main), Yr[t] = e.main, Yr[r] = e.main, e.test && (e.test.testnet = !0, e.test.toBitcoinJS = ea.bind(e.test), e.test.toBitcore = ta.bind(e.test), Yr[t + "-test"] = e.test, Yr[r + "-test"] = e.test), e.regtest && (e.regtest.testnet = !0, e.regtest.toBitcoinJS = ea.bind(e.regtest), e.regtest.toBitcore = ta.bind(e.regtest), Yr[t + "-regtest"] = e.regtest, Yr[r + "-regtest"] = e.regtest), e.simnet && (e.simnet.testnet = !0, e.simnet.toBitcoinJS = ea.bind(e.simnet), e.simnet.toBitcore = ta.bind(e.simnet), Yr[t + "-simnet"] = e.simnet, Yr[r + "-simnet"] = e.simnet);
});
function Jg(e) {
  var t = e.toLowerCase();
  return t in Yr ? Yr[t] : null;
}
Zg.forEach(function(e) {
  Jg[e.main.name.toLowerCase()] = e;
});
function ea() {
  return Object.assign({}, this, {
    messagePrefix: this.messagePrefix || "" + this.name + ` Signed Message:
`,
    bech32: this.bech32,
    bip32: {
      public: (this.versions.bip32 || {}).public,
      private: (this.versions.bip32 || {}).private
    },
    pubKeyHash: this.versions.public,
    scriptHash: this.versions.scripthash,
    wif: this.versions.private,
    dustThreshold: null
    // TODO
  });
}
function ta() {
  var e = TT.allocUnsafe(4);
  return e.writeUInt32BE(this.protocol ? this.protocol.magic : 0, 0), e = e.readUInt32LE(0), Object.assign({}, this, {
    name: this.testnet ? "testnet" : "livenet",
    alias: this.testnet ? "testnet" : "mainnet",
    pubkeyhash: this.versions.public,
    privatekey: this.versions.private,
    scripthash: this.versions.scripthash,
    xpubkey: (this.versions.bip32 || {}).public,
    xprivkey: (this.versions.bip32 || {}).private,
    networkMagic: e,
    port: this.port,
    dnsSeeds: this.seedsDns || []
  });
}
var AT = Jg;
const ra = /* @__PURE__ */ op(AT), OT = typeof process < "u" && process.pid ? process.pid.toString(36) : "", mn = (e) => {
  switch (e) {
    case Ue.Bitcoin:
      return _n.networks.bitcoin;
    case Ue.BitcoinCash:
      return ra.bitcoincash.main.toBitcoinJS();
    case Ue.Dogecoin:
      const t = {
        private: 70615956,
        public: 70617039
      }, r = ra.dogecoin.test;
      return r.versions.bip32 = t, ra.dogecoin.main.toBitcoinJS();
    case Ue.Litecoin:
      return ra.litecoin.main.toBitcoinJS();
    default:
      throw new Error("Invalid chain");
  }
}, BT = (e) => ({
  [Lr.Average]: Math.floor(e),
  [Lr.Fast]: Math.floor(e * 1.5),
  [Lr.Fastest]: Math.floor(e * 2)
}), PT = (e) => Jx(e, tI), Qg = (e) => {
  if (!PT(e))
    throw new Error("Invalid BIP39 phrase");
  return eI(e);
};
let jc = 0;
const NT = () => {
  const e = Date.now(), t = jc || e;
  return jc = t, e > jc ? e : t + 1;
}, RT = () => OT + NT().toString(36), Pd = async ({
  phrase: e,
  wif: t,
  derivationPath: r,
  chain: n
}) => {
  if (!t && !e)
    throw new Error("Either phrase or wif must be provided");
  const i = await import("./js-fe99b282.js").then((d) => d.j), o = Hh.ECPairFactory(i), s = mn(n);
  if (t)
    return o.fromWIF(t, s);
  const a = Qg(e), c = ci.fromMasterSeed(a, s).derive(r);
  if (!c.privateKey)
    throw new Error("Could not get private key from phrase");
  return o.fromPrivateKey(Buffer.from(c.privateKey), { network: s });
}, ey = ({ address: e, chain: t }) => {
  try {
    return _n.address.toOutputScript(e, mn(t)), !0;
  } catch {
    return !1;
  }
}, kT = ({ keys: e, chain: t }) => {
  if (!e)
    throw new Error("Keys must be provided");
  const r = Ue.Dogecoin === t ? _n.payments.p2pkh : _n.payments.p2wpkh, { address: n } = r({ pubkey: e.publicKey, network: mn(t) });
  if (!n)
    throw new Error("Address not defined");
  return n;
}, MT = async ({
  signTransaction: e,
  from: t,
  recipient: r,
  chain: n,
  apiClient: i,
  feeOptionKey: o,
  broadcastTx: s,
  ...a
}) => {
  if (!t)
    throw new Error("From address must be provided");
  if (!r)
    throw new Error("Recipient address must be provided");
  const c = a.feeRate || (await Sf(i))[o || Lr.Fast], { psbt: d } = await ry({
    ...a,
    recipient: r,
    feeRate: c,
    sender: t,
    fetchTxHex: n === Ue.Dogecoin,
    chain: n,
    apiClient: i
  }), w = await e(d);
  return w.finalizeAllInputs(), s(w.extractTransaction().toHex());
}, UT = async ({
  address: e,
  chain: t,
  apiClient: r
}) => [
  {
    asset: hp(t),
    amount: gn(await r.getBalance(e), Zu[t])
  }
], Sf = async (e) => BT(await e.getSuggestedTxFee()), ty = async ({
  amount: e,
  recipient: t,
  memo: r,
  sender: n,
  fetchTxHex: i = !1,
  apiClient: o,
  chain: s
}) => {
  const a = await o.scanUTXOs({
    address: n,
    fetchTxHex: i
  });
  if (!ey({ address: t, chain: s, apiClient: o }))
    throw new Error("Invalid address");
  const c = r ? Ts(r) : null, d = [];
  return d.push({
    address: t,
    value: e.amount().toNumber()
  }), c && d.push({ script: c, value: 0 }), { inputs: a, targetOutputs: d };
}, ry = async ({
  amount: e,
  recipient: t,
  memo: r,
  feeRate: n,
  sender: i,
  fetchTxHex: o = !1,
  apiClient: s,
  chain: a
}) => {
  const c = r ? Ts(r) : null, { inputs: d, targetOutputs: w } = await ty({
    amount: e,
    recipient: t,
    memo: r,
    sender: i,
    fetchTxHex: o,
    apiClient: s,
    chain: a,
    feeRate: n
  }), g = Math.ceil(n), { inputs: O, outputs: N } = Is({
    inputs: d,
    outputs: w,
    feeRate: g,
    chain: a
  });
  if (!O || !N)
    throw new Error("Insufficient Balance for transaction");
  const B = new _n.Psbt({ network: mn(a) });
  return a === Ue.Dogecoin && B.setMaximumFeeRate(65e7), O.forEach(
    (I) => B.addInput({
      hash: I.hash,
      index: I.index,
      ...!!I.witnessUtxo && a !== Ue.Dogecoin && { witnessUtxo: I.witnessUtxo },
      ...a === Ue.Dogecoin && {
        nonWitnessUtxo: I.txHex ? Buffer.from(I.txHex, "hex") : void 0
      }
    })
  ), N.forEach((I) => {
    I.address || (I.address = i), I.script ? c && B.addOutput({ script: c, value: 0 }) : B.addOutput(I);
  }), { psbt: B, utxos: d, inputs: O };
}, Nd = async ({
  amount: e,
  recipient: t,
  memo: r,
  feeRate: n,
  sender: i,
  fetchTxHex: o = !1,
  apiClient: s,
  chain: a,
  feeOptionKey: c = Lr.Fast
}) => {
  const { inputs: d, targetOutputs: w } = await ty({
    amount: e,
    recipient: t,
    memo: r,
    sender: i,
    fetchTxHex: o,
    apiClient: s,
    chain: a,
    feeRate: n
  }), g = n ? Math.floor(n) : (await Sf(s))[c];
  return Is({ chain: a, inputs: d, outputs: w, feeRate: g });
}, CT = async ({
  from: e,
  memo: t,
  feeRate: r,
  feeOptionKey: n = Lr.Fast,
  recipients: i = 1,
  apiClient: o,
  chain: s
}) => {
  const a = await o.getAddressData(e), c = r ? Math.ceil(r) : (await Sf(o))[n], d = a.utxo.map((B) => ({
    ...B,
    // type: utxo.witnessUtxo ? UTXOScriptType.P2WPKH : UTXOScriptType.P2PKH,
    type: Lh.P2PKH,
    hash: ""
  })).filter(
    (B) => B.value > Math.max(Tg(s), ts(B) * c)
  ), w = gn(
    d.reduce((B, I) => B += I.value, 0),
    Zu.BTC
  );
  let g = typeof i == "number" ? Array.from({ length: i }, () => ({ address: e, value: 0 })) : i;
  if (t) {
    const B = Ts(t);
    g.push({ script: B, value: 0 });
  }
  const N = await $h({
    inputs: d,
    outputs: g,
    feeRate: c
  }) * c;
  return gn(w.minus(gn(N, 8)).amount(), 8);
}, xf = (e) => ({
  accumulative: Is,
  apiClient: e.apiClient,
  broadcastTx: e.broadcastTx,
  calculateTxSize: $h,
  buildTx: (t) => ry({ ...t, ...e }),
  getAddressFromKeys: (t) => kT({ keys: t, ...e }),
  validateAddress: (t) => ey({ address: t, ...e }),
  createKeysForPath: (t) => Pd({ ...t, ...e }),
  getPrivateKeyFromMnemonic: async ({
    phrase: t,
    derivationPath: r
  }) => (await Pd({ phrase: t, derivationPath: r, ...e })).toWIF(),
  getBalance: (t) => UT({ address: t, ...e }),
  getFeeRates: () => Sf(e.apiClient),
  transfer: (t) => MT({ ...t, ...e }),
  getInputsOutputsFee: (t) => Nd({ ...t, ...e }),
  getFeeForTransaction: async (t) => gn((await Nd({ ...t, ...e })).fee, 8),
  estimateMaxSendableAmount: async (t) => CT({ ...t, ...e })
});
var HT = Ce.Buffer;
function LT(e) {
  if (e.length < 8 || e.length > 72 || e[0] !== 48 || e[1] !== e.length - 2 || e[2] !== 2)
    return !1;
  var t = e[3];
  if (t === 0 || 5 + t >= e.length || e[4 + t] !== 2)
    return !1;
  var r = e[5 + t];
  return !(r === 0 || 6 + t + r !== e.length || e[4] & 128 || t > 1 && e[4] === 0 && !(e[5] & 128) || e[t + 6] & 128 || r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128));
}
function DT(e) {
  if (e.length < 8)
    throw new Error("DER sequence length is too short");
  if (e.length > 72)
    throw new Error("DER sequence length is too long");
  if (e[0] !== 48)
    throw new Error("Expected DER sequence");
  if (e[1] !== e.length - 2)
    throw new Error("DER sequence length is invalid");
  if (e[2] !== 2)
    throw new Error("Expected DER integer");
  var t = e[3];
  if (t === 0)
    throw new Error("R length is zero");
  if (5 + t >= e.length)
    throw new Error("R length is too long");
  if (e[4 + t] !== 2)
    throw new Error("Expected DER integer (2)");
  var r = e[5 + t];
  if (r === 0)
    throw new Error("S length is zero");
  if (6 + t + r !== e.length)
    throw new Error("S length is invalid");
  if (e[4] & 128)
    throw new Error("R value is negative");
  if (t > 1 && e[4] === 0 && !(e[5] & 128))
    throw new Error("R value excessively padded");
  if (e[t + 6] & 128)
    throw new Error("S value is negative");
  if (r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128))
    throw new Error("S value excessively padded");
  return {
    r: e.slice(4, 4 + t),
    s: e.slice(6 + t)
  };
}
function $T(e, t) {
  var r = e.length, n = t.length;
  if (r === 0)
    throw new Error("R length is zero");
  if (n === 0)
    throw new Error("S length is zero");
  if (r > 33)
    throw new Error("R length is too long");
  if (n > 33)
    throw new Error("S length is too long");
  if (e[0] & 128)
    throw new Error("R value is negative");
  if (t[0] & 128)
    throw new Error("S value is negative");
  if (r > 1 && e[0] === 0 && !(e[1] & 128))
    throw new Error("R value excessively padded");
  if (n > 1 && t[0] === 0 && !(t[1] & 128))
    throw new Error("S value excessively padded");
  var i = HT.allocUnsafe(6 + r + n);
  return i[0] = 48, i[1] = i.length - 2, i[2] = 2, i[3] = e.length, e.copy(i, 4), i[4 + r] = 2, i[5 + r] = t.length, t.copy(i, 6 + r), i;
}
var ny = {
  check: LT,
  decode: DT,
  encode: $T
};
const FT = 0, KT = 0, GT = 76, VT = 77, qT = 78, WT = 79, jT = 80, zT = 81, XT = 81, YT = 82, ZT = 83, JT = 84, QT = 85, e8 = 86, t8 = 87, r8 = 88, n8 = 89, i8 = 90, o8 = 91, s8 = 92, a8 = 93, f8 = 94, c8 = 95, u8 = 96, h8 = 97, l8 = 98, d8 = 99, p8 = 100, g8 = 101, y8 = 102, w8 = 103, v8 = 104, b8 = 105, m8 = 106, E8 = 107, _8 = 108, S8 = 109, x8 = 110, I8 = 111, T8 = 112, A8 = 113, O8 = 114, B8 = 115, P8 = 116, N8 = 117, R8 = 118, k8 = 119, M8 = 120, U8 = 121, C8 = 122, H8 = 123, L8 = 124, D8 = 125, $8 = 126, F8 = 127, K8 = 128, G8 = 129, V8 = 130, q8 = 131, W8 = 132, j8 = 133, z8 = 134, X8 = 135, Y8 = 136, Z8 = 137, J8 = 138, Q8 = 139, eA = 140, tA = 141, rA = 142, nA = 143, iA = 144, oA = 145, sA = 146, aA = 147, fA = 148, cA = 149, uA = 150, hA = 151, lA = 152, dA = 153, pA = 154, gA = 155, yA = 156, wA = 157, vA = 158, bA = 159, mA = 160, EA = 161, _A = 162, SA = 163, xA = 164, IA = 165, TA = 166, AA = 167, OA = 168, BA = 169, PA = 170, NA = 171, RA = 172, kA = 173, MA = 174, UA = 175, CA = 176, HA = 177, LA = 177, DA = 178, $A = 178, FA = 179, KA = 180, GA = 181, VA = 182, qA = 183, WA = 184, jA = 185, zA = 186, XA = 187, YA = 188, ZA = 253, JA = 254, QA = 255, nr = {
  OP_FALSE: FT,
  OP_0: KT,
  OP_PUSHDATA1: GT,
  OP_PUSHDATA2: VT,
  OP_PUSHDATA4: qT,
  OP_1NEGATE: WT,
  OP_RESERVED: jT,
  OP_TRUE: zT,
  OP_1: XT,
  OP_2: YT,
  OP_3: ZT,
  OP_4: JT,
  OP_5: QT,
  OP_6: e8,
  OP_7: t8,
  OP_8: r8,
  OP_9: n8,
  OP_10: i8,
  OP_11: o8,
  OP_12: s8,
  OP_13: a8,
  OP_14: f8,
  OP_15: c8,
  OP_16: u8,
  OP_NOP: h8,
  OP_VER: l8,
  OP_IF: d8,
  OP_NOTIF: p8,
  OP_VERIF: g8,
  OP_VERNOTIF: y8,
  OP_ELSE: w8,
  OP_ENDIF: v8,
  OP_VERIFY: b8,
  OP_RETURN: m8,
  OP_TOALTSTACK: E8,
  OP_FROMALTSTACK: _8,
  OP_2DROP: S8,
  OP_2DUP: x8,
  OP_3DUP: I8,
  OP_2OVER: T8,
  OP_2ROT: A8,
  OP_2SWAP: O8,
  OP_IFDUP: B8,
  OP_DEPTH: P8,
  OP_DROP: N8,
  OP_DUP: R8,
  OP_NIP: k8,
  OP_OVER: M8,
  OP_PICK: U8,
  OP_ROLL: C8,
  OP_ROT: H8,
  OP_SWAP: L8,
  OP_TUCK: D8,
  OP_CAT: $8,
  OP_SPLIT: F8,
  OP_NUM2BIN: K8,
  OP_BIN2NUM: G8,
  OP_SIZE: V8,
  OP_INVERT: q8,
  OP_AND: W8,
  OP_OR: j8,
  OP_XOR: z8,
  OP_EQUAL: X8,
  OP_EQUALVERIFY: Y8,
  OP_RESERVED1: Z8,
  OP_RESERVED2: J8,
  OP_1ADD: Q8,
  OP_1SUB: eA,
  OP_2MUL: tA,
  OP_2DIV: rA,
  OP_NEGATE: nA,
  OP_ABS: iA,
  OP_NOT: oA,
  OP_0NOTEQUAL: sA,
  OP_ADD: aA,
  OP_SUB: fA,
  OP_MUL: cA,
  OP_DIV: uA,
  OP_MOD: hA,
  OP_LSHIFT: lA,
  OP_RSHIFT: dA,
  OP_BOOLAND: pA,
  OP_BOOLOR: gA,
  OP_NUMEQUAL: yA,
  OP_NUMEQUALVERIFY: wA,
  OP_NUMNOTEQUAL: vA,
  OP_LESSTHAN: bA,
  OP_GREATERTHAN: mA,
  OP_LESSTHANOREQUAL: EA,
  OP_GREATERTHANOREQUAL: _A,
  OP_MIN: SA,
  OP_MAX: xA,
  OP_WITHIN: IA,
  OP_RIPEMD160: TA,
  OP_SHA1: AA,
  OP_SHA256: OA,
  OP_HASH160: BA,
  OP_HASH256: PA,
  OP_CODESEPARATOR: NA,
  OP_CHECKSIG: RA,
  OP_CHECKSIGVERIFY: kA,
  OP_CHECKMULTISIG: MA,
  OP_CHECKMULTISIGVERIFY: UA,
  OP_NOP1: CA,
  OP_NOP2: HA,
  OP_CHECKLOCKTIMEVERIFY: LA,
  OP_NOP3: DA,
  OP_CHECKSEQUENCEVERIFY: $A,
  OP_NOP4: FA,
  OP_NOP5: KA,
  OP_NOP6: GA,
  OP_NOP7: VA,
  OP_NOP8: qA,
  OP_NOP9: WA,
  OP_NOP10: jA,
  OP_CHECKDATASIG: zA,
  OP_CHECKDATASIGVERIFY: XA,
  OP_REVERSEBYTES: YA,
  OP_PUBKEYHASH: ZA,
  OP_PUBKEY: JA,
  OP_INVALIDOPCODE: QA
};
var Kn = nr;
function iy(e) {
  return e < Kn.OP_PUSHDATA1 ? 1 : e <= 255 ? 2 : e <= 65535 ? 3 : 5;
}
function e4(e, t, r) {
  var n = iy(t);
  return n === 1 ? e.writeUInt8(t, r) : n === 2 ? (e.writeUInt8(Kn.OP_PUSHDATA1, r), e.writeUInt8(t, r + 1)) : n === 3 ? (e.writeUInt8(Kn.OP_PUSHDATA2, r), e.writeUInt16LE(t, r + 1)) : (e.writeUInt8(Kn.OP_PUSHDATA4, r), e.writeUInt32LE(t, r + 1)), n;
}
function t4(e, t) {
  var r = e.readUInt8(t), n, i;
  if (r < Kn.OP_PUSHDATA1)
    n = r, i = 1;
  else if (r === Kn.OP_PUSHDATA1) {
    if (t + 2 > e.length)
      return null;
    n = e.readUInt8(t + 1), i = 2;
  } else if (r === Kn.OP_PUSHDATA2) {
    if (t + 3 > e.length)
      return null;
    n = e.readUInt16LE(t + 1), i = 3;
  } else {
    if (t + 5 > e.length)
      return null;
    if (r !== Kn.OP_PUSHDATA4)
      throw new Error("Unexpected opcode");
    n = e.readUInt32LE(t + 1), i = 5;
  }
  return {
    opcode: r,
    number: n,
    size: i
  };
}
var oy = {
  encodingLength: iy,
  encode: e4,
  decode: t4
}, mt = Ve, r4 = Math.pow(2, 31) - 1;
function n4(e) {
  return mt.UInt32(e) && e <= r4;
}
function sy(e) {
  return mt.String(e) && e.match(/^(m\/)?(\d+'?\/)*\d+'?$/);
}
sy.toJSON = function() {
  return "BIP32 derivation path";
};
var i4 = 21 * 1e14;
function o4(e) {
  return mt.UInt53(e) && e <= i4;
}
var Hu = mt.quacksLike("BigInteger"), s4 = mt.quacksLike("Point"), a4 = mt.compile({ r: Hu, s: Hu }), f4 = mt.compile({
  messagePrefix: mt.oneOf(mt.Buffer, mt.String),
  bip32: {
    public: mt.UInt32,
    private: mt.UInt32
  },
  pubKeyHash: mt.UInt8,
  scriptHash: mt.UInt8,
  wif: mt.UInt8
}), ay = {
  BigInt: Hu,
  BIP32Path: sy,
  Buffer256bit: mt.BufferN(32),
  ECPoint: s4,
  ECSignature: a4,
  Hash160bit: mt.BufferN(20),
  Hash256bit: mt.BufferN(32),
  Network: f4,
  Satoshi: o4,
  UInt31: n4
};
for (var Rd in mt)
  ay[Rd] = mt[Rd];
var Tt = ay, c4 = Ce.Buffer;
function u4(e, t, r) {
  t = t || 4, r = r === void 0 ? !0 : r;
  var n = e.length;
  if (n === 0)
    return 0;
  if (n > t)
    throw new TypeError("Script number overflow");
  if (r && !(e[n - 1] & 127) && (n <= 1 || !(e[n - 2] & 128)))
    throw new Error("Non-minimally encoded script number");
  if (n === 5) {
    var i = e.readUInt32LE(0), o = e.readUInt8(4);
    return o & 128 ? -((o & -129) * 4294967296 + i) : o * 4294967296 + i;
  }
  for (var s = 0, a = 0; a < n; ++a)
    s |= e[a] << 8 * a;
  return e[n - 1] & 128 ? -(s & ~(128 << 8 * (n - 1))) : s;
}
function h4(e) {
  return e > 2147483647 ? 5 : e > 8388607 ? 4 : e > 32767 ? 3 : e > 127 ? 2 : e > 0 ? 1 : 0;
}
function l4(e) {
  for (var t = Math.abs(e), r = h4(t), n = c4.allocUnsafe(r), i = e < 0, o = 0; o < r; ++o)
    n.writeUInt8(t & 255, o), t >>= 8;
  return n[r - 1] & 128 ? n.writeUInt8(i ? 128 : 0, r - 1) : i && (n[r - 1] |= 128), n;
}
var fy = {
  decode: u4,
  encode: l4
}, kd = nr, cy = {};
for (var Md in kd) {
  var d4 = kd[Md];
  cy[d4] = Md;
}
var p4 = cy, tr = Ce.Buffer, g4 = ny, us = oy, If = Ve, xi = Tt, y4 = fy, Tr = nr, w4 = p4, uy = Tr.OP_RESERVED;
function v4(e) {
  return xi.Number(e) && (e === Tr.OP_0 || e >= Tr.OP_1 && e <= Tr.OP_16 || e === Tr.OP_1NEGATE);
}
function b4(e) {
  return xi.Buffer(e) || v4(e);
}
function hy(e) {
  return xi.Array(e) && e.every(b4);
}
function Pa(e) {
  if (e.length === 0)
    return Tr.OP_0;
  if (e.length === 1) {
    if (e[0] >= 1 && e[0] <= 16)
      return uy + e[0];
    if (e[0] === 129)
      return Tr.OP_1NEGATE;
  }
}
function ly(e) {
  if (tr.isBuffer(e))
    return e;
  If(xi.Array, e);
  var t = e.reduce(function(i, o) {
    return tr.isBuffer(o) ? o.length === 1 && Pa(o) !== void 0 ? i + 1 : i + us.encodingLength(o.length) + o.length : i + 1;
  }, 0), r = tr.allocUnsafe(t), n = 0;
  if (e.forEach(function(i) {
    if (tr.isBuffer(i)) {
      var o = Pa(i);
      if (o !== void 0) {
        r.writeUInt8(o, n), n += 1;
        return;
      }
      n += us.encode(r, i.length, n), i.copy(r, n), n += i.length;
    } else
      r.writeUInt8(i, n), n += 1;
  }), n !== r.length)
    throw new Error("Could not decode chunks");
  return r;
}
function m4(e) {
  if (tr.isBuffer(e))
    return e;
  var t = e.reduce(function(i, o) {
    return tr.isBuffer(o) ? i + us.encodingLength(o.length) + o.length : i + 1;
  }, 0), r = tr.allocUnsafe(t), n = 0;
  if (e.forEach(function(i, o) {
    tr.isBuffer(i) ? (n += us.encode(r, i.length, n), i.copy(r, n), n += i.length) : (r.writeUInt8(i, n), n += 1);
  }), n !== r.length)
    throw new Error("Could not decode chunks");
  return r;
}
function qh(e) {
  if (xi.Array(e))
    return e;
  If(xi.Buffer, e);
  for (var t = [], r = 0; r < e.length; ) {
    var n = e[r];
    if (n > Tr.OP_0 && n <= Tr.OP_PUSHDATA4) {
      var i = us.decode(e, r);
      if (i === null)
        return [];
      r += i.size;
      var o = e.slice(r, r + i.number);
      r += i.number;
      var s = Pa(o);
      s !== void 0 ? t.push(s) : t.push(o);
    } else
      t.push(n), r += 1;
  }
  return t;
}
function E4(e) {
  return tr.isBuffer(e) && (e = qh(e)), e.map(function(t) {
    if (tr.isBuffer(t)) {
      var r = Pa(t);
      if (r === void 0)
        return t.toString("hex");
      t = r;
    }
    return w4[t];
  }).join(" ");
}
function _4(e) {
  return If(xi.String, e), ly(
    e.split(" ").map(function(t) {
      return Tr[t] !== void 0 ? Tr[t] : tr.from(t, "hex");
    })
  );
}
function S4(e) {
  return e = qh(e), If(hy, e), e.map(function(t) {
    return tr.isBuffer(t) ? t : t === Tr.OP_0 ? tr.allocUnsafe(0) : y4.encode(t - uy);
  });
}
function x4(e) {
  if (!tr.isBuffer(e) || e.length < 33)
    return !1;
  switch (e[0]) {
    case 2:
    case 3:
      return e.length === 33;
    case 4:
      return e.length === 65;
  }
  return !1;
}
function dy(e) {
  var t = e & -193;
  return t > 0 && t < 4;
}
function I4(e) {
  return !tr.isBuffer(e) || !dy(e[e.length - 1]) ? !1 : e.length === 65 ? !0 : g4.check(e.slice(0, -1));
}
var At = {
  compile: ly,
  compile2: m4,
  decompile: qh,
  fromASM: _4,
  toASM: E4,
  toStack: S4,
  number: fy,
  isCanonicalPubKey: x4,
  isCanonicalSignature: I4,
  isPushOnly: hy,
  isDefinedHashType: dy
}, hs = At, Lu = Tt, py = Ve, Wh = nr, ls = Wh.OP_RESERVED;
function jh(e, t) {
  var r = hs.decompile(e);
  if (r.length < 4 || r[r.length - 1] !== Wh.OP_CHECKMULTISIG || !Lu.Number(r[0]) || !Lu.Number(r[r.length - 2]))
    return !1;
  var n = r[0] - ls, i = r[r.length - 2] - ls;
  if (n <= 0 || i > 16 || n > i || i !== r.length - 3)
    return !1;
  if (t)
    return !0;
  var o = r.slice(1, -2);
  return o.every(hs.isCanonicalPubKey);
}
jh.toJSON = function() {
  return "multi-sig output";
};
function T4(e, t) {
  py({
    m: Lu.Number,
    pubKeys: [hs.isCanonicalPubKey]
  }, {
    m: e,
    pubKeys: t
  });
  var r = t.length;
  if (r < e)
    throw new TypeError("Not enough pubKeys provided");
  return hs.compile([].concat(
    ls + e,
    t,
    ls + r,
    Wh.OP_CHECKMULTISIG
  ));
}
function A4(e, t) {
  var r = hs.decompile(e);
  return py(jh, r, t), {
    m: r[0] - ls,
    pubKeys: r.slice(1, -2)
  };
}
var gy = {
  check: jh,
  decode: A4,
  encode: T4
}, O4 = Ce.Buffer, ds = At, B4 = gy, la = Ve, zh = nr;
function yy(e) {
  return e === zh.OP_0 || ds.isCanonicalSignature(e);
}
function Xh(e, t) {
  var r = ds.decompile(e);
  return r.length < 2 || r[0] !== zh.OP_0 ? !1 : t ? r.slice(1).every(yy) : r.slice(1).every(ds.isCanonicalSignature);
}
Xh.toJSON = function() {
  return "multisig input";
};
var Ud = O4.allocUnsafe(0);
function wy(e, t) {
  if (la([yy], e), t) {
    var r = B4.decode(t);
    if (e.length < r.m)
      throw new TypeError("Not enough signatures provided");
    if (e.length > r.pubKeys.length)
      throw new TypeError("Too many signatures provided");
  }
  return [].concat(Ud, e.map(function(n) {
    return n === zh.OP_0 ? Ud : n;
  }));
}
function P4(e, t) {
  return ds.compile(wy(e, t));
}
function vy(e, t) {
  return la(la.Array, e), la(Xh, e, t), e.slice(1);
}
function N4(e, t) {
  var r = ds.decompile(e);
  return vy(r, t);
}
var R4 = {
  check: Xh,
  decode: N4,
  decodeStack: vy,
  encode: P4,
  encodeStack: wy
}, Yh = {
  input: R4,
  output: gy
}, by = At, k4 = Tt, my = Ve, Ey = nr;
function Zh(e) {
  var t = by.compile(e);
  return t.length > 1 && t[0] === Ey.OP_RETURN;
}
Zh.toJSON = function() {
  return "null data output";
};
function M4(e) {
  return my(k4.Buffer, e), by.compile([Ey.OP_RETURN, e]);
}
function U4(e) {
  return my(Zh, e), e.slice(2);
}
var C4 = {
  output: {
    check: Zh,
    decode: U4,
    encode: M4
  }
}, ps = At, da = Ve;
function Jh(e) {
  var t = ps.decompile(e);
  return t.length === 1 && ps.isCanonicalSignature(t[0]);
}
Jh.toJSON = function() {
  return "pubKey input";
};
function _y(e) {
  return da(ps.isCanonicalSignature, e), [e];
}
function H4(e) {
  return ps.compile(_y(e));
}
function Sy(e) {
  return da(da.Array, e), da(Jh, e), e[0];
}
function L4(e) {
  var t = ps.decompile(e);
  return Sy(t);
}
var D4 = {
  check: Jh,
  decode: L4,
  decodeStack: Sy,
  encode: H4,
  encodeStack: _y
}, gs = At, xy = Ve, Iy = nr;
function Qh(e) {
  var t = gs.decompile(e);
  return t.length === 2 && gs.isCanonicalPubKey(t[0]) && t[1] === Iy.OP_CHECKSIG;
}
Qh.toJSON = function() {
  return "pubKey output";
};
function $4(e) {
  return xy(gs.isCanonicalPubKey, e), gs.compile([e, Iy.OP_CHECKSIG]);
}
function F4(e) {
  var t = gs.decompile(e);
  return xy(Qh, t), t[0];
}
var K4 = {
  check: Qh,
  decode: F4,
  encode: $4
}, el = {
  input: D4,
  output: K4
}, Ei = At, pa = Ve;
function tl(e) {
  var t = Ei.decompile(e);
  return t.length === 2 && Ei.isCanonicalSignature(t[0]) && Ei.isCanonicalPubKey(t[1]);
}
tl.toJSON = function() {
  return "pubKeyHash input";
};
function Ty(e, t) {
  return pa({
    signature: Ei.isCanonicalSignature,
    pubKey: Ei.isCanonicalPubKey
  }, {
    signature: e,
    pubKey: t
  }), [e, t];
}
function G4(e, t) {
  return Ei.compile(Ty(e, t));
}
function Ay(e) {
  return pa(pa.Array, e), pa(tl, e), {
    signature: e[0],
    pubKey: e[1]
  };
}
function V4(e) {
  var t = Ei.decompile(e);
  return Ay(t);
}
var q4 = {
  check: tl,
  decode: V4,
  decodeStack: Ay,
  encode: G4,
  encodeStack: Ty
}, Oy = At, W4 = Tt, By = Ve, Gn = nr;
function rl(e) {
  var t = Oy.compile(e);
  return t.length === 25 && t[0] === Gn.OP_DUP && t[1] === Gn.OP_HASH160 && t[2] === 20 && t[23] === Gn.OP_EQUALVERIFY && t[24] === Gn.OP_CHECKSIG;
}
rl.toJSON = function() {
  return "pubKeyHash output";
};
function j4(e) {
  return By(W4.Hash160bit, e), Oy.compile([
    Gn.OP_DUP,
    Gn.OP_HASH160,
    e,
    Gn.OP_EQUALVERIFY,
    Gn.OP_CHECKSIG
  ]);
}
function z4(e) {
  return By(rl, e), e.slice(3, 23);
}
var X4 = {
  check: rl,
  decode: z4,
  encode: j4
}, nl = {
  input: q4,
  output: X4
}, Py = At, Y4 = Tt, Ny = Ve, Ry = nr;
function il(e) {
  var t = Py.compile(e);
  return t.length === 22 && t[0] === Ry.OP_0 && t[1] === 20;
}
il.toJSON = function() {
  return "Witness pubKeyHash output";
};
function Z4(e) {
  return Ny(Y4.Hash160bit, e), Py.compile([Ry.OP_0, e]);
}
function J4(e) {
  return Ny(il, e), e.slice(2);
}
var ky = {
  check: il,
  decode: J4,
  encode: Z4
}, My = At, Q4 = Tt, Uy = Ve, Cy = nr;
function ol(e) {
  var t = My.compile(e);
  return t.length === 34 && t[0] === Cy.OP_0 && t[1] === 32;
}
ol.toJSON = function() {
  return "Witness scriptHash output";
};
function eO(e) {
  return Uy(Q4.Hash256bit, e), My.compile([Cy.OP_0, e]);
}
function tO(e) {
  return Uy(ol, e), e.slice(2);
}
var Hy = {
  check: ol,
  decode: tO,
  encode: eO
}, rO = Ce.Buffer, Jr = At, zc = Ve, Cd = Yh, Hd = el, Ld = nl, nO = ky, iO = Hy;
function sl(e, t) {
  var r = Jr.decompile(e);
  if (r.length < 1)
    return !1;
  var n = r[r.length - 1];
  if (!rO.isBuffer(n))
    return !1;
  var i = Jr.decompile(Jr.compile(r.slice(0, -1))), o = Jr.decompile(n);
  return o.length === 0 || !Jr.isPushOnly(i) ? !1 : r.length === 1 ? iO.check(o) || nO.check(o) : !!(Ld.input.check(i) && Ld.output.check(o) || Cd.input.check(i, t) && Cd.output.check(o) || Hd.input.check(i) && Hd.output.check(o));
}
sl.toJSON = function() {
  return "scriptHash input";
};
function Ly(e, t) {
  var r = Jr.compile(t);
  return [].concat(e, r);
}
function oO(e, t) {
  var r = Jr.decompile(e);
  return Jr.compile(Ly(r, t));
}
function Dy(e) {
  return zc(zc.Array, e), zc(sl, e), {
    redeemScriptStack: e.slice(0, -1),
    redeemScript: e[e.length - 1]
  };
}
function sO(e) {
  var t = Jr.decompile(e), r = Dy(t);
  return r.redeemScriptSig = Jr.compile(r.redeemScriptStack), delete r.redeemScriptStack, r;
}
var aO = {
  check: sl,
  decode: sO,
  decodeStack: Dy,
  encode: oO,
  encodeStack: Ly
}, $y = At, fO = Tt, Fy = Ve, Na = nr;
function al(e) {
  var t = $y.compile(e);
  return t.length === 23 && t[0] === Na.OP_HASH160 && t[1] === 20 && t[22] === Na.OP_EQUAL;
}
al.toJSON = function() {
  return "scriptHash output";
};
function cO(e) {
  return Fy(fO.Hash160bit, e), $y.compile([Na.OP_HASH160, e, Na.OP_EQUAL]);
}
function uO(e) {
  return Fy(al, e), e.slice(2, 22);
}
var hO = {
  check: al,
  decode: uO,
  encode: cO
}, lO = {
  input: aO,
  output: hO
}, Ra = At, ga = Ve;
function Ky(e) {
  return Ra.isCanonicalPubKey(e) && e.length === 33;
}
function fl(e) {
  var t = Ra.decompile(e);
  return t.length === 2 && Ra.isCanonicalSignature(t[0]) && Ky(t[1]);
}
fl.toJSON = function() {
  return "witnessPubKeyHash input";
};
function dO(e, t) {
  return ga({
    signature: Ra.isCanonicalSignature,
    pubKey: Ky
  }, {
    signature: e,
    pubKey: t
  }), [e, t];
}
function pO(e) {
  return ga(ga.Array, e), ga(fl, e), {
    signature: e[0],
    pubKey: e[1]
  };
}
var gO = {
  check: fl,
  decodeStack: pO,
  encodeStack: dO
}, yO = {
  input: gO,
  output: ky
}, Dd = At, Du = Tt, rs = Ve, $d = Yh, Fd = el, Kd = nl;
function cl(e, t) {
  if (rs(Du.Array, e), e.length < 1)
    return !1;
  var r = e[e.length - 1];
  if (!Buffer.isBuffer(r))
    return !1;
  var n = Dd.decompile(r);
  if (n.length === 0)
    return !1;
  var i = Dd.compile(e.slice(0, -1));
  return !!(Kd.input.check(i) && Kd.output.check(n) || $d.input.check(i, t) && $d.output.check(n) || Fd.input.check(i) && Fd.output.check(n));
}
cl.toJSON = function() {
  return "witnessScriptHash input";
};
function wO(e, t) {
  return rs({
    witnessData: [Du.Buffer],
    witnessScript: Du.Buffer
  }, {
    witnessData: e,
    witnessScript: t
  }), [].concat(e, t);
}
function vO(e) {
  return rs(rs.Array, e), rs(cl, e), {
    witnessData: e.slice(0, -1),
    witnessScript: e[e.length - 1]
  };
}
var bO = {
  check: cl,
  decodeStack: vO,
  encodeStack: wO
}, mO = {
  input: bO,
  output: Hy
}, Gy = Ce.Buffer, ul = At, EO = Tt, Vy = Ve, qy = nr, Wy = Gy.from("aa21a9ed", "hex");
function hl(e) {
  var t = ul.compile(e);
  return t.length > 37 && t[0] === qy.OP_RETURN && t[1] === 36 && t.slice(2, 6).equals(Wy);
}
hl.toJSON = function() {
  return "Witness commitment output";
};
function _O(e) {
  Vy(EO.Hash256bit, e);
  var t = Gy.allocUnsafe(36);
  return Wy.copy(t, 0), e.copy(t, 4), ul.compile([qy.OP_RETURN, t]);
}
function SO(e) {
  return Vy(hl, e), ul.decompile(e)[1].slice(4, 36);
}
var xO = {
  check: hl,
  decode: SO,
  encode: _O
}, IO = {
  output: xO
}, ll = At.decompile, dl = Yh, jy = C4, pl = el, gl = nl, yl = lO, wl = yO, vl = mO, zy = IO, Pt = {
  MULTISIG: "multisig",
  NONSTANDARD: "nonstandard",
  NULLDATA: "nulldata",
  P2PK: "pubkey",
  P2PKH: "pubkeyhash",
  P2SH: "scripthash",
  P2WPKH: "witnesspubkeyhash",
  P2WSH: "witnessscripthash",
  WITNESS_COMMITMENT: "witnesscommitment"
};
function TO(e) {
  if (wl.output.check(e))
    return Pt.P2WPKH;
  if (vl.output.check(e))
    return Pt.P2WSH;
  if (gl.output.check(e))
    return Pt.P2PKH;
  if (yl.output.check(e))
    return Pt.P2SH;
  var t = ll(e);
  return dl.output.check(t) ? Pt.MULTISIG : pl.output.check(t) ? Pt.P2PK : zy.output.check(t) ? Pt.WITNESS_COMMITMENT : jy.output.check(t) ? Pt.NULLDATA : Pt.NONSTANDARD;
}
function AO(e, t) {
  var r = ll(e);
  return gl.input.check(r) ? Pt.P2PKH : yl.input.check(r, t) ? Pt.P2SH : dl.input.check(r, t) ? Pt.MULTISIG : pl.input.check(r) ? Pt.P2PK : Pt.NONSTANDARD;
}
function OO(e, t) {
  var r = ll(e);
  return wl.input.check(r) ? Pt.P2WPKH : vl.input.check(r, t) ? Pt.P2WSH : Pt.NONSTANDARD;
}
var bl = {
  classifyInput: AO,
  classifyOutput: TO,
  classifyWitness: OO,
  multisig: dl,
  nullData: jy,
  pubKey: pl,
  pubKeyHash: gl,
  scriptHash: yl,
  witnessPubKeyHash: wl,
  witnessScriptHash: vl,
  witnessCommitment: zy,
  types: Pt
}, Xc = oy, To = hf;
function Xy(e, t) {
  if (typeof e != "number")
    throw new Error("cannot write a non-number as a number");
  if (e < 0)
    throw new Error("specified a negative value for writing an unsigned value");
  if (e > t)
    throw new Error("RangeError: value out of range");
  if (Math.floor(e) !== e)
    throw new Error("value has a fractional component");
}
function BO(e, t) {
  var r = e.readUInt32LE(t), n = e.readUInt32LE(t + 4);
  return n *= 4294967296, Xy(n + r, 9007199254740991), n + r;
}
function PO(e, t, r) {
  return Xy(t, 9007199254740991), e.writeInt32LE(t & -1, r), e.writeUInt32LE(Math.floor(t / 4294967296), r + 4), r + 8;
}
function NO(e, t) {
  var r = To.decode(e, t);
  return {
    number: r,
    size: To.decode.bytes
  };
}
function RO(e, t, r) {
  return To.encode(t, e, r), To.encode.bytes;
}
var Yy = {
  pushDataSize: Xc.encodingLength,
  readPushDataInt: Xc.decode,
  readUInt64LE: BO,
  readVarInt: NO,
  varIntBuffer: To.encode,
  varIntSize: To.encodingLength,
  writePushDataInt: Xc.encode,
  writeUInt64LE: PO,
  writeVarInt: RO
}, ml = mh;
function Zy(e) {
  return ml("ripemd160").update(e).digest();
}
function kO(e) {
  return ml("sha1").update(e).digest();
}
function ka(e) {
  return ml("sha256").update(e).digest();
}
function MO(e) {
  return Zy(ka(e));
}
function UO(e) {
  return ka(ka(e));
}
var qi = {
  hash160: MO,
  hash256: UO,
  ripemd160: Zy,
  sha1: kO,
  sha256: ka
}, CO = function(t, r) {
  if (!Array.isArray(t))
    throw TypeError("Expected values Array");
  if (typeof r != "function")
    throw TypeError("Expected digest Function");
  for (var n = t.length, i = t.concat(); n > 1; ) {
    for (var o = 0, s = 0; s < n; s += 2, ++o) {
      var a = i[s], c = s + 1 === n ? a : i[s + 1], d = Buffer.concat([a, c]);
      i[o] = r(d);
    }
    n = o;
  }
  return i[0];
}, Sr = Ce.Buffer, ui = qi, Gd = At, El = Yy, HO = nr, ri = Ve, Ne = Tt, tn = hf;
function go(e) {
  var t = e.length;
  return tn.encodingLength(t) + t;
}
function LO(e) {
  var t = e.length;
  return tn.encodingLength(t) + e.reduce(function(r, n) {
    return r + go(n);
  }, 0);
}
function be() {
  this.version = 2, this.locktime = 0, this.ins = [], this.outs = [];
}
be.DEFAULT_SEQUENCE = 4294967295;
be.SIGHASH_ALL = 1;
be.SIGHASH_NONE = 2;
be.SIGHASH_SINGLE = 3;
be.SIGHASH_ANYONECANPAY = 128;
be.SIGHASH_BITCOINCASHBIP143 = 64;
be.ADVANCED_TRANSACTION_MARKER = 0;
be.ADVANCED_TRANSACTION_FLAG = 1;
var _l = Sr.allocUnsafe(0), Jy = [], Yc = Sr.from("0000000000000000000000000000000000000000000000000000000000000000", "hex"), Vd = Sr.from("0000000000000000000000000000000000000000000000000000000000000001", "hex"), DO = Sr.from("ffffffffffffffff", "hex"), $O = {
  script: _l,
  valueBuffer: DO
};
be.fromBuffer = function(e, t) {
  var r = 0;
  function n(T) {
    return r += T, e.slice(r - T, r);
  }
  function i() {
    var T = e.readUInt32LE(r);
    return r += 4, T;
  }
  function o() {
    var T = e.readInt32LE(r);
    return r += 4, T;
  }
  function s() {
    var T = El.readUInt64LE(e, r);
    return r += 8, T;
  }
  function a() {
    var T = tn.decode(e, r);
    return r += tn.decode.bytes, T;
  }
  function c() {
    return n(a());
  }
  function d() {
    for (var T = a(), k = [], F = 0; F < T; F++)
      k.push(c());
    return k;
  }
  var w = new be();
  w.version = o();
  var g = e.readUInt8(r), O = e.readUInt8(r + 1), N = !1;
  g === be.ADVANCED_TRANSACTION_MARKER && O === be.ADVANCED_TRANSACTION_FLAG && (r += 2, N = !0);
  for (var B = a(), I = 0; I < B; ++I)
    w.ins.push({
      hash: n(32),
      index: i(),
      script: c(),
      sequence: i(),
      witness: Jy
    });
  var M = a();
  for (I = 0; I < M; ++I)
    w.outs.push({
      value: s(),
      script: c()
    });
  if (N) {
    for (I = 0; I < B; ++I)
      w.ins[I].witness = d();
    if (!w.hasWitnesses())
      throw new Error("Transaction has superfluous witness data");
  }
  if (w.locktime = i(), t)
    return w;
  if (r !== e.length)
    throw new Error("Transaction has unexpected data");
  return w;
};
be.fromHex = function(e) {
  return be.fromBuffer(Sr.from(e, "hex"));
};
be.isCoinbaseHash = function(e) {
  ri(Ne.Hash256bit, e);
  for (var t = 0; t < 32; ++t)
    if (e[t] !== 0)
      return !1;
  return !0;
};
be.prototype.isCoinbase = function() {
  return this.ins.length === 1 && be.isCoinbaseHash(this.ins[0].hash);
};
be.prototype.addInput = function(e, t, r, n) {
  return ri(Ne.tuple(
    Ne.Hash256bit,
    Ne.UInt32,
    Ne.maybe(Ne.UInt32),
    Ne.maybe(Ne.Buffer)
  ), arguments), Ne.Null(r) && (r = be.DEFAULT_SEQUENCE), this.ins.push({
    hash: e,
    index: t,
    script: n || _l,
    sequence: r,
    witness: Jy
  }) - 1;
};
be.prototype.addOutput = function(e, t) {
  return ri(Ne.tuple(Ne.Buffer, Ne.Satoshi), arguments), this.outs.push({
    script: e,
    value: t
  }) - 1;
};
be.prototype.hasWitnesses = function() {
  return this.ins.some(function(e) {
    return e.witness.length !== 0;
  });
};
be.prototype.weight = function() {
  var e = this.__byteLength(!1), t = this.__byteLength(!0);
  return e * 3 + t;
};
be.prototype.virtualSize = function() {
  return Math.ceil(this.weight() / 4);
};
be.prototype.byteLength = function() {
  return this.__byteLength(!0);
};
be.prototype.__byteLength = function(e) {
  var t = e && this.hasWitnesses();
  return (t ? 10 : 8) + tn.encodingLength(this.ins.length) + tn.encodingLength(this.outs.length) + this.ins.reduce(function(r, n) {
    return r + 40 + go(n.script);
  }, 0) + this.outs.reduce(function(r, n) {
    return r + 8 + go(n.script);
  }, 0) + (t ? this.ins.reduce(function(r, n) {
    return r + LO(n.witness);
  }, 0) : 0);
};
be.prototype.clone = function() {
  var e = new be();
  return e.version = this.version, e.locktime = this.locktime, e.ins = this.ins.map(function(t) {
    return {
      hash: t.hash,
      index: t.index,
      script: t.script,
      sequence: t.sequence,
      witness: t.witness
    };
  }), e.outs = this.outs.map(function(t) {
    return {
      script: t.script,
      value: t.value
    };
  }), e;
};
be.prototype.hashForSignature = function(e, t, r) {
  if (ri(Ne.tuple(
    Ne.UInt32,
    Ne.Buffer,
    /* types.UInt8 */
    Ne.Number
  ), arguments), e >= this.ins.length)
    return Vd;
  var n = Gd.compile(Gd.decompile(t).filter(function(a) {
    return a !== HO.OP_CODESEPARATOR;
  })), i = this.clone();
  if ((r & 31) === be.SIGHASH_NONE)
    i.outs = [], i.ins.forEach(function(a, c) {
      c !== e && (a.sequence = 0);
    });
  else if ((r & 31) === be.SIGHASH_SINGLE) {
    if (e >= this.outs.length)
      return Vd;
    i.outs.length = e + 1;
    for (var o = 0; o < e; o++)
      i.outs[o] = $O;
    i.ins.forEach(function(a, c) {
      c !== e && (a.sequence = 0);
    });
  }
  r & be.SIGHASH_ANYONECANPAY ? (i.ins = [i.ins[e]], i.ins[0].script = n) : (i.ins.forEach(function(a) {
    a.script = _l;
  }), i.ins[e].script = n);
  var s = Sr.allocUnsafe(i.__byteLength(!1) + 4);
  return s.writeInt32LE(r, s.length - 4), i.__toBuffer(s, 0, !1), ui.hash256(s);
};
be.prototype.hashForWitnessV0 = function(e, t, r, n) {
  ri(Ne.tuple(Ne.UInt32, Ne.Buffer, Ne.Satoshi, Ne.UInt32), arguments);
  var i, o;
  function s(T) {
    o += T.copy(i, o);
  }
  function a(T) {
    o = i.writeUInt32LE(T, o);
  }
  function c(T) {
    o = El.writeUInt64LE(i, T, o);
  }
  function d(T) {
    tn.encode(T, i, o), o += tn.encode.bytes;
  }
  function w(T) {
    d(T.length), s(T);
  }
  var g = Yc, O = Yc, N = Yc;
  if (n & be.SIGHASH_ANYONECANPAY || (i = Sr.allocUnsafe(36 * this.ins.length), o = 0, this.ins.forEach(function(T) {
    s(T.hash), a(T.index);
  }), O = ui.hash256(i)), !(n & be.SIGHASH_ANYONECANPAY) && (n & 31) !== be.SIGHASH_SINGLE && (n & 31) !== be.SIGHASH_NONE && (i = Sr.allocUnsafe(4 * this.ins.length), o = 0, this.ins.forEach(function(T) {
    a(T.sequence);
  }), N = ui.hash256(i)), (n & 31) !== be.SIGHASH_SINGLE && (n & 31) !== be.SIGHASH_NONE) {
    var B = this.outs.reduce(function(T, k) {
      return T + 8 + go(k.script);
    }, 0);
    i = Sr.allocUnsafe(B), o = 0, this.outs.forEach(function(T) {
      c(T.value), w(T.script);
    }), g = ui.hash256(i);
  } else if ((n & 31) === be.SIGHASH_SINGLE && e < this.outs.length) {
    var I = this.outs[e];
    i = Sr.allocUnsafe(8 + go(I.script)), o = 0, c(I.value), w(I.script), g = ui.hash256(i);
  }
  i = Sr.allocUnsafe(156 + go(t)), o = 0;
  var M = this.ins[e];
  return a(this.version), s(O), s(N), s(M.hash), a(M.index), w(t), c(r), a(M.sequence), s(g), a(this.locktime), a(n), ui.hash256(i);
};
be.prototype.hashForCashSignature = function(e, t, r, n) {
  if (ri(Ne.tuple(
    Ne.UInt32,
    Ne.Buffer,
    /* types.UInt8 */
    Ne.Number,
    Ne.maybe(Ne.UInt53)
  ), arguments), n & be.SIGHASH_BITCOINCASHBIP143) {
    if (Ne.Null(r))
      throw new Error("Bitcoin Cash sighash requires value of input to be signed.");
    return this.hashForWitnessV0(e, t, r, n);
  } else
    return this.hashForSignature(e, t, n);
};
be.prototype.getHash = function() {
  return ui.hash256(this.__toBuffer(void 0, void 0, !1));
};
be.prototype.getId = function() {
  return this.getHash().reverse().toString("hex");
};
be.prototype.toBuffer = function(e, t) {
  return this.__toBuffer(e, t, !0);
};
be.prototype.__toBuffer = function(e, t, r) {
  e || (e = Sr.allocUnsafe(this.__byteLength(r)));
  var n = t || 0;
  function i(N) {
    n += N.copy(e, n);
  }
  function o(N) {
    n = e.writeUInt8(N, n);
  }
  function s(N) {
    n = e.writeUInt32LE(N, n);
  }
  function a(N) {
    n = e.writeInt32LE(N, n);
  }
  function c(N) {
    n = El.writeUInt64LE(e, N, n);
  }
  function d(N) {
    tn.encode(N, e, n), n += tn.encode.bytes;
  }
  function w(N) {
    d(N.length), i(N);
  }
  function g(N) {
    d(N.length), N.forEach(w);
  }
  a(this.version);
  var O = r && this.hasWitnesses();
  return O && (o(be.ADVANCED_TRANSACTION_MARKER), o(be.ADVANCED_TRANSACTION_FLAG)), d(this.ins.length), this.ins.forEach(function(N) {
    i(N.hash), s(N.index), w(N.script), s(N.sequence);
  }), d(this.outs.length), this.outs.forEach(function(N) {
    N.valueBuffer ? i(N.valueBuffer) : c(N.value), w(N.script);
  }), O && this.ins.forEach(function(N) {
    g(N.witness);
  }), s(this.locktime), t !== void 0 ? e.slice(t, n) : e;
};
be.prototype.toHex = function() {
  return this.toBuffer().toString("hex");
};
be.prototype.setInputScript = function(e, t) {
  ri(Ne.tuple(Ne.Number, Ne.Buffer), arguments), this.ins[e].script = t;
};
be.prototype.setWitness = function(e, t) {
  ri(Ne.tuple(Ne.Number, [Ne.Buffer]), arguments), this.ins[e].witness = t;
};
var Sl = be, xl = Ce.Buffer, Qy = qi, FO = CO, KO = Ve, GO = Tt, ys = hf, VO = Sl;
function Dt() {
  this.version = 1, this.prevHash = null, this.merkleRoot = null, this.timestamp = 0, this.bits = 0, this.nonce = 0;
}
Dt.fromBuffer = function(e) {
  if (e.length < 80)
    throw new Error("Buffer too small (< 80 bytes)");
  var t = 0;
  function r(g) {
    return t += g, e.slice(t - g, t);
  }
  function n() {
    var g = e.readUInt32LE(t);
    return t += 4, g;
  }
  function i() {
    var g = e.readInt32LE(t);
    return t += 4, g;
  }
  var o = new Dt();
  if (o.version = i(), o.prevHash = r(32), o.merkleRoot = r(32), o.timestamp = n(), o.bits = n(), o.nonce = n(), e.length === 80)
    return o;
  function s() {
    var g = ys.decode(e, t);
    return t += ys.decode.bytes, g;
  }
  function a() {
    var g = VO.fromBuffer(e.slice(t), !0);
    return t += g.byteLength(), g;
  }
  var c = s();
  o.transactions = [];
  for (var d = 0; d < c; ++d) {
    var w = a();
    o.transactions.push(w);
  }
  return o;
};
Dt.prototype.byteLength = function(e) {
  return e || !this.transactions ? 80 : 80 + ys.encodingLength(this.transactions.length) + this.transactions.reduce(function(t, r) {
    return t + r.byteLength();
  }, 0);
};
Dt.fromHex = function(e) {
  return Dt.fromBuffer(xl.from(e, "hex"));
};
Dt.prototype.getHash = function() {
  return Qy.hash256(this.toBuffer(!0));
};
Dt.prototype.getId = function() {
  return this.getHash().reverse().toString("hex");
};
Dt.prototype.getUTCDate = function() {
  var e = /* @__PURE__ */ new Date(0);
  return e.setUTCSeconds(this.timestamp), e;
};
Dt.prototype.toBuffer = function(e) {
  var t = xl.allocUnsafe(this.byteLength(e)), r = 0;
  function n(s) {
    s.copy(t, r), r += s.length;
  }
  function i(s) {
    t.writeInt32LE(s, r), r += 4;
  }
  function o(s) {
    t.writeUInt32LE(s, r), r += 4;
  }
  return i(this.version), n(this.prevHash), n(this.merkleRoot), o(this.timestamp), o(this.bits), o(this.nonce), e || !this.transactions || (ys.encode(this.transactions.length, t, r), r += ys.encode.bytes, this.transactions.forEach(function(s) {
    var a = s.byteLength();
    s.toBuffer(t, r), r += a;
  })), t;
};
Dt.prototype.toHex = function(e) {
  return this.toBuffer(e).toString("hex");
};
Dt.calculateTarget = function(e) {
  var t = ((e & 4278190080) >> 24) - 3, r = e & 8388607, n = xl.alloc(32, 0);
  return n.writeUInt32BE(r, 28 - t), n;
};
Dt.calculateMerkleRoot = function(e) {
  if (KO([{ getHash: GO.Function }], e), e.length === 0)
    throw TypeError("Cannot compute merkle root for zero transactions");
  var t = e.map(function(r) {
    return r.getHash();
  });
  return FO(t, Qy.hash256);
};
Dt.prototype.checkMerkleRoot = function() {
  if (!this.transactions)
    return !1;
  var e = Dt.calculateMerkleRoot(this.transactions);
  return this.merkleRoot.compare(e) === 0;
};
Dt.prototype.checkProofOfWork = function() {
  var e = this.getHash().reverse(), t = Dt.calculateTarget(this.bits);
  return e.compare(t) <= 0;
};
var qO = Dt, Ma = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", $u = {};
for (var na = 0; na < Ma.length; na++) {
  var Zc = Ma.charAt(na);
  if ($u[Zc] !== void 0)
    throw new TypeError(Zc + " is ambiguous");
  $u[Zc] = na;
}
function yo(e) {
  var t = e >> 25;
  return (e & 33554431) << 5 ^ -(t >> 0 & 1) & 996825010 ^ -(t >> 1 & 1) & 642813549 ^ -(t >> 2 & 1) & 513874426 ^ -(t >> 3 & 1) & 1027748829 ^ -(t >> 4 & 1) & 705979059;
}
function ew(e) {
  for (var t = 1, r = 0; r < e.length; ++r) {
    var n = e.charCodeAt(r);
    if (n < 33 || n > 126)
      return "Invalid prefix (" + e + ")";
    t = yo(t) ^ n >> 5;
  }
  for (t = yo(t), r = 0; r < e.length; ++r) {
    var i = e.charCodeAt(r);
    t = yo(t) ^ i & 31;
  }
  return t;
}
function WO(e, t, r) {
  if (r = r || 90, e.length + 7 + t.length > r)
    throw new TypeError("Exceeds length limit");
  e = e.toLowerCase();
  var n = ew(e);
  if (typeof n == "string")
    throw new Error(n);
  for (var i = e + "1", o = 0; o < t.length; ++o) {
    var s = t[o];
    if (s >> 5)
      throw new Error("Non 5-bit word");
    n = yo(n) ^ s, i += Ma.charAt(s);
  }
  for (o = 0; o < 6; ++o)
    n = yo(n);
  for (n ^= 1, o = 0; o < 6; ++o) {
    var a = n >> (5 - o) * 5 & 31;
    i += Ma.charAt(a);
  }
  return i;
}
function tw(e, t) {
  if (t = t || 90, e.length < 8)
    return e + " too short";
  if (e.length > t)
    return "Exceeds length limit";
  var r = e.toLowerCase(), n = e.toUpperCase();
  if (e !== r && e !== n)
    return "Mixed-case string " + e;
  e = r;
  var i = e.lastIndexOf("1");
  if (i === -1)
    return "No separator character for " + e;
  if (i === 0)
    return "Missing prefix for " + e;
  var o = e.slice(0, i), s = e.slice(i + 1);
  if (s.length < 6)
    return "Data too short";
  var a = ew(o);
  if (typeof a == "string")
    return a;
  for (var c = [], d = 0; d < s.length; ++d) {
    var w = s.charAt(d), g = $u[w];
    if (g === void 0)
      return "Unknown character " + w;
    a = yo(a) ^ g, !(d + 6 >= s.length) && c.push(g);
  }
  return a !== 1 ? "Invalid checksum for " + e : { prefix: o, words: c };
}
function jO() {
  var e = tw.apply(null, arguments);
  if (typeof e == "object")
    return e;
}
function zO(e) {
  var t = tw.apply(null, arguments);
  if (typeof t == "object")
    return t;
  throw new Error(t);
}
function Tf(e, t, r, n) {
  for (var i = 0, o = 0, s = (1 << r) - 1, a = [], c = 0; c < e.length; ++c)
    for (i = i << t | e[c], o += t; o >= r; )
      o -= r, a.push(i >> o & s);
  if (n)
    o > 0 && a.push(i << r - o & s);
  else {
    if (o >= t)
      return "Excess padding";
    if (i << r - o & s)
      return "Non-zero padding";
  }
  return a;
}
function XO(e) {
  var t = Tf(e, 8, 5, !0);
  if (Array.isArray(t))
    return t;
}
function YO(e) {
  var t = Tf(e, 8, 5, !0);
  if (Array.isArray(t))
    return t;
  throw new Error(t);
}
function ZO(e) {
  var t = Tf(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
}
function JO(e) {
  var t = Tf(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
  throw new Error(t);
}
var QO = {
  decodeUnsafe: jO,
  decode: zO,
  encode: WO,
  toWordsUnsafe: XO,
  toWords: YO,
  fromWordsUnsafe: ZO,
  fromWords: JO
}, As = {
  bitcoin: {
    messagePrefix: `Bitcoin Signed Message:
`,
    bech32: "bc",
    bip32: {
      public: 76067358,
      private: 76066276
    },
    pubKeyHash: 0,
    scriptHash: 5,
    wif: 128
  },
  testnet: {
    messagePrefix: `Bitcoin Signed Message:
`,
    bech32: "tb",
    bip32: {
      public: 70617039,
      private: 70615956
    },
    pubKeyHash: 111,
    scriptHash: 196,
    wif: 239
  },
  litecoin: {
    messagePrefix: `Litecoin Signed Message:
`,
    bip32: {
      public: 27108450,
      private: 27106558
    },
    pubKeyHash: 48,
    scriptHash: 50,
    wif: 176
  }
}, rw = Ce.Buffer, Ua = QO, nw = Oi, Vo = At, Vn = bl, iw = As, e6 = Ve, Jc = Tt;
function ow(e) {
  var t = nw.decode(e);
  if (t.length < 21)
    throw new TypeError(e + " is too short");
  if (t.length > 21)
    throw new TypeError(e + " is too long");
  var r = t.readUInt8(0), n = t.slice(1);
  return { version: r, hash: n };
}
function sw(e) {
  var t = Ua.decode(e), r = Ua.fromWords(t.words.slice(1));
  return {
    version: t.words[0],
    prefix: t.prefix,
    data: rw.from(r)
  };
}
function Fu(e, t) {
  e6(Jc.tuple(Jc.Hash160bit, Jc.UInt8), arguments);
  var r = rw.allocUnsafe(21);
  return r.writeUInt8(t, 0), e.copy(r, 1), nw.encode(r);
}
function Ku(e, t, r) {
  var n = Ua.toWords(e);
  return n.unshift(t), Ua.encode(r, n);
}
function t6(e, t) {
  if (t = t || iw.bitcoin, Vn.pubKeyHash.output.check(e))
    return Fu(Vo.compile(e).slice(3, 23), t.pubKeyHash);
  if (Vn.scriptHash.output.check(e))
    return Fu(Vo.compile(e).slice(2, 22), t.scriptHash);
  if (Vn.witnessPubKeyHash.output.check(e))
    return Ku(Vo.compile(e).slice(2, 22), 0, t.bech32);
  if (Vn.witnessScriptHash.output.check(e))
    return Ku(Vo.compile(e).slice(2, 34), 0, t.bech32);
  throw new Error(Vo.toASM(e) + " has no matching Address");
}
function r6(e, t) {
  t = t || iw.bitcoin;
  var r;
  try {
    r = ow(e);
  } catch {
  }
  if (r) {
    if (r.version === t.pubKeyHash)
      return Vn.pubKeyHash.output.encode(r.hash);
    if (r.version === t.scriptHash)
      return Vn.scriptHash.output.encode(r.hash);
  } else {
    try {
      r = sw(e);
    } catch {
    }
    if (r) {
      if (r.prefix !== t.bech32)
        throw new Error(e + " has an invalid prefix");
      if (r.version === 0) {
        if (r.data.length === 20)
          return Vn.witnessPubKeyHash.output.encode(r.data);
        if (r.data.length === 32)
          return Vn.witnessScriptHash.output.encode(r.data);
      }
    }
  }
  throw new Error(e + " has no matching Script");
}
var Il = {
  fromBase58Check: ow,
  fromBech32: sw,
  fromOutputScript: t6,
  toBase58Check: Fu,
  toBech32: Ku,
  toOutputScript: r6
};
const n6 = "bigi", i6 = "1.4.2", o6 = "Big integers.", s6 = [
  "cryptography",
  "math",
  "bitcoin",
  "arbitrary",
  "precision",
  "arithmetic",
  "big",
  "integer",
  "int",
  "number",
  "biginteger",
  "bigint",
  "bignumber",
  "decimal",
  "float"
], a6 = {
  coveralls: "^2.11.2",
  istanbul: "^0.3.5",
  jshint: "^2.5.1",
  mocha: "^2.1.0",
  mochify: "^2.1.0"
}, f6 = {
  url: "https://github.com/cryptocoinjs/bigi",
  type: "git"
}, c6 = "./lib/index.js", u6 = {
  "browser-test": "./node_modules/.bin/mochify --wd -R spec",
  test: "./node_modules/.bin/_mocha -- test/*.js",
  jshint: "./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",
  unit: "./node_modules/.bin/mocha",
  coverage: "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
  coveralls: "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"
}, h6 = {}, l6 = {
  files: "test/*.js",
  harness: "mocha",
  browsers: [
    "ie/9..latest",
    "firefox/latest",
    "chrome/latest",
    "safari/6.0..latest",
    "iphone/6.0..latest",
    "android-browser/4.2..latest"
  ]
}, d6 = {
  name: n6,
  version: i6,
  description: o6,
  keywords: s6,
  devDependencies: a6,
  repository: f6,
  main: c6,
  scripts: u6,
  dependencies: h6,
  testling: l6
};
function he(e, t, r) {
  if (!(this instanceof he))
    return new he(e, t, r);
  e != null && (typeof e == "number" ? this.fromNumber(e, t, r) : t == null && typeof e != "string" ? this.fromString(e, 256) : this.fromString(e, t));
}
var ue = he.prototype;
ue.__bigi = d6.version;
he.isBigInteger = function(e, t) {
  return e && e.__bigi && (!t || e.__bigi === ue.__bigi);
};
var Ro;
function p6(e, t, r, n, i, o) {
  for (; --o >= 0; ) {
    var s = t * this[e++] + r[n] + i;
    i = Math.floor(s / 67108864), r[n++] = s & 67108863;
  }
  return i;
}
he.prototype.am = p6;
Ro = 26;
he.prototype.DB = Ro;
he.prototype.DM = (1 << Ro) - 1;
var g6 = he.prototype.DV = 1 << Ro, Tl = 52;
he.prototype.FV = Math.pow(2, Tl);
he.prototype.F1 = Tl - Ro;
he.prototype.F2 = 2 * Ro - Tl;
var y6 = "0123456789abcdefghijklmnopqrstuvwxyz", Af = new Array(), ko, Ar;
ko = "0".charCodeAt(0);
for (Ar = 0; Ar <= 9; ++Ar)
  Af[ko++] = Ar;
ko = "a".charCodeAt(0);
for (Ar = 10; Ar < 36; ++Ar)
  Af[ko++] = Ar;
ko = "A".charCodeAt(0);
for (Ar = 10; Ar < 36; ++Ar)
  Af[ko++] = Ar;
function qd(e) {
  return y6.charAt(e);
}
function aw(e, t) {
  var r = Af[e.charCodeAt(t)];
  return r ?? -1;
}
function w6(e) {
  for (var t = this.t - 1; t >= 0; --t)
    e[t] = this[t];
  e.t = this.t, e.s = this.s;
}
function v6(e) {
  this.t = 1, this.s = e < 0 ? -1 : 0, e > 0 ? this[0] = e : e < -1 ? this[0] = e + g6 : this.t = 0;
}
function yn(e) {
  var t = new he();
  return t.fromInt(e), t;
}
function b6(e, t) {
  var r = this, n;
  if (t == 16)
    n = 4;
  else if (t == 8)
    n = 3;
  else if (t == 256)
    n = 8;
  else if (t == 2)
    n = 1;
  else if (t == 32)
    n = 5;
  else if (t == 4)
    n = 2;
  else {
    r.fromRadix(e, t);
    return;
  }
  r.t = 0, r.s = 0;
  for (var i = e.length, o = !1, s = 0; --i >= 0; ) {
    var a = n == 8 ? e[i] & 255 : aw(e, i);
    if (a < 0) {
      e.charAt(i) == "-" && (o = !0);
      continue;
    }
    o = !1, s == 0 ? r[r.t++] = a : s + n > r.DB ? (r[r.t - 1] |= (a & (1 << r.DB - s) - 1) << s, r[r.t++] = a >> r.DB - s) : r[r.t - 1] |= a << s, s += n, s >= r.DB && (s -= r.DB);
  }
  n == 8 && e[0] & 128 && (r.s = -1, s > 0 && (r[r.t - 1] |= (1 << r.DB - s) - 1 << s)), r.clamp(), o && he.ZERO.subTo(r, r);
}
function m6() {
  for (var e = this.s & this.DM; this.t > 0 && this[this.t - 1] == e; )
    --this.t;
}
function E6(e) {
  var t = this;
  if (t.s < 0)
    return "-" + t.negate().toString(e);
  var r;
  if (e == 16)
    r = 4;
  else if (e == 8)
    r = 3;
  else if (e == 2)
    r = 1;
  else if (e == 32)
    r = 5;
  else if (e == 4)
    r = 2;
  else
    return t.toRadix(e);
  var n = (1 << r) - 1, i, o = !1, s = "", a = t.t, c = t.DB - a * t.DB % r;
  if (a-- > 0)
    for (c < t.DB && (i = t[a] >> c) > 0 && (o = !0, s = qd(i)); a >= 0; )
      c < r ? (i = (t[a] & (1 << c) - 1) << r - c, i |= t[--a] >> (c += t.DB - r)) : (i = t[a] >> (c -= r) & n, c <= 0 && (c += t.DB, --a)), i > 0 && (o = !0), o && (s += qd(i));
  return o ? s : "0";
}
function _6() {
  var e = new he();
  return he.ZERO.subTo(this, e), e;
}
function S6() {
  return this.s < 0 ? this.negate() : this;
}
function x6(e) {
  var t = this.s - e.s;
  if (t != 0)
    return t;
  var r = this.t;
  if (t = r - e.t, t != 0)
    return this.s < 0 ? -t : t;
  for (; --r >= 0; )
    if ((t = this[r] - e[r]) != 0)
      return t;
  return 0;
}
function Of(e) {
  var t = 1, r;
  return (r = e >>> 16) != 0 && (e = r, t += 16), (r = e >> 8) != 0 && (e = r, t += 8), (r = e >> 4) != 0 && (e = r, t += 4), (r = e >> 2) != 0 && (e = r, t += 2), (r = e >> 1) != 0 && (e = r, t += 1), t;
}
function I6() {
  return this.t <= 0 ? 0 : this.DB * (this.t - 1) + Of(this[this.t - 1] ^ this.s & this.DM);
}
function T6() {
  return this.bitLength() >> 3;
}
function A6(e, t) {
  var r;
  for (r = this.t - 1; r >= 0; --r)
    t[r + e] = this[r];
  for (r = e - 1; r >= 0; --r)
    t[r] = 0;
  t.t = this.t + e, t.s = this.s;
}
function O6(e, t) {
  for (var r = e; r < this.t; ++r)
    t[r - e] = this[r];
  t.t = Math.max(this.t - e, 0), t.s = this.s;
}
function B6(e, t) {
  var r = this, n = e % r.DB, i = r.DB - n, o = (1 << i) - 1, s = Math.floor(e / r.DB), a = r.s << n & r.DM, c;
  for (c = r.t - 1; c >= 0; --c)
    t[c + s + 1] = r[c] >> i | a, a = (r[c] & o) << n;
  for (c = s - 1; c >= 0; --c)
    t[c] = 0;
  t[s] = a, t.t = r.t + s + 1, t.s = r.s, t.clamp();
}
function P6(e, t) {
  var r = this;
  t.s = r.s;
  var n = Math.floor(e / r.DB);
  if (n >= r.t) {
    t.t = 0;
    return;
  }
  var i = e % r.DB, o = r.DB - i, s = (1 << i) - 1;
  t[0] = r[n] >> i;
  for (var a = n + 1; a < r.t; ++a)
    t[a - n - 1] |= (r[a] & s) << o, t[a - n] = r[a] >> i;
  i > 0 && (t[r.t - n - 1] |= (r.s & s) << o), t.t = r.t - n, t.clamp();
}
function N6(e, t) {
  for (var r = this, n = 0, i = 0, o = Math.min(e.t, r.t); n < o; )
    i += r[n] - e[n], t[n++] = i & r.DM, i >>= r.DB;
  if (e.t < r.t) {
    for (i -= e.s; n < r.t; )
      i += r[n], t[n++] = i & r.DM, i >>= r.DB;
    i += r.s;
  } else {
    for (i += r.s; n < e.t; )
      i -= e[n], t[n++] = i & r.DM, i >>= r.DB;
    i -= e.s;
  }
  t.s = i < 0 ? -1 : 0, i < -1 ? t[n++] = r.DV + i : i > 0 && (t[n++] = i), t.t = n, t.clamp();
}
function R6(e, t) {
  var r = this.abs(), n = e.abs(), i = r.t;
  for (t.t = i + n.t; --i >= 0; )
    t[i] = 0;
  for (i = 0; i < n.t; ++i)
    t[i + r.t] = r.am(0, n[i], t, i, 0, r.t);
  t.s = 0, t.clamp(), this.s != e.s && he.ZERO.subTo(t, t);
}
function k6(e) {
  for (var t = this.abs(), r = e.t = 2 * t.t; --r >= 0; )
    e[r] = 0;
  for (r = 0; r < t.t - 1; ++r) {
    var n = t.am(r, t[r], e, 2 * r, 0, 1);
    (e[r + t.t] += t.am(r + 1, 2 * t[r], e, 2 * r + 1, n, t.t - r - 1)) >= t.DV && (e[r + t.t] -= t.DV, e[r + t.t + 1] = 1);
  }
  e.t > 0 && (e[e.t - 1] += t.am(r, t[r], e, 2 * r, 0, 1)), e.s = 0, e.clamp();
}
function M6(e, t, r) {
  var n = this, i = e.abs();
  if (!(i.t <= 0)) {
    var o = n.abs();
    if (o.t < i.t) {
      t != null && t.fromInt(0), r != null && n.copyTo(r);
      return;
    }
    r == null && (r = new he());
    var s = new he(), a = n.s, c = e.s, d = n.DB - Of(i[i.t - 1]);
    d > 0 ? (i.lShiftTo(d, s), o.lShiftTo(d, r)) : (i.copyTo(s), o.copyTo(r));
    var w = s.t, g = s[w - 1];
    if (g != 0) {
      var O = g * (1 << n.F1) + (w > 1 ? s[w - 2] >> n.F2 : 0), N = n.FV / O, B = (1 << n.F1) / O, I = 1 << n.F2, M = r.t, T = M - w, k = t ?? new he();
      for (s.dlShiftTo(T, k), r.compareTo(k) >= 0 && (r[r.t++] = 1, r.subTo(k, r)), he.ONE.dlShiftTo(w, k), k.subTo(s, s); s.t < w; )
        s[s.t++] = 0;
      for (; --T >= 0; ) {
        var F = r[--M] == g ? n.DM : Math.floor(r[M] * N + (r[M - 1] + I) * B);
        if ((r[M] += s.am(0, F, r, T, 0, w)) < F)
          for (s.dlShiftTo(T, k), r.subTo(k, r); r[M] < --F; )
            r.subTo(k, r);
      }
      t != null && (r.drShiftTo(w, t), a != c && he.ZERO.subTo(t, t)), r.t = w, r.clamp(), d > 0 && r.rShiftTo(d, r), a < 0 && he.ZERO.subTo(r, r);
    }
  }
}
function U6(e) {
  var t = new he();
  return this.abs().divRemTo(e, null, t), this.s < 0 && t.compareTo(he.ZERO) > 0 && e.subTo(t, t), t;
}
function Wi(e) {
  this.m = e;
}
function C6(e) {
  return e.s < 0 || e.compareTo(this.m) >= 0 ? e.mod(this.m) : e;
}
function H6(e) {
  return e;
}
function L6(e) {
  e.divRemTo(this.m, null, e);
}
function D6(e, t, r) {
  e.multiplyTo(t, r), this.reduce(r);
}
function $6(e, t) {
  e.squareTo(t), this.reduce(t);
}
Wi.prototype.convert = C6;
Wi.prototype.revert = H6;
Wi.prototype.reduce = L6;
Wi.prototype.mulTo = D6;
Wi.prototype.sqrTo = $6;
function F6() {
  if (this.t < 1)
    return 0;
  var e = this[0];
  if (!(e & 1))
    return 0;
  var t = e & 3;
  return t = t * (2 - (e & 15) * t) & 15, t = t * (2 - (e & 255) * t) & 255, t = t * (2 - ((e & 65535) * t & 65535)) & 65535, t = t * (2 - e * t % this.DV) % this.DV, t > 0 ? this.DV - t : -t;
}
function ji(e) {
  this.m = e, this.mp = e.invDigit(), this.mpl = this.mp & 32767, this.mph = this.mp >> 15, this.um = (1 << e.DB - 15) - 1, this.mt2 = 2 * e.t;
}
function K6(e) {
  var t = new he();
  return e.abs().dlShiftTo(this.m.t, t), t.divRemTo(this.m, null, t), e.s < 0 && t.compareTo(he.ZERO) > 0 && this.m.subTo(t, t), t;
}
function G6(e) {
  var t = new he();
  return e.copyTo(t), this.reduce(t), t;
}
function V6(e) {
  for (; e.t <= this.mt2; )
    e[e.t++] = 0;
  for (var t = 0; t < this.m.t; ++t) {
    var r = e[t] & 32767, n = r * this.mpl + ((r * this.mph + (e[t] >> 15) * this.mpl & this.um) << 15) & e.DM;
    for (r = t + this.m.t, e[r] += this.m.am(0, n, e, t, 0, this.m.t); e[r] >= e.DV; )
      e[r] -= e.DV, e[++r]++;
  }
  e.clamp(), e.drShiftTo(this.m.t, e), e.compareTo(this.m) >= 0 && e.subTo(this.m, e);
}
function q6(e, t) {
  e.squareTo(t), this.reduce(t);
}
function W6(e, t, r) {
  e.multiplyTo(t, r), this.reduce(r);
}
ji.prototype.convert = K6;
ji.prototype.revert = G6;
ji.prototype.reduce = V6;
ji.prototype.mulTo = W6;
ji.prototype.sqrTo = q6;
function j6() {
  return (this.t > 0 ? this[0] & 1 : this.s) == 0;
}
function z6(e, t) {
  if (e > 4294967295 || e < 1)
    return he.ONE;
  var r = new he(), n = new he(), i = t.convert(this), o = Of(e) - 1;
  for (i.copyTo(r); --o >= 0; )
    if (t.sqrTo(r, n), (e & 1 << o) > 0)
      t.mulTo(n, i, r);
    else {
      var s = r;
      r = n, n = s;
    }
  return t.revert(r);
}
function X6(e, t) {
  var r;
  return e < 256 || t.isEven() ? r = new Wi(t) : r = new ji(t), this.exp(e, r);
}
ue.copyTo = w6;
ue.fromInt = v6;
ue.fromString = b6;
ue.clamp = m6;
ue.dlShiftTo = A6;
ue.drShiftTo = O6;
ue.lShiftTo = B6;
ue.rShiftTo = P6;
ue.subTo = N6;
ue.multiplyTo = R6;
ue.squareTo = k6;
ue.divRemTo = M6;
ue.invDigit = F6;
ue.isEven = j6;
ue.exp = z6;
ue.toString = E6;
ue.negate = _6;
ue.abs = S6;
ue.compareTo = x6;
ue.bitLength = I6;
ue.byteLength = T6;
ue.mod = U6;
ue.modPowInt = X6;
function Y6() {
  var e = new he();
  return this.copyTo(e), e;
}
function Z6() {
  if (this.s < 0) {
    if (this.t == 1)
      return this[0] - this.DV;
    if (this.t == 0)
      return -1;
  } else {
    if (this.t == 1)
      return this[0];
    if (this.t == 0)
      return 0;
  }
  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
}
function J6() {
  return this.t == 0 ? this.s : this[0] << 24 >> 24;
}
function Q6() {
  return this.t == 0 ? this.s : this[0] << 16 >> 16;
}
function eB(e) {
  return Math.floor(Math.LN2 * this.DB / Math.log(e));
}
function tB() {
  return this.s < 0 ? -1 : this.t <= 0 || this.t == 1 && this[0] <= 0 ? 0 : 1;
}
function rB(e) {
  if (e == null && (e = 10), this.signum() == 0 || e < 2 || e > 36)
    return "0";
  var t = this.chunkSize(e), r = Math.pow(e, t), n = yn(r), i = new he(), o = new he(), s = "";
  for (this.divRemTo(n, i, o); i.signum() > 0; )
    s = (r + o.intValue()).toString(e).substr(1) + s, i.divRemTo(n, i, o);
  return o.intValue().toString(e) + s;
}
function nB(e, t) {
  var r = this;
  r.fromInt(0), t == null && (t = 10);
  for (var n = r.chunkSize(t), i = Math.pow(t, n), o = !1, s = 0, a = 0, c = 0; c < e.length; ++c) {
    var d = aw(e, c);
    if (d < 0) {
      e.charAt(c) == "-" && r.signum() == 0 && (o = !0);
      continue;
    }
    a = t * a + d, ++s >= n && (r.dMultiply(i), r.dAddOffset(a, 0), s = 0, a = 0);
  }
  s > 0 && (r.dMultiply(Math.pow(t, s)), r.dAddOffset(a, 0)), o && he.ZERO.subTo(r, r);
}
function iB(e, t, r) {
  var n = this;
  if (typeof t == "number")
    if (e < 2)
      n.fromInt(1);
    else
      for (n.fromNumber(e, r), n.testBit(e - 1) || n.bitwiseTo(he.ONE.shiftLeft(e - 1), Al, n), n.isEven() && n.dAddOffset(1, 0); !n.isProbablePrime(t); )
        n.dAddOffset(2, 0), n.bitLength() > e && n.subTo(he.ONE.shiftLeft(e - 1), n);
  else {
    var i = new Array(), o = e & 7;
    i.length = (e >> 3) + 1, t.nextBytes(i), o > 0 ? i[0] &= (1 << o) - 1 : i[0] = 0, n.fromString(i, 256);
  }
}
function oB() {
  var e = this, t = e.t, r = new Array();
  r[0] = e.s;
  var n = e.DB - t * e.DB % 8, i, o = 0;
  if (t-- > 0)
    for (n < e.DB && (i = e[t] >> n) != (e.s & e.DM) >> n && (r[o++] = i | e.s << e.DB - n); t >= 0; )
      n < 8 ? (i = (e[t] & (1 << n) - 1) << 8 - n, i |= e[--t] >> (n += e.DB - 8)) : (i = e[t] >> (n -= 8) & 255, n <= 0 && (n += e.DB, --t)), i & 128 && (i |= -256), o === 0 && (e.s & 128) != (i & 128) && ++o, (o > 0 || i != e.s) && (r[o++] = i);
  return r;
}
function sB(e) {
  return this.compareTo(e) == 0;
}
function aB(e) {
  return this.compareTo(e) < 0 ? this : e;
}
function fB(e) {
  return this.compareTo(e) > 0 ? this : e;
}
function cB(e, t, r) {
  var n = this, i, o, s = Math.min(e.t, n.t);
  for (i = 0; i < s; ++i)
    r[i] = t(n[i], e[i]);
  if (e.t < n.t) {
    for (o = e.s & n.DM, i = s; i < n.t; ++i)
      r[i] = t(n[i], o);
    r.t = n.t;
  } else {
    for (o = n.s & n.DM, i = s; i < e.t; ++i)
      r[i] = t(o, e[i]);
    r.t = e.t;
  }
  r.s = t(n.s, e.s), r.clamp();
}
function uB(e, t) {
  return e & t;
}
function hB(e) {
  var t = new he();
  return this.bitwiseTo(e, uB, t), t;
}
function Al(e, t) {
  return e | t;
}
function lB(e) {
  var t = new he();
  return this.bitwiseTo(e, Al, t), t;
}
function fw(e, t) {
  return e ^ t;
}
function dB(e) {
  var t = new he();
  return this.bitwiseTo(e, fw, t), t;
}
function cw(e, t) {
  return e & ~t;
}
function pB(e) {
  var t = new he();
  return this.bitwiseTo(e, cw, t), t;
}
function gB() {
  for (var e = new he(), t = 0; t < this.t; ++t)
    e[t] = this.DM & ~this[t];
  return e.t = this.t, e.s = ~this.s, e;
}
function yB(e) {
  var t = new he();
  return e < 0 ? this.rShiftTo(-e, t) : this.lShiftTo(e, t), t;
}
function wB(e) {
  var t = new he();
  return e < 0 ? this.lShiftTo(-e, t) : this.rShiftTo(e, t), t;
}
function vB(e) {
  if (e == 0)
    return -1;
  var t = 0;
  return e & 65535 || (e >>= 16, t += 16), e & 255 || (e >>= 8, t += 8), e & 15 || (e >>= 4, t += 4), e & 3 || (e >>= 2, t += 2), e & 1 || ++t, t;
}
function bB() {
  for (var e = 0; e < this.t; ++e)
    if (this[e] != 0)
      return e * this.DB + vB(this[e]);
  return this.s < 0 ? this.t * this.DB : -1;
}
function mB(e) {
  for (var t = 0; e != 0; )
    e &= e - 1, ++t;
  return t;
}
function EB() {
  for (var e = 0, t = this.s & this.DM, r = 0; r < this.t; ++r)
    e += mB(this[r] ^ t);
  return e;
}
function _B(e) {
  var t = Math.floor(e / this.DB);
  return t >= this.t ? this.s != 0 : (this[t] & 1 << e % this.DB) != 0;
}
function SB(e, t) {
  var r = he.ONE.shiftLeft(e);
  return this.bitwiseTo(r, t, r), r;
}
function xB(e) {
  return this.changeBit(e, Al);
}
function IB(e) {
  return this.changeBit(e, cw);
}
function TB(e) {
  return this.changeBit(e, fw);
}
function AB(e, t) {
  for (var r = this, n = 0, i = 0, o = Math.min(e.t, r.t); n < o; )
    i += r[n] + e[n], t[n++] = i & r.DM, i >>= r.DB;
  if (e.t < r.t) {
    for (i += e.s; n < r.t; )
      i += r[n], t[n++] = i & r.DM, i >>= r.DB;
    i += r.s;
  } else {
    for (i += r.s; n < e.t; )
      i += e[n], t[n++] = i & r.DM, i >>= r.DB;
    i += e.s;
  }
  t.s = i < 0 ? -1 : 0, i > 0 ? t[n++] = i : i < -1 && (t[n++] = r.DV + i), t.t = n, t.clamp();
}
function OB(e) {
  var t = new he();
  return this.addTo(e, t), t;
}
function BB(e) {
  var t = new he();
  return this.subTo(e, t), t;
}
function PB(e) {
  var t = new he();
  return this.multiplyTo(e, t), t;
}
function NB() {
  var e = new he();
  return this.squareTo(e), e;
}
function RB(e) {
  var t = new he();
  return this.divRemTo(e, t, null), t;
}
function kB(e) {
  var t = new he();
  return this.divRemTo(e, null, t), t;
}
function MB(e) {
  var t = new he(), r = new he();
  return this.divRemTo(e, t, r), new Array(t, r);
}
function UB(e) {
  this[this.t] = this.am(0, e - 1, this, 0, 0, this.t), ++this.t, this.clamp();
}
function CB(e, t) {
  if (e != 0) {
    for (; this.t <= t; )
      this[this.t++] = 0;
    for (this[t] += e; this[t] >= this.DV; )
      this[t] -= this.DV, ++t >= this.t && (this[this.t++] = 0), ++this[t];
  }
}
function Os() {
}
function uw(e) {
  return e;
}
function HB(e, t, r) {
  e.multiplyTo(t, r);
}
function LB(e, t) {
  e.squareTo(t);
}
Os.prototype.convert = uw;
Os.prototype.revert = uw;
Os.prototype.mulTo = HB;
Os.prototype.sqrTo = LB;
function DB(e) {
  return this.exp(e, new Os());
}
function $B(e, t, r) {
  var n = Math.min(this.t + e.t, t);
  for (r.s = 0, r.t = n; n > 0; )
    r[--n] = 0;
  var i;
  for (i = r.t - this.t; n < i; ++n)
    r[n + this.t] = this.am(0, e[n], r, n, 0, this.t);
  for (i = Math.min(e.t, t); n < i; ++n)
    this.am(0, e[n], r, n, 0, t - n);
  r.clamp();
}
function FB(e, t, r) {
  --t;
  var n = r.t = this.t + e.t - t;
  for (r.s = 0; --n >= 0; )
    r[n] = 0;
  for (n = Math.max(t - this.t, 0); n < e.t; ++n)
    r[this.t + n - t] = this.am(t - n, e[n], r, 0, 0, this.t + n - t);
  r.clamp(), r.drShiftTo(1, r);
}
function Mo(e) {
  this.r2 = new he(), this.q3 = new he(), he.ONE.dlShiftTo(2 * e.t, this.r2), this.mu = this.r2.divide(e), this.m = e;
}
function KB(e) {
  if (e.s < 0 || e.t > 2 * this.m.t)
    return e.mod(this.m);
  if (e.compareTo(this.m) < 0)
    return e;
  var t = new he();
  return e.copyTo(t), this.reduce(t), t;
}
function GB(e) {
  return e;
}
function VB(e) {
  var t = this;
  for (e.drShiftTo(t.m.t - 1, t.r2), e.t > t.m.t + 1 && (e.t = t.m.t + 1, e.clamp()), t.mu.multiplyUpperTo(t.r2, t.m.t + 1, t.q3), t.m.multiplyLowerTo(t.q3, t.m.t + 1, t.r2); e.compareTo(t.r2) < 0; )
    e.dAddOffset(1, t.m.t + 1);
  for (e.subTo(t.r2, e); e.compareTo(t.m) >= 0; )
    e.subTo(t.m, e);
}
function qB(e, t) {
  e.squareTo(t), this.reduce(t);
}
function WB(e, t, r) {
  e.multiplyTo(t, r), this.reduce(r);
}
Mo.prototype.convert = KB;
Mo.prototype.revert = GB;
Mo.prototype.reduce = VB;
Mo.prototype.mulTo = WB;
Mo.prototype.sqrTo = qB;
function jB(e, t) {
  var r = e.bitLength(), n, i = yn(1), o;
  if (r <= 0)
    return i;
  r < 18 ? n = 1 : r < 48 ? n = 3 : r < 144 ? n = 4 : r < 768 ? n = 5 : n = 6, r < 8 ? o = new Wi(t) : t.isEven() ? o = new Mo(t) : o = new ji(t);
  var s = new Array(), a = 3, c = n - 1, d = (1 << n) - 1;
  if (s[1] = o.convert(this), n > 1) {
    var w = new he();
    for (o.sqrTo(s[1], w); a <= d; )
      s[a] = new he(), o.mulTo(w, s[a - 2], s[a]), a += 2;
  }
  var g = e.t - 1, O, N = !0, B = new he(), I;
  for (r = Of(e[g]) - 1; g >= 0; ) {
    for (r >= c ? O = e[g] >> r - c & d : (O = (e[g] & (1 << r + 1) - 1) << c - r, g > 0 && (O |= e[g - 1] >> this.DB + r - c)), a = n; !(O & 1); )
      O >>= 1, --a;
    if ((r -= a) < 0 && (r += this.DB, --g), N)
      s[O].copyTo(i), N = !1;
    else {
      for (; a > 1; )
        o.sqrTo(i, B), o.sqrTo(B, i), a -= 2;
      a > 0 ? o.sqrTo(i, B) : (I = i, i = B, B = I), o.mulTo(B, s[O], i);
    }
    for (; g >= 0 && !(e[g] & 1 << r); )
      o.sqrTo(i, B), I = i, i = B, B = I, --r < 0 && (r = this.DB - 1, --g);
  }
  return o.revert(i);
}
function zB(e) {
  var t = this.s < 0 ? this.negate() : this.clone(), r = e.s < 0 ? e.negate() : e.clone();
  if (t.compareTo(r) < 0) {
    var n = t;
    t = r, r = n;
  }
  var i = t.getLowestSetBit(), o = r.getLowestSetBit();
  if (o < 0)
    return t;
  for (i < o && (o = i), o > 0 && (t.rShiftTo(o, t), r.rShiftTo(o, r)); t.signum() > 0; )
    (i = t.getLowestSetBit()) > 0 && t.rShiftTo(i, t), (i = r.getLowestSetBit()) > 0 && r.rShiftTo(i, r), t.compareTo(r) >= 0 ? (t.subTo(r, t), t.rShiftTo(1, t)) : (r.subTo(t, r), r.rShiftTo(1, r));
  return o > 0 && r.lShiftTo(o, r), r;
}
function XB(e) {
  if (e <= 0)
    return 0;
  var t = this.DV % e, r = this.s < 0 ? e - 1 : 0;
  if (this.t > 0)
    if (t == 0)
      r = this[0] % e;
    else
      for (var n = this.t - 1; n >= 0; --n)
        r = (t * r + this[n]) % e;
  return r;
}
function YB(e) {
  var t = e.isEven();
  if (this.signum() === 0)
    throw new Error("division by zero");
  if (this.isEven() && t || e.signum() == 0)
    return he.ZERO;
  for (var r = e.clone(), n = this.clone(), i = yn(1), o = yn(0), s = yn(0), a = yn(1); r.signum() != 0; ) {
    for (; r.isEven(); )
      r.rShiftTo(1, r), t ? ((!i.isEven() || !o.isEven()) && (i.addTo(this, i), o.subTo(e, o)), i.rShiftTo(1, i)) : o.isEven() || o.subTo(e, o), o.rShiftTo(1, o);
    for (; n.isEven(); )
      n.rShiftTo(1, n), t ? ((!s.isEven() || !a.isEven()) && (s.addTo(this, s), a.subTo(e, a)), s.rShiftTo(1, s)) : a.isEven() || a.subTo(e, a), a.rShiftTo(1, a);
    r.compareTo(n) >= 0 ? (r.subTo(n, r), t && i.subTo(s, i), o.subTo(a, o)) : (n.subTo(r, n), t && s.subTo(i, s), a.subTo(o, a));
  }
  if (n.compareTo(he.ONE) != 0)
    return he.ZERO;
  for (; a.compareTo(e) >= 0; )
    a.subTo(e, a);
  for (; a.signum() < 0; )
    a.addTo(e, a);
  return a;
}
var Zt = [
  2,
  3,
  5,
  7,
  11,
  13,
  17,
  19,
  23,
  29,
  31,
  37,
  41,
  43,
  47,
  53,
  59,
  61,
  67,
  71,
  73,
  79,
  83,
  89,
  97,
  101,
  103,
  107,
  109,
  113,
  127,
  131,
  137,
  139,
  149,
  151,
  157,
  163,
  167,
  173,
  179,
  181,
  191,
  193,
  197,
  199,
  211,
  223,
  227,
  229,
  233,
  239,
  241,
  251,
  257,
  263,
  269,
  271,
  277,
  281,
  283,
  293,
  307,
  311,
  313,
  317,
  331,
  337,
  347,
  349,
  353,
  359,
  367,
  373,
  379,
  383,
  389,
  397,
  401,
  409,
  419,
  421,
  431,
  433,
  439,
  443,
  449,
  457,
  461,
  463,
  467,
  479,
  487,
  491,
  499,
  503,
  509,
  521,
  523,
  541,
  547,
  557,
  563,
  569,
  571,
  577,
  587,
  593,
  599,
  601,
  607,
  613,
  617,
  619,
  631,
  641,
  643,
  647,
  653,
  659,
  661,
  673,
  677,
  683,
  691,
  701,
  709,
  719,
  727,
  733,
  739,
  743,
  751,
  757,
  761,
  769,
  773,
  787,
  797,
  809,
  811,
  821,
  823,
  827,
  829,
  839,
  853,
  857,
  859,
  863,
  877,
  881,
  883,
  887,
  907,
  911,
  919,
  929,
  937,
  941,
  947,
  953,
  967,
  971,
  977,
  983,
  991,
  997
], ZB = (1 << 26) / Zt[Zt.length - 1];
function JB(e) {
  var t, r = this.abs();
  if (r.t == 1 && r[0] <= Zt[Zt.length - 1]) {
    for (t = 0; t < Zt.length; ++t)
      if (r[0] == Zt[t])
        return !0;
    return !1;
  }
  if (r.isEven())
    return !1;
  for (t = 1; t < Zt.length; ) {
    for (var n = Zt[t], i = t + 1; i < Zt.length && n < ZB; )
      n *= Zt[i++];
    for (n = r.modInt(n); t < i; )
      if (n % Zt[t++] == 0)
        return !1;
  }
  return r.millerRabin(e);
}
function QB(e) {
  var t = this.subtract(he.ONE), r = t.getLowestSetBit();
  if (r <= 0)
    return !1;
  var n = t.shiftRight(r);
  e = e + 1 >> 1, e > Zt.length && (e = Zt.length);
  for (var i = new he(null), o, s = [], a = 0; a < e; ++a) {
    for (; o = Zt[Math.floor(Math.random() * Zt.length)], s.indexOf(o) != -1; )
      ;
    s.push(o), i.fromInt(o);
    var c = i.modPow(n, this);
    if (c.compareTo(he.ONE) != 0 && c.compareTo(t) != 0) {
      for (var o = 1; o++ < r && c.compareTo(t) != 0; )
        if (c = c.modPowInt(2, this), c.compareTo(he.ONE) == 0)
          return !1;
      if (c.compareTo(t) != 0)
        return !1;
    }
  }
  return !0;
}
ue.chunkSize = eB;
ue.toRadix = rB;
ue.fromRadix = nB;
ue.fromNumber = iB;
ue.bitwiseTo = cB;
ue.changeBit = SB;
ue.addTo = AB;
ue.dMultiply = UB;
ue.dAddOffset = CB;
ue.multiplyLowerTo = $B;
ue.multiplyUpperTo = FB;
ue.modInt = XB;
ue.millerRabin = QB;
ue.clone = Y6;
ue.intValue = Z6;
ue.byteValue = J6;
ue.shortValue = Q6;
ue.signum = tB;
ue.toByteArray = oB;
ue.equals = sB;
ue.min = aB;
ue.max = fB;
ue.and = hB;
ue.or = lB;
ue.xor = dB;
ue.andNot = pB;
ue.not = gB;
ue.shiftLeft = yB;
ue.shiftRight = wB;
ue.getLowestSetBit = bB;
ue.bitCount = EB;
ue.testBit = _B;
ue.setBit = xB;
ue.clearBit = IB;
ue.flipBit = TB;
ue.add = OB;
ue.subtract = BB;
ue.multiply = PB;
ue.divide = RB;
ue.remainder = kB;
ue.divideAndRemainder = MB;
ue.modPow = jB;
ue.modInverse = YB;
ue.pow = DB;
ue.gcd = zB;
ue.isProbablePrime = JB;
ue.square = NB;
he.ZERO = yn(0);
he.ONE = yn(1);
he.valueOf = yn;
var hw = he, Wd = Xu, Wt = hw;
Wt.fromByteArrayUnsigned = function(e) {
  return e[0] & 128 ? new Wt([0].concat(e)) : new Wt(e);
};
Wt.prototype.toByteArrayUnsigned = function() {
  var e = this.toByteArray();
  return e[0] === 0 ? e.slice(1) : e;
};
Wt.fromDERInteger = function(e) {
  return new Wt(e);
};
Wt.prototype.toDERInteger = Wt.prototype.toByteArray;
Wt.fromBuffer = function(e) {
  if (e[0] & 128) {
    var t = Array.prototype.slice.call(e);
    return new Wt([0].concat(t));
  }
  return new Wt(e);
};
Wt.fromHex = function(e) {
  return e === "" ? Wt.ZERO : (Wd.equal(e, e.match(/^[A-Fa-f0-9]+/), "Invalid hex string"), Wd.equal(e.length % 2, 0, "Incomplete hex"), new Wt(e, 16));
};
Wt.prototype.toBuffer = function(e) {
  for (var t = this.toByteArrayUnsigned(), r = [], n = e - t.length; r.length < n; )
    r.push(0);
  return new Buffer(r.concat(t));
};
Wt.prototype.toHex = function(e) {
  return this.toBuffer(e).toString("hex");
};
var eP = hw, Tn = eP, lw = ny, Ol = Ve, ns = Tt, Ca = Tn;
function Rt(e, t) {
  Ol(ns.tuple(ns.BigInt, ns.BigInt), arguments), this.r = e, this.s = t;
}
Rt.ECDSA = 0;
Rt.SCHNORR = 1;
Rt.parseCompact = function(e) {
  Ol(ns.BufferN(65), e);
  var t = e.readUInt8(0) - 27;
  if (t !== (t & 7))
    throw new Error("Invalid signature parameter");
  var r = !!(t & 4), n = t & 3, i = Rt.fromRSBuffer(e.slice(1));
  return {
    compressed: r,
    i: n,
    signature: i
  };
};
Rt.fromRSBuffer = function(e) {
  Ol(ns.BufferN(64), e);
  var t = Ca.fromBuffer(e.slice(0, 32)), r = Ca.fromBuffer(e.slice(32, 64));
  return new Rt(t, r);
};
Rt.fromDER = function(e) {
  var t = lw.decode(e), r = Ca.fromDERInteger(t.r), n = Ca.fromDERInteger(t.s);
  return new Rt(r, n);
};
Rt.parseScriptSignature = function(e) {
  var t = e.readUInt8(e.length - 1), r = t & -193;
  if (r <= 0 || r >= 4)
    throw new Error("Invalid hashType " + t);
  return {
    signature: Rt.fromDER(e.slice(0, -1)),
    hashType: t
  };
};
Rt.prototype.toCompact = function(e, t) {
  t && (e += 4), e += 27;
  var r = Buffer.alloc(65);
  return r.writeUInt8(e, 0), this.toRSBuffer(r, 1), r;
};
Rt.prototype.toDER = function() {
  var e = Buffer.from(this.r.toDERInteger()), t = Buffer.from(this.s.toDERInteger());
  return lw.encode(e, t);
};
Rt.prototype.toRSBuffer = function(e, t) {
  return t || (t = 0), e = e || Buffer.alloc(64), this.r.toBuffer(32).copy(e, t), this.s.toBuffer(32).copy(e, t + 32), e;
};
Rt.prototype.toScriptSignature = function(e, t) {
  t || (t = Rt.ECDSA);
  var r = e & -193;
  if (r <= 0 || r >= 4)
    throw new Error("Invalid hashType " + e);
  var n = Buffer.alloc(1);
  if (n.writeUInt8(e, 0), t === Rt.ECDSA)
    return Buffer.concat([this.toDER(), n]);
  if (t === Rt.SCHNORR)
    return Buffer.concat([this.toRSBuffer(), n]);
  throw new Error("Invalid signature Algorithm");
};
var Bs = Rt, ya = Xu, Qc = Ce.Buffer, Ha = Tn, La = Ha.valueOf(3);
function It(e, t, r, n) {
  ya.notStrictEqual(n, void 0, "Missing Z coordinate"), this.curve = e, this.x = t, this.y = r, this.z = n, this._zInv = null, this.compressed = !0;
}
Object.defineProperty(It.prototype, "zInv", {
  get: function() {
    return this._zInv === null && (this._zInv = this.z.modInverse(this.curve.p)), this._zInv;
  }
});
Object.defineProperty(It.prototype, "affineX", {
  get: function() {
    return this.x.multiply(this.zInv).mod(this.curve.p);
  }
});
Object.defineProperty(It.prototype, "affineY", {
  get: function() {
    return this.y.multiply(this.zInv).mod(this.curve.p);
  }
});
It.fromAffine = function(e, t, r) {
  return new It(e, t, r, Ha.ONE);
};
It.prototype.equals = function(e) {
  if (e === this)
    return !0;
  if (this.curve.isInfinity(this))
    return this.curve.isInfinity(e);
  if (this.curve.isInfinity(e))
    return this.curve.isInfinity(this);
  var t = e.y.multiply(this.z).subtract(this.y.multiply(e.z)).mod(this.curve.p);
  if (t.signum() !== 0)
    return !1;
  var r = e.x.multiply(this.z).subtract(this.x.multiply(e.z)).mod(this.curve.p);
  return r.signum() === 0;
};
It.prototype.negate = function() {
  var e = this.curve.p.subtract(this.y);
  return new It(this.curve, this.x, e, this.z);
};
It.prototype.add = function(e) {
  if (this.curve.isInfinity(this))
    return e;
  if (this.curve.isInfinity(e))
    return this;
  var t = this.x, r = this.y, n = e.x, i = e.y, o = i.multiply(this.z).subtract(r.multiply(e.z)).mod(this.curve.p), s = n.multiply(this.z).subtract(t.multiply(e.z)).mod(this.curve.p);
  if (s.signum() === 0)
    return o.signum() === 0 ? this.twice() : this.curve.infinity;
  var a = s.square(), c = a.multiply(s), d = t.multiply(a), w = o.square().multiply(this.z), g = w.subtract(d.shiftLeft(1)).multiply(e.z).subtract(c).multiply(s).mod(this.curve.p), O = d.multiply(La).multiply(o).subtract(r.multiply(c)).subtract(w.multiply(o)).multiply(e.z).add(o.multiply(c)).mod(this.curve.p), N = c.multiply(this.z).multiply(e.z).mod(this.curve.p);
  return new It(this.curve, g, O, N);
};
It.prototype.twice = function() {
  if (this.curve.isInfinity(this))
    return this;
  if (this.y.signum() === 0)
    return this.curve.infinity;
  var e = this.x, t = this.y, r = t.multiply(this.z).mod(this.curve.p), n = r.multiply(t).mod(this.curve.p), i = this.curve.a, o = e.square().multiply(La);
  i.signum() !== 0 && (o = o.add(this.z.square().multiply(i))), o = o.mod(this.curve.p);
  var s = o.square().subtract(e.shiftLeft(3).multiply(n)).shiftLeft(1).multiply(r).mod(this.curve.p), a = o.multiply(La).multiply(e).subtract(n.shiftLeft(1)).shiftLeft(2).multiply(n).subtract(o.pow(3)).mod(this.curve.p), c = r.pow(3).shiftLeft(3).mod(this.curve.p);
  return new It(this.curve, s, a, c);
};
It.prototype.multiply = function(e) {
  if (this.curve.isInfinity(this))
    return this;
  if (e.signum() === 0)
    return this.curve.infinity;
  for (var t = e, r = t.multiply(La), n = this.negate(), i = this, o = r.bitLength() - 2; o > 0; --o) {
    var s = r.testBit(o), a = t.testBit(o);
    i = i.twice(), s !== a && (i = i.add(s ? this : n));
  }
  return i;
};
It.prototype.multiplyTwo = function(e, t, r) {
  for (var n = Math.max(e.bitLength(), r.bitLength()) - 1, i = this.curve.infinity, o = this.add(t); n >= 0; ) {
    var s = e.testBit(n), a = r.testBit(n);
    i = i.twice(), s ? a ? i = i.add(o) : i = i.add(this) : a && (i = i.add(t)), --n;
  }
  return i;
};
It.prototype.getEncoded = function(e) {
  if (e == null && (e = this.compressed), this.curve.isInfinity(this))
    return Qc.alloc(1, 0);
  var t = this.affineX, r = this.affineY, n = this.curve.pLength, i;
  return e ? (i = Qc.allocUnsafe(1 + n), i.writeUInt8(r.isEven() ? 2 : 3, 0)) : (i = Qc.allocUnsafe(1 + n + n), i.writeUInt8(4, 0), r.toBuffer(n).copy(i, 1 + n)), t.toBuffer(n).copy(i, 1), i;
};
It.decodeFrom = function(e, t) {
  var r = t.readUInt8(0), n = r !== 4, i = Math.floor((e.p.bitLength() + 7) / 8), o = Ha.fromBuffer(t.slice(1, 1 + i)), s;
  if (n) {
    ya.equal(t.length, i + 1, "Invalid sequence length"), ya(r === 2 || r === 3, "Invalid sequence tag");
    var a = r === 3;
    s = e.pointFromX(a, o);
  } else {
    ya.equal(t.length, 1 + i + i, "Invalid sequence length");
    var c = Ha.fromBuffer(t.slice(1 + i));
    s = It.fromAffine(e, o, c);
  }
  return s.compressed = n, s;
};
It.prototype.toString = function() {
  return this.curve.isInfinity(this) ? "(INFINITY)" : "(" + this.affineX.toString() + "," + this.affineY.toString() + ")";
};
var dw = It, eu = Xu, jd = Tn, Gu = dw;
function Ps(e, t, r, n, i, o, s) {
  this.p = e, this.a = t, this.b = r, this.G = Gu.fromAffine(this, n, i), this.n = o, this.h = s, this.infinity = new Gu(this, null, null, jd.ZERO), this.pOverFour = e.add(jd.ONE).shiftRight(2), this.pLength = Math.floor((this.p.bitLength() + 7) / 8);
}
Ps.prototype.pointFromX = function(e, t) {
  var r = t.pow(3).add(this.a.multiply(t)).add(this.b).mod(this.p), n = r.modPow(this.pOverFour, this.p), i = n;
  return n.isEven() ^ !e && (i = this.p.subtract(i)), Gu.fromAffine(this, t, i);
};
Ps.prototype.isInfinity = function(e) {
  return e === this.infinity ? !0 : e.z.signum() === 0 && e.y.signum() !== 0;
};
Ps.prototype.isOnCurve = function(e) {
  if (this.isInfinity(e))
    return !0;
  var t = e.affineX, r = e.affineY, n = this.a, i = this.b, o = this.p;
  if (t.signum() < 0 || t.compareTo(o) >= 0 || r.signum() < 0 || r.compareTo(o) >= 0)
    return !1;
  var s = r.square().mod(o), a = t.pow(3).add(n.multiply(t)).add(i).mod(o);
  return s.equals(a);
};
Ps.prototype.validate = function(e) {
  eu(!this.isInfinity(e), "Point is at infinity"), eu(this.isOnCurve(e), "Point is not on the curve");
  var t = e.multiply(this.n);
  return eu(this.isInfinity(t), "Point is not a scalar multiple of G"), !0;
};
var pw = Ps;
const tP = {
  p: "fffffffdffffffffffffffffffffffff",
  a: "fffffffdfffffffffffffffffffffffc",
  b: "e87579c11079f43dd824993c2cee5ed3",
  n: "fffffffe0000000075a30d1b9038a115",
  h: "01",
  Gx: "161ff7528b899b2d0c28607ca52c5b86",
  Gy: "cf5ac8395bafeb13c02da292dded7a83"
}, rP = {
  p: "fffffffffffffffffffffffffffffffeffffac73",
  a: "00",
  b: "07",
  n: "0100000000000000000001b8fa16dfab9aca16b6b3",
  h: "01",
  Gx: "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
  Gy: "938cf935318fdced6bc28286531733c3f03c4fee"
}, nP = {
  p: "ffffffffffffffffffffffffffffffff7fffffff",
  a: "ffffffffffffffffffffffffffffffff7ffffffc",
  b: "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
  n: "0100000000000000000001f4c8f927aed3ca752257",
  h: "01",
  Gx: "4a96b5688ef573284664698968c38bb913cbfc82",
  Gy: "23a628553168947d59dcc912042351377ac5fb32"
}, iP = {
  p: "fffffffffffffffffffffffffffffffffffffffeffffee37",
  a: "00",
  b: "03",
  n: "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
  h: "01",
  Gx: "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
  Gy: "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
}, oP = {
  p: "fffffffffffffffffffffffffffffffeffffffffffffffff",
  a: "fffffffffffffffffffffffffffffffefffffffffffffffc",
  b: "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
  n: "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
  h: "01",
  Gx: "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
  Gy: "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
}, sP = {
  p: "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
  a: "00",
  b: "07",
  n: "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
  h: "01",
  Gx: "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
  Gy: "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
}, aP = {
  p: "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
  a: "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
  b: "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
  n: "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
  h: "01",
  Gx: "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
  Gy: "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
}, fP = {
  secp128r1: tP,
  secp160k1: rP,
  secp160r1: nP,
  secp192k1: iP,
  secp192r1: oP,
  secp256k1: sP,
  secp256r1: aP
};
var oi = Tn, cP = fP, uP = pw;
function hP(e) {
  var t = cP[e];
  if (!t)
    return null;
  var r = new oi(t.p, 16), n = new oi(t.a, 16), i = new oi(t.b, 16), o = new oi(t.n, 16), s = new oi(t.h, 16), a = new oi(t.Gx, 16), c = new oi(t.Gy, 16);
  return new uP(r, n, i, a, c, o, s);
}
var lP = hP, dP = dw, pP = pw, gP = lP, Ns = {
  Curve: pP,
  Point: dP,
  getCurveByName: gP
}, yP = Mt, pi = Ce.Buffer, gw = bh, wP = pi.alloc(128), Qi = 64;
function Bf(e, t) {
  gw.call(this, "digest"), typeof t == "string" && (t = pi.from(t)), this._alg = e, this._key = t, t.length > Qi ? t = e(t) : t.length < Qi && (t = pi.concat([t, wP], Qi));
  for (var r = this._ipad = pi.allocUnsafe(Qi), n = this._opad = pi.allocUnsafe(Qi), i = 0; i < Qi; i++)
    r[i] = t[i] ^ 54, n[i] = t[i] ^ 92;
  this._hash = [r];
}
yP(Bf, gw);
Bf.prototype._update = function(e) {
  this._hash.push(e);
};
Bf.prototype._final = function() {
  var e = this._alg(pi.concat(this._hash));
  return this._alg(pi.concat([this._opad, e]));
};
var vP = Bf, bP = Qp, mP = function(e) {
  return new bP().update(e).digest();
}, EP = Mt, _P = vP, yw = bh, Zo = Ce.Buffer, SP = mP, Vu = vh, qu = c1, xP = Zo.alloc(128);
function ws(e, t) {
  yw.call(this, "digest"), typeof t == "string" && (t = Zo.from(t));
  var r = e === "sha512" || e === "sha384" ? 128 : 64;
  if (this._alg = e, this._key = t, t.length > r) {
    var n = e === "rmd160" ? new Vu() : qu(e);
    t = n.update(t).digest();
  } else
    t.length < r && (t = Zo.concat([t, xP], r));
  for (var i = this._ipad = Zo.allocUnsafe(r), o = this._opad = Zo.allocUnsafe(r), s = 0; s < r; s++)
    i[s] = t[s] ^ 54, o[s] = t[s] ^ 92;
  this._hash = e === "rmd160" ? new Vu() : qu(e), this._hash.update(i);
}
EP(ws, yw);
ws.prototype._update = function(e) {
  this._hash.update(e);
};
ws.prototype._final = function() {
  var e = this._hash.digest(), t = this._alg === "rmd160" ? new Vu() : qu(this._alg);
  return t.update(this._opad).update(e).digest();
};
var ww = function(t, r) {
  return t = t.toLowerCase(), t === "rmd160" || t === "ripemd160" ? new ws("rmd160", r) : t === "md5" ? new _P(SP, r) : new ws(t, r);
}, tu, zd;
function vw() {
  if (zd)
    return tu;
  zd = 1;
  var e = Ce.Buffer, t = ww, r = Tn, n = Ve, i = Tt, o = Ns, s = o.getCurveByName("secp256k1"), a = e.alloc(1, 0), c = e.alloc(1, 1);
  function d(w, g, O, N) {
    n(i.tuple(
      i.Hash256bit,
      i.Buffer256bit,
      i.Function
    ), arguments);
    var B = e.alloc(32, 0), I = e.alloc(32, 1);
    B = t("sha256", B).update(I).update(a).update(g).update(w), N && (n(n.BufferN(16), N), B.update(N)), B = B.digest(), I = t("sha256", B).update(I).digest(), B = t("sha256", B).update(I).update(c).update(g).update(w).digest(), I = t("sha256", B).update(I).digest(), I = t("sha256", B).update(I).digest();
    for (var M = r.fromBuffer(I); M.signum() <= 0 || M.compareTo(s.n) >= 0 || !O(M); )
      B = t("sha256", B).update(I).update(a).digest(), I = t("sha256", B).update(I).digest(), I = t("sha256", B).update(I).digest(), M = r.fromBuffer(I);
    return M;
  }
  return tu = {
    deterministicGenerateK: d
  }, tu;
}
var bw = Ve, gi = Tt, mw = Tn, IP = Bs, TP = Ns, jn = TP.getCurveByName("secp256k1"), Ew = vw().deterministicGenerateK, AP = jn.n.shiftRight(1);
function OP(e, t) {
  bw(gi.tuple(gi.Hash256bit, gi.BigInt), arguments);
  var r = t.toBuffer(32), n = mw.fromBuffer(e), i = jn.n, o = jn.G, s, a;
  return Ew(e, r, function(c) {
    var d = o.multiply(c);
    return !(jn.isInfinity(d) || (s = d.affineX.mod(i), s.signum() === 0) || (a = c.modInverse(i).multiply(n.add(t.multiply(s))).mod(i), a.signum() === 0));
  }), a.compareTo(AP) > 0 && (a = i.subtract(a)), new IP(s, a);
}
function BP(e, t, r) {
  bw(gi.tuple(
    gi.Hash256bit,
    gi.ECSignature,
    gi.ECPoint
  ), arguments);
  var n = jn.n, i = jn.G, o = t.r, s = t.s;
  if (o.signum() <= 0 || o.compareTo(n) >= 0 || s.signum() <= 0 || s.compareTo(n) >= 0)
    return !1;
  var a = mw.fromBuffer(e), c = s.modInverse(n), d = a.multiply(c).mod(n), w = o.multiply(c).mod(n), g = i.multiplyTwo(d, r, w);
  if (jn.isInfinity(g))
    return !1;
  var O = g.affineX, N = O.mod(n);
  return N.equals(o);
}
var PP = {
  deterministicGenerateK: Ew,
  sign: OP,
  verify: BP,
  // TODO: remove
  __curve: jn
}, Pf = Ve, Hr = Tt, _i = Tn, NP = Bs, Wu = qi, RP = Ns, _r = RP.getCurveByName("secp256k1"), _w = vw().deterministicGenerateK, Sw = !0;
function kP(e, t) {
  Pf(Hr.tuple(
    Hr.BufferN(32),
    Hr.BigInt
  ), arguments);
  var r = _r.n, n = _r.G;
  if (t.compareTo(_i.ZERO) <= 0 || t.compareTo(r) >= 0)
    throw new Error("Private key x not in range");
  var i = n.multiply(t), o, s;
  function a(w) {
    var g = n.multiply(w);
    Bl(g.affineY, _r.p) != 1 && (w = r.subtract(w), g = n.multiply(w)), o = g.affineX.mod(r);
    var O = Pl(i), N = o.toBuffer(32), B = Wu.sha256(Buffer.concat([N, O, e])), I = _i.fromBuffer(B).mod(r);
    return s = w.add(I.multiply(t)).mod(r), !0;
  }
  if (Sw)
    _w(e, t.toBuffer(32), a, Buffer.from("Schnorr+SHA256  ", "ascii"));
  else {
    var c = Wu.sha256(Buffer.concat([t.toBuffer(32), e])), d = _i.fromBuffer(c).mod(r);
    a(d);
  }
  return new NP(o, s);
}
function MP(d, t, r) {
  Pf(Hr.tuple(
    Hr.BufferN(32),
    Hr.ECSignature,
    Hr.ECPoint
  ), arguments);
  var n = _r.n, i = _r.G, o = t.r, s = t.s;
  if (!_r.isOnCurve(r) || _r.isInfinity(r) || o.compareTo(_r.p) >= 0 || s.compareTo(n) >= 0)
    return !1;
  var a = Pl(r), c = o.toBuffer(32), d = Wu.sha256(Buffer.concat([c, a, d])), w = _i.fromBuffer(d).mod(n), g = i.multiply(s).add(r.multiply(n.subtract(w)));
  return !(_r.isInfinity(g) || g.affineX.compareTo(o) != 0 || Bl(g.affineY, _r.p) != 1);
}
function Bl(e, t) {
  return e.modPow(t.subtract(_i.ONE).divide(_i.valueOf(2)), t).intValue();
}
function Pl(e) {
  return Pf(Hr.tuple(
    Hr.ECPoint
  ), arguments), Buffer.concat([Buffer.from([e.affineY.isEven() ? 2 : 3]), e.affineX.toBuffer(32)]);
}
function UP(e) {
  if (Pf(Hr.tuple(
    Hr.BufferN(33)
  ), arguments), e.length !== 33)
    throw new Error("Invalid length of buffer");
  if (e[0] !== 2 && e[0] !== 3)
    throw new Error("Invalid signum byte");
  var t = e[0] === 3, r = _i.fromBuffer(e.slice(1, 33));
  return _r.pointFromX(t, r);
}
var CP = {
  deterministicGenerateK: _w,
  sign: kP,
  verify: MP,
  jacobi: Bl,
  toCompressedPoint: Pl,
  fromCompressedPoint: UP,
  // TODO: remove
  __curve: _r,
  __useRFC6979: function(e) {
    Sw = e;
  }
}, HP = Il, LP = qi, Nl = PP, DP = CP, $P = Sg, ju = Ve, hi = Tt, xw = Ig, ru = Bs, Iw = As, Tw = Tn, FP = Ns, Nf = Nl.__curve;
function fr(e, t, r) {
  if (r && ju({
    compressed: hi.maybe(hi.Boolean),
    network: hi.maybe(hi.Network)
  }, r), r = r || {}, e) {
    if (e.signum() <= 0)
      throw new Error("Private key must be greater than 0");
    if (e.compareTo(Nf.n) >= 0)
      throw new Error("Private key must be less than the curve order");
    if (t)
      throw new TypeError("Unexpected publicKey parameter");
    this.d = e;
  } else
    ju(hi.ECPoint, t), this.__Q = t;
  this.compressed = r.compressed === void 0 ? !0 : r.compressed, this.network = r.network || Iw.bitcoin;
}
Object.defineProperty(fr.prototype, "Q", {
  get: function() {
    return !this.__Q && this.d && (this.__Q = Nf.G.multiply(this.d)), this.__Q;
  }
});
fr.fromPublicKeyBuffer = function(e, t) {
  var r = FP.Point.decodeFrom(Nf, e);
  return new fr(null, r, {
    compressed: r.compressed,
    network: t
  });
};
fr.fromWIF = function(e, t) {
  var r = xw.decode(e), n = r.version;
  if (hi.Array(t)) {
    if (t = t.filter(function(o) {
      return n === o.wif;
    }).pop(), !t)
      throw new Error("Unknown network version");
  } else if (t = t || Iw.bitcoin, n !== t.wif)
    throw new Error("Invalid network version");
  var i = Tw.fromBuffer(r.privateKey);
  return new fr(i, null, {
    compressed: r.compressed,
    network: t
  });
};
fr.makeRandom = function(e) {
  e = e || {};
  var t = e.rng || $P, r;
  do {
    var n = t(32);
    ju(hi.Buffer256bit, n), r = Tw.fromBuffer(n);
  } while (r.signum() <= 0 || r.compareTo(Nf.n) >= 0);
  return new fr(r, null, e);
};
fr.prototype.getAddress = function() {
  return HP.toBase58Check(LP.hash160(this.getPublicKeyBuffer()), this.getNetwork().pubKeyHash);
};
fr.prototype.getNetwork = function() {
  return this.network;
};
fr.prototype.getPublicKeyBuffer = function() {
  return this.Q.getEncoded(this.compressed);
};
fr.prototype.sign = function(e, t) {
  if (!this.d)
    throw new Error("Missing private key");
  if (t || (t = ru.ECDSA), t === ru.ECDSA)
    return Nl.sign(e, this.d);
  if (t === ru.SCHNORR)
    return DP.sign(e, this.d);
};
fr.prototype.toWIF = function() {
  if (!this.d)
    throw new Error("Missing private key");
  return xw.encode(this.network.wif, this.d.toBuffer(32), this.compressed);
};
fr.prototype.verify = function(e, t) {
  return Nl.verify(e, t, this.Q);
};
var Rl = fr, Rf = Ce.Buffer, Aw = Oi, KP = qi, Ow = ww, kf = Ve, yi = Tt, GP = As, kl = Tn, Ao = Rl, Bw = Ns, ao = Bw.getCurveByName("secp256k1");
function Ge(e, t) {
  if (!e.compressed)
    throw new TypeError("BIP32 only allows compressed keyPairs");
  this.keyPair = e, this.chainCode = t, this.depth = 0, this.index = 0, this.parentFingerprint = 0;
}
Ge.HIGHEST_BIT = 2147483648;
Ge.LENGTH = 78;
Ge.MASTER_SECRET = Rf.from("Bitcoin seed", "utf8");
Ge.fromSeedBuffer = function(e, t) {
  if (kf(yi.tuple(yi.Buffer, yi.maybe(yi.Network)), arguments), e.length < 16)
    throw new TypeError("Seed should be at least 128 bits");
  if (e.length > 64)
    throw new TypeError("Seed should be at most 512 bits");
  var r = Ow("sha512", Ge.MASTER_SECRET).update(e).digest(), n = r.slice(0, 32), i = r.slice(32), o = kl.fromBuffer(n), s = new Ao(o, null, {
    network: t
  });
  return new Ge(s, i);
};
Ge.fromSeedHex = function(e, t) {
  return Ge.fromSeedBuffer(Rf.from(e, "hex"), t);
};
Ge.fromBase58 = function(e, t) {
  var r = Aw.decode(e);
  if (r.length !== 78)
    throw new Error("Invalid buffer length");
  var n = r.readUInt32BE(0), i;
  if (Array.isArray(t)) {
    if (i = t.filter(function(N) {
      return n === N.bip32.private || n === N.bip32.public;
    }).pop(), !i)
      throw new Error("Unknown network version");
  } else
    i = t || GP.bitcoin;
  if (n !== i.bip32.private && n !== i.bip32.public)
    throw new Error("Invalid network version");
  var o = r[4], s = r.readUInt32BE(5);
  if (o === 0 && s !== 0)
    throw new Error("Invalid parent fingerprint");
  var a = r.readUInt32BE(9);
  if (o === 0 && a !== 0)
    throw new Error("Invalid index");
  var c = r.slice(13, 45), d;
  if (n === i.bip32.private) {
    if (r.readUInt8(45) !== 0)
      throw new Error("Invalid private key");
    var w = kl.fromBuffer(r.slice(46, 78));
    d = new Ao(w, null, { network: i });
  } else {
    var g = Bw.Point.decodeFrom(ao, r.slice(45, 78));
    ao.validate(g), d = new Ao(null, g, { network: i });
  }
  var O = new Ge(d, c);
  return O.depth = o, O.index = a, O.parentFingerprint = s, O;
};
Ge.prototype.getAddress = function() {
  return this.keyPair.getAddress();
};
Ge.prototype.getIdentifier = function() {
  return KP.hash160(this.keyPair.getPublicKeyBuffer());
};
Ge.prototype.getFingerprint = function() {
  return this.getIdentifier().slice(0, 4);
};
Ge.prototype.getNetwork = function() {
  return this.keyPair.getNetwork();
};
Ge.prototype.getPublicKeyBuffer = function() {
  return this.keyPair.getPublicKeyBuffer();
};
Ge.prototype.neutered = function() {
  var e = new Ao(null, this.keyPair.Q, {
    network: this.keyPair.network
  }), t = new Ge(e, this.chainCode);
  return t.depth = this.depth, t.index = this.index, t.parentFingerprint = this.parentFingerprint, t;
};
Ge.prototype.sign = function(e) {
  return this.keyPair.sign(e);
};
Ge.prototype.verify = function(e, t) {
  return this.keyPair.verify(e, t);
};
Ge.prototype.toBase58 = function(e) {
  if (e !== void 0)
    throw new TypeError("Unsupported argument in 2.0.0");
  var t = this.keyPair.network, r = this.isNeutered() ? t.bip32.public : t.bip32.private, n = Rf.allocUnsafe(78);
  return n.writeUInt32BE(r, 0), n.writeUInt8(this.depth, 4), n.writeUInt32BE(this.parentFingerprint, 5), n.writeUInt32BE(this.index, 9), this.chainCode.copy(n, 13), this.isNeutered() ? this.keyPair.getPublicKeyBuffer().copy(n, 45) : (n.writeUInt8(0, 45), this.keyPair.d.toBuffer(32).copy(n, 46)), Aw.encode(n);
};
Ge.prototype.derive = function(e) {
  kf(yi.UInt32, e);
  var t = e >= Ge.HIGHEST_BIT, r = Rf.allocUnsafe(37);
  if (t) {
    if (this.isNeutered())
      throw new TypeError("Could not derive hardened child key");
    r[0] = 0, this.keyPair.d.toBuffer(32).copy(r, 1), r.writeUInt32BE(e, 33);
  } else
    this.keyPair.getPublicKeyBuffer().copy(r, 0), r.writeUInt32BE(e, 33);
  var n = Ow("sha512", this.chainCode).update(r).digest(), i = n.slice(0, 32), o = n.slice(32), s = kl.fromBuffer(i);
  if (s.compareTo(ao.n) >= 0)
    return this.derive(e + 1);
  var a;
  if (this.isNeutered()) {
    var d = ao.G.multiply(s).add(this.keyPair.Q);
    if (ao.isInfinity(d))
      return this.derive(e + 1);
    a = new Ao(null, d, {
      network: this.keyPair.network
    });
  } else {
    var c = s.add(this.keyPair.d).mod(ao.n);
    if (c.signum() === 0)
      return this.derive(e + 1);
    a = new Ao(c, null, {
      network: this.keyPair.network
    });
  }
  var w = new Ge(a, o);
  return w.depth = this.depth + 1, w.index = e, w.parentFingerprint = this.getFingerprint().readUInt32BE(0), w;
};
Ge.prototype.deriveHardened = function(e) {
  return kf(yi.UInt31, e), this.derive(e + Ge.HIGHEST_BIT);
};
Ge.prototype.isNeutered = function() {
  return !this.keyPair.d;
};
Ge.prototype.derivePath = function(e) {
  kf(yi.BIP32Path, e);
  var t = e.split("/");
  if (t[0] === "m") {
    if (this.parentFingerprint)
      throw new Error("Not a master node");
    t = t.slice(1);
  }
  return t.reduce(function(r, n) {
    var i;
    return n.slice(-1) === "'" ? (i = parseInt(n.slice(0, -1), 10), r.deriveHardened(i)) : (i = parseInt(n, 10), r.derive(i));
  }, this);
};
var VP = Ge, Da = Ce.Buffer, qP = Il, Cr = qi, zn = At, Se = bl, WP = As, Xd = nr, Ml = Ve, Ul = Tt, We = Se.types, Pw = [Se.types.P2PKH, Se.types.P2PK, Se.types.MULTISIG], jP = Pw.concat([Se.types.P2WPKH, Se.types.P2WSH]), zP = Rl, Nw = Bs, Jn = Sl;
function fo(e) {
  return Pw.indexOf(e) !== -1;
}
function Rw(e) {
  return jP.indexOf(e) !== -1;
}
function XP(e, t, r) {
  var n = [], i = [];
  switch (e) {
    case We.P2PKH:
      n = t.slice(1), i = t.slice(0, 1);
      break;
    case We.P2PK:
      n[0] = r ? Se.pubKey.output.decode(r) : void 0, i = t.slice(0, 1);
      break;
    case We.MULTISIG:
      if (r) {
        var o = Se.multisig.output.decode(r);
        n = o.pubKeys;
      }
      i = t.slice(1).map(function(s) {
        return s.length === 0 ? void 0 : s;
      });
      break;
  }
  return {
    pubKeys: n,
    signatures: i
  };
}
function YP(e, t) {
  if (e.length === 0 && t.length === 0)
    return {};
  var r, n, i, o, s, a, c, d, w = !1, g = !1, O = !1, N, B, I = zn.decompile(e), M = Se.classifyInput(I, !0);
  M === We.P2SH && (O = !0, s = I[I.length - 1], d = Se.classifyOutput(s), r = Se.scriptHash.output.encode(Cr.hash160(s)), n = We.P2SH, o = s);
  var T = Se.classifyWitness(t, !0);
  if (T === We.P2WSH) {
    if (a = t[t.length - 1], c = Se.classifyOutput(a), g = !0, w = !0, e.length === 0) {
      if (r = Se.witnessScriptHash.output.encode(Cr.sha256(a)), n = We.P2WSH, s !== void 0)
        throw new Error("Redeem script given when unnecessary");
    } else {
      if (!s)
        throw new Error("No redeemScript provided for P2WSH, but scriptSig non-empty");
      if (N = Se.witnessScriptHash.output.encode(Cr.sha256(a)), !s.equals(N))
        throw new Error("Redeem script didn't match witnessScript");
    }
    if (!fo(Se.classifyOutput(a)))
      throw new Error("unsupported witness script");
    o = a, i = c, B = t.slice(0, -1);
  } else if (T === We.P2WPKH) {
    w = !0;
    var k = t[t.length - 1], F = Cr.hash160(k);
    if (e.length === 0) {
      if (r = Se.witnessPubKeyHash.output.encode(F), n = We.P2WPKH, typeof s < "u")
        throw new Error("Redeem script given when unnecessary");
    } else {
      if (!s)
        throw new Error("No redeemScript provided for P2WPKH, but scriptSig wasn't empty");
      if (N = Se.witnessPubKeyHash.output.encode(F), !s.equals(N))
        throw new Error("Redeem script did not have the right witness program");
    }
    i = We.P2PKH, B = t;
  } else if (s) {
    if (!Rw(d))
      throw new Error("Bad redeemscript!");
    o = s, i = d, B = I.slice(0, -1);
  } else
    n = i = Se.classifyInput(e), B = I;
  var X = XP(i, B, o), Z = {
    pubKeys: X.pubKeys,
    signatures: X.signatures,
    prevOutScript: r,
    prevOutType: n,
    signType: i,
    signScript: o,
    witness: !!w
  };
  return O && (Z.redeemScript = s, Z.redeemScriptType = d), g && (Z.witnessScript = a, Z.witnessScriptType = c), Z;
}
function ZP(e, t, r, n, i) {
  if (!(e.redeemScriptType !== We.MULTISIG || !e.redeemScript) && e.pubKeys.length !== e.signatures.length) {
    var o = e.signatures.concat();
    e.signatures = e.pubKeys.map(function(s) {
      var a = zP.fromPublicKeyBuffer(s), c;
      return o.some(function(d, w) {
        if (!d)
          return !1;
        var g = Nw.parseScriptSignature(d), O;
        return i ? O = t.hashForCashSignature(r, e.signScript, n, g.hashType) : e.witness ? O = t.hashForWitnessV0(r, e.signScript, n, g.hashType) : O = t.hashForSignature(r, e.signScript, g.hashType), a.verify(O, g.signature) ? (o[w] = void 0, c = d, !0) : !1;
      }), c;
    });
  }
}
function so(e, t, r) {
  Ml(Ul.Buffer, e);
  var n = zn.decompile(e);
  t || (t = Se.classifyOutput(e));
  var i = [];
  switch (t) {
    case We.P2PKH:
      if (!r)
        break;
      var o = n[2], s = Cr.hash160(r);
      o.equals(s) && (i = [r]);
      break;
    case We.P2WPKH:
      if (!r)
        break;
      var a = n[1], c = Cr.hash160(r);
      a.equals(c) && (i = [r]);
      break;
    case We.P2PK:
      i = n.slice(0, 1);
      break;
    case We.MULTISIG:
      i = n.slice(1, -2);
      break;
    default:
      return { scriptType: t };
  }
  return {
    pubKeys: i,
    scriptType: t,
    signatures: i.map(function() {
    })
  };
}
function Yd(e, t) {
  if (e.prevOutType) {
    if (e.prevOutType !== We.P2SH)
      throw new Error("PrevOutScript must be P2SH");
    var r = zn.decompile(e.prevOutScript)[1];
    if (!r.equals(t))
      throw new Error("Inconsistent hash160(RedeemScript)");
  }
}
function JP(e, t) {
  if (e.prevOutType) {
    if (e.prevOutType !== We.P2WSH)
      throw new Error("PrevOutScript must be P2WSH");
    var r = zn.decompile(e.prevOutScript)[1];
    if (!r.equals(t))
      throw new Error("Inconsistent sha25(WitnessScript)");
  }
}
function QP(e, t, r, n, i) {
  var o, s, a, c = !1, d, w, g = !1, O = !1, N, B, I, M;
  if (r && i) {
    if (w = Cr.hash160(r), B = Cr.sha256(i), Yd(e, w), !r.equals(Se.witnessScriptHash.output.encode(B)))
      throw new Error("Witness script inconsistent with redeem script");
    if (o = so(i, void 0, t), !o.pubKeys)
      throw new Error('WitnessScript not supported "' + zn.toASM(r) + '"');
    s = Se.types.P2SH, a = Se.scriptHash.output.encode(w), c = g = O = !0, d = Se.types.P2WSH, I = N = o.scriptType, M = i;
  } else if (r) {
    if (w = Cr.hash160(r), Yd(e, w), o = so(r, void 0, t), !o.pubKeys)
      throw new Error('RedeemScript not supported "' + zn.toASM(r) + '"');
    s = Se.types.P2SH, a = Se.scriptHash.output.encode(w), c = !0, I = d = o.scriptType, M = r, g = I === Se.types.P2WPKH;
  } else if (i) {
    if (B = Cr.sha256(i), JP(e, B), o = so(i, void 0, t), !o.pubKeys)
      throw new Error('WitnessScript not supported "' + zn.toASM(r) + '"');
    s = Se.types.P2WSH, a = Se.witnessScriptHash.output.encode(B), g = O = !0, I = N = o.scriptType, M = i;
  } else if (e.prevOutType) {
    if (e.prevOutType === We.P2SH || e.prevOutType === We.P2WSH)
      throw new Error("PrevOutScript is " + e.prevOutType + ", requires redeemScript");
    if (s = e.prevOutType, a = e.prevOutScript, o = so(e.prevOutScript, e.prevOutType, t), !o.pubKeys)
      return;
    g = e.prevOutType === We.P2WPKH, I = s, M = a;
  } else
    a = Se.pubKeyHash.output.encode(Cr.hash160(t)), o = so(a, We.P2PKH, t), s = We.P2PKH, g = !1, I = s, M = a;
  I === We.P2WPKH && (M = Se.pubKeyHash.output.encode(Se.witnessPubKeyHash.output.decode(M))), c && (e.redeemScript = r, e.redeemScriptType = d), O && (e.witnessScript = i, e.witnessScriptType = N), e.pubKeys = o.pubKeys, e.signatures = o.signatures, e.signScript = M, e.signType = I, e.prevOutScript = a, e.prevOutType = s, e.witness = g;
}
function ia(e, t, r, n) {
  if (e === We.P2PKH) {
    if (t.length === 1 && Da.isBuffer(t[0]) && r.length === 1)
      return Se.pubKeyHash.input.encodeStack(t[0], r[0]);
  } else if (e === We.P2PK) {
    if (t.length === 1 && Da.isBuffer(t[0]))
      return Se.pubKey.input.encodeStack(t[0]);
  } else if (e === We.MULTISIG) {
    if (t.length > 0)
      return t = t.map(function(i) {
        return i || Xd.OP_0;
      }), n || (t = t.filter(function(i) {
        return i !== Xd.OP_0;
      })), Se.multisig.input.encodeStack(t);
  } else
    throw new Error("Not yet supported");
  if (!n)
    throw new Error("Not enough signatures provided");
  return [];
}
function e5(e, t) {
  var r = e.prevOutType, n = [], i = [];
  fo(r) && (n = ia(r, e.signatures, e.pubKeys, t));
  var o = !1;
  if (r === Se.types.P2SH) {
    if (!t && !Rw(e.redeemScriptType))
      throw new Error("Impossible to sign this type");
    fo(e.redeemScriptType) && (n = ia(e.redeemScriptType, e.signatures, e.pubKeys, t)), e.redeemScriptType && (o = !0, r = e.redeemScriptType);
  }
  switch (r) {
    case Se.types.P2WPKH:
      i = ia(Se.types.P2PKH, e.signatures, e.pubKeys, t);
      break;
    case Se.types.P2WSH:
      if (!t && !fo(e.witnessScriptType))
        throw new Error("Impossible to sign this type");
      fo(e.witnessScriptType) && (i = ia(e.witnessScriptType, e.signatures, e.pubKeys, t), i.push(e.witnessScript), r = e.witnessScriptType);
      break;
  }
  return o && n.push(e.redeemScript), {
    type: r,
    script: zn.compile(n),
    witness: i
  };
}
function cr(e, t) {
  this.prevTxMap = {}, this.network = e || WP.bitcoin, this.maximumFeeRate = t || 2500, this.inputs = [], this.bitcoinCash = !0, this.tx = new Jn();
}
cr.prototype.setLockTime = function(e) {
  if (Ml(Ul.UInt32, e), this.inputs.some(function(t) {
    return t.signatures ? t.signatures.some(function(r) {
      return r;
    }) : !1;
  }))
    throw new Error("No, this would invalidate signatures");
  this.tx.locktime = e;
};
cr.fromTransaction = function(e, t, r) {
  var n = new cr(t);
  return n.setLockTime(e.locktime), e.outs.forEach(function(i) {
    n.addOutput(i.script, i.value);
  }), e.ins.forEach(function(i) {
    n.__addInputUnsafe(i.hash, i.index, {
      sequence: i.sequence,
      script: i.script,
      witness: i.witness,
      value: i.value
    });
  }), n.inputs.forEach(function(i, o) {
    ZP(i, e, o, i.value, r);
  }), n;
};
cr.prototype.addInput = function(e, t, r, n) {
  if (!this.__canModifyInputs())
    throw new Error("No, this would invalidate signatures");
  var i;
  if (typeof e == "string")
    e = Da.from(e, "hex").reverse();
  else if (e instanceof Jn) {
    var o = e.outs[t];
    n = o.script, i = o.value, e = e.getHash();
  }
  return this.__addInputUnsafe(e, t, {
    sequence: r,
    prevOutScript: n,
    value: i
  });
};
cr.prototype.__addInputUnsafe = function(e, t, r) {
  if (Jn.isCoinbaseHash(e))
    throw new Error("coinbase inputs not supported");
  var n = e.toString("hex") + ":" + t;
  if (this.prevTxMap[n] !== void 0)
    throw new Error("Duplicate TxOut: " + n);
  var i = {};
  if (r.script !== void 0 && (i = YP(r.script, r.witness || [])), r.value !== void 0 && (i.value = r.value), !i.prevOutScript && r.prevOutScript) {
    var o;
    if (!i.pubKeys && !i.signatures) {
      var s = so(r.prevOutScript);
      s.pubKeys && (i.pubKeys = s.pubKeys, i.signatures = s.signatures), o = s.scriptType;
    }
    i.prevOutScript = r.prevOutScript, i.prevOutType = o || Se.classifyOutput(r.prevOutScript);
  }
  var a = this.tx.addInput(e, t, r.sequence, r.scriptSig);
  return this.inputs[a] = i, this.prevTxMap[n] = a, a;
};
cr.prototype.addOutput = function(e, t) {
  if (!this.__canModifyOutputs())
    throw new Error("No, this would invalidate signatures");
  return typeof e == "string" && (e = qP.toOutputScript(e, this.network)), this.tx.addOutput(e, t);
};
cr.prototype.build = function() {
  return this.__build(!1);
};
cr.prototype.buildIncomplete = function() {
  return this.__build(!0);
};
cr.prototype.__build = function(e) {
  if (!e) {
    if (!this.tx.ins.length)
      throw new Error("Transaction has no inputs");
    if (!this.tx.outs.length)
      throw new Error("Transaction has no outputs");
  }
  var t = this.tx.clone();
  if (this.inputs.forEach(function(r, n) {
    var i = r.witnessScriptType || r.redeemScriptType || r.prevOutType;
    if (!i && !e)
      throw new Error("Transaction is not complete");
    var o = e5(r, e);
    if (!e && !fo(o.type) && o.type !== Se.types.P2WPKH)
      throw new Error(o.type + " not supported");
    t.setInputScript(n, o.script), t.setWitness(n, o.witness);
  }), !e && this.__overMaximumFees(t.virtualSize()))
    throw new Error("Transaction has absurd fees");
  return t;
};
function nu(e) {
  return e.prevOutScript !== void 0 && e.signScript !== void 0 && e.pubKeys !== void 0 && e.signatures !== void 0 && e.signatures.length === e.pubKeys.length && e.pubKeys.length > 0 && (e.witness === !1 || e.witness === !0 && e.value !== void 0);
}
cr.prototype.sign = function(e, t, r, n, i, o, s) {
  if (n = n | Jn.SIGHASH_BITCOINCASHBIP143, !this.inputs[e])
    throw new Error("No input at index: " + e);
  n = n || Jn.SIGHASH_ALL;
  var a = this.inputs[e];
  if (a.redeemScript !== void 0 && r && !a.redeemScript.equals(r))
    throw new Error("Inconsistent redeemScript");
  var c = t.publicKey || t.getPublicKeyBuffer();
  if (!nu(a)) {
    if (i !== void 0) {
      if (a.value !== void 0 && a.value !== i)
        throw new Error("Input didn't match witnessValue");
      Ml(Ul.Satoshi, i), a.value = i;
    }
    if (nu(a) || QP(a, c, r, i, o), !nu(a))
      throw Error(a.prevOutType + " not supported");
  }
  var d = this.tx.hashForCashSignature(e, a.signScript, i, n), w = a.pubKeys.some(function(g, O) {
    if (!c.equals(g))
      return !1;
    if (a.signatures[O])
      throw new Error("Signature already exists");
    if (c.length !== 33 && a.signType === We.P2WPKH)
      throw new Error("BIP143 rejects uncompressed public keys in P2WPKH or P2WSH");
    var N = t.sign(d, s);
    return Da.isBuffer(N) && (N = Nw.fromRSBuffer(N)), a.signatures[O] = N.toScriptSignature(n, s), !0;
  });
  if (!w)
    throw new Error("Key pair cannot sign for this input");
};
function kw(e) {
  return e.readUInt8(e.length - 1);
}
cr.prototype.__canModifyInputs = function() {
  return this.inputs.every(function(e) {
    return e.signatures === void 0 ? !0 : e.signatures.every(function(t) {
      if (!t)
        return !0;
      var r = kw(t);
      return r & Jn.SIGHASH_ANYONECANPAY;
    });
  });
};
cr.prototype.__canModifyOutputs = function() {
  var e = this.tx.ins.length, t = this.tx.outs.length;
  return this.inputs.every(function(r) {
    return r.signatures === void 0 ? !0 : r.signatures.every(function(n) {
      if (!n)
        return !0;
      var i = kw(n), o = i & 31;
      if (o === Jn.SIGHASH_NONE)
        return !0;
      if (o === Jn.SIGHASH_SINGLE)
        return e <= t;
    });
  });
};
cr.prototype.__overMaximumFees = function(e) {
  var t = this.inputs.reduce(function(o, s) {
    return o + (s.value >>> 0);
  }, 0), r = this.tx.outs.reduce(function(o, s) {
    return o + s.value;
  }, 0), n = t - r, i = n / e;
  return i > this.maximumFeeRate;
};
var t5 = cr, Mw = At, Zd = bl;
for (var Jd in Zd)
  Mw[Jd] = Zd[Jd];
var Jo = {
  bufferutils: Yy,
  // TODO: remove in 4.0.0
  Block: qO,
  ECPair: Rl,
  ECSignature: Bs,
  HDNode: VP,
  Transaction: Sl,
  TransactionBuilder: t5,
  address: Il,
  crypto: qi,
  networks: As,
  opcodes: nr,
  script: Mw
};
/**
 * @license
 * https://github.com/ealmansi/cashaddrjs
 * Copyright (c) 2017-2020 Emilio Almansi
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */
function Cl(e) {
  var t = new Error();
  this.name = t.name = "ValidationError", this.message = t.message = e, this.stack = t.stack;
}
Cl.prototype = Object.create(Error.prototype);
function r5(e, t) {
  if (!e)
    throw new Cl(t);
}
var Hl = {
  ValidationError: Cl,
  validate: r5
};
/**
 * @license
 * https://github.com/ealmansi/cashaddrjs
 * Copyright (c) 2017-2020 Emilio Almansi
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */
var $a = Hl.validate, n5 = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", Qd = {
  q: 0,
  p: 1,
  z: 2,
  r: 3,
  y: 4,
  9: 5,
  x: 6,
  8: 7,
  g: 8,
  f: 9,
  2: 10,
  t: 11,
  v: 12,
  d: 13,
  w: 14,
  0: 15,
  s: 16,
  3: 17,
  j: 18,
  n: 19,
  5: 20,
  4: 21,
  k: 22,
  h: 23,
  c: 24,
  e: 25,
  6: 26,
  m: 27,
  u: 28,
  a: 29,
  7: 30,
  l: 31
};
function i5(e) {
  $a(e instanceof Uint8Array, "Invalid data: " + e + ".");
  for (var t = "", r = 0; r < e.length; ++r) {
    var n = e[r];
    $a(0 <= n && n < 32, "Invalid value: " + n + "."), t += n5[n];
  }
  return t;
}
function o5(e) {
  $a(typeof e == "string", "Invalid base32-encoded string: " + e + ".");
  for (var t = new Uint8Array(e.length), r = 0; r < e.length; ++r) {
    var n = e[r];
    $a(n in Qd, "Invalid value: " + n + "."), t[r] = Qd[n];
  }
  return t;
}
var s5 = {
  encode: i5,
  decode: o5
}, Uw = { exports: {} };
(function(e) {
  var t = function(r) {
    var n = 1e7, i = 7, o = 9007199254740992, s = O(o), a = Math.log(o);
    function c(S, U) {
      return typeof S > "u" ? c[0] : typeof U < "u" ? +U == 10 ? ye(S) : ae(S, U) : ye(S);
    }
    function d(S, U) {
      this.value = S, this.sign = U, this.isSmall = !1;
    }
    d.prototype = Object.create(c.prototype);
    function w(S) {
      this.value = S, this.sign = S < 0, this.isSmall = !0;
    }
    w.prototype = Object.create(c.prototype);
    function g(S) {
      return -o < S && S < o;
    }
    function O(S) {
      return S < 1e7 ? [S] : S < 1e14 ? [S % 1e7, Math.floor(S / 1e7)] : [S % 1e7, Math.floor(S / 1e7) % 1e7, Math.floor(S / 1e14)];
    }
    function N(S) {
      B(S);
      var U = S.length;
      if (U < 4 && _(S, s) < 0)
        switch (U) {
          case 0:
            return 0;
          case 1:
            return S[0];
          case 2:
            return S[0] + S[1] * n;
          default:
            return S[0] + (S[1] + S[2] * n) * n;
        }
      return S;
    }
    function B(S) {
      for (var U = S.length; S[--U] === 0; )
        ;
      S.length = U + 1;
    }
    function I(S) {
      for (var U = new Array(S), j = -1; ++j < S; )
        U[j] = 0;
      return U;
    }
    function M(S) {
      return S > 0 ? Math.floor(S) : Math.ceil(S);
    }
    function T(S, U) {
      var j = S.length, y = U.length, u = new Array(j), l = 0, x = n, D, K;
      for (K = 0; K < y; K++)
        D = S[K] + U[K] + l, l = D >= x ? 1 : 0, u[K] = D - l * x;
      for (; K < j; )
        D = S[K] + l, l = D === x ? 1 : 0, u[K++] = D - l * x;
      return l > 0 && u.push(l), u;
    }
    function k(S, U) {
      return S.length >= U.length ? T(S, U) : T(U, S);
    }
    function F(S, U) {
      var j = S.length, y = new Array(j), u = n, l, x;
      for (x = 0; x < j; x++)
        l = S[x] - u + U, U = Math.floor(l / u), y[x] = l - U * u, U += 1;
      for (; U > 0; )
        y[x++] = U % u, U = Math.floor(U / u);
      return y;
    }
    d.prototype.add = function(S) {
      var U = ye(S);
      if (this.sign !== U.sign)
        return this.subtract(U.negate());
      var j = this.value, y = U.value;
      return U.isSmall ? new d(F(j, Math.abs(y)), this.sign) : new d(k(j, y), this.sign);
    }, d.prototype.plus = d.prototype.add, w.prototype.add = function(S) {
      var U = ye(S), j = this.value;
      if (j < 0 !== U.sign)
        return this.subtract(U.negate());
      var y = U.value;
      if (U.isSmall) {
        if (g(j + y))
          return new w(j + y);
        y = O(Math.abs(y));
      }
      return new d(F(y, Math.abs(j)), j < 0);
    }, w.prototype.plus = w.prototype.add;
    function X(S, U) {
      var j = S.length, y = U.length, u = new Array(j), l = 0, x = n, D, K;
      for (D = 0; D < y; D++)
        K = S[D] - l - U[D], K < 0 ? (K += x, l = 1) : l = 0, u[D] = K;
      for (D = y; D < j; D++) {
        if (K = S[D] - l, K < 0)
          K += x;
        else {
          u[D++] = K;
          break;
        }
        u[D] = K;
      }
      for (; D < j; D++)
        u[D] = S[D];
      return B(u), u;
    }
    function Z(S, U, j) {
      var y;
      return _(S, U) >= 0 ? y = X(S, U) : (y = X(U, S), j = !j), y = N(y), typeof y == "number" ? (j && (y = -y), new w(y)) : new d(y, j);
    }
    function z(S, U, j) {
      var y = S.length, u = new Array(y), l = -U, x = n, D, K;
      for (D = 0; D < y; D++)
        K = S[D] + l, l = Math.floor(K / x), K %= x, u[D] = K < 0 ? K + x : K;
      return u = N(u), typeof u == "number" ? (j && (u = -u), new w(u)) : new d(u, j);
    }
    d.prototype.subtract = function(S) {
      var U = ye(S);
      if (this.sign !== U.sign)
        return this.add(U.negate());
      var j = this.value, y = U.value;
      return U.isSmall ? z(j, Math.abs(y), this.sign) : Z(j, y, this.sign);
    }, d.prototype.minus = d.prototype.subtract, w.prototype.subtract = function(S) {
      var U = ye(S), j = this.value;
      if (j < 0 !== U.sign)
        return this.add(U.negate());
      var y = U.value;
      return U.isSmall ? new w(j - y) : z(y, Math.abs(j), j >= 0);
    }, w.prototype.minus = w.prototype.subtract, d.prototype.negate = function() {
      return new d(this.value, !this.sign);
    }, w.prototype.negate = function() {
      var S = this.sign, U = new w(-this.value);
      return U.sign = !S, U;
    }, d.prototype.abs = function() {
      return new d(this.value, !1);
    }, w.prototype.abs = function() {
      return new w(Math.abs(this.value));
    };
    function te(S, U) {
      var j = S.length, y = U.length, u = j + y, l = I(u), x = n, D, K, J, ce, se;
      for (J = 0; J < j; ++J) {
        ce = S[J];
        for (var fe = 0; fe < y; ++fe)
          se = U[fe], D = ce * se + l[J + fe], K = Math.floor(D / x), l[J + fe] = D - K * x, l[J + fe + 1] += K;
      }
      return B(l), l;
    }
    function b(S, U) {
      var j = S.length, y = new Array(j), u = n, l = 0, x, D;
      for (D = 0; D < j; D++)
        x = S[D] * U + l, l = Math.floor(x / u), y[D] = x - l * u;
      for (; l > 0; )
        y[D++] = l % u, l = Math.floor(l / u);
      return y;
    }
    function A(S, U) {
      for (var j = []; U-- > 0; )
        j.push(0);
      return j.concat(S);
    }
    function C(S, U) {
      var j = Math.max(S.length, U.length);
      if (j <= 30)
        return te(S, U);
      j = Math.ceil(j / 2);
      var y = S.slice(j), u = S.slice(0, j), l = U.slice(j), x = U.slice(0, j), D = C(u, x), K = C(y, l), J = C(k(u, y), k(x, l)), ce = k(k(D, A(X(X(J, D), K), j)), A(K, 2 * j));
      return B(ce), ce;
    }
    function q(S, U) {
      return -0.012 * S - 0.012 * U + 15e-6 * S * U > 0;
    }
    d.prototype.multiply = function(S) {
      var U = ye(S), j = this.value, y = U.value, u = this.sign !== U.sign, l;
      if (U.isSmall) {
        if (y === 0)
          return c[0];
        if (y === 1)
          return this;
        if (y === -1)
          return this.negate();
        if (l = Math.abs(y), l < n)
          return new d(b(j, l), u);
        y = O(l);
      }
      return q(j.length, y.length) ? new d(C(j, y), u) : new d(te(j, y), u);
    }, d.prototype.times = d.prototype.multiply;
    function W(S, U, j) {
      return S < n ? new d(b(U, S), j) : new d(te(U, O(S)), j);
    }
    w.prototype._multiplyBySmall = function(S) {
      return g(S.value * this.value) ? new w(S.value * this.value) : W(Math.abs(S.value), O(Math.abs(this.value)), this.sign !== S.sign);
    }, d.prototype._multiplyBySmall = function(S) {
      return S.value === 0 ? c[0] : S.value === 1 ? this : S.value === -1 ? this.negate() : W(Math.abs(S.value), this.value, this.sign !== S.sign);
    }, w.prototype.multiply = function(S) {
      return ye(S)._multiplyBySmall(this);
    }, w.prototype.times = w.prototype.multiply;
    function E(S) {
      var U = S.length, j = I(U + U), y = n, u, l, x, D, K;
      for (x = 0; x < U; x++) {
        D = S[x], l = 0 - D * D;
        for (var J = x; J < U; J++)
          K = S[J], u = 2 * (D * K) + j[x + J] + l, l = Math.floor(u / y), j[x + J] = u - l * y;
        j[x + U] = l;
      }
      return B(j), j;
    }
    d.prototype.square = function() {
      return new d(E(this.value), !1);
    }, w.prototype.square = function() {
      var S = this.value * this.value;
      return g(S) ? new w(S) : new d(E(O(Math.abs(this.value))), !1);
    };
    function f(S, U) {
      var j = S.length, y = U.length, u = n, l = I(U.length), x = U[y - 1], D = Math.ceil(u / (2 * x)), K = b(S, D), J = b(U, D), ce, se, fe, Te, le, Ye, Xi;
      for (K.length <= j && K.push(0), J.push(0), x = J[y - 1], se = j - y; se >= 0; se--) {
        for (ce = u - 1, K[se + y] !== x && (ce = Math.floor((K[se + y] * u + K[se + y - 1]) / x)), fe = 0, Te = 0, Ye = J.length, le = 0; le < Ye; le++)
          fe += ce * J[le], Xi = Math.floor(fe / u), Te += K[se + le] - (fe - Xi * u), fe = Xi, Te < 0 ? (K[se + le] = Te + u, Te = -1) : (K[se + le] = Te, Te = 0);
        for (; Te !== 0; ) {
          for (ce -= 1, fe = 0, le = 0; le < Ye; le++)
            fe += K[se + le] - u + J[le], fe < 0 ? (K[se + le] = fe + u, fe = 0) : (K[se + le] = fe, fe = 1);
          Te += fe;
        }
        l[se] = ce;
      }
      return K = v(K, D)[0], [N(l), N(K)];
    }
    function h(S, U) {
      for (var j = S.length, y = U.length, u = [], l = [], x = n, D, K, J, ce, se; j; ) {
        if (l.unshift(S[--j]), B(l), _(l, U) < 0) {
          u.push(0);
          continue;
        }
        K = l.length, J = l[K - 1] * x + l[K - 2], ce = U[y - 1] * x + U[y - 2], K > y && (J = (J + 1) * x), D = Math.ceil(J / ce);
        do {
          if (se = b(U, D), _(se, l) <= 0)
            break;
          D--;
        } while (D);
        u.push(D), l = X(l, se);
      }
      return u.reverse(), [N(u), N(l)];
    }
    function v(S, U) {
      var j = S.length, y = I(j), u = n, l, x, D, K;
      for (D = 0, l = j - 1; l >= 0; --l)
        K = D * u + S[l], x = M(K / U), D = K - x * U, y[l] = x | 0;
      return [y, D | 0];
    }
    function m(S, U) {
      var j, y = ye(U), u = S.value, l = y.value, x;
      if (l === 0)
        throw new Error("Cannot divide by zero");
      if (S.isSmall)
        return y.isSmall ? [new w(M(u / l)), new w(u % l)] : [c[0], S];
      if (y.isSmall) {
        if (l === 1)
          return [S, c[0]];
        if (l == -1)
          return [S.negate(), c[0]];
        var D = Math.abs(l);
        if (D < n) {
          j = v(u, D), x = N(j[0]);
          var K = j[1];
          return S.sign && (K = -K), typeof x == "number" ? (S.sign !== y.sign && (x = -x), [new w(x), new w(K)]) : [new d(x, S.sign !== y.sign), new w(K)];
        }
        l = O(D);
      }
      var J = _(u, l);
      if (J === -1)
        return [c[0], S];
      if (J === 0)
        return [c[S.sign === y.sign ? 1 : -1], c[0]];
      u.length + l.length <= 200 ? j = f(u, l) : j = h(u, l), x = j[0];
      var ce = S.sign !== y.sign, se = j[1], fe = S.sign;
      return typeof x == "number" ? (ce && (x = -x), x = new w(x)) : x = new d(x, ce), typeof se == "number" ? (fe && (se = -se), se = new w(se)) : se = new d(se, fe), [x, se];
    }
    d.prototype.divmod = function(S) {
      var U = m(this, S);
      return {
        quotient: U[0],
        remainder: U[1]
      };
    }, w.prototype.divmod = d.prototype.divmod, d.prototype.divide = function(S) {
      return m(this, S)[0];
    }, w.prototype.over = w.prototype.divide = d.prototype.over = d.prototype.divide, d.prototype.mod = function(S) {
      return m(this, S)[1];
    }, w.prototype.remainder = w.prototype.mod = d.prototype.remainder = d.prototype.mod, d.prototype.pow = function(S) {
      var U = ye(S), j = this.value, y = U.value, u, l, x;
      if (y === 0)
        return c[1];
      if (j === 0)
        return c[0];
      if (j === 1)
        return c[1];
      if (j === -1)
        return U.isEven() ? c[1] : c[-1];
      if (U.sign)
        return c[0];
      if (!U.isSmall)
        throw new Error("The exponent " + U.toString() + " is too large.");
      if (this.isSmall && g(u = Math.pow(j, y)))
        return new w(M(u));
      for (l = this, x = c[1]; y & !0 && (x = x.times(l), --y), y !== 0; )
        y /= 2, l = l.square();
      return x;
    }, w.prototype.pow = d.prototype.pow, d.prototype.modPow = function(S, U) {
      if (S = ye(S), U = ye(U), U.isZero())
        throw new Error("Cannot take modPow with modulus 0");
      for (var j = c[1], y = this.mod(U); S.isPositive(); ) {
        if (y.isZero())
          return c[0];
        S.isOdd() && (j = j.multiply(y).mod(U)), S = S.divide(2), y = y.square().mod(U);
      }
      return j;
    }, w.prototype.modPow = d.prototype.modPow;
    function _(S, U) {
      if (S.length !== U.length)
        return S.length > U.length ? 1 : -1;
      for (var j = S.length - 1; j >= 0; j--)
        if (S[j] !== U[j])
          return S[j] > U[j] ? 1 : -1;
      return 0;
    }
    d.prototype.compareAbs = function(S) {
      var U = ye(S), j = this.value, y = U.value;
      return U.isSmall ? 1 : _(j, y);
    }, w.prototype.compareAbs = function(S) {
      var U = ye(S), j = Math.abs(this.value), y = U.value;
      return U.isSmall ? (y = Math.abs(y), j === y ? 0 : j > y ? 1 : -1) : -1;
    }, d.prototype.compare = function(S) {
      if (S === 1 / 0)
        return -1;
      if (S === -1 / 0)
        return 1;
      var U = ye(S), j = this.value, y = U.value;
      return this.sign !== U.sign ? U.sign ? 1 : -1 : U.isSmall ? this.sign ? -1 : 1 : _(j, y) * (this.sign ? -1 : 1);
    }, d.prototype.compareTo = d.prototype.compare, w.prototype.compare = function(S) {
      if (S === 1 / 0)
        return -1;
      if (S === -1 / 0)
        return 1;
      var U = ye(S), j = this.value, y = U.value;
      return U.isSmall ? j == y ? 0 : j > y ? 1 : -1 : j < 0 !== U.sign ? j < 0 ? -1 : 1 : j < 0 ? 1 : -1;
    }, w.prototype.compareTo = w.prototype.compare, d.prototype.equals = function(S) {
      return this.compare(S) === 0;
    }, w.prototype.eq = w.prototype.equals = d.prototype.eq = d.prototype.equals, d.prototype.notEquals = function(S) {
      return this.compare(S) !== 0;
    }, w.prototype.neq = w.prototype.notEquals = d.prototype.neq = d.prototype.notEquals, d.prototype.greater = function(S) {
      return this.compare(S) > 0;
    }, w.prototype.gt = w.prototype.greater = d.prototype.gt = d.prototype.greater, d.prototype.lesser = function(S) {
      return this.compare(S) < 0;
    }, w.prototype.lt = w.prototype.lesser = d.prototype.lt = d.prototype.lesser, d.prototype.greaterOrEquals = function(S) {
      return this.compare(S) >= 0;
    }, w.prototype.geq = w.prototype.greaterOrEquals = d.prototype.geq = d.prototype.greaterOrEquals, d.prototype.lesserOrEquals = function(S) {
      return this.compare(S) <= 0;
    }, w.prototype.leq = w.prototype.lesserOrEquals = d.prototype.leq = d.prototype.lesserOrEquals, d.prototype.isEven = function() {
      return (this.value[0] & 1) === 0;
    }, w.prototype.isEven = function() {
      return (this.value & 1) === 0;
    }, d.prototype.isOdd = function() {
      return (this.value[0] & 1) === 1;
    }, w.prototype.isOdd = function() {
      return (this.value & 1) === 1;
    }, d.prototype.isPositive = function() {
      return !this.sign;
    }, w.prototype.isPositive = function() {
      return this.value > 0;
    }, d.prototype.isNegative = function() {
      return this.sign;
    }, w.prototype.isNegative = function() {
      return this.value < 0;
    }, d.prototype.isUnit = function() {
      return !1;
    }, w.prototype.isUnit = function() {
      return Math.abs(this.value) === 1;
    }, d.prototype.isZero = function() {
      return !1;
    }, w.prototype.isZero = function() {
      return this.value === 0;
    }, d.prototype.isDivisibleBy = function(S) {
      var U = ye(S), j = U.value;
      return j === 0 ? !1 : j === 1 ? !0 : j === 2 ? this.isEven() : this.mod(U).equals(c[0]);
    }, w.prototype.isDivisibleBy = d.prototype.isDivisibleBy;
    function R(S) {
      var U = S.abs();
      if (U.isUnit())
        return !1;
      if (U.equals(2) || U.equals(3) || U.equals(5))
        return !0;
      if (U.isEven() || U.isDivisibleBy(3) || U.isDivisibleBy(5))
        return !1;
      if (U.lesser(49))
        return !0;
    }
    function G(S, U) {
      for (var j = S.prev(), y = j, u = 0, l, x, D; y.isEven(); )
        y = y.divide(2), u++;
      e:
        for (x = 0; x < U.length; x++)
          if (!S.lesser(U[x]) && (D = t(U[x]).modPow(y, S), !(D.equals(c[1]) || D.equals(j)))) {
            for (l = u - 1; l != 0; l--) {
              if (D = D.square().mod(S), D.isUnit())
                return !1;
              if (D.equals(j))
                continue e;
            }
            return !1;
          }
      return !0;
    }
    d.prototype.isPrime = function(S) {
      var U = R(this);
      if (U !== r)
        return U;
      var j = this.abs(), y = j.bitLength();
      if (y <= 64)
        return G(j, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);
      for (var u = Math.log(2) * y, l = Math.ceil(S === !0 ? 2 * Math.pow(u, 2) : u), x = [], D = 0; D < l; D++)
        x.push(t(D + 2));
      return G(j, x);
    }, w.prototype.isPrime = d.prototype.isPrime, d.prototype.isProbablePrime = function(S) {
      var U = R(this);
      if (U !== r)
        return U;
      for (var j = this.abs(), y = S === r ? 5 : S, u = [], l = 0; l < y; l++)
        u.push(t.randBetween(2, j.minus(2)));
      return G(j, u);
    }, w.prototype.isProbablePrime = d.prototype.isProbablePrime, d.prototype.modInv = function(S) {
      for (var U = t.zero, j = t.one, y = ye(S), u = this.abs(), l, x, D; !u.equals(t.zero); )
        l = y.divide(u), x = U, D = y, U = j, y = u, j = x.subtract(l.multiply(j)), u = D.subtract(l.multiply(u));
      if (!y.equals(1))
        throw new Error(this.toString() + " and " + S.toString() + " are not co-prime");
      return U.compare(0) === -1 && (U = U.add(S)), this.isNegative() ? U.negate() : U;
    }, w.prototype.modInv = d.prototype.modInv, d.prototype.next = function() {
      var S = this.value;
      return this.sign ? z(S, 1, this.sign) : new d(F(S, 1), this.sign);
    }, w.prototype.next = function() {
      var S = this.value;
      return S + 1 < o ? new w(S + 1) : new d(s, !1);
    }, d.prototype.prev = function() {
      var S = this.value;
      return this.sign ? new d(F(S, 1), !0) : z(S, 1, this.sign);
    }, w.prototype.prev = function() {
      var S = this.value;
      return S - 1 > -o ? new w(S - 1) : new d(s, !0);
    };
    for (var P = [1]; 2 * P[P.length - 1] <= n; )
      P.push(2 * P[P.length - 1]);
    var p = P.length, H = P[p - 1];
    function oe(S) {
      return (typeof S == "number" || typeof S == "string") && +Math.abs(S) <= n || S instanceof d && S.value.length <= 1;
    }
    d.prototype.shiftLeft = function(S) {
      if (!oe(S))
        throw new Error(String(S) + " is too large for shifting.");
      if (S = +S, S < 0)
        return this.shiftRight(-S);
      var U = this;
      if (U.isZero())
        return U;
      for (; S >= p; )
        U = U.multiply(H), S -= p - 1;
      return U.multiply(P[S]);
    }, w.prototype.shiftLeft = d.prototype.shiftLeft, d.prototype.shiftRight = function(S) {
      var U;
      if (!oe(S))
        throw new Error(String(S) + " is too large for shifting.");
      if (S = +S, S < 0)
        return this.shiftLeft(-S);
      for (var j = this; S >= p; ) {
        if (j.isZero() || j.isNegative() && j.isUnit())
          return j;
        U = m(j, H), j = U[1].isNegative() ? U[0].prev() : U[0], S -= p - 1;
      }
      return U = m(j, P[S]), U[1].isNegative() ? U[0].prev() : U[0];
    }, w.prototype.shiftRight = d.prototype.shiftRight;
    function ne(S, U, j) {
      U = ye(U);
      for (var y = S.isNegative(), u = U.isNegative(), l = y ? S.not() : S, x = u ? U.not() : U, D = 0, K = 0, J = null, ce = null, se = []; !l.isZero() || !x.isZero(); )
        J = m(l, H), D = J[1].toJSNumber(), y && (D = H - 1 - D), ce = m(x, H), K = ce[1].toJSNumber(), u && (K = H - 1 - K), l = J[0], x = ce[0], se.push(j(D, K));
      for (var fe = j(y ? 1 : 0, u ? 1 : 0) !== 0 ? t(-1) : t(0), Te = se.length - 1; Te >= 0; Te -= 1)
        fe = fe.multiply(H).add(t(se[Te]));
      return fe;
    }
    d.prototype.not = function() {
      return this.negate().prev();
    }, w.prototype.not = d.prototype.not, d.prototype.and = function(S) {
      return ne(this, S, function(U, j) {
        return U & j;
      });
    }, w.prototype.and = d.prototype.and, d.prototype.or = function(S) {
      return ne(this, S, function(U, j) {
        return U | j;
      });
    }, w.prototype.or = d.prototype.or, d.prototype.xor = function(S) {
      return ne(this, S, function(U, j) {
        return U ^ j;
      });
    }, w.prototype.xor = d.prototype.xor;
    var V = 1 << 30, Y = (n & -n) * (n & -n) | V;
    function Q(S) {
      var U = S.value, j = typeof U == "number" ? U | V : U[0] + U[1] * n | Y;
      return j & -j;
    }
    function ie(S, U) {
      if (U.compareTo(S) <= 0) {
        var j = ie(S, U.square(U)), y = j.p, u = j.e, l = y.multiply(U);
        return l.compareTo(S) <= 0 ? { p: l, e: u * 2 + 1 } : { p: y, e: u * 2 };
      }
      return { p: t(1), e: 0 };
    }
    d.prototype.bitLength = function() {
      var S = this;
      return S.compareTo(t(0)) < 0 && (S = S.negate().subtract(t(1))), S.compareTo(t(0)) === 0 ? t(0) : t(ie(S, t(2)).e).add(t(1));
    }, w.prototype.bitLength = d.prototype.bitLength;
    function de(S, U) {
      return S = ye(S), U = ye(U), S.greater(U) ? S : U;
    }
    function L(S, U) {
      return S = ye(S), U = ye(U), S.lesser(U) ? S : U;
    }
    function $(S, U) {
      if (S = ye(S).abs(), U = ye(U).abs(), S.equals(U))
        return S;
      if (S.isZero())
        return U;
      if (U.isZero())
        return S;
      for (var j = c[1], y, u; S.isEven() && U.isEven(); )
        y = Math.min(Q(S), Q(U)), S = S.divide(y), U = U.divide(y), j = j.multiply(y);
      for (; S.isEven(); )
        S = S.divide(Q(S));
      do {
        for (; U.isEven(); )
          U = U.divide(Q(U));
        S.greater(U) && (u = U, U = S, S = u), U = U.subtract(S);
      } while (!U.isZero());
      return j.isUnit() ? S : S.multiply(j);
    }
    function ee(S, U) {
      return S = ye(S).abs(), U = ye(U).abs(), S.divide($(S, U)).multiply(U);
    }
    function re(S, U) {
      S = ye(S), U = ye(U);
      var j = L(S, U), y = de(S, U), u = y.subtract(j).add(1);
      if (u.isSmall)
        return j.add(Math.floor(Math.random() * u));
      for (var l = u.value.length - 1, x = [], D = !0, K = l; K >= 0; K--) {
        var J = D ? u.value[K] : n, ce = M(Math.random() * J);
        x.unshift(ce), ce < J && (D = !1);
      }
      return x = N(x), j.add(typeof x == "number" ? new w(x) : new d(x, !1));
    }
    var ae = function(S, U) {
      for (var j = S.length, y, u = Math.abs(U), y = 0; y < j; y++) {
        var l = S[y].toLowerCase();
        if (l !== "-" && /[a-z0-9]/.test(l)) {
          if (/[0-9]/.test(l) && +l >= u) {
            if (l === "1" && u === 1)
              continue;
            throw new Error(l + " is not a valid digit in base " + U + ".");
          } else if (l.charCodeAt(0) - 87 >= u)
            throw new Error(l + " is not a valid digit in base " + U + ".");
        }
      }
      if (2 <= U && U <= 36 && j <= a / Math.log(U)) {
        var x = parseInt(S, U);
        if (isNaN(x))
          throw new Error(l + " is not a valid digit in base " + U + ".");
        return new w(parseInt(S, U));
      }
      U = ye(U);
      var D = [], K = S[0] === "-";
      for (y = K ? 1 : 0; y < S.length; y++) {
        var l = S[y].toLowerCase(), J = l.charCodeAt(0);
        if (48 <= J && J <= 57)
          D.push(ye(l));
        else if (97 <= J && J <= 122)
          D.push(ye(l.charCodeAt(0) - 87));
        else if (l === "<") {
          var ce = y;
          do
            y++;
          while (S[y] !== ">");
          D.push(ye(S.slice(ce + 1, y)));
        } else
          throw new Error(l + " is not a valid character");
      }
      return me(D, U, K);
    };
    function me(S, U, j) {
      var y = c[0], u = c[1], l;
      for (l = S.length - 1; l >= 0; l--)
        y = y.add(S[l].times(u)), u = u.times(U);
      return j ? y.negate() : y;
    }
    function ge(S) {
      return S <= 35 ? "0123456789abcdefghijklmnopqrstuvwxyz".charAt(S) : "<" + S + ">";
    }
    function Re(S, U) {
      if (U = t(U), U.isZero()) {
        if (S.isZero())
          return { value: [0], isNegative: !1 };
        throw new Error("Cannot convert nonzero numbers to base 0.");
      }
      if (U.equals(-1)) {
        if (S.isZero())
          return { value: [0], isNegative: !1 };
        if (S.isNegative())
          return {
            value: [].concat.apply(
              [],
              Array.apply(null, Array(-S)).map(Array.prototype.valueOf, [1, 0])
            ),
            isNegative: !1
          };
        var j = Array.apply(null, Array(+S - 1)).map(Array.prototype.valueOf, [0, 1]);
        return j.unshift([1]), {
          value: [].concat.apply([], j),
          isNegative: !1
        };
      }
      var y = !1;
      if (S.isNegative() && U.isPositive() && (y = !0, S = S.abs()), U.equals(1))
        return S.isZero() ? { value: [0], isNegative: !1 } : {
          value: Array.apply(null, Array(+S)).map(Number.prototype.valueOf, 1),
          isNegative: y
        };
      for (var u = [], l = S, x; l.isNegative() || l.compareAbs(U) >= 0; ) {
        x = l.divmod(U), l = x.quotient;
        var D = x.remainder;
        D.isNegative() && (D = U.minus(D).abs(), l = l.next()), u.push(D.toJSNumber());
      }
      return u.push(l.toJSNumber()), { value: u.reverse(), isNegative: y };
    }
    function lr(S, U) {
      var j = Re(S, U);
      return (j.isNegative ? "-" : "") + j.value.map(ge).join("");
    }
    d.prototype.toArray = function(S) {
      return Re(this, S);
    }, w.prototype.toArray = function(S) {
      return Re(this, S);
    }, d.prototype.toString = function(S) {
      if (S === r && (S = 10), S !== 10)
        return lr(this, S);
      for (var U = this.value, j = U.length, y = String(U[--j]), u = "0000000", l; --j >= 0; )
        l = String(U[j]), y += u.slice(l.length) + l;
      var x = this.sign ? "-" : "";
      return x + y;
    }, w.prototype.toString = function(S) {
      return S === r && (S = 10), S != 10 ? lr(this, S) : String(this.value);
    }, d.prototype.toJSON = w.prototype.toJSON = function() {
      return this.toString();
    }, d.prototype.valueOf = function() {
      return parseInt(this.toString(), 10);
    }, d.prototype.toJSNumber = d.prototype.valueOf, w.prototype.valueOf = function() {
      return this.value;
    }, w.prototype.toJSNumber = w.prototype.valueOf;
    function Le(S) {
      if (g(+S)) {
        var U = +S;
        if (U === M(U))
          return new w(U);
        throw new Error("Invalid integer: " + S);
      }
      var j = S[0] === "-";
      j && (S = S.slice(1));
      var y = S.split(/e/i);
      if (y.length > 2)
        throw new Error("Invalid integer: " + y.join("e"));
      if (y.length === 2) {
        var u = y[1];
        if (u[0] === "+" && (u = u.slice(1)), u = +u, u !== M(u) || !g(u))
          throw new Error("Invalid integer: " + u + " is not a valid exponent.");
        var l = y[0], x = l.indexOf(".");
        if (x >= 0 && (u -= l.length - x - 1, l = l.slice(0, x) + l.slice(x + 1)), u < 0)
          throw new Error("Cannot include negative exponent part for integers");
        l += new Array(u + 1).join("0"), S = l;
      }
      var D = /^([0-9][0-9]*)$/.test(S);
      if (!D)
        throw new Error("Invalid integer: " + S);
      for (var K = [], J = S.length, ce = i, se = J - ce; J > 0; )
        K.push(+S.slice(se, J)), se -= ce, se < 0 && (se = 0), J -= ce;
      return B(K), new d(K, j);
    }
    function De(S) {
      if (g(S)) {
        if (S !== M(S))
          throw new Error(S + " is not an integer.");
        return new w(S);
      }
      return Le(S.toString());
    }
    function ye(S) {
      return typeof S == "number" ? De(S) : typeof S == "string" ? Le(S) : S;
    }
    for (var Oe = 0; Oe < 1e3; Oe++)
      c[Oe] = new w(Oe), Oe > 0 && (c[-Oe] = new w(-Oe));
    return c.one = c[1], c.zero = c[0], c.minusOne = c[-1], c.max = de, c.min = L, c.gcd = $, c.lcm = ee, c.isInstance = function(S) {
      return S instanceof d || S instanceof w;
    }, c.randBetween = re, c.fromArray = function(S, U, j) {
      return me(S.map(ye), ye(U || 10), j);
    }, c;
  }();
  e.hasOwnProperty("exports") && (e.exports = t);
})(Uw);
var a5 = Uw.exports, ep = Hl.validate, f5 = function(e, t, r, n) {
  for (var i = n ? Math.floor(e.length * t / r) : Math.ceil(e.length * t / r), o = (1 << r) - 1, s = new Uint8Array(i), a = 0, c = 0, d = 0, w = 0; w < e.length; ++w) {
    var g = e[w];
    for (ep(0 <= g && g >> t === 0, "Invalid value: " + g + "."), c = c << t | g, d += t; d >= r; )
      d -= r, s[a] = c >> d & o, ++a;
  }
  return n ? ep(
    d < t && (c << r - d & o) === 0,
    "Input cannot be converted to " + r + " bits without padding, but strict mode was used."
  ) : d > 0 && (s[a] = c << r - d & o, ++a), s;
};
/**
 * @license
 * https://github.com/ealmansi/cashaddrjs
 * Copyright (c) 2017-2020 Emilio Almansi
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */
var Cw = s5, c5 = a5, Hw = f5, Lw = Hl, wi = Lw.validate;
function u5(e, t, r) {
  wi(typeof e == "string" && d5(e), "Invalid prefix: " + e + "."), wi(typeof t == "string", "Invalid type: " + t + "."), wi(r instanceof Uint8Array, "Invalid hash: " + r + ".");
  var n = li(Dw(e), new Uint8Array(1)), i = g5(t) + w5(r), o = b5(li(new Uint8Array([i]), r)), s = li(li(n, o), new Uint8Array(8)), a = li(o, p5($w(s)));
  return e + ":" + Cw.encode(a);
}
function h5(e) {
  wi(typeof e == "string" && Fw(e), "Invalid address: " + e + ".");
  var t = e.toLowerCase().split(":");
  wi(t.length === 2, "Missing prefix: " + e + ".");
  var r = t[0], n = Cw.decode(t[1]);
  wi(E5(r, n), "Invalid checksum: " + e + ".");
  var i = m5(n.subarray(0, -8)), o = i[0], s = i.subarray(1);
  wi(v5(o) === s.length * 8, "Invalid hash size: " + e + ".");
  var a = y5(o);
  return {
    prefix: r,
    type: a,
    hash: s
  };
}
var Mf = Lw.ValidationError, l5 = ["bitcoincash", "bchtest", "bchreg"];
function d5(e) {
  return Fw(e) && l5.indexOf(e.toLowerCase()) !== -1;
}
function Dw(e) {
  for (var t = new Uint8Array(e.length), r = 0; r < e.length; ++r)
    t[r] = e[r].charCodeAt(0) & 31;
  return t;
}
function p5(e) {
  for (var t = new Uint8Array(8), r = 0; r < 8; ++r)
    t[7 - r] = e.and(31).toJSNumber(), e = e.shiftRight(5);
  return t;
}
function g5(e) {
  switch (e) {
    case "P2PKH":
      return 0;
    case "P2SH":
      return 8;
    default:
      throw new Mf("Invalid type: " + e + ".");
  }
}
function y5(e) {
  switch (e & 120) {
    case 0:
      return "P2PKH";
    case 8:
      return "P2SH";
    default:
      throw new Mf("Invalid address type in version byte: " + e + ".");
  }
}
function w5(e) {
  switch (e.length * 8) {
    case 160:
      return 0;
    case 192:
      return 1;
    case 224:
      return 2;
    case 256:
      return 3;
    case 320:
      return 4;
    case 384:
      return 5;
    case 448:
      return 6;
    case 512:
      return 7;
    default:
      throw new Mf("Invalid hash size: " + e.length + ".");
  }
}
function v5(e) {
  switch (e & 7) {
    case 0:
      return 160;
    case 1:
      return 192;
    case 2:
      return 224;
    case 3:
      return 256;
    case 4:
      return 320;
    case 5:
      return 384;
    case 6:
      return 448;
    case 7:
      return 512;
  }
}
function b5(e) {
  return Hw(e, 8, 5);
}
function m5(e) {
  return Hw(e, 5, 8, !0);
}
function li(e, t) {
  var r = new Uint8Array(e.length + t.length);
  return r.set(e), r.set(t, e.length), r;
}
function $w(e) {
  for (var t = [656907472481, 522768456162, 1044723512260, 748107326120, 130178868336], r = c5(1), n = 0; n < e.length; ++n) {
    var i = e[n], o = r.shiftRight(35);
    r = r.and(34359738367).shiftLeft(5).xor(i);
    for (var s = 0; s < t.length; ++s)
      o.shiftRight(s).and(1).equals(1) && (r = r.xor(t[s]));
  }
  return r.xor(1);
}
function E5(e, t) {
  var r = li(Dw(e), new Uint8Array(1)), n = li(r, t);
  return $w(n).equals(0);
}
function Fw(e) {
  return e === e.toLowerCase() || e === e.toUpperCase();
}
var _5 = {
  encode: u5,
  decode: h5,
  ValidationError: Mf
}, Kw = {}, Uf = {};
Uf.byteLength = I5;
Uf.toByteArray = A5;
Uf.fromByteArray = P5;
var Qr = [], mr = [], S5 = typeof Uint8Array < "u" ? Uint8Array : Array, iu = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var eo = 0, x5 = iu.length; eo < x5; ++eo)
  Qr[eo] = iu[eo], mr[iu.charCodeAt(eo)] = eo;
mr["-".charCodeAt(0)] = 62;
mr["_".charCodeAt(0)] = 63;
function Gw(e) {
  var t = e.length;
  if (t % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var r = e.indexOf("=");
  r === -1 && (r = t);
  var n = r === t ? 0 : 4 - r % 4;
  return [r, n];
}
function I5(e) {
  var t = Gw(e), r = t[0], n = t[1];
  return (r + n) * 3 / 4 - n;
}
function T5(e, t, r) {
  return (t + r) * 3 / 4 - r;
}
function A5(e) {
  var t, r = Gw(e), n = r[0], i = r[1], o = new S5(T5(e, n, i)), s = 0, a = i > 0 ? n - 4 : n, c;
  for (c = 0; c < a; c += 4)
    t = mr[e.charCodeAt(c)] << 18 | mr[e.charCodeAt(c + 1)] << 12 | mr[e.charCodeAt(c + 2)] << 6 | mr[e.charCodeAt(c + 3)], o[s++] = t >> 16 & 255, o[s++] = t >> 8 & 255, o[s++] = t & 255;
  return i === 2 && (t = mr[e.charCodeAt(c)] << 2 | mr[e.charCodeAt(c + 1)] >> 4, o[s++] = t & 255), i === 1 && (t = mr[e.charCodeAt(c)] << 10 | mr[e.charCodeAt(c + 1)] << 4 | mr[e.charCodeAt(c + 2)] >> 2, o[s++] = t >> 8 & 255, o[s++] = t & 255), o;
}
function O5(e) {
  return Qr[e >> 18 & 63] + Qr[e >> 12 & 63] + Qr[e >> 6 & 63] + Qr[e & 63];
}
function B5(e, t, r) {
  for (var n, i = [], o = t; o < r; o += 3)
    n = (e[o] << 16 & 16711680) + (e[o + 1] << 8 & 65280) + (e[o + 2] & 255), i.push(O5(n));
  return i.join("");
}
function P5(e) {
  for (var t, r = e.length, n = r % 3, i = [], o = 16383, s = 0, a = r - n; s < a; s += o)
    i.push(B5(e, s, s + o > a ? a : s + o));
  return n === 1 ? (t = e[r - 1], i.push(
    Qr[t >> 2] + Qr[t << 4 & 63] + "=="
  )) : n === 2 && (t = (e[r - 2] << 8) + e[r - 1], i.push(
    Qr[t >> 10] + Qr[t >> 4 & 63] + Qr[t << 2 & 63] + "="
  )), i.join("");
}
var Ll = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
Ll.read = function(e, t, r, n, i) {
  var o, s, a = i * 8 - n - 1, c = (1 << a) - 1, d = c >> 1, w = -7, g = r ? i - 1 : 0, O = r ? -1 : 1, N = e[t + g];
  for (g += O, o = N & (1 << -w) - 1, N >>= -w, w += a; w > 0; o = o * 256 + e[t + g], g += O, w -= 8)
    ;
  for (s = o & (1 << -w) - 1, o >>= -w, w += n; w > 0; s = s * 256 + e[t + g], g += O, w -= 8)
    ;
  if (o === 0)
    o = 1 - d;
  else {
    if (o === c)
      return s ? NaN : (N ? -1 : 1) * (1 / 0);
    s = s + Math.pow(2, n), o = o - d;
  }
  return (N ? -1 : 1) * s * Math.pow(2, o - n);
};
Ll.write = function(e, t, r, n, i, o) {
  var s, a, c, d = o * 8 - i - 1, w = (1 << d) - 1, g = w >> 1, O = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, N = n ? 0 : o - 1, B = n ? 1 : -1, I = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
  for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = w) : (s = Math.floor(Math.log(t) / Math.LN2), t * (c = Math.pow(2, -s)) < 1 && (s--, c *= 2), s + g >= 1 ? t += O / c : t += O * Math.pow(2, 1 - g), t * c >= 2 && (s++, c /= 2), s + g >= w ? (a = 0, s = w) : s + g >= 1 ? (a = (t * c - 1) * Math.pow(2, i), s = s + g) : (a = t * Math.pow(2, g - 1) * Math.pow(2, i), s = 0)); i >= 8; e[r + N] = a & 255, N += B, a /= 256, i -= 8)
    ;
  for (s = s << i | a, d += i; d > 0; e[r + N] = s & 255, N += B, s /= 256, d -= 8)
    ;
  e[r + N - B] |= I * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(e) {
  const t = Uf, r = Ll, n = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  e.Buffer = a, e.SlowBuffer = k, e.INSPECT_MAX_BYTES = 50;
  const i = 2147483647;
  e.kMaxLength = i, a.TYPED_ARRAY_SUPPORT = o(), !a.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error(
    "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
  );
  function o() {
    try {
      const y = new Uint8Array(1), u = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(u, Uint8Array.prototype), Object.setPrototypeOf(y, u), y.foo() === 42;
    } catch {
      return !1;
    }
  }
  Object.defineProperty(a.prototype, "parent", {
    enumerable: !0,
    get: function() {
      if (a.isBuffer(this))
        return this.buffer;
    }
  }), Object.defineProperty(a.prototype, "offset", {
    enumerable: !0,
    get: function() {
      if (a.isBuffer(this))
        return this.byteOffset;
    }
  });
  function s(y) {
    if (y > i)
      throw new RangeError('The value "' + y + '" is invalid for option "size"');
    const u = new Uint8Array(y);
    return Object.setPrototypeOf(u, a.prototype), u;
  }
  function a(y, u, l) {
    if (typeof y == "number") {
      if (typeof u == "string")
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      return g(y);
    }
    return c(y, u, l);
  }
  a.poolSize = 8192;
  function c(y, u, l) {
    if (typeof y == "string")
      return O(y, u);
    if (ArrayBuffer.isView(y))
      return B(y);
    if (y == null)
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof y
      );
    if (ye(y, ArrayBuffer) || y && ye(y.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (ye(y, SharedArrayBuffer) || y && ye(y.buffer, SharedArrayBuffer)))
      return I(y, u, l);
    if (typeof y == "number")
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    const x = y.valueOf && y.valueOf();
    if (x != null && x !== y)
      return a.from(x, u, l);
    const D = M(y);
    if (D)
      return D;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof y[Symbol.toPrimitive] == "function")
      return a.from(y[Symbol.toPrimitive]("string"), u, l);
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof y
    );
  }
  a.from = function(y, u, l) {
    return c(y, u, l);
  }, Object.setPrototypeOf(a.prototype, Uint8Array.prototype), Object.setPrototypeOf(a, Uint8Array);
  function d(y) {
    if (typeof y != "number")
      throw new TypeError('"size" argument must be of type number');
    if (y < 0)
      throw new RangeError('The value "' + y + '" is invalid for option "size"');
  }
  function w(y, u, l) {
    return d(y), y <= 0 ? s(y) : u !== void 0 ? typeof l == "string" ? s(y).fill(u, l) : s(y).fill(u) : s(y);
  }
  a.alloc = function(y, u, l) {
    return w(y, u, l);
  };
  function g(y) {
    return d(y), s(y < 0 ? 0 : T(y) | 0);
  }
  a.allocUnsafe = function(y) {
    return g(y);
  }, a.allocUnsafeSlow = function(y) {
    return g(y);
  };
  function O(y, u) {
    if ((typeof u != "string" || u === "") && (u = "utf8"), !a.isEncoding(u))
      throw new TypeError("Unknown encoding: " + u);
    const l = F(y, u) | 0;
    let x = s(l);
    const D = x.write(y, u);
    return D !== l && (x = x.slice(0, D)), x;
  }
  function N(y) {
    const u = y.length < 0 ? 0 : T(y.length) | 0, l = s(u);
    for (let x = 0; x < u; x += 1)
      l[x] = y[x] & 255;
    return l;
  }
  function B(y) {
    if (ye(y, Uint8Array)) {
      const u = new Uint8Array(y);
      return I(u.buffer, u.byteOffset, u.byteLength);
    }
    return N(y);
  }
  function I(y, u, l) {
    if (u < 0 || y.byteLength < u)
      throw new RangeError('"offset" is outside of buffer bounds');
    if (y.byteLength < u + (l || 0))
      throw new RangeError('"length" is outside of buffer bounds');
    let x;
    return u === void 0 && l === void 0 ? x = new Uint8Array(y) : l === void 0 ? x = new Uint8Array(y, u) : x = new Uint8Array(y, u, l), Object.setPrototypeOf(x, a.prototype), x;
  }
  function M(y) {
    if (a.isBuffer(y)) {
      const u = T(y.length) | 0, l = s(u);
      return l.length === 0 || y.copy(l, 0, 0, u), l;
    }
    if (y.length !== void 0)
      return typeof y.length != "number" || Oe(y.length) ? s(0) : N(y);
    if (y.type === "Buffer" && Array.isArray(y.data))
      return N(y.data);
  }
  function T(y) {
    if (y >= i)
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + i.toString(16) + " bytes");
    return y | 0;
  }
  function k(y) {
    return +y != y && (y = 0), a.alloc(+y);
  }
  a.isBuffer = function(u) {
    return u != null && u._isBuffer === !0 && u !== a.prototype;
  }, a.compare = function(u, l) {
    if (ye(u, Uint8Array) && (u = a.from(u, u.offset, u.byteLength)), ye(l, Uint8Array) && (l = a.from(l, l.offset, l.byteLength)), !a.isBuffer(u) || !a.isBuffer(l))
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    if (u === l)
      return 0;
    let x = u.length, D = l.length;
    for (let K = 0, J = Math.min(x, D); K < J; ++K)
      if (u[K] !== l[K]) {
        x = u[K], D = l[K];
        break;
      }
    return x < D ? -1 : D < x ? 1 : 0;
  }, a.isEncoding = function(u) {
    switch (String(u).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return !0;
      default:
        return !1;
    }
  }, a.concat = function(u, l) {
    if (!Array.isArray(u))
      throw new TypeError('"list" argument must be an Array of Buffers');
    if (u.length === 0)
      return a.alloc(0);
    let x;
    if (l === void 0)
      for (l = 0, x = 0; x < u.length; ++x)
        l += u[x].length;
    const D = a.allocUnsafe(l);
    let K = 0;
    for (x = 0; x < u.length; ++x) {
      let J = u[x];
      if (ye(J, Uint8Array))
        K + J.length > D.length ? (a.isBuffer(J) || (J = a.from(J)), J.copy(D, K)) : Uint8Array.prototype.set.call(
          D,
          J,
          K
        );
      else if (a.isBuffer(J))
        J.copy(D, K);
      else
        throw new TypeError('"list" argument must be an Array of Buffers');
      K += J.length;
    }
    return D;
  };
  function F(y, u) {
    if (a.isBuffer(y))
      return y.length;
    if (ArrayBuffer.isView(y) || ye(y, ArrayBuffer))
      return y.byteLength;
    if (typeof y != "string")
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof y
      );
    const l = y.length, x = arguments.length > 2 && arguments[2] === !0;
    if (!x && l === 0)
      return 0;
    let D = !1;
    for (; ; )
      switch (u) {
        case "ascii":
        case "latin1":
        case "binary":
          return l;
        case "utf8":
        case "utf-8":
          return ge(y).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return l * 2;
        case "hex":
          return l >>> 1;
        case "base64":
          return Le(y).length;
        default:
          if (D)
            return x ? -1 : ge(y).length;
          u = ("" + u).toLowerCase(), D = !0;
      }
  }
  a.byteLength = F;
  function X(y, u, l) {
    let x = !1;
    if ((u === void 0 || u < 0) && (u = 0), u > this.length || ((l === void 0 || l > this.length) && (l = this.length), l <= 0) || (l >>>= 0, u >>>= 0, l <= u))
      return "";
    for (y || (y = "utf8"); ; )
      switch (y) {
        case "hex":
          return R(this, u, l);
        case "utf8":
        case "utf-8":
          return f(this, u, l);
        case "ascii":
          return m(this, u, l);
        case "latin1":
        case "binary":
          return _(this, u, l);
        case "base64":
          return E(this, u, l);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return G(this, u, l);
        default:
          if (x)
            throw new TypeError("Unknown encoding: " + y);
          y = (y + "").toLowerCase(), x = !0;
      }
  }
  a.prototype._isBuffer = !0;
  function Z(y, u, l) {
    const x = y[u];
    y[u] = y[l], y[l] = x;
  }
  a.prototype.swap16 = function() {
    const u = this.length;
    if (u % 2 !== 0)
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let l = 0; l < u; l += 2)
      Z(this, l, l + 1);
    return this;
  }, a.prototype.swap32 = function() {
    const u = this.length;
    if (u % 4 !== 0)
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let l = 0; l < u; l += 4)
      Z(this, l, l + 3), Z(this, l + 1, l + 2);
    return this;
  }, a.prototype.swap64 = function() {
    const u = this.length;
    if (u % 8 !== 0)
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let l = 0; l < u; l += 8)
      Z(this, l, l + 7), Z(this, l + 1, l + 6), Z(this, l + 2, l + 5), Z(this, l + 3, l + 4);
    return this;
  }, a.prototype.toString = function() {
    const u = this.length;
    return u === 0 ? "" : arguments.length === 0 ? f(this, 0, u) : X.apply(this, arguments);
  }, a.prototype.toLocaleString = a.prototype.toString, a.prototype.equals = function(u) {
    if (!a.isBuffer(u))
      throw new TypeError("Argument must be a Buffer");
    return this === u ? !0 : a.compare(this, u) === 0;
  }, a.prototype.inspect = function() {
    let u = "";
    const l = e.INSPECT_MAX_BYTES;
    return u = this.toString("hex", 0, l).replace(/(.{2})/g, "$1 ").trim(), this.length > l && (u += " ... "), "<Buffer " + u + ">";
  }, n && (a.prototype[n] = a.prototype.inspect), a.prototype.compare = function(u, l, x, D, K) {
    if (ye(u, Uint8Array) && (u = a.from(u, u.offset, u.byteLength)), !a.isBuffer(u))
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof u
      );
    if (l === void 0 && (l = 0), x === void 0 && (x = u ? u.length : 0), D === void 0 && (D = 0), K === void 0 && (K = this.length), l < 0 || x > u.length || D < 0 || K > this.length)
      throw new RangeError("out of range index");
    if (D >= K && l >= x)
      return 0;
    if (D >= K)
      return -1;
    if (l >= x)
      return 1;
    if (l >>>= 0, x >>>= 0, D >>>= 0, K >>>= 0, this === u)
      return 0;
    let J = K - D, ce = x - l;
    const se = Math.min(J, ce), fe = this.slice(D, K), Te = u.slice(l, x);
    for (let le = 0; le < se; ++le)
      if (fe[le] !== Te[le]) {
        J = fe[le], ce = Te[le];
        break;
      }
    return J < ce ? -1 : ce < J ? 1 : 0;
  };
  function z(y, u, l, x, D) {
    if (y.length === 0)
      return -1;
    if (typeof l == "string" ? (x = l, l = 0) : l > 2147483647 ? l = 2147483647 : l < -2147483648 && (l = -2147483648), l = +l, Oe(l) && (l = D ? 0 : y.length - 1), l < 0 && (l = y.length + l), l >= y.length) {
      if (D)
        return -1;
      l = y.length - 1;
    } else if (l < 0)
      if (D)
        l = 0;
      else
        return -1;
    if (typeof u == "string" && (u = a.from(u, x)), a.isBuffer(u))
      return u.length === 0 ? -1 : te(y, u, l, x, D);
    if (typeof u == "number")
      return u = u & 255, typeof Uint8Array.prototype.indexOf == "function" ? D ? Uint8Array.prototype.indexOf.call(y, u, l) : Uint8Array.prototype.lastIndexOf.call(y, u, l) : te(y, [u], l, x, D);
    throw new TypeError("val must be string, number or Buffer");
  }
  function te(y, u, l, x, D) {
    let K = 1, J = y.length, ce = u.length;
    if (x !== void 0 && (x = String(x).toLowerCase(), x === "ucs2" || x === "ucs-2" || x === "utf16le" || x === "utf-16le")) {
      if (y.length < 2 || u.length < 2)
        return -1;
      K = 2, J /= 2, ce /= 2, l /= 2;
    }
    function se(Te, le) {
      return K === 1 ? Te[le] : Te.readUInt16BE(le * K);
    }
    let fe;
    if (D) {
      let Te = -1;
      for (fe = l; fe < J; fe++)
        if (se(y, fe) === se(u, Te === -1 ? 0 : fe - Te)) {
          if (Te === -1 && (Te = fe), fe - Te + 1 === ce)
            return Te * K;
        } else
          Te !== -1 && (fe -= fe - Te), Te = -1;
    } else
      for (l + ce > J && (l = J - ce), fe = l; fe >= 0; fe--) {
        let Te = !0;
        for (let le = 0; le < ce; le++)
          if (se(y, fe + le) !== se(u, le)) {
            Te = !1;
            break;
          }
        if (Te)
          return fe;
      }
    return -1;
  }
  a.prototype.includes = function(u, l, x) {
    return this.indexOf(u, l, x) !== -1;
  }, a.prototype.indexOf = function(u, l, x) {
    return z(this, u, l, x, !0);
  }, a.prototype.lastIndexOf = function(u, l, x) {
    return z(this, u, l, x, !1);
  };
  function b(y, u, l, x) {
    l = Number(l) || 0;
    const D = y.length - l;
    x ? (x = Number(x), x > D && (x = D)) : x = D;
    const K = u.length;
    x > K / 2 && (x = K / 2);
    let J;
    for (J = 0; J < x; ++J) {
      const ce = parseInt(u.substr(J * 2, 2), 16);
      if (Oe(ce))
        return J;
      y[l + J] = ce;
    }
    return J;
  }
  function A(y, u, l, x) {
    return De(ge(u, y.length - l), y, l, x);
  }
  function C(y, u, l, x) {
    return De(Re(u), y, l, x);
  }
  function q(y, u, l, x) {
    return De(Le(u), y, l, x);
  }
  function W(y, u, l, x) {
    return De(lr(u, y.length - l), y, l, x);
  }
  a.prototype.write = function(u, l, x, D) {
    if (l === void 0)
      D = "utf8", x = this.length, l = 0;
    else if (x === void 0 && typeof l == "string")
      D = l, x = this.length, l = 0;
    else if (isFinite(l))
      l = l >>> 0, isFinite(x) ? (x = x >>> 0, D === void 0 && (D = "utf8")) : (D = x, x = void 0);
    else
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    const K = this.length - l;
    if ((x === void 0 || x > K) && (x = K), u.length > 0 && (x < 0 || l < 0) || l > this.length)
      throw new RangeError("Attempt to write outside buffer bounds");
    D || (D = "utf8");
    let J = !1;
    for (; ; )
      switch (D) {
        case "hex":
          return b(this, u, l, x);
        case "utf8":
        case "utf-8":
          return A(this, u, l, x);
        case "ascii":
        case "latin1":
        case "binary":
          return C(this, u, l, x);
        case "base64":
          return q(this, u, l, x);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return W(this, u, l, x);
        default:
          if (J)
            throw new TypeError("Unknown encoding: " + D);
          D = ("" + D).toLowerCase(), J = !0;
      }
  }, a.prototype.toJSON = function() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function E(y, u, l) {
    return u === 0 && l === y.length ? t.fromByteArray(y) : t.fromByteArray(y.slice(u, l));
  }
  function f(y, u, l) {
    l = Math.min(y.length, l);
    const x = [];
    let D = u;
    for (; D < l; ) {
      const K = y[D];
      let J = null, ce = K > 239 ? 4 : K > 223 ? 3 : K > 191 ? 2 : 1;
      if (D + ce <= l) {
        let se, fe, Te, le;
        switch (ce) {
          case 1:
            K < 128 && (J = K);
            break;
          case 2:
            se = y[D + 1], (se & 192) === 128 && (le = (K & 31) << 6 | se & 63, le > 127 && (J = le));
            break;
          case 3:
            se = y[D + 1], fe = y[D + 2], (se & 192) === 128 && (fe & 192) === 128 && (le = (K & 15) << 12 | (se & 63) << 6 | fe & 63, le > 2047 && (le < 55296 || le > 57343) && (J = le));
            break;
          case 4:
            se = y[D + 1], fe = y[D + 2], Te = y[D + 3], (se & 192) === 128 && (fe & 192) === 128 && (Te & 192) === 128 && (le = (K & 15) << 18 | (se & 63) << 12 | (fe & 63) << 6 | Te & 63, le > 65535 && le < 1114112 && (J = le));
        }
      }
      J === null ? (J = 65533, ce = 1) : J > 65535 && (J -= 65536, x.push(J >>> 10 & 1023 | 55296), J = 56320 | J & 1023), x.push(J), D += ce;
    }
    return v(x);
  }
  const h = 4096;
  function v(y) {
    const u = y.length;
    if (u <= h)
      return String.fromCharCode.apply(String, y);
    let l = "", x = 0;
    for (; x < u; )
      l += String.fromCharCode.apply(
        String,
        y.slice(x, x += h)
      );
    return l;
  }
  function m(y, u, l) {
    let x = "";
    l = Math.min(y.length, l);
    for (let D = u; D < l; ++D)
      x += String.fromCharCode(y[D] & 127);
    return x;
  }
  function _(y, u, l) {
    let x = "";
    l = Math.min(y.length, l);
    for (let D = u; D < l; ++D)
      x += String.fromCharCode(y[D]);
    return x;
  }
  function R(y, u, l) {
    const x = y.length;
    (!u || u < 0) && (u = 0), (!l || l < 0 || l > x) && (l = x);
    let D = "";
    for (let K = u; K < l; ++K)
      D += S[y[K]];
    return D;
  }
  function G(y, u, l) {
    const x = y.slice(u, l);
    let D = "";
    for (let K = 0; K < x.length - 1; K += 2)
      D += String.fromCharCode(x[K] + x[K + 1] * 256);
    return D;
  }
  a.prototype.slice = function(u, l) {
    const x = this.length;
    u = ~~u, l = l === void 0 ? x : ~~l, u < 0 ? (u += x, u < 0 && (u = 0)) : u > x && (u = x), l < 0 ? (l += x, l < 0 && (l = 0)) : l > x && (l = x), l < u && (l = u);
    const D = this.subarray(u, l);
    return Object.setPrototypeOf(D, a.prototype), D;
  };
  function P(y, u, l) {
    if (y % 1 !== 0 || y < 0)
      throw new RangeError("offset is not uint");
    if (y + u > l)
      throw new RangeError("Trying to access beyond buffer length");
  }
  a.prototype.readUintLE = a.prototype.readUIntLE = function(u, l, x) {
    u = u >>> 0, l = l >>> 0, x || P(u, l, this.length);
    let D = this[u], K = 1, J = 0;
    for (; ++J < l && (K *= 256); )
      D += this[u + J] * K;
    return D;
  }, a.prototype.readUintBE = a.prototype.readUIntBE = function(u, l, x) {
    u = u >>> 0, l = l >>> 0, x || P(u, l, this.length);
    let D = this[u + --l], K = 1;
    for (; l > 0 && (K *= 256); )
      D += this[u + --l] * K;
    return D;
  }, a.prototype.readUint8 = a.prototype.readUInt8 = function(u, l) {
    return u = u >>> 0, l || P(u, 1, this.length), this[u];
  }, a.prototype.readUint16LE = a.prototype.readUInt16LE = function(u, l) {
    return u = u >>> 0, l || P(u, 2, this.length), this[u] | this[u + 1] << 8;
  }, a.prototype.readUint16BE = a.prototype.readUInt16BE = function(u, l) {
    return u = u >>> 0, l || P(u, 2, this.length), this[u] << 8 | this[u + 1];
  }, a.prototype.readUint32LE = a.prototype.readUInt32LE = function(u, l) {
    return u = u >>> 0, l || P(u, 4, this.length), (this[u] | this[u + 1] << 8 | this[u + 2] << 16) + this[u + 3] * 16777216;
  }, a.prototype.readUint32BE = a.prototype.readUInt32BE = function(u, l) {
    return u = u >>> 0, l || P(u, 4, this.length), this[u] * 16777216 + (this[u + 1] << 16 | this[u + 2] << 8 | this[u + 3]);
  }, a.prototype.readBigUInt64LE = U(function(u) {
    u = u >>> 0, ee(u, "offset");
    const l = this[u], x = this[u + 7];
    (l === void 0 || x === void 0) && re(u, this.length - 8);
    const D = l + this[++u] * 2 ** 8 + this[++u] * 2 ** 16 + this[++u] * 2 ** 24, K = this[++u] + this[++u] * 2 ** 8 + this[++u] * 2 ** 16 + x * 2 ** 24;
    return BigInt(D) + (BigInt(K) << BigInt(32));
  }), a.prototype.readBigUInt64BE = U(function(u) {
    u = u >>> 0, ee(u, "offset");
    const l = this[u], x = this[u + 7];
    (l === void 0 || x === void 0) && re(u, this.length - 8);
    const D = l * 2 ** 24 + this[++u] * 2 ** 16 + this[++u] * 2 ** 8 + this[++u], K = this[++u] * 2 ** 24 + this[++u] * 2 ** 16 + this[++u] * 2 ** 8 + x;
    return (BigInt(D) << BigInt(32)) + BigInt(K);
  }), a.prototype.readIntLE = function(u, l, x) {
    u = u >>> 0, l = l >>> 0, x || P(u, l, this.length);
    let D = this[u], K = 1, J = 0;
    for (; ++J < l && (K *= 256); )
      D += this[u + J] * K;
    return K *= 128, D >= K && (D -= Math.pow(2, 8 * l)), D;
  }, a.prototype.readIntBE = function(u, l, x) {
    u = u >>> 0, l = l >>> 0, x || P(u, l, this.length);
    let D = l, K = 1, J = this[u + --D];
    for (; D > 0 && (K *= 256); )
      J += this[u + --D] * K;
    return K *= 128, J >= K && (J -= Math.pow(2, 8 * l)), J;
  }, a.prototype.readInt8 = function(u, l) {
    return u = u >>> 0, l || P(u, 1, this.length), this[u] & 128 ? (255 - this[u] + 1) * -1 : this[u];
  }, a.prototype.readInt16LE = function(u, l) {
    u = u >>> 0, l || P(u, 2, this.length);
    const x = this[u] | this[u + 1] << 8;
    return x & 32768 ? x | 4294901760 : x;
  }, a.prototype.readInt16BE = function(u, l) {
    u = u >>> 0, l || P(u, 2, this.length);
    const x = this[u + 1] | this[u] << 8;
    return x & 32768 ? x | 4294901760 : x;
  }, a.prototype.readInt32LE = function(u, l) {
    return u = u >>> 0, l || P(u, 4, this.length), this[u] | this[u + 1] << 8 | this[u + 2] << 16 | this[u + 3] << 24;
  }, a.prototype.readInt32BE = function(u, l) {
    return u = u >>> 0, l || P(u, 4, this.length), this[u] << 24 | this[u + 1] << 16 | this[u + 2] << 8 | this[u + 3];
  }, a.prototype.readBigInt64LE = U(function(u) {
    u = u >>> 0, ee(u, "offset");
    const l = this[u], x = this[u + 7];
    (l === void 0 || x === void 0) && re(u, this.length - 8);
    const D = this[u + 4] + this[u + 5] * 2 ** 8 + this[u + 6] * 2 ** 16 + (x << 24);
    return (BigInt(D) << BigInt(32)) + BigInt(l + this[++u] * 2 ** 8 + this[++u] * 2 ** 16 + this[++u] * 2 ** 24);
  }), a.prototype.readBigInt64BE = U(function(u) {
    u = u >>> 0, ee(u, "offset");
    const l = this[u], x = this[u + 7];
    (l === void 0 || x === void 0) && re(u, this.length - 8);
    const D = (l << 24) + // Overflow
    this[++u] * 2 ** 16 + this[++u] * 2 ** 8 + this[++u];
    return (BigInt(D) << BigInt(32)) + BigInt(this[++u] * 2 ** 24 + this[++u] * 2 ** 16 + this[++u] * 2 ** 8 + x);
  }), a.prototype.readFloatLE = function(u, l) {
    return u = u >>> 0, l || P(u, 4, this.length), r.read(this, u, !0, 23, 4);
  }, a.prototype.readFloatBE = function(u, l) {
    return u = u >>> 0, l || P(u, 4, this.length), r.read(this, u, !1, 23, 4);
  }, a.prototype.readDoubleLE = function(u, l) {
    return u = u >>> 0, l || P(u, 8, this.length), r.read(this, u, !0, 52, 8);
  }, a.prototype.readDoubleBE = function(u, l) {
    return u = u >>> 0, l || P(u, 8, this.length), r.read(this, u, !1, 52, 8);
  };
  function p(y, u, l, x, D, K) {
    if (!a.isBuffer(y))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (u > D || u < K)
      throw new RangeError('"value" argument is out of bounds');
    if (l + x > y.length)
      throw new RangeError("Index out of range");
  }
  a.prototype.writeUintLE = a.prototype.writeUIntLE = function(u, l, x, D) {
    if (u = +u, l = l >>> 0, x = x >>> 0, !D) {
      const ce = Math.pow(2, 8 * x) - 1;
      p(this, u, l, x, ce, 0);
    }
    let K = 1, J = 0;
    for (this[l] = u & 255; ++J < x && (K *= 256); )
      this[l + J] = u / K & 255;
    return l + x;
  }, a.prototype.writeUintBE = a.prototype.writeUIntBE = function(u, l, x, D) {
    if (u = +u, l = l >>> 0, x = x >>> 0, !D) {
      const ce = Math.pow(2, 8 * x) - 1;
      p(this, u, l, x, ce, 0);
    }
    let K = x - 1, J = 1;
    for (this[l + K] = u & 255; --K >= 0 && (J *= 256); )
      this[l + K] = u / J & 255;
    return l + x;
  }, a.prototype.writeUint8 = a.prototype.writeUInt8 = function(u, l, x) {
    return u = +u, l = l >>> 0, x || p(this, u, l, 1, 255, 0), this[l] = u & 255, l + 1;
  }, a.prototype.writeUint16LE = a.prototype.writeUInt16LE = function(u, l, x) {
    return u = +u, l = l >>> 0, x || p(this, u, l, 2, 65535, 0), this[l] = u & 255, this[l + 1] = u >>> 8, l + 2;
  }, a.prototype.writeUint16BE = a.prototype.writeUInt16BE = function(u, l, x) {
    return u = +u, l = l >>> 0, x || p(this, u, l, 2, 65535, 0), this[l] = u >>> 8, this[l + 1] = u & 255, l + 2;
  }, a.prototype.writeUint32LE = a.prototype.writeUInt32LE = function(u, l, x) {
    return u = +u, l = l >>> 0, x || p(this, u, l, 4, 4294967295, 0), this[l + 3] = u >>> 24, this[l + 2] = u >>> 16, this[l + 1] = u >>> 8, this[l] = u & 255, l + 4;
  }, a.prototype.writeUint32BE = a.prototype.writeUInt32BE = function(u, l, x) {
    return u = +u, l = l >>> 0, x || p(this, u, l, 4, 4294967295, 0), this[l] = u >>> 24, this[l + 1] = u >>> 16, this[l + 2] = u >>> 8, this[l + 3] = u & 255, l + 4;
  };
  function H(y, u, l, x, D) {
    $(u, x, D, y, l, 7);
    let K = Number(u & BigInt(4294967295));
    y[l++] = K, K = K >> 8, y[l++] = K, K = K >> 8, y[l++] = K, K = K >> 8, y[l++] = K;
    let J = Number(u >> BigInt(32) & BigInt(4294967295));
    return y[l++] = J, J = J >> 8, y[l++] = J, J = J >> 8, y[l++] = J, J = J >> 8, y[l++] = J, l;
  }
  function oe(y, u, l, x, D) {
    $(u, x, D, y, l, 7);
    let K = Number(u & BigInt(4294967295));
    y[l + 7] = K, K = K >> 8, y[l + 6] = K, K = K >> 8, y[l + 5] = K, K = K >> 8, y[l + 4] = K;
    let J = Number(u >> BigInt(32) & BigInt(4294967295));
    return y[l + 3] = J, J = J >> 8, y[l + 2] = J, J = J >> 8, y[l + 1] = J, J = J >> 8, y[l] = J, l + 8;
  }
  a.prototype.writeBigUInt64LE = U(function(u, l = 0) {
    return H(this, u, l, BigInt(0), BigInt("0xffffffffffffffff"));
  }), a.prototype.writeBigUInt64BE = U(function(u, l = 0) {
    return oe(this, u, l, BigInt(0), BigInt("0xffffffffffffffff"));
  }), a.prototype.writeIntLE = function(u, l, x, D) {
    if (u = +u, l = l >>> 0, !D) {
      const se = Math.pow(2, 8 * x - 1);
      p(this, u, l, x, se - 1, -se);
    }
    let K = 0, J = 1, ce = 0;
    for (this[l] = u & 255; ++K < x && (J *= 256); )
      u < 0 && ce === 0 && this[l + K - 1] !== 0 && (ce = 1), this[l + K] = (u / J >> 0) - ce & 255;
    return l + x;
  }, a.prototype.writeIntBE = function(u, l, x, D) {
    if (u = +u, l = l >>> 0, !D) {
      const se = Math.pow(2, 8 * x - 1);
      p(this, u, l, x, se - 1, -se);
    }
    let K = x - 1, J = 1, ce = 0;
    for (this[l + K] = u & 255; --K >= 0 && (J *= 256); )
      u < 0 && ce === 0 && this[l + K + 1] !== 0 && (ce = 1), this[l + K] = (u / J >> 0) - ce & 255;
    return l + x;
  }, a.prototype.writeInt8 = function(u, l, x) {
    return u = +u, l = l >>> 0, x || p(this, u, l, 1, 127, -128), u < 0 && (u = 255 + u + 1), this[l] = u & 255, l + 1;
  }, a.prototype.writeInt16LE = function(u, l, x) {
    return u = +u, l = l >>> 0, x || p(this, u, l, 2, 32767, -32768), this[l] = u & 255, this[l + 1] = u >>> 8, l + 2;
  }, a.prototype.writeInt16BE = function(u, l, x) {
    return u = +u, l = l >>> 0, x || p(this, u, l, 2, 32767, -32768), this[l] = u >>> 8, this[l + 1] = u & 255, l + 2;
  }, a.prototype.writeInt32LE = function(u, l, x) {
    return u = +u, l = l >>> 0, x || p(this, u, l, 4, 2147483647, -2147483648), this[l] = u & 255, this[l + 1] = u >>> 8, this[l + 2] = u >>> 16, this[l + 3] = u >>> 24, l + 4;
  }, a.prototype.writeInt32BE = function(u, l, x) {
    return u = +u, l = l >>> 0, x || p(this, u, l, 4, 2147483647, -2147483648), u < 0 && (u = 4294967295 + u + 1), this[l] = u >>> 24, this[l + 1] = u >>> 16, this[l + 2] = u >>> 8, this[l + 3] = u & 255, l + 4;
  }, a.prototype.writeBigInt64LE = U(function(u, l = 0) {
    return H(this, u, l, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  }), a.prototype.writeBigInt64BE = U(function(u, l = 0) {
    return oe(this, u, l, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function ne(y, u, l, x, D, K) {
    if (l + x > y.length)
      throw new RangeError("Index out of range");
    if (l < 0)
      throw new RangeError("Index out of range");
  }
  function V(y, u, l, x, D) {
    return u = +u, l = l >>> 0, D || ne(y, u, l, 4), r.write(y, u, l, x, 23, 4), l + 4;
  }
  a.prototype.writeFloatLE = function(u, l, x) {
    return V(this, u, l, !0, x);
  }, a.prototype.writeFloatBE = function(u, l, x) {
    return V(this, u, l, !1, x);
  };
  function Y(y, u, l, x, D) {
    return u = +u, l = l >>> 0, D || ne(y, u, l, 8), r.write(y, u, l, x, 52, 8), l + 8;
  }
  a.prototype.writeDoubleLE = function(u, l, x) {
    return Y(this, u, l, !0, x);
  }, a.prototype.writeDoubleBE = function(u, l, x) {
    return Y(this, u, l, !1, x);
  }, a.prototype.copy = function(u, l, x, D) {
    if (!a.isBuffer(u))
      throw new TypeError("argument should be a Buffer");
    if (x || (x = 0), !D && D !== 0 && (D = this.length), l >= u.length && (l = u.length), l || (l = 0), D > 0 && D < x && (D = x), D === x || u.length === 0 || this.length === 0)
      return 0;
    if (l < 0)
      throw new RangeError("targetStart out of bounds");
    if (x < 0 || x >= this.length)
      throw new RangeError("Index out of range");
    if (D < 0)
      throw new RangeError("sourceEnd out of bounds");
    D > this.length && (D = this.length), u.length - l < D - x && (D = u.length - l + x);
    const K = D - x;
    return this === u && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(l, x, D) : Uint8Array.prototype.set.call(
      u,
      this.subarray(x, D),
      l
    ), K;
  }, a.prototype.fill = function(u, l, x, D) {
    if (typeof u == "string") {
      if (typeof l == "string" ? (D = l, l = 0, x = this.length) : typeof x == "string" && (D = x, x = this.length), D !== void 0 && typeof D != "string")
        throw new TypeError("encoding must be a string");
      if (typeof D == "string" && !a.isEncoding(D))
        throw new TypeError("Unknown encoding: " + D);
      if (u.length === 1) {
        const J = u.charCodeAt(0);
        (D === "utf8" && J < 128 || D === "latin1") && (u = J);
      }
    } else
      typeof u == "number" ? u = u & 255 : typeof u == "boolean" && (u = Number(u));
    if (l < 0 || this.length < l || this.length < x)
      throw new RangeError("Out of range index");
    if (x <= l)
      return this;
    l = l >>> 0, x = x === void 0 ? this.length : x >>> 0, u || (u = 0);
    let K;
    if (typeof u == "number")
      for (K = l; K < x; ++K)
        this[K] = u;
    else {
      const J = a.isBuffer(u) ? u : a.from(u, D), ce = J.length;
      if (ce === 0)
        throw new TypeError('The value "' + u + '" is invalid for argument "value"');
      for (K = 0; K < x - l; ++K)
        this[K + l] = J[K % ce];
    }
    return this;
  };
  const Q = {};
  function ie(y, u, l) {
    Q[y] = class extends l {
      constructor() {
        super(), Object.defineProperty(this, "message", {
          value: u.apply(this, arguments),
          writable: !0,
          configurable: !0
        }), this.name = `${this.name} [${y}]`, this.stack, delete this.name;
      }
      get code() {
        return y;
      }
      set code(D) {
        Object.defineProperty(this, "code", {
          configurable: !0,
          enumerable: !0,
          value: D,
          writable: !0
        });
      }
      toString() {
        return `${this.name} [${y}]: ${this.message}`;
      }
    };
  }
  ie(
    "ERR_BUFFER_OUT_OF_BOUNDS",
    function(y) {
      return y ? `${y} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    },
    RangeError
  ), ie(
    "ERR_INVALID_ARG_TYPE",
    function(y, u) {
      return `The "${y}" argument must be of type number. Received type ${typeof u}`;
    },
    TypeError
  ), ie(
    "ERR_OUT_OF_RANGE",
    function(y, u, l) {
      let x = `The value of "${y}" is out of range.`, D = l;
      return Number.isInteger(l) && Math.abs(l) > 2 ** 32 ? D = de(String(l)) : typeof l == "bigint" && (D = String(l), (l > BigInt(2) ** BigInt(32) || l < -(BigInt(2) ** BigInt(32))) && (D = de(D)), D += "n"), x += ` It must be ${u}. Received ${D}`, x;
    },
    RangeError
  );
  function de(y) {
    let u = "", l = y.length;
    const x = y[0] === "-" ? 1 : 0;
    for (; l >= x + 4; l -= 3)
      u = `_${y.slice(l - 3, l)}${u}`;
    return `${y.slice(0, l)}${u}`;
  }
  function L(y, u, l) {
    ee(u, "offset"), (y[u] === void 0 || y[u + l] === void 0) && re(u, y.length - (l + 1));
  }
  function $(y, u, l, x, D, K) {
    if (y > l || y < u) {
      const J = typeof u == "bigint" ? "n" : "";
      let ce;
      throw K > 3 ? u === 0 || u === BigInt(0) ? ce = `>= 0${J} and < 2${J} ** ${(K + 1) * 8}${J}` : ce = `>= -(2${J} ** ${(K + 1) * 8 - 1}${J}) and < 2 ** ${(K + 1) * 8 - 1}${J}` : ce = `>= ${u}${J} and <= ${l}${J}`, new Q.ERR_OUT_OF_RANGE("value", ce, y);
    }
    L(x, D, K);
  }
  function ee(y, u) {
    if (typeof y != "number")
      throw new Q.ERR_INVALID_ARG_TYPE(u, "number", y);
  }
  function re(y, u, l) {
    throw Math.floor(y) !== y ? (ee(y, l), new Q.ERR_OUT_OF_RANGE(l || "offset", "an integer", y)) : u < 0 ? new Q.ERR_BUFFER_OUT_OF_BOUNDS() : new Q.ERR_OUT_OF_RANGE(
      l || "offset",
      `>= ${l ? 1 : 0} and <= ${u}`,
      y
    );
  }
  const ae = /[^+/0-9A-Za-z-_]/g;
  function me(y) {
    if (y = y.split("=")[0], y = y.trim().replace(ae, ""), y.length < 2)
      return "";
    for (; y.length % 4 !== 0; )
      y = y + "=";
    return y;
  }
  function ge(y, u) {
    u = u || 1 / 0;
    let l;
    const x = y.length;
    let D = null;
    const K = [];
    for (let J = 0; J < x; ++J) {
      if (l = y.charCodeAt(J), l > 55295 && l < 57344) {
        if (!D) {
          if (l > 56319) {
            (u -= 3) > -1 && K.push(239, 191, 189);
            continue;
          } else if (J + 1 === x) {
            (u -= 3) > -1 && K.push(239, 191, 189);
            continue;
          }
          D = l;
          continue;
        }
        if (l < 56320) {
          (u -= 3) > -1 && K.push(239, 191, 189), D = l;
          continue;
        }
        l = (D - 55296 << 10 | l - 56320) + 65536;
      } else
        D && (u -= 3) > -1 && K.push(239, 191, 189);
      if (D = null, l < 128) {
        if ((u -= 1) < 0)
          break;
        K.push(l);
      } else if (l < 2048) {
        if ((u -= 2) < 0)
          break;
        K.push(
          l >> 6 | 192,
          l & 63 | 128
        );
      } else if (l < 65536) {
        if ((u -= 3) < 0)
          break;
        K.push(
          l >> 12 | 224,
          l >> 6 & 63 | 128,
          l & 63 | 128
        );
      } else if (l < 1114112) {
        if ((u -= 4) < 0)
          break;
        K.push(
          l >> 18 | 240,
          l >> 12 & 63 | 128,
          l >> 6 & 63 | 128,
          l & 63 | 128
        );
      } else
        throw new Error("Invalid code point");
    }
    return K;
  }
  function Re(y) {
    const u = [];
    for (let l = 0; l < y.length; ++l)
      u.push(y.charCodeAt(l) & 255);
    return u;
  }
  function lr(y, u) {
    let l, x, D;
    const K = [];
    for (let J = 0; J < y.length && !((u -= 2) < 0); ++J)
      l = y.charCodeAt(J), x = l >> 8, D = l % 256, K.push(D), K.push(x);
    return K;
  }
  function Le(y) {
    return t.toByteArray(me(y));
  }
  function De(y, u, l, x) {
    let D;
    for (D = 0; D < x && !(D + l >= u.length || D >= y.length); ++D)
      u[D + l] = y[D];
    return D;
  }
  function ye(y, u) {
    return y instanceof u || y != null && y.constructor != null && y.constructor.name != null && y.constructor.name === u.name;
  }
  function Oe(y) {
    return y !== y;
  }
  const S = function() {
    const y = "0123456789abcdef", u = new Array(256);
    for (let l = 0; l < 16; ++l) {
      const x = l * 16;
      for (let D = 0; D < 16; ++D)
        u[x + D] = y[l] + y[D];
    }
    return u;
  }();
  function U(y) {
    return typeof BigInt > "u" ? j : y;
  }
  function j() {
    throw new Error("BigInt not supported");
  }
})(Kw);
/***
 * @license
 * https://github.com/ealmansi/bchaddrjs
 * Copyright (c) 2018-2020 Emilio Almansi
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */
var Dl = Oi, Vw = _5, qw = Kw.Buffer, Ae = {};
Ae.Legacy = "legacy";
Ae.Bitpay = "bitpay";
Ae.Cashaddr = "cashaddr";
var Me = {};
Me.Mainnet = "mainnet";
Me.Testnet = "testnet";
var Ke = {};
Ke.P2PKH = "p2pkh";
Ke.P2SH = "p2sh";
function N5(e) {
  try {
    return zi(e), !0;
  } catch {
    return !1;
  }
}
function Cf(e) {
  return zi(e).format;
}
function $l(e) {
  return zi(e).network;
}
function Fl(e) {
  return zi(e).type;
}
function R5(e) {
  var t = zi(e);
  return t.format === Ae.Legacy ? e : L5(t);
}
function k5(e) {
  var t = zi(e);
  return t.format === Ae.Bitpay ? e : D5(t);
}
function M5(e) {
  var t = zi(e);
  return $5(t);
}
var tt = {};
tt[Ae.Legacy] = {};
tt[Ae.Legacy][Me.Mainnet] = {};
tt[Ae.Legacy][Me.Mainnet][Ke.P2PKH] = 0;
tt[Ae.Legacy][Me.Mainnet][Ke.P2SH] = 5;
tt[Ae.Legacy][Me.Testnet] = {};
tt[Ae.Legacy][Me.Testnet][Ke.P2PKH] = 111;
tt[Ae.Legacy][Me.Testnet][Ke.P2SH] = 196;
tt[Ae.Bitpay] = {};
tt[Ae.Bitpay][Me.Mainnet] = {};
tt[Ae.Bitpay][Me.Mainnet][Ke.P2PKH] = 28;
tt[Ae.Bitpay][Me.Mainnet][Ke.P2SH] = 40;
tt[Ae.Bitpay][Me.Testnet] = {};
tt[Ae.Bitpay][Me.Testnet][Ke.P2PKH] = 111;
tt[Ae.Bitpay][Me.Testnet][Ke.P2SH] = 196;
function zi(e) {
  try {
    return C5(e);
  } catch {
  }
  try {
    return H5(e);
  } catch {
  }
  throw new Ii();
}
var U5 = 21;
function C5(e) {
  try {
    var t = Dl.decode(e);
    if (t.length !== U5)
      throw new Ii();
    var r = t[0], n = Array.prototype.slice.call(t, 1);
    switch (r) {
      case tt[Ae.Legacy][Me.Mainnet][Ke.P2PKH]:
        return {
          hash: n,
          format: Ae.Legacy,
          network: Me.Mainnet,
          type: Ke.P2PKH
        };
      case tt[Ae.Legacy][Me.Mainnet][Ke.P2SH]:
        return {
          hash: n,
          format: Ae.Legacy,
          network: Me.Mainnet,
          type: Ke.P2SH
        };
      case tt[Ae.Legacy][Me.Testnet][Ke.P2PKH]:
        return {
          hash: n,
          format: Ae.Legacy,
          network: Me.Testnet,
          type: Ke.P2PKH
        };
      case tt[Ae.Legacy][Me.Testnet][Ke.P2SH]:
        return {
          hash: n,
          format: Ae.Legacy,
          network: Me.Testnet,
          type: Ke.P2SH
        };
      case tt[Ae.Bitpay][Me.Mainnet][Ke.P2PKH]:
        return {
          hash: n,
          format: Ae.Bitpay,
          network: Me.Mainnet,
          type: Ke.P2PKH
        };
      case tt[Ae.Bitpay][Me.Mainnet][Ke.P2SH]:
        return {
          hash: n,
          format: Ae.Bitpay,
          network: Me.Mainnet,
          type: Ke.P2SH
        };
    }
  } catch {
  }
  throw new Ii();
}
function H5(e) {
  if (e.indexOf(":") !== -1)
    try {
      return tp(e);
    } catch {
    }
  else
    for (var t = ["bitcoincash", "bchtest", "bchreg"], r = 0; r < t.length; ++r)
      try {
        var n = t[r];
        return tp(n + ":" + e);
      } catch {
      }
  throw new Ii();
}
function tp(e) {
  try {
    var t = Vw.decode(e), r = Array.prototype.slice.call(t.hash, 0), n = t.type === "P2PKH" ? Ke.P2PKH : Ke.P2SH;
    switch (t.prefix) {
      case "bitcoincash":
        return {
          hash: r,
          format: Ae.Cashaddr,
          network: Me.Mainnet,
          type: n
        };
      case "bchtest":
      case "bchreg":
        return {
          hash: r,
          format: Ae.Cashaddr,
          network: Me.Testnet,
          type: n
        };
    }
  } catch {
  }
  throw new Ii();
}
function L5(e) {
  var t = tt[Ae.Legacy][e.network][e.type], r = qw.alloc(1 + e.hash.length);
  return r[0] = t, r.set(e.hash, 1), Dl.encode(r);
}
function D5(e) {
  var t = tt[Ae.Bitpay][e.network][e.type], r = qw.alloc(1 + e.hash.length);
  return r[0] = t, r.set(e.hash, 1), Dl.encode(r);
}
function $5(e) {
  var t = e.network === Me.Mainnet ? "bitcoincash" : "bchtest", r = e.type === Ke.P2PKH ? "P2PKH" : "P2SH", n = new Uint8Array(e.hash);
  return Vw.encode(t, r, n);
}
function F5(e) {
  return Cf(e) === Ae.Legacy;
}
function K5(e) {
  return Cf(e) === Ae.Bitpay;
}
function G5(e) {
  return Cf(e) === Ae.Cashaddr;
}
function V5(e) {
  return $l(e) === Me.Mainnet;
}
function q5(e) {
  return $l(e) === Me.Testnet;
}
function W5(e) {
  return Fl(e) === Ke.P2PKH;
}
function j5(e) {
  return Fl(e) === Ke.P2SH;
}
function Ii() {
  var e = new Error();
  this.name = e.name = "InvalidAddressError", this.message = e.message = "Received an invalid Bitcoin Cash address as input.", this.stack = e.stack;
}
Ii.prototype = Object.create(Error.prototype);
var en = {
  Format: Ae,
  Network: Me,
  Type: Ke,
  isValidAddress: N5,
  detectAddressFormat: Cf,
  detectAddressNetwork: $l,
  detectAddressType: Fl,
  toLegacyAddress: R5,
  toBitpayAddress: k5,
  toCashAddress: M5,
  isLegacyAddress: F5,
  isBitpayAddress: K5,
  isCashAddress: G5,
  isMainnetAddress: V5,
  isTestnetAddress: q5,
  isP2PKHAddress: W5,
  isP2SHAddress: j5,
  InvalidAddressError: Ii
};
const Hf = (e) => `https://api.blockchair.com/${z5(e)}`, rp = (e) => {
  switch (e) {
    case Ue.Bitcoin:
      return 127;
    case Ue.Dogecoin:
      return 1e7;
    case Ue.Litecoin:
      return 1e3;
    default:
      return 2;
  }
}, z5 = (e) => {
  switch (e) {
    case Ue.BitcoinCash:
      return "bitcoin-cash";
    case Ue.Litecoin:
      return "litecoin";
    case Ue.Dogecoin:
      return "dogecoin";
    default:
      return "bitcoin";
  }
}, X5 = async (e) => {
  try {
    const { feePerKb: t } = await fp(`https://app.bitgo.com/api/v2/${e.toLowerCase()}/tx/fee`), r = t / 1e3;
    return Math.max(r, rp(e));
  } catch {
    return rp(e);
  }
}, Lf = async (e) => {
  const t = await fp(e);
  if (!t || t.context.code !== 200)
    throw new Error(`failed to query ${e}`);
  return t.data;
}, Ww = async ({
  address: e,
  chain: t,
  apiKey: r
}) => {
  if (!e)
    throw new Error("address is required");
  const n = `/dashboards/address/${e}?transaction_details=true${r ? `&key=${r}` : ""}`;
  return (await Lf(`${Hf(t)}${n}`))[e];
}, Y5 = async ({
  address: e,
  chain: t,
  apiKey: r
}) => (await Ww({ address: e, chain: t, apiKey: r })).address.balance, Z5 = async ({
  chain: e,
  address: t,
  apiKey: r
}) => {
  if (!t)
    throw new Error("address is required");
  const n = `/addresses/balances?addresses=${t}${r ? `&key=${r}` : ""}`;
  return (await Lf(
    `${Hf(e)}${n}`
  ))[t] || 0;
}, jw = async ({ chain: e, apiKey: t, txHash: r }) => {
  if (!r)
    throw new Error("txHash is required");
  const n = `/raw/transaction/${r}${t ? `?key=${t}` : ""}`;
  return (await Lf(
    `${Hf(e)}${n}`
  ))[r].raw_transaction;
}, zw = async ({
  chain: e,
  address: t,
  apiKey: r,
  offset: n = 0
}) => {
  if (!t)
    throw new Error("address is required");
  const i = `/outputs?q=is_spent(false),recipient(${t})&limit=100&offset=${n}${r ? `&key=${r}` : ""}`, o = await Lf(`${Hf(e)}${i}`), s = o.filter(({ is_spent: c }) => !c).map(({ script_hex: c, block_id: d, transaction_hash: w, index: g, value: O, spending_signature_hex: N }) => ({
    hash: w,
    index: g,
    value: O,
    txHex: N,
    script_hex: c,
    is_confirmed: d !== -1
  }));
  if (o.length !== 100)
    return s;
  const a = await zw({
    address: t,
    chain: e,
    apiKey: r,
    offset: o[99].transaction_id
  });
  return s.concat(a);
}, J5 = async ({
  address: e,
  chain: t,
  apiKey: r,
  fetchTxHex: n = !0
}) => {
  const i = await zw({ chain: t, address: e, apiKey: r }), o = [];
  for (const { hash: s, index: a, script_hex: c, value: d } of i) {
    let w;
    n && (w = await jw({ txHash: s, chain: t, apiKey: r })), o.push({
      address: e,
      hash: s,
      index: a,
      txHex: w,
      value: d,
      witnessUtxo: { value: d, script: Buffer.from(c, "hex") }
    });
  }
  return o;
}, Df = ({ apiKey: e, chain: t }) => ({
  getConfirmedBalance: (r) => Z5({ chain: t, address: r, apiKey: e }),
  getRawTx: (r) => jw({ txHash: r, chain: t, apiKey: e }),
  getSuggestedTxFee: () => X5(t),
  getBalance: (r) => Y5({ address: r, chain: t, apiKey: e }),
  getAddressData: (r) => Ww({ address: r, chain: t, apiKey: e }),
  scanUTXOs: (r) => J5({ ...r, chain: t, apiKey: e })
}), $f = async ({ txHash: e, rpcUrl: t }) => {
  const r = await fv(
    t,
    JSON.stringify({
      jsonrpc: "2.0",
      method: "sendrawtransaction",
      params: [e],
      id: RT()
    }),
    { "Content-Type": "application/json", Accept: "application/json" }
  );
  if (r.error)
    throw new Error(`failed to broadcast a transaction: ${r.error}`);
  if (r.result.includes('"code":-26'))
    throw new Error("Invalid transaction: the transaction amount was too low");
  return r.result;
}, wn = Ue.BitcoinCash, Kl = (e) => zu(en.toCashAddress(e)), Xw = async ({
  amount: e,
  recipient: t,
  memo: r,
  feeRate: n,
  sender: i,
  apiClient: o
}) => {
  if (!Gl(t))
    throw new Error("Invalid address");
  const s = await o.scanUTXOs({
    address: Kl(i),
    fetchTxHex: !0
  }), a = Number(n.toFixed(0)), c = r ? Ts(r) : null, d = [];
  d.push({ address: t, value: e.amount().toNumber() });
  const { inputs: w, outputs: g } = Is({
    inputs: s,
    outputs: d,
    feeRate: a,
    chain: wn
  });
  if (!w || !g)
    throw new Error("Balance insufficient for transaction");
  const O = new Jo.TransactionBuilder(mn(wn));
  return await Promise.all(
    w.map(async (N) => {
      const B = await o.getRawTx(N.hash);
      O.addInput(Jo.Transaction.fromBuffer(Buffer.from(B, "hex")), N.index);
    })
  ), g.forEach((N) => {
    let B;
    N.address ? N.address && (B = Jo.address.toOutputScript(en.toLegacyAddress(N.address), mn(wn))) : B = Jo.address.toOutputScript(en.toLegacyAddress(i), mn(wn)), O.addOutput(B, N.value);
  }), c && O.addOutput(c, 0), { builder: O, utxos: w };
}, Q5 = async ({
  signTransaction: e,
  from: t,
  recipient: r,
  amount: n,
  apiClient: i,
  broadcastTx: o,
  getFeeRates: s,
  ...a
}) => {
  if (!t)
    throw new Error("From address must be provided");
  if (!r)
    throw new Error("Recipient address must be provided");
  if (!e)
    throw new Error("signTransaction must be provided");
  const c = a.feeRate || (await s())[Lr.Fast], { builder: d, utxos: w } = await Xw({
    ...a,
    amount: n,
    feeRate: c,
    recipient: r,
    sender: t,
    apiClient: i
  }), O = (await e({ builder: d, utxos: w })).toHex();
  return o(O);
}, eN = async ({
  amount: e,
  recipient: t,
  memo: r,
  feeRate: n,
  sender: i,
  apiClient: o
}) => {
  const s = en.toCashAddress(t);
  if (!Gl(s))
    throw new Error("Invalid address");
  const a = await o.scanUTXOs({
    address: Kl(i),
    fetchTxHex: !0
  }), c = Number(n.toFixed(0)), d = r ? Ts(r) : null, w = [];
  w.push({
    address: en.toLegacyAddress(t),
    value: e.amount().toNumber()
  }), d && w.push({ script: d, value: 0 });
  const { inputs: g, outputs: O } = Is({
    inputs: a,
    outputs: w,
    feeRate: c,
    chain: wn
  });
  if (!g || !O)
    throw new Error("Balance insufficient for transaction");
  const N = new _n.Psbt({ network: mn(wn) });
  return g.forEach(({ hash: B, index: I }) => N.addInput({ hash: B, index: I })), O.forEach((B) => {
    B.address = en.toLegacyAddress(B.address || i), B.script ? d && N.addOutput({ script: d, value: 0 }) : N.addOutput(B);
  }), { psbt: N, utxos: a, inputs: g };
}, zu = (e) => e.replace(/(bchtest:|bitcoincash:)/, ""), Gl = (e, t) => e.startsWith("bitcoincash:") ? !0 : en.isValidAddress(e) && en.detectAddressNetwork(e) === en.Network.Mainnet, tN = async ({
  phrase: e,
  derivationPath: t = `${ap.BCH}/0`,
  wif: r
}) => {
  const n = mn(wn);
  if (r) {
    const s = await import("./js-fe99b282.js").then((a) => a.j);
    return Hh.ECPairFactory(s).fromWIF(r, n);
  }
  if (!e)
    throw new Error("No phrase provided");
  return Jo.HDNode.fromSeedBuffer(Buffer.from(Qg(e)), n).derivePath(t).keyPair;
}, rN = (e) => {
  const t = e.getAddress(0);
  return Kl(t);
}, bN = ({
  apiKey: e,
  rpcUrl: t = Oo.BitcoinCash,
  apiClient: r
}) => {
  const n = r || Df({ apiKey: e, chain: wn }), { getBalance: i, ...o } = xf({
    chain: wn,
    apiClient: n,
    broadcastTx: (s) => $f({ txHash: s, rpcUrl: t })
  });
  return {
    ...o,
    stripPrefix: zu,
    validateAddress: Gl,
    createKeysForPath: tN,
    getAddressFromKeys: rN,
    buildBCHTx: (s) => Xw({ ...s, apiClient: n }),
    getBalance: (s) => i(zu(en.toCashAddress(s))),
    buildTx: (s) => eN({ ...s, apiClient: n }),
    transfer: (s) => Q5({
      ...s,
      getFeeRates: o.getFeeRates,
      broadcastTx: o.broadcastTx,
      apiClient: n
    })
  };
}, mN = ({
  apiKey: e,
  rpcUrl: t = Oo.Bitcoin,
  apiClient: r
}) => xf({
  chain: Ue.Bitcoin,
  broadcastTx: (n) => $f({ txHash: n, rpcUrl: t }),
  apiClient: r || Df({ apiKey: e, chain: Ue.Bitcoin })
}), EN = ({
  apiKey: e,
  rpcUrl: t = Oo.Dogecoin,
  apiClient: r
}) => xf({
  chain: Ue.Dogecoin,
  broadcastTx: (n) => $f({ txHash: n, rpcUrl: t }),
  apiClient: r || Df({ apiKey: e, chain: Ue.Dogecoin })
}), _N = ({
  apiKey: e,
  rpcUrl: t = Oo.Litecoin,
  apiClient: r
}) => xf({
  chain: Ue.Litecoin,
  broadcastTx: (n) => $f({ txHash: n, rpcUrl: t }),
  apiClient: r || Df({ apiKey: e, chain: Ue.Litecoin })
});
export {
  xf as B,
  EN as D,
  Ru as I,
  _N as L,
  wN as M,
  ex as O,
  Ag as T,
  Lh as U,
  bN as a,
  ww as b,
  En as c,
  mN as d,
  Tg as e,
  Is as f,
  op as g,
  Ts as h,
  Mt as i,
  ku as j,
  Dh as k,
  $h as l,
  ts as m,
  Mu as n,
  mn as o,
  Qg as p,
  BT as s,
  RT as u,
  PT as v
};
