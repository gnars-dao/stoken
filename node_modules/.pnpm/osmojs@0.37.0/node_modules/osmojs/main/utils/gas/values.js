"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GAS_VALUES = exports.FEE_VALUES = exports.FEES = void 0;

var _amino = require("@cosmjs/amino");

var GAS_VALUES = {
  osmosis: {
    createPool: '250000',
    joinPool: '140000',
    joinSwapExternAmountIn: '140000',
    exitPool: '140000',
    swapExactAmountIn: '250000',
    swapExactAmountOut: '250000',
    lockTokens: '250000',
    beginUnlocking: '140000',
    unlockPeriodLock: '140000'
  }
};
exports.GAS_VALUES = GAS_VALUES;
var FEE_VALUES = {
  osmosis: {
    low: '0',
    medium: '6250',
    high: '10000'
  }
}; // export const FEES = Object.keys(GAS_VALUES).reduce((m, chain) => {
//     m[chain] = Object.keys(GAS_VALUES[chain]).reduce((m2, method) => {
//         m2[method] = (fee = 'low') => ({
//             amount: coins(FEE_VALUES[chain][fee], 'uosmo'),
//             gas: GAS_VALUES[chain][method]
//         });
//         return m2;
//     }, {});
//     return m;
// }, {});

exports.FEE_VALUES = FEE_VALUES;
var FEES = {
  osmosis: {
    createPool: function createPool() {
      var fee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'low';
      return {
        amount: (0, _amino.coins)(FEE_VALUES.osmosis[fee], 'uosmo'),
        gas: GAS_VALUES.osmosis.createPool
      };
    },
    joinPool: function joinPool() {
      var fee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'low';
      return {
        amount: (0, _amino.coins)(FEE_VALUES.osmosis[fee], 'uosmo'),
        gas: GAS_VALUES.osmosis.joinPool
      };
    },
    joinSwapExternAmountIn: function joinSwapExternAmountIn() {
      var fee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'low';
      return {
        amount: (0, _amino.coins)(FEE_VALUES.osmosis[fee], 'uosmo'),
        gas: GAS_VALUES.osmosis.joinSwapExternAmountIn
      };
    },
    exitPool: function exitPool() {
      var fee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'low';
      return {
        amount: (0, _amino.coins)(FEE_VALUES.osmosis[fee], 'uosmo'),
        gas: GAS_VALUES.osmosis.exitPool
      };
    },
    swapExactAmountIn: function swapExactAmountIn() {
      var fee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'low';
      return {
        amount: (0, _amino.coins)(FEE_VALUES.osmosis[fee], 'uosmo'),
        gas: GAS_VALUES.osmosis.swapExactAmountIn
      };
    },
    swapExactAmountOut: function swapExactAmountOut() {
      var fee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'low';
      return {
        amount: (0, _amino.coins)(FEE_VALUES.osmosis[fee], 'uosmo'),
        gas: GAS_VALUES.osmosis.swapExactAmountOut
      };
    },
    lockTokens: function lockTokens() {
      var fee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'low';
      return {
        amount: (0, _amino.coins)(FEE_VALUES.osmosis[fee], 'uosmo'),
        gas: GAS_VALUES.osmosis.lockTokens
      };
    },
    beginUnlocking: function beginUnlocking() {
      var fee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'low';
      return {
        amount: (0, _amino.coins)(FEE_VALUES.osmosis[fee], 'uosmo'),
        gas: GAS_VALUES.osmosis.beginUnlocking
      };
    },
    unlockPeriodLock: function unlockPeriodLock() {
      var fee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'low';
      return {
        amount: (0, _amino.coins)(FEE_VALUES.osmosis[fee], 'uosmo'),
        gas: GAS_VALUES.osmosis.unlockPeriodLock
      };
    }
  }
};
exports.FEES = FEES;