"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LCDQueryClient = void 0;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _helpers = require("../../../helpers");

var LCDQueryClient = /*#__PURE__*/function () {
  function LCDQueryClient(_ref) {
    var requestClient = _ref.requestClient;
    (0, _classCallCheck2["default"])(this, LCDQueryClient);
    (0, _defineProperty2["default"])(this, "req", void 0);
    this.req = requestClient;
    this.contractInfo = this.contractInfo.bind(this);
    this.contractHistory = this.contractHistory.bind(this);
    this.contractsByCode = this.contractsByCode.bind(this);
    this.allContractState = this.allContractState.bind(this);
    this.rawContractState = this.rawContractState.bind(this);
    this.smartContractState = this.smartContractState.bind(this);
    this.code = this.code.bind(this);
    this.codes = this.codes.bind(this);
    this.pinnedCodes = this.pinnedCodes.bind(this);
  }
  /* ContractInfo gets the contract meta data */


  (0, _createClass2["default"])(LCDQueryClient, [{
    key: "contractInfo",
    value: function () {
      var _contractInfo = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(params) {
        var endpoint;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                endpoint = "cosmwasm/wasm/v1/contract/".concat(params.address);
                _context.next = 3;
                return this.req.get(endpoint);

              case 3:
                return _context.abrupt("return", _context.sent);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function contractInfo(_x) {
        return _contractInfo.apply(this, arguments);
      }

      return contractInfo;
    }()
    /* ContractHistory gets the contract code history */

  }, {
    key: "contractHistory",
    value: function () {
      var _contractHistory = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                options = {
                  params: {}
                };

                if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
                  (0, _helpers.setPaginationParams)(options, params.pagination);
                }

                endpoint = "cosmwasm/wasm/v1/contract/".concat(params.address, "/history");
                _context2.next = 5;
                return this.req.get(endpoint, options);

              case 5:
                return _context2.abrupt("return", _context2.sent);

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function contractHistory(_x2) {
        return _contractHistory.apply(this, arguments);
      }

      return contractHistory;
    }()
    /* ContractsByCode lists all smart contracts for a code id */

  }, {
    key: "contractsByCode",
    value: function () {
      var _contractsByCode = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                options = {
                  params: {}
                };

                if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
                  (0, _helpers.setPaginationParams)(options, params.pagination);
                }

                endpoint = "cosmwasm/wasm/v1/code/".concat(params.codeId, "/contracts");
                _context3.next = 5;
                return this.req.get(endpoint, options);

              case 5:
                return _context3.abrupt("return", _context3.sent);

              case 6:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function contractsByCode(_x3) {
        return _contractsByCode.apply(this, arguments);
      }

      return contractsByCode;
    }()
    /* AllContractState gets all raw store data for a single contract */

  }, {
    key: "allContractState",
    value: function () {
      var _allContractState = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(params) {
        var options, endpoint;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                options = {
                  params: {}
                };

                if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
                  (0, _helpers.setPaginationParams)(options, params.pagination);
                }

                endpoint = "cosmwasm/wasm/v1/contract/".concat(params.address, "/state");
                _context4.next = 5;
                return this.req.get(endpoint, options);

              case 5:
                return _context4.abrupt("return", _context4.sent);

              case 6:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function allContractState(_x4) {
        return _allContractState.apply(this, arguments);
      }

      return allContractState;
    }()
    /* RawContractState gets single key from the raw store data of a contract */

  }, {
    key: "rawContractState",
    value: function () {
      var _rawContractState = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(params) {
        var endpoint;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                endpoint = "wasm/v1/contract/".concat(params.address, "/raw/").concat(params.queryData);
                _context5.next = 3;
                return this.req.get(endpoint);

              case 3:
                return _context5.abrupt("return", _context5.sent);

              case 4:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function rawContractState(_x5) {
        return _rawContractState.apply(this, arguments);
      }

      return rawContractState;
    }()
    /* SmartContractState get smart query result from the contract */

  }, {
    key: "smartContractState",
    value: function () {
      var _smartContractState = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(params) {
        var endpoint;
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                endpoint = "wasm/v1/contract/".concat(params.address, "/smart/").concat(params.queryData);
                _context6.next = 3;
                return this.req.get(endpoint);

              case 3:
                return _context6.abrupt("return", _context6.sent);

              case 4:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function smartContractState(_x6) {
        return _smartContractState.apply(this, arguments);
      }

      return smartContractState;
    }()
    /* Code gets the binary code and metadata for a singe wasm code */

  }, {
    key: "code",
    value: function () {
      var _code = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee7(params) {
        var endpoint;
        return _regenerator["default"].wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                endpoint = "cosmwasm/wasm/v1/code/".concat(params.codeId);
                _context7.next = 3;
                return this.req.get(endpoint);

              case 3:
                return _context7.abrupt("return", _context7.sent);

              case 4:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function code(_x7) {
        return _code.apply(this, arguments);
      }

      return code;
    }()
    /* Codes gets the metadata for all stored wasm codes */

  }, {
    key: "codes",
    value: function () {
      var _codes = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee8() {
        var params,
            options,
            endpoint,
            _args8 = arguments;
        return _regenerator["default"].wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                params = _args8.length > 0 && _args8[0] !== undefined ? _args8[0] : {
                  pagination: undefined
                };
                options = {
                  params: {}
                };

                if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
                  (0, _helpers.setPaginationParams)(options, params.pagination);
                }

                endpoint = "cosmwasm/wasm/v1/code";
                _context8.next = 6;
                return this.req.get(endpoint, options);

              case 6:
                return _context8.abrupt("return", _context8.sent);

              case 7:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function codes() {
        return _codes.apply(this, arguments);
      }

      return codes;
    }()
    /* PinnedCodes gets the pinned code ids */

  }, {
    key: "pinnedCodes",
    value: function () {
      var _pinnedCodes = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee9() {
        var params,
            options,
            endpoint,
            _args9 = arguments;
        return _regenerator["default"].wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                params = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {
                  pagination: undefined
                };
                options = {
                  params: {}
                };

                if (typeof (params === null || params === void 0 ? void 0 : params.pagination) !== "undefined") {
                  (0, _helpers.setPaginationParams)(options, params.pagination);
                }

                endpoint = "cosmwasm/wasm/v1/codes/pinned";
                _context9.next = 6;
                return this.req.get(endpoint, options);

              case 6:
                return _context9.abrupt("return", _context9.sent);

              case 7:
              case "end":
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function pinnedCodes() {
        return _pinnedCodes.apply(this, arguments);
      }

      return pinnedCodes;
    }()
  }]);
  return LCDQueryClient;
}();

exports.LCDQueryClient = LCDQueryClient;