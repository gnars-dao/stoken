"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRpcQueryExtension = exports.QueryClientImpl = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));

var _stargate = require("@cosmjs/stargate");

var _query = require("./query");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var QueryClientImpl = /*#__PURE__*/function () {
  function QueryClientImpl(rpc) {
    (0, _classCallCheck2["default"])(this, QueryClientImpl);
    (0, _defineProperty2["default"])(this, "rpc", void 0);
    this.rpc = rpc;
    this.moduleBalance = this.moduleBalance.bind(this);
    this.moduleLockedAmount = this.moduleLockedAmount.bind(this);
    this.accountUnlockableCoins = this.accountUnlockableCoins.bind(this);
    this.accountUnlockingCoins = this.accountUnlockingCoins.bind(this);
    this.accountLockedCoins = this.accountLockedCoins.bind(this);
    this.accountLockedPastTime = this.accountLockedPastTime.bind(this);
    this.accountLockedPastTimeNotUnlockingOnly = this.accountLockedPastTimeNotUnlockingOnly.bind(this);
    this.accountUnlockedBeforeTime = this.accountUnlockedBeforeTime.bind(this);
    this.accountLockedPastTimeDenom = this.accountLockedPastTimeDenom.bind(this);
    this.lockedDenom = this.lockedDenom.bind(this);
    this.lockedByID = this.lockedByID.bind(this);
    this.syntheticLockupsByLockupID = this.syntheticLockupsByLockupID.bind(this);
    this.accountLockedLongerDuration = this.accountLockedLongerDuration.bind(this);
    this.accountLockedDuration = this.accountLockedDuration.bind(this);
    this.accountLockedLongerDurationNotUnlockingOnly = this.accountLockedLongerDurationNotUnlockingOnly.bind(this);
    this.accountLockedLongerDurationDenom = this.accountLockedLongerDurationDenom.bind(this);
  }

  (0, _createClass2["default"])(QueryClientImpl, [{
    key: "moduleBalance",
    value: function moduleBalance() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.ModuleBalanceRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "ModuleBalance", data);
      return promise.then(function (data) {
        return _query.ModuleBalanceResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "moduleLockedAmount",
    value: function moduleLockedAmount() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.ModuleLockedAmountRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "ModuleLockedAmount", data);
      return promise.then(function (data) {
        return _query.ModuleLockedAmountResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountUnlockableCoins",
    value: function accountUnlockableCoins(request) {
      var data = _query.AccountUnlockableCoinsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountUnlockableCoins", data);
      return promise.then(function (data) {
        return _query.AccountUnlockableCoinsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountUnlockingCoins",
    value: function accountUnlockingCoins(request) {
      var data = _query.AccountUnlockingCoinsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountUnlockingCoins", data);
      return promise.then(function (data) {
        return _query.AccountUnlockingCoinsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountLockedCoins",
    value: function accountLockedCoins(request) {
      var data = _query.AccountLockedCoinsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountLockedCoins", data);
      return promise.then(function (data) {
        return _query.AccountLockedCoinsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountLockedPastTime",
    value: function accountLockedPastTime(request) {
      var data = _query.AccountLockedPastTimeRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountLockedPastTime", data);
      return promise.then(function (data) {
        return _query.AccountLockedPastTimeResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountLockedPastTimeNotUnlockingOnly",
    value: function accountLockedPastTimeNotUnlockingOnly(request) {
      var data = _query.AccountLockedPastTimeNotUnlockingOnlyRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountLockedPastTimeNotUnlockingOnly", data);
      return promise.then(function (data) {
        return _query.AccountLockedPastTimeNotUnlockingOnlyResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountUnlockedBeforeTime",
    value: function accountUnlockedBeforeTime(request) {
      var data = _query.AccountUnlockedBeforeTimeRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountUnlockedBeforeTime", data);
      return promise.then(function (data) {
        return _query.AccountUnlockedBeforeTimeResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountLockedPastTimeDenom",
    value: function accountLockedPastTimeDenom(request) {
      var data = _query.AccountLockedPastTimeDenomRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountLockedPastTimeDenom", data);
      return promise.then(function (data) {
        return _query.AccountLockedPastTimeDenomResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "lockedDenom",
    value: function lockedDenom(request) {
      var data = _query.LockedDenomRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "LockedDenom", data);
      return promise.then(function (data) {
        return _query.LockedDenomResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "lockedByID",
    value: function lockedByID(request) {
      var data = _query.LockedRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "LockedByID", data);
      return promise.then(function (data) {
        return _query.LockedResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "syntheticLockupsByLockupID",
    value: function syntheticLockupsByLockupID(request) {
      var data = _query.SyntheticLockupsByLockupIDRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "SyntheticLockupsByLockupID", data);
      return promise.then(function (data) {
        return _query.SyntheticLockupsByLockupIDResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountLockedLongerDuration",
    value: function accountLockedLongerDuration(request) {
      var data = _query.AccountLockedLongerDurationRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountLockedLongerDuration", data);
      return promise.then(function (data) {
        return _query.AccountLockedLongerDurationResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountLockedDuration",
    value: function accountLockedDuration(request) {
      var data = _query.AccountLockedDurationRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountLockedDuration", data);
      return promise.then(function (data) {
        return _query.AccountLockedDurationResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountLockedLongerDurationNotUnlockingOnly",
    value: function accountLockedLongerDurationNotUnlockingOnly(request) {
      var data = _query.AccountLockedLongerDurationNotUnlockingOnlyRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountLockedLongerDurationNotUnlockingOnly", data);
      return promise.then(function (data) {
        return _query.AccountLockedLongerDurationNotUnlockingOnlyResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "accountLockedLongerDurationDenom",
    value: function accountLockedLongerDurationDenom(request) {
      var data = _query.AccountLockedLongerDurationDenomRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.lockup.Query", "AccountLockedLongerDurationDenom", data);
      return promise.then(function (data) {
        return _query.AccountLockedLongerDurationDenomResponse.decode(new _m0.Reader(data));
      });
    }
  }]);
  return QueryClientImpl;
}();

exports.QueryClientImpl = QueryClientImpl;

var createRpcQueryExtension = function createRpcQueryExtension(base) {
  var rpc = (0, _stargate.createProtobufRpcClient)(base);
  var queryService = new QueryClientImpl(rpc);
  return {
    moduleBalance: function moduleBalance(request) {
      return queryService.moduleBalance(request);
    },
    moduleLockedAmount: function moduleLockedAmount(request) {
      return queryService.moduleLockedAmount(request);
    },
    accountUnlockableCoins: function accountUnlockableCoins(request) {
      return queryService.accountUnlockableCoins(request);
    },
    accountUnlockingCoins: function accountUnlockingCoins(request) {
      return queryService.accountUnlockingCoins(request);
    },
    accountLockedCoins: function accountLockedCoins(request) {
      return queryService.accountLockedCoins(request);
    },
    accountLockedPastTime: function accountLockedPastTime(request) {
      return queryService.accountLockedPastTime(request);
    },
    accountLockedPastTimeNotUnlockingOnly: function accountLockedPastTimeNotUnlockingOnly(request) {
      return queryService.accountLockedPastTimeNotUnlockingOnly(request);
    },
    accountUnlockedBeforeTime: function accountUnlockedBeforeTime(request) {
      return queryService.accountUnlockedBeforeTime(request);
    },
    accountLockedPastTimeDenom: function accountLockedPastTimeDenom(request) {
      return queryService.accountLockedPastTimeDenom(request);
    },
    lockedDenom: function lockedDenom(request) {
      return queryService.lockedDenom(request);
    },
    lockedByID: function lockedByID(request) {
      return queryService.lockedByID(request);
    },
    syntheticLockupsByLockupID: function syntheticLockupsByLockupID(request) {
      return queryService.syntheticLockupsByLockupID(request);
    },
    accountLockedLongerDuration: function accountLockedLongerDuration(request) {
      return queryService.accountLockedLongerDuration(request);
    },
    accountLockedDuration: function accountLockedDuration(request) {
      return queryService.accountLockedDuration(request);
    },
    accountLockedLongerDurationNotUnlockingOnly: function accountLockedLongerDurationNotUnlockingOnly(request) {
      return queryService.accountLockedLongerDurationNotUnlockingOnly(request);
    },
    accountLockedLongerDurationDenom: function accountLockedLongerDurationDenom(request) {
      return queryService.accountLockedLongerDurationDenom(request);
    }
  };
};

exports.createRpcQueryExtension = createRpcQueryExtension;