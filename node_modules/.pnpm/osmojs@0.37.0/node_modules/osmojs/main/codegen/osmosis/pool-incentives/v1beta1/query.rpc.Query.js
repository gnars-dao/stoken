"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRpcQueryExtension = exports.QueryClientImpl = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));

var _stargate = require("@cosmjs/stargate");

var _query = require("./query");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var QueryClientImpl = /*#__PURE__*/function () {
  function QueryClientImpl(rpc) {
    (0, _classCallCheck2["default"])(this, QueryClientImpl);
    (0, _defineProperty2["default"])(this, "rpc", void 0);
    this.rpc = rpc;
    this.gaugeIds = this.gaugeIds.bind(this);
    this.distrInfo = this.distrInfo.bind(this);
    this.params = this.params.bind(this);
    this.lockableDurations = this.lockableDurations.bind(this);
    this.incentivizedPools = this.incentivizedPools.bind(this);
    this.externalIncentiveGauges = this.externalIncentiveGauges.bind(this);
  }

  (0, _createClass2["default"])(QueryClientImpl, [{
    key: "gaugeIds",
    value: function gaugeIds(request) {
      var data = _query.QueryGaugeIdsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.poolincentives.v1beta1.Query", "GaugeIds", data);
      return promise.then(function (data) {
        return _query.QueryGaugeIdsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "distrInfo",
    value: function distrInfo() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.QueryDistrInfoRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.poolincentives.v1beta1.Query", "DistrInfo", data);
      return promise.then(function (data) {
        return _query.QueryDistrInfoResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "params",
    value: function params() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.QueryParamsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.poolincentives.v1beta1.Query", "Params", data);
      return promise.then(function (data) {
        return _query.QueryParamsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "lockableDurations",
    value: function lockableDurations() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.QueryLockableDurationsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.poolincentives.v1beta1.Query", "LockableDurations", data);
      return promise.then(function (data) {
        return _query.QueryLockableDurationsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "incentivizedPools",
    value: function incentivizedPools() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.QueryIncentivizedPoolsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.poolincentives.v1beta1.Query", "IncentivizedPools", data);
      return promise.then(function (data) {
        return _query.QueryIncentivizedPoolsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "externalIncentiveGauges",
    value: function externalIncentiveGauges() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.QueryExternalIncentiveGaugesRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.poolincentives.v1beta1.Query", "ExternalIncentiveGauges", data);
      return promise.then(function (data) {
        return _query.QueryExternalIncentiveGaugesResponse.decode(new _m0.Reader(data));
      });
    }
  }]);
  return QueryClientImpl;
}();

exports.QueryClientImpl = QueryClientImpl;

var createRpcQueryExtension = function createRpcQueryExtension(base) {
  var rpc = (0, _stargate.createProtobufRpcClient)(base);
  var queryService = new QueryClientImpl(rpc);
  return {
    gaugeIds: function gaugeIds(request) {
      return queryService.gaugeIds(request);
    },
    distrInfo: function distrInfo(request) {
      return queryService.distrInfo(request);
    },
    params: function params(request) {
      return queryService.params(request);
    },
    lockableDurations: function lockableDurations(request) {
      return queryService.lockableDurations(request);
    },
    incentivizedPools: function incentivizedPools(request) {
      return queryService.incentivizedPools(request);
    },
    externalIncentiveGauges: function externalIncentiveGauges(request) {
      return queryService.externalIncentiveGauges(request);
    }
  };
};

exports.createRpcQueryExtension = createRpcQueryExtension;