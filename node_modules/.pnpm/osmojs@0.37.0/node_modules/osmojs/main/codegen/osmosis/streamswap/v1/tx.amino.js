"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AminoConverter = void 0;

var _helpers = require("../../../helpers");

//@ts-nocheck
var AminoConverter = {
  "/osmosis.streamswap.v1.MsgCreateSale": {
    aminoType: "osmosis/streamswap/v1/create-sale",
    toAmino: function toAmino(_ref) {
      var creator = _ref.creator,
          tokenIn = _ref.tokenIn,
          tokenOut = _ref.tokenOut,
          maxFee = _ref.maxFee,
          startTime = _ref.startTime,
          duration = _ref.duration,
          recipient = _ref.recipient,
          name = _ref.name,
          url = _ref.url;
      return {
        creator: creator,
        token_in: tokenIn,
        token_out: {
          denom: tokenOut.denom,
          amount: _helpers.Long.fromValue(tokenOut.amount).toString()
        },
        max_fee: maxFee.map(function (el0) {
          return {
            denom: el0.denom,
            amount: el0.amount
          };
        }),
        start_time: startTime,
        duration: (duration * 1000000000).toString(),
        recipient: recipient,
        name: name,
        url: url
      };
    },
    fromAmino: function fromAmino(_ref2) {
      var creator = _ref2.creator,
          token_in = _ref2.token_in,
          token_out = _ref2.token_out,
          max_fee = _ref2.max_fee,
          start_time = _ref2.start_time,
          duration = _ref2.duration,
          recipient = _ref2.recipient,
          name = _ref2.name,
          url = _ref2.url;
      return {
        creator: creator,
        tokenIn: token_in,
        tokenOut: {
          denom: token_out.denom,
          amount: token_out.amount
        },
        maxFee: max_fee.map(function (el0) {
          return {
            denom: el0.denom,
            amount: el0.amount
          };
        }),
        startTime: start_time,
        duration: {
          seconds: _helpers.Long.fromNumber(Math.floor(parseInt(duration) / 1000000000)),
          nanos: parseInt(duration) % 1000000000
        },
        recipient: recipient,
        name: name,
        url: url
      };
    }
  },
  "/osmosis.streamswap.v1.MsgSubscribe": {
    aminoType: "osmosis/streamswap/v1/subscribe",
    toAmino: function toAmino(_ref3) {
      var sender = _ref3.sender,
          saleId = _ref3.saleId,
          amount = _ref3.amount;
      return {
        sender: sender,
        sale_id: saleId.toString(),
        amount: amount
      };
    },
    fromAmino: function fromAmino(_ref4) {
      var sender = _ref4.sender,
          sale_id = _ref4.sale_id,
          amount = _ref4.amount;
      return {
        sender: sender,
        saleId: _helpers.Long.fromString(sale_id),
        amount: amount
      };
    }
  },
  "/osmosis.streamswap.v1.MsgWithdraw": {
    aminoType: "osmosis/streamswap/v1/withdraw",
    toAmino: function toAmino(_ref5) {
      var sender = _ref5.sender,
          saleId = _ref5.saleId,
          amount = _ref5.amount;
      return {
        sender: sender,
        sale_id: saleId.toString(),
        amount: amount
      };
    },
    fromAmino: function fromAmino(_ref6) {
      var sender = _ref6.sender,
          sale_id = _ref6.sale_id,
          amount = _ref6.amount;
      return {
        sender: sender,
        saleId: _helpers.Long.fromString(sale_id),
        amount: amount
      };
    }
  },
  "/osmosis.streamswap.v1.MsgExitSale": {
    aminoType: "osmosis/streamswap/v1/exit-sale",
    toAmino: function toAmino(_ref7) {
      var sender = _ref7.sender,
          saleId = _ref7.saleId;
      return {
        sender: sender,
        sale_id: saleId.toString()
      };
    },
    fromAmino: function fromAmino(_ref8) {
      var sender = _ref8.sender,
          sale_id = _ref8.sale_id;
      return {
        sender: sender,
        saleId: _helpers.Long.fromString(sale_id)
      };
    }
  },
  "/osmosis.streamswap.v1.MsgFinalizeSale": {
    aminoType: "osmosis/streamswap/v1/finalize-sale",
    toAmino: function toAmino(_ref9) {
      var sender = _ref9.sender,
          saleId = _ref9.saleId;
      return {
        sender: sender,
        sale_id: saleId.toString()
      };
    },
    fromAmino: function fromAmino(_ref10) {
      var sender = _ref10.sender,
          sale_id = _ref10.sale_id;
      return {
        sender: sender,
        saleId: _helpers.Long.fromString(sale_id)
      };
    }
  }
};
exports.AminoConverter = AminoConverter;