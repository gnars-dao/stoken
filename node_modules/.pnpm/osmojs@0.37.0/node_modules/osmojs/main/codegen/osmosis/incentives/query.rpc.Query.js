"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRpcQueryExtension = exports.QueryClientImpl = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));

var _stargate = require("@cosmjs/stargate");

var _query = require("./query");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var QueryClientImpl = /*#__PURE__*/function () {
  function QueryClientImpl(rpc) {
    (0, _classCallCheck2["default"])(this, QueryClientImpl);
    (0, _defineProperty2["default"])(this, "rpc", void 0);
    this.rpc = rpc;
    this.moduleToDistributeCoins = this.moduleToDistributeCoins.bind(this);
    this.moduleDistributedCoins = this.moduleDistributedCoins.bind(this);
    this.gaugeByID = this.gaugeByID.bind(this);
    this.gauges = this.gauges.bind(this);
    this.activeGauges = this.activeGauges.bind(this);
    this.activeGaugesPerDenom = this.activeGaugesPerDenom.bind(this);
    this.upcomingGauges = this.upcomingGauges.bind(this);
    this.upcomingGaugesPerDenom = this.upcomingGaugesPerDenom.bind(this);
    this.rewardsEst = this.rewardsEst.bind(this);
    this.lockableDurations = this.lockableDurations.bind(this);
  }

  (0, _createClass2["default"])(QueryClientImpl, [{
    key: "moduleToDistributeCoins",
    value: function moduleToDistributeCoins() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.ModuleToDistributeCoinsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.incentives.Query", "ModuleToDistributeCoins", data);
      return promise.then(function (data) {
        return _query.ModuleToDistributeCoinsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "moduleDistributedCoins",
    value: function moduleDistributedCoins() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.ModuleDistributedCoinsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.incentives.Query", "ModuleDistributedCoins", data);
      return promise.then(function (data) {
        return _query.ModuleDistributedCoinsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "gaugeByID",
    value: function gaugeByID(request) {
      var data = _query.GaugeByIDRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.incentives.Query", "GaugeByID", data);
      return promise.then(function (data) {
        return _query.GaugeByIDResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "gauges",
    value: function gauges() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        pagination: undefined
      };

      var data = _query.GaugesRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.incentives.Query", "Gauges", data);
      return promise.then(function (data) {
        return _query.GaugesResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "activeGauges",
    value: function activeGauges() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        pagination: undefined
      };

      var data = _query.ActiveGaugesRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.incentives.Query", "ActiveGauges", data);
      return promise.then(function (data) {
        return _query.ActiveGaugesResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "activeGaugesPerDenom",
    value: function activeGaugesPerDenom(request) {
      var data = _query.ActiveGaugesPerDenomRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.incentives.Query", "ActiveGaugesPerDenom", data);
      return promise.then(function (data) {
        return _query.ActiveGaugesPerDenomResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "upcomingGauges",
    value: function upcomingGauges() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        pagination: undefined
      };

      var data = _query.UpcomingGaugesRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.incentives.Query", "UpcomingGauges", data);
      return promise.then(function (data) {
        return _query.UpcomingGaugesResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "upcomingGaugesPerDenom",
    value: function upcomingGaugesPerDenom(request) {
      var data = _query.UpcomingGaugesPerDenomRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.incentives.Query", "UpcomingGaugesPerDenom", data);
      return promise.then(function (data) {
        return _query.UpcomingGaugesPerDenomResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "rewardsEst",
    value: function rewardsEst(request) {
      var data = _query.RewardsEstRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.incentives.Query", "RewardsEst", data);
      return promise.then(function (data) {
        return _query.RewardsEstResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "lockableDurations",
    value: function lockableDurations() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.QueryLockableDurationsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.incentives.Query", "LockableDurations", data);
      return promise.then(function (data) {
        return _query.QueryLockableDurationsResponse.decode(new _m0.Reader(data));
      });
    }
  }]);
  return QueryClientImpl;
}();

exports.QueryClientImpl = QueryClientImpl;

var createRpcQueryExtension = function createRpcQueryExtension(base) {
  var rpc = (0, _stargate.createProtobufRpcClient)(base);
  var queryService = new QueryClientImpl(rpc);
  return {
    moduleToDistributeCoins: function moduleToDistributeCoins(request) {
      return queryService.moduleToDistributeCoins(request);
    },
    moduleDistributedCoins: function moduleDistributedCoins(request) {
      return queryService.moduleDistributedCoins(request);
    },
    gaugeByID: function gaugeByID(request) {
      return queryService.gaugeByID(request);
    },
    gauges: function gauges(request) {
      return queryService.gauges(request);
    },
    activeGauges: function activeGauges(request) {
      return queryService.activeGauges(request);
    },
    activeGaugesPerDenom: function activeGaugesPerDenom(request) {
      return queryService.activeGaugesPerDenom(request);
    },
    upcomingGauges: function upcomingGauges(request) {
      return queryService.upcomingGauges(request);
    },
    upcomingGaugesPerDenom: function upcomingGaugesPerDenom(request) {
      return queryService.upcomingGaugesPerDenom(request);
    },
    rewardsEst: function rewardsEst(request) {
      return queryService.rewardsEst(request);
    },
    lockableDurations: function lockableDurations(request) {
      return queryService.lockableDurations(request);
    }
  };
};

exports.createRpcQueryExtension = createRpcQueryExtension;