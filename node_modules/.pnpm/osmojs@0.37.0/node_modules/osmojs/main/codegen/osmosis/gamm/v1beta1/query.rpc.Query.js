"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRpcQueryExtension = exports.QueryClientImpl = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));

var _m0 = _interopRequireWildcard(require("protobufjs/minimal"));

var _stargate = require("@cosmjs/stargate");

var _query = require("./query");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var QueryClientImpl = /*#__PURE__*/function () {
  function QueryClientImpl(rpc) {
    (0, _classCallCheck2["default"])(this, QueryClientImpl);
    (0, _defineProperty2["default"])(this, "rpc", void 0);
    this.rpc = rpc;
    this.pools = this.pools.bind(this);
    this.numPools = this.numPools.bind(this);
    this.totalLiquidity = this.totalLiquidity.bind(this);
    this.pool = this.pool.bind(this);
    this.poolType = this.poolType.bind(this);
    this.poolParams = this.poolParams.bind(this);
    this.totalPoolLiquidity = this.totalPoolLiquidity.bind(this);
    this.totalShares = this.totalShares.bind(this);
    this.spotPrice = this.spotPrice.bind(this);
    this.estimateSwapExactAmountIn = this.estimateSwapExactAmountIn.bind(this);
    this.estimateSwapExactAmountOut = this.estimateSwapExactAmountOut.bind(this);
  }

  (0, _createClass2["default"])(QueryClientImpl, [{
    key: "pools",
    value: function pools() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
        pagination: undefined
      };

      var data = _query.QueryPoolsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "Pools", data);
      return promise.then(function (data) {
        return _query.QueryPoolsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "numPools",
    value: function numPools() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.QueryNumPoolsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "NumPools", data);
      return promise.then(function (data) {
        return _query.QueryNumPoolsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "totalLiquidity",
    value: function totalLiquidity() {
      var request = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      var data = _query.QueryTotalLiquidityRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "TotalLiquidity", data);
      return promise.then(function (data) {
        return _query.QueryTotalLiquidityResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "pool",
    value: function pool(request) {
      var data = _query.QueryPoolRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "Pool", data);
      return promise.then(function (data) {
        return _query.QueryPoolResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "poolType",
    value: function poolType(request) {
      var data = _query.QueryPoolTypeRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "PoolType", data);
      return promise.then(function (data) {
        return _query.QueryPoolTypeResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "poolParams",
    value: function poolParams(request) {
      var data = _query.QueryPoolParamsRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "PoolParams", data);
      return promise.then(function (data) {
        return _query.QueryPoolParamsResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "totalPoolLiquidity",
    value: function totalPoolLiquidity(request) {
      var data = _query.QueryTotalPoolLiquidityRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "TotalPoolLiquidity", data);
      return promise.then(function (data) {
        return _query.QueryTotalPoolLiquidityResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "totalShares",
    value: function totalShares(request) {
      var data = _query.QueryTotalSharesRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "TotalShares", data);
      return promise.then(function (data) {
        return _query.QueryTotalSharesResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "spotPrice",
    value: function spotPrice(request) {
      var data = _query.QuerySpotPriceRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "SpotPrice", data);
      return promise.then(function (data) {
        return _query.QuerySpotPriceResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "estimateSwapExactAmountIn",
    value: function estimateSwapExactAmountIn(request) {
      var data = _query.QuerySwapExactAmountInRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "EstimateSwapExactAmountIn", data);
      return promise.then(function (data) {
        return _query.QuerySwapExactAmountInResponse.decode(new _m0.Reader(data));
      });
    }
  }, {
    key: "estimateSwapExactAmountOut",
    value: function estimateSwapExactAmountOut(request) {
      var data = _query.QuerySwapExactAmountOutRequest.encode(request).finish();

      var promise = this.rpc.request("osmosis.gamm.v1beta1.Query", "EstimateSwapExactAmountOut", data);
      return promise.then(function (data) {
        return _query.QuerySwapExactAmountOutResponse.decode(new _m0.Reader(data));
      });
    }
  }]);
  return QueryClientImpl;
}();

exports.QueryClientImpl = QueryClientImpl;

var createRpcQueryExtension = function createRpcQueryExtension(base) {
  var rpc = (0, _stargate.createProtobufRpcClient)(base);
  var queryService = new QueryClientImpl(rpc);
  return {
    pools: function pools(request) {
      return queryService.pools(request);
    },
    numPools: function numPools(request) {
      return queryService.numPools(request);
    },
    totalLiquidity: function totalLiquidity(request) {
      return queryService.totalLiquidity(request);
    },
    pool: function pool(request) {
      return queryService.pool(request);
    },
    poolType: function poolType(request) {
      return queryService.poolType(request);
    },
    poolParams: function poolParams(request) {
      return queryService.poolParams(request);
    },
    totalPoolLiquidity: function totalPoolLiquidity(request) {
      return queryService.totalPoolLiquidity(request);
    },
    totalShares: function totalShares(request) {
      return queryService.totalShares(request);
    },
    spotPrice: function spotPrice(request) {
      return queryService.spotPrice(request);
    },
    estimateSwapExactAmountIn: function estimateSwapExactAmountIn(request) {
      return queryService.estimateSwapExactAmountIn(request);
    },
    estimateSwapExactAmountOut: function estimateSwapExactAmountOut(request) {
      return queryService.estimateSwapExactAmountOut(request);
    }
  };
};

exports.createRpcQueryExtension = createRpcQueryExtension;