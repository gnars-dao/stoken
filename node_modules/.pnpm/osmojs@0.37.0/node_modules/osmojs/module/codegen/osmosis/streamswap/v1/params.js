import { Coin } from "../../../cosmos/base/v1beta1/coin";
import { Duration } from "../../../google/protobuf/duration";
import * as _m0 from "protobufjs/minimal";
/** Params holds parameters for the streamswap module */

function createBaseParams() {
  return {
    saleCreationFee: [],
    saleCreationFeeRecipient: "",
    minDurationUntilStartTime: undefined,
    minSaleDuration: undefined
  };
}

export const Params = {
  encode(message, writer = _m0.Writer.create()) {
    for (const v of message.saleCreationFee) {
      Coin.encode(v, writer.uint32(10).fork()).ldelim();
    }

    if (message.saleCreationFeeRecipient !== "") {
      writer.uint32(18).string(message.saleCreationFeeRecipient);
    }

    if (message.minDurationUntilStartTime !== undefined) {
      Duration.encode(message.minDurationUntilStartTime, writer.uint32(26).fork()).ldelim();
    }

    if (message.minSaleDuration !== undefined) {
      Duration.encode(message.minSaleDuration, writer.uint32(34).fork()).ldelim();
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.saleCreationFee.push(Coin.decode(reader, reader.uint32()));
          break;

        case 2:
          message.saleCreationFeeRecipient = reader.string();
          break;

        case 3:
          message.minDurationUntilStartTime = Duration.decode(reader, reader.uint32());
          break;

        case 4:
          message.minSaleDuration = Duration.decode(reader, reader.uint32());
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$saleCreationF, _object$saleCreationF2;

    const message = createBaseParams();
    message.saleCreationFee = ((_object$saleCreationF = object.saleCreationFee) === null || _object$saleCreationF === void 0 ? void 0 : _object$saleCreationF.map(e => Coin.fromPartial(e))) || [];
    message.saleCreationFeeRecipient = (_object$saleCreationF2 = object.saleCreationFeeRecipient) !== null && _object$saleCreationF2 !== void 0 ? _object$saleCreationF2 : "";
    message.minDurationUntilStartTime = object.minDurationUntilStartTime !== undefined && object.minDurationUntilStartTime !== null ? Duration.fromPartial(object.minDurationUntilStartTime) : undefined;
    message.minSaleDuration = object.minSaleDuration !== undefined && object.minSaleDuration !== null ? Duration.fromPartial(object.minSaleDuration) : undefined;
    return message;
  }

};