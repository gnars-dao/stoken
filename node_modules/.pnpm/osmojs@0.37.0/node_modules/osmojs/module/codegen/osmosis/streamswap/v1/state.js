import { Timestamp } from "../../../google/protobuf/timestamp";
import * as _m0 from "protobufjs/minimal";
import { toTimestamp, Long, fromTimestamp } from "../../../helpers";

function createBaseSale() {
  return {
    treasury: "",
    id: Long.UZERO,
    tokenOut: "",
    tokenIn: "",
    tokenOutSupply: "",
    startTime: undefined,
    endTime: undefined,
    round: Long.ZERO,
    endRound: Long.ZERO,
    outRemaining: "",
    outSold: "",
    outPerShare: "",
    staked: "",
    income: "",
    shares: "",
    name: "",
    url: ""
  };
}

export const Sale = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.treasury !== "") {
      writer.uint32(10).string(message.treasury);
    }

    if (!message.id.isZero()) {
      writer.uint32(16).uint64(message.id);
    }

    if (message.tokenOut !== "") {
      writer.uint32(26).string(message.tokenOut);
    }

    if (message.tokenIn !== "") {
      writer.uint32(34).string(message.tokenIn);
    }

    if (message.tokenOutSupply !== "") {
      writer.uint32(42).string(message.tokenOutSupply);
    }

    if (message.startTime !== undefined) {
      Timestamp.encode(toTimestamp(message.startTime), writer.uint32(50).fork()).ldelim();
    }

    if (message.endTime !== undefined) {
      Timestamp.encode(toTimestamp(message.endTime), writer.uint32(58).fork()).ldelim();
    }

    if (!message.round.isZero()) {
      writer.uint32(64).int64(message.round);
    }

    if (!message.endRound.isZero()) {
      writer.uint32(72).int64(message.endRound);
    }

    if (message.outRemaining !== "") {
      writer.uint32(82).string(message.outRemaining);
    }

    if (message.outSold !== "") {
      writer.uint32(90).string(message.outSold);
    }

    if (message.outPerShare !== "") {
      writer.uint32(98).string(message.outPerShare);
    }

    if (message.staked !== "") {
      writer.uint32(106).string(message.staked);
    }

    if (message.income !== "") {
      writer.uint32(114).string(message.income);
    }

    if (message.shares !== "") {
      writer.uint32(122).string(message.shares);
    }

    if (message.name !== "") {
      writer.uint32(162).string(message.name);
    }

    if (message.url !== "") {
      writer.uint32(170).string(message.url);
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseSale();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.treasury = reader.string();
          break;

        case 2:
          message.id = reader.uint64();
          break;

        case 3:
          message.tokenOut = reader.string();
          break;

        case 4:
          message.tokenIn = reader.string();
          break;

        case 5:
          message.tokenOutSupply = reader.string();
          break;

        case 6:
          message.startTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          break;

        case 7:
          message.endTime = fromTimestamp(Timestamp.decode(reader, reader.uint32()));
          break;

        case 8:
          message.round = reader.int64();
          break;

        case 9:
          message.endRound = reader.int64();
          break;

        case 10:
          message.outRemaining = reader.string();
          break;

        case 11:
          message.outSold = reader.string();
          break;

        case 12:
          message.outPerShare = reader.string();
          break;

        case 13:
          message.staked = reader.string();
          break;

        case 14:
          message.income = reader.string();
          break;

        case 15:
          message.shares = reader.string();
          break;

        case 20:
          message.name = reader.string();
          break;

        case 21:
          message.url = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$treasury, _object$tokenOut, _object$tokenIn, _object$tokenOutSuppl, _object$startTime, _object$endTime, _object$outRemaining, _object$outSold, _object$outPerShare, _object$staked, _object$income, _object$shares, _object$name, _object$url;

    const message = createBaseSale();
    message.treasury = (_object$treasury = object.treasury) !== null && _object$treasury !== void 0 ? _object$treasury : "";
    message.id = object.id !== undefined && object.id !== null ? Long.fromValue(object.id) : Long.UZERO;
    message.tokenOut = (_object$tokenOut = object.tokenOut) !== null && _object$tokenOut !== void 0 ? _object$tokenOut : "";
    message.tokenIn = (_object$tokenIn = object.tokenIn) !== null && _object$tokenIn !== void 0 ? _object$tokenIn : "";
    message.tokenOutSupply = (_object$tokenOutSuppl = object.tokenOutSupply) !== null && _object$tokenOutSuppl !== void 0 ? _object$tokenOutSuppl : "";
    message.startTime = (_object$startTime = object.startTime) !== null && _object$startTime !== void 0 ? _object$startTime : undefined;
    message.endTime = (_object$endTime = object.endTime) !== null && _object$endTime !== void 0 ? _object$endTime : undefined;
    message.round = object.round !== undefined && object.round !== null ? Long.fromValue(object.round) : Long.ZERO;
    message.endRound = object.endRound !== undefined && object.endRound !== null ? Long.fromValue(object.endRound) : Long.ZERO;
    message.outRemaining = (_object$outRemaining = object.outRemaining) !== null && _object$outRemaining !== void 0 ? _object$outRemaining : "";
    message.outSold = (_object$outSold = object.outSold) !== null && _object$outSold !== void 0 ? _object$outSold : "";
    message.outPerShare = (_object$outPerShare = object.outPerShare) !== null && _object$outPerShare !== void 0 ? _object$outPerShare : "";
    message.staked = (_object$staked = object.staked) !== null && _object$staked !== void 0 ? _object$staked : "";
    message.income = (_object$income = object.income) !== null && _object$income !== void 0 ? _object$income : "";
    message.shares = (_object$shares = object.shares) !== null && _object$shares !== void 0 ? _object$shares : "";
    message.name = (_object$name = object.name) !== null && _object$name !== void 0 ? _object$name : "";
    message.url = (_object$url = object.url) !== null && _object$url !== void 0 ? _object$url : "";
    return message;
  }

};

function createBaseUserPosition() {
  return {
    shares: "",
    staked: "",
    outPerShare: "",
    spent: "",
    purchased: ""
  };
}

export const UserPosition = {
  encode(message, writer = _m0.Writer.create()) {
    if (message.shares !== "") {
      writer.uint32(10).string(message.shares);
    }

    if (message.staked !== "") {
      writer.uint32(18).string(message.staked);
    }

    if (message.outPerShare !== "") {
      writer.uint32(26).string(message.outPerShare);
    }

    if (message.spent !== "") {
      writer.uint32(34).string(message.spent);
    }

    if (message.purchased !== "") {
      writer.uint32(42).string(message.purchased);
    }

    return writer;
  },

  decode(input, length) {
    const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUserPosition();

    while (reader.pos < end) {
      const tag = reader.uint32();

      switch (tag >>> 3) {
        case 1:
          message.shares = reader.string();
          break;

        case 2:
          message.staked = reader.string();
          break;

        case 3:
          message.outPerShare = reader.string();
          break;

        case 4:
          message.spent = reader.string();
          break;

        case 5:
          message.purchased = reader.string();
          break;

        default:
          reader.skipType(tag & 7);
          break;
      }
    }

    return message;
  },

  fromPartial(object) {
    var _object$shares2, _object$staked2, _object$outPerShare2, _object$spent, _object$purchased;

    const message = createBaseUserPosition();
    message.shares = (_object$shares2 = object.shares) !== null && _object$shares2 !== void 0 ? _object$shares2 : "";
    message.staked = (_object$staked2 = object.staked) !== null && _object$staked2 !== void 0 ? _object$staked2 : "";
    message.outPerShare = (_object$outPerShare2 = object.outPerShare) !== null && _object$outPerShare2 !== void 0 ? _object$outPerShare2 : "";
    message.spent = (_object$spent = object.spent) !== null && _object$spent !== void 0 ? _object$spent : "";
    message.purchased = (_object$purchased = object.purchased) !== null && _object$purchased !== void 0 ? _object$purchased : "";
    return message;
  }

};