//@ts-nocheck
import { Long } from "../../../helpers";
export const AminoConverter = {
  "/osmosis.streamswap.v1.MsgCreateSale": {
    aminoType: "osmosis/streamswap/v1/create-sale",
    toAmino: ({
      creator,
      tokenIn,
      tokenOut,
      maxFee,
      startTime,
      duration,
      recipient,
      name,
      url
    }) => {
      return {
        creator,
        token_in: tokenIn,
        token_out: {
          denom: tokenOut.denom,
          amount: Long.fromValue(tokenOut.amount).toString()
        },
        max_fee: maxFee.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        })),
        start_time: startTime,
        duration: (duration * 1000000000).toString(),
        recipient,
        name,
        url
      };
    },
    fromAmino: ({
      creator,
      token_in,
      token_out,
      max_fee,
      start_time,
      duration,
      recipient,
      name,
      url
    }) => {
      return {
        creator,
        tokenIn: token_in,
        tokenOut: {
          denom: token_out.denom,
          amount: token_out.amount
        },
        maxFee: max_fee.map(el0 => ({
          denom: el0.denom,
          amount: el0.amount
        })),
        startTime: start_time,
        duration: {
          seconds: Long.fromNumber(Math.floor(parseInt(duration) / 1000000000)),
          nanos: parseInt(duration) % 1000000000
        },
        recipient,
        name,
        url
      };
    }
  },
  "/osmosis.streamswap.v1.MsgSubscribe": {
    aminoType: "osmosis/streamswap/v1/subscribe",
    toAmino: ({
      sender,
      saleId,
      amount
    }) => {
      return {
        sender,
        sale_id: saleId.toString(),
        amount
      };
    },
    fromAmino: ({
      sender,
      sale_id,
      amount
    }) => {
      return {
        sender,
        saleId: Long.fromString(sale_id),
        amount
      };
    }
  },
  "/osmosis.streamswap.v1.MsgWithdraw": {
    aminoType: "osmosis/streamswap/v1/withdraw",
    toAmino: ({
      sender,
      saleId,
      amount
    }) => {
      return {
        sender,
        sale_id: saleId.toString(),
        amount
      };
    },
    fromAmino: ({
      sender,
      sale_id,
      amount
    }) => {
      return {
        sender,
        saleId: Long.fromString(sale_id),
        amount
      };
    }
  },
  "/osmosis.streamswap.v1.MsgExitSale": {
    aminoType: "osmosis/streamswap/v1/exit-sale",
    toAmino: ({
      sender,
      saleId
    }) => {
      return {
        sender,
        sale_id: saleId.toString()
      };
    },
    fromAmino: ({
      sender,
      sale_id
    }) => {
      return {
        sender,
        saleId: Long.fromString(sale_id)
      };
    }
  },
  "/osmosis.streamswap.v1.MsgFinalizeSale": {
    aminoType: "osmosis/streamswap/v1/finalize-sale",
    toAmino: ({
      sender,
      saleId
    }) => {
      return {
        sender,
        sale_id: saleId.toString()
      };
    },
    fromAmino: ({
      sender,
      sale_id
    }) => {
      return {
        sender,
        saleId: Long.fromString(sale_id)
      };
    }
  }
};