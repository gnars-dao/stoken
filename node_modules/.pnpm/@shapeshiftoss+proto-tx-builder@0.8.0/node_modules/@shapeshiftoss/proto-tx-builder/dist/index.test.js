"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var crypto_1 = require("@cosmjs/crypto");
var proto_signing_1 = require("@cosmjs/proto-signing");
var fs = __importStar(require("fs"));
var glob_1 = __importDefault(require("glob"));
var path = __importStar(require("path"));
var _1 = require(".");
var prefixes = {
    osmosis: 'osmo',
    cosmos: 'cosmos',
    thorchain: 'thor',
    arkeo: 'arkeo',
    // terra: 'terra',
    // kava: 'kava',
    // secret: 'secret'
};
// TODO - combine this with prefixes as a chain config object
var coinTypes = { arkeo: 118, cosmos: 118, osmosis: 118, thorchain: 931 };
var defaultCoinType = coinTypes.cosmos;
// TODO - options argument with acceess to full path, or change prefixes to a general config obj per chain
function makeReferenceSeedSigner(prefix, coinType) {
    return __awaiter(this, void 0, void 0, function () {
        var w, accts;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    coinType = coinType || defaultCoinType;
                    return [4 /*yield*/, proto_signing_1.DirectSecp256k1HdWallet.fromMnemonic('alcohol woman abuse must during monitor noble actual mixed trade anger aisle', {
                            hdPaths: [
                                [
                                    crypto_1.Slip10RawIndex.hardened(44),
                                    crypto_1.Slip10RawIndex.hardened(coinType),
                                    crypto_1.Slip10RawIndex.hardened(0),
                                    crypto_1.Slip10RawIndex.normal(0),
                                    crypto_1.Slip10RawIndex.normal(0),
                                ],
                            ],
                            prefix: prefix,
                        })];
                case 1:
                    w = _a.sent();
                    return [4 /*yield*/, w.getAccounts()];
                case 2:
                    accts = _a.sent();
                    console.log("address: ".concat(accts[0].address));
                    return [2 /*return*/, w];
            }
        });
    });
}
var signers = Object.entries(prefixes)
    .map(function (_a) {
    var _b = __read(_a, 2), k = _b[0], v = _b[1];
    return [k, makeReferenceSeedSigner(v, coinTypes[k])];
})
    .reduce(function (acc, _a) {
    var _b = __read(_a, 2), k = _b[0], v = _b[1];
    return ((acc[k] = v), acc);
}, {});
describe('signs Tendermint transactions', function () {
    var e_1, _a;
    var _loop_1 = function (signedJsonPath) {
        var unsignedJsonPath = signedJsonPath.replace(/\.signed\.json$/, '.json');
        var signedJsonBasename = path.basename(signedJsonPath);
        var signedJsonPathSegments = /^([^.]+)\.([^.]+)\.([^.]+)\.(.+)\.signed\.json$/.exec(signedJsonBasename);
        if (!signedJsonPathSegments)
            throw new Error("test name doesn't match pattern: ".concat(signedJsonBasename));
        var _d = __read(signedJsonPathSegments, 5), txNum = _d[1], txNet = _d[2], txAsset = _d[3], txType = _d[4];
        it("signs a ".concat(txNet, " ").concat(txAsset, " reference ").concat(txType.replace(/[.-]/, ' '), " transaction (").concat(txNum, ")"), function () { return __awaiter(void 0, void 0, void 0, function () {
            var signer, referenceTx, referenceTxSigned, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(txAsset in signers))
                            throw new Error("unrecognized asset type '".concat(txAsset, "'"));
                        return [4 /*yield*/, signers[txAsset]
                            // get reference data
                        ];
                    case 1:
                        signer = _a.sent();
                        referenceTx = JSON.parse(fs.readFileSync(unsignedJsonPath, {
                            encoding: 'utf8',
                        }));
                        referenceTxSigned = JSON.parse(fs.readFileSync(signedJsonPath, { encoding: 'utf8' }));
                        expect(referenceTx).toBeTruthy();
                        expect(referenceTxSigned).toBeTruthy();
                        return [4 /*yield*/, (0, _1.sign)(referenceTx.signerAddress, referenceTx, signer, {
                                sequence: referenceTx.sequence,
                                accountNumber: referenceTx.account_number,
                                chainId: referenceTx.chain_id,
                            })];
                    case 2:
                        result = _a.sent();
                        expect(result.serialized).toBe(referenceTxSigned.serialized);
                        expect(result.signatures[0]).toBe(referenceTxSigned.signatures[0]);
                        return [2 /*return*/];
                }
            });
        }); });
    };
    try {
        for (var _b = __values(glob_1.default.sync('src/reference-data/**/*.signed.json')), _c = _b.next(); !_c.done; _c = _b.next()) {
            var signedJsonPath = _c.value;
            _loop_1(signedJsonPath);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
});
