"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Params = exports.protobufPackage = void 0;
/* eslint-disable */
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../cosmos/base/v1beta1/coin");
var duration_1 = require("../../google/protobuf/duration");
var timestamp_1 = require("../../google/protobuf/timestamp");
exports.protobufPackage = "arkeo.claim";
function createBaseParams() {
    return {
        airdropStartTime: undefined,
        durationUntilDecay: undefined,
        durationOfDecay: undefined,
        claimDenom: "",
        initialGasAmount: undefined,
    };
}
exports.Params = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.airdropStartTime !== undefined) {
            timestamp_1.Timestamp.encode(toTimestamp(message.airdropStartTime), writer.uint32(10).fork()).ldelim();
        }
        if (message.durationUntilDecay !== undefined) {
            duration_1.Duration.encode(message.durationUntilDecay, writer.uint32(18).fork()).ldelim();
        }
        if (message.durationOfDecay !== undefined) {
            duration_1.Duration.encode(message.durationOfDecay, writer.uint32(26).fork()).ldelim();
        }
        if (message.claimDenom !== "") {
            writer.uint32(34).string(message.claimDenom);
        }
        if (message.initialGasAmount !== undefined) {
            coin_1.Coin.encode(message.initialGasAmount, writer.uint32(42).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseParams();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.airdropStartTime = fromTimestamp(timestamp_1.Timestamp.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.durationUntilDecay = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.durationOfDecay = duration_1.Duration.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.claimDenom = reader.string();
                    break;
                case 5:
                    message.initialGasAmount = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            airdropStartTime: isSet(object.airdropStartTime) ? fromJsonTimestamp(object.airdropStartTime) : undefined,
            durationUntilDecay: isSet(object.durationUntilDecay) ? duration_1.Duration.fromJSON(object.durationUntilDecay) : undefined,
            durationOfDecay: isSet(object.durationOfDecay) ? duration_1.Duration.fromJSON(object.durationOfDecay) : undefined,
            claimDenom: isSet(object.claimDenom) ? String(object.claimDenom) : "",
            initialGasAmount: isSet(object.initialGasAmount) ? coin_1.Coin.fromJSON(object.initialGasAmount) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.airdropStartTime !== undefined && (obj.airdropStartTime = message.airdropStartTime.toISOString());
        message.durationUntilDecay !== undefined
            && (obj.durationUntilDecay = message.durationUntilDecay
                ? duration_1.Duration.toJSON(message.durationUntilDecay)
                : undefined);
        message.durationOfDecay !== undefined
            && (obj.durationOfDecay = message.durationOfDecay ? duration_1.Duration.toJSON(message.durationOfDecay) : undefined);
        message.claimDenom !== undefined && (obj.claimDenom = message.claimDenom);
        message.initialGasAmount !== undefined
            && (obj.initialGasAmount = message.initialGasAmount ? coin_1.Coin.toJSON(message.initialGasAmount) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseParams();
        message.airdropStartTime = (_a = object.airdropStartTime) !== null && _a !== void 0 ? _a : undefined;
        message.durationUntilDecay = (object.durationUntilDecay !== undefined && object.durationUntilDecay !== null)
            ? duration_1.Duration.fromPartial(object.durationUntilDecay)
            : undefined;
        message.durationOfDecay = (object.durationOfDecay !== undefined && object.durationOfDecay !== null)
            ? duration_1.Duration.fromPartial(object.durationOfDecay)
            : undefined;
        message.claimDenom = (_b = object.claimDenom) !== null && _b !== void 0 ? _b : "";
        message.initialGasAmount = (object.initialGasAmount !== undefined && object.initialGasAmount !== null)
            ? coin_1.Coin.fromPartial(object.initialGasAmount)
            : undefined;
        return message;
    },
};
function toTimestamp(date) {
    var seconds = date.getTime() / 1000;
    var nanos = (date.getTime() % 1000) * 1000000;
    return { seconds: seconds, nanos: nanos };
}
function fromTimestamp(t) {
    var millis = t.seconds * 1000;
    millis += t.nanos / 1000000;
    return new Date(millis);
}
function fromJsonTimestamp(o) {
    if (o instanceof Date) {
        return o;
    }
    else if (typeof o === "string") {
        return new Date(o);
    }
    else {
        return fromTimestamp(timestamp_1.Timestamp.fromJSON(o));
    }
}
function isSet(value) {
    return value !== null && value !== undefined;
}
