import Long from "long";
import _m0 from "protobufjs/minimal";
import { PubKeySet } from "../../../../../thorchain/v1/common/common";
export declare enum NodeStatus {
    Unknown = 0,
    Whitelisted = 1,
    Standby = 2,
    Ready = 3,
    Active = 4,
    Disabled = 5,
    UNRECOGNIZED = -1
}
export declare function nodeStatusFromJSON(object: any): NodeStatus;
export declare function nodeStatusToJSON(object: NodeStatus): string;
export declare enum NodeType {
    TypeValidator = 0,
    TypeVault = 1,
    TypeUnknown = 2,
    UNRECOGNIZED = -1
}
export declare function nodeTypeFromJSON(object: any): NodeType;
export declare function nodeTypeToJSON(object: NodeType): string;
export interface NodeAccount {
    nodeAddress: Uint8Array;
    status: NodeStatus;
    pubKeySet?: PubKeySet;
    validatorConsPubKey: string;
    bond: string;
    activeBlockHeight: Long;
    bondAddress: string;
    statusSince: Long;
    signerMembership: string[];
    requestedToLeave: boolean;
    forcedToLeave: boolean;
    leaveScore: Long;
    ipAddress: string;
    version: string;
    type: NodeType;
}
export interface BondProvider {
    bondAddress: Uint8Array;
    bond: string;
}
export interface BondProviders {
    nodeAddress: Uint8Array;
    nodeOperatorFee: string;
    providers: BondProvider[];
}
export declare const NodeAccount: {
    encode(message: NodeAccount, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): NodeAccount;
    fromJSON(object: any): NodeAccount;
    toJSON(message: NodeAccount): unknown;
    fromPartial<I extends {
        nodeAddress?: Uint8Array | undefined;
        status?: NodeStatus | undefined;
        pubKeySet?: {
            secp256k1?: string | undefined;
            ed25519?: string | undefined;
        } | undefined;
        validatorConsPubKey?: string | undefined;
        bond?: string | undefined;
        activeBlockHeight?: string | number | Long.Long | undefined;
        bondAddress?: string | undefined;
        statusSince?: string | number | Long.Long | undefined;
        signerMembership?: string[] | undefined;
        requestedToLeave?: boolean | undefined;
        forcedToLeave?: boolean | undefined;
        leaveScore?: string | number | Long.Long | undefined;
        ipAddress?: string | undefined;
        version?: string | undefined;
        type?: NodeType | undefined;
    } & {
        nodeAddress?: Uint8Array | undefined;
        status?: NodeStatus | undefined;
        pubKeySet?: ({
            secp256k1?: string | undefined;
            ed25519?: string | undefined;
        } & {
            secp256k1?: string | undefined;
            ed25519?: string | undefined;
        } & Record<Exclude<keyof I["pubKeySet"], keyof PubKeySet>, never>) | undefined;
        validatorConsPubKey?: string | undefined;
        bond?: string | undefined;
        activeBlockHeight?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["activeBlockHeight"], keyof Long.Long>, never>) | undefined;
        bondAddress?: string | undefined;
        statusSince?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["statusSince"], keyof Long.Long>, never>) | undefined;
        signerMembership?: (string[] & string[] & Record<Exclude<keyof I["signerMembership"], keyof string[]>, never>) | undefined;
        requestedToLeave?: boolean | undefined;
        forcedToLeave?: boolean | undefined;
        leaveScore?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["leaveScore"], keyof Long.Long>, never>) | undefined;
        ipAddress?: string | undefined;
        version?: string | undefined;
        type?: NodeType | undefined;
    } & Record<Exclude<keyof I, keyof NodeAccount>, never>>(object: I): NodeAccount;
};
export declare const BondProvider: {
    encode(message: BondProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BondProvider;
    fromJSON(object: any): BondProvider;
    toJSON(message: BondProvider): unknown;
    fromPartial<I extends {
        bondAddress?: Uint8Array | undefined;
        bond?: string | undefined;
    } & {
        bondAddress?: Uint8Array | undefined;
        bond?: string | undefined;
    } & Record<Exclude<keyof I, keyof BondProvider>, never>>(object: I): BondProvider;
};
export declare const BondProviders: {
    encode(message: BondProviders, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): BondProviders;
    fromJSON(object: any): BondProviders;
    toJSON(message: BondProviders): unknown;
    fromPartial<I extends {
        nodeAddress?: Uint8Array | undefined;
        nodeOperatorFee?: string | undefined;
        providers?: {
            bondAddress?: Uint8Array | undefined;
            bond?: string | undefined;
        }[] | undefined;
    } & {
        nodeAddress?: Uint8Array | undefined;
        nodeOperatorFee?: string | undefined;
        providers?: ({
            bondAddress?: Uint8Array | undefined;
            bond?: string | undefined;
        }[] & ({
            bondAddress?: Uint8Array | undefined;
            bond?: string | undefined;
        } & {
            bondAddress?: Uint8Array | undefined;
            bond?: string | undefined;
        } & Record<Exclude<keyof I["providers"][number], keyof BondProvider>, never>)[] & Record<Exclude<keyof I["providers"], keyof {
            bondAddress?: Uint8Array | undefined;
            bond?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof BondProviders>, never>>(object: I): BondProviders;
};
