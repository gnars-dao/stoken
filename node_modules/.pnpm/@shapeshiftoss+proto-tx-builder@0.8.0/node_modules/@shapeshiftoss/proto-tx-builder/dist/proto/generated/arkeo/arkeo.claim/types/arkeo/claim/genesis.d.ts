import _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { ClaimRecord } from "./claim_record";
import { Params } from "./params";
export declare const protobufPackage = "arkeo.claim";
/** GenesisState defines the claim module's genesis state. */
export interface GenesisState {
    /** balance of the claim module's account */
    moduleAccountBalance: Coin | undefined;
    params: Params | undefined;
    /** list of claim records, one for every airdrop recipient */
    claimRecords: ClaimRecord[];
}
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        moduleAccountBalance?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        params?: {
            airdropStartTime?: Date | undefined;
            durationUntilDecay?: {
                seconds?: number | undefined;
                nanos?: number | undefined;
            } | undefined;
            durationOfDecay?: {
                seconds?: number | undefined;
                nanos?: number | undefined;
            } | undefined;
            claimDenom?: string | undefined;
            initialGasAmount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } | undefined;
        claimRecords?: {
            chain?: import("./claim_record").Chain | undefined;
            address?: string | undefined;
            amountClaim?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            amountVote?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            amountDelegate?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            isTransferable?: boolean | undefined;
        }[] | undefined;
    } & {
        moduleAccountBalance?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["moduleAccountBalance"], keyof Coin>]: never; }) | undefined;
        params?: ({
            airdropStartTime?: Date | undefined;
            durationUntilDecay?: {
                seconds?: number | undefined;
                nanos?: number | undefined;
            } | undefined;
            durationOfDecay?: {
                seconds?: number | undefined;
                nanos?: number | undefined;
            } | undefined;
            claimDenom?: string | undefined;
            initialGasAmount?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
        } & {
            airdropStartTime?: Date | undefined;
            durationUntilDecay?: ({
                seconds?: number | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: number | undefined;
                nanos?: number | undefined;
            } & { [K_1 in Exclude<keyof I["params"]["durationUntilDecay"], keyof import("../../google/protobuf/duration").Duration>]: never; }) | undefined;
            durationOfDecay?: ({
                seconds?: number | undefined;
                nanos?: number | undefined;
            } & {
                seconds?: number | undefined;
                nanos?: number | undefined;
            } & { [K_2 in Exclude<keyof I["params"]["durationOfDecay"], keyof import("../../google/protobuf/duration").Duration>]: never; }) | undefined;
            claimDenom?: string | undefined;
            initialGasAmount?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_3 in Exclude<keyof I["params"]["initialGasAmount"], keyof Coin>]: never; }) | undefined;
        } & { [K_4 in Exclude<keyof I["params"], keyof Params>]: never; }) | undefined;
        claimRecords?: ({
            chain?: import("./claim_record").Chain | undefined;
            address?: string | undefined;
            amountClaim?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            amountVote?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            amountDelegate?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            isTransferable?: boolean | undefined;
        }[] & ({
            chain?: import("./claim_record").Chain | undefined;
            address?: string | undefined;
            amountClaim?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            amountVote?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            amountDelegate?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            isTransferable?: boolean | undefined;
        } & {
            chain?: import("./claim_record").Chain | undefined;
            address?: string | undefined;
            amountClaim?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_5 in Exclude<keyof I["claimRecords"][number]["amountClaim"], keyof Coin>]: never; }) | undefined;
            amountVote?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_6 in Exclude<keyof I["claimRecords"][number]["amountVote"], keyof Coin>]: never; }) | undefined;
            amountDelegate?: ({
                denom?: string | undefined;
                amount?: string | undefined;
            } & {
                denom?: string | undefined;
                amount?: string | undefined;
            } & { [K_7 in Exclude<keyof I["claimRecords"][number]["amountDelegate"], keyof Coin>]: never; }) | undefined;
            isTransferable?: boolean | undefined;
        } & { [K_8 in Exclude<keyof I["claimRecords"][number], keyof ClaimRecord>]: never; })[] & { [K_9 in Exclude<keyof I["claimRecords"], keyof {
            chain?: import("./claim_record").Chain | undefined;
            address?: string | undefined;
            amountClaim?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            amountVote?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            amountDelegate?: {
                denom?: string | undefined;
                amount?: string | undefined;
            } | undefined;
            isTransferable?: boolean | undefined;
        }[]>]: never; }) | undefined;
    } & { [K_10 in Exclude<keyof I, keyof GenesisState>]: never; }>(object: I): GenesisState;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
