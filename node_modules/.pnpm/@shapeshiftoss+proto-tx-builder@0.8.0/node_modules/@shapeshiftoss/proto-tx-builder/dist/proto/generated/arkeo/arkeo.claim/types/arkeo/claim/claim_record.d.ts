import _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "arkeo.claim";
/** actions for arkeo chain */
export declare enum Action {
    ACTION_CLAIM = 0,
    ACTION_VOTE = 1,
    ACTION_DELEGATE = 2,
    UNRECOGNIZED = -1
}
export declare function actionFromJSON(object: any): Action;
export declare function actionToJSON(object: Action): string;
export declare enum Chain {
    ARKEO = 0,
    ETHEREUM = 1,
    UNRECOGNIZED = -1
}
export declare function chainFromJSON(object: any): Chain;
export declare function chainToJSON(object: Chain): string;
/** A Claim Records is the metadata of claim data per address */
export interface ClaimRecord {
    chain: Chain;
    /** arkeo address of claim user */
    address: string;
    /**
     * claimable amount per action (claim, vote, delegate - changed to 0 after
     * action completed)
     */
    amountClaim: Coin | undefined;
    amountVote: Coin | undefined;
    amountDelegate: Coin | undefined;
    isTransferable: boolean;
}
export declare const ClaimRecord: {
    encode(message: ClaimRecord, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ClaimRecord;
    fromJSON(object: any): ClaimRecord;
    toJSON(message: ClaimRecord): unknown;
    fromPartial<I extends {
        chain?: Chain | undefined;
        address?: string | undefined;
        amountClaim?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        amountVote?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        amountDelegate?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        isTransferable?: boolean | undefined;
    } & {
        chain?: Chain | undefined;
        address?: string | undefined;
        amountClaim?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["amountClaim"], keyof Coin>]: never; }) | undefined;
        amountVote?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_1 in Exclude<keyof I["amountVote"], keyof Coin>]: never; }) | undefined;
        amountDelegate?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I["amountDelegate"], keyof Coin>]: never; }) | undefined;
        isTransferable?: boolean | undefined;
    } & { [K_3 in Exclude<keyof I, keyof ClaimRecord>]: never; }>(object: I): ClaimRecord;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
