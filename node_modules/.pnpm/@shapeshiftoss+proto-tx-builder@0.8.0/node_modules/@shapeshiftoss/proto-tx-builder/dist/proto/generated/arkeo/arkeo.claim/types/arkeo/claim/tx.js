"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgAddClaimResponse = exports.MsgAddClaim = exports.MsgTransferClaimResponse = exports.MsgTransferClaim = exports.MsgClaimArkeoResponse = exports.MsgClaimArkeo = exports.MsgClaimEthResponse = exports.MsgClaimEth = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var claim_record_1 = require("./claim_record");
exports.protobufPackage = "arkeo.claim";
function createBaseMsgClaimEth() {
    return { creator: new Uint8Array(), ethAddress: "", signature: "" };
}
exports.MsgClaimEth = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.creator.length !== 0) {
            writer.uint32(10).bytes(message.creator);
        }
        if (message.ethAddress !== "") {
            writer.uint32(18).string(message.ethAddress);
        }
        if (message.signature !== "") {
            writer.uint32(26).string(message.signature);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimEth();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.bytes();
                    break;
                case 2:
                    message.ethAddress = reader.string();
                    break;
                case 3:
                    message.signature = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? bytesFromBase64(object.creator) : new Uint8Array(),
            ethAddress: isSet(object.ethAddress) ? String(object.ethAddress) : "",
            signature: isSet(object.signature) ? String(object.signature) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.creator !== undefined
            && (obj.creator = base64FromBytes(message.creator !== undefined ? message.creator : new Uint8Array()));
        message.ethAddress !== undefined && (obj.ethAddress = message.ethAddress);
        message.signature !== undefined && (obj.signature = message.signature);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseMsgClaimEth();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.ethAddress = (_b = object.ethAddress) !== null && _b !== void 0 ? _b : "";
        message.signature = (_c = object.signature) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseMsgClaimEthResponse() {
    return {};
}
exports.MsgClaimEthResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimEthResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgClaimEthResponse();
        return message;
    },
};
function createBaseMsgClaimArkeo() {
    return { creator: new Uint8Array() };
}
exports.MsgClaimArkeo = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.creator.length !== 0) {
            writer.uint32(10).bytes(message.creator);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimArkeo();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { creator: isSet(object.creator) ? bytesFromBase64(object.creator) : new Uint8Array() };
    },
    toJSON: function (message) {
        var obj = {};
        message.creator !== undefined
            && (obj.creator = base64FromBytes(message.creator !== undefined ? message.creator : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseMsgClaimArkeo();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : new Uint8Array();
        return message;
    },
};
function createBaseMsgClaimArkeoResponse() {
    return {};
}
exports.MsgClaimArkeoResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimArkeoResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgClaimArkeoResponse();
        return message;
    },
};
function createBaseMsgTransferClaim() {
    return { creator: new Uint8Array(), toAddress: new Uint8Array() };
}
exports.MsgTransferClaim = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.creator.length !== 0) {
            writer.uint32(10).bytes(message.creator);
        }
        if (message.toAddress.length !== 0) {
            writer.uint32(18).bytes(message.toAddress);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgTransferClaim();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.bytes();
                    break;
                case 2:
                    message.toAddress = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? bytesFromBase64(object.creator) : new Uint8Array(),
            toAddress: isSet(object.toAddress) ? bytesFromBase64(object.toAddress) : new Uint8Array(),
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.creator !== undefined
            && (obj.creator = base64FromBytes(message.creator !== undefined ? message.creator : new Uint8Array()));
        message.toAddress !== undefined
            && (obj.toAddress = base64FromBytes(message.toAddress !== undefined ? message.toAddress : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgTransferClaim();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.toAddress = (_b = object.toAddress) !== null && _b !== void 0 ? _b : new Uint8Array();
        return message;
    },
};
function createBaseMsgTransferClaimResponse() {
    return {};
}
exports.MsgTransferClaimResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgTransferClaimResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgTransferClaimResponse();
        return message;
    },
};
function createBaseMsgAddClaim() {
    return { creator: new Uint8Array(), chain: 0, address: "", amount: 0 };
}
exports.MsgAddClaim = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.creator.length !== 0) {
            writer.uint32(10).bytes(message.creator);
        }
        if (message.chain !== 0) {
            writer.uint32(16).int32(message.chain);
        }
        if (message.address !== "") {
            writer.uint32(26).string(message.address);
        }
        if (message.amount !== 0) {
            writer.uint32(32).int64(message.amount);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgAddClaim();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.bytes();
                    break;
                case 2:
                    message.chain = reader.int32();
                    break;
                case 3:
                    message.address = reader.string();
                    break;
                case 4:
                    message.amount = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? bytesFromBase64(object.creator) : new Uint8Array(),
            chain: isSet(object.chain) ? (0, claim_record_1.chainFromJSON)(object.chain) : 0,
            address: isSet(object.address) ? String(object.address) : "",
            amount: isSet(object.amount) ? Number(object.amount) : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.creator !== undefined
            && (obj.creator = base64FromBytes(message.creator !== undefined ? message.creator : new Uint8Array()));
        message.chain !== undefined && (obj.chain = (0, claim_record_1.chainToJSON)(message.chain));
        message.address !== undefined && (obj.address = message.address);
        message.amount !== undefined && (obj.amount = Math.round(message.amount));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseMsgAddClaim();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.chain = (_b = object.chain) !== null && _b !== void 0 ? _b : 0;
        message.address = (_c = object.address) !== null && _c !== void 0 ? _c : "";
        message.amount = (_d = object.amount) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseMsgAddClaimResponse() {
    return {};
}
exports.MsgAddClaimResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgAddClaimResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgAddClaimResponse();
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.ClaimEth = this.ClaimEth.bind(this);
        this.ClaimArkeo = this.ClaimArkeo.bind(this);
        this.TransferClaim = this.TransferClaim.bind(this);
        this.AddClaim = this.AddClaim.bind(this);
    }
    MsgClientImpl.prototype.ClaimEth = function (request) {
        var data = exports.MsgClaimEth.encode(request).finish();
        var promise = this.rpc.request("arkeo.claim.Msg", "ClaimEth", data);
        return promise.then(function (data) { return exports.MsgClaimEthResponse.decode(new minimal_1.default.Reader(data)); });
    };
    MsgClientImpl.prototype.ClaimArkeo = function (request) {
        var data = exports.MsgClaimArkeo.encode(request).finish();
        var promise = this.rpc.request("arkeo.claim.Msg", "ClaimArkeo", data);
        return promise.then(function (data) { return exports.MsgClaimArkeoResponse.decode(new minimal_1.default.Reader(data)); });
    };
    MsgClientImpl.prototype.TransferClaim = function (request) {
        var data = exports.MsgTransferClaim.encode(request).finish();
        var promise = this.rpc.request("arkeo.claim.Msg", "TransferClaim", data);
        return promise.then(function (data) { return exports.MsgTransferClaimResponse.decode(new minimal_1.default.Reader(data)); });
    };
    MsgClientImpl.prototype.AddClaim = function (request) {
        var data = exports.MsgAddClaim.encode(request).finish();
        var promise = this.rpc.request("arkeo.claim.Msg", "AddClaim", data);
        return promise.then(function (data) { return exports.MsgAddClaimResponse.decode(new minimal_1.default.Reader(data)); });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
var globalThis = (function () {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        var bin = globalThis.atob(b64);
        var arr = new Uint8Array(bin.length);
        for (var i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        var bin_1 = [];
        arr.forEach(function (byte) {
            bin_1.push(String.fromCharCode(byte));
        });
        return globalThis.btoa(bin_1.join(""));
    }
}
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
