import Long from "long";
import _m0 from "protobufjs/minimal";
export declare enum KeygenType {
    UnknownKeygen = 0,
    AsgardKeygen = 1,
    YggdrasilKeygen = 2,
    UNRECOGNIZED = -1
}
export declare function keygenTypeFromJSON(object: any): KeygenType;
export declare function keygenTypeToJSON(object: KeygenType): string;
export interface Keygen {
    id: string;
    type: KeygenType;
    members: string[];
}
export interface KeygenBlock {
    height: Long;
    keygens: Keygen[];
}
export declare const Keygen: {
    encode(message: Keygen, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Keygen;
    fromJSON(object: any): Keygen;
    toJSON(message: Keygen): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        type?: KeygenType | undefined;
        members?: string[] | undefined;
    } & {
        id?: string | undefined;
        type?: KeygenType | undefined;
        members?: (string[] & string[] & Record<Exclude<keyof I["members"], keyof string[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Keygen>, never>>(object: I): Keygen;
};
export declare const KeygenBlock: {
    encode(message: KeygenBlock, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): KeygenBlock;
    fromJSON(object: any): KeygenBlock;
    toJSON(message: KeygenBlock): unknown;
    fromPartial<I extends {
        height?: string | number | Long.Long | undefined;
        keygens?: {
            id?: string | undefined;
            type?: KeygenType | undefined;
            members?: string[] | undefined;
        }[] | undefined;
    } & {
        height?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["height"], keyof Long.Long>, never>) | undefined;
        keygens?: ({
            id?: string | undefined;
            type?: KeygenType | undefined;
            members?: string[] | undefined;
        }[] & ({
            id?: string | undefined;
            type?: KeygenType | undefined;
            members?: string[] | undefined;
        } & {
            id?: string | undefined;
            type?: KeygenType | undefined;
            members?: (string[] & string[] & Record<Exclude<keyof I["keygens"][number]["members"], keyof string[]>, never>) | undefined;
        } & Record<Exclude<keyof I["keygens"][number], keyof Keygen>, never>)[] & Record<Exclude<keyof I["keygens"], keyof {
            id?: string | undefined;
            type?: KeygenType | undefined;
            members?: string[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof KeygenBlock>, never>>(object: I): KeygenBlock;
};
