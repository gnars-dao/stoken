"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Jail = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseJail() {
    return {
        nodeAddress: new Uint8Array(),
        releaseHeight: long_1.default.ZERO,
        reason: "",
    };
}
exports.Jail = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.nodeAddress.length !== 0) {
            writer.uint32(10).bytes(message.nodeAddress);
        }
        if (!message.releaseHeight.isZero()) {
            writer.uint32(16).int64(message.releaseHeight);
        }
        if (message.reason !== "") {
            writer.uint32(26).string(message.reason);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseJail();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.nodeAddress = reader.bytes();
                    break;
                case 2:
                    message.releaseHeight = reader.int64();
                    break;
                case 3:
                    message.reason = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            nodeAddress: isSet(object.nodeAddress)
                ? bytesFromBase64(object.nodeAddress)
                : new Uint8Array(),
            releaseHeight: isSet(object.releaseHeight)
                ? long_1.default.fromString(object.releaseHeight)
                : long_1.default.ZERO,
            reason: isSet(object.reason) ? String(object.reason) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.nodeAddress !== undefined &&
            (obj.nodeAddress = base64FromBytes(message.nodeAddress !== undefined
                ? message.nodeAddress
                : new Uint8Array()));
        message.releaseHeight !== undefined &&
            (obj.releaseHeight = (message.releaseHeight || long_1.default.ZERO).toString());
        message.reason !== undefined && (obj.reason = message.reason);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseJail();
        message.nodeAddress = (_a = object.nodeAddress) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.releaseHeight =
            object.releaseHeight !== undefined && object.releaseHeight !== null
                ? long_1.default.fromValue(object.releaseHeight)
                : long_1.default.ZERO;
        message.reason = (_b = object.reason) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, "base64").toString("binary"); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, "binary").toString("base64"); });
function base64FromBytes(arr) {
    var e_1, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return btoa(bin.join(""));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
