import Long from "long";
import _m0 from "protobufjs/minimal";
import { Coin } from "../../../../../thorchain/v1/common/common";
export interface TxOutItem {
    chain: string;
    toAddress: string;
    vaultPubKey: string;
    coin?: Coin;
    memo: string;
    maxGas: Coin[];
    gasRate: Long;
    inHash: string;
    outHash: string;
    moduleName: string;
}
export interface TxOut {
    height: Long;
    txArray: TxOutItem[];
}
export declare const TxOutItem: {
    encode(message: TxOutItem, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TxOutItem;
    fromJSON(object: any): TxOutItem;
    toJSON(message: TxOutItem): unknown;
    fromPartial<I extends {
        chain?: string | undefined;
        toAddress?: string | undefined;
        vaultPubKey?: string | undefined;
        coin?: {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        } | undefined;
        memo?: string | undefined;
        maxGas?: {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[] | undefined;
        gasRate?: string | number | Long.Long | undefined;
        inHash?: string | undefined;
        outHash?: string | undefined;
        moduleName?: string | undefined;
    } & {
        chain?: string | undefined;
        toAddress?: string | undefined;
        vaultPubKey?: string | undefined;
        coin?: ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        } & {
            asset?: ({
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & Record<Exclude<keyof I["coin"]["asset"], keyof import("../../../../../thorchain/v1/common/common").Asset>, never>) | undefined;
            amount?: string | undefined;
            decimals?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["coin"]["decimals"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["coin"], keyof Coin>, never>) | undefined;
        memo?: string | undefined;
        maxGas?: ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[] & ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        } & {
            asset?: ({
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & Record<Exclude<keyof I["maxGas"][number]["asset"], keyof import("../../../../../thorchain/v1/common/common").Asset>, never>) | undefined;
            amount?: string | undefined;
            decimals?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["maxGas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["maxGas"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["maxGas"], keyof {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
        gasRate?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["gasRate"], keyof Long.Long>, never>) | undefined;
        inHash?: string | undefined;
        outHash?: string | undefined;
        moduleName?: string | undefined;
    } & Record<Exclude<keyof I, keyof TxOutItem>, never>>(object: I): TxOutItem;
};
export declare const TxOut: {
    encode(message: TxOut, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): TxOut;
    fromJSON(object: any): TxOut;
    toJSON(message: TxOut): unknown;
    fromPartial<I extends {
        height?: string | number | Long.Long | undefined;
        txArray?: {
            chain?: string | undefined;
            toAddress?: string | undefined;
            vaultPubKey?: string | undefined;
            coin?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            } | undefined;
            memo?: string | undefined;
            maxGas?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            gasRate?: string | number | Long.Long | undefined;
            inHash?: string | undefined;
            outHash?: string | undefined;
            moduleName?: string | undefined;
        }[] | undefined;
    } & {
        height?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["height"], keyof Long.Long>, never>) | undefined;
        txArray?: ({
            chain?: string | undefined;
            toAddress?: string | undefined;
            vaultPubKey?: string | undefined;
            coin?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            } | undefined;
            memo?: string | undefined;
            maxGas?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            gasRate?: string | number | Long.Long | undefined;
            inHash?: string | undefined;
            outHash?: string | undefined;
            moduleName?: string | undefined;
        }[] & ({
            chain?: string | undefined;
            toAddress?: string | undefined;
            vaultPubKey?: string | undefined;
            coin?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            } | undefined;
            memo?: string | undefined;
            maxGas?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            gasRate?: string | number | Long.Long | undefined;
            inHash?: string | undefined;
            outHash?: string | undefined;
            moduleName?: string | undefined;
        } & {
            chain?: string | undefined;
            toAddress?: string | undefined;
            vaultPubKey?: string | undefined;
            coin?: ({
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            } & {
                asset?: ({
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } & {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } & Record<Exclude<keyof I["txArray"][number]["coin"]["asset"], keyof import("../../../../../thorchain/v1/common/common").Asset>, never>) | undefined;
                amount?: string | undefined;
                decimals?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["txArray"][number]["coin"]["decimals"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["txArray"][number]["coin"], keyof Coin>, never>) | undefined;
            memo?: string | undefined;
            maxGas?: ({
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] & ({
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            } & {
                asset?: ({
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } & {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } & Record<Exclude<keyof I["txArray"][number]["maxGas"][number]["asset"], keyof import("../../../../../thorchain/v1/common/common").Asset>, never>) | undefined;
                amount?: string | undefined;
                decimals?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["txArray"][number]["maxGas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["txArray"][number]["maxGas"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["txArray"][number]["maxGas"], keyof {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[]>, never>) | undefined;
            gasRate?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["txArray"][number]["gasRate"], keyof Long.Long>, never>) | undefined;
            inHash?: string | undefined;
            outHash?: string | undefined;
            moduleName?: string | undefined;
        } & Record<Exclude<keyof I["txArray"][number], keyof TxOutItem>, never>)[] & Record<Exclude<keyof I["txArray"], keyof {
            chain?: string | undefined;
            toAddress?: string | undefined;
            vaultPubKey?: string | undefined;
            coin?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            } | undefined;
            memo?: string | undefined;
            maxGas?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            gasRate?: string | number | Long.Long | undefined;
            inHash?: string | undefined;
            outHash?: string | undefined;
            moduleName?: string | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof TxOut>, never>>(object: I): TxOut;
};
