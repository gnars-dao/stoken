"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TxOut = exports.TxOutItem = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var common_1 = require("../../../../../thorchain/v1/common/common");
function createBaseTxOutItem() {
    return {
        chain: "",
        toAddress: "",
        vaultPubKey: "",
        coin: undefined,
        memo: "",
        maxGas: [],
        gasRate: long_1.default.ZERO,
        inHash: "",
        outHash: "",
        moduleName: "",
    };
}
exports.TxOutItem = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.toAddress !== "") {
            writer.uint32(18).string(message.toAddress);
        }
        if (message.vaultPubKey !== "") {
            writer.uint32(26).string(message.vaultPubKey);
        }
        if (message.coin !== undefined) {
            common_1.Coin.encode(message.coin, writer.uint32(34).fork()).ldelim();
        }
        if (message.memo !== "") {
            writer.uint32(42).string(message.memo);
        }
        try {
            for (var _b = __values(message.maxGas), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                common_1.Coin.encode(v, writer.uint32(50).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (!message.gasRate.isZero()) {
            writer.uint32(56).int64(message.gasRate);
        }
        if (message.inHash !== "") {
            writer.uint32(66).string(message.inHash);
        }
        if (message.outHash !== "") {
            writer.uint32(74).string(message.outHash);
        }
        if (message.moduleName !== "") {
            writer.uint32(82).string(message.moduleName);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseTxOutItem();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.toAddress = reader.string();
                    break;
                case 3:
                    message.vaultPubKey = reader.string();
                    break;
                case 4:
                    message.coin = common_1.Coin.decode(reader, reader.uint32());
                    break;
                case 5:
                    message.memo = reader.string();
                    break;
                case 6:
                    message.maxGas.push(common_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.gasRate = reader.int64();
                    break;
                case 8:
                    message.inHash = reader.string();
                    break;
                case 9:
                    message.outHash = reader.string();
                    break;
                case 10:
                    message.moduleName = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            toAddress: isSet(object.toAddress) ? String(object.toAddress) : "",
            vaultPubKey: isSet(object.vaultPubKey) ? String(object.vaultPubKey) : "",
            coin: isSet(object.coin) ? common_1.Coin.fromJSON(object.coin) : undefined,
            memo: isSet(object.memo) ? String(object.memo) : "",
            maxGas: Array.isArray(object === null || object === void 0 ? void 0 : object.maxGas)
                ? object.maxGas.map(function (e) { return common_1.Coin.fromJSON(e); })
                : [],
            gasRate: isSet(object.gasRate)
                ? long_1.default.fromString(object.gasRate)
                : long_1.default.ZERO,
            inHash: isSet(object.inHash) ? String(object.inHash) : "",
            outHash: isSet(object.outHash) ? String(object.outHash) : "",
            moduleName: isSet(object["-"]) ? String(object["-"]) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.toAddress !== undefined && (obj.toAddress = message.toAddress);
        message.vaultPubKey !== undefined &&
            (obj.vaultPubKey = message.vaultPubKey);
        message.coin !== undefined &&
            (obj.coin = message.coin ? common_1.Coin.toJSON(message.coin) : undefined);
        message.memo !== undefined && (obj.memo = message.memo);
        if (message.maxGas) {
            obj.maxGas = message.maxGas.map(function (e) { return (e ? common_1.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.maxGas = [];
        }
        message.gasRate !== undefined &&
            (obj.gasRate = (message.gasRate || long_1.default.ZERO).toString());
        message.inHash !== undefined && (obj.inHash = message.inHash);
        message.outHash !== undefined && (obj.outHash = message.outHash);
        message.moduleName !== undefined && (obj["-"] = message.moduleName);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message = createBaseTxOutItem();
        message.chain = (_a = object.chain) !== null && _a !== void 0 ? _a : "";
        message.toAddress = (_b = object.toAddress) !== null && _b !== void 0 ? _b : "";
        message.vaultPubKey = (_c = object.vaultPubKey) !== null && _c !== void 0 ? _c : "";
        message.coin =
            object.coin !== undefined && object.coin !== null
                ? common_1.Coin.fromPartial(object.coin)
                : undefined;
        message.memo = (_d = object.memo) !== null && _d !== void 0 ? _d : "";
        message.maxGas = ((_e = object.maxGas) === null || _e === void 0 ? void 0 : _e.map(function (e) { return common_1.Coin.fromPartial(e); })) || [];
        message.gasRate =
            object.gasRate !== undefined && object.gasRate !== null
                ? long_1.default.fromValue(object.gasRate)
                : long_1.default.ZERO;
        message.inHash = (_f = object.inHash) !== null && _f !== void 0 ? _f : "";
        message.outHash = (_g = object.outHash) !== null && _g !== void 0 ? _g : "";
        message.moduleName = (_h = object.moduleName) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
function createBaseTxOut() {
    return { height: long_1.default.ZERO, txArray: [] };
}
exports.TxOut = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.height.isZero()) {
            writer.uint32(8).int64(message.height);
        }
        try {
            for (var _b = __values(message.txArray), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.TxOutItem.encode(v, writer.uint32(18).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseTxOut();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.height = reader.int64();
                    break;
                case 2:
                    message.txArray.push(exports.TxOutItem.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            height: isSet(object.height) ? long_1.default.fromString(object.height) : long_1.default.ZERO,
            txArray: Array.isArray(object === null || object === void 0 ? void 0 : object.txArray)
                ? object.txArray.map(function (e) { return exports.TxOutItem.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.height !== undefined &&
            (obj.height = (message.height || long_1.default.ZERO).toString());
        if (message.txArray) {
            obj.txArray = message.txArray.map(function (e) {
                return e ? exports.TxOutItem.toJSON(e) : undefined;
            });
        }
        else {
            obj.txArray = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseTxOut();
        message.height =
            object.height !== undefined && object.height !== null
                ? long_1.default.fromValue(object.height)
                : long_1.default.ZERO;
        message.txArray =
            ((_a = object.txArray) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.TxOutItem.fromPartial(e); })) || [];
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
