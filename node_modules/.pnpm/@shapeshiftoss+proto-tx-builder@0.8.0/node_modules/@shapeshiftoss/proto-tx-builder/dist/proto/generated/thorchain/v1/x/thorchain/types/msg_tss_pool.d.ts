import Long from "long";
import _m0 from "protobufjs/minimal";
import { KeygenType } from "../../../../../thorchain/v1/x/thorchain/types/type_keygen";
import { Blame } from "../../../../../thorchain/v1/x/thorchain/types/type_blame";
export interface MsgTssPool {
    id: string;
    poolPubKey: string;
    keygenType: KeygenType;
    pubKeys: string[];
    height: Long;
    blame?: Blame;
    chains: string[];
    signer: Uint8Array;
    keygenTime: Long;
}
export declare const MsgTssPool: {
    encode(message: MsgTssPool, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgTssPool;
    fromJSON(object: any): MsgTssPool;
    toJSON(message: MsgTssPool): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        poolPubKey?: string | undefined;
        keygenType?: KeygenType | undefined;
        pubKeys?: string[] | undefined;
        height?: string | number | Long.Long | undefined;
        blame?: {
            failReason?: string | undefined;
            isUnicast?: boolean | undefined;
            blameNodes?: {
                pubkey?: string | undefined;
                blameData?: Uint8Array | undefined;
                blameSignature?: Uint8Array | undefined;
            }[] | undefined;
        } | undefined;
        chains?: string[] | undefined;
        signer?: Uint8Array | undefined;
        keygenTime?: string | number | Long.Long | undefined;
    } & {
        id?: string | undefined;
        poolPubKey?: string | undefined;
        keygenType?: KeygenType | undefined;
        pubKeys?: (string[] & string[] & Record<Exclude<keyof I["pubKeys"], keyof string[]>, never>) | undefined;
        height?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["height"], keyof Long.Long>, never>) | undefined;
        blame?: ({
            failReason?: string | undefined;
            isUnicast?: boolean | undefined;
            blameNodes?: {
                pubkey?: string | undefined;
                blameData?: Uint8Array | undefined;
                blameSignature?: Uint8Array | undefined;
            }[] | undefined;
        } & {
            failReason?: string | undefined;
            isUnicast?: boolean | undefined;
            blameNodes?: ({
                pubkey?: string | undefined;
                blameData?: Uint8Array | undefined;
                blameSignature?: Uint8Array | undefined;
            }[] & ({
                pubkey?: string | undefined;
                blameData?: Uint8Array | undefined;
                blameSignature?: Uint8Array | undefined;
            } & {
                pubkey?: string | undefined;
                blameData?: Uint8Array | undefined;
                blameSignature?: Uint8Array | undefined;
            } & Record<Exclude<keyof I["blame"]["blameNodes"][number], keyof import("../../../../../thorchain/v1/x/thorchain/types/type_blame").Node>, never>)[] & Record<Exclude<keyof I["blame"]["blameNodes"], keyof {
                pubkey?: string | undefined;
                blameData?: Uint8Array | undefined;
                blameSignature?: Uint8Array | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["blame"], keyof Blame>, never>) | undefined;
        chains?: (string[] & string[] & Record<Exclude<keyof I["chains"], keyof string[]>, never>) | undefined;
        signer?: Uint8Array | undefined;
        keygenTime?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["keygenTime"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof MsgTssPool>, never>>(object: I): MsgTssPool;
};
