"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Network = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseNetwork() {
    return {
        bondRewardRune: "",
        totalBondUnits: "",
        burnedBep2Rune: "",
        burnedErc20Rune: "",
        LPIncomeSplit: long_1.default.ZERO,
        NodeIncomeSplit: long_1.default.ZERO,
    };
}
exports.Network = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.bondRewardRune !== "") {
            writer.uint32(10).string(message.bondRewardRune);
        }
        if (message.totalBondUnits !== "") {
            writer.uint32(18).string(message.totalBondUnits);
        }
        if (message.burnedBep2Rune !== "") {
            writer.uint32(26).string(message.burnedBep2Rune);
        }
        if (message.burnedErc20Rune !== "") {
            writer.uint32(34).string(message.burnedErc20Rune);
        }
        if (!message.LPIncomeSplit.isZero()) {
            writer.uint32(40).int64(message.LPIncomeSplit);
        }
        if (!message.NodeIncomeSplit.isZero()) {
            writer.uint32(48).int64(message.NodeIncomeSplit);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseNetwork();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.bondRewardRune = reader.string();
                    break;
                case 2:
                    message.totalBondUnits = reader.string();
                    break;
                case 3:
                    message.burnedBep2Rune = reader.string();
                    break;
                case 4:
                    message.burnedErc20Rune = reader.string();
                    break;
                case 5:
                    message.LPIncomeSplit = reader.int64();
                    break;
                case 6:
                    message.NodeIncomeSplit = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            bondRewardRune: isSet(object.bondRewardRune)
                ? String(object.bondRewardRune)
                : "",
            totalBondUnits: isSet(object.totalBondUnits)
                ? String(object.totalBondUnits)
                : "",
            burnedBep2Rune: isSet(object.burnedBep2Rune)
                ? String(object.burnedBep2Rune)
                : "",
            burnedErc20Rune: isSet(object.burnedErc20Rune)
                ? String(object.burnedErc20Rune)
                : "",
            LPIncomeSplit: isSet(object.LPIncomeSplit)
                ? long_1.default.fromString(object.LPIncomeSplit)
                : long_1.default.ZERO,
            NodeIncomeSplit: isSet(object.NodeIncomeSplit)
                ? long_1.default.fromString(object.NodeIncomeSplit)
                : long_1.default.ZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.bondRewardRune !== undefined &&
            (obj.bondRewardRune = message.bondRewardRune);
        message.totalBondUnits !== undefined &&
            (obj.totalBondUnits = message.totalBondUnits);
        message.burnedBep2Rune !== undefined &&
            (obj.burnedBep2Rune = message.burnedBep2Rune);
        message.burnedErc20Rune !== undefined &&
            (obj.burnedErc20Rune = message.burnedErc20Rune);
        message.LPIncomeSplit !== undefined &&
            (obj.LPIncomeSplit = (message.LPIncomeSplit || long_1.default.ZERO).toString());
        message.NodeIncomeSplit !== undefined &&
            (obj.NodeIncomeSplit = (message.NodeIncomeSplit || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseNetwork();
        message.bondRewardRune = (_a = object.bondRewardRune) !== null && _a !== void 0 ? _a : "";
        message.totalBondUnits = (_b = object.totalBondUnits) !== null && _b !== void 0 ? _b : "";
        message.burnedBep2Rune = (_c = object.burnedBep2Rune) !== null && _c !== void 0 ? _c : "";
        message.burnedErc20Rune = (_d = object.burnedErc20Rune) !== null && _d !== void 0 ? _d : "";
        message.LPIncomeSplit =
            object.LPIncomeSplit !== undefined && object.LPIncomeSplit !== null
                ? long_1.default.fromValue(object.LPIncomeSplit)
                : long_1.default.ZERO;
        message.NodeIncomeSplit =
            object.NodeIncomeSplit !== undefined && object.NodeIncomeSplit !== null
                ? long_1.default.fromValue(object.NodeIncomeSplit)
                : long_1.default.ZERO;
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
