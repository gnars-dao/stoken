"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Fee = exports.Tx = exports.PubKeySet = exports.Coin = exports.Asset = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
function createBaseAsset() {
    return { chain: "", symbol: "", ticker: "", synth: false };
}
exports.Asset = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.chain !== "") {
            writer.uint32(10).string(message.chain);
        }
        if (message.symbol !== "") {
            writer.uint32(18).string(message.symbol);
        }
        if (message.ticker !== "") {
            writer.uint32(26).string(message.ticker);
        }
        if (message.synth === true) {
            writer.uint32(32).bool(message.synth);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseAsset();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.chain = reader.string();
                    break;
                case 2:
                    message.symbol = reader.string();
                    break;
                case 3:
                    message.ticker = reader.string();
                    break;
                case 4:
                    message.synth = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            chain: isSet(object.chain) ? String(object.chain) : "",
            symbol: isSet(object.symbol) ? String(object.symbol) : "",
            ticker: isSet(object.ticker) ? String(object.ticker) : "",
            synth: isSet(object.synth) ? Boolean(object.synth) : false,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.chain !== undefined && (obj.chain = message.chain);
        message.symbol !== undefined && (obj.symbol = message.symbol);
        message.ticker !== undefined && (obj.ticker = message.ticker);
        message.synth !== undefined && (obj.synth = message.synth);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseAsset();
        message.chain = (_a = object.chain) !== null && _a !== void 0 ? _a : "";
        message.symbol = (_b = object.symbol) !== null && _b !== void 0 ? _b : "";
        message.ticker = (_c = object.ticker) !== null && _c !== void 0 ? _c : "";
        message.synth = (_d = object.synth) !== null && _d !== void 0 ? _d : false;
        return message;
    },
};
function createBaseCoin() {
    return { asset: undefined, amount: "", decimals: long_1.default.ZERO };
}
exports.Coin = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.asset !== undefined) {
            exports.Asset.encode(message.asset, writer.uint32(10).fork()).ldelim();
        }
        if (message.amount !== "") {
            writer.uint32(18).string(message.amount);
        }
        if (!message.decimals.isZero()) {
            writer.uint32(24).int64(message.decimals);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseCoin();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.asset = exports.Asset.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.amount = reader.string();
                    break;
                case 3:
                    message.decimals = reader.int64();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            asset: isSet(object.asset) ? exports.Asset.fromJSON(object.asset) : undefined,
            amount: isSet(object.amount) ? String(object.amount) : "",
            decimals: isSet(object.decimals)
                ? long_1.default.fromString(object.decimals)
                : long_1.default.ZERO,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.asset !== undefined &&
            (obj.asset = message.asset ? exports.Asset.toJSON(message.asset) : undefined);
        message.amount !== undefined && (obj.amount = message.amount);
        message.decimals !== undefined &&
            (obj.decimals = (message.decimals || long_1.default.ZERO).toString());
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseCoin();
        message.asset =
            object.asset !== undefined && object.asset !== null
                ? exports.Asset.fromPartial(object.asset)
                : undefined;
        message.amount = (_a = object.amount) !== null && _a !== void 0 ? _a : "";
        message.decimals =
            object.decimals !== undefined && object.decimals !== null
                ? long_1.default.fromValue(object.decimals)
                : long_1.default.ZERO;
        return message;
    },
};
function createBasePubKeySet() {
    return { secp256k1: "", ed25519: "" };
}
exports.PubKeySet = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.secp256k1 !== "") {
            writer.uint32(10).string(message.secp256k1);
        }
        if (message.ed25519 !== "") {
            writer.uint32(18).string(message.ed25519);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePubKeySet();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.secp256k1 = reader.string();
                    break;
                case 2:
                    message.ed25519 = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            secp256k1: isSet(object.secp256k1) ? String(object.secp256k1) : "",
            ed25519: isSet(object.ed25519) ? String(object.ed25519) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.secp256k1 !== undefined && (obj.secp256k1 = message.secp256k1);
        message.ed25519 !== undefined && (obj.ed25519 = message.ed25519);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBasePubKeySet();
        message.secp256k1 = (_a = object.secp256k1) !== null && _a !== void 0 ? _a : "";
        message.ed25519 = (_b = object.ed25519) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseTx() {
    return {
        id: "",
        chain: "",
        fromAddress: "",
        toAddress: "",
        coins: [],
        gas: [],
        memo: "",
    };
}
exports.Tx = {
    encode: function (message, writer) {
        var e_1, _a, e_2, _b;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.chain !== "") {
            writer.uint32(18).string(message.chain);
        }
        if (message.fromAddress !== "") {
            writer.uint32(26).string(message.fromAddress);
        }
        if (message.toAddress !== "") {
            writer.uint32(34).string(message.toAddress);
        }
        try {
            for (var _c = __values(message.coins), _d = _c.next(); !_d.done; _d = _c.next()) {
                var v = _d.value;
                exports.Coin.encode(v, writer.uint32(42).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _e = __values(message.gas), _f = _e.next(); !_f.done; _f = _e.next()) {
                var v = _f.value;
                exports.Coin.encode(v, writer.uint32(50).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (message.memo !== "") {
            writer.uint32(58).string(message.memo);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseTx();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.chain = reader.string();
                    break;
                case 3:
                    message.fromAddress = reader.string();
                    break;
                case 4:
                    message.toAddress = reader.string();
                    break;
                case 5:
                    message.coins.push(exports.Coin.decode(reader, reader.uint32()));
                    break;
                case 6:
                    message.gas.push(exports.Coin.decode(reader, reader.uint32()));
                    break;
                case 7:
                    message.memo = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            chain: isSet(object.chain) ? String(object.chain) : "",
            fromAddress: isSet(object.fromAddress) ? String(object.fromAddress) : "",
            toAddress: isSet(object.toAddress) ? String(object.toAddress) : "",
            coins: Array.isArray(object === null || object === void 0 ? void 0 : object.coins)
                ? object.coins.map(function (e) { return exports.Coin.fromJSON(e); })
                : [],
            gas: Array.isArray(object === null || object === void 0 ? void 0 : object.gas)
                ? object.gas.map(function (e) { return exports.Coin.fromJSON(e); })
                : [],
            memo: isSet(object.memo) ? String(object.memo) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.chain !== undefined && (obj.chain = message.chain);
        message.fromAddress !== undefined &&
            (obj.fromAddress = message.fromAddress);
        message.toAddress !== undefined && (obj.toAddress = message.toAddress);
        if (message.coins) {
            obj.coins = message.coins.map(function (e) { return (e ? exports.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.coins = [];
        }
        if (message.gas) {
            obj.gas = message.gas.map(function (e) { return (e ? exports.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.gas = [];
        }
        message.memo !== undefined && (obj.memo = message.memo);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBaseTx();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.chain = (_b = object.chain) !== null && _b !== void 0 ? _b : "";
        message.fromAddress = (_c = object.fromAddress) !== null && _c !== void 0 ? _c : "";
        message.toAddress = (_d = object.toAddress) !== null && _d !== void 0 ? _d : "";
        message.coins = ((_e = object.coins) === null || _e === void 0 ? void 0 : _e.map(function (e) { return exports.Coin.fromPartial(e); })) || [];
        message.gas = ((_f = object.gas) === null || _f === void 0 ? void 0 : _f.map(function (e) { return exports.Coin.fromPartial(e); })) || [];
        message.memo = (_g = object.memo) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
function createBaseFee() {
    return { coins: [], poolDeduct: "" };
}
exports.Fee = {
    encode: function (message, writer) {
        var e_3, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.coins), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Coin.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (message.poolDeduct !== "") {
            writer.uint32(18).string(message.poolDeduct);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseFee();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.coins.push(exports.Coin.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.poolDeduct = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            coins: Array.isArray(object === null || object === void 0 ? void 0 : object.coins)
                ? object.coins.map(function (e) { return exports.Coin.fromJSON(e); })
                : [],
            poolDeduct: isSet(object.poolDeduct) ? String(object.poolDeduct) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.coins) {
            obj.coins = message.coins.map(function (e) { return (e ? exports.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.coins = [];
        }
        message.poolDeduct !== undefined && (obj.poolDeduct = message.poolDeduct);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseFee();
        message.coins = ((_a = object.coins) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Coin.fromPartial(e); })) || [];
        message.poolDeduct = (_b = object.poolDeduct) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
