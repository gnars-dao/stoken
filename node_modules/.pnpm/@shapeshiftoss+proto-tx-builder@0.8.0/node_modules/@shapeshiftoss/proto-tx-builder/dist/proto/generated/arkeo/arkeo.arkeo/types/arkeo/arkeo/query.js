"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QueryClientImpl = exports.QueryActiveContractResponse = exports.QueryActiveContractRequest = exports.QueryAllContractResponse = exports.QueryAllContractRequest = exports.QueryFetchContractResponse = exports.QueryFetchContractRequest = exports.QueryAllProviderResponse = exports.QueryAllProviderRequest = exports.QueryFetchProviderResponse = exports.QueryFetchProviderRequest = exports.QueryParamsResponse = exports.QueryParamsRequest = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var pagination_1 = require("../../cosmos/base/query/v1beta1/pagination");
var keeper_1 = require("./keeper");
var params_1 = require("./params");
exports.protobufPackage = "arkeo.arkeo";
function createBaseQueryParamsRequest() {
    return {};
}
exports.QueryParamsRequest = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryParamsRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseQueryParamsRequest();
        return message;
    },
};
function createBaseQueryParamsResponse() {
    return { params: undefined };
}
exports.QueryParamsResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryParamsResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryParamsResponse();
        message.params = (object.params !== undefined && object.params !== null)
            ? params_1.Params.fromPartial(object.params)
            : undefined;
        return message;
    },
};
function createBaseQueryFetchProviderRequest() {
    return { pubkey: "", service: "" };
}
exports.QueryFetchProviderRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.pubkey !== "") {
            writer.uint32(10).string(message.pubkey);
        }
        if (message.service !== "") {
            writer.uint32(18).string(message.service);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryFetchProviderRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pubkey = reader.string();
                    break;
                case 2:
                    message.service = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            pubkey: isSet(object.pubkey) ? String(object.pubkey) : "",
            service: isSet(object.service) ? String(object.service) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.pubkey !== undefined && (obj.pubkey = message.pubkey);
        message.service !== undefined && (obj.service = message.service);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseQueryFetchProviderRequest();
        message.pubkey = (_a = object.pubkey) !== null && _a !== void 0 ? _a : "";
        message.service = (_b = object.service) !== null && _b !== void 0 ? _b : "";
        return message;
    },
};
function createBaseQueryFetchProviderResponse() {
    return { provider: undefined };
}
exports.QueryFetchProviderResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.provider !== undefined) {
            keeper_1.Provider.encode(message.provider, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryFetchProviderResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.provider = keeper_1.Provider.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { provider: isSet(object.provider) ? keeper_1.Provider.fromJSON(object.provider) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.provider !== undefined && (obj.provider = message.provider ? keeper_1.Provider.toJSON(message.provider) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryFetchProviderResponse();
        message.provider = (object.provider !== undefined && object.provider !== null)
            ? keeper_1.Provider.fromPartial(object.provider)
            : undefined;
        return message;
    },
};
function createBaseQueryAllProviderRequest() {
    return { pagination: undefined };
}
exports.QueryAllProviderRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryAllProviderRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.pagination !== undefined
            && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryAllProviderRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryAllProviderResponse() {
    return { provider: [], pagination: undefined };
}
exports.QueryAllProviderResponse = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.provider), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                keeper_1.Provider.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryAllProviderResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.provider.push(keeper_1.Provider.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            provider: Array.isArray(object === null || object === void 0 ? void 0 : object.provider) ? object.provider.map(function (e) { return keeper_1.Provider.fromJSON(e); }) : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.provider) {
            obj.provider = message.provider.map(function (e) { return e ? keeper_1.Provider.toJSON(e) : undefined; });
        }
        else {
            obj.provider = [];
        }
        message.pagination !== undefined
            && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryAllProviderResponse();
        message.provider = ((_a = object.provider) === null || _a === void 0 ? void 0 : _a.map(function (e) { return keeper_1.Provider.fromPartial(e); })) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryFetchContractRequest() {
    return { contractId: 0 };
}
exports.QueryFetchContractRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.contractId !== 0) {
            writer.uint32(8).uint64(message.contractId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryFetchContractRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contractId = longToNumber(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { contractId: isSet(object.contractId) ? Number(object.contractId) : 0 };
    },
    toJSON: function (message) {
        var obj = {};
        message.contractId !== undefined && (obj.contractId = Math.round(message.contractId));
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryFetchContractRequest();
        message.contractId = (_a = object.contractId) !== null && _a !== void 0 ? _a : 0;
        return message;
    },
};
function createBaseQueryFetchContractResponse() {
    return { contract: undefined };
}
exports.QueryFetchContractResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.contract !== undefined) {
            keeper_1.Contract.encode(message.contract, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryFetchContractResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contract = keeper_1.Contract.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { contract: isSet(object.contract) ? keeper_1.Contract.fromJSON(object.contract) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.contract !== undefined && (obj.contract = message.contract ? keeper_1.Contract.toJSON(message.contract) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryFetchContractResponse();
        message.contract = (object.contract !== undefined && object.contract !== null)
            ? keeper_1.Contract.fromPartial(object.contract)
            : undefined;
        return message;
    },
};
function createBaseQueryAllContractRequest() {
    return { pagination: undefined };
}
exports.QueryAllContractRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.pagination !== undefined) {
            pagination_1.PageRequest.encode(message.pagination, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryAllContractRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.pagination = pagination_1.PageRequest.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { pagination: isSet(object.pagination) ? pagination_1.PageRequest.fromJSON(object.pagination) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.pagination !== undefined
            && (obj.pagination = message.pagination ? pagination_1.PageRequest.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryAllContractRequest();
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageRequest.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryAllContractResponse() {
    return { contract: [], pagination: undefined };
}
exports.QueryAllContractResponse = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        try {
            for (var _b = __values(message.contract), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                keeper_1.Contract.encode(v, writer.uint32(10).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (message.pagination !== undefined) {
            pagination_1.PageResponse.encode(message.pagination, writer.uint32(18).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryAllContractResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contract.push(keeper_1.Contract.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.pagination = pagination_1.PageResponse.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            contract: Array.isArray(object === null || object === void 0 ? void 0 : object.contract) ? object.contract.map(function (e) { return keeper_1.Contract.fromJSON(e); }) : [],
            pagination: isSet(object.pagination) ? pagination_1.PageResponse.fromJSON(object.pagination) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.contract) {
            obj.contract = message.contract.map(function (e) { return e ? keeper_1.Contract.toJSON(e) : undefined; });
        }
        else {
            obj.contract = [];
        }
        message.pagination !== undefined
            && (obj.pagination = message.pagination ? pagination_1.PageResponse.toJSON(message.pagination) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseQueryAllContractResponse();
        message.contract = ((_a = object.contract) === null || _a === void 0 ? void 0 : _a.map(function (e) { return keeper_1.Contract.fromPartial(e); })) || [];
        message.pagination = (object.pagination !== undefined && object.pagination !== null)
            ? pagination_1.PageResponse.fromPartial(object.pagination)
            : undefined;
        return message;
    },
};
function createBaseQueryActiveContractRequest() {
    return { provider: "", service: "", spender: "" };
}
exports.QueryActiveContractRequest = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.provider !== "") {
            writer.uint32(10).string(message.provider);
        }
        if (message.service !== "") {
            writer.uint32(18).string(message.service);
        }
        if (message.spender !== "") {
            writer.uint32(26).string(message.spender);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryActiveContractRequest();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.provider = reader.string();
                    break;
                case 2:
                    message.service = reader.string();
                    break;
                case 3:
                    message.spender = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            provider: isSet(object.provider) ? String(object.provider) : "",
            service: isSet(object.service) ? String(object.service) : "",
            spender: isSet(object.spender) ? String(object.spender) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.provider !== undefined && (obj.provider = message.provider);
        message.service !== undefined && (obj.service = message.service);
        message.spender !== undefined && (obj.spender = message.spender);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseQueryActiveContractRequest();
        message.provider = (_a = object.provider) !== null && _a !== void 0 ? _a : "";
        message.service = (_b = object.service) !== null && _b !== void 0 ? _b : "";
        message.spender = (_c = object.spender) !== null && _c !== void 0 ? _c : "";
        return message;
    },
};
function createBaseQueryActiveContractResponse() {
    return { contract: undefined };
}
exports.QueryActiveContractResponse = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.contract !== undefined) {
            keeper_1.Contract.encode(message.contract, writer.uint32(10).fork()).ldelim();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseQueryActiveContractResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.contract = keeper_1.Contract.decode(reader, reader.uint32());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return { contract: isSet(object.contract) ? keeper_1.Contract.fromJSON(object.contract) : undefined };
    },
    toJSON: function (message) {
        var obj = {};
        message.contract !== undefined && (obj.contract = message.contract ? keeper_1.Contract.toJSON(message.contract) : undefined);
        return obj;
    },
    fromPartial: function (object) {
        var message = createBaseQueryActiveContractResponse();
        message.contract = (object.contract !== undefined && object.contract !== null)
            ? keeper_1.Contract.fromPartial(object.contract)
            : undefined;
        return message;
    },
};
var QueryClientImpl = /** @class */ (function () {
    function QueryClientImpl(rpc) {
        this.rpc = rpc;
        this.Params = this.Params.bind(this);
        this.FetchProvider = this.FetchProvider.bind(this);
        this.ProviderAll = this.ProviderAll.bind(this);
        this.FetchContract = this.FetchContract.bind(this);
        this.ContractAll = this.ContractAll.bind(this);
        this.ActiveContract = this.ActiveContract.bind(this);
    }
    QueryClientImpl.prototype.Params = function (request) {
        var data = exports.QueryParamsRequest.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Query", "Params", data);
        return promise.then(function (data) { return exports.QueryParamsResponse.decode(new minimal_1.default.Reader(data)); });
    };
    QueryClientImpl.prototype.FetchProvider = function (request) {
        var data = exports.QueryFetchProviderRequest.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Query", "FetchProvider", data);
        return promise.then(function (data) { return exports.QueryFetchProviderResponse.decode(new minimal_1.default.Reader(data)); });
    };
    QueryClientImpl.prototype.ProviderAll = function (request) {
        var data = exports.QueryAllProviderRequest.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Query", "ProviderAll", data);
        return promise.then(function (data) { return exports.QueryAllProviderResponse.decode(new minimal_1.default.Reader(data)); });
    };
    QueryClientImpl.prototype.FetchContract = function (request) {
        var data = exports.QueryFetchContractRequest.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Query", "FetchContract", data);
        return promise.then(function (data) { return exports.QueryFetchContractResponse.decode(new minimal_1.default.Reader(data)); });
    };
    QueryClientImpl.prototype.ContractAll = function (request) {
        var data = exports.QueryAllContractRequest.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Query", "ContractAll", data);
        return promise.then(function (data) { return exports.QueryAllContractResponse.decode(new minimal_1.default.Reader(data)); });
    };
    QueryClientImpl.prototype.ActiveContract = function (request) {
        var data = exports.QueryActiveContractRequest.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Query", "ActiveContract", data);
        return promise.then(function (data) { return exports.QueryActiveContractResponse.decode(new minimal_1.default.Reader(data)); });
    };
    return QueryClientImpl;
}());
exports.QueryClientImpl = QueryClientImpl;
var globalThis = (function () {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
