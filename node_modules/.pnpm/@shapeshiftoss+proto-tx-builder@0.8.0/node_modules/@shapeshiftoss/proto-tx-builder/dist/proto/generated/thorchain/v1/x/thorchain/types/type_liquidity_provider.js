"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LiquidityProvider = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var common_1 = require("../../../../../thorchain/v1/common/common");
function createBaseLiquidityProvider() {
    return {
        asset: undefined,
        runeAddress: "",
        assetAddress: "",
        lastAddHeight: long_1.default.ZERO,
        lastWithdrawHeight: long_1.default.ZERO,
        units: "",
        pendingRune: "",
        pendingAsset: "",
        pendingTxId: "",
        runeDepositValue: "",
        assetDepositValue: "",
    };
}
exports.LiquidityProvider = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.asset !== undefined) {
            common_1.Asset.encode(message.asset, writer.uint32(10).fork()).ldelim();
        }
        if (message.runeAddress !== "") {
            writer.uint32(18).string(message.runeAddress);
        }
        if (message.assetAddress !== "") {
            writer.uint32(26).string(message.assetAddress);
        }
        if (!message.lastAddHeight.isZero()) {
            writer.uint32(32).int64(message.lastAddHeight);
        }
        if (!message.lastWithdrawHeight.isZero()) {
            writer.uint32(40).int64(message.lastWithdrawHeight);
        }
        if (message.units !== "") {
            writer.uint32(50).string(message.units);
        }
        if (message.pendingRune !== "") {
            writer.uint32(58).string(message.pendingRune);
        }
        if (message.pendingAsset !== "") {
            writer.uint32(66).string(message.pendingAsset);
        }
        if (message.pendingTxId !== "") {
            writer.uint32(74).string(message.pendingTxId);
        }
        if (message.runeDepositValue !== "") {
            writer.uint32(82).string(message.runeDepositValue);
        }
        if (message.assetDepositValue !== "") {
            writer.uint32(90).string(message.assetDepositValue);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseLiquidityProvider();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.asset = common_1.Asset.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.runeAddress = reader.string();
                    break;
                case 3:
                    message.assetAddress = reader.string();
                    break;
                case 4:
                    message.lastAddHeight = reader.int64();
                    break;
                case 5:
                    message.lastWithdrawHeight = reader.int64();
                    break;
                case 6:
                    message.units = reader.string();
                    break;
                case 7:
                    message.pendingRune = reader.string();
                    break;
                case 8:
                    message.pendingAsset = reader.string();
                    break;
                case 9:
                    message.pendingTxId = reader.string();
                    break;
                case 10:
                    message.runeDepositValue = reader.string();
                    break;
                case 11:
                    message.assetDepositValue = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            asset: isSet(object.asset) ? common_1.Asset.fromJSON(object.asset) : undefined,
            runeAddress: isSet(object.runeAddress) ? String(object.runeAddress) : "",
            assetAddress: isSet(object.assetAddress)
                ? String(object.assetAddress)
                : "",
            lastAddHeight: isSet(object.lastAddHeight)
                ? long_1.default.fromString(object.lastAddHeight)
                : long_1.default.ZERO,
            lastWithdrawHeight: isSet(object.lastWithdrawHeight)
                ? long_1.default.fromString(object.lastWithdrawHeight)
                : long_1.default.ZERO,
            units: isSet(object.units) ? String(object.units) : "",
            pendingRune: isSet(object.pendingRune) ? String(object.pendingRune) : "",
            pendingAsset: isSet(object.pendingAsset)
                ? String(object.pendingAsset)
                : "",
            pendingTxId: isSet(object.pendingTxId) ? String(object.pendingTxId) : "",
            runeDepositValue: isSet(object.runeDepositValue)
                ? String(object.runeDepositValue)
                : "",
            assetDepositValue: isSet(object.assetDepositValue)
                ? String(object.assetDepositValue)
                : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.asset !== undefined &&
            (obj.asset = message.asset ? common_1.Asset.toJSON(message.asset) : undefined);
        message.runeAddress !== undefined &&
            (obj.runeAddress = message.runeAddress);
        message.assetAddress !== undefined &&
            (obj.assetAddress = message.assetAddress);
        message.lastAddHeight !== undefined &&
            (obj.lastAddHeight = (message.lastAddHeight || long_1.default.ZERO).toString());
        message.lastWithdrawHeight !== undefined &&
            (obj.lastWithdrawHeight = (message.lastWithdrawHeight || long_1.default.ZERO).toString());
        message.units !== undefined && (obj.units = message.units);
        message.pendingRune !== undefined &&
            (obj.pendingRune = message.pendingRune);
        message.pendingAsset !== undefined &&
            (obj.pendingAsset = message.pendingAsset);
        message.pendingTxId !== undefined &&
            (obj.pendingTxId = message.pendingTxId);
        message.runeDepositValue !== undefined &&
            (obj.runeDepositValue = message.runeDepositValue);
        message.assetDepositValue !== undefined &&
            (obj.assetDepositValue = message.assetDepositValue);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message = createBaseLiquidityProvider();
        message.asset =
            object.asset !== undefined && object.asset !== null
                ? common_1.Asset.fromPartial(object.asset)
                : undefined;
        message.runeAddress = (_a = object.runeAddress) !== null && _a !== void 0 ? _a : "";
        message.assetAddress = (_b = object.assetAddress) !== null && _b !== void 0 ? _b : "";
        message.lastAddHeight =
            object.lastAddHeight !== undefined && object.lastAddHeight !== null
                ? long_1.default.fromValue(object.lastAddHeight)
                : long_1.default.ZERO;
        message.lastWithdrawHeight =
            object.lastWithdrawHeight !== undefined &&
                object.lastWithdrawHeight !== null
                ? long_1.default.fromValue(object.lastWithdrawHeight)
                : long_1.default.ZERO;
        message.units = (_c = object.units) !== null && _c !== void 0 ? _c : "";
        message.pendingRune = (_d = object.pendingRune) !== null && _d !== void 0 ? _d : "";
        message.pendingAsset = (_e = object.pendingAsset) !== null && _e !== void 0 ? _e : "";
        message.pendingTxId = (_f = object.pendingTxId) !== null && _f !== void 0 ? _f : "";
        message.runeDepositValue = (_g = object.runeDepositValue) !== null && _g !== void 0 ? _g : "";
        message.assetDepositValue = (_h = object.assetDepositValue) !== null && _h !== void 0 ? _h : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
