import Long from "long";
import _m0 from "protobufjs/minimal";
import { Tx } from "../../../../../thorchain/v1/common/common";
export interface MsgSwitch {
    tx?: Tx;
    destination: string;
    signer: Uint8Array;
}
export declare const MsgSwitch: {
    encode(message: MsgSwitch, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgSwitch;
    fromJSON(object: any): MsgSwitch;
    toJSON(message: MsgSwitch): unknown;
    fromPartial<I extends {
        tx?: {
            id?: string | undefined;
            chain?: string | undefined;
            fromAddress?: string | undefined;
            toAddress?: string | undefined;
            coins?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            gas?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            memo?: string | undefined;
        } | undefined;
        destination?: string | undefined;
        signer?: Uint8Array | undefined;
    } & {
        tx?: ({
            id?: string | undefined;
            chain?: string | undefined;
            fromAddress?: string | undefined;
            toAddress?: string | undefined;
            coins?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            gas?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            memo?: string | undefined;
        } & {
            id?: string | undefined;
            chain?: string | undefined;
            fromAddress?: string | undefined;
            toAddress?: string | undefined;
            coins?: ({
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] & ({
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            } & {
                asset?: ({
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } & {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } & Record<Exclude<keyof I["tx"]["coins"][number]["asset"], keyof import("../../../../../thorchain/v1/common/common").Asset>, never>) | undefined;
                amount?: string | undefined;
                decimals?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["tx"]["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["tx"]["coins"][number], keyof import("../../../../../thorchain/v1/common/common").Coin>, never>)[] & Record<Exclude<keyof I["tx"]["coins"], keyof {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[]>, never>) | undefined;
            gas?: ({
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] & ({
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            } & {
                asset?: ({
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } & {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } & Record<Exclude<keyof I["tx"]["gas"][number]["asset"], keyof import("../../../../../thorchain/v1/common/common").Asset>, never>) | undefined;
                amount?: string | undefined;
                decimals?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["tx"]["gas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["tx"]["gas"][number], keyof import("../../../../../thorchain/v1/common/common").Coin>, never>)[] & Record<Exclude<keyof I["tx"]["gas"], keyof {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[]>, never>) | undefined;
            memo?: string | undefined;
        } & Record<Exclude<keyof I["tx"], keyof Tx>, never>) | undefined;
        destination?: string | undefined;
        signer?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof MsgSwitch>, never>>(object: I): MsgSwitch;
};
