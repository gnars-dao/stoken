"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgClientImpl = exports.MsgClaimContractIncomeResponse = exports.MsgClaimContractIncome = exports.MsgCloseContractResponse = exports.MsgCloseContract = exports.MsgOpenContractResponse = exports.MsgOpenContract = exports.MsgModProviderResponse = exports.MsgModProvider = exports.MsgBondProviderResponse = exports.MsgBondProvider = exports.protobufPackage = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../cosmos/base/v1beta1/coin");
var keeper_1 = require("./keeper");
exports.protobufPackage = "arkeo.arkeo";
function createBaseMsgBondProvider() {
    return { creator: new Uint8Array(), provider: new Uint8Array(), service: "", bond: "" };
}
exports.MsgBondProvider = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.creator.length !== 0) {
            writer.uint32(10).bytes(message.creator);
        }
        if (message.provider.length !== 0) {
            writer.uint32(18).bytes(message.provider);
        }
        if (message.service !== "") {
            writer.uint32(26).string(message.service);
        }
        if (message.bond !== "") {
            writer.uint32(34).string(message.bond);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgBondProvider();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.bytes();
                    break;
                case 2:
                    message.provider = reader.bytes();
                    break;
                case 3:
                    message.service = reader.string();
                    break;
                case 4:
                    message.bond = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? bytesFromBase64(object.creator) : new Uint8Array(),
            provider: isSet(object.provider) ? bytesFromBase64(object.provider) : new Uint8Array(),
            service: isSet(object.service) ? String(object.service) : "",
            bond: isSet(object.bond) ? String(object.bond) : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.creator !== undefined
            && (obj.creator = base64FromBytes(message.creator !== undefined ? message.creator : new Uint8Array()));
        message.provider !== undefined
            && (obj.provider = base64FromBytes(message.provider !== undefined ? message.provider : new Uint8Array()));
        message.service !== undefined && (obj.service = message.service);
        message.bond !== undefined && (obj.bond = message.bond);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseMsgBondProvider();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.provider = (_b = object.provider) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.service = (_c = object.service) !== null && _c !== void 0 ? _c : "";
        message.bond = (_d = object.bond) !== null && _d !== void 0 ? _d : "";
        return message;
    },
};
function createBaseMsgBondProviderResponse() {
    return {};
}
exports.MsgBondProviderResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgBondProviderResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgBondProviderResponse();
        return message;
    },
};
function createBaseMsgModProvider() {
    return {
        creator: new Uint8Array(),
        provider: new Uint8Array(),
        service: "",
        metadataUri: "",
        metadataNonce: 0,
        status: 0,
        minContractDuration: 0,
        maxContractDuration: 0,
        subscriptionRate: [],
        payAsYouGoRate: [],
        settlementDuration: 0,
    };
}
exports.MsgModProvider = {
    encode: function (message, writer) {
        var e_1, _a, e_2, _b;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.creator.length !== 0) {
            writer.uint32(10).bytes(message.creator);
        }
        if (message.provider.length !== 0) {
            writer.uint32(18).bytes(message.provider);
        }
        if (message.service !== "") {
            writer.uint32(26).string(message.service);
        }
        if (message.metadataUri !== "") {
            writer.uint32(34).string(message.metadataUri);
        }
        if (message.metadataNonce !== 0) {
            writer.uint32(40).uint64(message.metadataNonce);
        }
        if (message.status !== 0) {
            writer.uint32(48).int32(message.status);
        }
        if (message.minContractDuration !== 0) {
            writer.uint32(56).int64(message.minContractDuration);
        }
        if (message.maxContractDuration !== 0) {
            writer.uint32(64).int64(message.maxContractDuration);
        }
        try {
            for (var _c = __values(message.subscriptionRate), _d = _c.next(); !_d.done; _d = _c.next()) {
                var v = _d.value;
                coin_1.Coin.encode(v, writer.uint32(74).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _e = __values(message.payAsYouGoRate), _f = _e.next(); !_f.done; _f = _e.next()) {
                var v = _f.value;
                coin_1.Coin.encode(v, writer.uint32(82).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
        if (message.settlementDuration !== 0) {
            writer.uint32(88).int64(message.settlementDuration);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgModProvider();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.bytes();
                    break;
                case 2:
                    message.provider = reader.bytes();
                    break;
                case 3:
                    message.service = reader.string();
                    break;
                case 4:
                    message.metadataUri = reader.string();
                    break;
                case 5:
                    message.metadataNonce = longToNumber(reader.uint64());
                    break;
                case 6:
                    message.status = reader.int32();
                    break;
                case 7:
                    message.minContractDuration = longToNumber(reader.int64());
                    break;
                case 8:
                    message.maxContractDuration = longToNumber(reader.int64());
                    break;
                case 9:
                    message.subscriptionRate.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 10:
                    message.payAsYouGoRate.push(coin_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 11:
                    message.settlementDuration = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? bytesFromBase64(object.creator) : new Uint8Array(),
            provider: isSet(object.provider) ? bytesFromBase64(object.provider) : new Uint8Array(),
            service: isSet(object.service) ? String(object.service) : "",
            metadataUri: isSet(object.metadataUri) ? String(object.metadataUri) : "",
            metadataNonce: isSet(object.metadataNonce) ? Number(object.metadataNonce) : 0,
            status: isSet(object.status) ? (0, keeper_1.providerStatusFromJSON)(object.status) : 0,
            minContractDuration: isSet(object.minContractDuration) ? Number(object.minContractDuration) : 0,
            maxContractDuration: isSet(object.maxContractDuration) ? Number(object.maxContractDuration) : 0,
            subscriptionRate: Array.isArray(object === null || object === void 0 ? void 0 : object.subscriptionRate)
                ? object.subscriptionRate.map(function (e) { return coin_1.Coin.fromJSON(e); })
                : [],
            payAsYouGoRate: Array.isArray(object === null || object === void 0 ? void 0 : object.payAsYouGoRate)
                ? object.payAsYouGoRate.map(function (e) { return coin_1.Coin.fromJSON(e); })
                : [],
            settlementDuration: isSet(object.settlementDuration) ? Number(object.settlementDuration) : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.creator !== undefined
            && (obj.creator = base64FromBytes(message.creator !== undefined ? message.creator : new Uint8Array()));
        message.provider !== undefined
            && (obj.provider = base64FromBytes(message.provider !== undefined ? message.provider : new Uint8Array()));
        message.service !== undefined && (obj.service = message.service);
        message.metadataUri !== undefined && (obj.metadataUri = message.metadataUri);
        message.metadataNonce !== undefined && (obj.metadataNonce = Math.round(message.metadataNonce));
        message.status !== undefined && (obj.status = (0, keeper_1.providerStatusToJSON)(message.status));
        message.minContractDuration !== undefined && (obj.minContractDuration = Math.round(message.minContractDuration));
        message.maxContractDuration !== undefined && (obj.maxContractDuration = Math.round(message.maxContractDuration));
        if (message.subscriptionRate) {
            obj.subscriptionRate = message.subscriptionRate.map(function (e) { return e ? coin_1.Coin.toJSON(e) : undefined; });
        }
        else {
            obj.subscriptionRate = [];
        }
        if (message.payAsYouGoRate) {
            obj.payAsYouGoRate = message.payAsYouGoRate.map(function (e) { return e ? coin_1.Coin.toJSON(e) : undefined; });
        }
        else {
            obj.payAsYouGoRate = [];
        }
        message.settlementDuration !== undefined && (obj.settlementDuration = Math.round(message.settlementDuration));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
        var message = createBaseMsgModProvider();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.provider = (_b = object.provider) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.service = (_c = object.service) !== null && _c !== void 0 ? _c : "";
        message.metadataUri = (_d = object.metadataUri) !== null && _d !== void 0 ? _d : "";
        message.metadataNonce = (_e = object.metadataNonce) !== null && _e !== void 0 ? _e : 0;
        message.status = (_f = object.status) !== null && _f !== void 0 ? _f : 0;
        message.minContractDuration = (_g = object.minContractDuration) !== null && _g !== void 0 ? _g : 0;
        message.maxContractDuration = (_h = object.maxContractDuration) !== null && _h !== void 0 ? _h : 0;
        message.subscriptionRate = ((_j = object.subscriptionRate) === null || _j === void 0 ? void 0 : _j.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        message.payAsYouGoRate = ((_k = object.payAsYouGoRate) === null || _k === void 0 ? void 0 : _k.map(function (e) { return coin_1.Coin.fromPartial(e); })) || [];
        message.settlementDuration = (_l = object.settlementDuration) !== null && _l !== void 0 ? _l : 0;
        return message;
    },
};
function createBaseMsgModProviderResponse() {
    return {};
}
exports.MsgModProviderResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgModProviderResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgModProviderResponse();
        return message;
    },
};
function createBaseMsgOpenContract() {
    return {
        creator: new Uint8Array(),
        provider: new Uint8Array(),
        service: "",
        client: new Uint8Array(),
        delegate: new Uint8Array(),
        contractType: 0,
        duration: 0,
        rate: undefined,
        deposit: "",
        settlementDuration: 0,
        authorization: 0,
    };
}
exports.MsgOpenContract = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.creator.length !== 0) {
            writer.uint32(10).bytes(message.creator);
        }
        if (message.provider.length !== 0) {
            writer.uint32(18).bytes(message.provider);
        }
        if (message.service !== "") {
            writer.uint32(26).string(message.service);
        }
        if (message.client.length !== 0) {
            writer.uint32(34).bytes(message.client);
        }
        if (message.delegate.length !== 0) {
            writer.uint32(42).bytes(message.delegate);
        }
        if (message.contractType !== 0) {
            writer.uint32(48).int32(message.contractType);
        }
        if (message.duration !== 0) {
            writer.uint32(56).int64(message.duration);
        }
        if (message.rate !== undefined) {
            coin_1.Coin.encode(message.rate, writer.uint32(66).fork()).ldelim();
        }
        if (message.deposit !== "") {
            writer.uint32(74).string(message.deposit);
        }
        if (message.settlementDuration !== 0) {
            writer.uint32(80).int64(message.settlementDuration);
        }
        if (message.authorization !== 0) {
            writer.uint32(88).int32(message.authorization);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgOpenContract();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.bytes();
                    break;
                case 2:
                    message.provider = reader.bytes();
                    break;
                case 3:
                    message.service = reader.string();
                    break;
                case 4:
                    message.client = reader.bytes();
                    break;
                case 5:
                    message.delegate = reader.bytes();
                    break;
                case 6:
                    message.contractType = reader.int32();
                    break;
                case 7:
                    message.duration = longToNumber(reader.int64());
                    break;
                case 8:
                    message.rate = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 9:
                    message.deposit = reader.string();
                    break;
                case 10:
                    message.settlementDuration = longToNumber(reader.int64());
                    break;
                case 11:
                    message.authorization = reader.int32();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? bytesFromBase64(object.creator) : new Uint8Array(),
            provider: isSet(object.provider) ? bytesFromBase64(object.provider) : new Uint8Array(),
            service: isSet(object.service) ? String(object.service) : "",
            client: isSet(object.client) ? bytesFromBase64(object.client) : new Uint8Array(),
            delegate: isSet(object.delegate) ? bytesFromBase64(object.delegate) : new Uint8Array(),
            contractType: isSet(object.contractType) ? (0, keeper_1.contractTypeFromJSON)(object.contractType) : 0,
            duration: isSet(object.duration) ? Number(object.duration) : 0,
            rate: isSet(object.rate) ? coin_1.Coin.fromJSON(object.rate) : undefined,
            deposit: isSet(object.deposit) ? String(object.deposit) : "",
            settlementDuration: isSet(object.settlementDuration) ? Number(object.settlementDuration) : 0,
            authorization: isSet(object.authorization) ? (0, keeper_1.contractAuthorizationFromJSON)(object.authorization) : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.creator !== undefined
            && (obj.creator = base64FromBytes(message.creator !== undefined ? message.creator : new Uint8Array()));
        message.provider !== undefined
            && (obj.provider = base64FromBytes(message.provider !== undefined ? message.provider : new Uint8Array()));
        message.service !== undefined && (obj.service = message.service);
        message.client !== undefined
            && (obj.client = base64FromBytes(message.client !== undefined ? message.client : new Uint8Array()));
        message.delegate !== undefined
            && (obj.delegate = base64FromBytes(message.delegate !== undefined ? message.delegate : new Uint8Array()));
        message.contractType !== undefined && (obj.contractType = (0, keeper_1.contractTypeToJSON)(message.contractType));
        message.duration !== undefined && (obj.duration = Math.round(message.duration));
        message.rate !== undefined && (obj.rate = message.rate ? coin_1.Coin.toJSON(message.rate) : undefined);
        message.deposit !== undefined && (obj.deposit = message.deposit);
        message.settlementDuration !== undefined && (obj.settlementDuration = Math.round(message.settlementDuration));
        message.authorization !== undefined && (obj.authorization = (0, keeper_1.contractAuthorizationToJSON)(message.authorization));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        var message = createBaseMsgOpenContract();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.provider = (_b = object.provider) !== null && _b !== void 0 ? _b : new Uint8Array();
        message.service = (_c = object.service) !== null && _c !== void 0 ? _c : "";
        message.client = (_d = object.client) !== null && _d !== void 0 ? _d : new Uint8Array();
        message.delegate = (_e = object.delegate) !== null && _e !== void 0 ? _e : new Uint8Array();
        message.contractType = (_f = object.contractType) !== null && _f !== void 0 ? _f : 0;
        message.duration = (_g = object.duration) !== null && _g !== void 0 ? _g : 0;
        message.rate = (object.rate !== undefined && object.rate !== null) ? coin_1.Coin.fromPartial(object.rate) : undefined;
        message.deposit = (_h = object.deposit) !== null && _h !== void 0 ? _h : "";
        message.settlementDuration = (_j = object.settlementDuration) !== null && _j !== void 0 ? _j : 0;
        message.authorization = (_k = object.authorization) !== null && _k !== void 0 ? _k : 0;
        return message;
    },
};
function createBaseMsgOpenContractResponse() {
    return {};
}
exports.MsgOpenContractResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgOpenContractResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgOpenContractResponse();
        return message;
    },
};
function createBaseMsgCloseContract() {
    return { creator: new Uint8Array(), contractId: 0 };
}
exports.MsgCloseContract = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.creator.length !== 0) {
            writer.uint32(10).bytes(message.creator);
        }
        if (message.contractId !== 0) {
            writer.uint32(16).uint64(message.contractId);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgCloseContract();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.bytes();
                    break;
                case 2:
                    message.contractId = longToNumber(reader.uint64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? bytesFromBase64(object.creator) : new Uint8Array(),
            contractId: isSet(object.contractId) ? Number(object.contractId) : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.creator !== undefined
            && (obj.creator = base64FromBytes(message.creator !== undefined ? message.creator : new Uint8Array()));
        message.contractId !== undefined && (obj.contractId = Math.round(message.contractId));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMsgCloseContract();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.contractId = (_b = object.contractId) !== null && _b !== void 0 ? _b : 0;
        return message;
    },
};
function createBaseMsgCloseContractResponse() {
    return {};
}
exports.MsgCloseContractResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgCloseContractResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgCloseContractResponse();
        return message;
    },
};
function createBaseMsgClaimContractIncome() {
    return { creator: new Uint8Array(), contractId: 0, signature: new Uint8Array(), nonce: 0 };
}
exports.MsgClaimContractIncome = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.creator.length !== 0) {
            writer.uint32(10).bytes(message.creator);
        }
        if (message.contractId !== 0) {
            writer.uint32(16).uint64(message.contractId);
        }
        if (message.signature.length !== 0) {
            writer.uint32(34).bytes(message.signature);
        }
        if (message.nonce !== 0) {
            writer.uint32(40).int64(message.nonce);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimContractIncome();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.creator = reader.bytes();
                    break;
                case 2:
                    message.contractId = longToNumber(reader.uint64());
                    break;
                case 4:
                    message.signature = reader.bytes();
                    break;
                case 5:
                    message.nonce = longToNumber(reader.int64());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            creator: isSet(object.creator) ? bytesFromBase64(object.creator) : new Uint8Array(),
            contractId: isSet(object.contractId) ? Number(object.contractId) : 0,
            signature: isSet(object.signature) ? bytesFromBase64(object.signature) : new Uint8Array(),
            nonce: isSet(object.nonce) ? Number(object.nonce) : 0,
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.creator !== undefined
            && (obj.creator = base64FromBytes(message.creator !== undefined ? message.creator : new Uint8Array()));
        message.contractId !== undefined && (obj.contractId = Math.round(message.contractId));
        message.signature !== undefined
            && (obj.signature = base64FromBytes(message.signature !== undefined ? message.signature : new Uint8Array()));
        message.nonce !== undefined && (obj.nonce = Math.round(message.nonce));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseMsgClaimContractIncome();
        message.creator = (_a = object.creator) !== null && _a !== void 0 ? _a : new Uint8Array();
        message.contractId = (_b = object.contractId) !== null && _b !== void 0 ? _b : 0;
        message.signature = (_c = object.signature) !== null && _c !== void 0 ? _c : new Uint8Array();
        message.nonce = (_d = object.nonce) !== null && _d !== void 0 ? _d : 0;
        return message;
    },
};
function createBaseMsgClaimContractIncomeResponse() {
    return {};
}
exports.MsgClaimContractIncomeResponse = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgClaimContractIncomeResponse();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    fromPartial: function (_) {
        var message = createBaseMsgClaimContractIncomeResponse();
        return message;
    },
};
var MsgClientImpl = /** @class */ (function () {
    function MsgClientImpl(rpc) {
        this.rpc = rpc;
        this.BondProvider = this.BondProvider.bind(this);
        this.ModProvider = this.ModProvider.bind(this);
        this.OpenContract = this.OpenContract.bind(this);
        this.CloseContract = this.CloseContract.bind(this);
        this.ClaimContractIncome = this.ClaimContractIncome.bind(this);
    }
    MsgClientImpl.prototype.BondProvider = function (request) {
        var data = exports.MsgBondProvider.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Msg", "BondProvider", data);
        return promise.then(function (data) { return exports.MsgBondProviderResponse.decode(new minimal_1.default.Reader(data)); });
    };
    MsgClientImpl.prototype.ModProvider = function (request) {
        var data = exports.MsgModProvider.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Msg", "ModProvider", data);
        return promise.then(function (data) { return exports.MsgModProviderResponse.decode(new minimal_1.default.Reader(data)); });
    };
    MsgClientImpl.prototype.OpenContract = function (request) {
        var data = exports.MsgOpenContract.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Msg", "OpenContract", data);
        return promise.then(function (data) { return exports.MsgOpenContractResponse.decode(new minimal_1.default.Reader(data)); });
    };
    MsgClientImpl.prototype.CloseContract = function (request) {
        var data = exports.MsgCloseContract.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Msg", "CloseContract", data);
        return promise.then(function (data) { return exports.MsgCloseContractResponse.decode(new minimal_1.default.Reader(data)); });
    };
    MsgClientImpl.prototype.ClaimContractIncome = function (request) {
        var data = exports.MsgClaimContractIncome.encode(request).finish();
        var promise = this.rpc.request("arkeo.arkeo.Msg", "ClaimContractIncome", data);
        return promise.then(function (data) { return exports.MsgClaimContractIncomeResponse.decode(new minimal_1.default.Reader(data)); });
    };
    return MsgClientImpl;
}());
exports.MsgClientImpl = MsgClientImpl;
var globalThis = (function () {
    if (typeof globalThis !== "undefined") {
        return globalThis;
    }
    if (typeof self !== "undefined") {
        return self;
    }
    if (typeof window !== "undefined") {
        return window;
    }
    if (typeof global !== "undefined") {
        return global;
    }
    throw "Unable to locate global object";
})();
function bytesFromBase64(b64) {
    if (globalThis.Buffer) {
        return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
    }
    else {
        var bin = globalThis.atob(b64);
        var arr = new Uint8Array(bin.length);
        for (var i = 0; i < bin.length; ++i) {
            arr[i] = bin.charCodeAt(i);
        }
        return arr;
    }
}
function base64FromBytes(arr) {
    if (globalThis.Buffer) {
        return globalThis.Buffer.from(arr).toString("base64");
    }
    else {
        var bin_1 = [];
        arr.forEach(function (byte) {
            bin_1.push(String.fromCharCode(byte));
        });
        return globalThis.btoa(bin_1.join(""));
    }
}
function longToNumber(long) {
    if (long.gt(Number.MAX_SAFE_INTEGER)) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    return long.toNumber();
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
