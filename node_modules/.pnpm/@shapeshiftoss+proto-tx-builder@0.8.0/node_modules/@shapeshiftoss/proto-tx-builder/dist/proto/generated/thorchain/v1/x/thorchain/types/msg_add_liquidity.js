"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MsgAddLiquidity = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var common_1 = require("../../../../../thorchain/v1/common/common");
function createBaseMsgAddLiquidity() {
    return {
        tx: undefined,
        asset: undefined,
        assetAmount: "",
        runeAmount: "",
        runeAddress: "",
        assetAddress: "",
        affiliateAddress: "",
        affiliateBasisPoints: "",
        signer: new Uint8Array(),
    };
}
exports.MsgAddLiquidity = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.tx !== undefined) {
            common_1.Tx.encode(message.tx, writer.uint32(10).fork()).ldelim();
        }
        if (message.asset !== undefined) {
            common_1.Asset.encode(message.asset, writer.uint32(18).fork()).ldelim();
        }
        if (message.assetAmount !== "") {
            writer.uint32(26).string(message.assetAmount);
        }
        if (message.runeAmount !== "") {
            writer.uint32(34).string(message.runeAmount);
        }
        if (message.runeAddress !== "") {
            writer.uint32(42).string(message.runeAddress);
        }
        if (message.assetAddress !== "") {
            writer.uint32(50).string(message.assetAddress);
        }
        if (message.affiliateAddress !== "") {
            writer.uint32(58).string(message.affiliateAddress);
        }
        if (message.affiliateBasisPoints !== "") {
            writer.uint32(66).string(message.affiliateBasisPoints);
        }
        if (message.signer.length !== 0) {
            writer.uint32(74).bytes(message.signer);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMsgAddLiquidity();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.tx = common_1.Tx.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.asset = common_1.Asset.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.assetAmount = reader.string();
                    break;
                case 4:
                    message.runeAmount = reader.string();
                    break;
                case 5:
                    message.runeAddress = reader.string();
                    break;
                case 6:
                    message.assetAddress = reader.string();
                    break;
                case 7:
                    message.affiliateAddress = reader.string();
                    break;
                case 8:
                    message.affiliateBasisPoints = reader.string();
                    break;
                case 9:
                    message.signer = reader.bytes();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            tx: isSet(object.tx) ? common_1.Tx.fromJSON(object.tx) : undefined,
            asset: isSet(object.asset) ? common_1.Asset.fromJSON(object.asset) : undefined,
            assetAmount: isSet(object.assetAmount) ? String(object.assetAmount) : "",
            runeAmount: isSet(object.runeAmount) ? String(object.runeAmount) : "",
            runeAddress: isSet(object.runeAddress) ? String(object.runeAddress) : "",
            assetAddress: isSet(object.assetAddress)
                ? String(object.assetAddress)
                : "",
            affiliateAddress: isSet(object.affiliateAddress)
                ? String(object.affiliateAddress)
                : "",
            affiliateBasisPoints: isSet(object.affiliateBasisPoints)
                ? String(object.affiliateBasisPoints)
                : "",
            signer: isSet(object.signer)
                ? bytesFromBase64(object.signer)
                : new Uint8Array(),
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.tx !== undefined &&
            (obj.tx = message.tx ? common_1.Tx.toJSON(message.tx) : undefined);
        message.asset !== undefined &&
            (obj.asset = message.asset ? common_1.Asset.toJSON(message.asset) : undefined);
        message.assetAmount !== undefined &&
            (obj.assetAmount = message.assetAmount);
        message.runeAmount !== undefined && (obj.runeAmount = message.runeAmount);
        message.runeAddress !== undefined &&
            (obj.runeAddress = message.runeAddress);
        message.assetAddress !== undefined &&
            (obj.assetAddress = message.assetAddress);
        message.affiliateAddress !== undefined &&
            (obj.affiliateAddress = message.affiliateAddress);
        message.affiliateBasisPoints !== undefined &&
            (obj.affiliateBasisPoints = message.affiliateBasisPoints);
        message.signer !== undefined &&
            (obj.signer = base64FromBytes(message.signer !== undefined ? message.signer : new Uint8Array()));
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBaseMsgAddLiquidity();
        message.tx =
            object.tx !== undefined && object.tx !== null
                ? common_1.Tx.fromPartial(object.tx)
                : undefined;
        message.asset =
            object.asset !== undefined && object.asset !== null
                ? common_1.Asset.fromPartial(object.asset)
                : undefined;
        message.assetAmount = (_a = object.assetAmount) !== null && _a !== void 0 ? _a : "";
        message.runeAmount = (_b = object.runeAmount) !== null && _b !== void 0 ? _b : "";
        message.runeAddress = (_c = object.runeAddress) !== null && _c !== void 0 ? _c : "";
        message.assetAddress = (_d = object.assetAddress) !== null && _d !== void 0 ? _d : "";
        message.affiliateAddress = (_e = object.affiliateAddress) !== null && _e !== void 0 ? _e : "";
        message.affiliateBasisPoints = (_f = object.affiliateBasisPoints) !== null && _f !== void 0 ? _f : "";
        message.signer = (_g = object.signer) !== null && _g !== void 0 ? _g : new Uint8Array();
        return message;
    },
};
var globalThis = (function () {
    if (typeof globalThis !== "undefined")
        return globalThis;
    if (typeof self !== "undefined")
        return self;
    if (typeof window !== "undefined")
        return window;
    if (typeof global !== "undefined")
        return global;
    throw "Unable to locate global object";
})();
var atob = globalThis.atob ||
    (function (b64) { return globalThis.Buffer.from(b64, "base64").toString("binary"); });
function bytesFromBase64(b64) {
    var bin = atob(b64);
    var arr = new Uint8Array(bin.length);
    for (var i = 0; i < bin.length; ++i) {
        arr[i] = bin.charCodeAt(i);
    }
    return arr;
}
var btoa = globalThis.btoa ||
    (function (bin) { return globalThis.Buffer.from(bin, "binary").toString("base64"); });
function base64FromBytes(arr) {
    var e_1, _a;
    var bin = [];
    try {
        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {
            var byte = arr_1_1.value;
            bin.push(String.fromCharCode(byte));
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return btoa(bin.join(""));
}
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
