import Long from "long";
import _m0 from "protobufjs/minimal";
export interface Asset {
    chain: string;
    symbol: string;
    ticker: string;
    synth: boolean;
}
export interface Coin {
    asset?: Asset;
    amount: string;
    decimals: Long;
}
/** PubKeySet contains two pub keys , secp256k1 and ed25519 */
export interface PubKeySet {
    secp256k1: string;
    ed25519: string;
}
export interface Tx {
    id: string;
    chain: string;
    fromAddress: string;
    toAddress: string;
    coins: Coin[];
    gas: Coin[];
    memo: string;
}
export interface Fee {
    coins: Coin[];
    poolDeduct: string;
}
export declare const Asset: {
    encode(message: Asset, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Asset;
    fromJSON(object: any): Asset;
    toJSON(message: Asset): unknown;
    fromPartial<I extends {
        chain?: string | undefined;
        symbol?: string | undefined;
        ticker?: string | undefined;
        synth?: boolean | undefined;
    } & {
        chain?: string | undefined;
        symbol?: string | undefined;
        ticker?: string | undefined;
        synth?: boolean | undefined;
    } & Record<Exclude<keyof I, keyof Asset>, never>>(object: I): Asset;
};
export declare const Coin: {
    encode(message: Coin, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Coin;
    fromJSON(object: any): Coin;
    toJSON(message: Coin): unknown;
    fromPartial<I extends {
        asset?: {
            chain?: string | undefined;
            symbol?: string | undefined;
            ticker?: string | undefined;
            synth?: boolean | undefined;
        } | undefined;
        amount?: string | undefined;
        decimals?: string | number | Long.Long | undefined;
    } & {
        asset?: ({
            chain?: string | undefined;
            symbol?: string | undefined;
            ticker?: string | undefined;
            synth?: boolean | undefined;
        } & {
            chain?: string | undefined;
            symbol?: string | undefined;
            ticker?: string | undefined;
            synth?: boolean | undefined;
        } & Record<Exclude<keyof I["asset"], keyof Asset>, never>) | undefined;
        amount?: string | undefined;
        decimals?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["decimals"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Coin>, never>>(object: I): Coin;
};
export declare const PubKeySet: {
    encode(message: PubKeySet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): PubKeySet;
    fromJSON(object: any): PubKeySet;
    toJSON(message: PubKeySet): unknown;
    fromPartial<I extends {
        secp256k1?: string | undefined;
        ed25519?: string | undefined;
    } & {
        secp256k1?: string | undefined;
        ed25519?: string | undefined;
    } & Record<Exclude<keyof I, keyof PubKeySet>, never>>(object: I): PubKeySet;
};
export declare const Tx: {
    encode(message: Tx, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Tx;
    fromJSON(object: any): Tx;
    toJSON(message: Tx): unknown;
    fromPartial<I extends {
        id?: string | undefined;
        chain?: string | undefined;
        fromAddress?: string | undefined;
        toAddress?: string | undefined;
        coins?: {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[] | undefined;
        gas?: {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[] | undefined;
        memo?: string | undefined;
    } & {
        id?: string | undefined;
        chain?: string | undefined;
        fromAddress?: string | undefined;
        toAddress?: string | undefined;
        coins?: ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[] & ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        } & {
            asset?: ({
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & Record<Exclude<keyof I["coins"][number]["asset"], keyof Asset>, never>) | undefined;
            amount?: string | undefined;
            decimals?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["coins"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["coins"], keyof {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
        gas?: ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[] & ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        } & {
            asset?: ({
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & Record<Exclude<keyof I["gas"][number]["asset"], keyof Asset>, never>) | undefined;
            amount?: string | undefined;
            decimals?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["gas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["gas"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["gas"], keyof {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
        memo?: string | undefined;
    } & Record<Exclude<keyof I, keyof Tx>, never>>(object: I): Tx;
};
export declare const Fee: {
    encode(message: Fee, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Fee;
    fromJSON(object: any): Fee;
    toJSON(message: Fee): unknown;
    fromPartial<I extends {
        coins?: {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[] | undefined;
        poolDeduct?: string | undefined;
    } & {
        coins?: ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[] & ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        } & {
            asset?: ({
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & Record<Exclude<keyof I["coins"][number]["asset"], keyof Asset>, never>) | undefined;
            amount?: string | undefined;
            decimals?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["coins"][number], keyof Coin>, never>)[] & Record<Exclude<keyof I["coins"], keyof {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            amount?: string | undefined;
            decimals?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
        poolDeduct?: string | undefined;
    } & Record<Exclude<keyof I, keyof Fee>, never>>(object: I): Fee;
};
