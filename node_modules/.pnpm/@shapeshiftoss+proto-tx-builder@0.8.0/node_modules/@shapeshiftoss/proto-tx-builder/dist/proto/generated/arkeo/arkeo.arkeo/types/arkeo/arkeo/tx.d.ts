import _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { ContractAuthorization, ContractType, ProviderStatus } from "./keeper";
export declare const protobufPackage = "arkeo.arkeo";
export interface MsgBondProvider {
    creator: Uint8Array;
    provider: Uint8Array;
    service: string;
    bond: string;
}
export interface MsgBondProviderResponse {
}
export interface MsgModProvider {
    creator: Uint8Array;
    provider: Uint8Array;
    service: string;
    metadataUri: string;
    metadataNonce: number;
    status: ProviderStatus;
    minContractDuration: number;
    maxContractDuration: number;
    subscriptionRate: Coin[];
    payAsYouGoRate: Coin[];
    settlementDuration: number;
}
export interface MsgModProviderResponse {
}
export interface MsgOpenContract {
    creator: Uint8Array;
    provider: Uint8Array;
    service: string;
    client: Uint8Array;
    delegate: Uint8Array;
    contractType: ContractType;
    duration: number;
    rate: Coin | undefined;
    deposit: string;
    settlementDuration: number;
    authorization: ContractAuthorization;
}
export interface MsgOpenContractResponse {
}
export interface MsgCloseContract {
    creator: Uint8Array;
    contractId: number;
}
export interface MsgCloseContractResponse {
}
export interface MsgClaimContractIncome {
    creator: Uint8Array;
    contractId: number;
    signature: Uint8Array;
    nonce: number;
}
export interface MsgClaimContractIncomeResponse {
}
export declare const MsgBondProvider: {
    encode(message: MsgBondProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgBondProvider;
    fromJSON(object: any): MsgBondProvider;
    toJSON(message: MsgBondProvider): unknown;
    fromPartial<I extends {
        creator?: Uint8Array | undefined;
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        bond?: string | undefined;
    } & {
        creator?: Uint8Array | undefined;
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        bond?: string | undefined;
    } & { [K in Exclude<keyof I, keyof MsgBondProvider>]: never; }>(object: I): MsgBondProvider;
};
export declare const MsgBondProviderResponse: {
    encode(_: MsgBondProviderResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgBondProviderResponse;
    fromJSON(_: any): MsgBondProviderResponse;
    toJSON(_: MsgBondProviderResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgBondProviderResponse;
};
export declare const MsgModProvider: {
    encode(message: MsgModProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgModProvider;
    fromJSON(object: any): MsgModProvider;
    toJSON(message: MsgModProvider): unknown;
    fromPartial<I extends {
        creator?: Uint8Array | undefined;
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        metadataUri?: string | undefined;
        metadataNonce?: number | undefined;
        status?: ProviderStatus | undefined;
        minContractDuration?: number | undefined;
        maxContractDuration?: number | undefined;
        subscriptionRate?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        payAsYouGoRate?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        settlementDuration?: number | undefined;
    } & {
        creator?: Uint8Array | undefined;
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        metadataUri?: string | undefined;
        metadataNonce?: number | undefined;
        status?: ProviderStatus | undefined;
        minContractDuration?: number | undefined;
        maxContractDuration?: number | undefined;
        subscriptionRate?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["subscriptionRate"][number], keyof Coin>]: never; })[] & { [K_1 in Exclude<keyof I["subscriptionRate"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        payAsYouGoRate?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I["payAsYouGoRate"][number], keyof Coin>]: never; })[] & { [K_3 in Exclude<keyof I["payAsYouGoRate"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        settlementDuration?: number | undefined;
    } & { [K_4 in Exclude<keyof I, keyof MsgModProvider>]: never; }>(object: I): MsgModProvider;
};
export declare const MsgModProviderResponse: {
    encode(_: MsgModProviderResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgModProviderResponse;
    fromJSON(_: any): MsgModProviderResponse;
    toJSON(_: MsgModProviderResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgModProviderResponse;
};
export declare const MsgOpenContract: {
    encode(message: MsgOpenContract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgOpenContract;
    fromJSON(object: any): MsgOpenContract;
    toJSON(message: MsgOpenContract): unknown;
    fromPartial<I extends {
        creator?: Uint8Array | undefined;
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        client?: Uint8Array | undefined;
        delegate?: Uint8Array | undefined;
        contractType?: ContractType | undefined;
        duration?: number | undefined;
        rate?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        deposit?: string | undefined;
        settlementDuration?: number | undefined;
        authorization?: ContractAuthorization | undefined;
    } & {
        creator?: Uint8Array | undefined;
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        client?: Uint8Array | undefined;
        delegate?: Uint8Array | undefined;
        contractType?: ContractType | undefined;
        duration?: number | undefined;
        rate?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["rate"], keyof Coin>]: never; }) | undefined;
        deposit?: string | undefined;
        settlementDuration?: number | undefined;
        authorization?: ContractAuthorization | undefined;
    } & { [K_1 in Exclude<keyof I, keyof MsgOpenContract>]: never; }>(object: I): MsgOpenContract;
};
export declare const MsgOpenContractResponse: {
    encode(_: MsgOpenContractResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgOpenContractResponse;
    fromJSON(_: any): MsgOpenContractResponse;
    toJSON(_: MsgOpenContractResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgOpenContractResponse;
};
export declare const MsgCloseContract: {
    encode(message: MsgCloseContract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCloseContract;
    fromJSON(object: any): MsgCloseContract;
    toJSON(message: MsgCloseContract): unknown;
    fromPartial<I extends {
        creator?: Uint8Array | undefined;
        contractId?: number | undefined;
    } & {
        creator?: Uint8Array | undefined;
        contractId?: number | undefined;
    } & { [K in Exclude<keyof I, keyof MsgCloseContract>]: never; }>(object: I): MsgCloseContract;
};
export declare const MsgCloseContractResponse: {
    encode(_: MsgCloseContractResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgCloseContractResponse;
    fromJSON(_: any): MsgCloseContractResponse;
    toJSON(_: MsgCloseContractResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgCloseContractResponse;
};
export declare const MsgClaimContractIncome: {
    encode(message: MsgClaimContractIncome, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaimContractIncome;
    fromJSON(object: any): MsgClaimContractIncome;
    toJSON(message: MsgClaimContractIncome): unknown;
    fromPartial<I extends {
        creator?: Uint8Array | undefined;
        contractId?: number | undefined;
        signature?: Uint8Array | undefined;
        nonce?: number | undefined;
    } & {
        creator?: Uint8Array | undefined;
        contractId?: number | undefined;
        signature?: Uint8Array | undefined;
        nonce?: number | undefined;
    } & { [K in Exclude<keyof I, keyof MsgClaimContractIncome>]: never; }>(object: I): MsgClaimContractIncome;
};
export declare const MsgClaimContractIncomeResponse: {
    encode(_: MsgClaimContractIncomeResponse, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): MsgClaimContractIncomeResponse;
    fromJSON(_: any): MsgClaimContractIncomeResponse;
    toJSON(_: MsgClaimContractIncomeResponse): unknown;
    fromPartial<I extends {} & {} & { [K in Exclude<keyof I, never>]: never; }>(_: I): MsgClaimContractIncomeResponse;
};
/** Msg defines the Msg service. */
export interface Msg {
    BondProvider(request: MsgBondProvider): Promise<MsgBondProviderResponse>;
    ModProvider(request: MsgModProvider): Promise<MsgModProviderResponse>;
    OpenContract(request: MsgOpenContract): Promise<MsgOpenContractResponse>;
    CloseContract(request: MsgCloseContract): Promise<MsgCloseContractResponse>;
    /** this line is used by starport scaffolding # proto/tx/rpc */
    ClaimContractIncome(request: MsgClaimContractIncome): Promise<MsgClaimContractIncomeResponse>;
}
export declare class MsgClientImpl implements Msg {
    private readonly rpc;
    constructor(rpc: Rpc);
    BondProvider(request: MsgBondProvider): Promise<MsgBondProviderResponse>;
    ModProvider(request: MsgModProvider): Promise<MsgModProviderResponse>;
    OpenContract(request: MsgOpenContract): Promise<MsgOpenContractResponse>;
    CloseContract(request: MsgCloseContract): Promise<MsgCloseContractResponse>;
    ClaimContractIncome(request: MsgClaimContractIncome): Promise<MsgClaimContractIncomeResponse>;
}
interface Rpc {
    request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
