"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Vault = exports.vaultStatusToJSON = exports.vaultStatusFromJSON = exports.VaultStatus = exports.vaultTypeToJSON = exports.vaultTypeFromJSON = exports.VaultType = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var common_1 = require("../../../../../thorchain/v1/common/common");
var type_chain_contract_1 = require("../../../../../thorchain/v1/x/thorchain/types/type_chain_contract");
var VaultType;
(function (VaultType) {
    VaultType[VaultType["UnknownVault"] = 0] = "UnknownVault";
    VaultType[VaultType["AsgardVault"] = 1] = "AsgardVault";
    VaultType[VaultType["YggdrasilVault"] = 2] = "YggdrasilVault";
    VaultType[VaultType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VaultType = exports.VaultType || (exports.VaultType = {}));
function vaultTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UnknownVault":
            return VaultType.UnknownVault;
        case 1:
        case "AsgardVault":
            return VaultType.AsgardVault;
        case 2:
        case "YggdrasilVault":
            return VaultType.YggdrasilVault;
        case -1:
        case "UNRECOGNIZED":
        default:
            return VaultType.UNRECOGNIZED;
    }
}
exports.vaultTypeFromJSON = vaultTypeFromJSON;
function vaultTypeToJSON(object) {
    switch (object) {
        case VaultType.UnknownVault:
            return "UnknownVault";
        case VaultType.AsgardVault:
            return "AsgardVault";
        case VaultType.YggdrasilVault:
            return "YggdrasilVault";
        default:
            return "UNKNOWN";
    }
}
exports.vaultTypeToJSON = vaultTypeToJSON;
var VaultStatus;
(function (VaultStatus) {
    VaultStatus[VaultStatus["InactiveVault"] = 0] = "InactiveVault";
    VaultStatus[VaultStatus["ActiveVault"] = 1] = "ActiveVault";
    VaultStatus[VaultStatus["RetiringVault"] = 2] = "RetiringVault";
    VaultStatus[VaultStatus["InitVault"] = 3] = "InitVault";
    VaultStatus[VaultStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(VaultStatus = exports.VaultStatus || (exports.VaultStatus = {}));
function vaultStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "InactiveVault":
            return VaultStatus.InactiveVault;
        case 1:
        case "ActiveVault":
            return VaultStatus.ActiveVault;
        case 2:
        case "RetiringVault":
            return VaultStatus.RetiringVault;
        case 3:
        case "InitVault":
            return VaultStatus.InitVault;
        case -1:
        case "UNRECOGNIZED":
        default:
            return VaultStatus.UNRECOGNIZED;
    }
}
exports.vaultStatusFromJSON = vaultStatusFromJSON;
function vaultStatusToJSON(object) {
    switch (object) {
        case VaultStatus.InactiveVault:
            return "InactiveVault";
        case VaultStatus.ActiveVault:
            return "ActiveVault";
        case VaultStatus.RetiringVault:
            return "RetiringVault";
        case VaultStatus.InitVault:
            return "InitVault";
        default:
            return "UNKNOWN";
    }
}
exports.vaultStatusToJSON = vaultStatusToJSON;
function createBaseVault() {
    return {
        blockHeight: long_1.default.ZERO,
        pubKey: "",
        coins: [],
        type: 0,
        status: 0,
        statusSince: long_1.default.ZERO,
        membership: [],
        chains: [],
        inboundTxCount: long_1.default.ZERO,
        outboundTxCount: long_1.default.ZERO,
        pendingTxBlockHeights: [],
        routers: [],
    };
}
exports.Vault = {
    encode: function (message, writer) {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.blockHeight.isZero()) {
            writer.uint32(8).int64(message.blockHeight);
        }
        if (message.pubKey !== "") {
            writer.uint32(18).string(message.pubKey);
        }
        try {
            for (var _f = __values(message.coins), _g = _f.next(); !_g.done; _g = _f.next()) {
                var v = _g.value;
                common_1.Coin.encode(v, writer.uint32(26).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (message.type !== 0) {
            writer.uint32(32).int32(message.type);
        }
        if (message.status !== 0) {
            writer.uint32(40).int32(message.status);
        }
        if (!message.statusSince.isZero()) {
            writer.uint32(48).int64(message.statusSince);
        }
        try {
            for (var _h = __values(message.membership), _j = _h.next(); !_j.done; _j = _h.next()) {
                var v = _j.value;
                writer.uint32(58).string(v);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
            }
            finally { if (e_2) throw e_2.error; }
        }
        try {
            for (var _k = __values(message.chains), _l = _k.next(); !_l.done; _l = _k.next()) {
                var v = _l.value;
                writer.uint32(66).string(v);
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (!message.inboundTxCount.isZero()) {
            writer.uint32(72).int64(message.inboundTxCount);
        }
        if (!message.outboundTxCount.isZero()) {
            writer.uint32(80).int64(message.outboundTxCount);
        }
        writer.uint32(90).fork();
        try {
            for (var _m = __values(message.pendingTxBlockHeights), _o = _m.next(); !_o.done; _o = _m.next()) {
                var v = _o.value;
                writer.int64(v);
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
            }
            finally { if (e_4) throw e_4.error; }
        }
        writer.ldelim();
        try {
            for (var _p = __values(message.routers), _q = _p.next(); !_q.done; _q = _p.next()) {
                var v = _q.value;
                type_chain_contract_1.ChainContract.encode(v, writer.uint32(178).fork()).ldelim();
            }
        }
        catch (e_5_1) { e_5 = { error: e_5_1 }; }
        finally {
            try {
                if (_q && !_q.done && (_e = _p.return)) _e.call(_p);
            }
            finally { if (e_5) throw e_5.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseVault();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.blockHeight = reader.int64();
                    break;
                case 2:
                    message.pubKey = reader.string();
                    break;
                case 3:
                    message.coins.push(common_1.Coin.decode(reader, reader.uint32()));
                    break;
                case 4:
                    message.type = reader.int32();
                    break;
                case 5:
                    message.status = reader.int32();
                    break;
                case 6:
                    message.statusSince = reader.int64();
                    break;
                case 7:
                    message.membership.push(reader.string());
                    break;
                case 8:
                    message.chains.push(reader.string());
                    break;
                case 9:
                    message.inboundTxCount = reader.int64();
                    break;
                case 10:
                    message.outboundTxCount = reader.int64();
                    break;
                case 11:
                    if ((tag & 7) === 2) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.pendingTxBlockHeights.push(reader.int64());
                        }
                    }
                    else {
                        message.pendingTxBlockHeights.push(reader.int64());
                    }
                    break;
                case 22:
                    message.routers.push(type_chain_contract_1.ChainContract.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            blockHeight: isSet(object.blockHeight)
                ? long_1.default.fromString(object.blockHeight)
                : long_1.default.ZERO,
            pubKey: isSet(object.pubKey) ? String(object.pubKey) : "",
            coins: Array.isArray(object === null || object === void 0 ? void 0 : object.coins)
                ? object.coins.map(function (e) { return common_1.Coin.fromJSON(e); })
                : [],
            type: isSet(object.type) ? vaultTypeFromJSON(object.type) : 0,
            status: isSet(object.status) ? vaultStatusFromJSON(object.status) : 0,
            statusSince: isSet(object.statusSince)
                ? long_1.default.fromString(object.statusSince)
                : long_1.default.ZERO,
            membership: Array.isArray(object === null || object === void 0 ? void 0 : object.membership)
                ? object.membership.map(function (e) { return String(e); })
                : [],
            chains: Array.isArray(object === null || object === void 0 ? void 0 : object.chains)
                ? object.chains.map(function (e) { return String(e); })
                : [],
            inboundTxCount: isSet(object.inboundTxCount)
                ? long_1.default.fromString(object.inboundTxCount)
                : long_1.default.ZERO,
            outboundTxCount: isSet(object.outboundTxCount)
                ? long_1.default.fromString(object.outboundTxCount)
                : long_1.default.ZERO,
            pendingTxBlockHeights: Array.isArray(object === null || object === void 0 ? void 0 : object.pendingTxBlockHeights)
                ? object.pendingTxBlockHeights.map(function (e) { return long_1.default.fromString(e); })
                : [],
            routers: Array.isArray(object === null || object === void 0 ? void 0 : object.routers)
                ? object.routers.map(function (e) { return type_chain_contract_1.ChainContract.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.blockHeight !== undefined &&
            (obj.blockHeight = (message.blockHeight || long_1.default.ZERO).toString());
        message.pubKey !== undefined && (obj.pubKey = message.pubKey);
        if (message.coins) {
            obj.coins = message.coins.map(function (e) { return (e ? common_1.Coin.toJSON(e) : undefined); });
        }
        else {
            obj.coins = [];
        }
        message.type !== undefined && (obj.type = vaultTypeToJSON(message.type));
        message.status !== undefined &&
            (obj.status = vaultStatusToJSON(message.status));
        message.statusSince !== undefined &&
            (obj.statusSince = (message.statusSince || long_1.default.ZERO).toString());
        if (message.membership) {
            obj.membership = message.membership.map(function (e) { return e; });
        }
        else {
            obj.membership = [];
        }
        if (message.chains) {
            obj.chains = message.chains.map(function (e) { return e; });
        }
        else {
            obj.chains = [];
        }
        message.inboundTxCount !== undefined &&
            (obj.inboundTxCount = (message.inboundTxCount || long_1.default.ZERO).toString());
        message.outboundTxCount !== undefined &&
            (obj.outboundTxCount = (message.outboundTxCount || long_1.default.ZERO).toString());
        if (message.pendingTxBlockHeights) {
            obj.pendingTxBlockHeights = message.pendingTxBlockHeights.map(function (e) {
                return (e || long_1.default.ZERO).toString();
            });
        }
        else {
            obj.pendingTxBlockHeights = [];
        }
        if (message.routers) {
            obj.routers = message.routers.map(function (e) {
                return e ? type_chain_contract_1.ChainContract.toJSON(e) : undefined;
            });
        }
        else {
            obj.routers = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g, _h;
        var message = createBaseVault();
        message.blockHeight =
            object.blockHeight !== undefined && object.blockHeight !== null
                ? long_1.default.fromValue(object.blockHeight)
                : long_1.default.ZERO;
        message.pubKey = (_a = object.pubKey) !== null && _a !== void 0 ? _a : "";
        message.coins = ((_b = object.coins) === null || _b === void 0 ? void 0 : _b.map(function (e) { return common_1.Coin.fromPartial(e); })) || [];
        message.type = (_c = object.type) !== null && _c !== void 0 ? _c : 0;
        message.status = (_d = object.status) !== null && _d !== void 0 ? _d : 0;
        message.statusSince =
            object.statusSince !== undefined && object.statusSince !== null
                ? long_1.default.fromValue(object.statusSince)
                : long_1.default.ZERO;
        message.membership = ((_e = object.membership) === null || _e === void 0 ? void 0 : _e.map(function (e) { return e; })) || [];
        message.chains = ((_f = object.chains) === null || _f === void 0 ? void 0 : _f.map(function (e) { return e; })) || [];
        message.inboundTxCount =
            object.inboundTxCount !== undefined && object.inboundTxCount !== null
                ? long_1.default.fromValue(object.inboundTxCount)
                : long_1.default.ZERO;
        message.outboundTxCount =
            object.outboundTxCount !== undefined && object.outboundTxCount !== null
                ? long_1.default.fromValue(object.outboundTxCount)
                : long_1.default.ZERO;
        message.pendingTxBlockHeights =
            ((_g = object.pendingTxBlockHeights) === null || _g === void 0 ? void 0 : _g.map(function (e) { return long_1.default.fromValue(e); })) || [];
        message.routers =
            ((_h = object.routers) === null || _h === void 0 ? void 0 : _h.map(function (e) { return type_chain_contract_1.ChainContract.fromPartial(e); })) || [];
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
