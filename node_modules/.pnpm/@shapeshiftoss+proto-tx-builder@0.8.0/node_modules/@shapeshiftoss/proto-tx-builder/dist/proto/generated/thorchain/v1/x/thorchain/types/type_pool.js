"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Pool = exports.poolStatusToJSON = exports.poolStatusFromJSON = exports.PoolStatus = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var common_1 = require("../../../../../thorchain/v1/common/common");
/**
 * |    State    | Swap | Add   | Withdraw  | Refunding |
 * | ----------- | ---- | ----- | --------- | --------- |
 * | `staged`    | no   | yes   | yes       | Refund Invalid Add/Remove Liquidity && all Swaps |
 * | `available` | yes  | yes   | yes       | Refund Invalid Tx |
 * | `suspended` | no   | no    | no        | Refund all |
 */
var PoolStatus;
(function (PoolStatus) {
    PoolStatus[PoolStatus["UnknownPoolStatus"] = 0] = "UnknownPoolStatus";
    PoolStatus[PoolStatus["Available"] = 1] = "Available";
    PoolStatus[PoolStatus["Staged"] = 2] = "Staged";
    PoolStatus[PoolStatus["Suspended"] = 3] = "Suspended";
    PoolStatus[PoolStatus["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(PoolStatus = exports.PoolStatus || (exports.PoolStatus = {}));
function poolStatusFromJSON(object) {
    switch (object) {
        case 0:
        case "UnknownPoolStatus":
            return PoolStatus.UnknownPoolStatus;
        case 1:
        case "Available":
            return PoolStatus.Available;
        case 2:
        case "Staged":
            return PoolStatus.Staged;
        case 3:
        case "Suspended":
            return PoolStatus.Suspended;
        case -1:
        case "UNRECOGNIZED":
        default:
            return PoolStatus.UNRECOGNIZED;
    }
}
exports.poolStatusFromJSON = poolStatusFromJSON;
function poolStatusToJSON(object) {
    switch (object) {
        case PoolStatus.UnknownPoolStatus:
            return "UnknownPoolStatus";
        case PoolStatus.Available:
            return "Available";
        case PoolStatus.Staged:
            return "Staged";
        case PoolStatus.Suspended:
            return "Suspended";
        default:
            return "UNKNOWN";
    }
}
exports.poolStatusToJSON = poolStatusToJSON;
function createBasePool() {
    return {
        balanceRune: "",
        balanceAsset: "",
        asset: undefined,
        LPUnits: "",
        status: 0,
        statusSince: long_1.default.ZERO,
        decimals: long_1.default.ZERO,
        synthUnits: "",
        pendingInboundRune: "",
        pendingInboundAsset: "",
    };
}
exports.Pool = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.balanceRune !== "") {
            writer.uint32(10).string(message.balanceRune);
        }
        if (message.balanceAsset !== "") {
            writer.uint32(18).string(message.balanceAsset);
        }
        if (message.asset !== undefined) {
            common_1.Asset.encode(message.asset, writer.uint32(26).fork()).ldelim();
        }
        if (message.LPUnits !== "") {
            writer.uint32(34).string(message.LPUnits);
        }
        if (message.status !== 0) {
            writer.uint32(40).int32(message.status);
        }
        if (!message.statusSince.isZero()) {
            writer.uint32(80).int64(message.statusSince);
        }
        if (!message.decimals.isZero()) {
            writer.uint32(48).int64(message.decimals);
        }
        if (message.synthUnits !== "") {
            writer.uint32(58).string(message.synthUnits);
        }
        if (message.pendingInboundRune !== "") {
            writer.uint32(66).string(message.pendingInboundRune);
        }
        if (message.pendingInboundAsset !== "") {
            writer.uint32(74).string(message.pendingInboundAsset);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBasePool();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.balanceRune = reader.string();
                    break;
                case 2:
                    message.balanceAsset = reader.string();
                    break;
                case 3:
                    message.asset = common_1.Asset.decode(reader, reader.uint32());
                    break;
                case 4:
                    message.LPUnits = reader.string();
                    break;
                case 5:
                    message.status = reader.int32();
                    break;
                case 10:
                    message.statusSince = reader.int64();
                    break;
                case 6:
                    message.decimals = reader.int64();
                    break;
                case 7:
                    message.synthUnits = reader.string();
                    break;
                case 8:
                    message.pendingInboundRune = reader.string();
                    break;
                case 9:
                    message.pendingInboundAsset = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            balanceRune: isSet(object.balanceRune) ? String(object.balanceRune) : "",
            balanceAsset: isSet(object.balanceAsset)
                ? String(object.balanceAsset)
                : "",
            asset: isSet(object.asset) ? common_1.Asset.fromJSON(object.asset) : undefined,
            LPUnits: isSet(object.LPUnits) ? String(object.LPUnits) : "",
            status: isSet(object.status) ? poolStatusFromJSON(object.status) : 0,
            statusSince: isSet(object.statusSince)
                ? long_1.default.fromString(object.statusSince)
                : long_1.default.ZERO,
            decimals: isSet(object.decimals)
                ? long_1.default.fromString(object.decimals)
                : long_1.default.ZERO,
            synthUnits: isSet(object.synthUnits) ? String(object.synthUnits) : "",
            pendingInboundRune: isSet(object.pendingInboundRune)
                ? String(object.pendingInboundRune)
                : "",
            pendingInboundAsset: isSet(object.pendingInboundAsset)
                ? String(object.pendingInboundAsset)
                : "",
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.balanceRune !== undefined &&
            (obj.balanceRune = message.balanceRune);
        message.balanceAsset !== undefined &&
            (obj.balanceAsset = message.balanceAsset);
        message.asset !== undefined &&
            (obj.asset = message.asset ? common_1.Asset.toJSON(message.asset) : undefined);
        message.LPUnits !== undefined && (obj.LPUnits = message.LPUnits);
        message.status !== undefined &&
            (obj.status = poolStatusToJSON(message.status));
        message.statusSince !== undefined &&
            (obj.statusSince = (message.statusSince || long_1.default.ZERO).toString());
        message.decimals !== undefined &&
            (obj.decimals = (message.decimals || long_1.default.ZERO).toString());
        message.synthUnits !== undefined && (obj.synthUnits = message.synthUnits);
        message.pendingInboundRune !== undefined &&
            (obj.pendingInboundRune = message.pendingInboundRune);
        message.pendingInboundAsset !== undefined &&
            (obj.pendingInboundAsset = message.pendingInboundAsset);
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d, _e, _f, _g;
        var message = createBasePool();
        message.balanceRune = (_a = object.balanceRune) !== null && _a !== void 0 ? _a : "";
        message.balanceAsset = (_b = object.balanceAsset) !== null && _b !== void 0 ? _b : "";
        message.asset =
            object.asset !== undefined && object.asset !== null
                ? common_1.Asset.fromPartial(object.asset)
                : undefined;
        message.LPUnits = (_c = object.LPUnits) !== null && _c !== void 0 ? _c : "";
        message.status = (_d = object.status) !== null && _d !== void 0 ? _d : 0;
        message.statusSince =
            object.statusSince !== undefined && object.statusSince !== null
                ? long_1.default.fromValue(object.statusSince)
                : long_1.default.ZERO;
        message.decimals =
            object.decimals !== undefined && object.decimals !== null
                ? long_1.default.fromValue(object.decimals)
                : long_1.default.ZERO;
        message.synthUnits = (_e = object.synthUnits) !== null && _e !== void 0 ? _e : "";
        message.pendingInboundRune = (_f = object.pendingInboundRune) !== null && _f !== void 0 ? _f : "";
        message.pendingInboundAsset = (_g = object.pendingInboundAsset) !== null && _g !== void 0 ? _g : "";
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
