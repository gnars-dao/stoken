import _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
export declare const protobufPackage = "arkeo.arkeo";
export declare enum ProviderStatus {
    OFFLINE = 0,
    ONLINE = 1,
    UNRECOGNIZED = -1
}
export declare function providerStatusFromJSON(object: any): ProviderStatus;
export declare function providerStatusToJSON(object: ProviderStatus): string;
export declare enum ContractType {
    SUBSCRIPTION = 0,
    PAY_AS_YOU_GO = 1,
    UNRECOGNIZED = -1
}
export declare function contractTypeFromJSON(object: any): ContractType;
export declare function contractTypeToJSON(object: ContractType): string;
export declare enum ContractAuthorization {
    STRICT = 0,
    OPEN = 1,
    UNRECOGNIZED = -1
}
export declare function contractAuthorizationFromJSON(object: any): ContractAuthorization;
export declare function contractAuthorizationToJSON(object: ContractAuthorization): string;
export interface Provider {
    pubKey: Uint8Array;
    service: number;
    metadataUri: string;
    metadataNonce: number;
    status: ProviderStatus;
    minContractDuration: number;
    maxContractDuration: number;
    subscriptionRate: Coin[];
    payAsYouGoRate: Coin[];
    bond: string;
    lastUpdate: number;
    settlementDuration: number;
}
export interface Contract {
    provider: Uint8Array;
    service: number;
    client: Uint8Array;
    delegate: Uint8Array;
    type: ContractType;
    height: number;
    duration: number;
    rate: Coin | undefined;
    deposit: string;
    paid: string;
    nonce: number;
    settlementHeight: number;
    id: number;
    settlementDuration: number;
    authorization: ContractAuthorization;
}
export interface ContractSet {
    contractIds: number[];
}
export interface ContractExpirationSet {
    height: number;
    contractSet: ContractSet | undefined;
}
export interface UserContractSet {
    user: Uint8Array;
    contractSet: ContractSet | undefined;
}
export declare const Provider: {
    encode(message: Provider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Provider;
    fromJSON(object: any): Provider;
    toJSON(message: Provider): unknown;
    fromPartial<I extends {
        pubKey?: Uint8Array | undefined;
        service?: number | undefined;
        metadataUri?: string | undefined;
        metadataNonce?: number | undefined;
        status?: ProviderStatus | undefined;
        minContractDuration?: number | undefined;
        maxContractDuration?: number | undefined;
        subscriptionRate?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        payAsYouGoRate?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        bond?: string | undefined;
        lastUpdate?: number | undefined;
        settlementDuration?: number | undefined;
    } & {
        pubKey?: Uint8Array | undefined;
        service?: number | undefined;
        metadataUri?: string | undefined;
        metadataNonce?: number | undefined;
        status?: ProviderStatus | undefined;
        minContractDuration?: number | undefined;
        maxContractDuration?: number | undefined;
        subscriptionRate?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["subscriptionRate"][number], keyof Coin>]: never; })[] & { [K_1 in Exclude<keyof I["subscriptionRate"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        payAsYouGoRate?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I["payAsYouGoRate"][number], keyof Coin>]: never; })[] & { [K_3 in Exclude<keyof I["payAsYouGoRate"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        bond?: string | undefined;
        lastUpdate?: number | undefined;
        settlementDuration?: number | undefined;
    } & { [K_4 in Exclude<keyof I, keyof Provider>]: never; }>(object: I): Provider;
};
export declare const Contract: {
    encode(message: Contract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Contract;
    fromJSON(object: any): Contract;
    toJSON(message: Contract): unknown;
    fromPartial<I extends {
        provider?: Uint8Array | undefined;
        service?: number | undefined;
        client?: Uint8Array | undefined;
        delegate?: Uint8Array | undefined;
        type?: ContractType | undefined;
        height?: number | undefined;
        duration?: number | undefined;
        rate?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        deposit?: string | undefined;
        paid?: string | undefined;
        nonce?: number | undefined;
        settlementHeight?: number | undefined;
        id?: number | undefined;
        settlementDuration?: number | undefined;
        authorization?: ContractAuthorization | undefined;
    } & {
        provider?: Uint8Array | undefined;
        service?: number | undefined;
        client?: Uint8Array | undefined;
        delegate?: Uint8Array | undefined;
        type?: ContractType | undefined;
        height?: number | undefined;
        duration?: number | undefined;
        rate?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["rate"], keyof Coin>]: never; }) | undefined;
        deposit?: string | undefined;
        paid?: string | undefined;
        nonce?: number | undefined;
        settlementHeight?: number | undefined;
        id?: number | undefined;
        settlementDuration?: number | undefined;
        authorization?: ContractAuthorization | undefined;
    } & { [K_1 in Exclude<keyof I, keyof Contract>]: never; }>(object: I): Contract;
};
export declare const ContractSet: {
    encode(message: ContractSet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContractSet;
    fromJSON(object: any): ContractSet;
    toJSON(message: ContractSet): unknown;
    fromPartial<I extends {
        contractIds?: number[] | undefined;
    } & {
        contractIds?: (number[] & number[] & { [K in Exclude<keyof I["contractIds"], keyof number[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "contractIds">]: never; }>(object: I): ContractSet;
};
export declare const ContractExpirationSet: {
    encode(message: ContractExpirationSet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ContractExpirationSet;
    fromJSON(object: any): ContractExpirationSet;
    toJSON(message: ContractExpirationSet): unknown;
    fromPartial<I extends {
        height?: number | undefined;
        contractSet?: {
            contractIds?: number[] | undefined;
        } | undefined;
    } & {
        height?: number | undefined;
        contractSet?: ({
            contractIds?: number[] | undefined;
        } & {
            contractIds?: (number[] & number[] & { [K in Exclude<keyof I["contractSet"]["contractIds"], keyof number[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["contractSet"], "contractIds">]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof ContractExpirationSet>]: never; }>(object: I): ContractExpirationSet;
};
export declare const UserContractSet: {
    encode(message: UserContractSet, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): UserContractSet;
    fromJSON(object: any): UserContractSet;
    toJSON(message: UserContractSet): unknown;
    fromPartial<I extends {
        user?: Uint8Array | undefined;
        contractSet?: {
            contractIds?: number[] | undefined;
        } | undefined;
    } & {
        user?: Uint8Array | undefined;
        contractSet?: ({
            contractIds?: number[] | undefined;
        } & {
            contractIds?: (number[] & number[] & { [K in Exclude<keyof I["contractSet"]["contractIds"], keyof number[]>]: never; }) | undefined;
        } & { [K_1 in Exclude<keyof I["contractSet"], "contractIds">]: never; }) | undefined;
    } & { [K_2 in Exclude<keyof I, keyof UserContractSet>]: never; }>(object: I): UserContractSet;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
