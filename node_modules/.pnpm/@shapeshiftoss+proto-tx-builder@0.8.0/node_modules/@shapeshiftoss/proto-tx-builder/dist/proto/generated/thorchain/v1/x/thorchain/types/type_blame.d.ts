import _m0 from "protobufjs/minimal";
export interface Node {
    pubkey: string;
    blameData: Uint8Array;
    blameSignature: Uint8Array;
}
export interface Blame {
    failReason: string;
    isUnicast: boolean;
    blameNodes: Node[];
}
export declare const Node: {
    encode(message: Node, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Node;
    fromJSON(object: any): Node;
    toJSON(message: Node): unknown;
    fromPartial<I extends {
        pubkey?: string | undefined;
        blameData?: Uint8Array | undefined;
        blameSignature?: Uint8Array | undefined;
    } & {
        pubkey?: string | undefined;
        blameData?: Uint8Array | undefined;
        blameSignature?: Uint8Array | undefined;
    } & Record<Exclude<keyof I, keyof Node>, never>>(object: I): Node;
};
export declare const Blame: {
    encode(message: Blame, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): Blame;
    fromJSON(object: any): Blame;
    toJSON(message: Blame): unknown;
    fromPartial<I extends {
        failReason?: string | undefined;
        isUnicast?: boolean | undefined;
        blameNodes?: {
            pubkey?: string | undefined;
            blameData?: Uint8Array | undefined;
            blameSignature?: Uint8Array | undefined;
        }[] | undefined;
    } & {
        failReason?: string | undefined;
        isUnicast?: boolean | undefined;
        blameNodes?: ({
            pubkey?: string | undefined;
            blameData?: Uint8Array | undefined;
            blameSignature?: Uint8Array | undefined;
        }[] & ({
            pubkey?: string | undefined;
            blameData?: Uint8Array | undefined;
            blameSignature?: Uint8Array | undefined;
        } & {
            pubkey?: string | undefined;
            blameData?: Uint8Array | undefined;
            blameSignature?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["blameNodes"][number], keyof Node>, never>)[] & Record<Exclude<keyof I["blameNodes"], keyof {
            pubkey?: string | undefined;
            blameData?: Uint8Array | undefined;
            blameSignature?: Uint8Array | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof Blame>, never>>(object: I): Blame;
};
