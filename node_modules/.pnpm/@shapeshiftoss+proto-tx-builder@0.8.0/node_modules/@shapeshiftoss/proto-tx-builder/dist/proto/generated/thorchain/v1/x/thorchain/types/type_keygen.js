"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeygenBlock = exports.Keygen = exports.keygenTypeToJSON = exports.keygenTypeFromJSON = exports.KeygenType = void 0;
/* eslint-disable */
var long_1 = __importDefault(require("long"));
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var KeygenType;
(function (KeygenType) {
    KeygenType[KeygenType["UnknownKeygen"] = 0] = "UnknownKeygen";
    KeygenType[KeygenType["AsgardKeygen"] = 1] = "AsgardKeygen";
    KeygenType[KeygenType["YggdrasilKeygen"] = 2] = "YggdrasilKeygen";
    KeygenType[KeygenType["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(KeygenType = exports.KeygenType || (exports.KeygenType = {}));
function keygenTypeFromJSON(object) {
    switch (object) {
        case 0:
        case "UnknownKeygen":
            return KeygenType.UnknownKeygen;
        case 1:
        case "AsgardKeygen":
            return KeygenType.AsgardKeygen;
        case 2:
        case "YggdrasilKeygen":
            return KeygenType.YggdrasilKeygen;
        case -1:
        case "UNRECOGNIZED":
        default:
            return KeygenType.UNRECOGNIZED;
    }
}
exports.keygenTypeFromJSON = keygenTypeFromJSON;
function keygenTypeToJSON(object) {
    switch (object) {
        case KeygenType.UnknownKeygen:
            return "UnknownKeygen";
        case KeygenType.AsgardKeygen:
            return "AsgardKeygen";
        case KeygenType.YggdrasilKeygen:
            return "YggdrasilKeygen";
        default:
            return "UNKNOWN";
    }
}
exports.keygenTypeToJSON = keygenTypeToJSON;
function createBaseKeygen() {
    return { id: "", type: 0, members: [] };
}
exports.Keygen = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.id !== "") {
            writer.uint32(10).string(message.id);
        }
        if (message.type !== 0) {
            writer.uint32(16).int32(message.type);
        }
        try {
            for (var _b = __values(message.members), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                writer.uint32(26).string(v);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseKeygen();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.id = reader.string();
                    break;
                case 2:
                    message.type = reader.int32();
                    break;
                case 3:
                    message.members.push(reader.string());
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            id: isSet(object.id) ? String(object.id) : "",
            type: isSet(object.type) ? keygenTypeFromJSON(object.type) : 0,
            members: Array.isArray(object === null || object === void 0 ? void 0 : object.members)
                ? object.members.map(function (e) { return String(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.id !== undefined && (obj.id = message.id);
        message.type !== undefined && (obj.type = keygenTypeToJSON(message.type));
        if (message.members) {
            obj.members = message.members.map(function (e) { return e; });
        }
        else {
            obj.members = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a, _b, _c;
        var message = createBaseKeygen();
        message.id = (_a = object.id) !== null && _a !== void 0 ? _a : "";
        message.type = (_b = object.type) !== null && _b !== void 0 ? _b : 0;
        message.members = ((_c = object.members) === null || _c === void 0 ? void 0 : _c.map(function (e) { return e; })) || [];
        return message;
    },
};
function createBaseKeygenBlock() {
    return { height: long_1.default.ZERO, keygens: [] };
}
exports.KeygenBlock = {
    encode: function (message, writer) {
        var e_2, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (!message.height.isZero()) {
            writer.uint32(8).int64(message.height);
        }
        try {
            for (var _b = __values(message.keygens), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                exports.Keygen.encode(v, writer.uint32(34).fork()).ldelim();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseKeygenBlock();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.height = reader.int64();
                    break;
                case 4:
                    message.keygens.push(exports.Keygen.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            height: isSet(object.height) ? long_1.default.fromString(object.height) : long_1.default.ZERO,
            keygens: Array.isArray(object === null || object === void 0 ? void 0 : object.keygens)
                ? object.keygens.map(function (e) { return exports.Keygen.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.height !== undefined &&
            (obj.height = (message.height || long_1.default.ZERO).toString());
        if (message.keygens) {
            obj.keygens = message.keygens.map(function (e) {
                return e ? exports.Keygen.toJSON(e) : undefined;
            });
        }
        else {
            obj.keygens = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseKeygenBlock();
        message.height =
            object.height !== undefined && object.height !== null
                ? long_1.default.fromValue(object.height)
                : long_1.default.ZERO;
        message.keygens = ((_a = object.keygens) === null || _a === void 0 ? void 0 : _a.map(function (e) { return exports.Keygen.fromPartial(e); })) || [];
        return message;
    },
};
if (minimal_1.default.util.Long !== long_1.default) {
    minimal_1.default.util.Long = long_1.default;
    minimal_1.default.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
