import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "arkeo.arkeo";
export interface ProtoInt64 {
    value: number;
}
export interface ProtoUint64 {
    value: number;
}
export interface ProtoAccAddresses {
    value: Uint8Array[];
}
export interface ProtoStrings {
    value: string[];
}
export interface ProtoBools {
    value: boolean[];
}
export declare const ProtoInt64: {
    encode(message: ProtoInt64, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProtoInt64;
    fromJSON(object: any): ProtoInt64;
    toJSON(message: ProtoInt64): unknown;
    fromPartial<I extends {
        value?: number | undefined;
    } & {
        value?: number | undefined;
    } & { [K in Exclude<keyof I, "value">]: never; }>(object: I): ProtoInt64;
};
export declare const ProtoUint64: {
    encode(message: ProtoUint64, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProtoUint64;
    fromJSON(object: any): ProtoUint64;
    toJSON(message: ProtoUint64): unknown;
    fromPartial<I extends {
        value?: number | undefined;
    } & {
        value?: number | undefined;
    } & { [K in Exclude<keyof I, "value">]: never; }>(object: I): ProtoUint64;
};
export declare const ProtoAccAddresses: {
    encode(message: ProtoAccAddresses, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProtoAccAddresses;
    fromJSON(object: any): ProtoAccAddresses;
    toJSON(message: ProtoAccAddresses): unknown;
    fromPartial<I extends {
        value?: Uint8Array[] | undefined;
    } & {
        value?: (Uint8Array[] & Uint8Array[] & { [K in Exclude<keyof I["value"], keyof Uint8Array[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "value">]: never; }>(object: I): ProtoAccAddresses;
};
export declare const ProtoStrings: {
    encode(message: ProtoStrings, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProtoStrings;
    fromJSON(object: any): ProtoStrings;
    toJSON(message: ProtoStrings): unknown;
    fromPartial<I extends {
        value?: string[] | undefined;
    } & {
        value?: (string[] & string[] & { [K in Exclude<keyof I["value"], keyof string[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "value">]: never; }>(object: I): ProtoStrings;
};
export declare const ProtoBools: {
    encode(message: ProtoBools, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ProtoBools;
    fromJSON(object: any): ProtoBools;
    toJSON(message: ProtoBools): unknown;
    fromPartial<I extends {
        value?: boolean[] | undefined;
    } & {
        value?: (boolean[] & boolean[] & { [K in Exclude<keyof I["value"], keyof boolean[]>]: never; }) | undefined;
    } & { [K_1 in Exclude<keyof I, "value">]: never; }>(object: I): ProtoBools;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
