import Long from "long";
import _m0 from "protobufjs/minimal";
import { Network } from "../../../../thorchain/v1/x/thorchain/types/type_network";
import { Pool } from "../../../../thorchain/v1/x/thorchain/types/type_pool";
import { LiquidityProvider } from "../../../../thorchain/v1/x/thorchain/types/type_liquidity_provider";
import { ObservedTxVoter } from "../../../../thorchain/v1/x/thorchain/types/type_observed_tx";
import { TxOut } from "../../../../thorchain/v1/x/thorchain/types/type_tx_out";
import { NodeAccount, BondProviders } from "../../../../thorchain/v1/x/thorchain/types/type_node_account";
import { Vault } from "../../../../thorchain/v1/x/thorchain/types/type_vault";
import { ReserveContributor } from "../../../../thorchain/v1/x/thorchain/types/type_reserve_contributor";
import { MsgSwap } from "../../../../thorchain/v1/x/thorchain/types/msg_swap";
import { NetworkFee } from "../../../../thorchain/v1/x/thorchain/types/type_network_fee";
import { ChainContract } from "../../../../thorchain/v1/x/thorchain/types/type_chain_contract";
import { THORName } from "../../../../thorchain/v1/x/thorchain/types/type_thorname";
export interface lastChainHeight {
    chain: string;
    height: Long;
}
export interface mimir {
    key: string;
    value: Long;
}
export interface GenesisState {
    pools: Pool[];
    liquidityProviders: LiquidityProvider[];
    observedTxInVoters: ObservedTxVoter[];
    observedTxOutVoters: ObservedTxVoter[];
    txOuts: TxOut[];
    nodeAccounts: NodeAccount[];
    vaults: Vault[];
    reserve: Long;
    lastSignedHeight: Long;
    lastChainHeights: lastChainHeight[];
    reserveContributors: ReserveContributor[];
    network?: Network;
    msgSwaps: MsgSwap[];
    networkFees: NetworkFee[];
    chainContracts: ChainContract[];
    THORNames: THORName[];
    mimirs: mimir[];
    storeVersion: Long;
    bondProviders: BondProviders[];
}
export declare const lastChainHeight: {
    encode(message: lastChainHeight, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): lastChainHeight;
    fromJSON(object: any): lastChainHeight;
    toJSON(message: lastChainHeight): unknown;
    fromPartial<I extends {
        chain?: string | undefined;
        height?: string | number | Long.Long | undefined;
    } & {
        chain?: string | undefined;
        height?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["height"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof lastChainHeight>, never>>(object: I): lastChainHeight;
};
export declare const mimir: {
    encode(message: mimir, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): mimir;
    fromJSON(object: any): mimir;
    toJSON(message: mimir): unknown;
    fromPartial<I extends {
        key?: string | undefined;
        value?: string | number | Long.Long | undefined;
    } & {
        key?: string | undefined;
        value?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["value"], keyof Long.Long>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof mimir>, never>>(object: I): mimir;
};
export declare const GenesisState: {
    encode(message: GenesisState, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): GenesisState;
    fromJSON(object: any): GenesisState;
    toJSON(message: GenesisState): unknown;
    fromPartial<I extends {
        pools?: {
            balanceRune?: string | undefined;
            balanceAsset?: string | undefined;
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            LPUnits?: string | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_pool").PoolStatus | undefined;
            statusSince?: string | number | Long.Long | undefined;
            decimals?: string | number | Long.Long | undefined;
            synthUnits?: string | undefined;
            pendingInboundRune?: string | undefined;
            pendingInboundAsset?: string | undefined;
        }[] | undefined;
        liquidityProviders?: {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            runeAddress?: string | undefined;
            assetAddress?: string | undefined;
            lastAddHeight?: string | number | Long.Long | undefined;
            lastWithdrawHeight?: string | number | Long.Long | undefined;
            units?: string | undefined;
            pendingRune?: string | undefined;
            pendingAsset?: string | undefined;
            pendingTxId?: string | undefined;
            runeDepositValue?: string | undefined;
            assetDepositValue?: string | undefined;
        }[] | undefined;
        observedTxInVoters?: {
            txId?: string | undefined;
            tx?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } | undefined;
            height?: string | number | Long.Long | undefined;
            txs?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[] | undefined;
            actions?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
            outTxs?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[] | undefined;
            finalisedHeight?: string | number | Long.Long | undefined;
            updatedVault?: boolean | undefined;
            reverted?: boolean | undefined;
            outboundHeight?: string | number | Long.Long | undefined;
        }[] | undefined;
        observedTxOutVoters?: {
            txId?: string | undefined;
            tx?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } | undefined;
            height?: string | number | Long.Long | undefined;
            txs?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[] | undefined;
            actions?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
            outTxs?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[] | undefined;
            finalisedHeight?: string | number | Long.Long | undefined;
            updatedVault?: boolean | undefined;
            reverted?: boolean | undefined;
            outboundHeight?: string | number | Long.Long | undefined;
        }[] | undefined;
        txOuts?: {
            height?: string | number | Long.Long | undefined;
            txArray?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        nodeAccounts?: {
            nodeAddress?: Uint8Array | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_node_account").NodeStatus | undefined;
            pubKeySet?: {
                secp256k1?: string | undefined;
                ed25519?: string | undefined;
            } | undefined;
            validatorConsPubKey?: string | undefined;
            bond?: string | undefined;
            activeBlockHeight?: string | number | Long.Long | undefined;
            bondAddress?: string | undefined;
            statusSince?: string | number | Long.Long | undefined;
            signerMembership?: string[] | undefined;
            requestedToLeave?: boolean | undefined;
            forcedToLeave?: boolean | undefined;
            leaveScore?: string | number | Long.Long | undefined;
            ipAddress?: string | undefined;
            version?: string | undefined;
            type?: import("../../../../thorchain/v1/x/thorchain/types/type_node_account").NodeType | undefined;
        }[] | undefined;
        vaults?: {
            blockHeight?: string | number | Long.Long | undefined;
            pubKey?: string | undefined;
            coins?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            type?: import("../../../../thorchain/v1/x/thorchain/types/type_vault").VaultType | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_vault").VaultStatus | undefined;
            statusSince?: string | number | Long.Long | undefined;
            membership?: string[] | undefined;
            chains?: string[] | undefined;
            inboundTxCount?: string | number | Long.Long | undefined;
            outboundTxCount?: string | number | Long.Long | undefined;
            pendingTxBlockHeights?: (string | number | Long.Long)[] | undefined;
            routers?: {
                chain?: string | undefined;
                router?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        reserve?: string | number | Long.Long | undefined;
        lastSignedHeight?: string | number | Long.Long | undefined;
        lastChainHeights?: {
            chain?: string | undefined;
            height?: string | number | Long.Long | undefined;
        }[] | undefined;
        reserveContributors?: {
            address?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        network?: {
            bondRewardRune?: string | undefined;
            totalBondUnits?: string | undefined;
            burnedBep2Rune?: string | undefined;
            burnedErc20Rune?: string | undefined;
            LPIncomeSplit?: string | number | Long.Long | undefined;
            NodeIncomeSplit?: string | number | Long.Long | undefined;
        } | undefined;
        msgSwaps?: {
            tx?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            } | undefined;
            targetAsset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            destination?: string | undefined;
            tradeTarget?: string | undefined;
            affiliateAddress?: string | undefined;
            affiliateBasisPoints?: string | undefined;
            signer?: Uint8Array | undefined;
        }[] | undefined;
        networkFees?: {
            chain?: string | undefined;
            transactionSize?: string | number | Long.Long | undefined;
            transactionFeeRate?: string | number | Long.Long | undefined;
        }[] | undefined;
        chainContracts?: {
            chain?: string | undefined;
            router?: string | undefined;
        }[] | undefined;
        THORNames?: {
            name?: string | undefined;
            expireBlockHeight?: string | number | Long.Long | undefined;
            owner?: Uint8Array | undefined;
            preferredAsset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            aliases?: {
                chain?: string | undefined;
                address?: string | undefined;
            }[] | undefined;
        }[] | undefined;
        mimirs?: {
            key?: string | undefined;
            value?: string | number | Long.Long | undefined;
        }[] | undefined;
        storeVersion?: string | number | Long.Long | undefined;
        bondProviders?: {
            nodeAddress?: Uint8Array | undefined;
            nodeOperatorFee?: string | undefined;
            providers?: {
                bondAddress?: Uint8Array | undefined;
                bond?: string | undefined;
            }[] | undefined;
        }[] | undefined;
    } & {
        pools?: ({
            balanceRune?: string | undefined;
            balanceAsset?: string | undefined;
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            LPUnits?: string | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_pool").PoolStatus | undefined;
            statusSince?: string | number | Long.Long | undefined;
            decimals?: string | number | Long.Long | undefined;
            synthUnits?: string | undefined;
            pendingInboundRune?: string | undefined;
            pendingInboundAsset?: string | undefined;
        }[] & ({
            balanceRune?: string | undefined;
            balanceAsset?: string | undefined;
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            LPUnits?: string | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_pool").PoolStatus | undefined;
            statusSince?: string | number | Long.Long | undefined;
            decimals?: string | number | Long.Long | undefined;
            synthUnits?: string | undefined;
            pendingInboundRune?: string | undefined;
            pendingInboundAsset?: string | undefined;
        } & {
            balanceRune?: string | undefined;
            balanceAsset?: string | undefined;
            asset?: ({
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & Record<Exclude<keyof I["pools"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
            LPUnits?: string | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_pool").PoolStatus | undefined;
            statusSince?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["pools"][number]["statusSince"], keyof Long.Long>, never>) | undefined;
            decimals?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["pools"][number]["decimals"], keyof Long.Long>, never>) | undefined;
            synthUnits?: string | undefined;
            pendingInboundRune?: string | undefined;
            pendingInboundAsset?: string | undefined;
        } & Record<Exclude<keyof I["pools"][number], keyof Pool>, never>)[] & Record<Exclude<keyof I["pools"], keyof {
            balanceRune?: string | undefined;
            balanceAsset?: string | undefined;
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            LPUnits?: string | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_pool").PoolStatus | undefined;
            statusSince?: string | number | Long.Long | undefined;
            decimals?: string | number | Long.Long | undefined;
            synthUnits?: string | undefined;
            pendingInboundRune?: string | undefined;
            pendingInboundAsset?: string | undefined;
        }[]>, never>) | undefined;
        liquidityProviders?: ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            runeAddress?: string | undefined;
            assetAddress?: string | undefined;
            lastAddHeight?: string | number | Long.Long | undefined;
            lastWithdrawHeight?: string | number | Long.Long | undefined;
            units?: string | undefined;
            pendingRune?: string | undefined;
            pendingAsset?: string | undefined;
            pendingTxId?: string | undefined;
            runeDepositValue?: string | undefined;
            assetDepositValue?: string | undefined;
        }[] & ({
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            runeAddress?: string | undefined;
            assetAddress?: string | undefined;
            lastAddHeight?: string | number | Long.Long | undefined;
            lastWithdrawHeight?: string | number | Long.Long | undefined;
            units?: string | undefined;
            pendingRune?: string | undefined;
            pendingAsset?: string | undefined;
            pendingTxId?: string | undefined;
            runeDepositValue?: string | undefined;
            assetDepositValue?: string | undefined;
        } & {
            asset?: ({
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & Record<Exclude<keyof I["liquidityProviders"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
            runeAddress?: string | undefined;
            assetAddress?: string | undefined;
            lastAddHeight?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["liquidityProviders"][number]["lastAddHeight"], keyof Long.Long>, never>) | undefined;
            lastWithdrawHeight?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["liquidityProviders"][number]["lastWithdrawHeight"], keyof Long.Long>, never>) | undefined;
            units?: string | undefined;
            pendingRune?: string | undefined;
            pendingAsset?: string | undefined;
            pendingTxId?: string | undefined;
            runeDepositValue?: string | undefined;
            assetDepositValue?: string | undefined;
        } & Record<Exclude<keyof I["liquidityProviders"][number], keyof LiquidityProvider>, never>)[] & Record<Exclude<keyof I["liquidityProviders"], keyof {
            asset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            runeAddress?: string | undefined;
            assetAddress?: string | undefined;
            lastAddHeight?: string | number | Long.Long | undefined;
            lastWithdrawHeight?: string | number | Long.Long | undefined;
            units?: string | undefined;
            pendingRune?: string | undefined;
            pendingAsset?: string | undefined;
            pendingTxId?: string | undefined;
            runeDepositValue?: string | undefined;
            assetDepositValue?: string | undefined;
        }[]>, never>) | undefined;
        observedTxInVoters?: ({
            txId?: string | undefined;
            tx?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } | undefined;
            height?: string | number | Long.Long | undefined;
            txs?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[] | undefined;
            actions?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
            outTxs?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[] | undefined;
            finalisedHeight?: string | number | Long.Long | undefined;
            updatedVault?: boolean | undefined;
            reverted?: boolean | undefined;
            outboundHeight?: string | number | Long.Long | undefined;
        }[] & ({
            txId?: string | undefined;
            tx?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } | undefined;
            height?: string | number | Long.Long | undefined;
            txs?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[] | undefined;
            actions?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
            outTxs?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[] | undefined;
            finalisedHeight?: string | number | Long.Long | undefined;
            updatedVault?: boolean | undefined;
            reverted?: boolean | undefined;
            outboundHeight?: string | number | Long.Long | undefined;
        } & {
            txId?: string | undefined;
            tx?: ({
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } & {
                tx?: ({
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } & {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] & ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    } & {
                        asset?: ({
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["tx"]["coins"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | (Long.Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long.Long) => Long.Long;
                            and: (other: string | number | Long.Long) => Long.Long;
                            compare: (other: string | number | Long.Long) => number;
                            comp: (other: string | number | Long.Long) => number;
                            divide: (divisor: string | number | Long.Long) => Long.Long;
                            div: (divisor: string | number | Long.Long) => Long.Long;
                            equals: (other: string | number | Long.Long) => boolean;
                            eq: (other: string | number | Long.Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long.Long) => boolean;
                            gt: (other: string | number | Long.Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                            gte: (other: string | number | Long.Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | Long.Long) => boolean;
                            lt: (other: string | number | Long.Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                            lte: (other: string | number | Long.Long) => boolean;
                            modulo: (other: string | number | Long.Long) => Long.Long;
                            mod: (other: string | number | Long.Long) => Long.Long;
                            multiply: (multiplier: string | number | Long.Long) => Long.Long;
                            mul: (multiplier: string | number | Long.Long) => Long.Long;
                            negate: () => Long.Long;
                            neg: () => Long.Long;
                            not: () => Long.Long;
                            notEquals: (other: string | number | Long.Long) => boolean;
                            neq: (other: string | number | Long.Long) => boolean;
                            or: (other: string | number | Long.Long) => Long.Long;
                            shiftLeft: (numBits: number | Long.Long) => Long.Long;
                            shl: (numBits: number | Long.Long) => Long.Long;
                            shiftRight: (numBits: number | Long.Long) => Long.Long;
                            shr: (numBits: number | Long.Long) => Long.Long;
                            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                            shru: (numBits: number | Long.Long) => Long.Long;
                            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                            sub: (subtrahend: string | number | Long.Long) => Long.Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long.Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long.Long;
                            xor: (other: string | number | Long.Long) => Long.Long;
                        } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["tx"]["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["tx"]["coins"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["tx"]["coins"], keyof {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[]>, never>) | undefined;
                    gas?: ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] & ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    } & {
                        asset?: ({
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["tx"]["gas"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | (Long.Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long.Long) => Long.Long;
                            and: (other: string | number | Long.Long) => Long.Long;
                            compare: (other: string | number | Long.Long) => number;
                            comp: (other: string | number | Long.Long) => number;
                            divide: (divisor: string | number | Long.Long) => Long.Long;
                            div: (divisor: string | number | Long.Long) => Long.Long;
                            equals: (other: string | number | Long.Long) => boolean;
                            eq: (other: string | number | Long.Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long.Long) => boolean;
                            gt: (other: string | number | Long.Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                            gte: (other: string | number | Long.Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | Long.Long) => boolean;
                            lt: (other: string | number | Long.Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                            lte: (other: string | number | Long.Long) => boolean;
                            modulo: (other: string | number | Long.Long) => Long.Long;
                            mod: (other: string | number | Long.Long) => Long.Long;
                            multiply: (multiplier: string | number | Long.Long) => Long.Long;
                            mul: (multiplier: string | number | Long.Long) => Long.Long;
                            negate: () => Long.Long;
                            neg: () => Long.Long;
                            not: () => Long.Long;
                            notEquals: (other: string | number | Long.Long) => boolean;
                            neq: (other: string | number | Long.Long) => boolean;
                            or: (other: string | number | Long.Long) => Long.Long;
                            shiftLeft: (numBits: number | Long.Long) => Long.Long;
                            shl: (numBits: number | Long.Long) => Long.Long;
                            shiftRight: (numBits: number | Long.Long) => Long.Long;
                            shr: (numBits: number | Long.Long) => Long.Long;
                            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                            shru: (numBits: number | Long.Long) => Long.Long;
                            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                            sub: (subtrahend: string | number | Long.Long) => Long.Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long.Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long.Long;
                            xor: (other: string | number | Long.Long) => Long.Long;
                        } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["tx"]["gas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["tx"]["gas"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["tx"]["gas"], keyof {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[]>, never>) | undefined;
                    memo?: string | undefined;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["tx"], keyof import("../../common/common").Tx>, never>) | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: (string[] & string[] & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["outHashes"], keyof string[]>, never>) | undefined;
                blockHeight?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["blockHeight"], keyof Long.Long>, never>) | undefined;
                signers?: (string[] & string[] & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["signers"], keyof string[]>, never>) | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["keysignMs"], keyof Long.Long>, never>) | undefined;
                finaliseHeight?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"]["finaliseHeight"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["observedTxInVoters"][number]["tx"], keyof import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").ObservedTx>, never>) | undefined;
            height?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["observedTxInVoters"][number]["height"], keyof Long.Long>, never>) | undefined;
            txs?: ({
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[] & ({
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } & {
                tx?: ({
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } & {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] & ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    } & {
                        asset?: ({
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["tx"]["coins"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | (Long.Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long.Long) => Long.Long;
                            and: (other: string | number | Long.Long) => Long.Long;
                            compare: (other: string | number | Long.Long) => number;
                            comp: (other: string | number | Long.Long) => number;
                            divide: (divisor: string | number | Long.Long) => Long.Long;
                            div: (divisor: string | number | Long.Long) => Long.Long;
                            equals: (other: string | number | Long.Long) => boolean;
                            eq: (other: string | number | Long.Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long.Long) => boolean;
                            gt: (other: string | number | Long.Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                            gte: (other: string | number | Long.Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | Long.Long) => boolean;
                            lt: (other: string | number | Long.Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                            lte: (other: string | number | Long.Long) => boolean;
                            modulo: (other: string | number | Long.Long) => Long.Long;
                            mod: (other: string | number | Long.Long) => Long.Long;
                            multiply: (multiplier: string | number | Long.Long) => Long.Long;
                            mul: (multiplier: string | number | Long.Long) => Long.Long;
                            negate: () => Long.Long;
                            neg: () => Long.Long;
                            not: () => Long.Long;
                            notEquals: (other: string | number | Long.Long) => boolean;
                            neq: (other: string | number | Long.Long) => boolean;
                            or: (other: string | number | Long.Long) => Long.Long;
                            shiftLeft: (numBits: number | Long.Long) => Long.Long;
                            shl: (numBits: number | Long.Long) => Long.Long;
                            shiftRight: (numBits: number | Long.Long) => Long.Long;
                            shr: (numBits: number | Long.Long) => Long.Long;
                            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                            shru: (numBits: number | Long.Long) => Long.Long;
                            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                            sub: (subtrahend: string | number | Long.Long) => Long.Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long.Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long.Long;
                            xor: (other: string | number | Long.Long) => Long.Long;
                        } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["tx"]["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["tx"]["coins"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["tx"]["coins"], keyof {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[]>, never>) | undefined;
                    gas?: ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] & ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    } & {
                        asset?: ({
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["tx"]["gas"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | (Long.Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long.Long) => Long.Long;
                            and: (other: string | number | Long.Long) => Long.Long;
                            compare: (other: string | number | Long.Long) => number;
                            comp: (other: string | number | Long.Long) => number;
                            divide: (divisor: string | number | Long.Long) => Long.Long;
                            div: (divisor: string | number | Long.Long) => Long.Long;
                            equals: (other: string | number | Long.Long) => boolean;
                            eq: (other: string | number | Long.Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long.Long) => boolean;
                            gt: (other: string | number | Long.Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                            gte: (other: string | number | Long.Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | Long.Long) => boolean;
                            lt: (other: string | number | Long.Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                            lte: (other: string | number | Long.Long) => boolean;
                            modulo: (other: string | number | Long.Long) => Long.Long;
                            mod: (other: string | number | Long.Long) => Long.Long;
                            multiply: (multiplier: string | number | Long.Long) => Long.Long;
                            mul: (multiplier: string | number | Long.Long) => Long.Long;
                            negate: () => Long.Long;
                            neg: () => Long.Long;
                            not: () => Long.Long;
                            notEquals: (other: string | number | Long.Long) => boolean;
                            neq: (other: string | number | Long.Long) => boolean;
                            or: (other: string | number | Long.Long) => Long.Long;
                            shiftLeft: (numBits: number | Long.Long) => Long.Long;
                            shl: (numBits: number | Long.Long) => Long.Long;
                            shiftRight: (numBits: number | Long.Long) => Long.Long;
                            shr: (numBits: number | Long.Long) => Long.Long;
                            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                            shru: (numBits: number | Long.Long) => Long.Long;
                            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                            sub: (subtrahend: string | number | Long.Long) => Long.Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long.Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long.Long;
                            xor: (other: string | number | Long.Long) => Long.Long;
                        } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["tx"]["gas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["tx"]["gas"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["tx"]["gas"], keyof {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[]>, never>) | undefined;
                    memo?: string | undefined;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["tx"], keyof import("../../common/common").Tx>, never>) | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: (string[] & string[] & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["outHashes"], keyof string[]>, never>) | undefined;
                blockHeight?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["blockHeight"], keyof Long.Long>, never>) | undefined;
                signers?: (string[] & string[] & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["signers"], keyof string[]>, never>) | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["keysignMs"], keyof Long.Long>, never>) | undefined;
                finaliseHeight?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number]["finaliseHeight"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"][number], keyof import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").ObservedTx>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"][number]["txs"], keyof {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[]>, never>) | undefined;
            actions?: ({
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] & ({
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            } & {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["actions"][number]["coin"]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["actions"][number]["coin"]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["actions"][number]["coin"], keyof import("../../common/common").Coin>, never>) | undefined;
                memo?: string | undefined;
                maxGas?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] & ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["actions"][number]["maxGas"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["actions"][number]["maxGas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["actions"][number]["maxGas"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"][number]["actions"][number]["maxGas"], keyof {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[]>, never>) | undefined;
                gasRate?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["actions"][number]["gasRate"], keyof Long.Long>, never>) | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            } & Record<Exclude<keyof I["observedTxInVoters"][number]["actions"][number], keyof import("../../../../thorchain/v1/x/thorchain/types/type_tx_out").TxOutItem>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"][number]["actions"], keyof {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[]>, never>) | undefined;
            outTxs?: ({
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[] & ({
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            } & {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] & ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["outTxs"][number]["coins"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["outTxs"][number]["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["outTxs"][number]["coins"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"][number]["outTxs"][number]["coins"], keyof {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[]>, never>) | undefined;
                gas?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] & ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["outTxs"][number]["gas"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["observedTxInVoters"][number]["outTxs"][number]["gas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["observedTxInVoters"][number]["outTxs"][number]["gas"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"][number]["outTxs"][number]["gas"], keyof {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[]>, never>) | undefined;
                memo?: string | undefined;
            } & Record<Exclude<keyof I["observedTxInVoters"][number]["outTxs"][number], keyof import("../../common/common").Tx>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"][number]["outTxs"], keyof {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[]>, never>) | undefined;
            finalisedHeight?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["observedTxInVoters"][number]["finalisedHeight"], keyof Long.Long>, never>) | undefined;
            updatedVault?: boolean | undefined;
            reverted?: boolean | undefined;
            outboundHeight?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["observedTxInVoters"][number]["outboundHeight"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["observedTxInVoters"][number], keyof ObservedTxVoter>, never>)[] & Record<Exclude<keyof I["observedTxInVoters"], keyof {
            txId?: string | undefined;
            tx?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } | undefined;
            height?: string | number | Long.Long | undefined;
            txs?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[] | undefined;
            actions?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
            outTxs?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[] | undefined;
            finalisedHeight?: string | number | Long.Long | undefined;
            updatedVault?: boolean | undefined;
            reverted?: boolean | undefined;
            outboundHeight?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
        observedTxOutVoters?: ({
            txId?: string | undefined;
            tx?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } | undefined;
            height?: string | number | Long.Long | undefined;
            txs?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[] | undefined;
            actions?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
            outTxs?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[] | undefined;
            finalisedHeight?: string | number | Long.Long | undefined;
            updatedVault?: boolean | undefined;
            reverted?: boolean | undefined;
            outboundHeight?: string | number | Long.Long | undefined;
        }[] & ({
            txId?: string | undefined;
            tx?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } | undefined;
            height?: string | number | Long.Long | undefined;
            txs?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[] | undefined;
            actions?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
            outTxs?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[] | undefined;
            finalisedHeight?: string | number | Long.Long | undefined;
            updatedVault?: boolean | undefined;
            reverted?: boolean | undefined;
            outboundHeight?: string | number | Long.Long | undefined;
        } & {
            txId?: string | undefined;
            tx?: ({
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } & {
                tx?: ({
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } & {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] & ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    } & {
                        asset?: ({
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["tx"]["coins"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | (Long.Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long.Long) => Long.Long;
                            and: (other: string | number | Long.Long) => Long.Long;
                            compare: (other: string | number | Long.Long) => number;
                            comp: (other: string | number | Long.Long) => number;
                            divide: (divisor: string | number | Long.Long) => Long.Long;
                            div: (divisor: string | number | Long.Long) => Long.Long;
                            equals: (other: string | number | Long.Long) => boolean;
                            eq: (other: string | number | Long.Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long.Long) => boolean;
                            gt: (other: string | number | Long.Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                            gte: (other: string | number | Long.Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | Long.Long) => boolean;
                            lt: (other: string | number | Long.Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                            lte: (other: string | number | Long.Long) => boolean;
                            modulo: (other: string | number | Long.Long) => Long.Long;
                            mod: (other: string | number | Long.Long) => Long.Long;
                            multiply: (multiplier: string | number | Long.Long) => Long.Long;
                            mul: (multiplier: string | number | Long.Long) => Long.Long;
                            negate: () => Long.Long;
                            neg: () => Long.Long;
                            not: () => Long.Long;
                            notEquals: (other: string | number | Long.Long) => boolean;
                            neq: (other: string | number | Long.Long) => boolean;
                            or: (other: string | number | Long.Long) => Long.Long;
                            shiftLeft: (numBits: number | Long.Long) => Long.Long;
                            shl: (numBits: number | Long.Long) => Long.Long;
                            shiftRight: (numBits: number | Long.Long) => Long.Long;
                            shr: (numBits: number | Long.Long) => Long.Long;
                            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                            shru: (numBits: number | Long.Long) => Long.Long;
                            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                            sub: (subtrahend: string | number | Long.Long) => Long.Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long.Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long.Long;
                            xor: (other: string | number | Long.Long) => Long.Long;
                        } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["tx"]["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["tx"]["coins"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["tx"]["coins"], keyof {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[]>, never>) | undefined;
                    gas?: ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] & ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    } & {
                        asset?: ({
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["tx"]["gas"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | (Long.Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long.Long) => Long.Long;
                            and: (other: string | number | Long.Long) => Long.Long;
                            compare: (other: string | number | Long.Long) => number;
                            comp: (other: string | number | Long.Long) => number;
                            divide: (divisor: string | number | Long.Long) => Long.Long;
                            div: (divisor: string | number | Long.Long) => Long.Long;
                            equals: (other: string | number | Long.Long) => boolean;
                            eq: (other: string | number | Long.Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long.Long) => boolean;
                            gt: (other: string | number | Long.Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                            gte: (other: string | number | Long.Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | Long.Long) => boolean;
                            lt: (other: string | number | Long.Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                            lte: (other: string | number | Long.Long) => boolean;
                            modulo: (other: string | number | Long.Long) => Long.Long;
                            mod: (other: string | number | Long.Long) => Long.Long;
                            multiply: (multiplier: string | number | Long.Long) => Long.Long;
                            mul: (multiplier: string | number | Long.Long) => Long.Long;
                            negate: () => Long.Long;
                            neg: () => Long.Long;
                            not: () => Long.Long;
                            notEquals: (other: string | number | Long.Long) => boolean;
                            neq: (other: string | number | Long.Long) => boolean;
                            or: (other: string | number | Long.Long) => Long.Long;
                            shiftLeft: (numBits: number | Long.Long) => Long.Long;
                            shl: (numBits: number | Long.Long) => Long.Long;
                            shiftRight: (numBits: number | Long.Long) => Long.Long;
                            shr: (numBits: number | Long.Long) => Long.Long;
                            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                            shru: (numBits: number | Long.Long) => Long.Long;
                            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                            sub: (subtrahend: string | number | Long.Long) => Long.Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long.Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long.Long;
                            xor: (other: string | number | Long.Long) => Long.Long;
                        } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["tx"]["gas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["tx"]["gas"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["tx"]["gas"], keyof {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[]>, never>) | undefined;
                    memo?: string | undefined;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["tx"], keyof import("../../common/common").Tx>, never>) | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: (string[] & string[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["outHashes"], keyof string[]>, never>) | undefined;
                blockHeight?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["blockHeight"], keyof Long.Long>, never>) | undefined;
                signers?: (string[] & string[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["signers"], keyof string[]>, never>) | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["keysignMs"], keyof Long.Long>, never>) | undefined;
                finaliseHeight?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"]["finaliseHeight"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["observedTxOutVoters"][number]["tx"], keyof import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").ObservedTx>, never>) | undefined;
            height?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["observedTxOutVoters"][number]["height"], keyof Long.Long>, never>) | undefined;
            txs?: ({
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[] & ({
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } & {
                tx?: ({
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } & {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] & ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    } & {
                        asset?: ({
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["tx"]["coins"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | (Long.Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long.Long) => Long.Long;
                            and: (other: string | number | Long.Long) => Long.Long;
                            compare: (other: string | number | Long.Long) => number;
                            comp: (other: string | number | Long.Long) => number;
                            divide: (divisor: string | number | Long.Long) => Long.Long;
                            div: (divisor: string | number | Long.Long) => Long.Long;
                            equals: (other: string | number | Long.Long) => boolean;
                            eq: (other: string | number | Long.Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long.Long) => boolean;
                            gt: (other: string | number | Long.Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                            gte: (other: string | number | Long.Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | Long.Long) => boolean;
                            lt: (other: string | number | Long.Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                            lte: (other: string | number | Long.Long) => boolean;
                            modulo: (other: string | number | Long.Long) => Long.Long;
                            mod: (other: string | number | Long.Long) => Long.Long;
                            multiply: (multiplier: string | number | Long.Long) => Long.Long;
                            mul: (multiplier: string | number | Long.Long) => Long.Long;
                            negate: () => Long.Long;
                            neg: () => Long.Long;
                            not: () => Long.Long;
                            notEquals: (other: string | number | Long.Long) => boolean;
                            neq: (other: string | number | Long.Long) => boolean;
                            or: (other: string | number | Long.Long) => Long.Long;
                            shiftLeft: (numBits: number | Long.Long) => Long.Long;
                            shl: (numBits: number | Long.Long) => Long.Long;
                            shiftRight: (numBits: number | Long.Long) => Long.Long;
                            shr: (numBits: number | Long.Long) => Long.Long;
                            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                            shru: (numBits: number | Long.Long) => Long.Long;
                            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                            sub: (subtrahend: string | number | Long.Long) => Long.Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long.Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long.Long;
                            xor: (other: string | number | Long.Long) => Long.Long;
                        } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["tx"]["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["tx"]["coins"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["tx"]["coins"], keyof {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[]>, never>) | undefined;
                    gas?: ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] & ({
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    } & {
                        asset?: ({
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["tx"]["gas"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | (Long.Long & {
                            high: number;
                            low: number;
                            unsigned: boolean;
                            add: (addend: string | number | Long.Long) => Long.Long;
                            and: (other: string | number | Long.Long) => Long.Long;
                            compare: (other: string | number | Long.Long) => number;
                            comp: (other: string | number | Long.Long) => number;
                            divide: (divisor: string | number | Long.Long) => Long.Long;
                            div: (divisor: string | number | Long.Long) => Long.Long;
                            equals: (other: string | number | Long.Long) => boolean;
                            eq: (other: string | number | Long.Long) => boolean;
                            getHighBits: () => number;
                            getHighBitsUnsigned: () => number;
                            getLowBits: () => number;
                            getLowBitsUnsigned: () => number;
                            getNumBitsAbs: () => number;
                            greaterThan: (other: string | number | Long.Long) => boolean;
                            gt: (other: string | number | Long.Long) => boolean;
                            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                            gte: (other: string | number | Long.Long) => boolean;
                            isEven: () => boolean;
                            isNegative: () => boolean;
                            isOdd: () => boolean;
                            isPositive: () => boolean;
                            isZero: () => boolean;
                            lessThan: (other: string | number | Long.Long) => boolean;
                            lt: (other: string | number | Long.Long) => boolean;
                            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                            lte: (other: string | number | Long.Long) => boolean;
                            modulo: (other: string | number | Long.Long) => Long.Long;
                            mod: (other: string | number | Long.Long) => Long.Long;
                            multiply: (multiplier: string | number | Long.Long) => Long.Long;
                            mul: (multiplier: string | number | Long.Long) => Long.Long;
                            negate: () => Long.Long;
                            neg: () => Long.Long;
                            not: () => Long.Long;
                            notEquals: (other: string | number | Long.Long) => boolean;
                            neq: (other: string | number | Long.Long) => boolean;
                            or: (other: string | number | Long.Long) => Long.Long;
                            shiftLeft: (numBits: number | Long.Long) => Long.Long;
                            shl: (numBits: number | Long.Long) => Long.Long;
                            shiftRight: (numBits: number | Long.Long) => Long.Long;
                            shr: (numBits: number | Long.Long) => Long.Long;
                            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                            shru: (numBits: number | Long.Long) => Long.Long;
                            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                            sub: (subtrahend: string | number | Long.Long) => Long.Long;
                            toInt: () => number;
                            toNumber: () => number;
                            toBytes: (le?: boolean | undefined) => number[];
                            toBytesLE: () => number[];
                            toBytesBE: () => number[];
                            toSigned: () => Long.Long;
                            toString: (radix?: number | undefined) => string;
                            toUnsigned: () => Long.Long;
                            xor: (other: string | number | Long.Long) => Long.Long;
                        } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["tx"]["gas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["tx"]["gas"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["tx"]["gas"], keyof {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[]>, never>) | undefined;
                    memo?: string | undefined;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["tx"], keyof import("../../common/common").Tx>, never>) | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: (string[] & string[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["outHashes"], keyof string[]>, never>) | undefined;
                blockHeight?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["blockHeight"], keyof Long.Long>, never>) | undefined;
                signers?: (string[] & string[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["signers"], keyof string[]>, never>) | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["keysignMs"], keyof Long.Long>, never>) | undefined;
                finaliseHeight?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number]["finaliseHeight"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"][number], keyof import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").ObservedTx>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["txs"], keyof {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[]>, never>) | undefined;
            actions?: ({
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] & ({
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            } & {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["actions"][number]["coin"]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["actions"][number]["coin"]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["actions"][number]["coin"], keyof import("../../common/common").Coin>, never>) | undefined;
                memo?: string | undefined;
                maxGas?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] & ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["actions"][number]["maxGas"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["actions"][number]["maxGas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["actions"][number]["maxGas"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["actions"][number]["maxGas"], keyof {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[]>, never>) | undefined;
                gasRate?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["actions"][number]["gasRate"], keyof Long.Long>, never>) | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            } & Record<Exclude<keyof I["observedTxOutVoters"][number]["actions"][number], keyof import("../../../../thorchain/v1/x/thorchain/types/type_tx_out").TxOutItem>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["actions"], keyof {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[]>, never>) | undefined;
            outTxs?: ({
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[] & ({
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            } & {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] & ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["outTxs"][number]["coins"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["outTxs"][number]["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["outTxs"][number]["coins"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["outTxs"][number]["coins"], keyof {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[]>, never>) | undefined;
                gas?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] & ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["outTxs"][number]["gas"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["observedTxOutVoters"][number]["outTxs"][number]["gas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["observedTxOutVoters"][number]["outTxs"][number]["gas"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["outTxs"][number]["gas"], keyof {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[]>, never>) | undefined;
                memo?: string | undefined;
            } & Record<Exclude<keyof I["observedTxOutVoters"][number]["outTxs"][number], keyof import("../../common/common").Tx>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"][number]["outTxs"], keyof {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[]>, never>) | undefined;
            finalisedHeight?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["observedTxOutVoters"][number]["finalisedHeight"], keyof Long.Long>, never>) | undefined;
            updatedVault?: boolean | undefined;
            reverted?: boolean | undefined;
            outboundHeight?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["observedTxOutVoters"][number]["outboundHeight"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["observedTxOutVoters"][number], keyof ObservedTxVoter>, never>)[] & Record<Exclude<keyof I["observedTxOutVoters"], keyof {
            txId?: string | undefined;
            tx?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            } | undefined;
            height?: string | number | Long.Long | undefined;
            txs?: {
                tx?: {
                    id?: string | undefined;
                    chain?: string | undefined;
                    fromAddress?: string | undefined;
                    toAddress?: string | undefined;
                    coins?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    gas?: {
                        asset?: {
                            chain?: string | undefined;
                            symbol?: string | undefined;
                            ticker?: string | undefined;
                            synth?: boolean | undefined;
                        } | undefined;
                        amount?: string | undefined;
                        decimals?: string | number | Long.Long | undefined;
                    }[] | undefined;
                    memo?: string | undefined;
                } | undefined;
                status?: import("../../../../thorchain/v1/x/thorchain/types/type_observed_tx").Status | undefined;
                outHashes?: string[] | undefined;
                blockHeight?: string | number | Long.Long | undefined;
                signers?: string[] | undefined;
                observedPubKey?: string | undefined;
                keysignMs?: string | number | Long.Long | undefined;
                finaliseHeight?: string | number | Long.Long | undefined;
            }[] | undefined;
            actions?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
            outTxs?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            }[] | undefined;
            finalisedHeight?: string | number | Long.Long | undefined;
            updatedVault?: boolean | undefined;
            reverted?: boolean | undefined;
            outboundHeight?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
        txOuts?: ({
            height?: string | number | Long.Long | undefined;
            txArray?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
        }[] & ({
            height?: string | number | Long.Long | undefined;
            txArray?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
        } & {
            height?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["txOuts"][number]["height"], keyof Long.Long>, never>) | undefined;
            txArray?: ({
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] & ({
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            } & {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["txOuts"][number]["txArray"][number]["coin"]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["txOuts"][number]["txArray"][number]["coin"]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["txOuts"][number]["txArray"][number]["coin"], keyof import("../../common/common").Coin>, never>) | undefined;
                memo?: string | undefined;
                maxGas?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] & ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["txOuts"][number]["txArray"][number]["maxGas"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["txOuts"][number]["txArray"][number]["maxGas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["txOuts"][number]["txArray"][number]["maxGas"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["txOuts"][number]["txArray"][number]["maxGas"], keyof {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[]>, never>) | undefined;
                gasRate?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["txOuts"][number]["txArray"][number]["gasRate"], keyof Long.Long>, never>) | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            } & Record<Exclude<keyof I["txOuts"][number]["txArray"][number], keyof import("../../../../thorchain/v1/x/thorchain/types/type_tx_out").TxOutItem>, never>)[] & Record<Exclude<keyof I["txOuts"][number]["txArray"], keyof {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["txOuts"][number], keyof TxOut>, never>)[] & Record<Exclude<keyof I["txOuts"], keyof {
            height?: string | number | Long.Long | undefined;
            txArray?: {
                chain?: string | undefined;
                toAddress?: string | undefined;
                vaultPubKey?: string | undefined;
                coin?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } | undefined;
                memo?: string | undefined;
                maxGas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gasRate?: string | number | Long.Long | undefined;
                inHash?: string | undefined;
                outHash?: string | undefined;
                moduleName?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        nodeAccounts?: ({
            nodeAddress?: Uint8Array | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_node_account").NodeStatus | undefined;
            pubKeySet?: {
                secp256k1?: string | undefined;
                ed25519?: string | undefined;
            } | undefined;
            validatorConsPubKey?: string | undefined;
            bond?: string | undefined;
            activeBlockHeight?: string | number | Long.Long | undefined;
            bondAddress?: string | undefined;
            statusSince?: string | number | Long.Long | undefined;
            signerMembership?: string[] | undefined;
            requestedToLeave?: boolean | undefined;
            forcedToLeave?: boolean | undefined;
            leaveScore?: string | number | Long.Long | undefined;
            ipAddress?: string | undefined;
            version?: string | undefined;
            type?: import("../../../../thorchain/v1/x/thorchain/types/type_node_account").NodeType | undefined;
        }[] & ({
            nodeAddress?: Uint8Array | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_node_account").NodeStatus | undefined;
            pubKeySet?: {
                secp256k1?: string | undefined;
                ed25519?: string | undefined;
            } | undefined;
            validatorConsPubKey?: string | undefined;
            bond?: string | undefined;
            activeBlockHeight?: string | number | Long.Long | undefined;
            bondAddress?: string | undefined;
            statusSince?: string | number | Long.Long | undefined;
            signerMembership?: string[] | undefined;
            requestedToLeave?: boolean | undefined;
            forcedToLeave?: boolean | undefined;
            leaveScore?: string | number | Long.Long | undefined;
            ipAddress?: string | undefined;
            version?: string | undefined;
            type?: import("../../../../thorchain/v1/x/thorchain/types/type_node_account").NodeType | undefined;
        } & {
            nodeAddress?: Uint8Array | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_node_account").NodeStatus | undefined;
            pubKeySet?: ({
                secp256k1?: string | undefined;
                ed25519?: string | undefined;
            } & {
                secp256k1?: string | undefined;
                ed25519?: string | undefined;
            } & Record<Exclude<keyof I["nodeAccounts"][number]["pubKeySet"], keyof import("../../common/common").PubKeySet>, never>) | undefined;
            validatorConsPubKey?: string | undefined;
            bond?: string | undefined;
            activeBlockHeight?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["nodeAccounts"][number]["activeBlockHeight"], keyof Long.Long>, never>) | undefined;
            bondAddress?: string | undefined;
            statusSince?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["nodeAccounts"][number]["statusSince"], keyof Long.Long>, never>) | undefined;
            signerMembership?: (string[] & string[] & Record<Exclude<keyof I["nodeAccounts"][number]["signerMembership"], keyof string[]>, never>) | undefined;
            requestedToLeave?: boolean | undefined;
            forcedToLeave?: boolean | undefined;
            leaveScore?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["nodeAccounts"][number]["leaveScore"], keyof Long.Long>, never>) | undefined;
            ipAddress?: string | undefined;
            version?: string | undefined;
            type?: import("../../../../thorchain/v1/x/thorchain/types/type_node_account").NodeType | undefined;
        } & Record<Exclude<keyof I["nodeAccounts"][number], keyof NodeAccount>, never>)[] & Record<Exclude<keyof I["nodeAccounts"], keyof {
            nodeAddress?: Uint8Array | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_node_account").NodeStatus | undefined;
            pubKeySet?: {
                secp256k1?: string | undefined;
                ed25519?: string | undefined;
            } | undefined;
            validatorConsPubKey?: string | undefined;
            bond?: string | undefined;
            activeBlockHeight?: string | number | Long.Long | undefined;
            bondAddress?: string | undefined;
            statusSince?: string | number | Long.Long | undefined;
            signerMembership?: string[] | undefined;
            requestedToLeave?: boolean | undefined;
            forcedToLeave?: boolean | undefined;
            leaveScore?: string | number | Long.Long | undefined;
            ipAddress?: string | undefined;
            version?: string | undefined;
            type?: import("../../../../thorchain/v1/x/thorchain/types/type_node_account").NodeType | undefined;
        }[]>, never>) | undefined;
        vaults?: ({
            blockHeight?: string | number | Long.Long | undefined;
            pubKey?: string | undefined;
            coins?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            type?: import("../../../../thorchain/v1/x/thorchain/types/type_vault").VaultType | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_vault").VaultStatus | undefined;
            statusSince?: string | number | Long.Long | undefined;
            membership?: string[] | undefined;
            chains?: string[] | undefined;
            inboundTxCount?: string | number | Long.Long | undefined;
            outboundTxCount?: string | number | Long.Long | undefined;
            pendingTxBlockHeights?: (string | number | Long.Long)[] | undefined;
            routers?: {
                chain?: string | undefined;
                router?: string | undefined;
            }[] | undefined;
        }[] & ({
            blockHeight?: string | number | Long.Long | undefined;
            pubKey?: string | undefined;
            coins?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            type?: import("../../../../thorchain/v1/x/thorchain/types/type_vault").VaultType | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_vault").VaultStatus | undefined;
            statusSince?: string | number | Long.Long | undefined;
            membership?: string[] | undefined;
            chains?: string[] | undefined;
            inboundTxCount?: string | number | Long.Long | undefined;
            outboundTxCount?: string | number | Long.Long | undefined;
            pendingTxBlockHeights?: (string | number | Long.Long)[] | undefined;
            routers?: {
                chain?: string | undefined;
                router?: string | undefined;
            }[] | undefined;
        } & {
            blockHeight?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["vaults"][number]["blockHeight"], keyof Long.Long>, never>) | undefined;
            pubKey?: string | undefined;
            coins?: ({
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] & ({
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            } & {
                asset?: ({
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } & {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } & Record<Exclude<keyof I["vaults"][number]["coins"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                amount?: string | undefined;
                decimals?: string | number | (Long.Long & {
                    high: number;
                    low: number;
                    unsigned: boolean;
                    add: (addend: string | number | Long.Long) => Long.Long;
                    and: (other: string | number | Long.Long) => Long.Long;
                    compare: (other: string | number | Long.Long) => number;
                    comp: (other: string | number | Long.Long) => number;
                    divide: (divisor: string | number | Long.Long) => Long.Long;
                    div: (divisor: string | number | Long.Long) => Long.Long;
                    equals: (other: string | number | Long.Long) => boolean;
                    eq: (other: string | number | Long.Long) => boolean;
                    getHighBits: () => number;
                    getHighBitsUnsigned: () => number;
                    getLowBits: () => number;
                    getLowBitsUnsigned: () => number;
                    getNumBitsAbs: () => number;
                    greaterThan: (other: string | number | Long.Long) => boolean;
                    gt: (other: string | number | Long.Long) => boolean;
                    greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                    gte: (other: string | number | Long.Long) => boolean;
                    isEven: () => boolean;
                    isNegative: () => boolean;
                    isOdd: () => boolean;
                    isPositive: () => boolean;
                    isZero: () => boolean;
                    lessThan: (other: string | number | Long.Long) => boolean;
                    lt: (other: string | number | Long.Long) => boolean;
                    lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                    lte: (other: string | number | Long.Long) => boolean;
                    modulo: (other: string | number | Long.Long) => Long.Long;
                    mod: (other: string | number | Long.Long) => Long.Long;
                    multiply: (multiplier: string | number | Long.Long) => Long.Long;
                    mul: (multiplier: string | number | Long.Long) => Long.Long;
                    negate: () => Long.Long;
                    neg: () => Long.Long;
                    not: () => Long.Long;
                    notEquals: (other: string | number | Long.Long) => boolean;
                    neq: (other: string | number | Long.Long) => boolean;
                    or: (other: string | number | Long.Long) => Long.Long;
                    shiftLeft: (numBits: number | Long.Long) => Long.Long;
                    shl: (numBits: number | Long.Long) => Long.Long;
                    shiftRight: (numBits: number | Long.Long) => Long.Long;
                    shr: (numBits: number | Long.Long) => Long.Long;
                    shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                    shru: (numBits: number | Long.Long) => Long.Long;
                    subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                    sub: (subtrahend: string | number | Long.Long) => Long.Long;
                    toInt: () => number;
                    toNumber: () => number;
                    toBytes: (le?: boolean | undefined) => number[];
                    toBytesLE: () => number[];
                    toBytesBE: () => number[];
                    toSigned: () => Long.Long;
                    toString: (radix?: number | undefined) => string;
                    toUnsigned: () => Long.Long;
                    xor: (other: string | number | Long.Long) => Long.Long;
                } & Record<Exclude<keyof I["vaults"][number]["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
            } & Record<Exclude<keyof I["vaults"][number]["coins"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["vaults"][number]["coins"], keyof {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[]>, never>) | undefined;
            type?: import("../../../../thorchain/v1/x/thorchain/types/type_vault").VaultType | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_vault").VaultStatus | undefined;
            statusSince?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["vaults"][number]["statusSince"], keyof Long.Long>, never>) | undefined;
            membership?: (string[] & string[] & Record<Exclude<keyof I["vaults"][number]["membership"], keyof string[]>, never>) | undefined;
            chains?: (string[] & string[] & Record<Exclude<keyof I["vaults"][number]["chains"], keyof string[]>, never>) | undefined;
            inboundTxCount?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["vaults"][number]["inboundTxCount"], keyof Long.Long>, never>) | undefined;
            outboundTxCount?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["vaults"][number]["outboundTxCount"], keyof Long.Long>, never>) | undefined;
            pendingTxBlockHeights?: ((string | number | Long.Long)[] & (string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["vaults"][number]["pendingTxBlockHeights"][number], keyof Long.Long>, never>))[] & Record<Exclude<keyof I["vaults"][number]["pendingTxBlockHeights"], keyof (string | number | Long.Long)[]>, never>) | undefined;
            routers?: ({
                chain?: string | undefined;
                router?: string | undefined;
            }[] & ({
                chain?: string | undefined;
                router?: string | undefined;
            } & {
                chain?: string | undefined;
                router?: string | undefined;
            } & Record<Exclude<keyof I["vaults"][number]["routers"][number], keyof ChainContract>, never>)[] & Record<Exclude<keyof I["vaults"][number]["routers"], keyof {
                chain?: string | undefined;
                router?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["vaults"][number], keyof Vault>, never>)[] & Record<Exclude<keyof I["vaults"], keyof {
            blockHeight?: string | number | Long.Long | undefined;
            pubKey?: string | undefined;
            coins?: {
                asset?: {
                    chain?: string | undefined;
                    symbol?: string | undefined;
                    ticker?: string | undefined;
                    synth?: boolean | undefined;
                } | undefined;
                amount?: string | undefined;
                decimals?: string | number | Long.Long | undefined;
            }[] | undefined;
            type?: import("../../../../thorchain/v1/x/thorchain/types/type_vault").VaultType | undefined;
            status?: import("../../../../thorchain/v1/x/thorchain/types/type_vault").VaultStatus | undefined;
            statusSince?: string | number | Long.Long | undefined;
            membership?: string[] | undefined;
            chains?: string[] | undefined;
            inboundTxCount?: string | number | Long.Long | undefined;
            outboundTxCount?: string | number | Long.Long | undefined;
            pendingTxBlockHeights?: (string | number | Long.Long)[] | undefined;
            routers?: {
                chain?: string | undefined;
                router?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        reserve?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["reserve"], keyof Long.Long>, never>) | undefined;
        lastSignedHeight?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["lastSignedHeight"], keyof Long.Long>, never>) | undefined;
        lastChainHeights?: ({
            chain?: string | undefined;
            height?: string | number | Long.Long | undefined;
        }[] & ({
            chain?: string | undefined;
            height?: string | number | Long.Long | undefined;
        } & {
            chain?: string | undefined;
            height?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["lastChainHeights"][number]["height"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["lastChainHeights"][number], keyof lastChainHeight>, never>)[] & Record<Exclude<keyof I["lastChainHeights"], keyof {
            chain?: string | undefined;
            height?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
        reserveContributors?: ({
            address?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            address?: string | undefined;
            amount?: string | undefined;
        } & {
            address?: string | undefined;
            amount?: string | undefined;
        } & Record<Exclude<keyof I["reserveContributors"][number], keyof ReserveContributor>, never>)[] & Record<Exclude<keyof I["reserveContributors"], keyof {
            address?: string | undefined;
            amount?: string | undefined;
        }[]>, never>) | undefined;
        network?: ({
            bondRewardRune?: string | undefined;
            totalBondUnits?: string | undefined;
            burnedBep2Rune?: string | undefined;
            burnedErc20Rune?: string | undefined;
            LPIncomeSplit?: string | number | Long.Long | undefined;
            NodeIncomeSplit?: string | number | Long.Long | undefined;
        } & {
            bondRewardRune?: string | undefined;
            totalBondUnits?: string | undefined;
            burnedBep2Rune?: string | undefined;
            burnedErc20Rune?: string | undefined;
            LPIncomeSplit?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["network"]["LPIncomeSplit"], keyof Long.Long>, never>) | undefined;
            NodeIncomeSplit?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["network"]["NodeIncomeSplit"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["network"], keyof Network>, never>) | undefined;
        msgSwaps?: ({
            tx?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            } | undefined;
            targetAsset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            destination?: string | undefined;
            tradeTarget?: string | undefined;
            affiliateAddress?: string | undefined;
            affiliateBasisPoints?: string | undefined;
            signer?: Uint8Array | undefined;
        }[] & ({
            tx?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            } | undefined;
            targetAsset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            destination?: string | undefined;
            tradeTarget?: string | undefined;
            affiliateAddress?: string | undefined;
            affiliateBasisPoints?: string | undefined;
            signer?: Uint8Array | undefined;
        } & {
            tx?: ({
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            } & {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] & ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["msgSwaps"][number]["tx"]["coins"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["msgSwaps"][number]["tx"]["coins"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["msgSwaps"][number]["tx"]["coins"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["msgSwaps"][number]["tx"]["coins"], keyof {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[]>, never>) | undefined;
                gas?: ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] & ({
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                } & {
                    asset?: ({
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } & Record<Exclude<keyof I["msgSwaps"][number]["tx"]["gas"][number]["asset"], keyof import("../../common/common").Asset>, never>) | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | (Long.Long & {
                        high: number;
                        low: number;
                        unsigned: boolean;
                        add: (addend: string | number | Long.Long) => Long.Long;
                        and: (other: string | number | Long.Long) => Long.Long;
                        compare: (other: string | number | Long.Long) => number;
                        comp: (other: string | number | Long.Long) => number;
                        divide: (divisor: string | number | Long.Long) => Long.Long;
                        div: (divisor: string | number | Long.Long) => Long.Long;
                        equals: (other: string | number | Long.Long) => boolean;
                        eq: (other: string | number | Long.Long) => boolean;
                        getHighBits: () => number;
                        getHighBitsUnsigned: () => number;
                        getLowBits: () => number;
                        getLowBitsUnsigned: () => number;
                        getNumBitsAbs: () => number;
                        greaterThan: (other: string | number | Long.Long) => boolean;
                        gt: (other: string | number | Long.Long) => boolean;
                        greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                        gte: (other: string | number | Long.Long) => boolean;
                        isEven: () => boolean;
                        isNegative: () => boolean;
                        isOdd: () => boolean;
                        isPositive: () => boolean;
                        isZero: () => boolean;
                        lessThan: (other: string | number | Long.Long) => boolean;
                        lt: (other: string | number | Long.Long) => boolean;
                        lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                        lte: (other: string | number | Long.Long) => boolean;
                        modulo: (other: string | number | Long.Long) => Long.Long;
                        mod: (other: string | number | Long.Long) => Long.Long;
                        multiply: (multiplier: string | number | Long.Long) => Long.Long;
                        mul: (multiplier: string | number | Long.Long) => Long.Long;
                        negate: () => Long.Long;
                        neg: () => Long.Long;
                        not: () => Long.Long;
                        notEquals: (other: string | number | Long.Long) => boolean;
                        neq: (other: string | number | Long.Long) => boolean;
                        or: (other: string | number | Long.Long) => Long.Long;
                        shiftLeft: (numBits: number | Long.Long) => Long.Long;
                        shl: (numBits: number | Long.Long) => Long.Long;
                        shiftRight: (numBits: number | Long.Long) => Long.Long;
                        shr: (numBits: number | Long.Long) => Long.Long;
                        shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                        shru: (numBits: number | Long.Long) => Long.Long;
                        subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                        sub: (subtrahend: string | number | Long.Long) => Long.Long;
                        toInt: () => number;
                        toNumber: () => number;
                        toBytes: (le?: boolean | undefined) => number[];
                        toBytesLE: () => number[];
                        toBytesBE: () => number[];
                        toSigned: () => Long.Long;
                        toString: (radix?: number | undefined) => string;
                        toUnsigned: () => Long.Long;
                        xor: (other: string | number | Long.Long) => Long.Long;
                    } & Record<Exclude<keyof I["msgSwaps"][number]["tx"]["gas"][number]["decimals"], keyof Long.Long>, never>) | undefined;
                } & Record<Exclude<keyof I["msgSwaps"][number]["tx"]["gas"][number], keyof import("../../common/common").Coin>, never>)[] & Record<Exclude<keyof I["msgSwaps"][number]["tx"]["gas"], keyof {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[]>, never>) | undefined;
                memo?: string | undefined;
            } & Record<Exclude<keyof I["msgSwaps"][number]["tx"], keyof import("../../common/common").Tx>, never>) | undefined;
            targetAsset?: ({
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & Record<Exclude<keyof I["msgSwaps"][number]["targetAsset"], keyof import("../../common/common").Asset>, never>) | undefined;
            destination?: string | undefined;
            tradeTarget?: string | undefined;
            affiliateAddress?: string | undefined;
            affiliateBasisPoints?: string | undefined;
            signer?: Uint8Array | undefined;
        } & Record<Exclude<keyof I["msgSwaps"][number], keyof MsgSwap>, never>)[] & Record<Exclude<keyof I["msgSwaps"], keyof {
            tx?: {
                id?: string | undefined;
                chain?: string | undefined;
                fromAddress?: string | undefined;
                toAddress?: string | undefined;
                coins?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                gas?: {
                    asset?: {
                        chain?: string | undefined;
                        symbol?: string | undefined;
                        ticker?: string | undefined;
                        synth?: boolean | undefined;
                    } | undefined;
                    amount?: string | undefined;
                    decimals?: string | number | Long.Long | undefined;
                }[] | undefined;
                memo?: string | undefined;
            } | undefined;
            targetAsset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            destination?: string | undefined;
            tradeTarget?: string | undefined;
            affiliateAddress?: string | undefined;
            affiliateBasisPoints?: string | undefined;
            signer?: Uint8Array | undefined;
        }[]>, never>) | undefined;
        networkFees?: ({
            chain?: string | undefined;
            transactionSize?: string | number | Long.Long | undefined;
            transactionFeeRate?: string | number | Long.Long | undefined;
        }[] & ({
            chain?: string | undefined;
            transactionSize?: string | number | Long.Long | undefined;
            transactionFeeRate?: string | number | Long.Long | undefined;
        } & {
            chain?: string | undefined;
            transactionSize?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["networkFees"][number]["transactionSize"], keyof Long.Long>, never>) | undefined;
            transactionFeeRate?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["networkFees"][number]["transactionFeeRate"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["networkFees"][number], keyof NetworkFee>, never>)[] & Record<Exclude<keyof I["networkFees"], keyof {
            chain?: string | undefined;
            transactionSize?: string | number | Long.Long | undefined;
            transactionFeeRate?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
        chainContracts?: ({
            chain?: string | undefined;
            router?: string | undefined;
        }[] & ({
            chain?: string | undefined;
            router?: string | undefined;
        } & {
            chain?: string | undefined;
            router?: string | undefined;
        } & Record<Exclude<keyof I["chainContracts"][number], keyof ChainContract>, never>)[] & Record<Exclude<keyof I["chainContracts"], keyof {
            chain?: string | undefined;
            router?: string | undefined;
        }[]>, never>) | undefined;
        THORNames?: ({
            name?: string | undefined;
            expireBlockHeight?: string | number | Long.Long | undefined;
            owner?: Uint8Array | undefined;
            preferredAsset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            aliases?: {
                chain?: string | undefined;
                address?: string | undefined;
            }[] | undefined;
        }[] & ({
            name?: string | undefined;
            expireBlockHeight?: string | number | Long.Long | undefined;
            owner?: Uint8Array | undefined;
            preferredAsset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            aliases?: {
                chain?: string | undefined;
                address?: string | undefined;
            }[] | undefined;
        } & {
            name?: string | undefined;
            expireBlockHeight?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["THORNames"][number]["expireBlockHeight"], keyof Long.Long>, never>) | undefined;
            owner?: Uint8Array | undefined;
            preferredAsset?: ({
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } & Record<Exclude<keyof I["THORNames"][number]["preferredAsset"], keyof import("../../common/common").Asset>, never>) | undefined;
            aliases?: ({
                chain?: string | undefined;
                address?: string | undefined;
            }[] & ({
                chain?: string | undefined;
                address?: string | undefined;
            } & {
                chain?: string | undefined;
                address?: string | undefined;
            } & Record<Exclude<keyof I["THORNames"][number]["aliases"][number], keyof import("../../../../thorchain/v1/x/thorchain/types/type_thorname").THORNameAlias>, never>)[] & Record<Exclude<keyof I["THORNames"][number]["aliases"], keyof {
                chain?: string | undefined;
                address?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["THORNames"][number], keyof THORName>, never>)[] & Record<Exclude<keyof I["THORNames"], keyof {
            name?: string | undefined;
            expireBlockHeight?: string | number | Long.Long | undefined;
            owner?: Uint8Array | undefined;
            preferredAsset?: {
                chain?: string | undefined;
                symbol?: string | undefined;
                ticker?: string | undefined;
                synth?: boolean | undefined;
            } | undefined;
            aliases?: {
                chain?: string | undefined;
                address?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
        mimirs?: ({
            key?: string | undefined;
            value?: string | number | Long.Long | undefined;
        }[] & ({
            key?: string | undefined;
            value?: string | number | Long.Long | undefined;
        } & {
            key?: string | undefined;
            value?: string | number | (Long.Long & {
                high: number;
                low: number;
                unsigned: boolean;
                add: (addend: string | number | Long.Long) => Long.Long;
                and: (other: string | number | Long.Long) => Long.Long;
                compare: (other: string | number | Long.Long) => number;
                comp: (other: string | number | Long.Long) => number;
                divide: (divisor: string | number | Long.Long) => Long.Long;
                div: (divisor: string | number | Long.Long) => Long.Long;
                equals: (other: string | number | Long.Long) => boolean;
                eq: (other: string | number | Long.Long) => boolean;
                getHighBits: () => number;
                getHighBitsUnsigned: () => number;
                getLowBits: () => number;
                getLowBitsUnsigned: () => number;
                getNumBitsAbs: () => number;
                greaterThan: (other: string | number | Long.Long) => boolean;
                gt: (other: string | number | Long.Long) => boolean;
                greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
                gte: (other: string | number | Long.Long) => boolean;
                isEven: () => boolean;
                isNegative: () => boolean;
                isOdd: () => boolean;
                isPositive: () => boolean;
                isZero: () => boolean;
                lessThan: (other: string | number | Long.Long) => boolean;
                lt: (other: string | number | Long.Long) => boolean;
                lessThanOrEqual: (other: string | number | Long.Long) => boolean;
                lte: (other: string | number | Long.Long) => boolean;
                modulo: (other: string | number | Long.Long) => Long.Long;
                mod: (other: string | number | Long.Long) => Long.Long;
                multiply: (multiplier: string | number | Long.Long) => Long.Long;
                mul: (multiplier: string | number | Long.Long) => Long.Long;
                negate: () => Long.Long;
                neg: () => Long.Long;
                not: () => Long.Long;
                notEquals: (other: string | number | Long.Long) => boolean;
                neq: (other: string | number | Long.Long) => boolean;
                or: (other: string | number | Long.Long) => Long.Long;
                shiftLeft: (numBits: number | Long.Long) => Long.Long;
                shl: (numBits: number | Long.Long) => Long.Long;
                shiftRight: (numBits: number | Long.Long) => Long.Long;
                shr: (numBits: number | Long.Long) => Long.Long;
                shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
                shru: (numBits: number | Long.Long) => Long.Long;
                subtract: (subtrahend: string | number | Long.Long) => Long.Long;
                sub: (subtrahend: string | number | Long.Long) => Long.Long;
                toInt: () => number;
                toNumber: () => number;
                toBytes: (le?: boolean | undefined) => number[];
                toBytesLE: () => number[];
                toBytesBE: () => number[];
                toSigned: () => Long.Long;
                toString: (radix?: number | undefined) => string;
                toUnsigned: () => Long.Long;
                xor: (other: string | number | Long.Long) => Long.Long;
            } & Record<Exclude<keyof I["mimirs"][number]["value"], keyof Long.Long>, never>) | undefined;
        } & Record<Exclude<keyof I["mimirs"][number], keyof mimir>, never>)[] & Record<Exclude<keyof I["mimirs"], keyof {
            key?: string | undefined;
            value?: string | number | Long.Long | undefined;
        }[]>, never>) | undefined;
        storeVersion?: string | number | (Long.Long & {
            high: number;
            low: number;
            unsigned: boolean;
            add: (addend: string | number | Long.Long) => Long.Long;
            and: (other: string | number | Long.Long) => Long.Long;
            compare: (other: string | number | Long.Long) => number;
            comp: (other: string | number | Long.Long) => number;
            divide: (divisor: string | number | Long.Long) => Long.Long;
            div: (divisor: string | number | Long.Long) => Long.Long;
            equals: (other: string | number | Long.Long) => boolean;
            eq: (other: string | number | Long.Long) => boolean;
            getHighBits: () => number;
            getHighBitsUnsigned: () => number;
            getLowBits: () => number;
            getLowBitsUnsigned: () => number;
            getNumBitsAbs: () => number;
            greaterThan: (other: string | number | Long.Long) => boolean;
            gt: (other: string | number | Long.Long) => boolean;
            greaterThanOrEqual: (other: string | number | Long.Long) => boolean;
            gte: (other: string | number | Long.Long) => boolean;
            isEven: () => boolean;
            isNegative: () => boolean;
            isOdd: () => boolean;
            isPositive: () => boolean;
            isZero: () => boolean;
            lessThan: (other: string | number | Long.Long) => boolean;
            lt: (other: string | number | Long.Long) => boolean;
            lessThanOrEqual: (other: string | number | Long.Long) => boolean;
            lte: (other: string | number | Long.Long) => boolean;
            modulo: (other: string | number | Long.Long) => Long.Long;
            mod: (other: string | number | Long.Long) => Long.Long;
            multiply: (multiplier: string | number | Long.Long) => Long.Long;
            mul: (multiplier: string | number | Long.Long) => Long.Long;
            negate: () => Long.Long;
            neg: () => Long.Long;
            not: () => Long.Long;
            notEquals: (other: string | number | Long.Long) => boolean;
            neq: (other: string | number | Long.Long) => boolean;
            or: (other: string | number | Long.Long) => Long.Long;
            shiftLeft: (numBits: number | Long.Long) => Long.Long;
            shl: (numBits: number | Long.Long) => Long.Long;
            shiftRight: (numBits: number | Long.Long) => Long.Long;
            shr: (numBits: number | Long.Long) => Long.Long;
            shiftRightUnsigned: (numBits: number | Long.Long) => Long.Long;
            shru: (numBits: number | Long.Long) => Long.Long;
            subtract: (subtrahend: string | number | Long.Long) => Long.Long;
            sub: (subtrahend: string | number | Long.Long) => Long.Long;
            toInt: () => number;
            toNumber: () => number;
            toBytes: (le?: boolean | undefined) => number[];
            toBytesLE: () => number[];
            toBytesBE: () => number[];
            toSigned: () => Long.Long;
            toString: (radix?: number | undefined) => string;
            toUnsigned: () => Long.Long;
            xor: (other: string | number | Long.Long) => Long.Long;
        } & Record<Exclude<keyof I["storeVersion"], keyof Long.Long>, never>) | undefined;
        bondProviders?: ({
            nodeAddress?: Uint8Array | undefined;
            nodeOperatorFee?: string | undefined;
            providers?: {
                bondAddress?: Uint8Array | undefined;
                bond?: string | undefined;
            }[] | undefined;
        }[] & ({
            nodeAddress?: Uint8Array | undefined;
            nodeOperatorFee?: string | undefined;
            providers?: {
                bondAddress?: Uint8Array | undefined;
                bond?: string | undefined;
            }[] | undefined;
        } & {
            nodeAddress?: Uint8Array | undefined;
            nodeOperatorFee?: string | undefined;
            providers?: ({
                bondAddress?: Uint8Array | undefined;
                bond?: string | undefined;
            }[] & ({
                bondAddress?: Uint8Array | undefined;
                bond?: string | undefined;
            } & {
                bondAddress?: Uint8Array | undefined;
                bond?: string | undefined;
            } & Record<Exclude<keyof I["bondProviders"][number]["providers"][number], keyof import("../../../../thorchain/v1/x/thorchain/types/type_node_account").BondProvider>, never>)[] & Record<Exclude<keyof I["bondProviders"][number]["providers"], keyof {
                bondAddress?: Uint8Array | undefined;
                bond?: string | undefined;
            }[]>, never>) | undefined;
        } & Record<Exclude<keyof I["bondProviders"][number], keyof BondProviders>, never>)[] & Record<Exclude<keyof I["bondProviders"], keyof {
            nodeAddress?: Uint8Array | undefined;
            nodeOperatorFee?: string | undefined;
            providers?: {
                bondAddress?: Uint8Array | undefined;
                bond?: string | undefined;
            }[] | undefined;
        }[]>, never>) | undefined;
    } & Record<Exclude<keyof I, keyof GenesisState>, never>>(object: I): GenesisState;
};
