import _m0 from "protobufjs/minimal";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { ContractAuthorization, ContractType, ProviderStatus } from "./keeper";
export declare const protobufPackage = "arkeo.arkeo";
export interface EventBondProvider {
    provider: Uint8Array;
    service: string;
    bondRel: string;
    bondAbs: string;
}
export interface EventModProvider {
    creator: Uint8Array;
    provider: Uint8Array;
    service: string;
    metadataURI: string;
    metadataNonce: number;
    status: ProviderStatus;
    minContractDuration: number;
    maxContractDuration: number;
    subscriptionRate: Coin[];
    payAsYouGoRate: Coin[];
    bond: string;
    settlementDuration: number;
}
export interface EventOpenContract {
    provider: Uint8Array;
    contractId: number;
    service: string;
    client: Uint8Array;
    delegate: Uint8Array;
    type: ContractType;
    height: number;
    duration: number;
    rate: Coin | undefined;
    openCost: number;
    deposit: string;
    settlementDuration: number;
    authorization: ContractAuthorization;
}
export interface EventSettleContract {
    provider: Uint8Array;
    contractId: number;
    service: string;
    client: Uint8Array;
    delegate: Uint8Array;
    type: ContractType;
    nonce: number;
    height: number;
    paid: string;
    reserve: string;
}
export interface EventCloseContract {
    contractId: number;
    provider: Uint8Array;
    service: string;
    client: Uint8Array;
    delegate: Uint8Array;
}
export interface ValidatorPayoutEvent {
    validator: Uint8Array;
    reward: string;
}
export declare const EventBondProvider: {
    encode(message: EventBondProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventBondProvider;
    fromJSON(object: any): EventBondProvider;
    toJSON(message: EventBondProvider): unknown;
    fromPartial<I extends {
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        bondRel?: string | undefined;
        bondAbs?: string | undefined;
    } & {
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        bondRel?: string | undefined;
        bondAbs?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventBondProvider>]: never; }>(object: I): EventBondProvider;
};
export declare const EventModProvider: {
    encode(message: EventModProvider, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventModProvider;
    fromJSON(object: any): EventModProvider;
    toJSON(message: EventModProvider): unknown;
    fromPartial<I extends {
        creator?: Uint8Array | undefined;
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        metadataURI?: string | undefined;
        metadataNonce?: number | undefined;
        status?: ProviderStatus | undefined;
        minContractDuration?: number | undefined;
        maxContractDuration?: number | undefined;
        subscriptionRate?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        payAsYouGoRate?: {
            denom?: string | undefined;
            amount?: string | undefined;
        }[] | undefined;
        bond?: string | undefined;
        settlementDuration?: number | undefined;
    } & {
        creator?: Uint8Array | undefined;
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        metadataURI?: string | undefined;
        metadataNonce?: number | undefined;
        status?: ProviderStatus | undefined;
        minContractDuration?: number | undefined;
        maxContractDuration?: number | undefined;
        subscriptionRate?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["subscriptionRate"][number], keyof Coin>]: never; })[] & { [K_1 in Exclude<keyof I["subscriptionRate"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        payAsYouGoRate?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        }[] & ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K_2 in Exclude<keyof I["payAsYouGoRate"][number], keyof Coin>]: never; })[] & { [K_3 in Exclude<keyof I["payAsYouGoRate"], keyof {
            denom?: string | undefined;
            amount?: string | undefined;
        }[]>]: never; }) | undefined;
        bond?: string | undefined;
        settlementDuration?: number | undefined;
    } & { [K_4 in Exclude<keyof I, keyof EventModProvider>]: never; }>(object: I): EventModProvider;
};
export declare const EventOpenContract: {
    encode(message: EventOpenContract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventOpenContract;
    fromJSON(object: any): EventOpenContract;
    toJSON(message: EventOpenContract): unknown;
    fromPartial<I extends {
        provider?: Uint8Array | undefined;
        contractId?: number | undefined;
        service?: string | undefined;
        client?: Uint8Array | undefined;
        delegate?: Uint8Array | undefined;
        type?: ContractType | undefined;
        height?: number | undefined;
        duration?: number | undefined;
        rate?: {
            denom?: string | undefined;
            amount?: string | undefined;
        } | undefined;
        openCost?: number | undefined;
        deposit?: string | undefined;
        settlementDuration?: number | undefined;
        authorization?: ContractAuthorization | undefined;
    } & {
        provider?: Uint8Array | undefined;
        contractId?: number | undefined;
        service?: string | undefined;
        client?: Uint8Array | undefined;
        delegate?: Uint8Array | undefined;
        type?: ContractType | undefined;
        height?: number | undefined;
        duration?: number | undefined;
        rate?: ({
            denom?: string | undefined;
            amount?: string | undefined;
        } & {
            denom?: string | undefined;
            amount?: string | undefined;
        } & { [K in Exclude<keyof I["rate"], keyof Coin>]: never; }) | undefined;
        openCost?: number | undefined;
        deposit?: string | undefined;
        settlementDuration?: number | undefined;
        authorization?: ContractAuthorization | undefined;
    } & { [K_1 in Exclude<keyof I, keyof EventOpenContract>]: never; }>(object: I): EventOpenContract;
};
export declare const EventSettleContract: {
    encode(message: EventSettleContract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventSettleContract;
    fromJSON(object: any): EventSettleContract;
    toJSON(message: EventSettleContract): unknown;
    fromPartial<I extends {
        provider?: Uint8Array | undefined;
        contractId?: number | undefined;
        service?: string | undefined;
        client?: Uint8Array | undefined;
        delegate?: Uint8Array | undefined;
        type?: ContractType | undefined;
        nonce?: number | undefined;
        height?: number | undefined;
        paid?: string | undefined;
        reserve?: string | undefined;
    } & {
        provider?: Uint8Array | undefined;
        contractId?: number | undefined;
        service?: string | undefined;
        client?: Uint8Array | undefined;
        delegate?: Uint8Array | undefined;
        type?: ContractType | undefined;
        nonce?: number | undefined;
        height?: number | undefined;
        paid?: string | undefined;
        reserve?: string | undefined;
    } & { [K in Exclude<keyof I, keyof EventSettleContract>]: never; }>(object: I): EventSettleContract;
};
export declare const EventCloseContract: {
    encode(message: EventCloseContract, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): EventCloseContract;
    fromJSON(object: any): EventCloseContract;
    toJSON(message: EventCloseContract): unknown;
    fromPartial<I extends {
        contractId?: number | undefined;
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        client?: Uint8Array | undefined;
        delegate?: Uint8Array | undefined;
    } & {
        contractId?: number | undefined;
        provider?: Uint8Array | undefined;
        service?: string | undefined;
        client?: Uint8Array | undefined;
        delegate?: Uint8Array | undefined;
    } & { [K in Exclude<keyof I, keyof EventCloseContract>]: never; }>(object: I): EventCloseContract;
};
export declare const ValidatorPayoutEvent: {
    encode(message: ValidatorPayoutEvent, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): ValidatorPayoutEvent;
    fromJSON(object: any): ValidatorPayoutEvent;
    toJSON(message: ValidatorPayoutEvent): unknown;
    fromPartial<I extends {
        validator?: Uint8Array | undefined;
        reward?: string | undefined;
    } & {
        validator?: Uint8Array | undefined;
        reward?: string | undefined;
    } & { [K in Exclude<keyof I, keyof ValidatorPayoutEvent>]: never; }>(object: I): ValidatorPayoutEvent;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & {
    [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
};
export {};
