"use strict";
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenesisState = exports.protobufPackage = void 0;
/* eslint-disable */
var minimal_1 = __importDefault(require("protobufjs/minimal"));
var coin_1 = require("../../cosmos/base/v1beta1/coin");
var claim_record_1 = require("./claim_record");
var params_1 = require("./params");
exports.protobufPackage = "arkeo.claim";
function createBaseGenesisState() {
    return { moduleAccountBalance: undefined, params: undefined, claimRecords: [] };
}
exports.GenesisState = {
    encode: function (message, writer) {
        var e_1, _a;
        if (writer === void 0) { writer = minimal_1.default.Writer.create(); }
        if (message.moduleAccountBalance !== undefined) {
            coin_1.Coin.encode(message.moduleAccountBalance, writer.uint32(10).fork()).ldelim();
        }
        if (message.params !== undefined) {
            params_1.Params.encode(message.params, writer.uint32(18).fork()).ldelim();
        }
        try {
            for (var _b = __values(message.claimRecords), _c = _b.next(); !_c.done; _c = _b.next()) {
                var v = _c.value;
                claim_record_1.ClaimRecord.encode(v, writer.uint32(26).fork()).ldelim();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof minimal_1.default.Reader ? input : new minimal_1.default.Reader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseGenesisState();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.moduleAccountBalance = coin_1.Coin.decode(reader, reader.uint32());
                    break;
                case 2:
                    message.params = params_1.Params.decode(reader, reader.uint32());
                    break;
                case 3:
                    message.claimRecords.push(claim_record_1.ClaimRecord.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            moduleAccountBalance: isSet(object.moduleAccountBalance) ? coin_1.Coin.fromJSON(object.moduleAccountBalance) : undefined,
            params: isSet(object.params) ? params_1.Params.fromJSON(object.params) : undefined,
            claimRecords: Array.isArray(object === null || object === void 0 ? void 0 : object.claimRecords)
                ? object.claimRecords.map(function (e) { return claim_record_1.ClaimRecord.fromJSON(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var obj = {};
        message.moduleAccountBalance !== undefined && (obj.moduleAccountBalance = message.moduleAccountBalance
            ? coin_1.Coin.toJSON(message.moduleAccountBalance)
            : undefined);
        message.params !== undefined && (obj.params = message.params ? params_1.Params.toJSON(message.params) : undefined);
        if (message.claimRecords) {
            obj.claimRecords = message.claimRecords.map(function (e) { return e ? claim_record_1.ClaimRecord.toJSON(e) : undefined; });
        }
        else {
            obj.claimRecords = [];
        }
        return obj;
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseGenesisState();
        message.moduleAccountBalance = (object.moduleAccountBalance !== undefined && object.moduleAccountBalance !== null)
            ? coin_1.Coin.fromPartial(object.moduleAccountBalance)
            : undefined;
        message.params = (object.params !== undefined && object.params !== null)
            ? params_1.Params.fromPartial(object.params)
            : undefined;
        message.claimRecords = ((_a = object.claimRecords) === null || _a === void 0 ? void 0 : _a.map(function (e) { return claim_record_1.ClaimRecord.fromPartial(e); })) || [];
        return message;
    },
};
function isSet(value) {
    return value !== null && value !== undefined;
}
