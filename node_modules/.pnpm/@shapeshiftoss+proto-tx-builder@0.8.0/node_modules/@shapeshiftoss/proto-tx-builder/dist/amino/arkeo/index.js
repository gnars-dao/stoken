"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAminoConverters = void 0;
var encoding_1 = require("@cosmjs/encoding");
function createAminoConverters() {
    return {
        '/arkeo.arkeo.MsgBondProvider': {
            aminoType: 'arkeo/BondProvider',
            toAmino: function (_a) {
                var creator = _a.creator, provider = _a.provider, service = _a.service, bond = _a.bond;
                return ({
                    creator: (0, encoding_1.toBech32)('arkeo', creator),
                    provider: (0, encoding_1.toBech32)('arkeo', provider),
                    service: service,
                    bond: bond,
                });
            },
            fromAmino: function (_a) {
                var creator = _a.creator, provider = _a.provider, service = _a.service, bond = _a.bond;
                return ({
                    creator: (0, encoding_1.fromBech32)(creator).data,
                    provider: (0, encoding_1.fromBech32)(provider).data,
                    service: service,
                    bond: bond,
                });
            },
        },
        '/arkeo.arkeo.MsgModProvider': {
            aminoType: 'arkeo/ModProvider',
            toAmino: function (_a) {
                var creator = _a.creator, provider = _a.provider, service = _a.service, metadataUri = _a.metadataUri, metadataNonce = _a.metadataNonce, status = _a.status, minContractDuration = _a.minContractDuration, maxContractDuration = _a.maxContractDuration, subscriptionRate = _a.subscriptionRate, payAsYouGoRate = _a.payAsYouGoRate, settlementDuration = _a.settlementDuration;
                return ({
                    creator: (0, encoding_1.toBech32)('arkeo', creator),
                    provider: (0, encoding_1.toBech32)('arkeo', provider),
                    service: service,
                    metadata_uri: metadataUri,
                    metadata_nonce: metadataNonce,
                    status: status,
                    min_contract_duration: minContractDuration,
                    max_contract_duration: maxContractDuration,
                    subscription_rate: subscriptionRate,
                    pay_as_you_go_rate: payAsYouGoRate,
                    settlement_duration: settlementDuration,
                });
            },
            fromAmino: function (_a) {
                var creator = _a.creator, provider = _a.provider, service = _a.service, metadata_uri = _a.metadata_uri, metadata_nonce = _a.metadata_nonce, status = _a.status, min_contract_duration = _a.min_contract_duration, max_contract_duration = _a.max_contract_duration, subscription_rate = _a.subscription_rate, pay_as_you_go_rate = _a.pay_as_you_go_rate, settlement_duration = _a.settlement_duration;
                return ({
                    creator: (0, encoding_1.fromBech32)(creator).data,
                    provider: (0, encoding_1.fromBech32)(provider).data,
                    service: service,
                    metadataUri: metadata_uri,
                    metadataNonce: metadata_nonce,
                    status: status,
                    minContractDuration: min_contract_duration,
                    maxContractDuration: max_contract_duration,
                    subscriptionRate: subscription_rate,
                    payAsYouGoRate: pay_as_you_go_rate,
                    settlementDuration: settlement_duration,
                });
            },
        },
        '/arkeo.arkeo.MsgOpenContract': {
            aminoType: 'arkeo/OpenContract',
            toAmino: function (_a) {
                var creator = _a.creator, provider = _a.provider, service = _a.service, client = _a.client, delegate = _a.delegate, contractType = _a.contractType, duration = _a.duration, rate = _a.rate, deposit = _a.deposit, settlementDuration = _a.settlementDuration, authorization = _a.authorization;
                return ({
                    creator: (0, encoding_1.toBech32)('arkeo', creator),
                    provider: (0, encoding_1.toBech32)('arkeo', provider),
                    service: service,
                    client: (0, encoding_1.toBech32)('arkeo', client),
                    delegate: (0, encoding_1.toBech32)('arkeo', delegate),
                    contract_type: contractType,
                    duration: duration,
                    rate: rate,
                    deposit: deposit,
                    settlement_duration: settlementDuration,
                    authorization: authorization,
                });
            },
            fromAmino: function (_a) {
                var creator = _a.creator, provider = _a.provider, service = _a.service, client = _a.client, delegate = _a.delegate, contract_type = _a.contract_type, duration = _a.duration, rate = _a.rate, deposit = _a.deposit, settlement_duration = _a.settlement_duration, authorization = _a.authorization;
                return ({
                    creator: (0, encoding_1.fromBech32)(creator).data,
                    provider: (0, encoding_1.fromBech32)(provider).data,
                    service: service,
                    client: (0, encoding_1.fromBech32)(client).data,
                    delegate: (0, encoding_1.fromBech32)(delegate).data,
                    contractType: contract_type,
                    duration: duration,
                    rate: rate,
                    deposit: deposit,
                    settlementDuration: settlement_duration,
                    authorization: authorization,
                });
            },
        },
        '/arkeo.arkeo.MsgCloseContract': {
            aminoType: 'arkeo/CloseContract',
            toAmino: function (_a) {
                var creator = _a.creator, contractId = _a.contractId;
                return ({
                    creator: (0, encoding_1.toBech32)('arkeo', creator),
                    contract_id: contractId,
                });
            },
            fromAmino: function (_a) {
                var creator = _a.creator, contract_id = _a.contract_id;
                return ({
                    creator: (0, encoding_1.fromBech32)(creator).data,
                    contractId: contract_id,
                });
            },
        },
        '/arkeo.arkeo.MsgClaimContractIncome': {
            aminoType: 'arkeo/ClaimContractIncome',
            toAmino: function (_a) {
                var creator = _a.creator, contractId = _a.contractId, signature = _a.signature, nonce = _a.nonce;
                return ({
                    creator: (0, encoding_1.toBech32)('arkeo', creator),
                    contract_id: contractId,
                    signature: signature,
                    nonce: nonce,
                });
            },
            fromAmino: function (_a) {
                var creator = _a.creator, contract_id = _a.contract_id, signature = _a.signature, nonce = _a.nonce;
                return ({
                    creator: (0, encoding_1.fromBech32)(creator).data,
                    contractId: contract_id,
                    signature: signature,
                    nonce: nonce,
                });
            },
        },
        '/arkeo.claim.MsgClaimEth': {
            aminoType: 'claim/ClaimEth',
            toAmino: function (_a) {
                var creator = _a.creator, ethAddress = _a.ethAddress, signature = _a.signature;
                return ({
                    creator: (0, encoding_1.toBech32)('arkeo', creator),
                    eth_address: ethAddress,
                    signature: signature,
                });
            },
            fromAmino: function (_a) {
                var creator = _a.creator, eth_address = _a.eth_address, signature = _a.signature;
                return ({
                    creator: (0, encoding_1.fromBech32)(creator).data,
                    ethAddress: eth_address,
                    signature: signature,
                });
            },
        },
        '/arkeo.claim.MsgClaimArkeo': {
            aminoType: 'claim/ClaimArkeo',
            toAmino: function (_a) {
                var creator = _a.creator;
                return ({
                    creator: (0, encoding_1.toBech32)('arkeo', creator),
                });
            },
            fromAmino: function (_a) {
                var creator = _a.creator;
                return ({
                    creator: (0, encoding_1.fromBech32)(creator).data,
                });
            },
        },
        '/arkeo.claim.MsgTransferClaim': {
            aminoType: 'claim/TransferClaim',
            toAmino: function (_a) {
                var creator = _a.creator, toAddress = _a.toAddress;
                return ({
                    creator: (0, encoding_1.toBech32)('arkeo', creator),
                    to_address: (0, encoding_1.toBech32)('arkeo', toAddress),
                });
            },
            fromAmino: function (_a) {
                var creator = _a.creator, to_address = _a.to_address;
                return ({
                    creator: (0, encoding_1.fromBech32)(creator).data,
                    toAddress: (0, encoding_1.fromBech32)(to_address).data,
                });
            },
        },
        '/arkeo.claim.MsgAddClaim': {
            aminoType: 'claim/AddClaim',
            toAmino: function (_a) {
                var creator = _a.creator, chain = _a.chain, address = _a.address, amount = _a.amount;
                return ({
                    creator: (0, encoding_1.toBech32)('arkeo', creator),
                    chain: chain,
                    address: address,
                    amount: amount,
                });
            },
            fromAmino: function (_a) {
                var creator = _a.creator, chain = _a.chain, address = _a.address, amount = _a.amount;
                return ({
                    creator: (0, encoding_1.fromBech32)(creator).data,
                    chain: chain,
                    address: address,
                    amount: amount,
                });
            },
        },
    };
}
exports.createAminoConverters = createAminoConverters;
