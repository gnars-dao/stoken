"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createAminoConverters = void 0;
var encoding_1 = require("@cosmjs/encoding");
function createAminoConverters() {
    return {
        '/types.MsgSend': {
            aminoType: 'thorchain/MsgSend',
            toAmino: function (_a) {
                var fromAddress = _a.fromAddress, toAddress = _a.toAddress, amount = _a.amount;
                return ({
                    from_address: (0, encoding_1.toBech32)('thor', fromAddress),
                    to_address: (0, encoding_1.toBech32)('thor', toAddress),
                    amount: __spreadArray([], __read(amount), false),
                });
            },
            fromAmino: function (_a) {
                var from_address = _a.from_address, to_address = _a.to_address, amount = _a.amount;
                return ({
                    fromAddress: (0, encoding_1.fromBech32)(from_address).data,
                    toAddress: (0, encoding_1.fromBech32)(to_address).data,
                    amount: __spreadArray([], __read(amount), false),
                });
            },
        },
        '/types.MsgDeposit': {
            aminoType: 'thorchain/MsgDeposit',
            toAmino: function (_a) {
                var coins = _a.coins, memo = _a.memo, signer = _a.signer;
                return ({
                    coins: __spreadArray([], __read(coins), false),
                    memo: memo,
                    signer: (0, encoding_1.toBech32)('thor', signer),
                });
            },
            fromAmino: function (_a) {
                var coins = _a.coins, memo = _a.memo, signer = _a.signer;
                return ({
                    coins: __spreadArray([], __read(coins), false),
                    memo: memo,
                    signer: (0, encoding_1.fromBech32)(signer).data,
                });
            },
        },
    };
}
exports.createAminoConverters = createAminoConverters;
