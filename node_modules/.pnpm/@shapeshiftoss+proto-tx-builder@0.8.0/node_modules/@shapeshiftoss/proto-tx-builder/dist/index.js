"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sign = void 0;
var proto_signing_1 = require("@cosmjs/proto-signing");
var stargate_1 = require("@cosmjs/stargate");
var modules_1 = require("@cosmjs/stargate/build/modules"); // not exported from top level, but included in default amino converter types
var utils_1 = require("@cosmjs/stargate/build/queryclient/utils");
var tx_1 = require("cosmjs-types/cosmos/tx/v1beta1/tx");
var bn_js_1 = __importDefault(require("bn.js"));
var amino_1 = require("./amino");
var codecs = __importStar(require("./proto"));
var isProtoTx = function (tx) {
    var msg = tx.msg[0];
    return 'typeUrl' in msg;
};
function sign(signerAddress, tx, signer, _a, prefix // should ideally come from signer, but not exposed by cosmjs at this time
) {
    var accountNumber = _a.accountNumber, sequence = _a.sequence, chainId = _a.chainId;
    if (prefix === void 0) { prefix = 'cosmos'; }
    return __awaiter(this, void 0, void 0, function () {
        var myAminoTypes, myRegistry, clientOffline, _b, msg, fee, memo, signerData, txRaw, encoded, output;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    myAminoTypes = new stargate_1.AminoTypes(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign(__assign({}, (0, stargate_1.createAuthzAminoConverters)()), (0, stargate_1.createBankAminoConverters)()), (0, stargate_1.createDistributionAminoConverters)()), (0, stargate_1.createFeegrantAminoConverters)()), (0, stargate_1.createGovAminoConverters)()), (0, stargate_1.createIbcAminoConverters)()), (0, stargate_1.createStakingAminoConverters)(prefix)), (0, modules_1.createVestingAminoConverters)()), amino_1.thorchain.createAminoConverters()), amino_1.osmosis.createAminoConverters()), amino_1.arkeo.createAminoConverters()));
                    myRegistry = new proto_signing_1.Registry(stargate_1.defaultRegistryTypes);
                    // arkeo
                    myRegistry.register('/arkeo.arkeo.MsgBondProvider', codecs.arkeo.arkeo.MsgBondProvider);
                    myRegistry.register('/arkeo.arkeo.MsgModProvider', codecs.arkeo.arkeo.MsgModProvider);
                    myRegistry.register('/arkeo.arkeo.MsgOpenContract', codecs.arkeo.arkeo.MsgOpenContract);
                    myRegistry.register('/arkeo.arkeo.MsgCloseContract', codecs.arkeo.arkeo.MsgCloseContract);
                    myRegistry.register('/arkeo.arkeo.MsgClaimContractIncome', codecs.arkeo.arkeo.MsgClaimContractIncome);
                    myRegistry.register('/arkeo.claim.MsgClaimEth', codecs.arkeo.claim.MsgClaimEth);
                    myRegistry.register('/arkeo.claim.MsgClaimArkeo', codecs.arkeo.claim.MsgClaimArkeo);
                    myRegistry.register('/arkeo.claim.MsgTransferClaim', codecs.arkeo.claim.MsgTransferClaim);
                    myRegistry.register('/arkeo.claim.MsgAddClaim', codecs.arkeo.claim.MsgAddClaim);
                    // osmosis
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgSwapExactAmountIn', codecs.osmosis.gamm.v1beta1.MsgSwapExactAmountIn);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgSwapExactAmountOut', codecs.osmosis.gamm.v1beta1.MsgSwapExactAmountOut);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgJoinPool', codecs.osmosis.gamm.v1beta1.MsgJoinPool);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgExitPool', codecs.osmosis.gamm.v1beta1.MsgExitPool);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgCreatePool', codecs.osmosis.gamm.v1beta1.MsgCreatePool);
                    myRegistry.register('/osmosis.gamm.v1beta1.PoolParams', codecs.osmosis.gamm.v1beta1.PoolParams);
                    myRegistry.register('/osmosis.gamm.v1beta1.PoolAsset', codecs.osmosis.gamm.v1beta1.PoolAsset);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn', codecs.osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut', codecs.osmosis.gamm.v1beta1.MsgExitSwapExternAmountOut);
                    myRegistry.register('/osmosis.gamm.v1beta1.SwapAmountInRoute', codecs.osmosis.gamm.v1beta1.SwapAmountInRoute);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn', codecs.osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn);
                    myRegistry.register('/osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn', codecs.osmosis.gamm.v1beta1.MsgExitSwapShareAmountIn);
                    myRegistry.register('/osmosis.lockup.MsgLockTokens', codecs.osmosis.lockup.MsgLockTokens);
                    myRegistry.register('/osmosis.lockup.MsgBeginUnlocking', codecs.osmosis.lockup.MsgBeginUnlocking);
                    myRegistry.register('/osmosis.lockup.MsgBeginUnlockingAll', codecs.osmosis.lockup.MsgBeginUnlockingAll);
                    // thorchain
                    myRegistry.register('/types.MsgSend', codecs.thorchain_types.MsgSend);
                    myRegistry.register('/types.MsgDeposit', codecs.thorchain_types.MsgDeposit);
                    return [4 /*yield*/, stargate_1.SigningStargateClient.offline(signer, { registry: myRegistry, aminoTypes: myAminoTypes })];
                case 1:
                    clientOffline = _c.sent();
                    if (tx.msg.length !== 1)
                        throw new Error('support for single message signing only');
                    _b = (function () {
                        if (isProtoTx(tx)) {
                            return tx;
                        }
                        else {
                            return parse_legacy_tx_format(tx);
                        }
                    })(), msg = _b.msg, fee = _b.fee, memo = _b.memo;
                    if (!fee)
                        throw new Error('fee must be defined after conversion');
                    signerData = { accountNumber: Number(accountNumber), sequence: Number(sequence), chainId: chainId };
                    return [4 /*yield*/, clientOffline.sign(signerAddress, msg, fee, memo !== null && memo !== void 0 ? memo : '', signerData)];
                case 2:
                    txRaw = _c.sent();
                    encoded = tx_1.TxRaw.encode(txRaw).finish();
                    output = {
                        serialized: Buffer.from(encoded).toString('base64'),
                        body: Buffer.from(txRaw.bodyBytes).toString('base64'),
                        authInfoBytes: Buffer.from(txRaw.authInfoBytes).toString('base64'),
                        signatures: txRaw.signatures.map(function (x) { return Buffer.from(x).toString('base64'); }),
                    };
                    return [2 /*return*/, output];
            }
        });
    });
}
exports.sign = sign;
var scrubCoin = function (x) {
    if (!x.amount)
        throw new Error('missing coin amount');
    if (!x.denom)
        throw new Error('missing coin denom');
    return (0, proto_signing_1.coin)(x.amount, x.denom);
};
var scrubCoins = function (x) { return x.filter(function (c) { return c.amount; }).map(scrubCoin); };
var scrubRoute = function (x) {
    if (!x.pool_id)
        throw new Error('missing route pool_id');
    if (!x.token_out_denom)
        throw new Error('missing route token_out_denom');
    return {
        poolId: x.pool_id,
        tokenOutDenom: x.token_out_denom,
    };
};
var scrubRoutes = function (x) { return x.map(scrubRoute); };
function parse_legacy_tx_format(tx) {
    var _a;
    var msgOrMsgs = (_a = tx.msg) !== null && _a !== void 0 ? _a : tx.msgs;
    if (!msgOrMsgs)
        throw new Error('msgs array improperly formatted!');
    if (msgOrMsgs.length !== 1)
        throw new Error('multiple msgs not supported!');
    return __assign(__assign({}, convertLegacyMsg(msgOrMsgs[0])), { fee: {
            amount: scrubCoins(tx.fee.amount),
            gas: tx.fee.gas,
        }, memo: tx.memo, signatures: tx.signatures });
}
function convertLegacyMsg(msg) {
    var _a, _b;
    var _c, _d;
    // switch for each tx type supported
    switch (msg.type) {
        case 'thorchain/MsgSend':
            if (!msg.value.hasOwnProperty('from_address'))
                throw new Error('Missing from_address in msg');
            if (!msg.value.hasOwnProperty('to_address'))
                throw new Error('Missing to_address in msg');
            return {
                msg: [
                    {
                        typeUrl: '/types.MsgSend',
                        value: {
                            fromAddress: (0, utils_1.toAccAddress)(msg.value.from_address),
                            toAddress: (0, utils_1.toAccAddress)(msg.value.to_address),
                            amount: scrubCoins(msg.value.amount),
                        },
                    },
                ],
            };
        case 'thorchain/MsgDeposit':
            if (((_c = msg.value.coins) === null || _c === void 0 ? void 0 : _c.length) !== 1) {
                throw new Error("expected 1 input coin got ".concat((_d = msg.value.coins) === null || _d === void 0 ? void 0 : _d.length));
            }
            var inCoin = msg.value.coins[0];
            var parts = inCoin.asset.split('.');
            if (parts.length < 1) {
                throw new Error("expected 1 or 2 parts to asset got ".concat(parts.length));
            }
            var chain;
            var symbol;
            if (parts.length > 1) {
                ;
                _a = __read(parts, 2), chain = _a[0], symbol = _a[1];
            }
            else {
                ;
                _b = __read(parts, 1), symbol = _b[0];
                chain = 'THOR';
            }
            var _e = __read(symbol.split('-'), 1), ticker = _e[0];
            return {
                msg: [
                    {
                        typeUrl: '/types.MsgDeposit',
                        value: {
                            coins: [
                                {
                                    asset: {
                                        chain: chain,
                                        symbol: symbol,
                                        ticker: ticker,
                                        synth: false,
                                    },
                                    amount: inCoin.amount,
                                },
                            ],
                            memo: msg.value.memo,
                            signer: (0, utils_1.toAccAddress)(msg.value.signer),
                        },
                    },
                ],
            };
        case 'cosmos-sdk/MsgSend':
            if (!msg.value.hasOwnProperty('from_address'))
                throw new Error('Missing from_address in msg');
            if (!msg.value.hasOwnProperty('to_address'))
                throw new Error('Missing to_address in msg');
            return {
                msg: [
                    {
                        typeUrl: '/cosmos.bank.v1beta1.MsgSend',
                        value: {
                            fromAddress: msg.value.from_address,
                            toAddress: msg.value.to_address,
                            amount: scrubCoins(msg.value.amount),
                        },
                    },
                ],
            };
        case 'cosmos-sdk/MsgDelegate':
            if (!msg.value.hasOwnProperty('delegator_address'))
                throw new Error('Missing delegator_address in msg');
            if (!msg.value.hasOwnProperty('validator_address'))
                throw new Error('Missing validator_address in msg');
            return {
                msg: [
                    {
                        typeUrl: '/cosmos.staking.v1beta1.MsgDelegate',
                        value: {
                            delegatorAddress: msg.value.delegator_address,
                            validatorAddress: msg.value.validator_address,
                            amount: scrubCoin(msg.value.amount),
                        },
                    },
                ],
            };
        case 'cosmos-sdk/MsgUndelegate':
            if (!msg.value.hasOwnProperty('delegator_address'))
                throw new Error('Missing delegator_address in msg');
            if (!msg.value.hasOwnProperty('validator_address'))
                throw new Error('Missing validator_address in msg');
            return {
                msg: [
                    {
                        typeUrl: '/cosmos.staking.v1beta1.MsgUndelegate',
                        value: {
                            delegatorAddress: msg.value.delegator_address,
                            validatorAddress: msg.value.validator_address,
                            amount: scrubCoin(msg.value.amount),
                        },
                    },
                ],
            };
        case 'cosmos-sdk/MsgBeginRedelegate':
            if (!msg.value.hasOwnProperty('delegator_address'))
                throw new Error('Missing delegator_address in msg');
            if (!msg.value.hasOwnProperty('validator_src_address'))
                throw new Error('Missing validator_src_address in msg');
            if (!msg.value.hasOwnProperty('validator_dst_address'))
                throw new Error('Missing validator_dst_address in msg');
            return {
                msg: [
                    {
                        typeUrl: '/cosmos.staking.v1beta1.MsgBeginRedelegate',
                        value: {
                            delegatorAddress: msg.value.delegator_address,
                            validatorSrcAddress: msg.value.validator_src_address,
                            validatorDstAddress: msg.value.validator_dst_address,
                            amount: scrubCoin(msg.value.amount),
                        },
                    },
                ],
            };
        case 'cosmos-sdk/MsgWithdrawDelegationReward':
            if (!msg.value.hasOwnProperty('delegator_address'))
                throw new Error('Missing delegator_address in msg');
            if (!msg.value.hasOwnProperty('validator_address'))
                throw new Error('Missing validator_address in msg');
            return {
                msg: [
                    {
                        typeUrl: '/cosmos.distribution.v1beta1.MsgWithdrawDelegatorReward',
                        value: {
                            delegatorAddress: msg.value.delegator_address,
                            validatorAddress: msg.value.validator_address,
                            amount: msg.value.amount ? scrubCoin(msg.value.amount) : undefined,
                        },
                    },
                ],
            };
        case 'cosmos-sdk/MsgTransfer':
            if (!msg.value.hasOwnProperty('receiver'))
                throw new Error('Missing receiver in msg');
            if (!msg.value.hasOwnProperty('sender'))
                throw new Error('Missing sender in msg');
            if (!msg.value.hasOwnProperty('source_channel'))
                throw new Error('Missing source_channel in msg');
            if (!msg.value.hasOwnProperty('source_port'))
                throw new Error('Missing source_port in msg');
            if (!msg.value.hasOwnProperty('timeout_height'))
                throw new Error('Missing timeout_height in msg');
            if (!msg.value.timeout_height.hasOwnProperty('revision_height'))
                throw new Error('Missing timeout_height.revision_height in msg');
            if (!msg.value.timeout_height.hasOwnProperty('revision_number'))
                throw new Error('Missing timeout_height.revision_number in msg');
            return {
                msg: [
                    {
                        typeUrl: '/ibc.applications.transfer.v1.MsgTransfer',
                        value: {
                            receiver: msg.value.receiver,
                            sender: msg.value.sender,
                            sourceChannel: msg.value.source_channel,
                            sourcePort: msg.value.source_port,
                            token: scrubCoin(msg.value.token),
                            timeoutHeight: {
                                revisionHeight: msg.value.timeout_height.revision_height,
                                revisionNumber: msg.value.timeout_height.revision_number,
                            },
                            timeoutTimestamp: '0',
                        },
                    },
                ],
            };
        case 'osmosis/gamm/swap-exact-amount-in':
            if (!msg.value.hasOwnProperty('sender'))
                throw new Error('Missing sender in msg');
            if (!msg.value.hasOwnProperty('token_in'))
                throw new Error('Missing token_in in msg');
            if (!msg.value.hasOwnProperty('token_out_min_amount'))
                throw new Error('Missing token_out_min_amount in msg');
            if (msg.value.routes.length !== 1)
                throw new Error('bad routes length');
            return {
                msg: [
                    {
                        typeUrl: '/osmosis.gamm.v1beta1.MsgSwapExactAmountIn',
                        value: {
                            sender: msg.value.sender,
                            tokenIn: scrubCoin(msg.value.token_in),
                            tokenOutMinAmount: msg.value.token_out_min_amount,
                            routes: scrubRoutes(msg.value.routes),
                        },
                    },
                ],
            };
        case 'osmosis/gamm/join-swap-extern-amount-in':
            if (!msg.value.hasOwnProperty('pool_id'))
                throw new Error('Missing pool_id in msg');
            if (!msg.value.hasOwnProperty('sender'))
                throw new Error('Missing sender in msg');
            if (!msg.value.hasOwnProperty('share_out_min_amount'))
                throw new Error('Missing share_out_min_amount in msg');
            if (!msg.value.hasOwnProperty('tokenIn'))
                throw new Error('Missing tokenIn in msg');
            return {
                msg: [
                    {
                        typeUrl: '/osmosis.gamm.v1beta1.MsgJoinSwapExternAmountIn',
                        value: {
                            poolId: msg.value.pool_id,
                            sender: msg.value.sender,
                            shareOutMinAmount: msg.value.share_out_min_amount,
                            tokenIn: scrubCoin(msg.value.token_in),
                        },
                    },
                ],
            };
        case 'osmosis/gamm/join-pool':
            if (!msg.value.hasOwnProperty('sender'))
                throw new Error('Missing sender in msg');
            if (!msg.value.hasOwnProperty('pool_id'))
                throw new Error('Missing pool_id in msg');
            if (!msg.value.hasOwnProperty('share_out_amount'))
                throw new Error('Missing share_out_amount in msg');
            if (msg.value.token_in_maxs.length !== 2)
                throw new Error('Bad token_in_maxs length');
            return {
                msg: [
                    {
                        typeUrl: '/osmosis.gamm.v1beta1.MsgJoinPool',
                        value: {
                            sender: msg.value.sender,
                            poolId: msg.value.pool_id,
                            shareOutAmount: msg.value.share_out_amount,
                            tokenInMaxs: scrubCoins(msg.value.token_in_maxs),
                        },
                    },
                ],
            };
        case 'osmosis/gamm/exit-pool':
            if (!msg.value.hasOwnProperty('sender'))
                throw new Error('Missing sender in msg');
            if (!msg.value.hasOwnProperty('pool_id'))
                throw new Error('Missing pool_id in msg');
            if (!msg.value.hasOwnProperty('share_in_amount'))
                throw new Error('Missing share_in_amount in msg');
            if (msg.value.token_out_mins.length !== 2)
                throw new Error('Bad token_out_mins length');
            return {
                msg: [
                    {
                        typeUrl: '/osmosis.gamm.v1beta1.MsgExitPool',
                        value: {
                            sender: msg.value.sender,
                            poolId: msg.value.pool_id,
                            shareInAmount: msg.value.share_in_amount,
                            tokenOutMins: scrubCoins(msg.value.token_out_mins),
                        },
                    },
                ],
            };
        case 'osmosis/lockup/lock-tokens': {
            if (!msg.value.hasOwnProperty('owner'))
                throw new Error('Missing owner in msg');
            if (!msg.value.hasOwnProperty('duration'))
                throw new Error('Missing duration in msg');
            var duration = new bn_js_1.default(msg.value.duration);
            var nanosPerSecond = new bn_js_1.default('1000000000');
            var seconds = duration.div(nanosPerSecond).toString();
            var nanos = duration.umod(nanosPerSecond).toString();
            return {
                msg: [
                    {
                        typeUrl: '/osmosis.lockup.MsgLockTokens',
                        value: {
                            owner: msg.value.owner,
                            duration: { seconds: seconds, nanos: nanos },
                            coins: scrubCoins(msg.value.coins),
                        },
                    },
                ],
            };
        }
        case 'osmosis/lockup/begin-unlock-period-lock':
            if (!msg.value.hasOwnProperty('owner'))
                throw new Error('Missing owner in msg');
            return {
                msg: [
                    {
                        typeUrl: '/osmosis.lockup.MsgBeginUnlockingAll',
                        value: {
                            owner: msg.value.owner,
                        },
                    },
                ],
            };
        case 'osmosis/lockup/begin-unlock-by-id':
            if (!msg.value.hasOwnProperty('id'))
                throw new Error('Missing id in msg');
            if (!msg.value.hasOwnProperty('owner'))
                throw new Error('Missing owner in msg');
            return {
                msg: [
                    {
                        typeUrl: '/osmosis.lockup.MsgBeginUnlocking',
                        value: {
                            owner: msg.value.owner,
                            id: msg.value.id,
                        },
                    },
                ],
            };
        case 'arkeo/BondProvider':
            if (!msg.value.hasOwnProperty('creator'))
                throw new Error('Missing creator in msg');
            if (!msg.value.hasOwnProperty('provider'))
                throw new Error('Missing provider in msg');
            if (!msg.value.hasOwnProperty('service'))
                throw new Error('Missing service in msg');
            if (!msg.value.hasOwnProperty('bond'))
                throw new Error('Missing bond in msg');
            return {
                msg: [
                    {
                        typeUrl: '/arkeo.arkeo.MsgBondProvider',
                        value: {
                            creator: msg.value.creator,
                            provider: msg.value.provider,
                            service: msg.value.service,
                            bond: msg.value.bond,
                        },
                    },
                ],
            };
        case 'arkeo/ModProvider':
            if (!msg.value.hasOwnProperty('creator'))
                throw new Error('Missing creator in msg');
            if (!msg.value.hasOwnProperty('provider'))
                throw new Error('Missing provider in msg');
            if (!msg.value.hasOwnProperty('service'))
                throw new Error('Missing service in msg');
            if (!msg.value.hasOwnProperty('metadata_uri'))
                throw new Error('Missing metadata_uri in msg');
            if (!msg.value.hasOwnProperty('status'))
                throw new Error("Missing status in msg");
            if (!msg.value.hasOwnProperty('min_contract_duration'))
                throw new Error('Missing min_contract_duration in msg');
            if (!msg.value.hasOwnProperty('max_contract_duration'))
                throw new Error('Missing max_contract_duration in msg');
            if (!msg.value.hasOwnProperty('subscription_rate'))
                throw new Error('Missing subscription_rate in msg');
            if (!msg.value.hasOwnProperty('pay_as_you_go_rate'))
                throw new Error('Missing pay_as_you_go_rate in msg');
            if (!msg.value.hasOwnProperty('settlement_duration'))
                throw new Error('Missing settlement_duration in msg');
            return {
                msg: [
                    {
                        typeUrl: '/arkeo.arkeo.MsgModProvider',
                        value: {
                            creator: msg.value.creator,
                            provider: msg.value.provider,
                            service: msg.value.service,
                            metadataUri: msg.value.metadata_uri,
                            metadataNonce: msg.value.metadata_nonce,
                            status: msg.value.status,
                            minContractDuration: msg.value.min_contract_duration,
                            maxContractDuration: msg.value.max_contract_duration,
                            subscriptionRate: scrubCoins(msg.value.subscription_rate),
                            payAsYouGoRate: scrubCoins(msg.value.pay_as_you_go_rate),
                            settlementDuration: msg.value.settlement_duration,
                        },
                    },
                ],
            };
        case 'arkeo/OpenContract':
            if (!msg.value.hasOwnProperty('creator'))
                throw new Error('Missing creator in msg');
            if (!msg.value.hasOwnProperty('provider'))
                throw new Error('Missing provider in msg');
            if (!msg.value.hasOwnProperty('service'))
                throw new Error('Missing service in msg');
            if (!msg.value.hasOwnProperty('client'))
                throw new Error('Missing client in msg');
            if (!msg.value.hasOwnProperty('delegate'))
                throw new Error('Missing delegate in msg');
            if (!msg.value.hasOwnProperty('contract_type'))
                throw new Error('Missing contract_type in msg');
            if (!msg.value.hasOwnProperty('duration'))
                throw new Error('Missing duration in msg');
            if (!msg.value.hasOwnProperty('rate'))
                throw new Error('Missing rate in msg');
            if (!msg.value.hasOwnProperty('deposit'))
                throw new Error('Missing deposit in msg');
            if (!msg.value.hasOwnProperty('settlement_duration'))
                throw new Error('Missing settlement_duration in msg');
            if (!msg.value.hasOwnProperty('authorization'))
                throw new Error('Missing authorization in msg');
            return {
                msg: [
                    {
                        typeUrl: '/arkeo.arkeo.MsgOpenContract',
                        value: {
                            creator: msg.value.creator,
                            provider: msg.value.provider,
                            service: msg.value.service,
                            client: msg.value.client,
                            delegate: msg.value.delegate,
                            contractType: msg.value.contract_type,
                            duration: msg.value.duration,
                            rate: scrubCoins(msg.value.rate),
                            deposit: msg.value.deposit,
                            settlementDuration: msg.value.settlement_duration,
                            authorization: msg.value.authorization,
                        },
                    },
                ],
            };
        case 'arkeo/CloseContract':
            if (!msg.value.hasOwnProperty('creator'))
                throw new Error('Missing creator in msg');
            if (!msg.value.hasOwnProperty('contract_id'))
                throw new Error('Missing contract_id in msg');
            return {
                msg: [
                    {
                        typeUrl: '/arkeo.arkeo.MsgCloseContract',
                        value: {
                            creator: msg.value.creator,
                            contractId: msg.value.contract_id,
                        },
                    },
                ],
            };
        case 'arkeo/ClaimContractIncome':
            if (!msg.value.hasOwnProperty('creator'))
                throw new Error('Missing creator in msg');
            if (!msg.value.hasOwnProperty('contract_id'))
                throw new Error('Missing contract_id in msg');
            if (!msg.value.hasOwnProperty('signature'))
                throw new Error('Missing signature in msg');
            if (!msg.value.hasOwnProperty('nonce'))
                throw new Error('Missing nonce in msg');
            return {
                msg: [
                    {
                        typeUrl: '/arkeo.arkeo.MsgClaimContractIncome',
                        value: {
                            creator: msg.value.creator,
                            contractId: msg.value.contract_id,
                            signature: msg.value.signature,
                            nonce: msg.value.nonce,
                        },
                    },
                ],
            };
        case 'claim/ClaimEth':
            if (!msg.value.hasOwnProperty('creator'))
                throw new Error('Missing creator in msg');
            if (!msg.value.hasOwnProperty('eth_address'))
                throw new Error('Missing eth_address in msg');
            if (!msg.value.hasOwnProperty('signature'))
                throw new Error('Missing signature in msg');
            return {
                msg: [
                    {
                        typeUrl: '/arkeo.claim.MsgClaimEth',
                        value: {
                            creator: msg.value.creator,
                            ethAddress: msg.value.eth_address,
                            signature: msg.value.signature,
                        },
                    },
                ],
            };
        case 'claim/ClaimArkeo':
            if (!msg.value.hasOwnProperty('creator'))
                throw new Error('Missing creator in msg');
            return {
                msg: [
                    {
                        typeUrl: '/arkeo.claim.MsgClaimArkeo',
                        value: {
                            creator: msg.value.creator,
                        },
                    },
                ],
            };
        case 'claim/TransferClaim':
            if (!msg.value.hasOwnProperty('creator'))
                throw new Error('Missing creator in msg');
            if (!msg.value.hasOwnProperty('to_address'))
                throw new Error('Missing to_address in msg');
            return {
                msg: [
                    {
                        typeUrl: '/arkeo.claim.MsgTransferClaim',
                        value: {
                            creator: msg.value.creator,
                            toAddress: msg.value.to_address,
                        },
                    },
                ],
            };
        case 'claim/AddClaim':
            if (!msg.value.hasOwnProperty('creator'))
                throw new Error('Missing creator in msg');
            if (!msg.value.hasOwnProperty('chain'))
                throw new Error('Missing chain in msg');
            if (!msg.value.hasOwnProperty('address'))
                throw new Error('Missing address in msg');
            if (!msg.value.hasOwnProperty('amount'))
                throw new Error('Missing amount in msg');
            return {
                msg: [
                    {
                        typeUrl: '/arkeo.claim.MsgAddClaim',
                        value: {
                            creator: msg.value.creator,
                            chain: msg.value.chain,
                            address: msg.value.address,
                            amount: msg.value.amount,
                        },
                    },
                ],
            };
        default:
            throw new Error('Unhandled tx type! type: ' + msg.type);
    }
}
