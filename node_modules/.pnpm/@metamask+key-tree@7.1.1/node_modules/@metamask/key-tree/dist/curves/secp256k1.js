"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decompressPublicKey = exports.compressPublicKey = exports.publicAdd = exports.getPublicKey = exports.isValidPrivateKey = exports.publicKeyLength = exports.deriveUnhardenedKeys = exports.secret = exports.name = exports.curve = void 0;
const utils_1 = require("@metamask/utils");
const secp256k1_1 = require("@noble/secp256k1");
const utils_2 = require("../utils");
var secp256k1_2 = require("@noble/secp256k1");
Object.defineProperty(exports, "curve", { enumerable: true, get: function () { return secp256k1_2.CURVE; } });
exports.name = 'secp256k1';
// Secret is defined in BIP-32 and SLIP-10:
// https://github.com/bitcoin/bips/blob/274fa400d630ba757bec0c03b35ebe2345197108/bip-0032.mediawiki#master-key-generation
// https://github.com/satoshilabs/slips/blob/133ea52a8e43d338b98be208907e144277e44c0e/slip-0010.md#master-key-generation
exports.secret = (0, utils_1.stringToBytes)('Bitcoin seed');
exports.deriveUnhardenedKeys = true;
exports.publicKeyLength = 65;
const isValidPrivateKey = (privateKey) => {
    return secp256k1_1.utils.isValidPrivateKey(privateKey);
};
exports.isValidPrivateKey = isValidPrivateKey;
const getPublicKey = (privateKey, compressed) => (0, secp256k1_1.getPublicKey)(privateKey, compressed);
exports.getPublicKey = getPublicKey;
const publicAdd = (publicKey, tweak) => {
    (0, utils_1.assert)((0, utils_2.isValidBytesKey)(tweak, 32), 'Invalid tweak: Tweak must be a non-zero 32-byte Uint8Array.');
    const point = secp256k1_1.Point.fromHex(publicKey);
    // The returned child key Ki is point(parse256(IL)) + Kpar.
    // This multiplies the tweak with the base point of the curve (Gx, Gy).
    // https://github.com/bitcoin/bips/blob/274fa400d630ba757bec0c03b35ebe2345197108/bip-0032.mediawiki#public-parent-key--public-child-key
    const newPoint = point.add(secp256k1_1.Point.fromPrivateKey(tweak));
    newPoint.assertValidity();
    return newPoint.toRawBytes(false);
};
exports.publicAdd = publicAdd;
const compressPublicKey = (publicKey) => {
    const point = secp256k1_1.Point.fromHex(publicKey);
    return point.toRawBytes(true);
};
exports.compressPublicKey = compressPublicKey;
const decompressPublicKey = (publicKey) => {
    // This calculates a point on the elliptic curve from a compressed public key. We can then use
    // this to get the uncompressed version of the public key.
    const point = secp256k1_1.Point.fromHex(publicKey);
    return point.toRawBytes(false);
};
exports.decompressPublicKey = decompressPublicKey;
//# sourceMappingURL=secp256k1.js.map