"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decompressPublicKey = exports.compressPublicKey = exports.publicAdd = exports.getPublicKey = exports.publicKeyLength = exports.deriveUnhardenedKeys = exports.isValidPrivateKey = exports.secret = exports.name = exports.curve = void 0;
const utils_1 = require("@metamask/utils");
const ed25519_1 = require("@noble/ed25519");
var ed25519_2 = require("@noble/ed25519");
Object.defineProperty(exports, "curve", { enumerable: true, get: function () { return ed25519_2.CURVE; } });
exports.name = 'ed25519';
// Secret is defined in SLIP-10:
// https://github.com/satoshilabs/slips/blob/133ea52a8e43d338b98be208907e144277e44c0e/slip-0010.md#master-key-generation
exports.secret = (0, utils_1.stringToBytes)('ed25519 seed');
// All private keys are valid for ed25519:
// https://github.com/satoshilabs/slips/blob/133ea52a8e43d338b98be208907e144277e44c0e/slip-0010.md#master-key-generation
const isValidPrivateKey = (_privateKey) => true;
exports.isValidPrivateKey = isValidPrivateKey;
exports.deriveUnhardenedKeys = false;
exports.publicKeyLength = 33;
const getPublicKey = async (privateKey, _compressed) => {
    const publicKey = await (0, ed25519_1.getPublicKey)(privateKey);
    return (0, utils_1.concatBytes)([new Uint8Array([0]), publicKey]);
};
exports.getPublicKey = getPublicKey;
const publicAdd = (_publicKey, _tweak) => {
    throw new Error('Ed25519 does not support public key derivation.');
};
exports.publicAdd = publicAdd;
const compressPublicKey = (publicKey) => {
    // Ed25519 public keys don't have a compressed form.
    return publicKey;
};
exports.compressPublicKey = compressPublicKey;
const decompressPublicKey = (publicKey) => {
    // Ed25519 public keys don't have a compressed form.
    return publicKey;
};
exports.decompressPublicKey = decompressPublicKey;
//# sourceMappingURL=ed25519.js.map