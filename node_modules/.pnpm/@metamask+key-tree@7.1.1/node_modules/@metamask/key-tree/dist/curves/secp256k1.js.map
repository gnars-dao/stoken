{"version":3,"file":"secp256k1.js","sourceRoot":"","sources":["../../src/curves/secp256k1.ts"],"names":[],"mappings":";;;AAAA,2CAAwD;AACxD,gDAI0B;AAE1B,oCAA2C;AAE3C,8CAAkD;AAAzC,kGAAA,KAAK,OAAS;AAEV,QAAA,IAAI,GAAG,WAAW,CAAC;AAEhC,2CAA2C;AAC3C,yHAAyH;AACzH,wHAAwH;AAC3G,QAAA,MAAM,GAAG,IAAA,qBAAa,EAAC,cAAc,CAAC,CAAC;AAEvC,QAAA,oBAAoB,GAAG,IAAI,CAAC;AAE5B,QAAA,eAAe,GAAG,EAAE,CAAC;AAE3B,MAAM,iBAAiB,GAAG,CAAC,UAAsB,EAAE,EAAE;IAC1D,OAAO,iBAAK,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC;AAC7C,CAAC,CAAC;AAFW,QAAA,iBAAiB,qBAE5B;AAEK,MAAM,YAAY,GAAG,CAC1B,UAAsB,EACtB,UAAoB,EACR,EAAE,CAAC,IAAA,wBAAqB,EAAC,UAAU,EAAE,UAAU,CAAC,CAAC;AAHlD,QAAA,YAAY,gBAGsC;AAExD,MAAM,SAAS,GAAG,CACvB,SAAqB,EACrB,KAAiB,EACL,EAAE;IACd,IAAA,cAAM,EACJ,IAAA,uBAAe,EAAC,KAAK,EAAE,EAAE,CAAC,EAC1B,6DAA6D,CAC9D,CAAC;IAEF,MAAM,KAAK,GAAG,iBAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IAEvC,2DAA2D;IAC3D,uEAAuE;IACvE,uIAAuI;IACvI,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,iBAAK,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;IACxD,QAAQ,CAAC,cAAc,EAAE,CAAC;IAE1B,OAAO,QAAQ,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACpC,CAAC,CAAC;AAlBW,QAAA,SAAS,aAkBpB;AAEK,MAAM,iBAAiB,GAAG,CAAC,SAAqB,EAAc,EAAE;IACrE,MAAM,KAAK,GAAG,iBAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACvC,OAAO,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;AAChC,CAAC,CAAC;AAHW,QAAA,iBAAiB,qBAG5B;AAEK,MAAM,mBAAmB,GAAG,CAAC,SAAqB,EAAc,EAAE;IACvE,8FAA8F;IAC9F,0DAA0D;IAC1D,MAAM,KAAK,GAAG,iBAAK,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACvC,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;AACjC,CAAC,CAAC;AALW,QAAA,mBAAmB,uBAK9B","sourcesContent":["import { assert, stringToBytes } from '@metamask/utils';\nimport {\n  getPublicKey as getSecp256k1PublicKey,\n  Point,\n  utils,\n} from '@noble/secp256k1';\n\nimport { isValidBytesKey } from '../utils';\n\nexport { CURVE as curve } from '@noble/secp256k1';\n\nexport const name = 'secp256k1';\n\n// Secret is defined in BIP-32 and SLIP-10:\n// https://github.com/bitcoin/bips/blob/274fa400d630ba757bec0c03b35ebe2345197108/bip-0032.mediawiki#master-key-generation\n// https://github.com/satoshilabs/slips/blob/133ea52a8e43d338b98be208907e144277e44c0e/slip-0010.md#master-key-generation\nexport const secret = stringToBytes('Bitcoin seed');\n\nexport const deriveUnhardenedKeys = true;\n\nexport const publicKeyLength = 65;\n\nexport const isValidPrivateKey = (privateKey: Uint8Array) => {\n  return utils.isValidPrivateKey(privateKey);\n};\n\nexport const getPublicKey = (\n  privateKey: Uint8Array,\n  compressed?: boolean,\n): Uint8Array => getSecp256k1PublicKey(privateKey, compressed);\n\nexport const publicAdd = (\n  publicKey: Uint8Array,\n  tweak: Uint8Array,\n): Uint8Array => {\n  assert(\n    isValidBytesKey(tweak, 32),\n    'Invalid tweak: Tweak must be a non-zero 32-byte Uint8Array.',\n  );\n\n  const point = Point.fromHex(publicKey);\n\n  // The returned child key Ki is point(parse256(IL)) + Kpar.\n  // This multiplies the tweak with the base point of the curve (Gx, Gy).\n  // https://github.com/bitcoin/bips/blob/274fa400d630ba757bec0c03b35ebe2345197108/bip-0032.mediawiki#public-parent-key--public-child-key\n  const newPoint = point.add(Point.fromPrivateKey(tweak));\n  newPoint.assertValidity();\n\n  return newPoint.toRawBytes(false);\n};\n\nexport const compressPublicKey = (publicKey: Uint8Array): Uint8Array => {\n  const point = Point.fromHex(publicKey);\n  return point.toRawBytes(true);\n};\n\nexport const decompressPublicKey = (publicKey: Uint8Array): Uint8Array => {\n  // This calculates a point on the elliptic curve from a compressed public key. We can then use\n  // this to get the uncompressed version of the public key.\n  const point = Point.fromHex(publicKey);\n  return point.toRawBytes(false);\n};\n"]}