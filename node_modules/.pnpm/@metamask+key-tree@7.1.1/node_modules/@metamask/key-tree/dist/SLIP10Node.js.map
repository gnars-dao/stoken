{"version":3,"file":"SLIP10Node.js","sourceRoot":"","sources":["../src/SLIP10Node.ts"],"names":[],"mappings":";;;;;;;;;AAAA,2CAAqD;AAIrD,2CAIqB;AACrB,qCAA0D;AAC1D,6CAAiD;AACjD,4CAAyD;AACzD,mCAOiB;AAiGjB,MAAa,UAAU;IAsKrB,gDAAgD;IAChD,YACE,EACE,KAAK,EACL,iBAAiB,EACjB,iBAAiB,EACjB,KAAK,EACL,SAAS,EACT,UAAU,EACV,SAAS,EACT,KAAK,GACwB,EAC/B,gBAAyB;QAEzB,IAAA,cAAM,EACJ,gBAAgB,KAAK,uBAAA,UAAU,wCAAkB,EACjD,mIAAmI,CACpI,CAAC;QAEF,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,iBAAiB,GAAG,iBAAiB,CAAC;QAC3C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAChC,IAAI,CAAC,eAAe,GAAG,UAAU,CAAC;QAClC,IAAI,CAAC,cAAc,GAAG,SAAS,CAAC;QAChC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QAEnB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACtB,CAAC;IAlMD;;;;;OAKG;IACH,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAoB;QACxC,OAAO,UAAU,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC;IAC1C,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;OAqBG;IACH,MAAM,CAAC,KAAK,CAAC,eAAe,CAAC,EAC3B,KAAK,EACL,iBAAiB,EACjB,iBAAiB,EACjB,KAAK,EACL,UAAU,EACV,SAAS,EACT,SAAS,EACT,KAAK,GACoB;QACzB,MAAM,cAAc,GAAG,IAAA,gBAAQ,EAAC,SAAS,EAAE,4BAAgB,CAAC,CAAC;QAE7D,IAAA,qBAAa,EAAC,KAAK,CAAC,CAAC;QACrB,kBAAkB,CAAC,KAAK,CAAC,CAAC;QAC1B,IAAA,0BAAkB,EAAC,KAAK,CAAC,CAAC;QAC1B,iBAAiB,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;QAChC,yBAAyB,CAAC,iBAAiB,EAAE,KAAK,CAAC,CAAC;QACpD,+BAA+B,CAC7B,iBAAiB,EACjB,iBAAiB,EACjB,KAAK,CACN,CAAC;QAEF,MAAM,WAAW,GAAG,IAAA,uBAAc,EAAC,KAAK,CAAC,CAAC;QAE1C,IAAI,UAAU,EAAE;YACd,MAAM,eAAe,GAAG,IAAA,sBAAc,EAAC,UAAU,EAAE,4BAAgB,CAAC,CAAC;YACrE,IAAA,cAAM,EACJ,WAAW,CAAC,iBAAiB,CAAC,eAAe,CAAC,EAC9C,6CAA6C,KAAK,eAAe,CAClE,CAAC;YAEF,OAAO,IAAI,UAAU,CACnB;gBACE,KAAK;gBACL,iBAAiB;gBACjB,iBAAiB;gBACjB,KAAK;gBACL,SAAS,EAAE,cAAc;gBACzB,UAAU,EAAE,eAAe;gBAC3B,SAAS,EAAE,MAAM,WAAW,CAAC,YAAY,CAAC,eAAe,CAAC;gBAC1D,KAAK;aACN,EACD,uBAAA,IAAI,wCAAkB,CACvB,CAAC;SACH;QAED,IAAI,SAAS,EAAE;YACb,MAAM,cAAc,GAAG,IAAA,gBAAQ,EAAC,SAAS,EAAE,WAAW,CAAC,eAAe,CAAC,CAAC;YAExE,OAAO,IAAI,UAAU,CACnB;gBACE,KAAK;gBACL,iBAAiB;gBACjB,iBAAiB;gBACjB,KAAK;gBACL,SAAS,EAAE,cAAc;gBACzB,SAAS,EAAE,cAAc;gBACzB,KAAK;aACN,EACD,uBAAA,IAAI,wCAAkB,CACvB,CAAC;SACH;QAED,MAAM,IAAI,KAAK,CACb,qEAAqE,CACtE,CAAC;IACJ,CAAC;IAED;;;;;;;;;;;;;;;;;;;;;;OAsBG;IACH,MAAM,CAAC,KAAK,CAAC,kBAAkB,CAAC,EAC9B,cAAc,EACd,KAAK,GACuB;QAC5B,IAAA,qBAAa,EAAC,KAAK,CAAC,CAAC;QAErB,IAAI,CAAC,cAAc,EAAE;YACnB,MAAM,IAAI,KAAK,CAAC,kDAAkD,CAAC,CAAC;SACrE;QAED,IAAI,cAAc,CAAC,MAAM,KAAK,CAAC,EAAE;YAC/B,MAAM,IAAI,KAAK,CACb,oEAAoE,CACrE,CAAC;SACH;QAED,OAAO,MAAM,IAAA,8BAAiB,EAAC;YAC7B,IAAI,EAAE,cAAc;YACpB,KAAK,EAAE,cAAc,CAAC,MAAM,GAAG,CAAC;YAChC,KAAK;SACN,CAAC,CAAC;IACL,CAAC;IAmDD,IAAW,SAAS;QAClB,OAAO,IAAA,kBAAU,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACzC,CAAC;IAED,IAAW,UAAU;QACnB,IAAI,IAAI,CAAC,eAAe,EAAE;YACxB,OAAO,IAAA,kBAAU,EAAC,IAAI,CAAC,eAAe,CAAC,CAAC;SACzC;QAED,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,IAAW,SAAS;QAClB,OAAO,IAAA,kBAAU,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IACzC,CAAC;IAED,IAAW,wBAAwB;QACjC,OAAO,IAAA,uBAAc,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;IAC3E,CAAC;IAED,IAAW,mBAAmB;QAC5B,OAAO,IAAA,kBAAU,EAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IACnD,CAAC;IAED,IAAW,OAAO;QAChB,IAAI,IAAI,CAAC,KAAK,KAAK,WAAW,EAAE;YAC9B,MAAM,IAAI,KAAK,CACb,mEAAmE,CACpE,CAAC;SACH;QAED,OAAO,IAAA,kBAAU,EAAC,IAAA,6BAAqB,EAAC,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC;IAChE,CAAC;IAED,IAAW,WAAW;QACpB,OAAO,IAAA,sBAAc,EAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;IACvD,CAAC;IAED;;;;OAIG;IACI,MAAM;QACX,OAAO,IAAI,UAAU,CACnB;YACE,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,SAAS,EAAE,IAAI,CAAC,cAAc;YAC9B,SAAS,EAAE,IAAI,CAAC,cAAc;YAC9B,KAAK,EAAE,IAAI,CAAC,KAAK;SAClB,EACD,uBAAA,UAAU,wCAAkB,CAC7B,CAAC;IACJ,CAAC;IAED;;;;;;;;;OASG;IACI,KAAK,CAAC,MAAM,CAAC,IAAqB;QACvC,OAAO,MAAM,eAAe,CAAC;YAC3B,IAAI;YACJ,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;IACL,CAAC;IAED,qDAAqD;IAC9C,MAAM;QACX,OAAO;YACL,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,iBAAiB,EAAE,IAAI,CAAC,iBAAiB;YACzC,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,KAAK,EAAE,IAAI,CAAC,KAAK;YACjB,UAAU,EAAE,IAAI,CAAC,UAAU;YAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;YACzB,SAAS,EAAE,IAAI,CAAC,SAAS;SAC1B,CAAC;IACJ,CAAC;;AA5RH,gCA6RC;;AAzIQ,wCAAoB,MAAM,CAAC,wBAAwB,CAAC,GAAC;AA2I9D;;;;;GAKG;AACH,SAAgB,kBAAkB,CAAC,KAAc;IAC/C,IAAI,CAAC,IAAA,sBAAc,EAAC,KAAK,CAAC,EAAE;QAC1B,MAAM,IAAI,KAAK,CACb,gFAAgF,MAAM,CACpF,KAAK,CACN,IAAI,CACN,CAAC;KACH;AACH,CAAC;AARD,gDAQC;AAED;;;;;;;;GAQG;AACH,SAAgB,yBAAyB,CACvC,iBAA0B,EAC1B,KAAa;IAEb,IAAI,CAAC,IAAA,sBAAc,EAAC,iBAAiB,CAAC,EAAE;QACtC,MAAM,IAAI,KAAK,CACb,sFAAsF,MAAM,CAC1F,iBAAiB,CAClB,IAAI,CACN,CAAC;KACH;IAED,IAAI,KAAK,KAAK,CAAC,IAAI,iBAAiB,KAAK,CAAC,EAAE;QAC1C,MAAM,IAAI,KAAK,CACb,sFAAsF,MAAM,CAC1F,iBAAiB,CAClB,IAAI,CACN,CAAC;KACH;IAED,IAAI,KAAK,GAAG,CAAC,IAAI,iBAAiB,KAAK,CAAC,EAAE;QACxC,MAAM,IAAI,KAAK,CACb,yFAAyF,MAAM,CAC7F,iBAAiB,CAClB,IAAI,CACN,CAAC;KACH;AACH,CAAC;AA3BD,8DA2BC;AAED;;;;;;;;;GASG;AACH,SAAgB,+BAA+B,CAC7C,iBAAqC,EACrC,iBAAyB,EACzB,KAAa;IAEb,sCAAsC;IACtC,IAAI,CAAC,iBAAiB,EAAE;QACtB,OAAO;KACR;IAED,IAAI,KAAK,IAAI,CAAC,IAAI,iBAAiB,KAAK,iBAAiB,EAAE;QACzD,MAAM,IAAI,KAAK,CACb,qHAAqH,MAAM,CACzH,iBAAiB,CAClB,IAAI,CACN,CAAC;KACH;AACH,CAAC;AAjBD,0EAiBC;AAED;;;;;;GAMG;AACH,SAAgB,iBAAiB,CAAC,KAAa,EAAE,KAAa;IAC5D,IAAI,KAAK,KAAK,CAAC,IAAI,KAAK,KAAK,CAAC,EAAE;QAC9B,MAAM,IAAI,KAAK,CACb,mEAAmE,MAAM,CACvE,KAAK,CACN,IAAI,CACN,CAAC;KACH;AACH,CAAC;AARD,8CAQC;AAOD;;;;;;;GAOG;AACI,KAAK,UAAU,eAAe,CAAC,EACpC,IAAI,EACJ,IAAI,GACgB;IACpB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,MAAM,IAAI,KAAK,CACb,8EAA8E,CAC/E,CAAC;KACH;IAED,2EAA2E;IAC3E,uDAAuD;IACvD,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;IAC1C,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IAE7B,OAAO,MAAM,IAAA,8BAAiB,EAAC;QAC7B,IAAI;QACJ,IAAI;QACJ,KAAK,EAAE,QAAQ;KAChB,CAAC,CAAC;AACL,CAAC;AApBD,0CAoBC","sourcesContent":["import { assert, bytesToHex } from '@metamask/utils';\n\nimport { BIP44CoinTypeNode } from './BIP44CoinTypeNode';\nimport { BIP44Node } from './BIP44Node';\nimport {\n  BYTES_KEY_LENGTH,\n  RootedSLIP10PathTuple,\n  SLIP10PathTuple,\n} from './constants';\nimport { getCurveByName, SupportedCurve } from './curves';\nimport { deriveKeyFromPath } from './derivation';\nimport { publicKeyToEthAddress } from './derivers/bip32';\nimport {\n  getBytes,\n  getBytesUnsafe,\n  getFingerprint,\n  isValidInteger,\n  validateBIP32Index,\n  validateCurve,\n} from './utils';\n\n/**\n * A wrapper for SLIP-10 Hierarchical Deterministic (HD) tree nodes, i.e.\n * cryptographic keys used to generate key pairs and addresses for cryptocurrency\n * protocols.\n */\nexport type JsonSLIP10Node = {\n  /**\n   * The 0-indexed path depth of this node.\n   */\n  readonly depth: number;\n\n  /**\n   * The fingerprint of the master node, i.e., the node at depth 0. May be\n   * undefined if this node was created from an extended key.\n   */\n  readonly masterFingerprint?: number;\n\n  /**\n   * The fingerprint of the parent key, or 0 if this is a master node.\n   */\n  readonly parentFingerprint: number;\n\n  /**\n   * The index of the node, or 0 if this is a master node.\n   */\n  readonly index: number;\n\n  /**\n   * The (optional) private key of this node.\n   */\n  readonly privateKey?: string;\n\n  /**\n   * The public key of this node.\n   */\n  readonly publicKey: string;\n\n  /**\n   * The chain code of this node.\n   */\n  readonly chainCode: string;\n\n  /**\n   * The name of the curve used by the node.\n   */\n  readonly curve: SupportedCurve;\n};\n\nexport type SLIP10NodeInterface = JsonSLIP10Node & {\n  chainCodeBytes: Uint8Array;\n\n  /**\n   * The private key for this node, as a {@link Uint8Array}.\n   * May be undefined if this node is a public key only node.\n   */\n  privateKeyBytes?: Uint8Array;\n\n  /**\n   * The public key for this node, as a {@link Uint8Array}.\n   */\n  publicKeyBytes: Uint8Array;\n\n  /**\n   * @returns A JSON-compatible representation of this node's data fields.\n   */\n  toJSON(): JsonSLIP10Node;\n};\n\nexport type SLIP10NodeConstructorOptions = {\n  readonly depth: number;\n  readonly masterFingerprint?: number;\n  readonly parentFingerprint: number;\n  readonly index: number;\n  readonly chainCode: Uint8Array;\n  readonly privateKey?: Uint8Array;\n  readonly publicKey: Uint8Array;\n  readonly curve: SupportedCurve;\n};\n\nexport type SLIP10ExtendedKeyOptions = {\n  readonly depth: number;\n  readonly masterFingerprint?: number;\n  readonly parentFingerprint: number;\n  readonly index: number;\n  readonly chainCode: string | Uint8Array;\n  readonly privateKey?: string | Uint8Array;\n  readonly publicKey?: string | Uint8Array;\n  readonly curve: SupportedCurve;\n};\n\nexport type SLIP10DerivationPathOptions = {\n  readonly derivationPath: RootedSLIP10PathTuple;\n  readonly curve: SupportedCurve;\n};\n\nexport class SLIP10Node implements SLIP10NodeInterface {\n  /**\n   * Wrapper of the {@link fromExtendedKey} function. Refer to that function\n   * for documentation.\n   *\n   * @param json - The JSON representation of a SLIP-10 node.\n   */\n  static async fromJSON(json: JsonSLIP10Node): Promise<SLIP10Node> {\n    return SLIP10Node.fromExtendedKey(json);\n  }\n\n  /**\n   * Create a new SLIP-10 node from a key and chain code. You must specify\n   * either a private key or a public key. When specifying a private key,\n   * the public key will be derived from the private key.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * @param options - The options for the new node.\n   * @param options.depth - The depth of the node.\n   * @param options.masterFingerprint - The fingerprint of the master node, i.e., the\n   * node at depth 0. May be undefined if this node was created from an extended\n   * key.\n   * @param options.parentFingerprint - The fingerprint of the parent key, or 0 if\n   * the node is a master node.\n   * @param options.index - The index of the node, or 0 if the node is a master node.\n   * @param options.privateKey - The private key for the node.\n   * @param options.publicKey - The public key for the node. If a private key is\n   * specified, this parameter is ignored.\n   * @param options.chainCode - The chain code for the node.\n   * @param options.curve - The curve used by the node.\n   */\n  static async fromExtendedKey({\n    depth,\n    masterFingerprint,\n    parentFingerprint,\n    index,\n    privateKey,\n    publicKey,\n    chainCode,\n    curve,\n  }: SLIP10ExtendedKeyOptions) {\n    const chainCodeBytes = getBytes(chainCode, BYTES_KEY_LENGTH);\n\n    validateCurve(curve);\n    validateBIP32Depth(depth);\n    validateBIP32Index(index);\n    validateRootIndex(index, depth);\n    validateParentFingerprint(parentFingerprint, depth);\n    validateMasterParentFingerprint(\n      masterFingerprint,\n      parentFingerprint,\n      depth,\n    );\n\n    const curveObject = getCurveByName(curve);\n\n    if (privateKey) {\n      const privateKeyBytes = getBytesUnsafe(privateKey, BYTES_KEY_LENGTH);\n      assert(\n        curveObject.isValidPrivateKey(privateKeyBytes),\n        `Invalid private key: Value is not a valid ${curve} private key.`,\n      );\n\n      return new SLIP10Node(\n        {\n          depth,\n          masterFingerprint,\n          parentFingerprint,\n          index,\n          chainCode: chainCodeBytes,\n          privateKey: privateKeyBytes,\n          publicKey: await curveObject.getPublicKey(privateKeyBytes),\n          curve,\n        },\n        this.#constructorGuard,\n      );\n    }\n\n    if (publicKey) {\n      const publicKeyBytes = getBytes(publicKey, curveObject.publicKeyLength);\n\n      return new SLIP10Node(\n        {\n          depth,\n          masterFingerprint,\n          parentFingerprint,\n          index,\n          chainCode: chainCodeBytes,\n          publicKey: publicKeyBytes,\n          curve,\n        },\n        this.#constructorGuard,\n      );\n    }\n\n    throw new Error(\n      'Invalid options: Must provide either a private key or a public key.',\n    );\n  }\n\n  /**\n   * Create a new SLIP-10 node from a derivation path. The derivation path\n   * must be rooted, i.e. it must begin with a BIP-39 node, given as a string of\n   * the form `bip39:MNEMONIC`, where `MNEMONIC` is a space-separated list of\n   * BIP-39 seed phrase words.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param options - The options for the new node.\n   * @param options.derivationPath - The rooted HD tree path that will be used\n   * to derive the key of this node.\n   * @param options.curve - The curve used by the node.\n   * @returns A new SLIP-10 node.\n   */\n  static async fromDerivationPath({\n    derivationPath,\n    curve,\n  }: SLIP10DerivationPathOptions) {\n    validateCurve(curve);\n\n    if (!derivationPath) {\n      throw new Error('Invalid options: Must provide a derivation path.');\n    }\n\n    if (derivationPath.length === 0) {\n      throw new Error(\n        'Invalid derivation path: May not specify an empty derivation path.',\n      );\n    }\n\n    return await deriveKeyFromPath({\n      path: derivationPath,\n      depth: derivationPath.length - 1,\n      curve,\n    });\n  }\n\n  static #constructorGuard = Symbol('SLIP10Node.constructor');\n\n  public readonly curve: SupportedCurve;\n\n  public readonly depth: number;\n\n  public readonly masterFingerprint?: number;\n\n  public readonly parentFingerprint: number;\n\n  public readonly index: number;\n\n  public readonly chainCodeBytes: Uint8Array;\n\n  public readonly privateKeyBytes?: Uint8Array;\n\n  public readonly publicKeyBytes: Uint8Array;\n\n  // eslint-disable-next-line no-restricted-syntax\n  private constructor(\n    {\n      depth,\n      masterFingerprint,\n      parentFingerprint,\n      index,\n      chainCode,\n      privateKey,\n      publicKey,\n      curve,\n    }: SLIP10NodeConstructorOptions,\n    constructorGuard?: symbol,\n  ) {\n    assert(\n      constructorGuard === SLIP10Node.#constructorGuard,\n      'SLIP10Node can only be constructed using `SLIP10Node.fromJSON`, `SLIP10Node.fromExtendedKey`, or `SLIP10Node.fromDerivationPath`.',\n    );\n\n    this.depth = depth;\n    this.masterFingerprint = masterFingerprint;\n    this.parentFingerprint = parentFingerprint;\n    this.index = index;\n    this.chainCodeBytes = chainCode;\n    this.privateKeyBytes = privateKey;\n    this.publicKeyBytes = publicKey;\n    this.curve = curve;\n\n    Object.freeze(this);\n  }\n\n  public get chainCode() {\n    return bytesToHex(this.chainCodeBytes);\n  }\n\n  public get privateKey(): string | undefined {\n    if (this.privateKeyBytes) {\n      return bytesToHex(this.privateKeyBytes);\n    }\n\n    return undefined;\n  }\n\n  public get publicKey(): string {\n    return bytesToHex(this.publicKeyBytes);\n  }\n\n  public get compressedPublicKeyBytes(): Uint8Array {\n    return getCurveByName(this.curve).compressPublicKey(this.publicKeyBytes);\n  }\n\n  public get compressedPublicKey(): string {\n    return bytesToHex(this.compressedPublicKeyBytes);\n  }\n\n  public get address(): string {\n    if (this.curve !== 'secp256k1') {\n      throw new Error(\n        'Unable to get address for this node: Only secp256k1 is supported.',\n      );\n    }\n\n    return bytesToHex(publicKeyToEthAddress(this.publicKeyBytes));\n  }\n\n  public get fingerprint(): number {\n    return getFingerprint(this.compressedPublicKeyBytes);\n  }\n\n  /**\n   * Get a neutered version of this node, i.e. a node without a private key.\n   *\n   * @returns A neutered version of this node.\n   */\n  public neuter(): SLIP10Node {\n    return new SLIP10Node(\n      {\n        depth: this.depth,\n        masterFingerprint: this.masterFingerprint,\n        parentFingerprint: this.parentFingerprint,\n        index: this.index,\n        chainCode: this.chainCodeBytes,\n        publicKey: this.publicKeyBytes,\n        curve: this.curve,\n      },\n      SLIP10Node.#constructorGuard,\n    );\n  }\n\n  /**\n   * Derives a child of the key contains be this node and returns a new\n   * {@link SLIP10Node} containing the child key.\n   *\n   * The specified path must be a valid HD path from this node, per SLIP-10.\n   *\n   * @param path - The partial (non-rooted) SLIP-10 HD tree path will be used\n   * to derive a child key from the parent key contained within this node.\n   * @returns The {@link SLIP10Node} corresponding to the derived child key.\n   */\n  public async derive(path: SLIP10PathTuple): Promise<SLIP10Node> {\n    return await deriveChildNode({\n      path,\n      node: this,\n    });\n  }\n\n  // This is documented in the interface of this class.\n  public toJSON(): JsonSLIP10Node {\n    return {\n      depth: this.depth,\n      masterFingerprint: this.masterFingerprint,\n      parentFingerprint: this.parentFingerprint,\n      index: this.index,\n      curve: this.curve,\n      privateKey: this.privateKey,\n      publicKey: this.publicKey,\n      chainCode: this.chainCode,\n    };\n  }\n}\n\n/**\n * Validates a BIP-32 path depth. Effectively, asserts that the depth is an\n * integer `number`. Throws an error if validation fails.\n *\n * @param depth - The depth to validate.\n */\nexport function validateBIP32Depth(depth: unknown): asserts depth is number {\n  if (!isValidInteger(depth)) {\n    throw new Error(\n      `Invalid HD tree path depth: The depth must be a positive integer. Received: \"${String(\n        depth,\n      )}\".`,\n    );\n  }\n}\n\n/**\n * Validates a BIP-32 parent fingerprint. Effectively, asserts that the fingerprint is an\n * integer `number`. Throws an error if validation fails.\n *\n * @param parentFingerprint - The parent fingerprint to validate.\n * @param depth - The depth of the node to validate.\n * @throws If the parent fingerprint is not a positive integer, or invalid for\n * the current depth.\n */\nexport function validateParentFingerprint(\n  parentFingerprint: unknown,\n  depth: number,\n): asserts parentFingerprint is number {\n  if (!isValidInteger(parentFingerprint)) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint must be a positive integer. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n\n  if (depth === 0 && parentFingerprint !== 0) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint of the root node must be 0. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n\n  if (depth > 0 && parentFingerprint === 0) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint of a child node must not be 0. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n}\n\n/**\n * Validate that a given combination of master fingerprint and parent\n * fingerprint is valid for the given depth.\n *\n * @param masterFingerprint - The master fingerprint to validate.\n * @param parentFingerprint - The parent fingerprint to validate.\n * @param depth - The depth of the node to validate.\n * @throws If the combination of master fingerprint and parent fingerprint is\n * invalid for the given depth.\n */\nexport function validateMasterParentFingerprint(\n  masterFingerprint: number | undefined,\n  parentFingerprint: number,\n  depth: number,\n) {\n  // The master fingerprint is optional.\n  if (!masterFingerprint) {\n    return;\n  }\n\n  if (depth >= 2 && masterFingerprint === parentFingerprint) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint of a child node cannot be equal to the master fingerprint. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n}\n\n/**\n * Validate that the index is zero for the root node.\n *\n * @param index - The index to validate.\n * @param depth - The depth of the node to validate.\n * @throws If the index is not zero for the root node.\n */\nexport function validateRootIndex(index: number, depth: number) {\n  if (depth === 0 && index !== 0) {\n    throw new Error(\n      `Invalid index: The index of the root node must be 0. Received: \"${String(\n        index,\n      )}\".`,\n    );\n  }\n}\n\ntype DeriveChildNodeArgs = {\n  path: SLIP10PathTuple;\n  node: SLIP10Node | BIP44Node | BIP44CoinTypeNode;\n};\n\n/**\n * Derives a child key from the given parent key.\n *\n * @param options - The options to use when deriving the child key.\n * @param options.node - The node to derive from.\n * @param options.path - The path to the child node / key.\n * @returns The derived key and depth.\n */\nexport async function deriveChildNode({\n  path,\n  node,\n}: DeriveChildNodeArgs): Promise<SLIP10Node> {\n  if (path.length === 0) {\n    throw new Error(\n      'Invalid HD tree derivation path: Deriving a path of length 0 is not defined.',\n    );\n  }\n\n  // Note that we do not subtract 1 from the length of the path to the child,\n  // unlike when we calculate the depth of a rooted path.\n  const newDepth = node.depth + path.length;\n  validateBIP32Depth(newDepth);\n\n  return await deriveKeyFromPath({\n    path,\n    node,\n    depth: newDepth,\n  });\n}\n"]}