{"version":3,"file":"BIP44Node.js","sourceRoot":"","sources":["../src/BIP44Node.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from '@metamask/utils';\n\nimport {\n  BIP44Depth,\n  BIP44PurposeNodeToken,\n  BIP_32_PATH_REGEX,\n  BIP_39_PATH_REGEX,\n  MAX_BIP_44_DEPTH,\n  MIN_BIP_44_DEPTH,\n  PartialHDPathTuple,\n  RootedSLIP10PathTuple,\n  SLIP10Path,\n} from './constants';\nimport { SupportedCurve } from './curves';\nimport {\n  decodeExtendedKey,\n  encodeExtendedKey,\n  PRIVATE_KEY_VERSION,\n  PUBLIC_KEY_VERSION,\n} from './extended-keys';\nimport { SLIP10Node, validateBIP32Depth } from './SLIP10Node';\nimport { isHardened } from './utils';\n\nexport type BIP44ExtendedKeyOptions = {\n  readonly depth: number;\n  readonly parentFingerprint: number;\n  readonly index: number;\n  readonly chainCode: Uint8Array | string;\n  readonly privateKey?: Uint8Array | string;\n  readonly publicKey?: Uint8Array | string;\n};\n\nexport type BIP44DerivationPathOptions = {\n  readonly derivationPath: RootedSLIP10PathTuple;\n};\n\n/**\n * A wrapper for BIP-44 Hierarchical Deterministic (HD) tree nodes, i.e.\n * cryptographic keys used to generate keypairs and addresses for cryptocurrency\n * protocols.\n */\nexport type JsonBIP44Node = {\n  /**\n   * The 0-indexed BIP-44 path depth of this node.\n   *\n   * A BIP-44 path is of the form:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   */\n  readonly depth: BIP44Depth;\n\n  /**\n   * The fingerprint of the master node, i.e., the node at depth 0. May be\n   * undefined if this node was created from an extended key.\n   */\n  readonly masterFingerprint?: number;\n\n  /**\n   * The fingerprint of the parent key, or 0 if this is a master node.\n   */\n  readonly parentFingerprint: number;\n\n  /**\n   * The index of the node, or 0 if this is a master node.\n   */\n  readonly index: number;\n\n  /**\n   * The hexadecimal string representation of the private key for this node.\n   * May be `undefined` if the node is a public node.\n   */\n  readonly privateKey?: string;\n\n  /**\n   * The hexadecimal string representation of the public key for this node.\n   */\n  readonly publicKey: string;\n\n  /**\n   * The hexadecimal string representation of the chain code for this node.\n   */\n  readonly chainCode: string;\n};\n\nexport type BIP44NodeInterface = JsonBIP44Node & {\n  /**\n   * @returns A JSON-compatible representation of this node's data fields.\n   */\n  toJSON(): JsonBIP44Node;\n};\n\n/**\n * A wrapper for BIP-44 Hierarchical Deterministic (HD) tree nodes, i.e.\n * cryptographic keys used to generate keypairs and addresses for cryptocurrency\n * protocols.\n *\n * This class contains methods and fields that may not serialize well. Use\n * {@link BIP44Node.toJSON} to get a JSON-compatible representation.\n */\nexport class BIP44Node implements BIP44NodeInterface {\n  /**\n   * Wrapper of the {@link fromExtendedKey} function. Refer to that function\n   * for documentation.\n   *\n   * @param json - The JSON representation of a SLIP-10 node.\n   */\n  static async fromJSON(json: JsonBIP44Node): Promise<BIP44Node> {\n    return BIP44Node.fromExtendedKey(json);\n  }\n\n  /**\n   * Create a new BIP-44 node from a key and chain code. You must specify\n   * either a private key or a public key. When specifying a private key,\n   * the public key will be derived from the private key.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * @param options - An object containing the extended key, or an extended\n   * public (xpub) or private (xprv) key.\n   * @param options.depth - The depth of the node.\n   * @param options.privateKey - The private key for the node.\n   * @param options.publicKey - The public key for the node. If a private key is\n   * specified, this parameter is ignored.\n   * @param options.chainCode - The chain code for the node.\n   */\n  static async fromExtendedKey(\n    options: BIP44ExtendedKeyOptions | string,\n  ): Promise<BIP44Node> {\n    if (typeof options === 'string') {\n      const extendedKey = decodeExtendedKey(options);\n\n      const { chainCode, depth, parentFingerprint, index } = extendedKey;\n\n      if (extendedKey.version === PRIVATE_KEY_VERSION) {\n        const { privateKey } = extendedKey;\n\n        return BIP44Node.fromExtendedKey({\n          depth,\n          parentFingerprint,\n          index,\n          privateKey,\n          chainCode,\n        });\n      }\n\n      const { publicKey } = extendedKey;\n\n      return BIP44Node.fromExtendedKey({\n        depth,\n        parentFingerprint,\n        index,\n        publicKey,\n        chainCode,\n      });\n    }\n\n    const {\n      privateKey,\n      publicKey,\n      chainCode,\n      depth,\n      parentFingerprint,\n      index,\n    } = options;\n\n    validateBIP44Depth(depth);\n\n    const node = await SLIP10Node.fromExtendedKey({\n      privateKey,\n      publicKey,\n      chainCode,\n      depth,\n      parentFingerprint,\n      index,\n      curve: 'secp256k1',\n    });\n\n    return new BIP44Node(node);\n  }\n\n  /**\n   * Create a new BIP-44 node from a derivation path. The derivation path\n   * must be rooted, i.e. it must begin with a BIP-39 node, given as a string of\n   * the form `bip39:MNEMONIC`, where `MNEMONIC` is a space-separated list of\n   * BIP-39 seed phrase words.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param options - An object containing the derivation path.\n   * @param options.derivationPath - The rooted HD tree path that will be used\n   * to derive the key of this node.\n   */\n  static async fromDerivationPath({\n    derivationPath,\n  }: BIP44DerivationPathOptions): Promise<BIP44Node> {\n    validateBIP44Depth(derivationPath.length - 1);\n    validateBIP44DerivationPath(derivationPath, MIN_BIP_44_DEPTH);\n\n    const node = await SLIP10Node.fromDerivationPath({\n      derivationPath,\n      curve: 'secp256k1',\n    });\n\n    return new BIP44Node(node);\n  }\n\n  #node: SLIP10Node;\n\n  public get depth(): BIP44Depth {\n    return this.#node.depth as BIP44Depth;\n  }\n\n  public get privateKeyBytes(): Uint8Array | undefined {\n    return this.#node.privateKeyBytes;\n  }\n\n  public get publicKeyBytes(): Uint8Array {\n    return this.#node.publicKeyBytes;\n  }\n\n  public get chainCodeBytes(): Uint8Array {\n    return this.#node.chainCodeBytes;\n  }\n\n  public get privateKey(): string | undefined {\n    return this.#node.privateKey;\n  }\n\n  public get publicKey(): string {\n    return this.#node.publicKey;\n  }\n\n  public get compressedPublicKey(): string {\n    return this.#node.compressedPublicKey;\n  }\n\n  public get compressedPublicKeyBytes(): Uint8Array {\n    return this.#node.compressedPublicKeyBytes;\n  }\n\n  public get chainCode(): string {\n    return this.#node.chainCode;\n  }\n\n  public get address(): string {\n    return this.#node.address;\n  }\n\n  public get masterFingerprint(): number | undefined {\n    return this.#node.masterFingerprint;\n  }\n\n  public get parentFingerprint(): number {\n    return this.#node.parentFingerprint;\n  }\n\n  public get fingerprint(): number {\n    return this.#node.fingerprint;\n  }\n\n  public get index(): number {\n    return this.#node.index;\n  }\n\n  public get extendedKey(): string {\n    const data = {\n      depth: this.depth,\n      parentFingerprint: this.parentFingerprint,\n      index: this.index,\n      chainCode: this.chainCodeBytes,\n    };\n\n    if (this.privateKeyBytes) {\n      return encodeExtendedKey({\n        ...data,\n        version: PRIVATE_KEY_VERSION,\n        privateKey: this.privateKeyBytes,\n      });\n    }\n\n    return encodeExtendedKey({\n      ...data,\n      version: PUBLIC_KEY_VERSION,\n      publicKey: this.publicKeyBytes,\n    });\n  }\n\n  public get curve(): SupportedCurve {\n    return this.#node.curve;\n  }\n\n  constructor(node: SLIP10Node) {\n    this.#node = node;\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Get a neutered version of this node, i.e. a node without a private key.\n   *\n   * @returns A neutered version of this node.\n   */\n  public neuter(): BIP44Node {\n    const node = this.#node.neuter();\n    return new BIP44Node(node);\n  }\n\n  /**\n   * Derives a child of the key contains be this node and returns a new\n   * {@link BIP44Node} containing the child key.\n   *\n   * The specified path must be a valid HD path from this node, per BIP-44.\n   * At present, this means that the path must consist of no more than 5 BIP-32\n   * nodes, depending on the depth of this node.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param path - The partial (non-rooted) BIP-44 HD tree path will be used\n   * to derive a child key from the parent key contained within this node.\n   * @returns The {@link BIP44Node} corresponding to the derived child key.\n   */\n  public async derive(path: PartialHDPathTuple): Promise<BIP44Node> {\n    if (this.depth === MAX_BIP_44_DEPTH) {\n      throw new Error(\n        'Illegal operation: This HD tree node is already a leaf node.',\n      );\n    }\n\n    const newDepth = this.depth + path.length;\n\n    validateBIP44Depth(newDepth);\n    validateBIP44DerivationPath(path, (this.depth + 1) as BIP44Depth);\n\n    const node = await this.#node.derive(path);\n    return new BIP44Node(node);\n  }\n\n  // This is documented in the interface of this class.\n  public toJSON(): JsonBIP44Node {\n    return {\n      depth: this.depth,\n      masterFingerprint: this.masterFingerprint,\n      parentFingerprint: this.parentFingerprint,\n      index: this.index,\n      privateKey: this.privateKey,\n      publicKey: this.publicKey,\n      chainCode: this.chainCode,\n    };\n  }\n}\n\n/**\n * Validates a BIP-44 path depth. Effectively, asserts that the depth is an\n * integer `number` N such that 0 <= N <= 5. Throws an error if validation\n * fails.\n *\n * @param depth - The depth to validate.\n */\nexport function validateBIP44Depth(\n  depth: unknown,\n): asserts depth is BIP44Depth {\n  validateBIP32Depth(depth);\n\n  if (depth < MIN_BIP_44_DEPTH || depth > MAX_BIP_44_DEPTH) {\n    throw new Error(\n      `Invalid HD tree path depth: The depth must be a positive integer N such that 0 <= N <= 5. Received: \"${depth}\"`,\n    );\n  }\n}\n\n/**\n * Ensures that the given derivation is valid by BIP-44.\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n * @param path - The path to validate.\n * @param startingDepth - The depth of the first node of the derivation path.\n */\nfunction validateBIP44DerivationPath(\n  path: SLIP10Path,\n  startingDepth: BIP44Depth,\n) {\n  path.forEach((nodeToken, index) => {\n    const currentDepth = startingDepth + index;\n\n    if (currentDepth === MIN_BIP_44_DEPTH) {\n      if (\n        !(nodeToken instanceof Uint8Array) &&\n        !BIP_39_PATH_REGEX.test(nodeToken)\n      ) {\n        throw new Error(\n          'Invalid derivation path: The \"m\" / seed node (depth 0) must be a BIP-39 node.',\n        );\n      }\n\n      return;\n    }\n\n    assert(typeof nodeToken === 'string');\n\n    // eslint-disable-next-line default-case\n    switch (currentDepth) {\n      case 1:\n        if (nodeToken !== BIP44PurposeNodeToken) {\n          throw new Error(\n            `Invalid derivation path: The \"purpose\" node (depth 1) must be the string \"${BIP44PurposeNodeToken}\".`,\n          );\n        }\n        break;\n\n      case 2:\n        if (!BIP_32_PATH_REGEX.test(nodeToken) || !isHardened(nodeToken)) {\n          throw new Error(\n            'Invalid derivation path: The \"coin_type\" node (depth 2) must be a hardened BIP-32 node.',\n          );\n        }\n        break;\n\n      case 3:\n        if (!BIP_32_PATH_REGEX.test(nodeToken) || !isHardened(nodeToken)) {\n          throw new Error(\n            'Invalid derivation path: The \"account\" node (depth 3) must be a hardened BIP-32 node.',\n          );\n        }\n        break;\n\n      case 4:\n        if (!BIP_32_PATH_REGEX.test(nodeToken)) {\n          throw new Error(\n            'Invalid derivation path: The \"change\" node (depth 4) must be a BIP-32 node.',\n          );\n        }\n        break;\n\n      case MAX_BIP_44_DEPTH: // 5\n        if (!BIP_32_PATH_REGEX.test(nodeToken)) {\n          throw new Error(\n            'Invalid derivation path: The \"address_index\" node (depth 5) must be a BIP-32 node.',\n          );\n        }\n        break;\n    }\n  });\n}\n"]}