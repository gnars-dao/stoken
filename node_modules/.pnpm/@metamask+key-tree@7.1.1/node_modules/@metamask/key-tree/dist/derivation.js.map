{"version":3,"file":"derivation.js","sourceRoot":"","sources":["../src/derivation.ts"],"names":[],"mappings":"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","sourcesContent":["import { assert } from '@metamask/utils';\n\nimport { BIP44CoinTypeNode } from './BIP44CoinTypeNode';\nimport { BIP44Node } from './BIP44Node';\nimport {\n  BIP_32_PATH_REGEX,\n  BIP_39_PATH_REGEX,\n  MIN_BIP_44_DEPTH,\n  SLIP10Path,\n  SLIP_10_PATH_REGEX,\n} from './constants';\nimport { getCurveByName, SupportedCurve } from './curves';\nimport { Deriver, derivers } from './derivers';\nimport { SLIP10Node } from './SLIP10Node';\n\n/**\n * Ethereum default seed path: \"m/44'/60'/0'/0/{account_index}\"\n * Multipath: \"bip32:44'/bip32:60'/bip32:0'/bip32:0/bip32:{account_index}\"\n *\n * m: { privateKey, chainCode } = sha512Hmac(\"Bitcoin seed\", masterSeed)\n * 44': { privateKey, chainCode } = parentKey.privateKey + sha512Hmac(parentKey.chainCode, [0x00, parentKey.privateKey, index + HARDENED_OFFSET])\n * 60': { privateKey, chainCode } = parentKey.privateKey + sha512Hmac(parentKey.chainCode, [0x00, parentKey.privateKey, index + HARDENED_OFFSET])\n * 0': { privateKey, chainCode } = parentKey.privateKey + sha512Hmac(parentKey.chainCode, [0x00, parentKey.privateKey, index + HARDENED_OFFSET])\n * 0: { privateKey, chainCode } = parentKey.privateKey + sha512Hmac(parentKey.chainCode, [parentKey.publicKey, index])\n * 0: { privateKey, chainCode } = parentKey.privateKey + sha512Hmac(parentKey.chainCode, [parentKey.publicKey, index])\n */\n\ntype BaseDeriveKeyFromPathArgs = {\n  path: SLIP10Path;\n  depth?: number;\n};\n\ntype DeriveKeyFromPathNodeArgs = BaseDeriveKeyFromPathArgs & {\n  node?: SLIP10Node | BIP44Node | BIP44CoinTypeNode;\n};\n\ntype DeriveKeyFromPathCurveArgs = BaseDeriveKeyFromPathArgs & {\n  curve: SupportedCurve;\n};\n\ntype DeriveKeyFromPathArgs =\n  | DeriveKeyFromPathNodeArgs\n  | DeriveKeyFromPathCurveArgs;\n\n/**\n * Takes a full or partial HD path string and returns the key corresponding to\n * the given path, with the following constraints:\n *\n * - If the path starts with a BIP-32 node, a parent key must be provided.\n * - If the path starts with a BIP-39 node, a parent key must NOT be provided.\n * - The path cannot exceed 5 BIP-32 nodes in length, optionally preceded by\n * a single BIP-39 node.\n *\n * WARNING: It is the consumer's responsibility to ensure that the path is valid\n * relative to its parent key.\n *\n * @param args - The arguments for deriving a key from a path.\n * @param args.path - A full or partial HD path, e.g.:\n * `bip39:SEED_PHRASE/bip32:44'/bip32:60'/bip32:0'/bip32:0/bip32:0`.\n * BIP-39 seed phrases must be lowercase, space-delimited, and 12-24 words long.\n * @param args.node - The node to derive from.\n * @param args.depth - The depth of the segment.\n * @returns The derived key.\n */\nexport async function deriveKeyFromPath(\n  args: DeriveKeyFromPathArgs,\n): Promise<SLIP10Node> {\n  const { path, depth = path.length } = args;\n\n  const node = 'node' in args ? args.node : undefined;\n  const curve = 'curve' in args ? args.curve : node?.curve;\n\n  if (\n    node &&\n    !(node instanceof SLIP10Node) &&\n    !(node instanceof BIP44Node) &&\n    !(node instanceof BIP44CoinTypeNode)\n  ) {\n    throw new Error(\n      'Invalid arguments: Node must be a SLIP-10 node or a BIP-44 node when provided.',\n    );\n  }\n\n  if (!curve) {\n    throw new Error(\n      'Invalid arguments: Must specify either a parent node or curve.',\n    );\n  }\n\n  validatePathSegment(\n    path,\n    Boolean(node?.privateKey) || Boolean(node?.publicKey),\n    depth,\n  );\n\n  // Derive through each part of path. `pathSegment` needs to be cast because\n  // `HDPathTuple.reduce()` doesn't work. Note that the first element of the\n  // path can be a Uint8Array.\n  return await (path as readonly [Uint8Array | string, ...string[]]).reduce<\n    Promise<SLIP10Node>\n  >(async (promise, pathNode, index) => {\n    const derivedNode = await promise;\n\n    if (typeof pathNode === 'string') {\n      const [pathType, pathPart] = pathNode.split(':');\n      assert(hasDeriver(pathType), `Unknown derivation type: \"${pathType}\".`);\n\n      const deriver = derivers[pathType] as Deriver;\n      return await deriver.deriveChildKey({\n        path: pathPart,\n        node: derivedNode,\n        curve: getCurveByName(curve),\n      });\n    }\n\n    // Only the first path segment can be a Uint8Array.\n    assert(index === 0, getMalformedError());\n\n    return await derivers.bip39.deriveChildKey({\n      path: pathNode,\n      node: derivedNode,\n      curve: getCurveByName(curve),\n    });\n  }, Promise.resolve(node as SLIP10Node));\n}\n\n/**\n * Check if the given path type is a valid deriver.\n *\n * @param pathType - The path type to check.\n * @returns Whether the path type is a valid deriver.\n */\nfunction hasDeriver(pathType: string): pathType is keyof typeof derivers {\n  return pathType in derivers;\n}\n\n/**\n * The path segment must be one of the following:\n * - A lone BIP-32 path node.\n * - A lone BIP-39 path node.\n * - A multipath.\n *\n * @param path - The path segment string to validate.\n * @param hasKey - Whether the path segment has a key.\n * @param depth - The depth of the segment.\n */\nexport function validatePathSegment(\n  path: SLIP10Path,\n  hasKey: boolean,\n  depth?: number,\n) {\n  if ((path as any).length === 0) {\n    throw new Error(`Invalid HD path segment: The segment must not be empty.`);\n  }\n\n  let startsWithBip39 = false;\n  path.forEach((node, index) => {\n    if (index === 0) {\n      startsWithBip39 =\n        node instanceof Uint8Array || BIP_39_PATH_REGEX.test(node);\n\n      if (\n        // TypeScript is unable to infer that `node` is a string here, so we\n        // need to explicitly check it again.\n        !(node instanceof Uint8Array) &&\n        !startsWithBip39 &&\n        !BIP_32_PATH_REGEX.test(node) &&\n        !SLIP_10_PATH_REGEX.test(node)\n      ) {\n        throw getMalformedError();\n      }\n    } else if (\n      node instanceof Uint8Array ||\n      (!BIP_32_PATH_REGEX.test(node) && !SLIP_10_PATH_REGEX.test(node))\n    ) {\n      throw getMalformedError();\n    }\n  });\n\n  if (depth === MIN_BIP_44_DEPTH && (!startsWithBip39 || path.length !== 1)) {\n    throw new Error(\n      `Invalid HD path segment: The segment must consist of a single BIP-39 node for depths of ${MIN_BIP_44_DEPTH}. Received: \"${String(\n        path,\n      )}\".`,\n    );\n  }\n\n  if (!hasKey && !startsWithBip39) {\n    throw new Error(\n      'Invalid derivation parameters: Must specify parent key if the first node of the path segment is not a BIP-39 node.',\n    );\n  }\n\n  if (hasKey && startsWithBip39) {\n    throw new Error(\n      'Invalid derivation parameters: May not specify parent key if the path segment starts with a BIP-39 node.',\n    );\n  }\n\n  const pathWithoutKey = (startsWithBip39 ? path.slice(1) : path) as string[];\n  if (pathWithoutKey.length > 0) {\n    const firstSegmentType = pathWithoutKey[0].split(':')[0];\n    assert(\n      pathWithoutKey.every((segment) =>\n        segment.startsWith(`${firstSegmentType}:`),\n      ),\n      `Invalid HD path segment: Cannot mix 'bip32' and 'slip10' path segments.`,\n    );\n  }\n}\n\n/**\n * Get the error for a malformed path segment.\n *\n * @returns The error.\n */\nfunction getMalformedError() {\n  return new Error('Invalid HD path segment: The path segment is malformed.');\n}\n"]}