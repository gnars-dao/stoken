{"version":3,"file":"slip10.js","sourceRoot":"","sources":["../../src/derivers/slip10.ts"],"names":[],"mappings":";;;AAAA,2CAA8C;AAG9C,4CAAsD;AAEtD,oCAA0C;AAC1C,qCAIkB;AAElB;;;;;;GAMG;AACI,KAAK,UAAU,cAAc,CAClC,OAA2B;IAE3B,OAAO,MAAM,IAAA,uBAAoB,EAAC,OAAO,EAAE,WAAW,CAAC,CAAC;AAC1D,CAAC;AAJD,wCAIC;AAED;;;;;;GAMG;AACH,KAAK,UAAU,WAAW,CACxB,KAAc,EACd,OAAuB;IAEvB,MAAM,EAAE,KAAK,EAAE,UAAU,EAAE,UAAU,EAAE,OAAO,EAAE,SAAS,EAAE,GAAG,OAAO,CAAC;IAEtE,4EAA4E;IAC5E,yBAAyB;IACzB,IAAI,KAAK,CAAC,IAAI,KAAK,SAAS,EAAE;QAC5B,MAAM,KAAK,CAAC;KACb;IAED,MAAM,gBAAgB,GAAG,UAAU;QACjC,CAAC,CAAC,UAAU,GAAG,kCAAsB;QACrC,CAAC,CAAC,UAAU,CAAC;IAEf,sEAAsE;IACtE,wBAAwB;IACxB,yDAAyD;IACzD,kFAAkF;IAClF,MAAM,UAAU,GAAG,IAAA,wBAAe,EAAC;QACjC,SAAS;QACT,SAAS,EAAE,IAAA,mBAAW,EAAC;YACrB,IAAI;YACJ,OAAO,CAAC,KAAK,CAAC,EAAE,EAAE,EAAE,CAAC;YACrB,IAAA,sBAAc,EAAC,gBAAgB,CAAC;SACjC,CAAC;KACH,CAAC,CAAC;IAEH,uCACK,OAAO,KACV,OAAO,EAAE,UAAU,IACnB;AACJ,CAAC","sourcesContent":["import { concatBytes } from '@metamask/utils';\n\nimport { DeriveChildKeyArgs } from '.';\nimport { BIP_32_HARDENED_OFFSET } from '../constants';\nimport { SLIP10Node } from '../SLIP10Node';\nimport { numberToUint32 } from '../utils';\nimport {\n  DeriveNodeArgs,\n  generateEntropy,\n  deriveChildKey as sharedDeriveChildKey,\n} from './shared';\n\n/**\n * Derive a SLIP-10 child key with a given path from a parent key.\n *\n * @param options - The options for deriving a child key.\n * @returns A tuple containing the derived private key, public key and chain\n * code.\n */\nexport async function deriveChildKey(\n  options: DeriveChildKeyArgs,\n): Promise<SLIP10Node> {\n  return await sharedDeriveChildKey(options, handleError);\n}\n\n/**\n * Handle an error that occurs during SLIP-10 derivation.\n *\n * @param error - The error that occurred.\n * @param options - The options that were used for derivation.\n * @returns The new options to use for derivation.\n */\nasync function handleError(\n  error: unknown,\n  options: DeriveNodeArgs,\n): Promise<DeriveNodeArgs> {\n  const { curve, isHardened, childIndex, entropy, chainCode } = options;\n\n  // `ed25519` keys are always valid, so this error should never be thrown. If\n  // it is, we re-throw it.\n  if (curve.name === 'ed25519') {\n    throw error;\n  }\n\n  const actualChildIndex = isHardened\n    ? childIndex + BIP_32_HARDENED_OFFSET\n    : childIndex;\n\n  // As per SLIP-10, if the resulting key is invalid, the new entropy is\n  // generated as follows:\n  // Key material (32 bytes), child chain code (32 bytes) =\n  //   HMAC-SHA512(parent chain code, 0x01 || chain code from invalid key || index).\n  const newEntropy = generateEntropy({\n    chainCode,\n    extension: concatBytes([\n      0x01,\n      entropy.slice(32, 64),\n      numberToUint32(actualChildIndex),\n    ]),\n  });\n\n  return {\n    ...options,\n    entropy: newEntropy,\n  };\n}\n"]}