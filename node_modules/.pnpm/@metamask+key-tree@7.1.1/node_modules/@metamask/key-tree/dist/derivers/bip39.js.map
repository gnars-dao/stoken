{"version":3,"file":"bip39.js","sourceRoot":"","sources":["../../src/derivers/bip39.ts"],"names":[],"mappings":";;;AAAA,uDAAuD;AACvD,0EAA2F;AAC3F,2CAAyC;AACzC,6CAA0C;AAC1C,iDAA8C;AAG9C,4CAAiE;AAEjE,8CAA2C;AAC3C,oCAA0C;AAE1C;;;;;GAKG;AACH,SAAgB,wBAAwB,CAAC,QAAgB;IACvD,OAAO,SAAS,QAAQ,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC;AAClD,CAAC;AAFD,4DAEC;AAED;;;;;;;GAOG;AACI,KAAK,UAAU,cAAc,CAAC,EACnC,IAAI,EACJ,KAAK,GACc;IACnB,OAAO,sBAAsB,CAC3B,MAAM,IAAA,4BAAc,EAAC,IAAI,EAAE,kBAAe,CAAC,EAC3C,KAAK,CACN,CAAC;AACJ,CAAC;AARD,wCAQC;AAED;;;;;;;GAOG;AACI,KAAK,UAAU,sBAAsB,CAC1C,IAAgB,EAChB,KAAY;IAEZ,IAAA,cAAM,EACJ,IAAI,CAAC,MAAM,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,IAAI,EAAE,EACtC,8DAA8D,CAC/D,CAAC;IAEF,MAAM,GAAG,GAAG,IAAA,WAAI,EAAC,eAAM,EAAE,KAAK,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;IAC7C,MAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE,4BAAgB,CAAC,CAAC;IAClD,MAAM,SAAS,GAAG,GAAG,CAAC,KAAK,CAAC,4BAAgB,CAAC,CAAC;IAE9C,IAAA,cAAM,EACJ,KAAK,CAAC,iBAAiB,CAAC,UAAU,CAAC,EACnC,yFAAyF,CAC1F,CAAC;IAEF,MAAM,iBAAiB,GAAG,IAAA,sBAAc,EACtC,MAAM,KAAK,CAAC,YAAY,CAAC,UAAU,EAAE,IAAI,CAAC,CAC3C,CAAC;IAEF,OAAO,uBAAU,CAAC,eAAe,CAAC;QAChC,UAAU;QACV,SAAS;QACT,iBAAiB;QACjB,KAAK,EAAE,CAAC;QACR,iBAAiB,EAAE,CAAC;QACpB,KAAK,EAAE,CAAC;QACR,KAAK,EAAE,KAAK,CAAC,IAAI;KAClB,CAAC,CAAC;AACL,CAAC;AA/BD,wDA+BC","sourcesContent":["import { mnemonicToSeed } from '@metamask/scure-bip39';\nimport { wordlist as englishWordlist } from '@metamask/scure-bip39/dist/wordlists/english';\nimport { assert } from '@metamask/utils';\nimport { hmac } from '@noble/hashes/hmac';\nimport { sha512 } from '@noble/hashes/sha512';\n\nimport { DeriveChildKeyArgs } from '.';\nimport { BIP39StringNode, BYTES_KEY_LENGTH } from '../constants';\nimport { Curve } from '../curves';\nimport { SLIP10Node } from '../SLIP10Node';\nimport { getFingerprint } from '../utils';\n\n/**\n * Convert a BIP-39 mnemonic phrase to a multi path.\n *\n * @param mnemonic - The BIP-39 mnemonic phrase to convert.\n * @returns The multi path.\n */\nexport function bip39MnemonicToMultipath(mnemonic: string): BIP39StringNode {\n  return `bip39:${mnemonic.toLowerCase().trim()}`;\n}\n\n/**\n * Create a {@link SLIP10Node} from a BIP-39 mnemonic phrase.\n *\n * @param options - The options for creating the node.\n * @param options.path - The multi path.\n * @param options.curve - The curve to use for derivation.\n * @returns The node.\n */\nexport async function deriveChildKey({\n  path,\n  curve,\n}: DeriveChildKeyArgs): Promise<SLIP10Node> {\n  return createBip39KeyFromSeed(\n    await mnemonicToSeed(path, englishWordlist),\n    curve,\n  );\n}\n\n/**\n * Create a {@link SLIP10Node} from a BIP-39 seed.\n *\n * @param seed - The cryptographic seed bytes.\n * @param curve - The curve to use.\n * @returns An object containing the corresponding BIP-39 master key and chain\n * code.\n */\nexport async function createBip39KeyFromSeed(\n  seed: Uint8Array,\n  curve: Curve,\n): Promise<SLIP10Node> {\n  assert(\n    seed.length >= 16 && seed.length <= 64,\n    'Invalid seed: The seed must be between 16 and 64 bytes long.',\n  );\n\n  const key = hmac(sha512, curve.secret, seed);\n  const privateKey = key.slice(0, BYTES_KEY_LENGTH);\n  const chainCode = key.slice(BYTES_KEY_LENGTH);\n\n  assert(\n    curve.isValidPrivateKey(privateKey),\n    'Invalid private key: The private key must greater than 0 and less than the curve order.',\n  );\n\n  const masterFingerprint = getFingerprint(\n    await curve.getPublicKey(privateKey, true),\n  );\n\n  return SLIP10Node.fromExtendedKey({\n    privateKey,\n    chainCode,\n    masterFingerprint,\n    depth: 0,\n    parentFingerprint: 0,\n    index: 0,\n    curve: curve.name,\n  });\n}\n"]}