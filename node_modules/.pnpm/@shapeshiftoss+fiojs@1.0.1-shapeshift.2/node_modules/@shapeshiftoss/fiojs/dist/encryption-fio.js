"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var encryption_check_1 = require("./encryption-check");
var ser = require("./chain-serialize");
var chain_jssig_1 = require("./chain-jssig");
var _a = require('./ecc'), PublicKey = _a.PublicKey, EccPrivateKey = _a.PrivateKey;
var fioAbi = require('../src/encryption-fio.abi.json');
var createHmac = require('create-hmac');
var fioTypes = ser.getTypesFromAbi(ser.createInitialTypes(), fioAbi);
/** Convert `value` to binary form. `type` must be a built-in abi type. */
function serialize(serialBuffer, type, value) {
    fioTypes.get(type).serialize(serialBuffer, value);
}
exports.serialize = serialize;
/** Convert data in `buffer` to structured form. `type` must be a built-in abi type. */
function deserialize(serialBuffer, type) {
    return fioTypes.get(type).deserialize(serialBuffer);
}
exports.deserialize = deserialize;
function createSharedCipher(_a) {
    var _b = _a === void 0 ? {} : _a, privateKey = _b.privateKey, publicKey = _b.publicKey, textEncoder = _b.textEncoder, textDecoder = _b.textDecoder;
    return __awaiter(this, void 0, void 0, function () {
        var sharedSecret;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    publicKey = PublicKey(publicKey);
                    if (!chain_jssig_1.isExternalPrivateKey(privateKey)) return [3 /*break*/, 2];
                    return [4 /*yield*/, privateKey.getSharedSecret(publicKey)];
                case 1:
                    sharedSecret = _c.sent();
                    return [3 /*break*/, 3];
                case 2:
                    sharedSecret = EccPrivateKey(privateKey).getSharedSecret(publicKey);
                    _c.label = 3;
                case 3: return [2 /*return*/, new SharedCipher({ sharedSecret: sharedSecret, textEncoder: textEncoder, textDecoder: textDecoder })];
            }
        });
    });
}
exports.createSharedCipher = createSharedCipher;
var SharedCipher = /** @class */ (function () {
    function SharedCipher(_a) {
        var _b = _a === void 0 ? {} : _a, sharedSecret = _b.sharedSecret, textEncoder = _b.textEncoder, textDecoder = _b.textDecoder;
        this.sharedSecret = sharedSecret;
        this.textEncoder = textEncoder;
        this.textDecoder = textDecoder;
    }
    /**
        Encrypt the content of a FIO message.

        @arg {string} fioContentType - `new_funds_content`, etc
        @arg {object} content
        @arg {Buffer} [IV = randomBytes(16)] - An unpredictable strong random value
            is required and supplied by default.  Unit tests may provide a static value
            to achieve predictable results.
        @return {string} cipher base64
    */
    SharedCipher.prototype.encrypt = function (fioContentType, content, IV) {
        var buffer = new ser.SerialBuffer({ textEncoder: this.textEncoder, textDecoder: this.textDecoder });
        serialize(buffer, fioContentType, content);
        var message = Buffer.from(buffer.asUint8Array());
        var cipherbuffer = encryption_check_1.checkEncrypt(this.sharedSecret, message, IV);
        // checkDecrypt(this.sharedSecret, cipherbuffer);
        return cipherbuffer.toString('base64');
    };
    /**
        Decrypt the content of a FIO message.

        @arg {string} fioContentType - `new_funds_content`, etc
        @arg {object} content - cipher base64
        @return {object} decrypted FIO object
    */
    SharedCipher.prototype.decrypt = function (fioContentType, content) {
        var message = encryption_check_1.checkDecrypt(this.sharedSecret, Buffer.from(content, 'base64'));
        var messageArray = Uint8Array.from(message);
        var buffer = new ser.SerialBuffer({ array: messageArray, textEncoder: this.textEncoder, textDecoder: this.textDecoder });
        return deserialize(buffer, fioContentType);
    };
    /**
        @example hashA(PublicKey.toBuffer())
        @arg {string|Buffer} key buffer
        @return {string} hex, one-way hash unique to this SharedCipher and key
    */
    SharedCipher.prototype.hashA = function (key) {
        var hash = createHmac('sha1', this.sharedSecret).update(key).digest();
        return '0x' + hash.slice(0, 16).toString('hex');
    };
    return SharedCipher;
}());
//# sourceMappingURL=encryption-fio.js.map