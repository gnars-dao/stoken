"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var web_encoding_1 = require("web-encoding");
var ser = require("../chain-serialize");
var PrivateKey = require('../ecc').PrivateKey;
var _a = require('../encryption-fio'), serialize = _a.serialize, deserialize = _a.deserialize, createSharedCipher = _a.createSharedCipher;
var textEncoder = new web_encoding_1.TextEncoder();
var textDecoder = new web_encoding_1.TextDecoder();
describe('Encryption FIO', function () {
    var newFundsContent = {
        payee_public_address: 'purse.alice',
        amount: '1',
        chain_code: 'FIO',
        token_code: 'FIO',
        memo: null,
        hash: null,
        offline_url: null
    };
    var newFundsContentHex = '0B70757273652E616C69636501310346494F0346494F000000';
    it('serialize', function () {
        var buffer = new ser.SerialBuffer({ textEncoder: textEncoder, textDecoder: textDecoder });
        serialize(buffer, 'new_funds_content', newFundsContent);
        expect(ser.arrayToHex(buffer.asUint8Array())).toEqual(newFundsContentHex);
    });
    it('deserialize', function () {
        var array = ser.hexToUint8Array(newFundsContentHex);
        var buffer = new ser.SerialBuffer({ array: array, textEncoder: textEncoder, textDecoder: textDecoder });
        var newFundsContentRes = deserialize(buffer, 'new_funds_content');
        expect(newFundsContentRes).toEqual(newFundsContent);
    });
    describe('Diffie Cipher', function () {
        var privateKeyAlice = PrivateKey.fromSeed('alice');
        var publicKeyAlice = privateKeyAlice.toPublic();
        var privateKeyBob = PrivateKey.fromSeed('bob');
        var publicKeyBob = privateKeyBob.toPublic();
        var IV = Buffer.from('f300888ca4f512cebdc0020ff0f7224c', 'hex');
        var newFundsContentCipherBase64 = '8wCIjKT1Es69wAIP8PciTOB8F09qqDGdsq0XriIWcOkqpZe9q4FwKu3SGILtnAWtJGETbcAqd3zX7NDptPUQsS1ZfEPiK6Hv0nJyNbxwiQc=';
        it('encrypt', function () {
            return __awaiter(this, void 0, void 0, function () {
                var cipherAlice, cipherAliceBase64, cipherBob, cipherBobBase64;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, createSharedCipher({ privateKey: privateKeyAlice, publicKey: publicKeyBob, textEncoder: textEncoder, textDecoder: textDecoder })];
                        case 1:
                            cipherAlice = _a.sent();
                            cipherAliceBase64 = cipherAlice.encrypt('new_funds_content', newFundsContent, IV);
                            expect(cipherAliceBase64).toEqual(newFundsContentCipherBase64);
                            return [4 /*yield*/, createSharedCipher({ privateKey: privateKeyBob, publicKey: publicKeyAlice, textEncoder: textEncoder, textDecoder: textDecoder })];
                        case 2:
                            cipherBob = _a.sent();
                            cipherBobBase64 = cipherBob.encrypt('new_funds_content', newFundsContent, IV);
                            expect(cipherBobBase64).toEqual(newFundsContentCipherBase64);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('decrypt', function () {
            return __awaiter(this, void 0, void 0, function () {
                var cipherAlice, newFundsContentAlice, cipherBob, newFundsContentBob;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, createSharedCipher({ privateKey: privateKeyAlice, publicKey: publicKeyBob, textEncoder: textEncoder, textDecoder: textDecoder })];
                        case 1:
                            cipherAlice = _a.sent();
                            newFundsContentAlice = cipherAlice.decrypt('new_funds_content', newFundsContentCipherBase64);
                            expect(newFundsContentAlice).toEqual(newFundsContent);
                            return [4 /*yield*/, createSharedCipher({ privateKey: privateKeyBob, publicKey: publicKeyAlice, textEncoder: textEncoder, textDecoder: textDecoder })];
                        case 2:
                            cipherBob = _a.sent();
                            newFundsContentBob = cipherBob.decrypt('new_funds_content', newFundsContentCipherBase64);
                            expect(newFundsContentBob).toEqual(newFundsContent);
                            return [2 /*return*/];
                    }
                });
            });
        });
        it('hashA', function () {
            return __awaiter(this, void 0, void 0, function () {
                var privateKey, publicKey, cipher;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            privateKey = PrivateKey.fromSeed('');
                            publicKey = privateKey.toPublic();
                            return [4 /*yield*/, createSharedCipher({ privateKey: privateKey, publicKey: publicKey })];
                        case 1:
                            cipher = _a.sent();
                            expect(cipher.hashA('')).toEqual('0x7a5de2d59c72b94c67a192a9009484ef');
                            expect(cipher.hashA(Buffer.from(''))).toEqual('0x7a5de2d59c72b94c67a192a9009484ef');
                            expect(cipher.hashA(publicKey.toBuffer())).toEqual('0x2521bccef77d48793a7a80716e79a46d');
                            return [2 /*return*/];
                    }
                });
            });
        });
    });
});
//# sourceMappingURL=encryption-fio.test.js.map