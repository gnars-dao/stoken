/**
 * @module JS-Sig
 */
/// <reference types="node" />
import { SignatureProvider, SignatureProviderArgs } from './chain-api-interfaces';
export interface ExternalPrivateKey {
    publicKey: string;
    sign(signBuf: ArrayBuffer): Promise<string>;
    getSharedSecret(publicKey: any): Promise<Buffer>;
}
export declare function isExternalPrivateKey(x: any): x is ExternalPrivateKey;
export declare type PrivateKey = string | ExternalPrivateKey;
/** Signs transactions using in-process private keys */
export declare class JsSignatureProvider implements SignatureProvider {
    /** map public to private keys */
    keys: Map<string, PrivateKey>;
    /** public keys */
    availableKeys: string[];
    /** @param privateKeys private keys to sign with */
    constructor(privateKeys: PrivateKey[]);
    /** Public keys associated with the private keys that the `SignatureProvider` holds */
    getAvailableKeys(): Promise<string[]>;
    /** Sign a transaction */
    sign({ chainId, requiredKeys, serializedTransaction, serializedContextFreeData }: SignatureProviderArgs): Promise<{
        signatures: any[];
        serializedTransaction: Uint8Array;
        serializedContextFreeData: Uint8Array;
    }>;
}
