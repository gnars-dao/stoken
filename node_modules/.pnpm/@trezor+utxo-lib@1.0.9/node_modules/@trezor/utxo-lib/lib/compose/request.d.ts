import type { Network } from '../networks';
import type { TxType } from '../coinselect/utils';
export type ComposeInput = {
    index: number;
    transactionHash: string;
    value: string;
    addressPath: [number, number];
    height?: number;
    coinbase: boolean;
    tsize: number;
    vsize: number;
    own: boolean;
    required?: boolean;
    confirmations?: number;
};
export type ComposeFinalOutput = {
    type: 'complete';
    address: string;
    amount: string;
} | {
    type: 'send-max';
    address: string;
} | {
    type: 'opreturn';
    dataHex: string;
};
export type ComposeNotFinalOutput = {
    type: 'send-max-noaddress';
} | {
    type: 'noaddress';
    amount: string;
};
export type ComposeOutput = ComposeFinalOutput | ComposeNotFinalOutput;
export type ComposeRequest = {
    txType?: TxType;
    utxos: ComposeInput[];
    outputs: ComposeOutput[];
    height: number;
    feeRate: string | number;
    basePath: number[];
    network: Network;
    changeId: number;
    changeAddress: string;
    dustThreshold: number;
    baseFee?: number;
    floorBaseFee?: boolean;
    dustOutputFee?: number;
    skipUtxoSelection?: boolean;
    skipPermutation?: boolean;
};
export declare function splitByCompleteness(outputs: ComposeOutput[]): {
    complete: ComposeFinalOutput[];
    incomplete: ComposeNotFinalOutput[];
};
export declare function getMax(outputs: ComposeOutput[]): {
    id: number;
    exists: boolean;
};
//# sourceMappingURL=request.d.ts.map