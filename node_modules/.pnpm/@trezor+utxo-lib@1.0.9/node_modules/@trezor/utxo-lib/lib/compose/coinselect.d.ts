import type { ComposeRequest } from './request';
import type { CoinSelectInput, CoinSelectOutputFinal } from '../coinselect';
import type { Network } from '../networks';
export type CompleteResult = {
    type: 'true';
    result: {
        inputs: CoinSelectInput[];
        outputs: CoinSelectOutputFinal[];
        max?: string;
        totalSpent: string;
        fee: number;
        feePerByte: number;
        bytes: number;
    };
};
type Result = CompleteResult | {
    type: 'false';
};
export declare function coinselect(txType: NonNullable<ComposeRequest['txType']>, utxos: ComposeRequest['utxos'], rOutputs: ComposeRequest['outputs'], height: number, feeRate: number, countMax: boolean, countMaxId: number, dustThreshold: number, network: Network, baseFee?: number, floorBaseFee?: boolean, dustOutputFee?: number, skipPermutation?: boolean): Result;
export {};
//# sourceMappingURL=coinselect.d.ts.map