/// <reference types="node" />
import { Permutation } from './permutation';
import type { ComposeInput, ComposeFinalOutput } from './request';
import type { CoinSelectInput, CoinSelectOutputFinal } from '../coinselect';
import type { Network } from '../networks';
export type ComposedTxOutput = {
    path: number[];
    value: string;
    address?: typeof undefined;
    opReturnData?: typeof undefined;
} | {
    address: string;
    value: string;
    path?: typeof undefined;
    opReturnData?: typeof undefined;
} | {
    opReturnData: Buffer;
    path?: typeof undefined;
    address?: typeof undefined;
    value?: typeof undefined;
};
export type ComposedTxInput = {
    hash: Buffer;
    index: number;
    path: number[];
    amount: string;
};
export type ComposedTransaction = {
    inputs: ComposedTxInput[];
    outputs: Permutation<ComposedTxOutput>;
};
export declare function createTransaction(allInputs: ComposeInput[], selectedInputs: CoinSelectInput[], allOutputs: ComposeFinalOutput[], selectedOutputs: CoinSelectOutputFinal[], basePath: number[], changeId: number, changeAddress: string, network: Network, skipPermutation?: boolean): ComposedTransaction;
//# sourceMappingURL=transaction.d.ts.map