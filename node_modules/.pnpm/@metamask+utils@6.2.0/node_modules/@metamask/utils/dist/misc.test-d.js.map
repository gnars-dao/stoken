{"version":3,"file":"misc.test-d.js","sourceRoot":"","sources":["../src/misc.test-d.ts"],"names":[],"mappings":"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","sourcesContent":["import { expectAssignable, expectNotAssignable, expectType } from 'tsd';\n\nimport { isObject, hasProperty, RuntimeObject } from './misc';\n\n//=============================================================================\n// isObject\n//=============================================================================\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst unknownValue = {} as unknown;\n\nexpectNotAssignable<RuntimeObject>(unknownValue);\n\nif (isObject(unknownValue)) {\n  expectAssignable<RuntimeObject>(unknownValue);\n}\n\n// Does not interfere with satisfaction of static type\nconst constObjectType = { foo: 'foo' } as const;\nif (hasProperty(constObjectType, 'foo')) {\n  expectAssignable<{ foo: 'foo' }>(constObjectType);\n}\n\n//=============================================================================\n// hasProperty\n//=============================================================================\n\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst unknownObject = {} as Object;\n\n// Establish that `Object` is not accepted when a specific property is needed.\nexpectNotAssignable<Record<'foo', unknown>>(unknownObject);\n\n// Establish that `RuntimeObject` is not accepted when a specific property is needed.\nif (isObject(unknownObject)) {\n  expectNotAssignable<Record<'foo', unknown>>(unknownObject);\n}\n\n// An object is accepted after `hasProperty` is used to prove that it has the required property.\nif (isObject(unknownObject) && hasProperty(unknownObject, 'foo')) {\n  expectAssignable<Record<'foo', unknown>>(unknownObject);\n}\n\n// An object is accepted after `hasProperty` is used to prove that it has all required properties.\nif (\n  isObject(unknownObject) &&\n  hasProperty(unknownObject, 'foo') &&\n  hasProperty(unknownObject, 'bar')\n) {\n  expectAssignable<Record<'foo' | 'bar', unknown>>(unknownObject);\n}\n\n// An object is not accepted after `hasProperty` has only been used to establish that some required properties exist.\nif (isObject(unknownObject) && hasProperty(unknownObject, 'foo')) {\n  expectNotAssignable<Record<'foo' | 'bar', unknown>>(unknownObject);\n}\n\n// Does not interfere with satisfaction of non-overlapping types\nconst overlappingTypesExample = { foo: 'foo', baz: 'baz' };\nif (hasProperty(overlappingTypesExample, 'foo')) {\n  expectAssignable<Record<'baz', unknown>>(overlappingTypesExample);\n}\n\nconst exampleErrorWithCode = new Error('test');\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nexampleErrorWithCode.code = 999;\n\n// Establish that trying to check for a custom property on an error results in failure\nexpectNotAssignable<{ code: any }>(exampleErrorWithCode);\n\n// Using custom Error property is allowed after checking with `hasProperty`\nif (hasProperty(exampleErrorWithCode, 'code')) {\n  expectType<unknown>(exampleErrorWithCode.code);\n}\n\n// `hasProperty` is compatible with interfaces\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface HasPropertyInterfaceExample {\n  a: number;\n}\nconst hasPropertyInterfaceExample: HasPropertyInterfaceExample = { a: 0 };\nhasProperty(hasPropertyInterfaceExample, 'a');\n\n// `hasProperty` is compatible with classes\nclass HasPropertyClassExample {\n  a!: number;\n}\nconst hasPropertyClassExample = new HasPropertyClassExample();\nhasProperty(hasPropertyClassExample, 'a');\n\ntype HasPropertyTypeExample = {\n  a?: number;\n};\n\n// It keeps the original type when defined.\nconst hasPropertyTypeExample: HasPropertyTypeExample = {};\nif (hasProperty(hasPropertyTypeExample, 'a')) {\n  expectType<number | undefined>(hasPropertyTypeExample.a);\n}\n\n//=============================================================================\n// RuntimeObject\n//=============================================================================\n\n// Valid runtime objects:\n\nexpectAssignable<RuntimeObject>({});\n\nexpectAssignable<RuntimeObject>({ foo: 'foo' });\n\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexpectAssignable<RuntimeObject>({ 0: 'foo' });\n\nexpectAssignable<RuntimeObject>({ [Symbol('foo')]: 'foo' });\n\n// Invalid runtime objects:\n\nexpectNotAssignable<RuntimeObject>(null);\n\nexpectNotAssignable<RuntimeObject>(undefined);\n\nexpectNotAssignable<RuntimeObject>('foo');\n\nexpectNotAssignable<RuntimeObject>(0);\n\nexpectNotAssignable<RuntimeObject>([]);\n\nexpectNotAssignable<RuntimeObject>(new Date());\n\nexpectNotAssignable<RuntimeObject>(() => 0);\n\nexpectNotAssignable<RuntimeObject>(new Set());\n\nexpectNotAssignable<RuntimeObject>(new Map());\n\nexpectNotAssignable<RuntimeObject>(Symbol('test'));\n\n// The RuntimeObject type gets confused by interfaces. This interface is a valid object,\n// but it's incompatible with the RuntimeObject type.\n// eslint-disable-next-line @typescript-eslint/consistent-type-definitions\ninterface RuntimeObjectInterfaceExample {\n  a: number;\n}\nconst runtimeObjectInterfaceExample: RuntimeObjectInterfaceExample = { a: 0 };\nexpectNotAssignable<RuntimeObject>(runtimeObjectInterfaceExample);\n\nclass RuntimeObjectClassExample {\n  a!: number;\n}\nconst runtimeObjectClassExample = new RuntimeObjectClassExample();\nexpectNotAssignable<RuntimeObject>(runtimeObjectClassExample);\n"]}