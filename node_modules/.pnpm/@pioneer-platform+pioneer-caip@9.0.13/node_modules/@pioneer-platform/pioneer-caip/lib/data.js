"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.primaryAssets = exports.primaryBlockchains = exports.thorchainToCaip = exports.shortListNameToCaip = exports.shortListSymbolToCaip = exports.shortListSymbolToCoinGeckoPlatformId = exports.getChainEnumValue = exports.ChainToNetworkId = exports.ChainToCaip = exports.Chain = exports.evmCaips = void 0;
exports.evmCaips = {
    ethereum: 'eip155:1/slip44:60',
    base: 'eip155:8453/slip44:60',
    polygon: 'eip155:137/slip44:60',
    pulsechain: 'eip155:369/slip44:60',
    optimism: 'eip155:10/slip44:60',
    'gnosis-chain-(formerly-xdai)': 'eip155:100/slip44:60',
    'gnosis': 'eip155:100/slip44:60',
    'binance-smart-chain': 'eip155:56/slip44:60',
    'smart-bitcoin-cash': 'eip155:10000/slip44:60',
    'arbitrum': 'eip155:42161/slip44:60',
    fuse: 'eip155:122/slip44:60',
    'bittorrent-chain': 'eip155:199/slip44:60',
    celo: 'eip155:42220/slip44:60',
    'avalanche': 'eip155:43114/slip44:60',
    grli: 'eip155:5/slip44:60',
    eos: 'eip155:59/slip44:60',
    'ethereum-classic': 'eip155:61/slip44:60',
    evmos: 'eip155:9001/slip44:60',
    'poa-network-core': 'eip155:99/slip44:60'
};
var Chain;
(function (Chain) {
    Chain["Arbitrum"] = "ARB";
    Chain["Avalanche"] = "AVAX";
    Chain["Base"] = "BASE";
    Chain["Binance"] = "BNB";
    Chain["BinanceSmartChain"] = "BSC";
    Chain["Bitcoin"] = "BTC";
    Chain["BitcoinCash"] = "BCH";
    Chain["Cosmos"] = "GAIA";
    Chain["Dash"] = "DASH";
    Chain["Digibyte"] = "DGB";
    Chain["Dogecoin"] = "DOGE";
    Chain["EOS"] = "EOS";
    Chain["Ethereum"] = "ETH";
    Chain["Kujira"] = "KUJI";
    Chain["Litecoin"] = "LTC";
    Chain["Maya"] = "MAYA";
    Chain["Optimism"] = "OP";
    Chain["Osmosis"] = "OSMO";
    Chain["Polygon"] = "MATIC";
    Chain["Ripple"] = "XRP";
    Chain["THORChain"] = "THOR";
    Chain["Zcash"] = "ZEC";
})(Chain || (exports.Chain = Chain = {}));
exports.ChainToCaip = {
    'ARB': 'eip155:42161/slip44:60',
    'AVAX': 'eip155:43114/slip44:60',
    'BSC': 'eip155:56/slip44:60',
    'BNB': 'binance:bnb-beacon-chain/slip44:118',
    'BCH': 'bip122:000000000000000000651ef99cb9fcbe/slip44:145',
    'BTC': 'bip122:000000000019d6689c085ae165831e93/slip44:0',
    'BASE': 'eip155:8453/slip44:60',
    'GAIA': 'cosmos:cosmoshub-4/slip44:118',
    'DASH': 'bip122:dash-hash/slip44:5',
    'DGB': 'bip122:digibytes-hash/slip44:20',
    'DOGE': 'bip122:00000000001a91e3dace36e2be3bf030/slip44:3',
    'KUJI': 'cosmos:kaiyo-1/slip44:118',
    'EOS': 'eos:cf057bbfb72640471fd910bcb67639c2/slip44:194',
    'ETH': 'eip155:1/slip44:60',
    'LTC': 'bip122:12a765e31ffd4059bada1e25190f6e98/slip44:2',
    'MAYA': 'cosmos:maya-mainnet-v1/slip44:118',
    'OP': 'eip155:10/slip44:60',
    'OSMO': 'cosmos:osmosis-1/slip44:118',
    'MATIC': 'eip155:137/slip44:60',
    'XRP': 'ripple:4109C6F2045FC7EFF4CDE8F9905D19C2/slip44:144',
    'THOR': 'cosmos:thorchain-mainnet-v1/slip44:931',
    'ZEC': 'bip122:0000000000196a45/slip44:133',
};
exports.ChainToNetworkId = {
    'ARB': 'eip155:42161',
    'AVAX': 'eip155:43114',
    'BSC': 'eip155:56',
    'BNB': 'binance:bnb-beacon-chain',
    'BCH': 'bip122:000000000000000000651ef99cb9fcbe',
    'BTC': 'bip122:000000000019d6689c085ae165831e93',
    'BASE': 'eip155:8453',
    'GAIA': 'cosmos:cosmoshub-4',
    'DASH': 'bip122:dash-hash',
    'DGB': 'bip122:digibytes-hash',
    'DOGE': 'bip122:00000000001a91e3dace36e2be3bf030',
    'KUJI': 'cosmos:kaiyo-1',
    'EOS': 'eos:cf057bbfb72640471fd910bcb67639c2',
    'ETH': 'eip155:1',
    'LTC': 'bip122:12a765e31ffd4059bada1e25190f6e98',
    'MAYA': 'cosmos:maya-mainnet-v1',
    'OP': 'eip155:10',
    'OSMO': 'cosmos:osmosis-1',
    'MATIC': 'eip155:137',
    'XRP': 'ripple:4109C6F2045FC7EFF4CDE8F9905D19C2',
    'THOR': 'cosmos:thorchain-mainnet-v1',
    'ZEC': 'bip122:0000000000196a45',
};
function getChainEnumValue(chainStr) {
    switch (chainStr) {
        case 'ARB':
            return Chain.Arbitrum;
        case 'AVAX':
            return Chain.Avalanche;
        case 'BASE':
            return Chain.Base;
        case 'BNB':
            return Chain.Binance;
        case 'BSC':
            return Chain.BinanceSmartChain;
        case 'BTC':
            return Chain.Bitcoin;
        case 'BCH':
            return Chain.BitcoinCash;
        case 'GAIA':
            return Chain.Cosmos;
        case 'DASH':
            return Chain.Dash;
        case 'DGB':
            return Chain.Digibyte;
        case 'DOGE':
            return Chain.Dogecoin;
        case 'EOS':
            return Chain.EOS;
        case 'ETH':
            return Chain.Ethereum;
        case 'KUJI':
            return Chain.Kujira;
        case 'LTC':
            return Chain.Litecoin;
        case 'MAYA':
            return Chain.Maya;
        case 'OP':
            return Chain.Optimism;
        case 'OSMO':
            return Chain.Osmosis;
        case 'MATIC':
            return Chain.Polygon;
        case 'XRP':
            return Chain.Ripple;
        case 'THOR':
            return Chain.THORChain;
        case 'ZEC':
            return Chain.Zcash;
        default:
            return undefined;
    }
}
exports.getChainEnumValue = getChainEnumValue;
exports.shortListSymbolToCoinGeckoPlatformId = {
    ARB: 'arbitrum',
    BASE: 'base',
    ETH: 'ethereum',
    GNO: 'gnosis-chain',
    MATIC: 'polygon-pos',
    OP: 'optimistic-ethereum',
    AVAX: 'avalanche',
    BNB: 'binance-smart-chain'
};
exports.shortListSymbolToCaip = {
    ATOM: 'cosmos:cosmoshub-4/slip44:118',
    ARB: 'eip155:42161/slip44:60',
    BTC: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
    BASE: 'eip155:8453/slip44:60',
    OSMO: 'cosmos:osmosis-1/slip44:118',
    BCH: 'bip122:000000000000000000651ef99cb9fcbe/slip44:145',
    LTC: 'bip122:12a765e31ffd4059bada1e25190f6e98/slip44:2',
    GAIA: 'cosmos:cosmoshub-4/slip44:118',
    DASH: 'bip122:dash-hash/slip44:5',
    DGB: 'bip122:digibytes-hash/slip44:20',
    DOGE: 'bip122:00000000001a91e3dace36e2be3bf030/slip44:3',
    RUNE: 'cosmos:thorchain-mainnet-v1/slip44:931',
    THOR: 'cosmos:thorchain-mainnet-v1/slip44:931',
    ETH: 'eip155:1/slip44:60',
    GNO: 'eip155:100/slip44:60',
    XRP: 'ripple:4109C6F2045FC7EFF4CDE8F9905D19C2/slip44:144',
    MATIC: 'eip155:137/slip44:60',
    OP: 'eip155:10/slip44:60',
    AVAX: 'eip155:43114/slip44:60',
    ADA: 'placeholder:caip:cardano:native:cardano',
    BNB: 'eip155:56/slip44:60',
    EOS: 'eos:cf057bbfb72640471fd910bcb67639c22df9f92470936cddc1ade0e2f2e7dc4f/slip44:194',
    FIO: 'placeholder:caip:fio:native:fio-protocol'
};
exports.shortListNameToCaip = {
    bitcoin: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
    arbitrum: 'bip122:000000000019d6689c085ae165831e93/slip44:0',
    cosmos: 'cosmos:cosmoshub-4/slip44:118',
    osmosis: 'cosmos:osmosis-1/slip44:118',
    polygon: 'eip155:137/slip44:60',
    bitcoincash: 'bip122:000000000000000000651ef99cb9fcbe/slip44:145',
    litecoin: 'bip122:12a765e31ffd4059bada1e25190f6e98/slip44:2',
    dash: 'bip122:dash-hash/slip44:5',
    digiByte: 'bip122:digibytes-hash/slip44:20',
    dogecoin: 'bip122:00000000001a91e3dace36e2be3bf030/slip44:3',
    thorchain: 'cosmos:thorchain-mainnet-v1/slip44:931',
    ethereum: 'eip155:1/slip44:60',
    avalanche: 'eip155:43114/slip44:60',
    gnosis: 'eip155:100/slip44:60',
    bnbsmartchain: 'eip155:56/slip44:60',
    ripple: 'ripple:4109C6F2045FC7EFF4CDE8F9905D19C2/slip44:144',
    optimism: 'eip155:10/slip44:60',
    cardano: 'placeholder:caip:cardano:native:cardano',
    binance: 'placeholder:caip:binance:native:bnb-beacon-chain',
    eos: 'eip155:1:/erc20:0x86fa049857e0209aa7d9e616f7eb3b3b78ecfdb0',
    fio: 'placeholder:caip:fio:native:fio-protocol'
};
var thorchainToCaip = function (chain, symbol, ticker, type) {
    try {
        var caip 
        //get networkId
        // let chainEnumValue = getChainEnumValue(chain)
        // console.log("chainEnumValue: ", chainEnumValue)
        = void 0;
        //get networkId
        // let chainEnumValue = getChainEnumValue(chain)
        // console.log("chainEnumValue: ", chainEnumValue)
        if (chain == "AVAX" && symbol == "WETH") {
            console.log("WETH detected");
            caip = exports.ChainToCaip[chain];
        }
        else if (chain == "BSC" && symbol == "BNB") {
            //if chain and symbol are the same, then we have a native token
            caip = exports.shortListNameToCaip['bnbsmartchain'];
        }
        else if (chain == "GAIA" && symbol == "ATOM") {
            //if chain and symbol are the same, then we have a native token
            caip = exports.shortListNameToCaip['cosmos'];
        }
        else if (chain == "ARB" && symbol == "ETH") {
            //if chain and symbol are the same, then we have a native token
            caip = exports.shortListNameToCaip['arbitrum'];
        }
        else if (chain == "OP" && symbol == "ETH") {
            //if chain and symbol are the same, then we have a native token
            caip = exports.shortListNameToCaip['optimism'];
        }
        else if (chain == "THOR" || symbol == "RUNE") {
            //if chain and symbol are the same, then we have a native token
            caip = exports.shortListNameToCaip['thorchain'];
        }
        else if (chain == symbol) {
            //if chain and symbol are the same, then we have a native token
            caip = exports.ChainToCaip[chain];
        }
        else {
            //attach symbol to chain
            var networkId = exports.ChainToNetworkId[chain];
            console.log("networkId: ", networkId);
            //if token
            if (symbol.indexOf("-") > -1) {
                var contract = symbol.split("-")[1];
                caip = "".concat(networkId, ":erc20:").concat(contract);
            }
            else {
                console.error({ chain: chain, symbol: symbol, ticker: ticker, type: type });
                throw Error("Unable to parse CAIP! TODO!");
            }
        }
        //build caip
        return caip;
    }
    catch (e) {
        throw e;
    }
};
exports.thorchainToCaip = thorchainToCaip;
//Primary blockchain caips
exports.primaryBlockchains = {
    "eip155:1/slip44:60": {
        name: 'ethereum',
        type: 'coin',
        caip: 'eip155:1/slip44:60',
        tags: [
            'ethereum',
            'isAsset',
            'isNative',
            'KeepKeySupport',
            'DappSupport',
            'WalletConnectSupport'
        ],
        blockchain: 'ethereum',
        symbol: 'ETH',
        decimals: 18,
        image: 'https://pioneers.dev/coins/ethereum.png',
        description: 'Open source platform to write and distribute decentralized applications.',
        website: 'https://ethereum.org/',
        explorer: 'https://etherscan.io/',
        rank: 2
    }
};
exports.primaryAssets = {
    "eip155:1/slip44:60": {
        blockchain: 'ethereum',
        caip: 'eip155:1/slip44:60',
        chainId: 1,
        description: 'more info here: https://ethereum.org This is a EVM network with chainId: 1 Follows EIP:155',
        explorer: 'https://ethereum.org',
        faucets: [],
        feeAssetCaip: 'eip155:1/slip44:60',
        feeAssetName: 'ethereum',
        feeAssetRank: 2,
        feeAssetSymbol: 'ETH',
        image: 'https://pioneers.dev/coins/ethereum-mainnet.png',
        isCharted: false,
        name: 'ethereum',
        network: 'ETH',
        service: null,
        symbol: 'ETH',
        tags: [
            'KeepKeySupport',
            'DappSupport',
            'WalletConnectSupport',
            'EVM',
            'EIP:155',
            'ethereum',
            'Ether',
            'ETH',
            1,
            null
        ],
        type: 'EVM'
    }
};
