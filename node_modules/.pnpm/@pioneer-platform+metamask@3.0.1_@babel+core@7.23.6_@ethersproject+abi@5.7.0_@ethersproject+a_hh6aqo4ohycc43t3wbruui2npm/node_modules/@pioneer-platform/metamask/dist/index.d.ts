import { Chain } from '@pioneer-platform/types';
import type { ConnectWalletParams } from '@pioneer-platform/types';
import type { DerivationPathArray } from '@pioneer-platform/types';

export declare const METAMASK_SUPPORTED_CHAINS: readonly [Chain.Arbitrum, Chain.Avalanche, Chain.BinanceSmartChain, Chain.Bitcoin, Chain.BitcoinCash, Chain.Cosmos, Chain.Dogecoin, Chain.Ethereum, Chain.Litecoin, Chain.Optimism, Chain.Polygon, Chain.THORChain];

declare type MetaMaskOptions = {
    ethplorerApiKey?: string;
    utxoApiKey?: string;
    covalentApiKey?: string;
};

export declare type MetaMaskParams = MetaMaskOptions & {
    wallet: any;
    chain: Chain;
    derivationPath: DerivationPathArray;
    rpcUrl?: string;
    api?: any;
};

export declare const metamaskWallet: {
    connectMethodName: "connectMetaMask";
    connect: ({ apis, rpcUrls, addChain, config: { covalentApiKey, ethplorerApiKey, utxoApiKey }, }: ConnectWalletParams) => (chains: (typeof METAMASK_SUPPORTED_CHAINS)[number], derivationPath: DerivationPathArray) => Promise<boolean>;
    isDetected: () => boolean;
};

export { }
