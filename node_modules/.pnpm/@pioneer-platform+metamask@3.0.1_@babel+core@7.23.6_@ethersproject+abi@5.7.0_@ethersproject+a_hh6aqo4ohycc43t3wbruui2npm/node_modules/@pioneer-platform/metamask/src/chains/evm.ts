import { Signer } from '@ethersproject/abstract-signer';
import { BigNumber } from '@ethersproject/bignumber';
// import { BigNumber } from '@ethersproject/bignumber';
import type { JsonRpcProvider, Provider } from '@ethersproject/providers';
// import { serialize } from '@ethersproject/transactions';
// import { derivationPathToString } from '@pioneer-platform/helpers';
import type { Chain, DerivationPathArray, EVMTxParams } from '@pioneer-platform/types';
import { ChainToChainId } from '@pioneer-platform/types';
// import TrezorConnect from '@trezor/connect-web';

interface KeepKeyEVMSignerParams {
  wallet: any;
  chain: Chain;
  derivationPath: DerivationPathArray;
  provider: Provider | JsonRpcProvider;
}

class MetaMaskSigner extends Signer {
  private wallet: any;
  private chain: Chain;
  private derivationPath: DerivationPathArray;
  private address: string;
  readonly provider: Provider | JsonRpcProvider;

  constructor({ wallet, chain, derivationPath, provider }: KeepKeyEVMSignerParams) {
    super();
    this.wallet = wallet;
    this.chain = chain;
    this.derivationPath = derivationPath;
    this.provider = provider;
    this.address = '';
  }

  getAddress = async () => {
    if (!this.address) {
      //ETH path
      let addressInfo = {
        addressNList: [2147483692, 2147483708, 2147483648, 0, 0],
        coin: 'Ethereum',
        scriptType: 'ethereum',
        showDisplay: false,
      };
      let response = await this.wallet.ethGetAddress({
        addressaddressNList: addressInfo.addressNList,
      });
      this.address = response;
    }

    return this.address;
  };

  signMessage = async (message: string) => {
    let input = {
      address: this.address,
      message: message, //must be hex encoded
    };
    let response = await this.wallet.ethSign(input);
    return response;
  };

  signTransaction = async ({ from, to, value, gasLimit, nonce, data, ...restTx }: EVMTxParams) => {
    if (!from) throw new Error('Missing from address');
    if (!to) throw new Error('Missing to address');
    if (!gasLimit) throw new Error('Missing gasLimit');
    if (!nonce) throw new Error('Missing nonce');
    if (!data) throw new Error('Missing data');
    if (!restTx) throw new Error('Missing restTx');
    const isEIP1559 = 'maxFeePerGas' in restTx && 'maxPriorityFeePerGas' in restTx;

    const baseTx = {
      addressNList: [2147483692, 2147483708, 2147483648, 0, 0],
      from: this.address,
      chainId: BigNumber.from(ChainToChainId[this.chain]).toHexString(),
      to,
      value: BigNumber.from(value || 0).toHexString(),
      gasLimit: BigNumber.from(gasLimit).toHexString(),
      nonce: BigNumber.from(
        nonce || (await this.provider.getTransactionCount(from, 'pending')),
      ).toHexString(),
      data,
      ...(isEIP1559
        ? {
            maxFeePerGas: BigNumber.from(restTx?.maxFeePerGas).toHexString(),
            maxPriorityFeePerGas: BigNumber.from(restTx.maxPriorityFeePerGas).toHexString(),
          }
        : //@ts-expect-error ts cant infer type of restTx
          { gasPrice: BigNumber.from(restTx.gasPrice).toHexString() }),
    };

    let responseSign = await this.wallet.ethSignTx(baseTx);
    return responseSign.serialized;
  };

  connect = (provider: Provider) =>
    new MetaMaskSigner({
      wallet: this.wallet,
      chain: this.chain,
      derivationPath: this.derivationPath,
      provider,
    });
}
export const getEVMSigner = async ({ wallet, chain, derivationPath, provider }: any) =>
  new MetaMaskSigner({ wallet, chain, derivationPath, provider });
