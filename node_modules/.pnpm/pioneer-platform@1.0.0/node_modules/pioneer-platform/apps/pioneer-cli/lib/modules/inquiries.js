"use strict";
/*
    CLI inquiries

            -Highlander
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.prompt_password_input = exports.prompt_password_create = exports.prompt_create_wallet = exports.prompt_password_enable = exports.prompt_fio_enable = exports.prompt_seed_input = void 0;
var TAG = " | App | ";
var log = require("loggerdog-client")();
var inquirer = require("inquirer-promise");
function prompt_seed_input() {
    return __awaiter(this, void 0, void 0, function () {
        var tag, questions, response, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | prompt_seed_input | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    questions = [
                        {
                            type: "input",
                            name: "seed",
                            message: "Insert your 12 or 24 word mnemonics",
                            default: "alcohol woman abuse must during monitor noble actual mixed trade anger aisle",
                        }
                    ];
                    return [4 /*yield*/, inquirer.prompt(questions)];
                case 2:
                    response = _a.sent();
                    return [2 /*return*/, response.seed];
                case 3:
                    e_1 = _a.sent();
                    console.error(tag, "e: ", e_1);
                    return [2 /*return*/, {}];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.prompt_seed_input = prompt_seed_input;
function prompt_fio_enable() {
    return __awaiter(this, void 0, void 0, function () {
        var tag, questions, response, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | importConfig | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    questions = [
                        {
                            type: "list",
                            name: "fio",
                            message: "enable FIO wallet features",
                            choices: ["enable", "continue setup without (Opt out)"],
                        }
                    ];
                    return [4 /*yield*/, inquirer.prompt(questions)];
                case 2:
                    response = _a.sent();
                    if (response.fio === "enable") {
                        return [2 /*return*/, true];
                    }
                    else {
                        return [2 /*return*/, false];
                    }
                    return [3 /*break*/, 4];
                case 3:
                    e_2 = _a.sent();
                    console.error(tag, "e: ", e_2);
                    return [2 /*return*/, {}];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.prompt_fio_enable = prompt_fio_enable;
function prompt_password_enable() {
    return __awaiter(this, void 0, void 0, function () {
        var tag, questions, response, e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | prompt_fio_enable | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    questions = [
                        {
                            type: "list",
                            name: "passwordEnabled",
                            message: "Would you like to encrypt your wallet? (requires a password on every startup)",
                            choices: ["continue unencrypted", "enable password protection"],
                        }
                    ];
                    return [4 /*yield*/, inquirer.prompt(questions)];
                case 2:
                    response = _a.sent();
                    if (response.passwordEnabled === "enable password protection") {
                        return [2 /*return*/, true];
                    }
                    else {
                        return [2 /*return*/, false];
                    }
                    return [3 /*break*/, 4];
                case 3:
                    e_3 = _a.sent();
                    log.error(e_3);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.prompt_password_enable = prompt_password_enable;
function prompt_create_wallet() {
    return __awaiter(this, void 0, void 0, function () {
        var tag, questions, response, e_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | prompt_create_wallet | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    questions = [
                        {
                            type: "list",
                            name: "type",
                            message: "What do you want to do?",
                            choices: ["create a new wallet", "restore from seed", "pair hardware wallet",],
                        }
                    ];
                    return [4 /*yield*/, inquirer.prompt(questions)];
                case 2:
                    response = _a.sent();
                    return [2 /*return*/, response.type];
                case 3:
                    e_4 = _a.sent();
                    log.error(e_4);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.prompt_create_wallet = prompt_create_wallet;
function prompt_password_create() {
    return __awaiter(this, void 0, void 0, function () {
        var tag, questions, response, e_5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | prompt_password_create | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    questions = [
                        {
                            type: "password",
                            name: "password",
                            message: "password",
                            default: ""
                        },
                        {
                            type: "password",
                            name: "password2",
                            message: "confirm password",
                            default: "",
                        }
                    ];
                    return [4 /*yield*/, inquirer.prompt(questions)];
                case 2:
                    response = _a.sent();
                    return [2 /*return*/, response];
                case 3:
                    e_5 = _a.sent();
                    log.error(e_5);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.prompt_password_create = prompt_password_create;
function prompt_password_input() {
    return __awaiter(this, void 0, void 0, function () {
        var tag, questions, response, e_6;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | prompt_fio_enable | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    questions = [
                        {
                            type: "password",
                            name: "password",
                            message: "password",
                            default: ""
                        }
                    ];
                    return [4 /*yield*/, inquirer.prompt(questions)];
                case 2:
                    response = _a.sent();
                    return [2 /*return*/, response.password];
                case 3:
                    e_6 = _a.sent();
                    log.error(e_6);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.prompt_password_input = prompt_password_input;
