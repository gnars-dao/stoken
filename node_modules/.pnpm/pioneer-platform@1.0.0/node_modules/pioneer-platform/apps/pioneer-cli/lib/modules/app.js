"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onRun = exports.loadModule = exports.onStart = void 0;
/*
    Primary App functions

    App cycle

            -Highlander

 */
var TAG = " | App | ";
var log = require("loggerdog-client")();
var App = require("@pioneer-platform/pioneer-app");
var Hardware = require("@pioneer-platform/pioneer-hardware");
var generator = require('generate-password');
var describe = require("describe-export");
var CryptoJS = require("crypto-js");
var bip39 = require("bip39");
var open = require("open");
var vorpal = require("vorpal")();
var bcrypt = require("bcryptjs");
var prettyjson = require('prettyjson');
var wait = require('wait-promise');
var sleep = wait.sleep;
var inquiries_1 = require("./inquiries");
var urlSpec = process.env['URL_PIONEER_SPEC'] || 'http://127.0.0.1:9001/spec/swagger.json';
var FIO_ACCEPT = false;
var FIO_REJECT = false;
var PASSWORDLESS_ENABLE = false;
//global
var KEEPKEY;
var help = {
    info: "",
};
function standardRandomBytesFunc(size) {
    /* istanbul ignore if: not testable on node */
    return CryptoJS.lib.WordArray.random(size).toString();
}
var apps = [
    {
        service: "AsgardDex (WEB)",
        url: "https://swaps.pro",
    }
];
function onStart() {
    return __awaiter(this, void 0, void 0, function () {
        var tag, info, keepkeyStatus, config, accepted, accepted, password, passwords, responses, hash, passwordInput, isValid, wallets, username, randomChars, type, randomBytesFunc, randomBytes, mnemonic, wallet, resultCreate, seed, wallet, resultCreate, pubkeysKeepkey, resultPair, keepkeyStatus2, isTestnet, resultInit, fioPubkey, usernames, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | onStart | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 50, , 51]);
                    return [4 /*yield*/, Hardware.start()
                        //if hardware connected
                    ];
                case 2:
                    //start keepkey
                    KEEPKEY = _a.sent();
                    return [4 /*yield*/, Hardware.info()];
                case 3:
                    info = _a.sent();
                    info.type = 'keepkey';
                    log.info(tag, "keepkey: info: ", info);
                    return [4 /*yield*/, App.hardwareState()];
                case 4:
                    keepkeyStatus = _a.sent();
                    log.info("keepkeyStatus: ", keepkeyStatus);
                    return [4 /*yield*/, App.getConfig()];
                case 5:
                    config = _a.sent();
                    log.debug(tag, "config: ", config);
                    if (!!config) return [3 /*break*/, 9];
                    //TODO prompt language?
                    //make config
                    return [4 /*yield*/, App.initConfig("english")];
                case 6:
                    //TODO prompt language?
                    //make config
                    _a.sent();
                    return [4 /*yield*/, App.updateConfig({ created: new Date().getTime() })];
                case 7:
                    _a.sent();
                    return [4 /*yield*/, App.getConfig()];
                case 8:
                    config = _a.sent();
                    _a.label = 9;
                case 9:
                    if (!(keepkeyStatus.state > 3)) return [3 /*break*/, 46];
                    if (!(config && !config.promptedFio)) return [3 /*break*/, 13];
                    if (!(!FIO_ACCEPT && !FIO_REJECT)) return [3 /*break*/, 11];
                    return [4 /*yield*/, inquiries_1.prompt_fio_enable()
                        // @ts-ignore
                    ];
                case 10:
                    accepted = _a.sent();
                    // @ts-ignore
                    if (accepted) {
                        App.updateConfig({ FIO_ACCEPT: true });
                        App.updateConfig({ promptedFio: true });
                        FIO_ACCEPT = true;
                    }
                    else {
                        App.updateConfig({ FIO_REJECT: true });
                        App.updateConfig({ promptedFio: true });
                        FIO_REJECT = true;
                    }
                    _a.label = 11;
                case 11: return [4 /*yield*/, App.getConfig()];
                case 12:
                    config = _a.sent();
                    _a.label = 13;
                case 13:
                    if (!(config && !config.promptedPasswordless)) return [3 /*break*/, 16];
                    return [4 /*yield*/, inquiries_1.prompt_password_enable()];
                case 14:
                    accepted = _a.sent();
                    App.updateConfig({ promptedPasswordless: true });
                    // @ts-ignore
                    if (!accepted) {
                        PASSWORDLESS_ENABLE = true;
                    }
                    return [4 /*yield*/, App.getConfig()];
                case 15:
                    config = _a.sent();
                    _a.label = 16;
                case 16:
                    if (config && config.temp) {
                        PASSWORDLESS_ENABLE = true;
                    }
                    password = void 0;
                    if (!(PASSWORDLESS_ENABLE && !config.temp && !config.passwordHash)) return [3 /*break*/, 18];
                    passwords = generator.generateMultiple(1, {
                        length: 10,
                        uppercase: false
                    });
                    password = passwords[0];
                    App.updateConfig({ temp: password });
                    return [4 /*yield*/, App.getConfig()];
                case 17:
                    config = _a.sent();
                    return [3 /*break*/, 28];
                case 18:
                    if (!(!PASSWORDLESS_ENABLE && !config.passwordHash)) return [3 /*break*/, 23];
                    return [4 /*yield*/, inquiries_1.prompt_password_create()];
                case 19:
                    responses = _a.sent();
                    log.debug(tag, "create password: ", responses);
                    if (!(responses.password !== responses.password2)) return [3 /*break*/, 21];
                    log.info("Invalid input! password dont match!");
                    return [4 /*yield*/, onStart()];
                case 20:
                    _a.sent();
                    return [2 /*return*/];
                case 21:
                    hash = bcrypt.hashSync(responses.password, 10);
                    return [4 /*yield*/, App.updateConfig({ passwordHash: hash })];
                case 22:
                    _a.sent();
                    //hash and create
                    //if reject
                    //try again
                    password = responses.password;
                    return [3 /*break*/, 28];
                case 23:
                    if (!config.temp) return [3 /*break*/, 24];
                    password = config.temp;
                    return [3 /*break*/, 28];
                case 24:
                    if (!config.passwordHash) return [3 /*break*/, 28];
                    return [4 /*yield*/, inquiries_1.prompt_password_input()];
                case 25:
                    passwordInput = _a.sent();
                    log.debug(tag, "passwordInput: ", passwordInput);
                    isValid = bcrypt.compareSync(passwordInput, config.passwordHash);
                    if (!!isValid) return [3 /*break*/, 27];
                    log.info("Invalid password!");
                    return [4 /*yield*/, onStart()];
                case 26:
                    _a.sent();
                    return [2 /*return*/];
                case 27:
                    password = passwordInput;
                    _a.label = 28;
                case 28: return [4 /*yield*/, App.getWalletNames()];
                case 29:
                    wallets = _a.sent();
                    log.debug(tag, "wallets: ", wallets);
                    username = void 0;
                    if (config && !config.username) {
                        randomChars = generator.generateMultiple(1, {
                            length: 10,
                            uppercase: false
                        });
                        username = "temp:" + randomChars[0];
                        config.username = username;
                    }
                    if (!(wallets.length > 0)) return [3 /*break*/, 30];
                    //wallet found
                    log.debug(tag, "Wallets found! ", wallets);
                    return [3 /*break*/, 40];
                case 30: return [4 /*yield*/, inquiries_1.prompt_create_wallet()];
                case 31:
                    type = _a.sent();
                    log.debug(tag, "type: ", type);
                    if (!(type === "create a new wallet")) return [3 /*break*/, 33];
                    log.debug(tag, "create new wallet!");
                    randomBytesFunc = standardRandomBytesFunc;
                    randomBytes = Buffer.from(randomBytesFunc(32), "hex");
                    if (randomBytes.length !== 32)
                        throw Error("Entropy has incorrect length");
                    mnemonic = bip39.entropyToMnemonic(randomBytes.toString("hex"));
                    wallet = {
                        mnemonic: mnemonic,
                        username: config.username,
                        password: password
                    };
                    if (config.temp)
                        wallet.temp = config.temp;
                    //create wallet files
                    log.debug("1 creating wallet: ", wallet);
                    return [4 /*yield*/, App.createWallet('software', wallet)];
                case 32:
                    resultCreate = _a.sent();
                    log.debug("result creating wallet: ", resultCreate);
                    return [3 /*break*/, 40];
                case 33:
                    if (!(type === "restore from seed")) return [3 /*break*/, 36];
                    return [4 /*yield*/, inquiries_1.prompt_seed_input()
                        //TODO validate seed
                        //if invalid, ask for again
                        //create
                    ];
                case 34:
                    seed = _a.sent();
                    wallet = {
                        mnemonic: seed,
                        username: config.username,
                        password: password
                    };
                    if (config.temp)
                        wallet.temp = config.temp;
                    //create wallet files
                    log.debug("2 creating wallet: ", wallet);
                    return [4 /*yield*/, App.createWallet('software', wallet)];
                case 35:
                    resultCreate = _a.sent();
                    log.debug("result creating wallet: ", resultCreate);
                    return [3 /*break*/, 40];
                case 36:
                    if (!(type === "pair hardware wallet")) return [3 /*break*/, 40];
                    log.info("pair hardware wallet!");
                    if (!info.features) return [3 /*break*/, 39];
                    return [4 /*yield*/, Hardware.getPubkeys()
                        //
                    ];
                case 37:
                    pubkeysKeepkey = _a.sent();
                    return [4 /*yield*/, App.pairKeepkey(info.features.deviceId, pubkeysKeepkey)];
                case 38:
                    resultPair = _a.sent();
                    log.info("resultPair: ", resultPair);
                    return [3 /*break*/, 40];
                case 39:
                    //try to reconnect
                    log.error(tag, "Device Connected to other host!");
                    _a.label = 40;
                case 40:
                    //start app
                    log.debug("pre-init CONFIG: ", config);
                    if (password)
                        config.password = password;
                    if (!config.temp && !config.password)
                        throw Error("102: password required for startup! ");
                    //hardware
                    config.hardware = true;
                    return [4 /*yield*/, App.hardwareState()];
                case 41:
                    keepkeyStatus2 = _a.sent();
                    log.info(tag, "keepkeyStatus2: ", keepkeyStatus2);
                    isTestnet = true;
                    return [4 /*yield*/, App.init(config, isTestnet)];
                case 42:
                    resultInit = _a.sent();
                    log.debug("resultInit: ", resultInit);
                    if (!(config.FIO_ACCEPT && config.username.indexOf("temp:") >= 0)) return [3 /*break*/, 45];
                    return [4 /*yield*/, App.getFioPubkey()];
                case 43:
                    fioPubkey = _a.sent();
                    log.debug(tag, "fioPubkey: ", fioPubkey);
                    return [4 /*yield*/, App.getFioAccountsByPubkey(fioPubkey)];
                case 44:
                    usernames = _a.sent();
                    if (usernames.length === 0) {
                        //open fio signup
                        open("https://reg.fioprotocol.io/ref/shapeshift?publicKey=" + fioPubkey);
                    }
                    else {
                        username = usernames.fio_addresses[0].fio_address;
                        if (!username)
                            throw Error("failed to find fio username!");
                        App.updateConfig({ username: username });
                    }
                    _a.label = 45;
                case 45: return [2 /*return*/, resultInit];
                case 46:
                    if (!(keepkeyStatus.state === 2)) return [3 /*break*/, 47];
                    //prompt pin
                    console.log("Device Locked!");
                    Hardware.displayPin();
                    //TODO unlock pin
                    onStart();
                    return [3 /*break*/, 49];
                case 47: return [4 /*yield*/, sleep(2000)];
                case 48:
                    _a.sent();
                    onStart();
                    _a.label = 49;
                case 49: return [3 /*break*/, 51];
                case 50:
                    e_1 = _a.sent();
                    console.error(tag, "e: ", e_1);
                    return [2 /*return*/, {}];
                case 51: return [2 /*return*/];
            }
        });
    });
}
exports.onStart = onStart;
/*
    Load a module into vorpal
        Module Export Spec:
            TODO
 */
function loadModule(moduleView, module) {
    return __awaiter(this, void 0, void 0, function () {
        var tag, map_1;
        return __generator(this, function (_a) {
            tag = TAG + " | loadModule | ";
            try {
                log.info(tag, "module: ", module);
                map_1 = describe.map(moduleView);
                log.info(tag, "map: ", map_1);
                Object.keys(map_1).forEach(function (key) {
                    var tag = TAG + " | " + key + " | ";
                    var debug = false;
                    log.debug(tag, "key: ", key);
                    var expectedParams = map_1[key];
                    log.debug(tag, "expectedParams: ", expectedParams);
                    var helpString;
                    if (help[key])
                        helpString = help[key];
                    if (!helpString) {
                        if (expectedParams.length > 1)
                            helpString = " params: " + expectedParams;
                    }
                    vorpal.command(key, helpString)
                        .action(function (args, cb) {
                        var _this = this;
                        var params = [];
                        if (expectedParams.length > 0) {
                            for (var i = 0; i < expectedParams.length; i++) {
                                var param = {
                                    type: "input",
                                    name: expectedParams[i],
                                    message: "input " + expectedParams[i] + ": ",
                                };
                                params.push(param);
                            }
                        }
                        // @ts-ignore
                        var promise = this.prompt(params, function (answers) {
                            // You can use callbacks...
                        });
                        promise.then(function (answers) { return __awaiter(_this, void 0, void 0, function () {
                            var parameters, result, e_2;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        log.debug(tag, "answers: ", answers);
                                        parameters = [];
                                        Object.keys(answers).forEach(function (answer) {
                                            parameters.push(answers[answer]);
                                        });
                                        log.debug(tag, "parameters: ", parameters);
                                        _a.label = 1;
                                    case 1:
                                        _a.trys.push([1, 3, , 4]);
                                        log.debug("key: ", key);
                                        log.debug("parameters: ", parameters);
                                        return [4 /*yield*/, module[key](parameters)];
                                    case 2:
                                        result = _a.sent();
                                        log.info("result: ", prettyjson.render(result));
                                        cb();
                                        return [3 /*break*/, 4];
                                    case 3:
                                        e_2 = _a.sent();
                                        console.error(tag, "e: ", e_2);
                                        return [3 /*break*/, 4];
                                    case 4: return [2 /*return*/];
                                }
                            });
                        }); });
                    });
                });
                return [2 /*return*/, true];
            }
            catch (e) {
                console.error(tag, "e: ", e);
                return [2 /*return*/, {}];
            }
            return [2 /*return*/];
        });
    });
}
exports.loadModule = loadModule;
/*
    Run Interactive terminal
 */
function onRun() {
    return __awaiter(this, void 0, void 0, function () {
        var tag, wallets, context, contextView, allKeys, i, key, map, appView, appFunctions, i, key, prompt_1, help_1, e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | onRun | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 6, , 7]);
                    return [4 /*yield*/, App.getWallets()];
                case 2:
                    wallets = _a.sent();
                    log.debug("wallets: ", wallets);
                    context = wallets[0];
                    contextView = {};
                    log.debug("contextView: ", contextView);
                    allKeys = Object.keys(context);
                    for (i = 0; i < allKeys.length; i++) {
                        key = allKeys[i];
                        if (typeof (context[key]) === 'function') {
                            contextView[key] = context[key];
                        }
                    }
                    log.debug("context: ", context);
                    map = describe.map(contextView);
                    App.openApp = function (url) {
                        open("https://swaps.pro");
                    };
                    appView = {};
                    appFunctions = Object.keys(App);
                    for (i = 0; i < appFunctions.length; i++) {
                        key = appFunctions[i];
                        if (typeof (App[key]) === 'function') {
                            appView[key] = App[key];
                        }
                    }
                    log.info("appView: ", appView);
                    prompt_1 = "client: ";
                    help_1 = {
                        info: "",
                    };
                    // let openApp = function(url:string){
                    //     open("https://swaps.pro")
                    // }
                    //
                    // let mockModule = {
                    //     openApp:openApp('https://swaps.pro')
                    // }
                    //               view        controller
                    return [4 /*yield*/, loadModule(contextView, context)];
                case 3:
                    // let openApp = function(url:string){
                    //     open("https://swaps.pro")
                    // }
                    //
                    // let mockModule = {
                    //     openApp:openApp('https://swaps.pro')
                    // }
                    //               view        controller
                    _a.sent();
                    return [4 /*yield*/, loadModule(Hardware, Hardware)];
                case 4:
                    _a.sent();
                    return [4 /*yield*/, loadModule(appView, App)
                        // await loadModule(mockModule,mockModule)
                    ];
                case 5:
                    _a.sent();
                    // await loadModule(mockModule,mockModule)
                    vorpal
                        .delimiter(prompt_1)
                        //.action(app.tick())
                        .show();
                    return [3 /*break*/, 7];
                case 6:
                    e_3 = _a.sent();
                    console.error(tag, "e: ", e_3);
                    return [2 /*return*/, {}];
                case 7: return [2 /*return*/];
            }
        });
    });
}
exports.onRun = onRun;
// //TODO
// export function onSetup() {
//     let tag = TAG + " | onSetup | ";
//     try {
//
//     } catch (e) {
//         console.error(tag, "e: ", e);
//         return {};
//     }
// }
//
//
// //TODO
// export function onRestore() {
//     let tag = TAG + " | onRun | ";
//     try {
//
//     } catch (e) {
//         console.error(tag, "e: ", e);
//         return {};
//     }
// }
