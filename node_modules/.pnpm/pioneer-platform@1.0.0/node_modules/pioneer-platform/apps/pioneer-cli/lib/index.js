#!/usr/bin/env node
"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/*
        Pioneer CLI
            -Highlander

    Exploring New Worlds!

 */
require("dotenv").config();
require("dotenv").config({ path: "./../.env" });
require("dotenv").config({ path: "../../.env" });
require("dotenv").config({ path: "../../../.env" });
require("dotenv").config({ path: "../../../.env" });
require("dotenv").config({ path: "../../../../.env" });
var TAG = " | App | ";
//cli tools
var inquirer = require("inquirer");
//primary app
var views_1 = require("./modules/views");
var app_1 = require("./modules/app");
//platform
// let platform = require("@pioneer-platform/platform");
//pioneer api
// let server = require("@pioneer-platform/pioneer-rest-ts")
// server.start()
//Subcommand patch
var program = require('./modules/commander-patch');
var log = require("loggerdog-client")();
// must be before .parse()
program.on('--help', function () {
    views_1.showWelcome();
});
/*
    Pioneer Server
        (docs)
 */
//TODO flag run on port
// const projectCommand = program
//     .command( 'server start' )
//     .description( 'Start The Pioneer Server' )
//     .action( () => {
//         server.start()
//     } );
//
// projectCommand
//     .command( 'start' )
//     .action( () => {
//         server.start()
//     } );
//TODO stop server
//TODO kill on exit
/*
    Platform Users
        List users
        ping user
        send request
        view requests
 */
var userCommand = program
    .command('user')
    .description('Create a Pioneer Application')
    .forwardSubcommands();
userCommand
    .command('list')
    .action(function () {
});
userCommand
    .command('request')
    .action(function () {
});
/*
    Platform APPs
        App ecosystem
        Create
        Publish
        Revoke
 */
// const appCommand = program
//     .command( 'app' )
//     .description( 'Create a Pioneer Application' )
//     .forwardSubcommands();
//
// appCommand
//     .command( 'create' )
//     .action( () => {
//         let tag = " | app | "
//
//         const questions = [
//             {
//                 type: "input",
//                 name: "appname",
//                 message: "select an application name",
//                 default: "sample app",
//             },
//             //wallets
//         ];
//
//         inquirer.prompt(questions).then(async function (answers: any) {
//             //check if name available
//             log.info(tag,"answers: ",answers)
//             //generate template to file
//             platform.create(answers.appname)
//             //create app remote
//
//         });
//     } );
// appCommand
//     .command( 'ls' )
//     .action( () => {
//         //list all apps
//     } );
//
// appCommand
//     .command( 'publish' )
//     .action( () => {
//         let tag = " | app | "
//         //push to app store
//     } );
/*
    onStart
        If no commands, assume --it
 */
log.info("args", process.argv);
var onInteractiveTerminal = function () {
    return __awaiter(this, void 0, void 0, function () {
        var tag, successStart, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | onInteractiveTerminal | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    log.info("Starting Interactive Terminal");
                    //start it mode
                    views_1.showWelcome();
                    return [4 /*yield*/, app_1.onStart()];
                case 2:
                    successStart = _a.sent();
                    log.debug(tag, "successStart: ", successStart);
                    //display dashboard
                    //onRun
                    app_1.onRun();
                    return [3 /*break*/, 4];
                case 3:
                    e_1 = _a.sent();
                    log.error("Terminal Exit: ", e_1);
                    process.exit(2);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
};
if (process.argv.length === 2) {
    onInteractiveTerminal();
}
else {
    program.parse(process.argv);
}
