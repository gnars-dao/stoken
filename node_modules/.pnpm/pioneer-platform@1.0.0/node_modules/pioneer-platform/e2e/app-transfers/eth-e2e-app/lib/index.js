"use strict";
/*
    E2E testing
        k8  "job" pattern

    load test seed

    verify empty

    request deposit from faucet

    watch till confirmed

    send back to faucet

    report

 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
require("dotenv").config();
require('dotenv').config({ path: "../../.env" });
require("dotenv").config({ path: '../../../.env' });
var TAG = " | e2e-test | ";
var log = require("@pioneer-platform/loggerdog")();
var urlSpec = 'https://pioneers.dev/spec/swagger.json';
//test app
var App = require("@pioneer-platform/pioneer-app");
//params
var seed = process.env['TEST_SEED'];
var password = process.env['WALLET_PASSWORD'];
var username = "eth-e2e-app";
var TEST_AMOUNT = 0.001; //TODO 1usd value?
var TEST_ASSET = "ETH";
var test_service = function () {
    return __awaiter(this, void 0, void 0, function () {
        var tag, config, pioneer, wallets, context, fioPublicInfo, intent, txid, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | test_service | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 7, , 8]);
                    return [4 /*yield*/, App.getConfig()];
                case 2:
                    config = _a.sent();
                    config.password = password;
                    config.username = username;
                    //if no config
                    if (!config) {
                        //init config
                        throw Error("Must setup!");
                    }
                    console.log("config: ", config);
                    return [4 /*yield*/, App.init(config)];
                case 3:
                    pioneer = _a.sent();
                    console.log("pioneer: ", pioneer.TOTAL_VALUE_USD_LOADED);
                    //subscribe to events
                    pioneer.events.on('message', function (request) {
                        console.log("message: ", request);
                    });
                    return [4 /*yield*/, App.getWallets()
                        // console.log("wallets: ",wallets)
                    ];
                case 4:
                    wallets = _a.sent();
                    context = wallets[0];
                    return [4 /*yield*/, context.getFioAccountInfo("highlander@scatter")];
                case 5:
                    fioPublicInfo = _a.sent();
                    console.log("fioPublicInfo: ", fioPublicInfo);
                    if (!fioPublicInfo.ETH)
                        throw Error("Invalid test wallet user! ETH required!");
                    intent = {
                        coin: TEST_ASSET,
                        address: fioPublicInfo.ETH,
                        amount: TEST_AMOUNT
                    };
                    return [4 /*yield*/, context.sendToAddress(intent.coin, intent.address, intent.amount)];
                case 6:
                    txid = _a.sent();
                    console.log("txid: ", txid);
                    return [3 /*break*/, 8];
                case 7:
                    e_1 = _a.sent();
                    log.error(e_1);
                    throw e_1;
                case 8: return [2 /*return*/];
            }
        });
    });
};
test_service();
