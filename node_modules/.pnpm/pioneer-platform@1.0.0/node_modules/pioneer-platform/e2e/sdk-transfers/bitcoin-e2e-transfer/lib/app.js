"use strict";
/*
   *** E2E TEST ***
        App Module


    Init from env vars
    * verify empty env at start
    * verify creation

 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendPairingCode = exports.startApp = void 0;
require("dotenv").config({ path: './../../.env' });
require("dotenv").config({ path: '../../../.env' });
require("dotenv").config({ path: '../../../../.env' });
var assert = require('assert');
//test app
var App = require("@pioneer-platform/pioneer-app");
var log = require("@pioneer-platform/loggerdog")();
var ethCrypto = require("@pioneer-platform/eth-crypto");
//general dev envs
var seed = process.env['WALLET_MAINNET_DEV_OLD'];
var password = process.env['WALLET_PASSWORD'];
var username = process.env['TEST_USERNAME_2'];
var queryKey = process.env['TEST_QUERY_KEY_2'];
var spec = process.env['URL_PIONEER_SPEC'];
var wss = process.env['URL_PIONEER_SOCKET'];
function startApp() {
    return __awaiter(this, void 0, void 0, function () {
        var tag, config, wallet1, walletEth, successCreate, isTestnet, resultInit, wallets, context, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = " | app_assert_env_start | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 9, , 10]);
                    //assert env correct
                    assert(seed);
                    assert(password);
                    assert(username);
                    assert(queryKey);
                    return [4 /*yield*/, App.getConfig()];
                case 2:
                    config = _a.sent();
                    assert(config === null);
                    wallet1 = {
                        isTestnet: true,
                        mnemonic: seed,
                        username: username,
                        password: password
                    };
                    return [4 /*yield*/, ethCrypto.generateWalletFromSeed(wallet1.mnemonic)];
                case 3:
                    walletEth = _a.sent();
                    wallet1.masterAddress = walletEth.masterAddress;
                    return [4 /*yield*/, App.createWallet('software', wallet1)
                        //TODO fixme
                        //assert(successCreate)
                    ];
                case 4:
                    successCreate = _a.sent();
                    //TODO fixme
                    //assert(successCreate)
                    return [4 /*yield*/, App.initConfig("english")];
                case 5:
                    //TODO fixme
                    //assert(successCreate)
                    _a.sent();
                    App.updateConfig({ isTestnet: true });
                    App.updateConfig({ username: username });
                    App.updateConfig({ temp: password });
                    App.updateConfig({ created: new Date().getTime() });
                    return [4 /*yield*/, App.getConfig()];
                case 6:
                    //get config
                    config = _a.sent();
                    config.spec = spec;
                    config.pioneerSocket = wss;
                    isTestnet = true;
                    return [4 /*yield*/, App.init(config, isTestnet)];
                case 7:
                    resultInit = _a.sent();
                    config.password = password;
                    config.username = username;
                    return [4 /*yield*/, App.getWallets()
                        //assert only 1
                    ];
                case 8:
                    wallets = _a.sent();
                    context = wallets[0];
                    return [2 /*return*/, context];
                case 9:
                    e_1 = _a.sent();
                    log.error(e_1);
                    throw e_1;
                case 10: return [2 /*return*/];
            }
        });
    });
}
exports.startApp = startApp;
function sendPairingCode(code) {
    return __awaiter(this, void 0, void 0, function () {
        var tag, pairResult, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = " | sendPairingCode | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, App.pair(code)];
                case 2:
                    pairResult = _a.sent();
                    console.log("pairResult: ", pairResult);
                    return [2 /*return*/, true];
                case 3:
                    e_2 = _a.sent();
                    log.error(e_2);
                    throw e_2;
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.sendPairingCode = sendPairingCode;
