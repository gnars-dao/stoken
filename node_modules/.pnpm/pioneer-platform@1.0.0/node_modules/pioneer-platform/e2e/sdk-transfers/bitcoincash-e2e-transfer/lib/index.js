"use strict";
/*
    E2E testing
        k8  "job" pattern

    load test seed

    verify empty

    request deposit from faucet

    watch till confirmed

    send back to faucet

    report



    SDK Arch pattern ***


        Start and configure app

        verify socket connection


    Use sdk to

        * check balances
        * check tx history
        * request faucet addresses
        * send x into faucet
        * request withdrawalf rom faucet
        * verify payment

 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("dotenv").config();
require('dotenv').config({ path: "../../.env" });
require("dotenv").config({ path: '../../../.env' });
var TAG = " | e2e-test | ";
var log = require("@pioneer-platform/loggerdog")();
var assert = require('assert');
var uuid_1 = require("uuid");
var SDK = require('@pioneer-platform/pioneer-sdk');
var wait = require('wait-promise');
var sleep = wait.sleep;
var _a = require('./app'), startApp = _a.startApp, sendPairingCode = _a.sendPairingCode;
var BLOCKCHAIN = 'bitcoinCash';
var ASSET = 'BCH';
var MIN_BALANCE = process.env['MIN_BALANCE_BTC'] || 0.00002;
var TEST_AMOUNT = process.env['TEST_AMOUNT'] || 0.00001;
var spec = process.env['URL_PIONEER_SPEC'];
var NO_BROADCAST = process.env['E2E_BROADCAST'] || true;
var wss = process.env['URL_PIONEER_SOCKET'];
var test_service = function () {
    return __awaiter(this, void 0, void 0, function () {
        var tag, wallet, username, balance, _a, _b, _c, _d, queryKey, config, app, events, eventPairReceived_1, seedChains, code, pairSuccess, user, blockchains, feeEstimate, address, sendPayload, txid, e_1;
        var _this = this;
        return __generator(this, function (_e) {
            switch (_e.label) {
                case 0:
                    tag = TAG + " | test_service | ";
                    _e.label = 1;
                case 1:
                    _e.trys.push([1, 16, , 17]);
                    return [4 /*yield*/, startApp()];
                case 2:
                    wallet = _e.sent();
                    username = wallet.username;
                    //assert balance local
                    //log.info(tag,"wallet: ",wallet)
                    log.info(tag, "wallet: ", wallet.WALLET_BALANCES);
                    balance = wallet.WALLET_BALANCES[ASSET];
                    assert(balance);
                    if (!(wallet.WALLET_BALANCES[ASSET] < MIN_BALANCE)) return [3 /*break*/, 4];
                    _b = (_a = log).info;
                    _c = [tag];
                    _d = " Test wallet low! amount: " + wallet.WALLET_BALANCES[ASSET] + " target: " + MIN_BALANCE + " Send moneies to " + ASSET + ": ";
                    return [4 /*yield*/, wallet.getMaster(ASSET)];
                case 3:
                    _b.apply(_a, _c.concat([_d + (_e.sent())]));
                    throw Error("101: Low funds!");
                case 4:
                    log.info(tag, " Attempting e2e test " + ASSET + " balance: ", balance);
                    _e.label = 5;
                case 5:
                    queryKey = uuid_1.v4();
                    assert(queryKey);
                    config = {
                        queryKey: queryKey,
                        username: username,
                        spec: spec,
                        wss: wss
                    };
                    app = new SDK.SDK(spec, config);
                    return [4 /*yield*/, app.startSocket()];
                case 6:
                    events = _e.sent();
                    eventPairReceived_1 = false;
                    events.on('message', function (request) { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            assert(request.queryKey);
                            assert(request.username);
                            assert(request.url);
                            eventPairReceived_1 = true;
                            return [2 /*return*/];
                        });
                    }); });
                    seedChains = ['bitcoincash'];
                    return [4 /*yield*/, app.init(seedChains)
                        //pair sdk
                    ];
                case 7:
                    _e.sent();
                    return [4 /*yield*/, app.createPairingCode()];
                case 8:
                    code = _e.sent();
                    code = code.code;
                    log.info("code: ", code);
                    assert(code);
                    return [4 /*yield*/, sendPairingCode(code)];
                case 9:
                    pairSuccess = _e.sent();
                    log.info("pairSuccess: ", pairSuccess);
                    assert(pairSuccess);
                    _e.label = 10;
                case 10:
                    if (!!eventPairReceived_1) return [3 /*break*/, 12];
                    return [4 /*yield*/, sleep(300)];
                case 11:
                    _e.sent();
                    return [3 /*break*/, 10];
                case 12: return [4 /*yield*/, app.getUserParams()];
                case 13:
                    user = _e.sent();
                    log.info("user: ", user);
                    blockchains = Object.keys(user.clients);
                    log.info("blockchains: ", blockchains);
                    return [4 /*yield*/, user.clients.bitcoinCash.getFeesWithMemo()];
                case 14:
                    feeEstimate = _e.sent();
                    log.info(tag, "feeEstimate: ", feeEstimate);
                    log.info(tag, "feeEstimate: fast:", feeEstimate.fast.amount().toString());
                    log.info(tag, "feeEstimate: average: ", feeEstimate.average.amount().toString());
                    log.info(tag, "feeEstimate: fastest: ", feeEstimate.fastest.amount().toString());
                    assert(feeEstimate);
                    assert(feeEstimate.type);
                    assert(feeEstimate.fast);
                    assert(feeEstimate.average);
                    assert(feeEstimate.fastest);
                    address = "1Dmjt2DWjNpVWRPXRNuhwfDnSqPmfxGLLG";
                    sendPayload = {
                        blockchain: BLOCKCHAIN,
                        asset: 'BCH',
                        amount: TEST_AMOUNT,
                        address: address,
                    };
                    sendPayload.noBroadcast = true;
                    log.info(tag, "sendPayload: ", sendPayload);
                    return [4 /*yield*/, app.sendToAddress(sendPayload)];
                case 15:
                    txid = _e.sent();
                    console.log("txid: ", txid);
                    //process
                    process.exit(0);
                    return [3 /*break*/, 17];
                case 16:
                    e_1 = _e.sent();
                    log.error(e_1);
                    //process
                    process.exit(666);
                    return [3 /*break*/, 17];
                case 17: return [2 /*return*/];
            }
        });
    });
};
test_service();
