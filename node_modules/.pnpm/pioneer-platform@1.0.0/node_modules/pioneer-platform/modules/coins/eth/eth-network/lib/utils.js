"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.erc20ABI = exports.filterSelfTxs = exports.getPrefix = exports.getDefaultGasPrices = exports.getDefaultFees = exports.estimateDefaultFeesWithGasPricesAndLimits = exports.getFee = exports.getTxFromEthTransaction = exports.getTxFromTokenTransaction = exports.validateSymbol = exports.getTokenAddress = exports.validateAddress = exports.ethNetworkToXchains = exports.xchainNetworkToEths = exports.MAX_APPROVAL = exports.ETHAddress = exports.DEFAULT_GAS_PRICE = exports.BASE_TOKEN_GAS_COST = exports.SIMPLE_GAS_COST = exports.ETHPLORER_FREEKEY = exports.ETH_DECIMAL = void 0;
var xchain_util_1 = require("@xchainjs/xchain-util");
var types_1 = require("./types");
var ethers_1 = require("ethers");
var utils_1 = require("ethers/lib/utils");
exports.ETH_DECIMAL = 18;
exports.ETHPLORER_FREEKEY = 'freekey';
// from https://github.com/MetaMask/metamask-extension/blob/ee205b893fe61dc4736efc576e0663189a9d23da/ui/app/pages/send/send.constants.js#L39
// and based on recommendations of https://ethgasstation.info/blog/gas-limit/
exports.SIMPLE_GAS_COST = ethers_1.BigNumber.from(21000);
exports.BASE_TOKEN_GAS_COST = ethers_1.BigNumber.from(100000);
// default gas price in gwei
exports.DEFAULT_GAS_PRICE = 50;
exports.ETHAddress = '0x0000000000000000000000000000000000000000';
exports.MAX_APPROVAL = ethers_1.BigNumber.from(2).pow(256).sub(1);
/**
 * XChainNetwork -> EthNetwork
 *
 * @param {XChainNetwork} network
 * @returns {EthNetwork}
 */
exports.xchainNetworkToEths = function (network) {
    switch (network) {
        // DO NOT use switch/case's default branch
        // to be sure that ALL possible cases are
        // processed in a similar way to reverted ethNetworkToXchains
        case 'mainnet':
            return types_1.Network.MAIN;
        case 'testnet':
            return types_1.Network.TEST;
    }
};
/**
 * EthNetwork -> XChainNetwork
 *
 * @param {EthNetwork} network
 * @returns {XChainNetwork}
 */
exports.ethNetworkToXchains = function (network) {
    switch (network) {
        // DO NOT use switch/case's default branch
        // to be sure that ALL possible cases are
        // processed in a similar way to reverted xchainNetworkToEths
        case types_1.Network.MAIN:
            return 'mainnet';
        case types_1.Network.TEST:
            return 'testnet';
    }
};
/**
 * Validate the given address.
 *
 * @param {Address} address
 * @returns {boolean} `true` or `false`
 */
exports.validateAddress = function (address) {
    try {
        ethers_1.ethers.utils.getAddress(address);
        return true;
    }
    catch (error) {
        return false;
    }
};
/**
 * Get token address from asset.
 *
 * @param {Asset} asset
 * @returns {string|null} The token address.
 */
exports.getTokenAddress = function (asset) {
    try {
        // strip 0X only - 0x is still valid
        return ethers_1.ethers.utils.getAddress(asset.symbol.slice(asset.ticker.length + 1).replace(/^0X/, ''));
    }
    catch (err) {
        return null;
    }
};
/**
 * Check if the symbol is valid.
 *
 * @param {string|null|undefined} symbol
 * @returns {boolean} `true` or `false`.
 */
exports.validateSymbol = function (symbol) { return (symbol ? symbol.length >= 3 : false); };
/**
 * Get transactions from token tx
 *
 * @param {TokenTransactionInfo} tx
 * @returns {Tx|null} The parsed transaction.
 */
exports.getTxFromTokenTransaction = function (tx) {
    var decimals = parseInt(tx.tokenDecimal) || exports.ETH_DECIMAL;
    var symbol = tx.tokenSymbol;
    var address = tx.contractAddress;
    if (exports.validateSymbol(symbol) && exports.validateAddress(address)) {
        var tokenAsset = xchain_util_1.assetFromString(xchain_util_1.ETHChain + "." + symbol + "-" + address);
        if (tokenAsset) {
            return {
                asset: tokenAsset,
                from: [
                    {
                        from: tx.from,
                        amount: xchain_util_1.baseAmount(tx.value, decimals),
                    },
                ],
                to: [
                    {
                        to: tx.to,
                        amount: xchain_util_1.baseAmount(tx.value, decimals),
                    },
                ],
                date: new Date(parseInt(tx.timeStamp) * 1000),
                type: 'transfer',
                hash: tx.hash,
            };
        }
    }
    return null;
};
/**
 * Get transactions from ETH transaction
 *
 * @param {ETHTransactionInfo} tx
 * @returns {Tx} The parsed transaction.
 */
exports.getTxFromEthTransaction = function (tx) {
    return {
        asset: xchain_util_1.AssetETH,
        from: [
            {
                from: tx.from,
                amount: xchain_util_1.baseAmount(tx.value, exports.ETH_DECIMAL),
            },
        ],
        to: [
            {
                to: tx.to,
                amount: xchain_util_1.baseAmount(tx.value, exports.ETH_DECIMAL),
            },
        ],
        date: new Date(parseInt(tx.timeStamp) * 1000),
        type: 'transfer',
        hash: tx.hash,
    };
};
/**
 * Calculate fees by multiplying .
 *
 * @returns {Fees} The default gas price.
 */
exports.getFee = function (_a) {
    var gasPrice = _a.gasPrice, gasLimit = _a.gasLimit;
    return xchain_util_1.baseAmount(gasPrice.amount().multipliedBy(gasLimit.toString()), exports.ETH_DECIMAL);
};
exports.estimateDefaultFeesWithGasPricesAndLimits = function (asset) {
    var gasPrices = {
        average: xchain_util_1.baseAmount(utils_1.parseUnits(exports.DEFAULT_GAS_PRICE.toString(), 'gwei').toString(), exports.ETH_DECIMAL),
        fast: xchain_util_1.baseAmount(utils_1.parseUnits((exports.DEFAULT_GAS_PRICE * 2).toString(), 'gwei').toString(), exports.ETH_DECIMAL),
        fastest: xchain_util_1.baseAmount(utils_1.parseUnits((exports.DEFAULT_GAS_PRICE * 3).toString(), 'gwei').toString(), exports.ETH_DECIMAL),
    };
    var fastGP = gasPrices.fast, fastestGP = gasPrices.fastest, averageGP = gasPrices.average;
    var assetAddress;
    if (asset && xchain_util_1.assetToString(asset) !== xchain_util_1.assetToString(xchain_util_1.AssetETH)) {
        assetAddress = exports.getTokenAddress(asset);
    }
    var gasLimit;
    if (assetAddress && assetAddress !== exports.ETHAddress) {
        gasLimit = ethers_1.BigNumber.from(exports.BASE_TOKEN_GAS_COST);
    }
    else {
        gasLimit = ethers_1.BigNumber.from(exports.SIMPLE_GAS_COST);
    }
    return {
        gasPrices: gasPrices,
        gasLimit: gasLimit,
        fees: {
            type: 'byte',
            average: exports.getFee({ gasPrice: averageGP, gasLimit: gasLimit }),
            fast: exports.getFee({ gasPrice: fastGP, gasLimit: gasLimit }),
            fastest: exports.getFee({ gasPrice: fastestGP, gasLimit: gasLimit }),
        },
    };
};
/**
 * Get the default fees.
 *
 * @returns {Fees} The default gas price.
 */
exports.getDefaultFees = function (asset) {
    var fees = exports.estimateDefaultFeesWithGasPricesAndLimits(asset).fees;
    return fees;
};
/**
 * Get the default gas price.
 *
 * @returns {Fees} The default gas prices.
 */
exports.getDefaultGasPrices = function (asset) {
    var gasPrices = exports.estimateDefaultFeesWithGasPricesAndLimits(asset).gasPrices;
    return gasPrices;
};
/**
 * Get address prefix based on the network.
 *
 * @returns {string} The address prefix based on the network.
 *
 **/
exports.getPrefix = function () { return '0x'; };
/**
 * Filter self txs
 *
 * @returns {T[]}
 *
 **/
exports.filterSelfTxs = function (txs) {
    var filterTxs = txs.filter(function (tx) { return tx.from !== tx.to; });
    var selfTxs = txs.filter(function (tx) { return tx.from === tx.to; });
    var _loop_1 = function () {
        var selfTx = selfTxs[0];
        filterTxs.push(selfTx);
        selfTxs = selfTxs.filter(function (tx) { return tx.hash !== selfTx.hash; });
    };
    while (selfTxs.length) {
        _loop_1();
    }
    return filterTxs;
};
exports.erc20ABI = [
    {
        "inputs": [],
        "stateMutability": "nonpayable",
        "type": "constructor"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "owner",
                "type": "address"
            },
            {
                "indexed": true,
                "internalType": "address",
                "name": "spender",
                "type": "address"
            },
            {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
            }
        ],
        "name": "Approval",
        "type": "event"
    },
    {
        "anonymous": false,
        "inputs": [
            {
                "indexed": true,
                "internalType": "address",
                "name": "from",
                "type": "address"
            },
            {
                "indexed": true,
                "internalType": "address",
                "name": "to",
                "type": "address"
            },
            {
                "indexed": false,
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
            }
        ],
        "name": "Transfer",
        "type": "event"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            },
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "name": "allowance",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "spender",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
            }
        ],
        "name": "approve",
        "outputs": [
            {
                "internalType": "bool",
                "name": "success",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "",
                "type": "address"
            }
        ],
        "name": "balanceOf",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "decimals",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "name",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "symbol",
        "outputs": [
            {
                "internalType": "string",
                "name": "",
                "type": "string"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [],
        "name": "totalSupply",
        "outputs": [
            {
                "internalType": "uint256",
                "name": "",
                "type": "uint256"
            }
        ],
        "stateMutability": "view",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "to",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
            }
        ],
        "name": "transfer",
        "outputs": [
            {
                "internalType": "bool",
                "name": "success",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    },
    {
        "inputs": [
            {
                "internalType": "address",
                "name": "from",
                "type": "address"
            },
            {
                "internalType": "address",
                "name": "to",
                "type": "address"
            },
            {
                "internalType": "uint256",
                "name": "value",
                "type": "uint256"
            }
        ],
        "name": "transferFrom",
        "outputs": [
            {
                "internalType": "bool",
                "name": "success",
                "type": "bool"
            }
        ],
        "stateMutability": "nonpayable",
        "type": "function"
    }
];
