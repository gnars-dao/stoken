"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenTransactionHistory = exports.getETHTransactionHistory = exports.getTokenBalance = exports.getGasOracle = void 0;
var axios_1 = __importDefault(require("axios"));
var utils_1 = require("./utils");
var lib_1 = require("@xchainjs/xchain-util/lib");
var getApiKeyQueryParameter = function (apiKey) { return (!!apiKey ? "&apiKey=" + apiKey : ''); };
/**
 * SafeGasPrice, ProposeGasPrice And FastGasPrice returned in string-Gwei
 *
 * @see https://etherscan.io/apis#gastracker
 *
 * @param {string} baseUrl The etherscan node url.
 * @param {string} apiKey The etherscan API key. (optional)
 * @returns {GasOracleResponse} LastBlock, SafeGasPrice, ProposeGasPrice, FastGasPrice
 */
exports.getGasOracle = function (baseUrl, apiKey) {
    var url = baseUrl + '/api?module=gastracker&action=gasoracle';
    return axios_1.default.get(url + getApiKeyQueryParameter(apiKey)).then(function (response) { return response.data.result; });
};
/**
 * Get token balance
 *
 * @see https://etherscan.io/apis#tokens
 *
 * @param {string} baseUrl The etherscan node url.
 * @param {string} address The address.
 * @param {string} assetAddress The token contract address.
 * @param {string} apiKey The etherscan API key. (optional)
 * @returns {BigNumberish} The token balance
 */
exports.getTokenBalance = function (_a) {
    var baseUrl = _a.baseUrl, address = _a.address, assetAddress = _a.assetAddress, apiKey = _a.apiKey;
    var url = baseUrl + ("/api?module=account&action=tokenbalance&contractaddress=" + assetAddress + "&address=" + address);
    return axios_1.default.get(url + getApiKeyQueryParameter(apiKey)).then(function (response) { return response.data.result; });
};
/**
 * Get ETH transaction history
 *
 * @see https://etherscan.io/apis#accounts
 *
 * @param {string} baseUrl The etherscan node url.
 * @param {string} address The address.
 * @param {TransactionHistoryParam} params The search options.
 * @param {string} apiKey The etherscan API key. (optional)
 * @returns {Array<ETHTransactionInfo>} The ETH transaction history
 */
exports.getETHTransactionHistory = function (_a) {
    var baseUrl = _a.baseUrl, address = _a.address, page = _a.page, offset = _a.offset, startblock = _a.startblock, endblock = _a.endblock, apiKey = _a.apiKey;
    return __awaiter(void 0, void 0, void 0, function () {
        var url, ethTransactions;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    url = baseUrl + "/api?module=account&action=txlist&sort=desc" + getApiKeyQueryParameter(apiKey);
                    if (address)
                        url += "&address=" + address;
                    if (offset)
                        url += "&offset=" + offset;
                    if (page)
                        url += "&page=" + page;
                    if (startblock)
                        url += "&startblock=" + startblock;
                    if (endblock)
                        url += "&endblock=" + endblock;
                    return [4 /*yield*/, axios_1.default.get(url).then(function (response) { return response.data.result; })];
                case 1:
                    ethTransactions = _b.sent();
                    return [2 /*return*/, utils_1.filterSelfTxs(ethTransactions)
                            .filter(function (tx) { return !lib_1.bn(tx.value).isZero(); })
                            .map(utils_1.getTxFromEthTransaction)];
            }
        });
    });
};
/**
 * Get token transaction history
 *
 * @see https://etherscan.io/apis#accounts
 *
 * @param {string} baseUrl The etherscan node url.
 * @param {string} address The address.
 * @param {TransactionHistoryParam} params The search options.
 * @param {string} apiKey The etherscan API key. (optional)
 * @returns {Array<Tx>} The token transaction history
 */
exports.getTokenTransactionHistory = function (_a) {
    var baseUrl = _a.baseUrl, address = _a.address, assetAddress = _a.assetAddress, page = _a.page, offset = _a.offset, startblock = _a.startblock, endblock = _a.endblock, apiKey = _a.apiKey;
    return __awaiter(void 0, void 0, void 0, function () {
        var url, tokenTransactions;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    url = baseUrl + "/api?module=account&action=tokentx&sort=desc" + getApiKeyQueryParameter(apiKey);
                    if (address)
                        url += "&address=" + address;
                    if (assetAddress)
                        url += "&contractaddress=" + assetAddress;
                    if (offset)
                        url += "&offset=" + offset;
                    if (page)
                        url += "&page=" + page;
                    if (startblock)
                        url += "&startblock=" + startblock;
                    if (endblock)
                        url += "&endblock=" + endblock;
                    return [4 /*yield*/, axios_1.default.get(url).then(function (response) { return response.data.result; })];
                case 1:
                    tokenTransactions = _b.sent();
                    return [2 /*return*/, utils_1.filterSelfTxs(tokenTransactions)
                            .filter(function (tx) { return !lib_1.bn(tx.value).isZero(); })
                            .reduce(function (acc, cur) {
                            var tx = utils_1.getTxFromTokenTransaction(cur);
                            return tx ? __spreadArrays(acc, [tx]) : acc;
                        }, [])];
            }
        });
    });
};
