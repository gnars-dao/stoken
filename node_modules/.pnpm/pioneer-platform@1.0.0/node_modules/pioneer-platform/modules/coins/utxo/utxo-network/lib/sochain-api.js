"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSuggestedTxFee = exports.getUnspentTxs = exports.getBalance = exports.getTx = exports.getAddress = void 0;
var axios_1 = __importDefault(require("axios"));
var xchain_util_1 = require("@xchainjs/xchain-util");
var utils_1 = require("./utils");
var DEFAULT_SUGGESTED_TRANSACTION_FEE = 127;
var toSochainNetwork = function (net) {
    return net === 'testnet' ? 'BTCTEST' : 'BTC';
};
/**
 * Get address information.
 *
 * @see https://sochain.com/api#get-display-data-address
 *
 * @param {string} sochainUrl The sochain node url.
 * @param {string} network
 * @param {string} address
 * @returns {BtcAddressDTO}
 */
exports.getAddress = function (_a) {
    var sochainUrl = _a.sochainUrl, network = _a.network, address = _a.address;
    return __awaiter(void 0, void 0, void 0, function () {
        var url, response, addressResponse, error_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    url = sochainUrl + "/address/" + toSochainNetwork(network) + "/" + address;
                    return [4 /*yield*/, axios_1.default.get(url)];
                case 1:
                    response = _b.sent();
                    addressResponse = response.data;
                    return [2 /*return*/, addressResponse.data];
                case 2:
                    error_1 = _b.sent();
                    return [2 /*return*/, Promise.reject(error_1)];
                case 3: return [2 /*return*/];
            }
        });
    });
};
/**
 * Get transaction by hash.
 *
 * @see https://sochain.com/api#get-tx
 *
 * @param {string} sochainUrl The sochain node url.
 * @param {string} network network id
 * @param {string} hash The transaction hash.
 * @returns {Transactions}
 */
exports.getTx = function (_a) {
    var sochainUrl = _a.sochainUrl, network = _a.network, hash = _a.hash;
    return __awaiter(void 0, void 0, void 0, function () {
        var url, response, tx, error_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    url = sochainUrl + "/get_tx/" + toSochainNetwork(network) + "/" + hash;
                    return [4 /*yield*/, axios_1.default.get(url)];
                case 1:
                    response = _b.sent();
                    tx = response.data;
                    return [2 /*return*/, tx.data];
                case 2:
                    error_2 = _b.sent();
                    return [2 /*return*/, Promise.reject(error_2)];
                case 3: return [2 /*return*/];
            }
        });
    });
};
/**
 * Get address balance.
 *
 * @see https://sochain.com/api#get-balance
 *
 * @param {string} sochainUrl The sochain node url.
 * @param {string} network
 * @param {string} address
 * @returns {number}
 */
exports.getBalance = function (_a) {
    var sochainUrl = _a.sochainUrl, network = _a.network, address = _a.address;
    return __awaiter(void 0, void 0, void 0, function () {
        var url, response, balanceResponse, confirmed, unconfirmed, netAmt, result, error_3;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    url = sochainUrl + "/get_address_balance/" + toSochainNetwork(network) + "/" + address;
                    return [4 /*yield*/, axios_1.default.get(url)];
                case 1:
                    response = _b.sent();
                    balanceResponse = response.data;
                    confirmed = xchain_util_1.assetAmount(balanceResponse.data.confirmed_balance, utils_1.BTC_DECIMAL);
                    unconfirmed = xchain_util_1.assetAmount(balanceResponse.data.unconfirmed_balance, utils_1.BTC_DECIMAL);
                    netAmt = confirmed.amount().plus(unconfirmed.amount());
                    result = xchain_util_1.assetToBase(xchain_util_1.assetAmount(netAmt, utils_1.BTC_DECIMAL));
                    return [2 /*return*/, result];
                case 2:
                    error_3 = _b.sent();
                    return [2 /*return*/, Promise.reject(error_3)];
                case 3: return [2 /*return*/];
            }
        });
    });
};
/**
 * Get unspent txs
 *
 * @see https://sochain.com/api#get-unspent-tx
 *
 * @param {string} sochainUrl The sochain node url.
 * @param {string} network
 * @param {string} address
 * @returns {BtcAddressUTXOs}
 */
exports.getUnspentTxs = function (_a) {
    var sochainUrl = _a.sochainUrl, network = _a.network, address = _a.address;
    return __awaiter(void 0, void 0, void 0, function () {
        var resp, response, error_4;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, axios_1.default.get(sochainUrl + "/get_tx_unspent/" + toSochainNetwork(network) + "/" + address)];
                case 1:
                    resp = _b.sent();
                    response = resp.data;
                    return [2 /*return*/, response.data.txs];
                case 2:
                    error_4 = _b.sent();
                    return [2 /*return*/, Promise.reject(error_4)];
                case 3: return [2 /*return*/];
            }
        });
    });
};
/**
 * Get Bitcoin suggested transaction fee.
 *
 * @returns {number} The Bitcoin suggested transaction fee per bytes in sat.
 */
exports.getSuggestedTxFee = function (coin) { return __awaiter(void 0, void 0, void 0, function () {
    var response, error_5;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, axios_1.default.get('https://app.bitgo.com/api/v2/' + coin + '/tx/fee')];
            case 1:
                response = _a.sent();
                return [2 /*return*/, response.data.feePerKb / 1000]; // feePerKb to feePerByte
            case 2:
                error_5 = _a.sent();
                return [2 /*return*/, DEFAULT_SUGGESTED_TRANSACTION_FEE];
            case 3: return [2 /*return*/];
        }
    });
}); };
