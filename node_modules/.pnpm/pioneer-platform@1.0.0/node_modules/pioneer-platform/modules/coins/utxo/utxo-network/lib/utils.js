"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPrefix = exports.getDefaultFees = exports.getDefaultFeesWithRates = exports.calcFee = exports.getDerivePath = exports.buildTx = exports.scanUTXOs = exports.validateAddress = exports.getBalance = exports.btcNetwork = exports.isTestnet = exports.arrayAverage = exports.getFee = exports.compileMemo = exports.BTC_DECIMAL = void 0;
var Bitcoin = __importStar(require("bitcoinjs-lib")); // https://github.com/bitcoinjs/bitcoinjs-lib
var sochain = __importStar(require("./sochain-api"));
var xchain_util_1 = require("@xchainjs/xchain-util");
var const_1 = require("./const");
var TX_EMPTY_SIZE = 4 + 1 + 1 + 4; //10
var TX_INPUT_BASE = 32 + 4 + 1 + 4; // 41
var TX_INPUT_PUBKEYHASH = 107;
var TX_OUTPUT_BASE = 8 + 1; //9
var TX_OUTPUT_PUBKEYHASH = 25;
var DUST_THRESHOLD = 1000;
exports.BTC_DECIMAL = 8;
var inputBytes = function (input) {
    return TX_INPUT_BASE + (input.witnessUtxo.script ? input.witnessUtxo.script.length : TX_INPUT_PUBKEYHASH);
};
/**
 * Compile memo.
 *
 * @param {string} memo The memo to be compiled.
 * @returns {Buffer} The compiled memo.
 */
exports.compileMemo = function (memo) {
    var data = Buffer.from(memo, 'utf8'); // converts MEMO to buffer
    return Bitcoin.script.compile([Bitcoin.opcodes.OP_RETURN, data]); // Compile OP_RETURN script
};
/**
 * Get the transaction fee.
 *
 * @param {UTXOs} inputs The UTXOs.
 * @param {FeeRate} feeRate The fee rate.
 * @param {Buffer} data The compiled memo (Optional).
 * @returns {number} The fee amount.
 */
exports.getFee = function (inputs, feeRate, data) {
    if (data === void 0) { data = null; }
    var sum = TX_EMPTY_SIZE +
        inputs.reduce(function (a, x) { return a + inputBytes(x); }, 0) +
        inputs.length + // +1 byte for each input signature
        TX_OUTPUT_BASE +
        TX_OUTPUT_PUBKEYHASH +
        TX_OUTPUT_BASE +
        TX_OUTPUT_PUBKEYHASH;
    if (data) {
        sum += TX_OUTPUT_BASE + data.length;
    }
    var fee = sum * feeRate;
    return fee > const_1.MIN_TX_FEE ? fee : const_1.MIN_TX_FEE;
};
/**
 * Get the average value of an array.
 *
 * @param {Array<number>} array
 * @returns {number} The average value.
 */
exports.arrayAverage = function (array) {
    var sum = 0;
    array.forEach(function (value) { return (sum += value); });
    return sum / array.length;
};
/**
 * Check if give network is a testnet.
 *
 * @param {Network} network
 * @returns {boolean} `true` or `false`
 */
exports.isTestnet = function (network) {
    return network === 'testnet';
};
/**
 * Get Bitcoin network to be used with bitcoinjs.
 *
 * @param {Network} network
 * @returns {Bitcoin.Network} The BTC network.
 */
exports.btcNetwork = function (network) {
    return exports.isTestnet(network) ? Bitcoin.networks.testnet : Bitcoin.networks.bitcoin;
};
/**
 * Get the balances of an address.
 *
 * @param {string} sochainUrl sochain Node URL.
 * @param {Network} network
 * @param {Address} address
 * @returns {Array<Balance>} The balances of the given address.
 */
exports.getBalance = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var balance, error_1;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                _a.trys.push([0, 2, , 3]);
                return [4 /*yield*/, sochain.getBalance(params)];
            case 1:
                balance = _a.sent();
                return [2 /*return*/, [
                        {
                            asset: xchain_util_1.AssetBTC,
                            amount: balance,
                        },
                    ]];
            case 2:
                error_1 = _a.sent();
                return [2 /*return*/, Promise.reject(new Error('Invalid address'))];
            case 3: return [2 /*return*/];
        }
    });
}); };
/**
 * Get the balance changes amount.
 *
 * @param {number} valueOut
 * @param {Address} address
 * @param {string} sochainUrl sochain Node URL.
 * @returns {number} The change amount.
 */
var getChange = function (_a) {
    var valueOut = _a.valueOut, sochainUrl = _a.sochainUrl, network = _a.network, address = _a.address;
    return __awaiter(void 0, void 0, void 0, function () {
        var balances, btcBalance, change, e_1;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, exports.getBalance({ sochainUrl: sochainUrl, network: network, address: address })];
                case 1:
                    balances = _b.sent();
                    btcBalance = balances.filter(function (balance) { return xchain_util_1.assetToString(balance.asset) === xchain_util_1.assetToString(xchain_util_1.AssetBTC); })[0];
                    change = 0;
                    if (btcBalance && btcBalance.amount.amount().minus(valueOut).isGreaterThan(DUST_THRESHOLD)) {
                        change = btcBalance.amount.amount().minus(valueOut).toNumber();
                    }
                    return [2 /*return*/, change];
                case 2:
                    e_1 = _b.sent();
                    return [2 /*return*/, Promise.reject(e_1)];
                case 3: return [2 /*return*/];
            }
        });
    });
};
/**
 * Validate the BTC address.
 *
 * @param {Address} address
 * @param {Network} network
 * @returns {boolean} `true` or `false`.
 */
exports.validateAddress = function (address, network) {
    try {
        Bitcoin.address.toOutputScript(address, exports.btcNetwork(network));
        return true;
    }
    catch (error) {
        return false;
    }
};
/**
 * Scan UTXOs from sochain.
 *
 * @param {string} sochainUrl sochain Node URL.
 * @param {Network} network
 * @param {Address} address
 * @returns {Array<UTXO>} The UTXOs of the given address.
 */
exports.scanUTXOs = function (params) { return __awaiter(void 0, void 0, void 0, function () {
    var utxos;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, sochain.getUnspentTxs(params)];
            case 1:
                utxos = _a.sent();
                return [2 /*return*/, utxos.map(function (utxo) {
                        return ({
                            hash: utxo.txid,
                            index: utxo.output_no,
                            witnessUtxo: {
                                value: xchain_util_1.assetToBase(xchain_util_1.assetAmount(utxo.value, exports.BTC_DECIMAL)).amount().toNumber(),
                                script: Buffer.from(utxo.script_hex, 'hex'),
                            },
                        });
                    })];
        }
    });
}); };
/**
 * Build transcation.
 *
 * @param {BuildParams} params The transaction build options.
 * @returns {Transaction}
 */
exports.buildTx = function (_a) {
    var amount = _a.amount, recipient = _a.recipient, memo = _a.memo, feeRate = _a.feeRate, sender = _a.sender, network = _a.network, sochainUrl = _a.sochainUrl;
    return __awaiter(void 0, void 0, void 0, function () {
        var utxos, balance, btcBalance, feeRateWhole, compiledMemo, fee, psbt_1, change, e_2;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 4, , 5]);
                    return [4 /*yield*/, exports.scanUTXOs({ sochainUrl: sochainUrl, network: network, address: sender })];
                case 1:
                    utxos = _b.sent();
                    if (utxos.length === 0) {
                        return [2 /*return*/, Promise.reject(Error('No utxos to send'))];
                    }
                    return [4 /*yield*/, exports.getBalance({ sochainUrl: sochainUrl, network: network, address: sender })];
                case 2:
                    balance = _b.sent();
                    btcBalance = balance.filter(function (balance) { return balance.asset.symbol === xchain_util_1.AssetBTC.symbol; })[0];
                    if (!btcBalance) {
                        return [2 /*return*/, Promise.reject(new Error('No btcBalance found'))];
                    }
                    if (!exports.validateAddress(recipient, network)) {
                        return [2 /*return*/, Promise.reject(new Error('Invalid address'))];
                    }
                    feeRateWhole = Number(feeRate.toFixed(0));
                    compiledMemo = memo ? exports.compileMemo(memo) : null;
                    fee = exports.getFee(utxos, feeRateWhole, compiledMemo);
                    if (amount.amount().plus(fee).isGreaterThan(btcBalance.amount.amount())) {
                        return [2 /*return*/, Promise.reject(Error('Balance insufficient for transaction'))];
                    }
                    psbt_1 = new Bitcoin.Psbt({ network: exports.btcNetwork(network) }) // Network-specific
                    ;
                    //Inputs
                    utxos.forEach(function (utxo) {
                        return psbt_1.addInput({
                            hash: utxo.hash,
                            index: utxo.index,
                            witnessUtxo: utxo.witnessUtxo,
                        });
                    });
                    // Outputs
                    psbt_1.addOutput({ address: recipient, value: amount.amount().toNumber() }); // Add output {address, value}
                    return [4 /*yield*/, getChange({ valueOut: amount.amount().toNumber() + fee, sochainUrl: sochainUrl, network: network, address: sender })];
                case 3:
                    change = _b.sent();
                    if (change > 0) {
                        psbt_1.addOutput({ address: sender, value: change }); // Add change
                    }
                    if (compiledMemo) {
                        // if memo exists
                        psbt_1.addOutput({ script: compiledMemo, value: 0 }); // Add OP_RETURN {script, value}
                    }
                    return [2 /*return*/, { psbt: psbt_1, utxos: utxos }];
                case 4:
                    e_2 = _b.sent();
                    return [2 /*return*/, Promise.reject(e_2)];
                case 5: return [2 /*return*/];
            }
        });
    });
};
/**
 * Broadcast the transaction.
 *
 * @param {BroadcastTxParams} params The transaction broadcast options.
 * @returns {TxHash} The transaction hash.
 */
// export const broadcastTx = async ({ network, txHex, blockstreamUrl }: BroadcastTxParams): Promise<TxHash> => {
//   return await blockStream.broadcastTx({ network, txHex, blockstreamUrl })
// }
/**
 * Get DerivePath.
 *
 * @param {number} index (optional)
 * @returns {DerivePath} The bitcoin derivation path by the index. (both mainnet and testnet)
 */
exports.getDerivePath = function (index) {
    if (index === void 0) { index = 0; }
    return ({
        mainnet: "84'/0'/0'/0/" + index,
        testnet: "84'/1'/0'/0/" + index,
    });
};
/**
 * Calculate fees based on fee rate and memo.
 *
 * @param {FeeRate} feeRate
 * @param {string} memo
 * @returns {BaseAmount} The calculated fees based on fee rate and the memo.
 */
exports.calcFee = function (feeRate, memo) {
    var compiledMemo = memo ? exports.compileMemo(memo) : null;
    var fee = exports.getFee([], feeRate, compiledMemo);
    return xchain_util_1.baseAmount(fee);
};
/**
 * Get the default fees with rates.
 *
 * @returns {FeesWithRates} The default fees and rates.
 */
exports.getDefaultFeesWithRates = function () {
    var rates = {
        fastest: 50,
        fast: 20,
        average: 10,
    };
    var fees = {
        type: 'byte',
        fast: exports.calcFee(rates.fast),
        average: exports.calcFee(rates.average),
        fastest: exports.calcFee(rates.fastest),
    };
    return {
        fees: fees,
        rates: rates,
    };
};
/**
 * Get the default fees.
 *
 * @returns {Fees} The default fees.
 */
exports.getDefaultFees = function () {
    var fees = exports.getDefaultFeesWithRates().fees;
    return fees;
};
/**
 * Get address prefix based on the network.
 *
 * @param {Network} network
 * @returns {string} The address prefix based on the network.
 *
 **/
exports.getPrefix = function (network) { return (network === 'testnet' ? 'tb1' : 'bc1'); };
