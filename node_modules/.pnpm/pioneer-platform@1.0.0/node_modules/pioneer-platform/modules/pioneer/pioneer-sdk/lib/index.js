"use strict";
/*

     Pioneer SDK
        A typescript sdk for integration for apps

 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = void 0;
var TAG = " | Pioneer-sdk | ";
var log = require("@pioneer-platform/loggerdog")();
//Pioneer follows OpenAPI spec
var Pioneer = require('openapi-client-axios').default;
var Events = require("@pioneer-platform/pioneer-events");
var _a = require('@pioneer-platform/pioneer-coins'), supportedBlockchains = _a.supportedBlockchains, supportedAssets = _a.supportedAssets;
//xchain adapter
var XchainClass = require("@pioneer-platform/pioneer-xchain-client");
var SDK = /** @class */ (function () {
    function SDK(spec, config, isTestnet) {
        this.service = config.service || 'unknown';
        this.url = config.url || 'unknown';
        if (isTestnet) {
            this.isTestnet = true;
        }
        else {
            this.isTestnet = false;
        }
        this.isPaired = false;
        this.config = config;
        this.username = config.username;
        this.spec = spec || config.spec;
        this.wss = config.wss || 'wss://pioneers.dev';
        this.queryKey = config.queryKey;
        this.spec = config.spec;
        this.clients = {};
        this.context = "";
        this.wallets = [];
        this.events = {};
        this.totalValueUsd = 0;
        this.blockchains = [];
        this.init = function (blockchains) {
            return __awaiter(this, void 0, void 0, function () {
                var tag, i, blockchain, _a, userInfo, e_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            tag = TAG + " | init_wallet | ";
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 4, , 5]);
                            log.info(tag, "blockchains: ", blockchains);
                            if (!blockchains)
                                blockchains = [];
                            if (!this.queryKey)
                                throw Error(" You must create an api key! ");
                            this.pioneerApi = new Pioneer({
                                definition: spec,
                                axiosConfigDefaults: {
                                    headers: {
                                        'Authorization': this.queryKey,
                                    },
                                }
                            });
                            //init blockchains
                            for (i = 0; i < blockchains.length; i++) {
                                blockchain = blockchains[i];
                                this.blockchains.push(blockchain.toLowerCase());
                            }
                            if (this.blockchains.length === 0)
                                throw Error("Failed to init! must have blockchains!");
                            _a = this;
                            return [4 /*yield*/, this.pioneerApi.init()
                                //log.info(tag,"this.pioneerApi: ",this.pioneerApi)
                                //get global info
                            ];
                        case 2:
                            _a.pioneerApi = _b.sent();
                            return [4 /*yield*/, this.pioneerApi.User()];
                        case 3:
                            userInfo = _b.sent();
                            userInfo = userInfo.data;
                            log.info(tag, "userInfo: ", userInfo);
                            if (!this.username)
                                this.username = userInfo.username;
                            this.wallets = userInfo.wallets;
                            this.totalValueUsd = parseFloat(userInfo.totalValueUsd);
                            this.context = userInfo.context;
                            return [2 /*return*/, this.pioneerApi];
                        case 4:
                            e_1 = _b.sent();
                            log.error(tag, e_1);
                            throw e_1;
                        case 5: return [2 /*return*/];
                    }
                });
            });
        };
        this.startSocket = function () {
            var tag = TAG + " | startSocket | ";
            try {
                var configEvents = {
                    queryKey: this.queryKey,
                    pioneerWs: this.wss
                };
                if (this.username)
                    configEvents.username = this.username;
                //sub to events
                this.events = new Events.Events(configEvents.pioneerWs, config);
                this.events.init();
                return this.events.events;
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
        this.createPairingCode = function () {
            return __awaiter(this, void 0, void 0, function () {
                var tag, pairingBody, result, e_2;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tag = TAG + " | createPairingCode | ";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            pairingBody = {
                                service: this.service,
                                url: this.url
                            };
                            //sub to pairings
                            this.events.subscribeToKey();
                            return [4 /*yield*/, this.pioneerApi.CreatePairingCode(null, pairingBody)];
                        case 2:
                            result = _a.sent();
                            return [2 /*return*/, result.data];
                        case 3:
                            e_2 = _a.sent();
                            log.error(tag, "e: ", e_2);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        this.getUserInfo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var tag, result, e_3;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tag = TAG + " | getUserInfo | ";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.pioneerApi.User()];
                        case 2:
                            result = _a.sent();
                            return [2 /*return*/, result.data];
                        case 3:
                            e_3 = _a.sent();
                            log.error(tag, "e: ", e_3);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        this.getWalletInfo = function () {
            return __awaiter(this, void 0, void 0, function () {
                var tag, result, e_4;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tag = TAG + " | getWalletInfo | ";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.pioneerApi.Info(this.context)];
                        case 2:
                            result = _a.sent();
                            return [2 /*return*/, result.data];
                        case 3:
                            e_4 = _a.sent();
                            log.error(tag, "e: ", e_4);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        // @ts-ignore
        this.sendToAddress = function (intent) {
            return __awaiter(this, void 0, void 0, function () {
                var tag, txInput, txid, e_5;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tag = TAG + " | sendToAddress | ";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            txInput = {
                                "asset": {
                                    "chain": intent.blockchain,
                                    "symbol": intent.asset,
                                    "ticker": intent.asset
                                },
                                "amount": {
                                    "type": "BASE",
                                    "decimal": 18,
                                    amount: function () {
                                        return intent.amount;
                                    }
                                },
                                "recipient": intent.address,
                            };
                            if (intent.memo)
                                txInput.memo = intent.memo;
                            //ETH
                            if (this.isTestnet && intent.blockchain === 'ETH') {
                                txInput.chainId = 3; //ropsten
                            }
                            if (intent.noBroadcast) {
                                txInput.noBroadcast = true;
                            }
                            return [4 /*yield*/, this.clients[intent.blockchain].transfer(txInput)];
                        case 2:
                            txid = _a.sent();
                            log.info("txid", txid);
                            return [2 /*return*/, txid];
                        case 3:
                            e_5 = _a.sent();
                            log.error(tag, "e: ", e_5);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        //X-chain
        this.getUserParams = function () {
            return __awaiter(this, void 0, void 0, function () {
                var tag, result, thorAddress, binance, bitcoin, thorchain, ethereum, bitcoin, bitcoin, output, e_6;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tag = TAG + " | getUserParams | ";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 15, , 16]);
                            return [4 /*yield*/, this.pioneerApi.Info(this.context)];
                        case 2:
                            result = _a.sent();
                            result = result.data;
                            log.info(tag, "result: ", result);
                            if (!result.masters.RUNE)
                                throw Error("102: RUNE required asset! ");
                            thorAddress = result.masters.RUNE;
                            log.info(tag, "this.spec: ", this.spec);
                            log.info(tag, "supportedBlockchains: ", supportedBlockchains);
                            if (!this.spec)
                                throw Error("103: Pioneer Service required for sdk! ");
                            if (!(this.blockchains.indexOf('binance') >= 0)) return [3 /*break*/, 4];
                            binance = new XchainClass(this.spec, {
                                network: 'mainnet',
                                blockchain: 'binance',
                                nativeAsset: 'BNB',
                                queryKey: this.queryKey
                            });
                            return [4 /*yield*/, binance.init()];
                        case 3:
                            _a.sent();
                            this.clients['binance'] = binance;
                            _a.label = 4;
                        case 4:
                            if (!(this.blockchains.indexOf('bitcoin') >= 0)) return [3 /*break*/, 6];
                            bitcoin = new XchainClass(this.spec, {
                                network: 'mainnet',
                                blockchain: 'bitcoin',
                                nativeAsset: 'BTC',
                                queryKey: this.queryKey
                            });
                            return [4 /*yield*/, bitcoin.init()];
                        case 5:
                            _a.sent();
                            this.clients['bitcoin'] = bitcoin;
                            _a.label = 6;
                        case 6:
                            if (!(this.blockchains.indexOf('thorchain') >= 0)) return [3 /*break*/, 8];
                            thorchain = new XchainClass(this.spec, {
                                network: 'mainnet',
                                blockchain: 'thorchain',
                                nativeAsset: 'RUNE',
                                queryKey: this.queryKey
                            });
                            return [4 /*yield*/, thorchain.init()];
                        case 7:
                            _a.sent();
                            this.clients['thorchain'] = thorchain;
                            _a.label = 8;
                        case 8:
                            if (!(this.blockchains.indexOf('ethereum') >= 0)) return [3 /*break*/, 10];
                            ethereum = new XchainClass(this.spec, {
                                network: 'mainnet',
                                blockchain: 'ethereum',
                                nativeAsset: 'ETH',
                                queryKey: this.queryKey
                            });
                            return [4 /*yield*/, ethereum.init()];
                        case 9:
                            _a.sent();
                            this.clients['ethereum'] = ethereum;
                            _a.label = 10;
                        case 10:
                            if (!(this.blockchains.indexOf('bitcoincash') >= 0)) return [3 /*break*/, 12];
                            bitcoin = new XchainClass(this.spec, {
                                network: 'mainnet',
                                blockchain: 'bitcoinCash',
                                nativeAsset: 'BCH',
                                queryKey: this.queryKey
                            });
                            return [4 /*yield*/, bitcoin.init()];
                        case 11:
                            _a.sent();
                            this.clients['bitcoinCash'] = bitcoin;
                            _a.label = 12;
                        case 12:
                            if (!(this.blockchains.indexOf('litecoin') >= 0)) return [3 /*break*/, 14];
                            bitcoin = new XchainClass(this.spec, {
                                network: 'mainnet',
                                blockchain: 'litecoin',
                                nativeAsset: 'LTC',
                                queryKey: this.queryKey
                            });
                            return [4 /*yield*/, bitcoin.init()];
                        case 13:
                            _a.sent();
                            this.clients['litecoin'] = bitcoin;
                            _a.label = 14;
                        case 14:
                            output = {
                                type: 'pioneer',
                                wallet: thorAddress,
                                keystore: {},
                                clients: this.clients
                            };
                            return [2 /*return*/, output];
                        case 15:
                            e_6 = _a.sent();
                            log.error(tag, "e: ", e_6);
                            return [3 /*break*/, 16];
                        case 16: return [2 /*return*/];
                    }
                });
            });
        };
    }
    return SDK;
}());
exports.SDK = SDK;
