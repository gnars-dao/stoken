"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HIDKeepKeyTransport = exports.requestPair = void 0;
const hdwallet_keepkey_1 = require("@shapeshiftoss/hdwallet-keepkey");
const ByteBuffer = __importStar(require("bytebuffer"));
const node_hid_1 = require("node-hid");
const utils_1 = require("./utils");
const crypto_1 = require("crypto");
const { default: { concat, wrap }, } = ByteBuffer;
function requestPair() {
    return new node_hid_1.HID(utils_1.VENDOR_ID, utils_1.PRODUCT_ID);
}
exports.requestPair = requestPair;
class HIDKeepKeyTransport extends hdwallet_keepkey_1.KeepKeyTransport {
    constructor(hidDevice, keyring, hidRef) {
        super(keyring);
        this.bufferQueue = [];
        this.hidDevice = hidDevice;
        if (hidDevice.path != null) {
            this.hidRef = hidRef || new node_hid_1.HID(hidDevice.path);
        }
    }
    getDeviceID() {
        return this.hidDevice.serialNumber;
    }
    getVendor() {
        return "keepkey.com";
    }
    async getFirmwareHash(firmware) {
        const hash = crypto_1.createHash("sha256");
        hash.update(firmware);
        return hash.digest();
    }
    get isOpened() {
        return this.hidDevice.interface > -1;
    }
    async connect() {
        if (this.isOpened)
            return;
        // @ts-ignore
        this.hidRef.readSync();
        // Start reading data from usbDevice
        this.listen();
    }
    // @ts-ignore
    disconnect() {
        try {
            // If the device is disconnected, this will fail and throw, which is fine.
            // @ts-ignore
            this.hidRef.close();
        }
        catch (e) {
            console.log("Disconnect Error (Ignored):", e);
        }
    }
    getEntropy(length = 64) {
        return crypto_1.randomBytes(length);
    }
    async write(buff) {
        // break frame into segments
        for (let i = 0; i < buff.limit; i += hdwallet_keepkey_1.SEGMENT_SIZE) {
            let segment = buff.toArrayBuffer().slice(i, i + hdwallet_keepkey_1.SEGMENT_SIZE);
            let padding = new Array(hdwallet_keepkey_1.SEGMENT_SIZE - segment.byteLength + 1).join("\0");
            let fragments = [];
            fragments.push([63]);
            fragments.push(segment);
            fragments.push(padding);
            const fragmentBuffer = concat(fragments);
            await this.writeChunk(fragmentBuffer);
        }
    }
    readChunk(debugLink) {
        // @ts-ignore
        const result = this.hidRef.readSync();
        return Promise.resolve(wrap(result));
    }
    // @ts-ignore
    async read(debugLink) {
        const first = await this.readChunk(debugLink);
        // Check that buffer starts with: "?##" [ 0x3f, 0x23, 0x23 ]
        // "?" = USB marker, "##" = KeepKey magic bytes
        // Message ID is bytes 4-5. Message length starts at byte 6.
        const valid = (first.readUint32(0) & 0xffffff00) === 0x3f232300;
        const msgLength = first.readUint32(5);
        if (valid && msgLength >= 0) {
            // FIXME: why doesn't ByteBuffer.concat() work?
            const buffer = new Uint8Array(9 + 2 + msgLength);
            for (let k = 0; k < first.limit; k++) {
                buffer[k] = first.readUint8(k);
            }
            let offset = first.limit;
            while (offset < buffer.length) {
                const next = await this.readChunk(debugLink);
                // Drop USB "?" reportId in the first byte
                for (let k = 1; k < next.limit && offset < buffer.length; k++) {
                    buffer[offset] = next.readUint8(k);
                    offset++;
                }
            }
            return wrap(buffer);
        }
    }
    async writeChunk(buffer) {
        const arr = new Array(buffer.limit).fill(undefined);
        for (let i = buffer.offset; i < buffer.limit; i++) {
            arr[i] = buffer.readByte(i);
        }
        // @ts-ignore
        return this.hidRef.write(arr);
    }
    enqueueBuffer(data) {
        if (data.length)
            this.bufferQueue.push(wrap(data));
    }
}
exports.HIDKeepKeyTransport = HIDKeepKeyTransport;
