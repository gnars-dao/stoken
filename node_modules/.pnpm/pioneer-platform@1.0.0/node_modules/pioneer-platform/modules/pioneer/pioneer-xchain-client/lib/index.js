"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/*

     Pioneer SDK
        A typescript sdk for integration for native wallets

 */
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var ethers_1 = require("ethers");
var TAG = " | Pioneer-xchain-client | ";
var log = require("@pioneer-platform/loggerdog")();
//Pioneer follows OpenAPI spec
var Pioneer = require('openapi-client-axios').default;
var client_1 = require("@binance-chain/javascript-sdk/lib/client");
var providers_1 = require("@ethersproject/providers");
var _a = require('@pioneer-platform/pioneer-coins'), getPrecision = _a.getPrecision, getExplorerUrl = _a.getExplorerUrl, getExplorerAddressUrl = _a.getExplorerAddressUrl, getExplorerTxUrl = _a.getExplorerTxUrl, baseAmountToNative = _a.baseAmountToNative, nativeToBaseAmount = _a.nativeToBaseAmount;
var Invoke = require("@pioneer-platform/pioneer-invoke");
var xchain_util_1 = require("@xchainjs/xchain-util");
module.exports = /** @class */ (function () {
    function wallet(spec, config) {
        this.username = '';
        this.network = config.blockchain;
        this.nativeAsset = config.nativeAsset;
        this.service = config.service || 'unknown';
        if (config.network === 'mainnet') {
            this.isTestnet = false;
        }
        else {
            this.isTestnet = true;
        }
        this.queryKey = config.queryKey;
        this.spec = config.spec;
        this.init = function () {
            return __awaiter(this, void 0, void 0, function () {
                var tag, _a, info, config_1, e_1;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            tag = TAG + " | init_wallet | ";
                            _b.label = 1;
                        case 1:
                            _b.trys.push([1, 5, , 6]);
                            if (!this.queryKey)
                                throw Error(" You must create an api key! ");
                            this.pioneerApi = new Pioneer({
                                definition: spec,
                                axiosConfigDefaults: {
                                    headers: {
                                        'Authorization': this.queryKey,
                                    },
                                }
                            });
                            _a = this;
                            return [4 /*yield*/, this.pioneerApi.init()
                                //get info
                                // @ts-ignore
                            ];
                        case 2:
                            _a.pioneerApi = _b.sent();
                            return [4 /*yield*/, this.pioneerApi.Info()
                                //TODO error handling
                            ];
                        case 3:
                            info = _b.sent();
                            //TODO error handling
                            this.info = info.data;
                            this.username = this.info.username;
                            config_1 = {
                                queryKey: this.queryKey,
                                username: this.username,
                                spec: spec
                            };
                            //get config
                            this.invoke = new Invoke(spec, config_1);
                            return [4 /*yield*/, this.invoke.init()];
                        case 4:
                            _b.sent();
                            return [2 /*return*/, this.pioneerApi];
                        case 5:
                            e_1 = _b.sent();
                            log.error(tag, e_1);
                            throw e_1;
                        case 6: return [2 /*return*/];
                    }
                });
            });
        };
        /*
            Network specific functions

            Binance:
         */
        if (this.network === 'binance') {
            this.getBncClient = function () {
                var tag = TAG + " | getBncClient | ";
                try {
                    var clientUrl = void 0;
                    var network = void 0;
                    if (this.isTestnet) {
                        network = 'testnet';
                        clientUrl = "https://testnet-dex.binance.org";
                    }
                    else {
                        network = 'mainnet';
                        clientUrl = "https://dex.binance.org";
                    }
                    this.bncClient = new client_1.BncClient(clientUrl);
                    this.bncClient.chooseNetwork(network);
                    return this.bncClient;
                }
                catch (e) {
                    log.error(tag, "e: ", e);
                }
            };
            //TODO getMultiSendFees
            //TODO getSingleAndMultiFees
            //TODO multiSend
        }
        /*
            Network specific functions

            Bitcoin:
         */
        if (this.network === 'bitcoin') {
            //TODO
            // this.derivePath = function () {
            //     let tag = TAG + " | getBncClient | "
            //     try {
            //         //TODO
            //     } catch (e) {
            //         log.error(tag, "e: ", e)
            //     }
            // }
            //TODO
            // this.getFeesWithRates = function () {
            //     let tag = TAG + " | getFeesWithRates | "
            //     try {
            //         //TODO
            //     } catch (e) {
            //         log.error(tag, "e: ", e)
            //     }
            // }
            // @ts-ignore
            this.getFeeRates = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, response, e_2;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tag = TAG + " | getFeeRates | ";
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.pioneerApi.GetFeesWithMemo(null, { coin: 'BTC', memo: '' })];
                            case 2:
                                response = _a.sent();
                                response = response.data;
                                console.log("response: ", response);
                                return [2 /*return*/, response.rates];
                            case 3:
                                e_2 = _a.sent();
                                log.error(tag, "e: ", e_2);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
            // @ts-ignore
            this.getFeesWithMemo = function (memo) {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, params, response_1, output, e_3;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tag = TAG + " | getFeesWithMemo | ";
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                params = {
                                    coin: 'BTC',
                                    memo: "asdasdasdasdasda"
                                };
                                console.log("this.pioneerApi: ", this.pioneerApi);
                                return [4 /*yield*/, this.pioneerApi.GetFeesWithMemo(null, params)];
                            case 2:
                                response_1 = _a.sent();
                                response_1 = response_1.data;
                                console.log("response: ", response_1);
                                output = {
                                    fees: {
                                        type: 'byte',
                                        average: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_1.fees.average);
                                            }
                                        },
                                        fast: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_1.fees.fast);
                                            }
                                        },
                                        fastest: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_1.fees.fastest);
                                            }
                                        }
                                    }
                                };
                                return [2 /*return*/, output.fees];
                            case 3:
                                e_3 = _a.sent();
                                log.error(tag, "e: ", e_3);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
        }
        if (this.network === 'bitcoinCash') {
            // @ts-ignore
            this.getFeeRates = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, response, e_4;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tag = TAG + " | getFeeRates | ";
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.pioneerApi.GetFeesWithMemo(null, { coin: 'BCH', memo: '' })];
                            case 2:
                                response = _a.sent();
                                response = response.data;
                                console.log("response: ", response);
                                return [2 /*return*/, response.rates];
                            case 3:
                                e_4 = _a.sent();
                                log.error(tag, "e: ", e_4);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
            // @ts-ignore
            this.getFeesWithMemo = function (memo) {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, params, response_2, output, e_5;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tag = TAG + " | getFeesWithMemo | ";
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                params = {
                                    coin: 'BCH',
                                    memo: "asdasdasdasdasda"
                                };
                                console.log("this.pioneerApi: ", this.pioneerApi);
                                return [4 /*yield*/, this.pioneerApi.GetFeesWithMemo(null, params)];
                            case 2:
                                response_2 = _a.sent();
                                response_2 = response_2.data;
                                console.log("response: ", response_2);
                                output = {
                                    fees: {
                                        type: 'byte',
                                        average: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_2.fees.average);
                                            }
                                        },
                                        fast: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_2.fees.fast);
                                            }
                                        },
                                        fastest: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_2.fees.fastest);
                                            }
                                        }
                                    }
                                };
                                return [2 /*return*/, output.fees];
                            case 3:
                                e_5 = _a.sent();
                                log.error(tag, "e: ", e_5);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
        }
        if (this.network === 'litecoin') {
            // @ts-ignore
            this.getFeeRates = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, response, e_6;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tag = TAG + " | getFeeRates | ";
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.pioneerApi.GetFeesWithMemo(null, { coin: 'LTC', memo: '' })];
                            case 2:
                                response = _a.sent();
                                response = response.data;
                                console.log("response: ", response);
                                return [2 /*return*/, response.rates];
                            case 3:
                                e_6 = _a.sent();
                                log.error(tag, "e: ", e_6);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
            // @ts-ignore
            this.getFeesWithMemo = function (memo) {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, params, response_3, output, e_7;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tag = TAG + " | getFeesWithMemo | ";
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                params = {
                                    coin: 'LTC',
                                    memo: "asdasdasdasdasda"
                                };
                                console.log("this.pioneerApi: ", this.pioneerApi);
                                return [4 /*yield*/, this.pioneerApi.GetFeesWithMemo(null, params)];
                            case 2:
                                response_3 = _a.sent();
                                response_3 = response_3.data;
                                console.log("response: ", response_3);
                                output = {
                                    fees: {
                                        type: 'byte',
                                        average: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_3.fees.average);
                                            }
                                        },
                                        fast: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_3.fees.fast);
                                            }
                                        },
                                        fastest: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_3.fees.fastest);
                                            }
                                        }
                                    }
                                };
                                return [2 /*return*/, output.fees];
                            case 3:
                                e_7 = _a.sent();
                                log.error(tag, "e: ", e_7);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
        }
        /*
            Network specific functions

            Ethereum:
         */
        if (this.network === 'ethereum') {
            this.estimateFeesWithGasPricesAndLimits = function (params) {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, response_4, output, e_8;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tag = TAG + " | estimateFeesWithGasPricesAndLimits | ";
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                return [4 /*yield*/, this.pioneerApi.EstimateFeesWithGasPricesAndLimits(null, params)];
                            case 2:
                                response_4 = _a.sent();
                                response_4 = response_4.data;
                                output = {
                                    gasPrices: response_4.gasPrices,
                                    fees: {
                                        type: 'byte',
                                        average: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_4.fees.average);
                                            }
                                        },
                                        fast: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_4.fees.fast);
                                            }
                                        },
                                        fastest: {
                                            amount: function () {
                                                return new bignumber_js_1.default(response_4.fees.fastest);
                                            }
                                        }
                                    }
                                };
                                return [2 /*return*/, output];
                            case 3:
                                e_8 = _a.sent();
                                log.error(tag, "e: ", e_8);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
            this.approve = function (spender, sender, amount, noBroadcast) {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, invocation, result, e_9;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tag = TAG + " | getWallet | ";
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                invocation = {
                                    username: this.username,
                                    coin: this.nativeAsset,
                                    contract: spender,
                                    tokenAddress: sender,
                                    amount: amount.amount().toNumber()
                                };
                                if (noBroadcast)
                                    invocation.noBroadcast = true;
                                log.info(tag, "invocation: ", invocation);
                                return [4 /*yield*/, this.invoke.invoke('approve', invocation)];
                            case 2:
                                result = _a.sent();
                                console.log("result: ", result.data);
                                return [2 /*return*/, result.data.txid];
                            case 3:
                                e_9 = _a.sent();
                                log.error(tag, "e: ", e_9);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
            //estimateApproveFee
            // @ts-ignore
            this.estimateApproveFee = function (contractAddress, asset) {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, response;
                    return __generator(this, function (_a) {
                        tag = TAG + " | getWallet | ";
                        try {
                            response = 100000000;
                            return [2 /*return*/, new bignumber_js_1.default(response, 18)];
                        }
                        catch (e) {
                            log.error(tag, "e: ", e);
                        }
                        return [2 /*return*/];
                    });
                });
            };
            this.estimateFee = function (_a) {
                var sourceAsset = _a.sourceAsset, ethClient = _a.ethClient, ethInbound = _a.ethInbound, inputAmount = _a.inputAmount, memo = _a.memo;
                return __awaiter(this, void 0, void 0, function () {
                    var tag, params, response, e_10;
                    return __generator(this, function (_b) {
                        switch (_b.label) {
                            case 0:
                                tag = TAG + " | getWallet | ";
                                _b.label = 1;
                            case 1:
                                _b.trys.push([1, 3, , 4]);
                                params = {
                                    coin: "ETH",
                                    amount: xchain_util_1.assetToBase(xchain_util_1.assetAmount(inputAmount, 18)).amount().toFixed(),
                                    contract: "0x9d496De78837f5a2bA64Cb40E62c19FBcB67f55a",
                                    recipient: ethInbound.address,
                                    memo: memo
                                };
                                return [4 /*yield*/, this.pioneerApi.EstimateFeesWithGasPricesAndLimits(null, params)];
                            case 2:
                                response = _b.sent();
                                response = response.data;
                                return [2 /*return*/, new bignumber_js_1.default(response, 18)];
                            case 3:
                                e_10 = _b.sent();
                                log.error(tag, "e: ", e_10);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
            this.getWallet = function () {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, wallet_1, provider, e_11;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tag = TAG + " | getWallet | ";
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                wallet_1 = ethers_1.ethers.Wallet.fromMnemonic("alcohol woman abuse must during monitor noble actual mixed trade anger aisle");
                                provider = providers_1.getDefaultProvider('testnet');
                                return [4 /*yield*/, wallet_1.connect(provider)];
                            case 2:
                                _a.sent();
                                return [2 /*return*/, wallet_1];
                            case 3:
                                e_11 = _a.sent();
                                log.error(tag, "e: ", e_11);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
            this.isApproved = function (routerAddress, tokenAddress, amount) {
                return __awaiter(this, void 0, void 0, function () {
                    var tag, address, body, allowance, e_12;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                tag = TAG + " | isApproved | ";
                                _a.label = 1;
                            case 1:
                                _a.trys.push([1, 3, , 4]);
                                amount = amount.amount().toNumber();
                                if (amount === 0)
                                    throw Error("Failed to get a valid amount!");
                                address = this.getAddress();
                                body = {
                                    token: tokenAddress,
                                    spender: routerAddress,
                                    sender: address
                                };
                                return [4 /*yield*/, this.pioneerApi.GetAllowance(null, body)];
                            case 2:
                                allowance = _a.sent();
                                allowance = allowance.data;
                                log.info(tag, "allowance: ", allowance);
                                log.info(tag, "amount: ", amount);
                                if (allowance > amount) {
                                    return [2 /*return*/, true];
                                }
                                else {
                                    return [2 /*return*/, false];
                                }
                                return [3 /*break*/, 4];
                            case 3:
                                e_12 = _a.sent();
                                log.error(tag, "e: ", e_12);
                                return [3 /*break*/, 4];
                            case 4: return [2 /*return*/];
                        }
                    });
                });
            };
            this.getProvider = function () {
                var tag = TAG + " | getProvider | ";
                try {
                    return providers_1.getDefaultProvider(this.network);
                }
                catch (e) {
                    log.error(tag, "e: ", e);
                }
            };
        }
        /*
             Commonn API
         */
        this.getNetwork = function () {
            var tag = TAG + " | getNetwork | ";
            try {
                if (this.isTestnet) {
                    return 'testnet';
                }
                else {
                    return 'mainnet';
                }
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
        this.getExplorerUrl = function () {
            var tag = TAG + " | getExplorerUrl | ";
            try {
                return getExplorerUrl(this.network, 'native', this.isTestnet);
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
        this.getExplorerAddressUrl = function (address) {
            var tag = TAG + " | getExplorerAddressUrl | ";
            try {
                return getExplorerAddressUrl(address, this.network, 'native', this.isTestnet);
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
        this.getExplorerTxUrl = function (tx) {
            var tag = TAG + " | getExplorerTxUrl | ";
            try {
                return getExplorerTxUrl(tx, this.network, 'native', this.isTestnet);
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
        this.getAddress = function () {
            var tag = TAG + " | getAddress | ";
            try {
                return this.info.masters[this.nativeAsset];
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
        this.validateAddress = function (address) {
            var tag = TAG + " | validateAddress | ";
            try {
                //TODO
                return true;
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
        this.setPhrase = function (phrase) {
            var tag = TAG + " | setPhrase | ";
            try {
                return "n/a";
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
        // @ts-ignore
        this.getBalance = function (address, asset) {
            return __awaiter(this, void 0, void 0, function () {
                var tag, returnAssetAmount, assetDescription, balances;
                var _this = this;
                return __generator(this, function (_a) {
                    tag = TAG + " | getBalance | ";
                    try {
                        returnAssetAmount = function () {
                            return _this.info.balances[_this.nativeAsset];
                        };
                        assetDescription = {
                            // @ts-ignore
                            chain: this.nativeAsset,
                            symbol: this.nativeAsset,
                            ticker: this.nativeAsset
                        };
                        log.info(tag, "returnAssetAmount", returnAssetAmount());
                        balances = [
                            {
                                asset: assetDescription,
                                // @ts-ignore
                                amount: xchain_util_1.assetToBase(xchain_util_1.assetAmount(returnAssetAmount(), getPrecision(this.nativeAsset))),
                            },
                        ];
                        return [2 /*return*/, balances];
                    }
                    catch (e) {
                        log.error(tag, "e: ", e);
                    }
                    return [2 /*return*/];
                });
            });
        };
        this.getTransactions = function (address, asset) {
            var tag = TAG + " | getTransactions | ";
            try {
                //TODO
                return [{ "foo": "bar" }];
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
        this.getTransactionData = function (txid) {
            return __awaiter(this, void 0, void 0, function () {
                var tag, output, e_13;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tag = TAG + " | getTransactionData | ";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            if (!txid)
                                throw Error("Txid is required!");
                            log.info("asset: ", this.nativeAsset);
                            return [4 /*yield*/, this.pioneerApi.GetTransaction({ coin: this.nativeAsset, txid: txid })];
                        case 2:
                            output = _a.sent();
                            return [2 /*return*/, output.data];
                        case 3:
                            e_13 = _a.sent();
                            log.error(tag, "e: ", e_13);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        this.getFees = function (params) {
            return __awaiter(this, void 0, void 0, function () {
                var tag, output, e_14;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tag = TAG + " | getFees | ";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.pioneerApi.getFees(params)];
                        case 2:
                            output = _a.sent();
                            return [2 /*return*/, output];
                        case 3:
                            e_14 = _a.sent();
                            log.error(tag, "e: ", e_14);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        /*
        let swap = {
            inboundAddress: {
                chain: 'ETH',
                pub_key: 'tthorpub1addwnpepqvuy8vh6yj4h28xp6gfpjsztpj6p46y2rs0763t6uw9f6lkky0ly5uvwla6',
                address: '0x36286e570c412531aad366154eea9867b0e71755',
                router: '0x9d496De78837f5a2bA64Cb40E62c19FBcB67f55a',
                halted: false
            },
            asset: {
                chain: 'ETH',
                symbol: 'ETH',
                ticker: 'ETH',
                iconPath: 'https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/binance/assets/ETH-1C9/logo.png'
            },
            memo: '=:THOR.RUNE:tthor1veu9u5h4mtdq34fjgu982s8pympp6w87ag58nh',
            amount: { type: 'BASE', decimal: 18 }
        }
        */
        this.buildSwap = function (swap) {
            return __awaiter(this, void 0, void 0, function () {
                var tag, request, result, e_15;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tag = TAG + " | buildSwap | ";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            request = {
                                type: "swap",
                                username: this.username,
                                //TODO source
                                //TODO auth
                                //TODO sig
                                invocation: swap
                            };
                            //invocation
                            log.info(tag, "request: ", request);
                            return [4 /*yield*/, this.pioneerApi.Invocation('', request)
                                //
                            ];
                        case 2:
                            result = _a.sent();
                            //
                            return [2 /*return*/, result.data.txid];
                        case 3:
                            e_15 = _a.sent();
                            log.error(tag, "e: ", e_15);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        this.transfer = function (tx) {
            return __awaiter(this, void 0, void 0, function () {
                var tag, coin, amount, to, memo, invocation, result, e_16;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            tag = TAG + " | transfer | ";
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            coin = this.nativeAsset;
                            log.info(tag, "tx: ", tx);
                            log.info(tag, "tx.amount: ", tx.amount);
                            log.info(tag, "tx.amount.amount(): ", tx.amount.amount());
                            log.info(tag, "tx.amount.amount().toFixed(): ", tx.amount.amount().toFixed());
                            amount = tx.amount.amount().toFixed();
                            amount = nativeToBaseAmount(this.nativeAsset, amount);
                            log.info(tag, "amount (final): ", amount);
                            if (!amount)
                                throw Error("Failed to get amount!");
                            to = tx.recipient;
                            memo = tx.memo || '';
                            invocation = {
                                username: this.username,
                                coin: coin,
                                amount: amount,
                                address: to,
                                memo: memo
                            };
                            if (tx.noBroadcast)
                                invocation.noBroadcast = true;
                            log.info(tag, "invocation: ", invocation);
                            return [4 /*yield*/, this.invoke.invoke('transfer', invocation)];
                        case 2:
                            result = _a.sent();
                            console.log("result: ", result.data);
                            return [2 /*return*/, result.data.txid];
                        case 3:
                            e_16 = _a.sent();
                            log.error(tag, "e: ", e_16);
                            return [3 /*break*/, 4];
                        case 4: return [2 /*return*/];
                    }
                });
            });
        };
        this.purgeClient = function (address, asset) {
            var tag = TAG + " | purgeClient | ";
            try {
                //TODO
                return "bla";
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
    }
    return wallet;
}());
