import { Asset, BaseAmount } from '@xchainjs/xchain-util';
export declare type Address = string;
export declare type Network = 'testnet' | 'mainnet';
export declare type Balance = {
    asset: Asset;
    amount: BaseAmount;
};
export declare type TxType = 'transfer' | 'unknown';
export declare type TxHash = string;
export declare type TxTo = {
    to: Address;
    amount: BaseAmount;
};
export declare type TxFrom = {
    from: Address | TxHash;
    amount: BaseAmount;
};
export declare type Tx = {
    asset: Asset;
    from: TxFrom[];
    to: TxTo[];
    date: Date;
    type: TxType;
    hash: string;
};
export declare type Txs = Tx[];
export declare type TxsPage = {
    total: number;
    txs: Txs;
};
export declare type TxHistoryParams = {
    address: Address;
    offset?: number;
    limit?: number;
    startTime?: Date;
    asset?: string;
};
export declare type TxParams = {
    asset?: Asset;
    amount: BaseAmount;
    recipient: Address;
    memo?: string;
};
export declare type EstimateFeeParams = {
    sourceAsset: Asset;
    ethClient: any;
    ethInbound: any;
    inputAmount: number;
    memo: string;
};
export declare type FeesParams = {
    readonly empty?: '';
};
export declare type FeeOptionKey = 'average' | 'fast' | 'fastest';
export declare type FeeOption = Record<FeeOptionKey, BaseAmount>;
export declare type FeeType = 'byte' | 'base';
export declare type Fees = FeeOption & {
    type: FeeType;
};
export declare type XChainClientParams = {
    network?: Network;
    phrase?: string;
};
export declare type CallDepositParams = {
    inboundAddress: any;
    asset: Asset;
    memo: string;
    ethClient: any;
    amount: number;
};
export declare type Swap = {
    asset: Asset;
    amount: string;
    vaultAddress?: string;
    toAddress: string;
};
export interface config {
    spec: string;
    env: string;
    mode: string;
    username: string;
    addresses?: [];
    wallet?: any;
    pubkeys?: any;
    auth?: string;
    paths?: any;
    privWallet?: any;
    mnemonic?: string;
    queryKey?: string;
    offline?: boolean;
    pioneerApi?: boolean;
}
