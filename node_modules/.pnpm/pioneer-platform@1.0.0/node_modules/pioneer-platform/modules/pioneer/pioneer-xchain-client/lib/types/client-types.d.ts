import { ethers } from 'ethers';
import { BaseAmount } from '@xchainjs/xchain-util';
export declare type Address = string;
export declare enum Network {
    TEST = "kovan",
    MAIN = "homestead"
}
export declare type ClientUrl = {
    testnet: string;
    mainnet: string;
};
export declare type ExplorerUrl = {
    testnet: string;
    mainnet: string;
};
export declare type VaultTxOpts = {
    address: Address;
    amount: BaseAmount;
    memo: string;
    overrides?: ContractTxOverrides;
};
export declare type NormalTxOpts = {
    recipient: Address;
    amount: BaseAmount;
    overrides?: NormalTxOverrides;
};
export declare type NormalTxOverrides = {
    nonce?: ethers.BigNumberish;
    gasLimit?: ethers.BigNumberish;
    gasPrice?: ethers.BigNumberish;
    data?: ethers.BytesLike;
};
export declare type Erc20TxOpts = {
    assetAddress: Address;
    recipient: Address;
    amount: BaseAmount;
    overrides?: ContractTxOverrides;
};
export declare type ContractTxOverrides = {
    nonce?: ethers.BigNumberish;
    gasLimit: ethers.BigNumberish;
    gasPrice?: ethers.BigNumberish;
    value?: ethers.BigNumberish;
};
export declare type GasOracleResponse = {
    LastBlock?: string;
    SafeGasPrice?: string;
    ProposeGasPrice?: string;
    FastGasPrice?: string;
};
