"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
require('dotenv').config();
require('dotenv').config({ path: "./.env" });
require('dotenv').config({ path: "./../.env" });
require('dotenv').config({ path: "./../../.env" });
require('dotenv').config({ path: "../../../.env" });
require('dotenv').config({ path: "../../../../.env" });
require('dotenv').config({ path: "./../../../../.env" });
var pjson = require('../package.json');
var TAG = " | " + pjson.name + " | ";
var log = require('@pioneer-platform/loggerdog')();
var _a = require('@pioneer-platform/default-redis'), subscriber = _a.subscriber, publisher = _a.publisher, redis = _a.redis;
var cors = require('cors');
var bodyParser = require("body-parser");
var express = require("express");
var methodOverride = require("method-override");
var routes_1 = require("./routes/routes"); // here
var swaggerUi = require('swagger-ui-express');
var swaggerDocument = require('../api/dist/swagger.json');
//Rate limiter options
//https://github.com/animir/node-rate-limiter-flexible/wiki/Overall-example#create-simple-rate-limiter-and-consume-points-on-entry-point
var RateLimiterRedis = require('rate-limiter-flexible').RateLimiterRedis;
var app = express();
var server = require('http').Server(app);
var API_PORT = parseInt(process.env["API_PORT_PIONEER"]) || 80;
var RATE_LIMIT_RPM = parseInt(process.env["RATE_LIMIT_TPS"]) || 500;
//limiter
var rateLimiterRedis = new RateLimiterRedis({
    storeClient: redis,
    points: RATE_LIMIT_RPM,
    duration: 1
});
//TODO handle broke redis
// ReplyError: MISCONF Redis is configured
// This is caus Too many, but its not a too many, its a fucking broke server
// const WHITELIST_CACHE = []
// const rateLimiterMiddleware = async (req, res, next) => {
//     try{
//         if(req.headers.authorization){
//             let auth = req.headers.authorization
//             log.info('path: ',req.url)
//             let path = req.path
//             if(auth.indexOf('Bearer ')) auth.replace('Bearer ','')
//
//             //if in cache
//             if(WHITELIST_CACHE.indexOf(auth)){
//                 next();
//             } else {
//                 let isWhitelisted = await redis.sismember("PIONEER_WHITELIST_KEYS",auth)
//                 if(isWhitelisted){
//                     WHITELIST_CACHE.push(auth)
//                     next();
//                 } else {
//                     rateLimiterRedis.consume(req.ip)
//                         .then(() => {
//                             next();
//                         })
//                         .catch(_ => {
//                             res.status(429).send('Too Many Requests');
//                         });
//                 }
//             }
//         } else {
//             rateLimiterRedis.consume(req.ip)
//                 .then(() => {
//                     next();
//                 })
//                 .catch(_ => {
//                     res.status(429).send('Too Many Requests');
//                 });
//         }
//     }catch(e){
//         console.error(e)
//     }
// };
var corsOptions = {
    origin: function (origin, callback) {
        if (true) {
            callback(null, true);
        }
        else {
            callback(new Error('Not allowed by CORS'));
        }
    }
};
app.use(cors(corsOptions));
// app.use(rateLimiterMiddleware);
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());
app.use(methodOverride());
//socket
var SOCKET_MAX_CONNECTIONS = parseInt(process.env["SOCKET_MAX_CONNECTIONS"]) || 20;
//socket-io
var io = require('socket.io')(server);
io.sockets.setMaxListeners(SOCKET_MAX_CONNECTIONS);
//web
app.use('/', express.static('dist/spa'));
//docs
app.use('/docs', swaggerUi.serve, swaggerUi.setup(swaggerDocument));
//swagger.json
app.use('/spec', express.static('api/dist'));
//REST API v1
routes_1.RegisterRoutes(app); // and here
//globals
var globalSockets = {};
var usersBySocketId = {};
var usersByUsername = {};
var usersByKey = {};
var channel_history_max = 10;
//redis-bridge
subscriber.subscribe('blocks');
//networks
subscriber.subscribe('transactions:global:ETH');
subscriber.subscribe('transactions:global:ATOM');
subscriber.subscribe('transactions:global:BNB');
subscriber.subscribe('transactions:global:EOS');
//TODO moveme (payments should go to user by userId)
//private
subscriber.subscribe('payments');
subscriber.subscribe('invocations');
subscriber.subscribe('pairings');
subscriber.on('message', function (channel, payloadS) {
    return __awaiter(this, void 0, void 0, function () {
        var tag, payload, i, username, sockets, i_1, socketid, tx, type, from, to, amount, fee, j, event_1, addressInfo, summary, invocation, username, sockets, i, socketid, pairing, queryKey, sockets, i, socketid, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + ' | publishToFront | ';
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 16, , 17]);
                    log.info(tag, channel + " event: ", payloadS);
                    if (!(channel === 'payments')) return [3 /*break*/, 14];
                    payload = JSON.parse(payloadS);
                    log.info(tag, "payments: ", payload);
                    i = 0;
                    _a.label = 2;
                case 2:
                    if (!(i < payload.accounts.length)) return [3 /*break*/, 13];
                    username = payload.accounts[i];
                    if (!usersByUsername[username]) return [3 /*break*/, 11];
                    log.info(tag, " User is subscribed! username: ", username);
                    log.info(tag, "usersByUsername: ", usersByUsername);
                    //log.info(tag,"globalSockets: ",globalSockets)
                    log.info(tag, "usersBySocketId: ", usersBySocketId);
                    sockets = usersByUsername[username];
                    log.info(tag, "sockets: ", sockets);
                    i_1 = 0;
                    _a.label = 3;
                case 3:
                    if (!(i_1 < sockets.length)) return [3 /*break*/, 10];
                    socketid = sockets[i_1];
                    //push tx to user
                    log.info(tag, "socketid: ", socketid);
                    if (!globalSockets[socketid]) return [3 /*break*/, 8];
                    tx = payload;
                    type = void 0;
                    from = void 0;
                    to = void 0;
                    amount = void 0;
                    fee = void 0;
                    log.debug(tag, "tx: ", tx);
                    j = 0;
                    _a.label = 4;
                case 4:
                    if (!(j < tx.events.length)) return [3 /*break*/, 7];
                    event_1 = tx.events[j];
                    log.debug(tag, "event: ", event_1);
                    return [4 /*yield*/, redis.smembers(event_1.address + ":accounts")];
                case 5:
                    addressInfo = _a.sent();
                    if (addressInfo.indexOf(username) >= 0 && event_1.type === 'debit') {
                        type = 'send';
                    }
                    if (addressInfo.indexOf(username) >= 0 && event_1.type === 'credit') {
                        type = 'receive';
                    }
                    if (event_1.type === 'debit' && !event_1.fee) {
                        from = event_1.address;
                    }
                    if (event_1.type === 'debit' && event_1.fee) {
                        fee = {
                            asset: tx.asset
                        };
                    }
                    if (event_1.type === 'credit') {
                        to = event_1.address;
                        amount = event_1.amount;
                    }
                    _a.label = 6;
                case 6:
                    j++;
                    return [3 /*break*/, 4];
                case 7:
                    //default (TODO dont do this)
                    if (!fee) {
                        fee = {
                            "amount": 0.0002,
                            "asset": "ETH"
                        };
                    }
                    summary = {
                        type: type,
                        asset: tx.asset,
                        from: from,
                        to: to,
                        amount: amount,
                        fee: fee,
                        txid: tx.txid,
                        height: tx.height,
                        time: tx.time
                    };
                    globalSockets[socketid].emit('payments', summary);
                    return [3 /*break*/, 9];
                case 8:
                    log.error("Socket not found? socketid: ", socketid);
                    _a.label = 9;
                case 9:
                    i_1++;
                    return [3 /*break*/, 3];
                case 10: return [3 /*break*/, 12];
                case 11:
                    log.info(tag, " Payment to offline user! ");
                    _a.label = 12;
                case 12:
                    i++;
                    return [3 /*break*/, 2];
                case 13: return [3 /*break*/, 15];
                case 14:
                    if (channel === 'invocations') {
                        invocation = JSON.parse(payloadS);
                        log.info(tag, "invocation: ", invocation);
                        username = invocation.username;
                        if (!username)
                            throw Error("username required!");
                        if (usersByUsername[username]) {
                            sockets = usersByUsername[username];
                            for (i = 0; i < sockets.length; i++) {
                                socketid = sockets[i];
                                if (globalSockets[socketid]) {
                                    globalSockets[socketid].emit('message', invocation);
                                }
                            }
                        }
                        else {
                            log.error("User is not connected! username: ", username, " online: ", usersByUsername);
                            //throw Error("User is not connected!")
                        }
                    }
                    else if (channel === 'pairings') {
                        pairing = JSON.parse(payloadS);
                        log.info(tag, "pairing: ", pairing);
                        queryKey = pairing.queryKey;
                        log.info(tag, "usersByKey: ", usersByKey);
                        if (usersByKey[queryKey]) {
                            log.info(tag, "key found! ");
                            sockets = usersByKey[queryKey];
                            log.info(tag, "sockets: ", sockets);
                            for (i = 0; i < sockets.length; i++) {
                                socketid = sockets[i];
                                if (globalSockets[socketid]) {
                                    log.info(tag, "sending message to user!");
                                    globalSockets[socketid].emit('message', pairing);
                                }
                            }
                        }
                        else {
                            log.error("apiKey is not connected! queryKey: ", queryKey, " online: ", usersByKey);
                            //throw Error("User is not connected!")
                        }
                    }
                    else {
                        //TODO dont catchall globals?
                        //globals
                        io.emit(channel, payloadS);
                    }
                    _a.label = 15;
                case 15: return [3 /*break*/, 17];
                case 16:
                    e_1 = _a.sent();
                    log.error(tag, e_1);
                    throw e_1;
                case 17: return [2 /*return*/];
            }
        });
    });
});
/**
 *
 * subscribe to Payments
 *       Socket.io
 *
 *       Goals:
 *          * User subs to individual feed
 *          * announce when online
 *
 *
 */
io.on('connection', function (socket) {
    return __awaiter(this, void 0, void 0, function () {
        var tag;
        return __generator(this, function (_a) {
            tag = TAG + ' | io connection | ';
            log.debug(tag, 'a user connected', socket.id, " user: ", usersByUsername[socket.id]);
            redis.sadd("online:users", socket.id);
            redis.hincrby("globals", "usersOnline", Object.keys(usersByUsername).length);
            //set into global
            globalSockets[socket.id] = socket;
            socket.on('disconnect', function () {
                var username = usersByUsername[socket.id];
                log.info(tag, username + ' disconnected');
                redis.srem('online', username);
                //remove socket.id from username list
                if (usersByUsername[username])
                    usersByUsername[username].splice(usersByUsername[username].indexOf(socket.id), 1);
                delete globalSockets[socket.id];
                delete usersBySocketId[socket.id];
                redis.hset("globals", "usersOnline", Object.keys(usersByUsername).length);
            });
            socket.on('join', function (msg) {
                return __awaiter(this, void 0, void 0, function () {
                    var queryKey, queryKeyInfo, subscribePayload, error, connectPayload;
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0:
                                log.info(tag, '**** Join event! : ', typeof (msg));
                                //if(typeof(msg) === "string") msg = JSON.parse(msg)
                                log.info(tag, "message: ", msg);
                                queryKey = msg.queryKey;
                                if (!(queryKey && msg.username)) return [3 /*break*/, 2];
                                log.info(tag, "GIVEN: username: ", msg.username);
                                return [4 /*yield*/, redis.hgetall(queryKey)];
                            case 1:
                                queryKeyInfo = _a.sent();
                                log.info(tag, "ACTUAL: username: ", queryKeyInfo.username);
                                if (queryKeyInfo.username === msg.username) {
                                    usersBySocketId[socket.id] = msg.username;
                                    if (!usersByUsername[msg.username])
                                        usersByUsername[msg.username] = [];
                                    usersByUsername[msg.username].push(socket.id);
                                    redis.sadd('online', msg.username);
                                    subscribePayload = {
                                        success: true,
                                        username: msg.username
                                    };
                                    globalSockets[socket.id].emit('subscribedToUsername', subscribePayload);
                                }
                                else {
                                    log.error(tag, "Failed to join! pubkeyInfo.username:" + queryKeyInfo.username + " msg.username: " + msg.username);
                                    error = {
                                        code: 6,
                                        msg: "Failed to join! pubkeyInfo.username:" + queryKeyInfo.username + " msg.username: " + msg.username
                                    };
                                    globalSockets[socket.id].emit('errorMessage', error);
                                }
                                return [3 /*break*/, 3];
                            case 2:
                                if (msg.queryKey) {
                                    log.info(tag, "No username given! subbing to queryKey!");
                                    if (!usersByKey[msg.queryKey]) {
                                        usersByKey[msg.queryKey] = [socket.id];
                                    }
                                    else {
                                        usersByKey[msg.queryKey].push(socket.id);
                                    } //edge case multiple sockets on same key, push to all
                                    connectPayload = {
                                        success: true
                                    };
                                    globalSockets[socket.id].emit('connect', connectPayload);
                                    log.info(tag, "sdk subscribed to apiKey: ", msg.queryKey);
                                    log.info(tag, "usersByKey: ", usersByKey);
                                }
                                else {
                                    log.error(tag, "invalid join request! ");
                                }
                                _a.label = 3;
                            case 3: return [2 /*return*/];
                        }
                    });
                });
            });
            socket.on('message', function (msg) {
                return __awaiter(this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        log.debug(tag, '**** Received by socket api from client : ', typeof (msg));
                        if (typeof (msg) === "string")
                            msg = JSON.parse(msg);
                        return [2 /*return*/];
                    });
                });
            });
            return [2 /*return*/];
        });
    });
});
//Error handeling
function errorHandler(err, req, res, next) {
    if (res.headersSent) {
        return next(err);
    }
    log.error("ERROR: ", err);
    res.status(400).send({
        message: err.message,
        error: err
    });
}
app.use(errorHandler);
// module.exports = {
//     start: function () {
//         return start_server();
//     }
// }
var start_server = function () {
    return __awaiter(this, void 0, void 0, function () {
        var tag;
        return __generator(this, function (_a) {
            tag = TAG + " | start_server | ";
            try {
                server.listen(API_PORT, function () { return console.log("Server started listening to port " + API_PORT); });
                //TODO handle exit
                return [2 /*return*/, true];
            }
            catch (e) {
                log.error(tag, "e: ", e);
                throw e;
            }
            return [2 /*return*/];
        });
    });
};
start_server();
