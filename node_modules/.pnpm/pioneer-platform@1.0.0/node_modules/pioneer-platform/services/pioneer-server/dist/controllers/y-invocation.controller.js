"use strict";
/*

    Pioneer REST endpoints



 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.pioneerInvocationController = exports.ApiError = void 0;
var TAG = ' | API | ';
var pjson = require('../../package.json');
var log = require('@pioneer-platform/loggerdog')();
var _a = require('@pioneer-platform/default-redis'), subscriber = _a.subscriber, publisher = _a.publisher, redis = _a.redis, redisQueue = _a.redisQueue;
var connection = require("@pioneer-platform/default-mongo");
var queue = require("@pioneer-platform/redis-queue");
var short = require('short-uuid');
var usersDB = connection.get('users');
var pubkeysDB = connection.get('pubkeys');
var txsDB = connection.get('transactions');
var utxosDB = connection.get('utxo');
var invocationsDB = connection.get('invocations');
invocationsDB.createIndex({ invocationId: 1 }, { unique: true });
usersDB.createIndex({ id: 1 }, { unique: true });
txsDB.createIndex({ txid: 1 }, { unique: true });
utxosDB.createIndex({ txid: 1 }, { unique: true });
//globals
var BLOCKING_TIMEOUT_INVOCATION = process.env['BLOCKING_TIMEOUT_INVOCATION'] || 60;
//rest-ts
var tsoa_1 = require("tsoa");
var ApiError = /** @class */ (function (_super) {
    __extends(ApiError, _super);
    function ApiError(name, statusCode, message) {
        var _this = _super.call(this, message) || this;
        _this.name = name;
        _this.statusCode = statusCode;
        return _this;
    }
    return ApiError;
}(Error));
exports.ApiError = ApiError;
//route
var pioneerInvocationController = /** @class */ (function (_super) {
    __extends(pioneerInvocationController, _super);
    function pioneerInvocationController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     *  Wallet events
     *      invocations
     *      * Payment requests (pay x address)
     *      * sign contract action
     *      * Request to install app
     *
     *
     */
    pioneerInvocationController.prototype.invocation = function (authorization, body) {
        return __awaiter(this, void 0, void 0, function () {
            var tag, output, onlineUsers, invocationId, entry, mongoSave, timeStart, txid, timeEnd, e_1, errorResp;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tag = TAG + " | invocation | ";
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 7, , 8]);
                        output = {};
                        log.info(tag, "body: ", body);
                        return [4 /*yield*/, redis.smembers("online")];
                    case 2:
                        onlineUsers = _a.sent();
                        log.info(tag, "onlineUsers: ", onlineUsers);
                        log.info(tag, "username: ", body.username);
                        invocationId = "pioneer:invocation:v0.01:" + body.invocation.coin + ":" + short.generate();
                        //origin
                        //TODO signed by?
                        body.invocationId = invocationId;
                        entry = {
                            invocationId: invocationId,
                            invocation: body
                        };
                        return [4 /*yield*/, invocationsDB.insert(entry)];
                    case 3:
                        mongoSave = _a.sent();
                        log.info(tag, "mongoSave: ", mongoSave);
                        if (!(onlineUsers.indexOf(body.username) >= 0)) return [3 /*break*/, 5];
                        body.invocationId = invocationId;
                        //auth (app needs to verify!)
                        body.auth = authorization;
                        //send
                        publisher.publish("invocations", JSON.stringify(body));
                        //block till confirmation
                        log.info(tag, " STARTING BLOCKING INVOKE id: ", invocationId);
                        timeStart = new Date().getTime();
                        return [4 /*yield*/, redisQueue.blpop(invocationId, BLOCKING_TIMEOUT_INVOCATION)];
                    case 4:
                        txid = _a.sent();
                        timeEnd = new Date().getTime();
                        log.info(tag, " END BLOCKING INVOKE T: ", (timeEnd - timeStart) / 1000);
                        //if
                        if (!txid[1])
                            throw Error("Failed to broadcast! timeout!");
                        //TODO if timeout return invocationId
                        output.success = true;
                        output.txid = txid[1];
                        output.ttr = (timeEnd - timeStart) / 1000;
                        if (body.invocation.noBroadcast)
                            output.broadcast = false;
                        return [2 /*return*/, output];
                    case 5:
                        output.invocationId = invocationId;
                        output.msg = "User is offline! username:" + body.invocation.username;
                        return [2 /*return*/, output];
                    case 6: return [3 /*break*/, 8];
                    case 7:
                        e_1 = _a.sent();
                        errorResp = {
                            success: false,
                            tag: tag,
                            e: e_1
                        };
                        log.error(tag, "e: ", { errorResp: errorResp });
                        throw new ApiError("error", 503, "error: " + e_1.toString());
                    case 8: return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        tsoa_1.Post('/invocation'),
        __param(0, tsoa_1.Header('Authorization')), __param(1, tsoa_1.Body())
    ], pioneerInvocationController.prototype, "invocation");
    pioneerInvocationController = __decorate([
        tsoa_1.Tags('Invocation (Payment Requests) Endpoint ')
        /**
         *  Test
         */
        ,
        tsoa_1.Route('')
    ], pioneerInvocationController);
    return pioneerInvocationController;
}(tsoa_1.Controller));
exports.pioneerInvocationController = pioneerInvocationController;
