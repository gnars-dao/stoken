/*

    Pioneer API
      A High Availability blockchain api

    Goals:
      v1 compatibility with watchtower with 0 change
      Multi-asset support

    V2 goals:
      Treat Xpubs as passwords
      encrypt long term data storage
      maintain hash table to detect and cache payments



    getTransactions:

    Data: example

    { success: true,
      pagination: { page: 1, total_objects: 88, total_pages: 9 },
      data:
        [ { txid:
          '',
          status: 'confirmed',
          type: 'send',
          amount: -78602,
          date: '2019-05-10T21:01:23Z',
          confirmations: 1055,
          network: 'BTC',
          xpub:
            '' },
         }
       ]
      }
     }

*/
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var TAG = " | Pioneer | ";
var queue = require('@pioneer-platform/redis-queue');
var uuid = require('short-uuid');
var blocknative = require("@pioneer-platform/blocknative-client");
blocknative.init();
var _a = require('@pioneer-platform/pioneer-coins'), supportedBlockchains = _a.supportedBlockchains, supportedAssets = _a.supportedAssets, getPaths = _a.getPaths, get_address_from_xpub = _a.get_address_from_xpub;
//const bcrypt = require('bcryptjs');
var numbro = require("numbro");
var log = require('@pioneer-platform/loggerdog')();
var _b = require('@pioneer-platform/default-redis'), subscriber = _b.subscriber, publisher = _b.publisher, redis = _b.redis, redisQueue = _b.redisQueue;
var connection = require("@pioneer-platform/default-mongo");
var wait = require('wait-promise');
var sleep = wait.sleep;
var usersDB = connection.get('users');
var txsDB = connection.get('transactions');
var pubkeysDB = connection.get('pubkeys');
//let txsRawDB = connection.get('transactions-raw')
var inputsDB = connection.get('unspent');
usersDB.createIndex({ id: 1 }, { unique: true });
txsDB.createIndex({ txid: 1 }, { unique: true });
//txsRawDB.createIndex({txhash: 1}, {unique: true})
inputsDB.createIndex({ txid: 1 }, { unique: true });
pubkeysDB.createIndex({ pubkey: 1 }, { unique: true });
var BALANCE_ON_REGISTER = true;
module.exports = {
    register: function (username, xpubs, walletId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, register_pubkeys(username, xpubs, walletId)];
            });
        });
    },
    update: function (username, xpubs, walletId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, update_pubkeys(username, xpubs, walletId)];
            });
        });
    }
};
var register_xpub = function (username, pubkey, walletId) {
    return __awaiter(this, void 0, void 0, function () {
        var tag, xpub, queueId, account, index, address, work, account, index, address, work, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | register_xpub | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 9, , 10]);
                    if (!pubkey.coin)
                        throw Error("102: invalid pubkey! missing coin!");
                    if (!pubkey.symbol)
                        pubkey.symbol = pubkey.coin;
                    xpub = pubkey.xpub;
                    //save info
                    redis.sadd(xpub + ":username", username);
                    redis.hset(xpub, "xpub", pubkey.xpub);
                    redis.hset(xpub, "username", username);
                    redis.hset(xpub, "coin", pubkey.coin);
                    redis.hset(xpub, "network", pubkey.symbol);
                    redis.hset(xpub, "type", pubkey.script_type);
                    queueId = uuid.generate();
                    if (!pubkey.zpub) return [3 /*break*/, 4];
                    account = 0;
                    index = 0;
                    return [4 /*yield*/, get_address_from_xpub(pubkey.xpub, pubkey.scriptType, pubkey.coin, account, index, false, false)];
                case 2:
                    address = _a.sent();
                    work = {
                        type: 'zpub',
                        pubkey: pubkey.zpub,
                        master: address,
                        coin: pubkey.coin,
                        network: pubkey.coin,
                        asset: pubkey.coin,
                        queueId: queueId,
                        username: username,
                        walletId: walletId,
                        inserted: new Date().getTime()
                    };
                    return [4 /*yield*/, queue.createWork("pioneer:pubkey:ingest", work)];
                case 3:
                    _a.sent();
                    return [3 /*break*/, 8];
                case 4:
                    if (!pubkey.xpub) return [3 /*break*/, 7];
                    account = 0;
                    index = 0;
                    return [4 /*yield*/, get_address_from_xpub(pubkey.xpub, pubkey.scriptType, pubkey.coin, account, index, false, false)];
                case 5:
                    address = _a.sent();
                    work = {
                        type: 'xpub',
                        coin: pubkey.coin,
                        pubkey: pubkey.xpub,
                        master: address,
                        network: pubkey.coin,
                        asset: pubkey.coin,
                        queueId: queueId,
                        username: username,
                        xpub: xpub,
                        inserted: new Date().getTime()
                    };
                    return [4 /*yield*/, queue.createWork("pioneer:pubkey:ingest", work)];
                case 6:
                    _a.sent();
                    return [3 /*break*/, 8];
                case 7:
                    log.error(tag, "pubkey: ", pubkey);
                    throw Error("Attempting to register an invalid xpub! ");
                case 8: return [2 /*return*/, queueId];
                case 9:
                    e_1 = _a.sent();
                    console.error(tag, "e: ", e_1);
                    throw e_1;
                case 10: return [2 /*return*/];
            }
        });
    });
};
var register_address = function (username, pubkey, walletId) {
    return __awaiter(this, void 0, void 0, function () {
        var tag, address, coin, queueId, work;
        return __generator(this, function (_a) {
            tag = TAG + " | register_address | ";
            try {
                if (!pubkey.symbol)
                    pubkey.symbol = pubkey.coin;
                address = pubkey.pubkey;
                coin = pubkey.coin;
                redis.sadd(address + ":username", username);
                redis.hset(address, "address", address);
                redis.hset(address, "coin", pubkey.symbol);
                redis.hset(address, "network", pubkey.coin);
                queueId = uuid.generate();
                work = {
                    type: 'address',
                    coin: pubkey.coin,
                    pubkey: address,
                    network: pubkey.coin,
                    asset: pubkey.coin,
                    walletId: walletId,
                    queueId: queueId,
                    username: username,
                    address: address,
                    master: address,
                    inserted: new Date().getTime()
                };
                log.info("adding work: ", work);
                queue.createWork("pioneer:pubkey:ingest", work);
                return [2 /*return*/, queueId];
            }
            catch (e) {
                console.error(tag, "e: ", e);
                throw e;
            }
            return [2 /*return*/];
        });
    });
};
var update_pubkeys = function (username, pubkeys, walletId) {
    return __awaiter(this, void 0, void 0, function () {
        var tag, saveActions, output, allPubkeys, PubkeyMap, i, pubkeyInfo, allKnownPubkeys, knownPubkeys_1, i, unknown, i, pubkey, pubkeyInfo, entryMongo, xpub, queueId, queueId, result, e_2, isDone, promised, i, promise, _a, e_3;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    tag = TAG + " | update_pubkeys | ";
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 19, , 20]);
                    log.info(tag, "input: ", { username: username, pubkeys: pubkeys, walletId: walletId });
                    saveActions = [];
                    output = {};
                    output.work = [];
                    allPubkeys = [];
                    PubkeyMap = {};
                    for (i = 0; i < pubkeys.length; i++) {
                        pubkeyInfo = pubkeys[i];
                        allPubkeys.push(pubkeyInfo.pubkey);
                        PubkeyMap[pubkeyInfo.pubkey] = pubkeyInfo;
                    }
                    //remove duplicates
                    allPubkeys = Array.from(new Set(allPubkeys));
                    //get pubkeys from mongo
                    log.info(tag, "allPubkeys: ", allPubkeys);
                    return [4 /*yield*/, pubkeysDB.find({ "pubkey": { "$in": allPubkeys } })];
                case 2:
                    allKnownPubkeys = _b.sent();
                    log.info(tag, "allKnownPubkeys: ", allKnownPubkeys);
                    knownPubkeys_1 = [];
                    for (i = 0; i < allKnownPubkeys.length; i++) {
                        knownPubkeys_1.push(allKnownPubkeys[i].pubkey);
                    }
                    log.info(tag, "allKnownPubkeys: ", allKnownPubkeys.length);
                    log.info(tag, "allPubkeys: ", allPubkeys.length);
                    if (!(allPubkeys.length > allKnownPubkeys.length)) return [3 /*break*/, 17];
                    unknown = allPubkeys.filter(function (x) { return !knownPubkeys_1.includes(x); });
                    log.info(tag, "unknown: ", unknown);
                    log.info(tag, "Registering pubkeys : ", unknown.length);
                    i = 0;
                    _b.label = 3;
                case 3:
                    if (!(i < unknown.length)) return [3 /*break*/, 10];
                    pubkey = unknown[i];
                    pubkeyInfo = PubkeyMap[pubkey];
                    entryMongo = {
                        coin: pubkeyInfo.coin,
                        path: pubkeyInfo.path,
                        master: pubkeyInfo.master,
                        script_type: pubkeyInfo.script_type,
                        xpub: true,
                        network: pubkeyInfo.network,
                        created: new Date().getTime(),
                        tags: [username, pubkeyInfo.coin, pubkeyInfo.network, walletId]
                    };
                    if (!(pubkeyInfo.type === "xpub" || pubkeyInfo.type === "zpub")) return [3 /*break*/, 5];
                    xpub = pubkeyInfo.xpub;
                    entryMongo.pubkey = xpub;
                    entryMongo.xpub = true;
                    saveActions.push({ insertOne: entryMongo });
                    return [4 /*yield*/, register_xpub(username, pubkeyInfo, walletId)
                        //add to Mutex array for async xpub register option
                    ];
                case 4:
                    queueId = _b.sent();
                    //add to Mutex array for async xpub register option
                    output.work.push(queueId);
                    return [3 /*break*/, 8];
                case 5:
                    if (!(pubkeyInfo.type === "address")) return [3 /*break*/, 7];
                    entryMongo.pubkey = pubkeyInfo.pubkey;
                    return [4 /*yield*/, register_address(username, pubkeyInfo, walletId)];
                case 6:
                    queueId = _b.sent();
                    output.work.push(queueId);
                    return [3 /*break*/, 8];
                case 7:
                    log.error("Unhandled type: ", pubkeyInfo.type);
                    _b.label = 8;
                case 8:
                    saveActions.push({ insertOne: entryMongo });
                    _b.label = 9;
                case 9:
                    i++;
                    return [3 /*break*/, 3];
                case 10:
                    _b.trys.push([10, 12, , 13]);
                    return [4 /*yield*/, pubkeysDB.bulkWrite(saveActions, { ordered: false })];
                case 11:
                    result = _b.sent();
                    log.info(tag, "result: ", result);
                    return [3 /*break*/, 13];
                case 12:
                    e_2 = _b.sent();
                    log.error(tag, "Failed to update pubkeys! e: ", e_2);
                    return [3 /*break*/, 13];
                case 13:
                    if (!BALANCE_ON_REGISTER) return [3 /*break*/, 16];
                    output.results = [];
                    //verifies balances returned are final
                    log.info(tag, " BALANCE VERIFY ON");
                    isDone = false;
                    _b.label = 14;
                case 14:
                    if (!!isDone) return [3 /*break*/, 16];
                    //block on
                    log.info(tag, "output.work: ", output.work);
                    promised = [];
                    for (i = 0; i < output.work.length; i++) {
                        promise = redisQueue.blpop(output.work[i], 30);
                        promised.push(promise);
                    }
                    _a = output;
                    return [4 /*yield*/, Promise.all(promised)];
                case 15:
                    _a.results = _b.sent();
                    isDone = true;
                    return [3 /*break*/, 14];
                case 16: return [3 /*break*/, 18];
                case 17:
                    log.info(tag, " No new pubkeys! ");
                    _b.label = 18;
                case 18:
                    log.info(tag, " return object: ", output);
                    return [2 /*return*/, output];
                case 19:
                    e_3 = _b.sent();
                    console.error(tag, "e: ", e_3);
                    throw e_3;
                case 20: return [2 /*return*/];
            }
        });
    });
};
var register_pubkeys = function (username, pubkeys, walletId) {
    return __awaiter(this, void 0, void 0, function () {
        var tag, saveActions, output, i, pubkeyInfo, entryMongo, xpub, queueId, zpub, queueId, queueId, keyExists, saveMongo, isDone, promised, i, promise, _a, e_4;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    tag = TAG + " | register_pubkeys | ";
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 18, , 19]);
                    log.info(tag, "input: ", { username: username, pubkeys: pubkeys, walletId: walletId });
                    saveActions = [];
                    output = {};
                    output.work = [];
                    i = 0;
                    _b.label = 2;
                case 2:
                    if (!(i < pubkeys.length)) return [3 /*break*/, 14];
                    pubkeyInfo = pubkeys[i];
                    log.info(tag, "pubkeyInfo: ", pubkeyInfo);
                    if (!pubkeyInfo.coin)
                        throw Error("Invalid pubkey required field: coin");
                    //hack missing symbol
                    if (!pubkeyInfo.symbol)
                        pubkeyInfo.symbol = pubkeyInfo.coin;
                    if (!pubkeyInfo.script_type)
                        throw Error("Invalid pubkey required field: script_type coin:" + pubkeyInfo.coin);
                    if (!pubkeyInfo.network)
                        throw Error("Invalid pubkey required field: network coin:" + pubkeyInfo.coin);
                    if (!pubkeyInfo.master)
                        throw Error("Invalid pubkey required field: master coin:" + pubkeyInfo.coin);
                    //if eth use master
                    if (pubkeyInfo.coin === 'ETH') {
                        //register to blocknative
                        blocknative.submitAddress("ETH", pubkeyInfo.master);
                    }
                    entryMongo = {
                        coin: pubkeyInfo.coin,
                        asset: pubkeyInfo.coin,
                        path: pubkeyInfo.path,
                        script_type: pubkeyInfo.script_type,
                        network: pubkeyInfo.network,
                        created: new Date().getTime(),
                        tags: [username, pubkeyInfo.coin, pubkeyInfo.network, walletId]
                    };
                    if (!(pubkeyInfo.type === "xpub")) return [3 /*break*/, 4];
                    xpub = pubkeyInfo.xpub;
                    entryMongo.pubkey = xpub;
                    entryMongo.xpub = xpub;
                    entryMongo.xpub = true;
                    entryMongo.type = 'xpub';
                    return [4 /*yield*/, register_xpub(username, pubkeyInfo, walletId)
                        //add to Mutex array for async xpub register option
                    ];
                case 3:
                    queueId = _b.sent();
                    //add to Mutex array for async xpub register option
                    output.work.push(queueId);
                    return [3 /*break*/, 9];
                case 4:
                    if (!(pubkeyInfo.type === "zpub")) return [3 /*break*/, 6];
                    zpub = pubkeyInfo.zpub;
                    entryMongo.pubkey = zpub;
                    entryMongo.zpub = zpub;
                    entryMongo.zpub = true;
                    entryMongo.type = 'zpub';
                    return [4 /*yield*/, register_xpub(username, pubkeyInfo, walletId)
                        //add to Mutex array for async xpub register option
                    ];
                case 5:
                    queueId = _b.sent();
                    //add to Mutex array for async xpub register option
                    output.work.push(queueId);
                    return [3 /*break*/, 9];
                case 6:
                    if (!(pubkeyInfo.type === "address")) return [3 /*break*/, 8];
                    entryMongo.pubkey = pubkeyInfo.pubkey;
                    entryMongo.master = pubkeyInfo.pubkey;
                    entryMongo.address = pubkeyInfo.address;
                    return [4 /*yield*/, register_address(username, pubkeyInfo, walletId)];
                case 7:
                    queueId = _b.sent();
                    output.work.push(queueId);
                    return [3 /*break*/, 9];
                case 8:
                    log.error("Unhandled type: ", pubkeyInfo.type);
                    _b.label = 9;
                case 9:
                    //verify write
                    log.info(tag, "entryMongo: ", entryMongo);
                    return [4 /*yield*/, pubkeysDB.findOne({ pubkey: entryMongo.pubkey })];
                case 10:
                    keyExists = _b.sent();
                    if (!keyExists) return [3 /*break*/, 11];
                    log.info(tag, "Key already registered! key: ", entryMongo);
                    return [3 /*break*/, 13];
                case 11: return [4 /*yield*/, pubkeysDB.insert(entryMongo)];
                case 12:
                    saveMongo = _b.sent();
                    log.info(tag, "saveMongo: ", saveMongo);
                    _b.label = 13;
                case 13:
                    i++;
                    return [3 /*break*/, 2];
                case 14:
                    if (!BALANCE_ON_REGISTER) return [3 /*break*/, 17];
                    output.results = [];
                    //verifies balances returned are final
                    log.info(tag, " BALANCE VERIFY ON");
                    isDone = false;
                    _b.label = 15;
                case 15:
                    if (!!isDone) return [3 /*break*/, 17];
                    //block on
                    log.info(tag, "output.work: ", output.work);
                    promised = [];
                    for (i = 0; i < output.work.length; i++) {
                        promise = redisQueue.blpop(output.work[i], 30);
                        promised.push(promise);
                    }
                    _a = output;
                    return [4 /*yield*/, Promise.all(promised)];
                case 16:
                    _a.results = _b.sent();
                    isDone = true;
                    return [3 /*break*/, 15];
                case 17:
                    log.info(tag, " return object: ", output);
                    return [2 /*return*/, output];
                case 18:
                    e_4 = _b.sent();
                    console.error(tag, "e: ", e_4);
                    throw e_4;
                case 19: return [2 /*return*/];
            }
        });
    });
};
