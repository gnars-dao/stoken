"use strict";
/*
    Primary Application Module

      Pioneer Platform

          -highlander
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.onStart = void 0;
var TAG = ' | APP | ';
var CryptoJS = require("crypto-js");
var bip39 = require("bip39");
var App = require("@pioneer-platform/pioneer-app");
var figlet = require('figlet');
var bcrypt = require("bcryptjs");
var chalk = require("chalk");
var wait = require('wait-promise');
var sleep = wait.sleep;
var log = require('electron-log');
var generator = require('generate-password');
//Globals
var WALLETS_LOADED = [];
var WALLET_LOADED = {};
var WALLET_CONTEXT = 0;
var FIO_ACCEPT = false;
var FIO_REJECT = false;
var PASSWORDLESS_ENABLE = false;
var WALLET_PASSWORD;
var WALLET_HASH;
var USERNAME;
var PRIMARY_VAULT;
var FIRST_START = true;
function standardRandomBytesFunc(size) {
    /* istanbul ignore if: not testable on node */
    return CryptoJS.lib.WordArray.random(size).toString();
}
//feature flags
var featureSoftwareCreate = process.env['CREATE_SOFTWARE_FEATURE'];
var featurePasswordless = process.env['PASSWORDLESS_FEATURE'];
var featureInsecurePassword = process.env['INSECURE_PASSWORD'];
function onStart(event, data) {
    return __awaiter(this, void 0, void 0, function () {
        var tag;
        return __generator(this, function (_a) {
            tag = TAG + " | onStart | ";
            try {
                log.info(tag, " onStart() ");
                if (FIRST_START) {
                    //Print banner
                    log.info(chalk.red(figlet.textSync('Pioneer-Native', { horizontalLayout: 'full' })));
                    log.info("\n \n \n        ,    .  ,   .           .\n" +
                        "    *  / \\_ *  / \\_      " +
                        chalk.yellowBright(".-.") +
                        "  *       *   /\\'__        *\n" +
                        "      /    \\  /    \\,   " +
                        chalk.yellowBright("( â‚¿ )") +
                        "     .    _/  /  \\  *'.\n" +
                        " .   /\\/\\  /\\/ :' __ \\_  " +
                        chalk.yellowBright(" - ") +
                        "          _^/  ^/    `--.\n" +
                        "    /    \\/  \\  _/  \\-'\\      *    /.' ^_   \\_   .'\\  *\n" +
                        "  /\\  .-   `. \\/     \\ /==~=-=~=-=-;.  _/ \\ -. `_/   \\\n" +
                        " /  `-.__ ^   / .-'.--\\ =-=~_=-=~=^/  _ `--./ .-'  `-\n" +
                        "/        `.  / /       `.~-^=-=~=^=.-'      '-._ `._");
                    FIRST_START = false;
                }
                // let configStatus = checkConfigs()
                // let config = await App.getConfig()
                // log.info(tag,"config: ",config)
                // log.debug(tag,"configStatus() | configStatus: ", configStatus)
                //
                // if(data.password){
                //     config.temp = data.password
                //     WALLET_PASSWORD = data.password
                //     if(featureInsecurePassword){
                //         //write password to file (auto-login)
                //         //NOTE: it is bad form to store USER passwords on disk
                //         //however: it is accepted to store generated passwords on disk
                //         await App.updateConfig({temp: data.password});
                //     }
                // }
                //
                // if(!config){
                //     //TODO prompt language?
                //     //make config
                //     await App.initConfig("english");
                //     await App.updateConfig({created: new Date().getTime()});
                //     config = await App.getConfig()
                //
                //     //TODO when pioneer local node working
                //     //event.sender.send('navigation',{ dialog: 'Create', action: 'open'})
                //
                //     //navigate to setup
                //     event.sender.send('navigation',{ dialog: 'Setup', action: 'open'})
                //
                //     return true
                // }
                //
                // if(config && !config.promptedPasswordless){
                //     //log.info(tag," offer encryption ")
                //     //TODO
                //     //event.sender.send('navigation',{ dialog: 'PasswordCreate', action: 'open'})
                //     //return true
                // }
                //
                //
                // if(config && !config.promptedFio){
                //     //TODO opt in to FIO
                // }
                //
                // //if pioneer api found
                // // let url = await pioneer.url()
                // // log.debug("url: ",url)
                // //
                // // let health = await pioneer.health()
                // // log.info("health: ",health)
                //
                // //if online
                // // if(health.online){
                // //   //TODO state online
                // //
                // // }
                //
                // // if(!config.username){
                // //   //create username
                // //   let randomChars = generator.generateMultiple(1, {
                // //     length: 10,
                // //     uppercase: false
                // //   });
                // //   USERNAME = "temp:"+randomChars[0]
                // //   config.username = USERNAME
                // //   await App.updateConfig({username:USERNAME});
                // // } else {
                // //   USERNAME = config.username
                // // }
                //
                // if(!config.temp && config.passwordHash && !WALLET_PASSWORD){
                //     WALLET_HASH = config.passwordHash
                //     event.sender.send('navigation',{ dialog: 'Unlock', action: 'open'})
                //     return
                // } else if(config.temp) {
                //     WALLET_PASSWORD = config.temp
                // } else {
                //     //generate password
                //     if(featurePasswordless){
                //         log.info(tag,"featurePasswordless TRUE")
                //         //create password
                //         let randomChars = generator.generateMultiple(1, {
                //             length: 10,
                //             uppercase: false
                //         });
                //         WALLET_PASSWORD = randomChars[0]
                //         await App.updateConfig({temp:WALLET_PASSWORD});
                //     } else {
                //         //get password
                //         event.sender.send('navigation',{ dialog: 'Unlock', action: 'open'})
                //         return true
                //     }
                // }
                // if(!WALLET_PASSWORD) throw Error("Error: Password required! ")
                //
                // //get wallet files
                // let walletFiles = await App.getWalletNames()
                // log.info("walletFiles: ",walletFiles)
                //
                // if(!config.spec){
                //     //config.spec = process.env['URL_PIONEER_SPEC'] || "https://pioneers.dev/spec/swagger.json"
                //     config.spec = "https://pioneers.dev/spec/swagger.json"
                // }
                //
                // if(walletFiles.length === 0){
                //     //Always have atleast 1 wallet!
                //     log.info(" No Wallets found! ")
                //
                //     return true
                // }
                //
                // let isTestnet
                // //if feature flag mainnet
                // if(process.env['MAINNET_FEATURE']){
                //     //TODO offer promt?
                // } else {
                //     isTestnet = true
                //     config.isTestnet = isTestnet
                // }
                //
                //
                // //start App
                // if(!WALLET_PASSWORD) throw Error("unable to start! missing, WALLET_PASSWORD")
                // config.password = WALLET_PASSWORD
                // log.info(tag,"config: ",config)
                // let resultInit = await App.init(config)
                // log.info("resultInit: ",resultInit)
                // event.sender.send('init',resultInit)
                // event.sender.send('navigation',{ dialog: 'Connect', action: 'close'})
                //
                // let wallets = App.getWallets()
                //
                //
                // //TODO is context pref in config?
                //
                // //set primary context
                // let context = wallets[0]
                // WALLETS_LOADED = context
                //load masters
                // let info = await context.getInfo()
                // log.info("info: ",info)
                //Start wallet interface
            }
            catch (e) {
                console.error(tag, "e: ", e);
                return [2 /*return*/, { error: e }];
            }
            return [2 /*return*/];
        });
    });
}
exports.onStart = onStart;
