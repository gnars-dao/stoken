"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
/*
      update tx's by address worker

      Start

 */
require('dotenv').config();
require('dotenv').config({ path: "../../../.env" });
require('dotenv').config({ path: "./../../.env" });
require('dotenv').config({ path: "../../../../.env" });
// console.log(process.env)
var packageInfo = require("../package.json");
var TAG = " | " + packageInfo.name + " | ";
var log = require('@pioneer-platform/loggerdog')();
var _a = require('@pioneer-platform/default-redis'), subscriber = _a.subscriber, publisher = _a.publisher, redis = _a.redis, redisQueue = _a.redisQueue;
var blockbook = require('@pioneer-platform/blockbook');
var queue = require("@pioneer-platform/redis-queue");
var connection = require("@pioneer-platform/default-mongo");
var wait = require('wait-promise');
var sleep = wait.sleep;
var networks = {
    'ETH': require('@pioneer-platform/eth-network'),
    'ATOM': require('@pioneer-platform/cosmos-network'),
    'BNB': require('@pioneer-platform/bnb-network'),
    // 'EOS' : require('@pioneer-platform/eos-network'),
    'FIO': require('@pioneer-platform/fio-network'),
    'ANY': require('@pioneer-platform/utxo-network'),
    'RUNE': require('@pioneer-platform/thor-network'),
};
networks.ANY.init('full');
networks.ETH.init();
var usersDB = connection.get('users');
var txsDB = connection.get('transactions');
var utxosDB = connection.get('utxo');
var pubkeysDB = connection.get('pubkeys');
var unspentDB = connection.get('unspent');
usersDB.createIndex({ id: 1 }, { unique: true });
txsDB.createIndex({ txid: 1 }, { unique: true });
utxosDB.createIndex({ txid: 1 }, { unique: true });
pubkeysDB.createIndex({ pubkey: 1 }, { unique: true });
unspentDB.createIndex({ txid: 1 }, { unique: true });
var push_balance_event = function (work, balance) {
    return __awaiter(this, void 0, void 0, function () {
        var tag, balanceEvent;
        return __generator(this, function (_a) {
            tag = TAG + " | push_balance_event | ";
            try {
                balanceEvent = {
                    username: work.username,
                    coin: work.coin,
                    network: work.coin,
                    balance: balance
                };
                publisher.publish('', JSON.stringify(balanceEvent));
            }
            catch (e) {
                log.error(tag, e);
            }
            return [2 /*return*/];
        });
    });
};
var do_work = function () {
    return __awaiter(this, void 0, void 0, function () {
        var tag, work, allWork, balance, updateResult, ethInfo, tokens, i, token, balance_1, updateResult_1, balance, updateResult, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    tag = TAG + " | do_work | ";
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 17, , 18]);
                    return [4 /*yield*/, queue.count("pioneer:pubkey:ingest")];
                case 2:
                    allWork = _a.sent();
                    log.debug(tag, "allWork: ", allWork);
                    return [4 /*yield*/, queue.getWork("pioneer:pubkey:ingest", 1)];
                case 3:
                    work = _a.sent();
                    if (!work) return [3 /*break*/, 16];
                    log.info("work: ", work);
                    //TODO just type the work damnit
                    if (work.address)
                        work.pubkey = work.address;
                    if (work.zpub)
                        work.type = "zpub";
                    if (work.zpub)
                        work.pubkey = work.zpub;
                    if (work.xpub)
                        work.type = "xpub";
                    if (work.xpub)
                        work.pubkey = work.xpub;
                    if (!work.type && work.address)
                        work.type = "address";
                    if (!work.username)
                        throw Error("102: invalid work! missing username");
                    if (!work.pubkey)
                        throw Error("103: invalid work! missing pubkey");
                    if (!work.coin)
                        throw Error("104: invalid work! missing coin");
                    if (!work.type)
                        throw Error("105: invalid work! missing type");
                    if (!work.queueId)
                        throw Error("106: invalid work! missing queueId");
                    if (work.type !== 'address' && work.type !== 'xpub' && work.type !== 'zpub')
                        throw Error("Unknown type! " + work.type);
                    if (!(work.type === "xpub" || work.type === "zpub")) return [3 /*break*/, 6];
                    return [4 /*yield*/, blockbook.getBalanceByXpub(work.coin, work.pubkey)];
                case 4:
                    balance = _a.sent();
                    log.info(tag, work.username + " Balance (" + work.coin + "): ", balance);
                    return [4 /*yield*/, redis.hset(work.username + ":assets:" + work.walletId, work.coin, balance)];
                case 5:
                    updateResult = _a.sent();
                    if (updateResult)
                        push_balance_event(work, balance);
                    log.info(tag, "updateResult: ", updateResult);
                    return [3 /*break*/, 15];
                case 6:
                    if (!(work.type === "address")) return [3 /*break*/, 14];
                    if (!(work.coin === 'ETH')) return [3 /*break*/, 11];
                    return [4 /*yield*/, networks['ETH'].getBalanceTokens(work.pubkey)];
                case 7:
                    ethInfo = _a.sent();
                    log.debug(tag, "ethInfo: ", ethInfo);
                    tokens = Object.keys(ethInfo.balances);
                    i = 0;
                    _a.label = 8;
                case 8:
                    if (!(i < tokens.length)) return [3 /*break*/, 11];
                    token = tokens[i];
                    balance_1 = ethInfo.balances[token];
                    return [4 /*yield*/, redis.hset(work.username + ":assets:" + work.walletId, token, balance_1)];
                case 9:
                    updateResult_1 = _a.sent();
                    if (updateResult_1)
                        push_balance_event(work, balance_1);
                    log.info(tag, "updateResult: ", updateResult_1);
                    _a.label = 10;
                case 10:
                    i++;
                    return [3 /*break*/, 8];
                case 11:
                    // if BSC get tokens
                    // if BNB get tokens
                    //
                    //get balance
                    if (!networks[work.coin] || !networks[work.coin].getBalance)
                        throw Error("102: coin not supported! " + work.coin);
                    return [4 /*yield*/, networks[work.coin].getBalance(work.pubkey)
                        //
                    ];
                case 12:
                    balance = _a.sent();
                    //
                    log.info(tag, "address ingestion");
                    return [4 /*yield*/, redis.hset(work.username + ":assets:" + work.walletId, work.coin, balance)];
                case 13:
                    updateResult = _a.sent();
                    if (updateResult)
                        push_balance_event(work, balance);
                    return [3 /*break*/, 15];
                case 14:
                    //unhandled work!
                    log.error(work);
                    _a.label = 15;
                case 15:
                    //release
                    redis.lpush(work.queueId, JSON.stringify({ success: true }));
                    _a.label = 16;
                case 16: return [3 /*break*/, 18];
                case 17:
                    e_1 = _a.sent();
                    log.error(tag, "e: ", e_1);
                    log.error(tag, "e: ", e_1.message);
                    work.error = e_1.message;
                    queue.createWork("pioneer:pubkey:ingest:deadletter", work);
                    return [3 /*break*/, 18];
                case 18:
                    //dont stop working even if error
                    do_work();
                    return [2 /*return*/];
            }
        });
    });
};
//start working on install
log.info(TAG, " worker started! ", "");
do_work();
