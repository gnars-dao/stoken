import type * as Messages from '@keepkey/device-protocol/lib/messages_pb';
import type * as Types from '@keepkey/device-protocol/lib/types_pb';
import type { KeepKeySdk } from '@keepkey/keepkey-sdk';
import * as core from '@shapeshiftoss/hdwallet-core';
import _ from 'lodash';
export type { KeepKeySdk } from '@keepkey/keepkey-sdk';
export declare function isKeepKey(wallet: core.HDWallet): wallet is KeepKeyRestHDWallet;
export declare class KeepKeyRestHDWallet implements core.HDWallet, core.BTCWallet, core.ETHWallet, core.DebugLinkWallet {
    readonly _supportsETHInfo = true;
    readonly _supportsBTCInfo = true;
    readonly _supportsCosmosInfo = true;
    readonly _supportsOsmosisInfo = true;
    readonly _supportsRippleInfo = true;
    readonly _supportsBinanceInfo = true;
    readonly _supportsEosInfo = true;
    readonly _supportsFioInfo = false;
    readonly _supportsPolygon = true;
    readonly _supportsGnosis = true;
    readonly _supportsDebugLink = false;
    readonly _isKeepKey = true;
    readonly _supportsETH = true;
    readonly _supportsEthSwitchChain = false;
    readonly _supportsAvalanche = true;
    readonly _supportsOptimism = true;
    readonly _supportsBSC = true;
    readonly _supportsBTC = true;
    _supportsCosmos: boolean;
    _supportsOsmosis: boolean;
    _supportsRipple: boolean;
    _supportsBinance: boolean;
    _supportsEos: boolean;
    readonly _supportsThorchainInfo = true;
    readonly _supportsThorchain = true;
    readonly _supportsSecretInfo = false;
    readonly _supportsSecret = false;
    readonly _supportsKava = false;
    readonly _supportsKavaInfo = false;
    readonly _supportsTerra = false;
    readonly _supportsTerraInfo = false;
    private readonly sdk;
    private readonly abortControllers;
    private ethChainId;
    protected constructor(sdk: KeepKeySdk);
    ethSendTx?(_msg: core.ETHSignTx): Promise<core.ETHTxHash | null>;
    ethGetChainId?(): Promise<number | null>;
    ethSwitchChain?(params: core.AddEthereumChainParameter): Promise<void>;
    ethAddChain?(params: core.AddEthereumChainParameter): Promise<void>;
    transport?: core.Transport | undefined;
    protected abortable<T>(fn: (signal: AbortSignal) => Promise<T>): Promise<T>;
    static create(sdk: KeepKeySdk): Promise<KeepKeyRestHDWallet>;
    getDeviceID(): Promise<string>;
    getVendor(): string;
    getModel(): Promise<string>;
    getFirmwareVersion(): Promise<string>;
    getLabel(): Promise<string>;
    isInitialized(): Promise<boolean>;
    isLocked(): Promise<boolean>;
    readonly getPublicKeys: ((getPublicKeys: core.GetPublicKey[]) => Promise<(core.PublicKey | null)[]>) & _.MemoizedFunction;
    ping(msg: core.Ping): Promise<core.Pong>;
    reset(msg: core.ResetDevice): Promise<void>;
    recover(msg: core.RecoverDevice): Promise<void>;
    pressYes(): Promise<void>;
    pressNo(): Promise<void>;
    press(_isYes: boolean): Promise<void>;
    hasOnDevicePinEntry(): boolean;
    hasOnDevicePassphrase(): boolean;
    hasOnDeviceDisplay(): boolean;
    hasOnDeviceRecovery(): boolean;
    supportsBip44Accounts(): boolean;
    supportsOfflineSigning(): boolean;
    supportsBroadcast(): boolean;
    sendPin(): Promise<never>;
    sendPassphrase(): Promise<void>;
    sendCharacter(_character: string): Promise<void>;
    sendCharacterDelete(): Promise<void>;
    sendCharacterDone(): Promise<void>;
    sendWord(): Promise<never>;
    hasNativeShapeShift(): boolean;
    btcSupportsNativeShapeShift(): boolean;
    ethSupportsNativeShapeShift(): boolean;
    applyPolicy(p: Required<Types.PolicyType.AsObject>): Promise<void>;
    applySettings(s: Messages.ApplySettings.AsObject): Promise<void>;
    cancel(): Promise<void>;
    changePin(): Promise<void>;
    clearSession(): Promise<void>;
    firmwareErase(): Promise<void>;
    firmwareUpload(firmware: any): Promise<void>;
    initialize(): Promise<void>;
    protected getFeaturesUncached(): Promise<Messages.Features.AsObject>;
    protected readonly getFeaturesCached: (() => Promise<Messages.Features.AsObject>) & _.MemoizedFunction;
    protected resetCaches(): void;
    getFeatures(cached?: boolean): Promise<Messages.Features.AsObject>;
    getEntropy(_size: number): Promise<Uint8Array>;
    getNumCoins(): Promise<number>;
    getCoinTable(start?: number, _end?: number): Promise<Types.CoinType.AsObject[]>;
    loadDevice(msg: core.LoadDevice): Promise<void>;
    removePin(): Promise<void>;
    send(_events: core.Event[]): Promise<void>;
    softReset(): Promise<void>;
    wipe(): Promise<void>;
    btcSupportsCoin(_coin: core.Coin): Promise<boolean>;
    btcSupportsScriptType(_coin: core.Coin, _scriptType: core.BTCInputScriptType): Promise<boolean>;
    readonly btcGetAddress: ((msg: core.BTCGetAddress) => Promise<string>) & _.MemoizedFunction;
    btcSignTx(msg: core.BTCSignTxKK): Promise<core.BTCSignedTx>;
    btcSupportsSecureTransfer(): Promise<boolean>;
    ethSupportsEIP1559(): Promise<boolean>;
    btcSignMessage(_msg: core.BTCSignMessage): Promise<core.BTCSignedMessage>;
    btcVerifyMessage(_msg: core.BTCVerifyMessage): Promise<boolean>;
    btcGetAccountPaths(_msg: core.BTCGetAccountPaths): core.BTCAccountPath[];
    btcIsSameAccount(_msg: core.BTCAccountPath[]): boolean;
    ethSignTx(msg: core.ETHSignTx): Promise<core.ETHSignedTx>;
    readonly ethGetAddress: ((msg: core.ETHGetAddress) => Promise<string>) & _.MemoizedFunction;
    ethSignMessage(msg: core.ETHSignMessage): Promise<core.ETHSignedMessage>;
    ethSignTypedData(msg: any): Promise<core.ETHSignedTypedData>;
    ethVerifyMessage(msg: core.ETHVerifyMessage): Promise<boolean>;
    ethSupportsNetwork(_chain_id: number): Promise<boolean>;
    ethSupportsSecureTransfer(): Promise<boolean>;
    ethGetAccountPaths(msg: core.ETHGetAccountPath): core.ETHAccountPath[];
    rippleGetAccountPaths(msg: core.RippleGetAccountPaths): core.RippleAccountPath[];
    readonly rippleGetAddress: ((msg: core.RippleGetAddress) => Promise<string>) & _.MemoizedFunction;
    rippleSignTx(_msg: core.RippleSignTx): Promise<core.RippleSignedTx>;
    cosmosGetAccountPaths(msg: core.CosmosGetAccountPaths): core.CosmosAccountPath[];
    readonly cosmosGetAddress: ((msg: core.CosmosGetAddress) => Promise<string>) & _.MemoizedFunction;
    cosmosSignTx(msg: any): Promise<core.CosmosSignedTx>;
    osmosisGetAccountPaths(msg: core.OsmosisGetAccountPaths): core.OsmosisAccountPath[];
    readonly osmosisGetAddress: ((msg: core.OsmosisGetAddress) => Promise<string>) & _.MemoizedFunction;
    osmosisSignTx(msg: any): Promise<core.OsmosisSignedTx>;
    thorchainGetAccountPaths(_msg: core.ThorchainGetAccountPaths): core.ThorchainAccountPath[];
    readonly thorchainGetAddress: ((msg: core.ThorchainGetAddress) => Promise<string>) & _.MemoizedFunction;
    thorchainSignTx(msg: any): Promise<any>;
    binanceGetAccountPaths(_msg: core.BinanceGetAccountPaths): core.BinanceAccountPath[];
    readonly binanceGetAddress: ((msg: core.BinanceGetAddress) => Promise<string>) & _.MemoizedFunction;
    binanceSignTx(msg: core.BinanceSignTx): Promise<any>;
    eosGetAccountPaths(msg: core.EosGetAccountPaths): core.EosAccountPath[];
    readonly eosGetPublicKey: ((_msg: core.EosGetPublicKey) => Promise<string>) & _.MemoizedFunction;
    eosSignTx(_msg: core.EosToSignTx): Promise<core.EosTxSigned>;
    describePath(msg: core.DescribePath): core.PathDescription;
    disconnect(): Promise<void>;
    btcNextAccountPath(_msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    ethNextAccountPath(_msg: core.ETHAccountPath): core.ETHAccountPath | undefined;
    eosNextAccountPath(_msg: core.EosAccountPath): core.EosAccountPath | undefined;
    cosmosNextAccountPath(_msg: core.CosmosAccountPath): core.CosmosAccountPath | undefined;
    rippleNextAccountPath(_msg: core.RippleAccountPath): core.RippleAccountPath | undefined;
    binanceNextAccountPath(_msg: core.BinanceAccountPath): core.BinanceAccountPath | undefined;
}
