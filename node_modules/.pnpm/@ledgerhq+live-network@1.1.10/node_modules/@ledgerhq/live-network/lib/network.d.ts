import type { AxiosError, AxiosRequestConfig } from "axios";
import { AxiosPromise, AxiosResponse } from "axios";
type Metadata = {
    startTime: number;
};
type ExtendedXHRConfig = AxiosRequestConfig & {
    metadata?: Metadata;
};
export declare const requestInterceptor: (request: AxiosRequestConfig) => ExtendedXHRConfig;
type InterceptedResponse = {
    config: ExtendedXHRConfig;
} & AxiosResponse<any>;
export declare const responseInterceptor: (response: InterceptedResponse) => InterceptedResponse;
type InterceptedError = {
    response?: InterceptedResponse;
} & AxiosError<any>;
export declare const errorInterceptor: (error: InterceptedError) => InterceptedError;
declare const implementation: <T = any>(arg: AxiosRequestConfig) => AxiosPromise<T>;
export default implementation;
//# sourceMappingURL=network.d.ts.map