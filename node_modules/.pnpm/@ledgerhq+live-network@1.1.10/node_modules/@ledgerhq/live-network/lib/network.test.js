"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const live_env_1 = require("@ledgerhq/live-env");
const network_1 = require("./network");
const logs = __importStar(require("@ledgerhq/logs"));
describe("network", () => {
    const DEFAULT_ENABLE_NETWORK_LOGS = (0, live_env_1.getEnv)("ENABLE_NETWORK_LOGS");
    afterEach(() => {
        // restore the spy created with spyOn
        jest.restoreAllMocks();
        // Restore DEFAULT_ENABLE_NETWORK_LOGS
        (0, live_env_1.setEnv)("ENABLE_NETWORK_LOGS", DEFAULT_ENABLE_NETWORK_LOGS);
    });
    describe("requestInterceptor", () => {
        test("should return provided request when ENABLE_NETWORK_LOGS is false", () => {
            const request = {
                baseURL: "baseURL",
                url: "url",
                data: "data",
            };
            const req = (0, network_1.requestInterceptor)(request);
            expect(req).toEqual(request);
        });
        test("should return provided request with metadata when ENABLE_NETWORK_LOGS is true", () => {
            (0, live_env_1.setEnv)("ENABLE_NETWORK_LOGS", true);
            const request = {
                baseURL: "baseURL",
                url: "url",
                data: "data",
            };
            const req = (0, network_1.requestInterceptor)(request);
            expect(req).toEqual(Object.assign(Object.assign({}, request), { metadata: { startTime: expect.any(Number) } }));
        });
        test("should call log when ENABLE_NETWORK_LOGS is true", () => {
            const spy = jest.spyOn(logs, "log");
            (0, live_env_1.setEnv)("ENABLE_NETWORK_LOGS", true);
            const request = {
                baseURL: "baseURL",
                url: "url",
                data: "data",
            };
            (0, network_1.requestInterceptor)(request);
            expect(spy).toHaveBeenCalledTimes(1);
        });
    });
    describe("responseInterceptor", () => {
        test("should return provided response when ENABLE_NETWORK_LOGS is false", () => {
            const response = {
                config: {
                    baseURL: "baseURL",
                    url: "url",
                    data: "data",
                },
                data: "data",
                status: 200,
                statusText: "OK",
                headers: {},
            };
            const res = (0, network_1.responseInterceptor)(response);
            expect(res).toEqual(response);
        });
        test("should return provided response when ENABLE_NETWORK_LOGS is true", () => {
            (0, live_env_1.setEnv)("ENABLE_NETWORK_LOGS", true);
            const response = {
                config: {
                    baseURL: "baseURL",
                    url: "url",
                    data: "data",
                },
                data: "data",
                status: 200,
                statusText: "OK",
                headers: {},
            };
            const res = (0, network_1.responseInterceptor)(response);
            expect(res).toEqual(response);
        });
        test("should call log when ENABLE_NETWORK_LOGS is true", () => {
            const spy = jest.spyOn(logs, "log");
            (0, live_env_1.setEnv)("ENABLE_NETWORK_LOGS", true);
            const response = {
                config: {
                    baseURL: "baseURL",
                    url: "url",
                    data: "data",
                },
                data: "data",
                status: 200,
                statusText: "OK",
                headers: {},
            };
            (0, network_1.responseInterceptor)(response);
            expect(spy).toHaveBeenCalledTimes(1);
        });
    });
});
//# sourceMappingURL=network.test.js.map