import { BIP32Path, HDWallet, HDWalletInfo, PathDescription } from "./wallet";
export interface ThorchainGetAddress {
    addressNList: BIP32Path;
    showDisplay?: boolean;
    testnet?: boolean;
}
export declare namespace Thorchain {
    export interface Msg {
        type: string;
        value: any;
    }
    export type Coins = Coin[];
    export interface Coin {
        denom: string;
        amount: string;
    }
    export interface StdFee {
        amount: Coins;
        gas: string;
    }
    namespace crypto {
        interface PubKey {
            type: string;
            value: string;
        }
    }
    export interface StdSignature {
        pub_key: crypto.PubKey;
        signature: string;
    }
    export interface StdTx {
        fee: StdFee;
        memo?: string;
        msg: Msg[];
        signatures: StdSignature[];
    }
    export {};
}
export interface ThorchainTx {
    msg: Thorchain.Msg[];
    fee: Thorchain.StdFee;
    signatures: Thorchain.StdSignature[];
    memo?: string;
}
export interface ThorchainSignTx {
    addressNList: BIP32Path;
    tx: Thorchain.StdTx;
    sequence: string;
    account_number: string;
    chain_id: string;
    fee?: number;
    testnet?: boolean;
}
export interface ThorchainSignedTx {
    serialized: string;
    body: string;
    authInfoBytes: string;
    signatures: string[];
}
export interface ThorchainGetAccountPaths {
    accountIdx: number;
}
export interface ThorchainAccountPath {
    addressNList: BIP32Path;
}
export interface ThorchainWalletInfo extends HDWalletInfo {
    readonly _supportsThorchainInfo: boolean;
    /**
     * Returns a list of bip32 paths for a given account index in preferred order
     * from most to least preferred.
     */
    thorchainGetAccountPaths(msg: ThorchainGetAccountPaths): Array<ThorchainAccountPath>;
    /**
     * Returns the "next" account path, if any.
     */
    thorchainNextAccountPath(msg: ThorchainAccountPath): ThorchainAccountPath | undefined;
}
export interface ThorchainWallet extends ThorchainWalletInfo, HDWallet {
    readonly _supportsThorchain: boolean;
    thorchainGetAddress(msg: ThorchainGetAddress): Promise<string | null>;
    thorchainSignTx(msg: ThorchainSignTx): Promise<ThorchainSignedTx | null>;
}
export declare function thorchainDescribePath(path: BIP32Path): PathDescription;
//# sourceMappingURL=thorchain.d.ts.map