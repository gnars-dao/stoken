import { Infer, Struct } from 'superstruct';
declare const NodeStruct: Struct<{
    type: string;
}, {
    type: Struct<string, null>;
}>;
/**
 * The base node type.
 *
 * @property type - The node type.
 */
export declare type Node = Infer<typeof NodeStruct>;
declare const ParentStruct: Struct<{
    type: string;
    children: ({
        value: string;
        type: NodeType.Copyable;
    } | {
        type: NodeType.Divider;
    } | {
        value: string;
        type: NodeType.Heading;
    } | Panel | {
        type: NodeType.Spinner;
    } | {
        value: string;
        type: NodeType.Text;
        markdown?: boolean | undefined;
    })[];
}, {
    children: Struct<({
        value: string;
        type: NodeType.Copyable;
    } | {
        type: NodeType.Divider;
    } | {
        value: string;
        type: NodeType.Heading;
    } | Panel | {
        type: NodeType.Spinner;
    } | {
        value: string;
        type: NodeType.Text;
        markdown?: boolean | undefined;
    })[], Struct<{
        value: string;
        type: NodeType.Copyable;
    } | {
        type: NodeType.Divider;
    } | {
        value: string;
        type: NodeType.Heading;
    } | Panel | {
        type: NodeType.Spinner;
    } | {
        value: string;
        type: NodeType.Text;
        markdown?: boolean | undefined;
    }, null>>;
    type: Struct<string, null>;
}>;
/**
 * A node with children.
 *
 * @property type - The node type.
 * @property children - The children of this node.
 */
export declare type Parent = Infer<typeof ParentStruct>;
declare const LiteralStruct: Struct<{
    value: unknown;
    type: string;
}, {
    value: Struct<unknown, null>;
    type: Struct<string, null>;
}>;
/**
 * A node with a value.
 *
 * @property type - The node type.
 * @property value - The value of this node.
 */
export declare type Literal = Infer<typeof LiteralStruct>;
export declare enum NodeType {
    Copyable = "copyable",
    Divider = "divider",
    Heading = "heading",
    Panel = "panel",
    Spinner = "spinner",
    Text = "text"
}
export declare const CopyableStruct: Struct<{
    value: string;
    type: NodeType.Copyable;
}, {
    type: Struct<NodeType.Copyable, NodeType.Copyable>;
    value: Struct<string, null>;
}>;
/**
 * Text that can be copied to the clipboard.
 *
 * @property type - The type of the node, must be the string 'copyable'.
 * @property value - The text to be copied.
 */
export declare type Copyable = Infer<typeof CopyableStruct>;
export declare const DividerStruct: Struct<{
    type: NodeType.Divider;
}, {
    type: Struct<NodeType.Divider, NodeType.Divider>;
}>;
/**
 * A divider node, that renders a line between other nodes.
 */
export declare type Divider = Infer<typeof DividerStruct>;
export declare const HeadingStruct: Struct<{
    value: string;
    type: NodeType.Heading;
}, {
    type: Struct<NodeType.Heading, NodeType.Heading>;
    value: Struct<string, null>;
}>;
/**
 * A heading node, that renders the text as a heading. The level of the heading
 * is determined by the depth of the heading in the document.
 *
 * @property type - The type of the node, must be the string 'text'.
 * @property value - The text content of the node, either as plain text, or as a
 * markdown string.
 */
export declare type Heading = Infer<typeof HeadingStruct>;
export declare const PanelStruct: Struct<Panel>;
/**
 * A panel node, which renders its children.
 *
 * @property type - The type of the node, must be the string 'text'.
 * @property value - The text content of the node, either as plain text, or as a
 * markdown string.
 */
export declare type Panel = {
    type: NodeType.Panel;
    children: Component[];
};
export declare const SpinnerStruct: Struct<{
    type: NodeType.Spinner;
}, {
    type: Struct<NodeType.Spinner, NodeType.Spinner>;
}>;
/**
 * A spinner node, that renders a spinner, either as a full-screen overlay, or
 * inline when nested inside a {@link Panel}.
 */
export declare type Spinner = Infer<typeof SpinnerStruct>;
export declare const TextStruct: Struct<{
    value: string;
    type: NodeType.Text;
    markdown?: boolean | undefined;
}, {
    type: Struct<NodeType.Text, NodeType.Text>;
    value: Struct<string, null>;
    markdown: Struct<boolean | undefined, null>;
}>;
/**
 * A text node, that renders the text as one or more paragraphs.
 *
 * @property type - The type of the node, must be the string 'text'.
 * @property value - The text content of the node, either as plain text, or as a
 * markdown string.
 * @property markdown - A flag to enable/disable markdown, if nothing is specified
 * markdown will be enabled.
 */
export declare type Text = Infer<typeof TextStruct>;
export declare const ComponentStruct: Struct<{
    value: string;
    type: NodeType.Copyable;
} | {
    type: NodeType.Divider;
} | {
    value: string;
    type: NodeType.Heading;
} | Panel | {
    type: NodeType.Spinner;
} | {
    value: string;
    type: NodeType.Text;
    markdown?: boolean | undefined;
}, null>;
/**
 * All supported component types.
 */
export declare type Component = Infer<typeof ComponentStruct>;
export {};
