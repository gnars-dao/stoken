import { NodeType } from './nodes';
/**
 * Create a {@link Copyable} component.
 *
 * @param args - The node arguments. This can either be a string, or an object
 * with the `text` property.
 * @param args.text - The text to copy.
 * @returns A {@link Copyable} component.
 */
export declare const copyable: (...args: string[] | [Omit<{
    value: string;
    type: NodeType.Copyable;
}, "type">]) => {
    value: string;
    type: NodeType.Copyable;
};
/**
 * Create a {@link Divider} node.
 *
 * @returns The divider node as object.
 * @example
 * ```typescript
 * const node = divider();
 * ```
 */
export declare const divider: () => {
    type: NodeType.Divider;
};
/**
 * Create a {@link Heading} node.
 *
 * @param args - The node arguments. This can either be a string, or an object
 * with the `text` property.
 * @param args.text - The heading text.
 * @returns The heading node as object.
 * @example
 * ```typescript
 * const node = heading({ text: 'Hello, world!' });
 * const node = heading('Hello, world!');
 * ```
 */
export declare const heading: (...args: string[] | [Omit<{
    value: string;
    type: NodeType.Heading;
}, "type">]) => {
    value: string;
    type: NodeType.Heading;
};
/**
 * Create a {@link Panel} node.
 *
 * @param args - The node arguments. This can be either an array of children, or
 * an object with a `children` property.
 * @param args.children - The child nodes of the panel. This can be any valid
 * {@link Component}.
 * @returns The panel node as object.
 * @example
 * ```typescript
 * const node = panel({
 *  children: [
 *    heading({ text: 'Hello, world!' }),
 *    text({ text: 'This is a panel.' }),
 *  ],
 * });
 *
 * const node = panel([
 *   heading('Hello, world!'),
 *   text('This is a panel.'),
 * ]);
 * ```
 */
export declare const panel: (...args: [Omit<import("./nodes").Panel, "type">] | ({
    value: string;
    type: NodeType.Copyable;
} | {
    type: NodeType.Divider;
} | {
    value: string;
    type: NodeType.Heading;
} | import("./nodes").Panel | {
    type: NodeType.Spinner;
} | {
    value: string;
    type: NodeType.Text;
    markdown?: boolean | undefined;
})[][]) => import("./nodes").Panel;
/**
 * Create a {@link Spinner} node.
 *
 * @returns The spinner node as object.
 * @example
 * ```typescript
 * const node = spinner();
 * ```
 */
export declare const spinner: () => {
    type: NodeType.Spinner;
};
/**
 * Create a {@link Text} node.
 *
 * @param args - The node arguments. This can be either a string
 * and a boolean, or an object with a `value` property
 * and an optional `markdown` property.
 * @param args.value - The text content of the node.
 * @param args.markdown - An optional flag to enable/disable markdown.
 * @returns The text node as object.
 * @example
 * ```typescript
 * const node = text({ value: 'Hello, world!' });
 * const node = text('Hello, world!');
 * const node = text({ value: 'Hello, world!', markdown: false });
 * const node = text('Hello, world!', false);
 * ```
 */
export declare const text: (...args: [Omit<{
    value: string;
    type: NodeType.Text;
    markdown?: boolean | undefined;
}, "type">] | (string | boolean | undefined)[]) => {
    value: string;
    type: NodeType.Text;
    markdown?: boolean | undefined;
};
