"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.text = exports.spinner = exports.panel = exports.heading = exports.divider = exports.copyable = void 0;
const utils_1 = require("@metamask/utils");
const nodes_1 = require("./nodes");
/**
 * A function that returns a function to "build" a {@link Component}. It infers
 * the type of the component from the given struct, and performs validation on
 * the created component.
 *
 * The returned function can handle the node arguments in two ways:
 * 1. As a single object, with the keys corresponding to the node's properties,
 * excluding the `type` property.
 * 2. As an array of arguments, with the order corresponding to the given keys.
 *
 * @param type - The type of the component to build.
 * @param struct - The struct to use to validate the component.
 * @param keys - The keys of the component to use as arguments to the builder.
 * The order of the keys determines the order of the arguments.
 * @returns A function that builds a component of the given type.
 */
function createBuilder(type, struct, keys = []) {
    return (...args) => {
        // Node passed as a single object.
        if (args.length === 1 && (0, utils_1.isPlainObject)(args[0])) {
            const node = { ...args[0], type };
            // The user could be passing invalid values to the builder, so we need to
            // validate them as per the component's struct.
            (0, utils_1.assertStruct)(node, struct, `Invalid ${type} component`);
            return node;
        }
        // Node passed as an array of arguments.
        const node = keys.reduce((partialNode, key, index) => {
            if (args[index] !== undefined) {
                return {
                    ...partialNode,
                    [key]: args[index],
                };
            }
            return partialNode;
        }, { type });
        // The user could be passing invalid values to the builder, so we need to
        // validate them as per the component's struct.
        (0, utils_1.assertStruct)(node, struct, `Invalid ${type} component`);
        return node;
    };
}
/**
 * Create a {@link Copyable} component.
 *
 * @param args - The node arguments. This can either be a string, or an object
 * with the `text` property.
 * @param args.text - The text to copy.
 * @returns A {@link Copyable} component.
 */
exports.copyable = createBuilder(nodes_1.NodeType.Copyable, nodes_1.CopyableStruct, [
    'value',
]);
/**
 * Create a {@link Divider} node.
 *
 * @returns The divider node as object.
 * @example
 * ```typescript
 * const node = divider();
 * ```
 */
exports.divider = createBuilder(nodes_1.NodeType.Divider, nodes_1.DividerStruct);
/**
 * Create a {@link Heading} node.
 *
 * @param args - The node arguments. This can either be a string, or an object
 * with the `text` property.
 * @param args.text - The heading text.
 * @returns The heading node as object.
 * @example
 * ```typescript
 * const node = heading({ text: 'Hello, world!' });
 * const node = heading('Hello, world!');
 * ```
 */
exports.heading = createBuilder(nodes_1.NodeType.Heading, nodes_1.HeadingStruct, [
    'value',
]);
/**
 * Create a {@link Panel} node.
 *
 * @param args - The node arguments. This can be either an array of children, or
 * an object with a `children` property.
 * @param args.children - The child nodes of the panel. This can be any valid
 * {@link Component}.
 * @returns The panel node as object.
 * @example
 * ```typescript
 * const node = panel({
 *  children: [
 *    heading({ text: 'Hello, world!' }),
 *    text({ text: 'This is a panel.' }),
 *  ],
 * });
 *
 * const node = panel([
 *   heading('Hello, world!'),
 *   text('This is a panel.'),
 * ]);
 * ```
 */
exports.panel = createBuilder(nodes_1.NodeType.Panel, nodes_1.PanelStruct, ['children']);
/**
 * Create a {@link Spinner} node.
 *
 * @returns The spinner node as object.
 * @example
 * ```typescript
 * const node = spinner();
 * ```
 */
exports.spinner = createBuilder(nodes_1.NodeType.Spinner, nodes_1.SpinnerStruct);
/**
 * Create a {@link Text} node.
 *
 * @param args - The node arguments. This can be either a string
 * and a boolean, or an object with a `value` property
 * and an optional `markdown` property.
 * @param args.value - The text content of the node.
 * @param args.markdown - An optional flag to enable/disable markdown.
 * @returns The text node as object.
 * @example
 * ```typescript
 * const node = text({ value: 'Hello, world!' });
 * const node = text('Hello, world!');
 * const node = text({ value: 'Hello, world!', markdown: false });
 * const node = text('Hello, world!', false);
 * ```
 */
exports.text = createBuilder(nodes_1.NodeType.Text, nodes_1.TextStruct, [
    'value',
    'markdown',
]);
//# sourceMappingURL=builder.js.map