"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ComponentStruct = exports.TextStruct = exports.SpinnerStruct = exports.PanelStruct = exports.HeadingStruct = exports.DividerStruct = exports.CopyableStruct = exports.NodeType = void 0;
const superstruct_1 = require("superstruct");
const NodeStruct = (0, superstruct_1.object)({
    type: (0, superstruct_1.string)(),
});
const ParentStruct = (0, superstruct_1.assign)(NodeStruct, (0, superstruct_1.object)({
    // This node references itself indirectly, so we need to use `lazy()`.
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    children: (0, superstruct_1.array)((0, superstruct_1.lazy)(() => exports.ComponentStruct)),
}));
const LiteralStruct = (0, superstruct_1.assign)(NodeStruct, (0, superstruct_1.object)({
    value: (0, superstruct_1.unknown)(),
}));
var NodeType;
(function (NodeType) {
    NodeType["Copyable"] = "copyable";
    NodeType["Divider"] = "divider";
    NodeType["Heading"] = "heading";
    NodeType["Panel"] = "panel";
    NodeType["Spinner"] = "spinner";
    NodeType["Text"] = "text";
})(NodeType = exports.NodeType || (exports.NodeType = {}));
exports.CopyableStruct = (0, superstruct_1.assign)(LiteralStruct, (0, superstruct_1.object)({
    type: (0, superstruct_1.literal)(NodeType.Copyable),
    value: (0, superstruct_1.string)(),
}));
exports.DividerStruct = (0, superstruct_1.assign)(NodeStruct, (0, superstruct_1.object)({
    type: (0, superstruct_1.literal)(NodeType.Divider),
}));
exports.HeadingStruct = (0, superstruct_1.assign)(LiteralStruct, (0, superstruct_1.object)({
    type: (0, superstruct_1.literal)(NodeType.Heading),
    value: (0, superstruct_1.string)(),
}));
exports.PanelStruct = (0, superstruct_1.assign)(ParentStruct, (0, superstruct_1.object)({
    type: (0, superstruct_1.literal)(NodeType.Panel),
}));
exports.SpinnerStruct = (0, superstruct_1.assign)(NodeStruct, (0, superstruct_1.object)({
    type: (0, superstruct_1.literal)(NodeType.Spinner),
}));
exports.TextStruct = (0, superstruct_1.assign)(LiteralStruct, (0, superstruct_1.object)({
    type: (0, superstruct_1.literal)(NodeType.Text),
    value: (0, superstruct_1.string)(),
    markdown: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
}));
exports.ComponentStruct = (0, superstruct_1.union)([
    exports.CopyableStruct,
    exports.DividerStruct,
    exports.HeadingStruct,
    exports.PanelStruct,
    exports.SpinnerStruct,
    exports.TextStruct,
]);
//# sourceMappingURL=nodes.js.map