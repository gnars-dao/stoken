import { SwapKitCore } from '@coinmasters/core';
export interface PioneerSDKConfig {
    appName?: string;
    appIcon?: string;
    blockchains: any;
    username: string;
    queryKey: string;
    spec: string;
    wss: string;
    paths: any;
    keepkeyApiKey: string;
    ethplorerApiKey: string;
    covalentApiKey: string;
    utxoApiKey: string;
    walletConnectProjectId: string;
}
export declare class SDK {
    status: string;
    username: string;
    queryKey: string;
    wss: string;
    spec: any;
    ethplorerApiKey: string;
    covalentApiKey: string;
    utxoApiKey: string;
    walletConnectProjectId: string;
    context: string;
    assetContext: any;
    blockchainContext: any;
    pubkeyContext: any;
    outboundAssetContext: any;
    outboundBlockchainContext: any;
    outboundPubkeyContext: any;
    swapKit: SwapKitCore | null;
    pioneer: any;
    paths: any[];
    pubkeys: any[];
    wallets: any[];
    balances: any[];
    nfts: any[];
    events: any;
    pairWallet: (wallet: any, customPaths: any, ledgerApp?: any) => Promise<any>;
    setContext: (context: string) => Promise<{
        success: boolean;
    }>;
    refresh: () => Promise<any>;
    setAssetContext: (asset: any) => Promise<any>;
    setOutboundAssetContext: (asset: any) => Promise<any>;
    keepkeyApiKey: string;
    isPioneer: string | null;
    loadBalanceCache: (balances: any) => Promise<void>;
    loadPubkeyCache: (pubkeys: any) => Promise<void>;
    getPubkeys: () => Promise<boolean>;
    getBalances: () => Promise<boolean>;
    blockchains: any[];
    clearWalletState: () => Promise<boolean>;
    setBlockchains: (blockchains: any) => Promise<void>;
    appName: string;
    appIcon: any;
    private init;
    constructor(spec: string, config: PioneerSDKConfig);
}
export default SDK;
