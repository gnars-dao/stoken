var ql = Object.defineProperty;
var $l = (n, t, e) => t in n ? ql(n, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : n[t] = e;
var w = (n, t, e) => ($l(n, typeof t != "symbol" ? t + "" : t, e), e), fa = (n, t, e) => {
  if (!t.has(n))
    throw TypeError("Cannot " + e);
};
var l = (n, t, e) => (fa(n, t, "read from private field"), e ? e.call(n) : t.get(n)), A = (n, t, e) => {
  if (t.has(n))
    throw TypeError("Cannot add the same private member more than once");
  t instanceof WeakSet ? t.add(n) : t.set(n, e);
}, d = (n, t, e, r) => (fa(n, t, "write to private field"), r ? r.call(n, e) : t.set(n, e), e);
var ds = (n, t, e, r) => ({
  set _(s) {
    d(n, t, s, e);
  },
  get _() {
    return l(n, t, r);
  }
}), C = (n, t, e) => (fa(n, t, "access private method"), e);
import { RequestClient as $c, formatBigIntToSafeValue as oo, AssetValue as wi, SwapKitNumber as xa, filterAssets as tf, isGasAsset as tu } from "@coinmasters/helpers";
const Wi = [
  { inputs: [], stateMutability: "nonpayable", type: "constructor" },
  {
    anonymous: !1,
    inputs: [
      { indexed: !0, internalType: "address", name: "owner", type: "address" },
      { indexed: !0, internalType: "address", name: "spender", type: "address" },
      { indexed: !1, internalType: "uint256", name: "value", type: "uint256" }
    ],
    name: "Approval",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      { indexed: !0, internalType: "address", name: "from", type: "address" },
      { indexed: !0, internalType: "address", name: "to", type: "address" },
      { indexed: !1, internalType: "uint256", name: "value", type: "uint256" }
    ],
    name: "Transfer",
    type: "event"
  },
  {
    inputs: [
      { internalType: "address", name: "", type: "address" },
      { internalType: "address", name: "", type: "address" }
    ],
    name: "allowance",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "spender", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" }
    ],
    name: "approve",
    outputs: [{ internalType: "bool", name: "success", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "", type: "address" }],
    name: "balanceOf",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "name",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [{ internalType: "string", name: "", type: "string" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" }
    ],
    name: "transfer",
    outputs: [{ internalType: "bool", name: "success", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [
      { internalType: "address", name: "from", type: "address" },
      { internalType: "address", name: "to", type: "address" },
      { internalType: "uint256", name: "value", type: "uint256" }
    ],
    name: "transferFrom",
    outputs: [{ internalType: "bool", name: "success", type: "bool" }],
    stateMutability: "nonpayable",
    type: "function"
  }
];
var L = /* @__PURE__ */ ((n) => (n.INVALID_INPUT_PARAMETERS = "1000", n.UNKNOWN_PROVIDERS = "1001", n.CANNOT_FIND_INBOUND_ADDRESS = "1002", n.NO_INBOUND_ADDRESSES = "1003", n.CHAIN_HALTED_OR_UNSUPPORTED = "1004", n.MISSING_INPUT_PARAMETER = "1005", n.INVALID_TYPE_GENERIC = "1100", n.INVALID_NUMBER_STRING = "1101", n.INVALID_NUMBER = "1102", n.INVALID_BOOLEAN = "1103", n.INVALID_OBJECT = "1104", n.INVALID_ARRAY = "1105", n.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER = "2000", n.SELL_BUY_ASSETS_ARE_THE_SAME = "2001", n.MISSING_SOURCE_ADDRESS_FOR_SYNTH = "2002", n.AFF_ADDRESS_AND_BPS_OR_NEITHER = "2003", n.AFF_ADDRESS_TOO_LONG = "2004", n.AFF_BPS_INTEGER_0_100 = "2005", n.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN = "2006", n.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN = "2007", n.PREFERRED_PROFVIDER_NOT_SUPPORTED = "2008", n.DESTINATION_ADDRESS_SMART_CONTRACT = "2009", n.BUY_AMOUNT_MUST_BE_POSITIVE_INTEGER = "2010", n.SOURCE_ADDRESS_SMART_CONTRACT = "2011", n.INVALID_PROVIDER = "2100", n.MISSING_CROSS_CHAIN_PROVIDER = "2101", n.MISSING_AVAX_PROVIDER = "2102", n.MISSING_BSC_PROVIDER = "2103", n.MISSING_ETH_PROVIDER = "2104", n.INVALID_PROVIDER_FOR_SWAP_OUT = "2105", n.MISSING_ARB_PROVIDER = "2106", n.INVALID_CHAIN = "2200", n.INVALID_ASSET = "2201", n.INVALID_ASSET_IDENTIFIER = "2202", n.UNSUPPORTED_CHAIN = "2204", n.UNSUPPORTED_ASSET = "2203", n.UNSUPPORTED_ASSET_FOR_SWAPOUT = "2205", n.INVALID_SOURCE_ADDRESS = "2300", n.INVALID_DESTINATION_ADDRESS = "2301", n.THORNODE_QUOTE_GENERIC_ERROR = "3000", n.NOT_ENOUGH_SYNTH_BALANCE = "3001", n.SYNTH_MINTING_CAP_REACHED = "3002", n.INVALID_QUOTE_MODE = "4000", n.NO_QUOTES = "4001", n.SERVICE_UNAVAILABLE_GENERIC = "5000", n.MISSING_GAS_DATA_GENERIC = "5100", n.MISSING_TOKEN_INFO_GENERIC = "5200", n.CANT_FIND_TOKEN_LIST = "5201", n.NO_PRICE = "5202", n.PRICE_IS_STALE = "5203", n.ADDRESS_NOT_WHITELISTED = "6000", n.ADDRESS_ALREADY_CLAIMED = "6001", n.TEMPORARY_ERROR = "9999", n))(L || {});
L.INVALID_INPUT_PARAMETERS + "", L.UNKNOWN_PROVIDERS + "", L.CANNOT_FIND_INBOUND_ADDRESS + "", L.NO_INBOUND_ADDRESSES + "", L.CHAIN_HALTED_OR_UNSUPPORTED + "", L.MISSING_INPUT_PARAMETER + "", L.INVALID_TYPE_GENERIC + "", L.INVALID_NUMBER_STRING + "", L.INVALID_NUMBER + "", L.INVALID_BOOLEAN + "", L.INVALID_OBJECT + "", L.INVALID_ARRAY + "", L.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER + "", L.SELL_BUY_ASSETS_ARE_THE_SAME + "", L.MISSING_SOURCE_ADDRESS_FOR_SYNTH + "", L.AFF_ADDRESS_AND_BPS_OR_NEITHER + "", L.AFF_ADDRESS_TOO_LONG + "", L.AFF_BPS_INTEGER_0_100 + "", L.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN + "", L.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN + "", L.PREFERRED_PROFVIDER_NOT_SUPPORTED + "", L.DESTINATION_ADDRESS_SMART_CONTRACT + "", L.BUY_AMOUNT_MUST_BE_POSITIVE_INTEGER + "", L.INVALID_PROVIDER + "", L.MISSING_CROSS_CHAIN_PROVIDER + "", L.MISSING_AVAX_PROVIDER + "", L.MISSING_BSC_PROVIDER + "", L.MISSING_ETH_PROVIDER + "", L.MISSING_ARB_PROVIDER + "", L.INVALID_PROVIDER_FOR_SWAP_OUT + "", L.INVALID_CHAIN + "", L.INVALID_ASSET + "", L.UNSUPPORTED_CHAIN + "", L.UNSUPPORTED_ASSET + "", L.UNSUPPORTED_ASSET_FOR_SWAPOUT + "", L.THORNODE_QUOTE_GENERIC_ERROR + "", L.INVALID_SOURCE_ADDRESS + "", L.INVALID_DESTINATION_ADDRESS + "", L.NOT_ENOUGH_SYNTH_BALANCE + "", L.SYNTH_MINTING_CAP_REACHED + "", L.INVALID_QUOTE_MODE + "", L.NO_QUOTES + "", L.SERVICE_UNAVAILABLE_GENERIC + "", L.MISSING_GAS_DATA_GENERIC + "", L.MISSING_TOKEN_INFO_GENERIC + "", L.CANT_FIND_TOKEN_LIST + "", L.NO_PRICE + "", L.PRICE_IS_STALE + "", L.ADDRESS_NOT_WHITELISTED + "", L.ADDRESS_ALREADY_CLAIMED + "";
var P = /* @__PURE__ */ ((n) => (n.Arbitrum = "ARB", n.Avalanche = "AVAX", n.Base = "BASE", n.Binance = "BNB", n.BinanceSmartChain = "BSC", n.Bitcoin = "BTC", n.BitcoinCash = "BCH", n.Cosmos = "GAIA", n.Dash = "DASH", n.Digibyte = "DGB", n.Dogecoin = "DOGE", n.EOS = "EOS", n.Ethereum = "ETH", n.Kujira = "KUJI", n.Litecoin = "LTC", n.Maya = "MAYA", n.Optimism = "OP", n.Osmosis = "OSMO", n.Polygon = "MATIC", n.Ripple = "XRP", n.THORChain = "THOR", n.Zcash = "ZEC", n))(P || {});
const ef = {
  ARB: "eip155:42161",
  AVAX: "eip155:43114",
  BSC: "eip155:56",
  BNB: "binance:bnb-beacon-chain",
  BCH: "bip122:000000000000000000651ef99cb9fcbe",
  BTC: "bip122:000000000019d6689c085ae165831e93",
  BASE: "eip155:8453",
  GAIA: "cosmos:cosmoshub-4",
  DASH: "bip122:dash-hash",
  DGB: "bip122:digibytes-hash",
  DOGE: "bip122:00000000001a91e3dace36e2be3bf030",
  KUJI: "cosmos:kaiyo-1",
  EOS: "eos:cf057bbfb72640471fd910bcb67639c2",
  ETH: "eip155:1",
  LTC: "bip122:12a765e31ffd4059bada1e25190f6e98",
  MAYA: "cosmos:maya-mainnet-v1",
  OP: "eip155:10",
  OSMO: "cosmos:osmosis-1",
  MATIC: "eip155:137",
  XRP: "ripple:unknown",
  THOR: "cosmos:thorchain-mainnet-v1",
  ZEC: "bip122:0000000000196a45"
};
for (const n in P)
  ef[P[n]], P[n];
var wn = /* @__PURE__ */ ((n) => (n.ARB = "0x0000000000000000000000000000000000000000", n.AVAX = "0x0000000000000000000000000000000000000000", n.ETH = "0x0000000000000000000000000000000000000000", n.BSC = "0x0000000000000000000000000000000000000000", n.MATIC = "0x0000000000000000000000000000000000001010", n.OP = "0x4200000000000000000000000000000000000042", n))(wn || {}), pn = /* @__PURE__ */ ((n) => (n[n.ARB = 18] = "ARB", n[n.AVAX = 18] = "AVAX", n[n.BCH = 8] = "BCH", n[n.BNB = 8] = "BNB", n[n.BSC = 18] = "BSC", n[n.BTC = 8] = "BTC", n[n.DASH = 8] = "DASH", n[n.DGB = 8] = "DGB", n[n.DOGE = 8] = "DOGE", n[n.ETH = 18] = "ETH", n[n.EOS = 6] = "EOS", n[n.GAIA = 6] = "GAIA", n[n.KUJI = 6] = "KUJI", n[n.LTC = 8] = "LTC", n[n.MATIC = 18] = "MATIC", n[n.MAYA = 10] = "MAYA", n[n.OP = 18] = "OP", n[n.OSMO = 6] = "OSMO", n[n.XRP = 6] = "XRP", n[n.THOR = 8] = "THOR", n[n.ZEC = 8] = "ZEC", n))(pn || {});
const ha = [
  "ETH",
  "AVAX",
  "BSC",
  "ARB",
  // Chain.Base,
  "OP",
  "MATIC"
  /* Polygon */
];
var Ot = /* @__PURE__ */ ((n) => (n.Arbitrum = "42161", n.ArbitrumHex = "0xa4b1", n.Avalanche = "43114", n.AvalancheHex = "0xa86a", n.Base = "8453", n.Binance = "Binance-Chain-Tigris", n.BinanceSmartChain = "56", n.BinanceSmartChainHex = "0x38", n.Bitcoin = "bitcoin", n.BitcoinCash = "bitcoincash", n.Cosmos = "cosmoshub-4", n.Dash = "dash", n.Dogecoin = "dogecoin", n.Kujira = "kaiyo-1", n.Ethereum = "1", n.EthereumHex = "0x1", n.Litecoin = "litecoin", n.Maya = "mayachain-mainnet-v1", n.MayaStagenet = "mayachain-stagenet-v1", n.Optimism = "10", n.OptimismHex = "0xa", n.Osmosis = "osmosis-1", n.Polygon = "137", n.PolygonHex = "0x89", n.THORChain = "thorchain-mainnet-v1", n.THORChainStagenet = "thorchain-stagenet-v2", n))(Ot || {}), ti = /* @__PURE__ */ ((n) => (n.Arbitrum = "https://arb1.arbitrum.io/rpc", n.Avalanche = "https://node-router.thorswap.net/avalanche-c", n.Binance = "https://base.llamarpc.com", n.BinanceSmartChain = "https://bsc-dataseed.binance.org", n.Bitcoin = "https://node-router.thorswap.net/bitcoin", n.BitcoinCash = "https://node-router.thorswap.net/bitcoin-cash", n.Cosmos = "https://node-router.thorswap.net/cosmos/rpc", n.Kujira = "https://rpc-kujira.synergynodes.com/", n.Dash = "https://dash.nownodes.io", n.Dogecoin = "https://node-router.thorswap.net/dogecoin", n.Ethereum = "https://node-router.thorswap.net/ethereum", n.Litecoin = "https://node-router.thorswap.net/litecoin", n.Maya = "https://tendermint.mayachain.info", n.MayaStagenet = "https://stagenet.tendermint.mayachain.info", n.Optimism = "https://mainnet.optimism.io", n.Osmosis = "https://rpc-osmosis.keplr.app", n.Polygon = "https://polygon-rpc.com", n.THORChain = "https://rpc.thorswap.net", n.THORChainStagenet = "https://stagenet-rpc.ninerealms.com", n))(ti || {});
const Yi = Object.values(P), nf = Object.keys(P), co = Yi.reduce(
  (n, t) => {
    const e = nf.find((r) => P[r] === t);
    return e && (n[t] = e), n;
  },
  {}
);
Yi.reduce(
  (n, t) => (n[t] = Ot[co[t]], n),
  {}
);
const rf = Yi.reduce(
  (n, t) => (n[t] = ti[co[t]], n),
  {}
), sf = Yi.reduce(
  (n, t) => {
    const e = `${co[t]}Hex`;
    return n[t] = Ot[e], n;
  },
  {}
), af = {
  "0xa4b1": "ARB",
  42161: "ARB",
  "0xa86a": "AVAX",
  43114: "AVAX",
  "0x38": "BSC",
  56: "BSC",
  "Binance-Chain-Tigris": "BNB",
  bitcoincash: "BCH",
  bitcoin: "BTC",
  "cosmoshub-4": "GAIA",
  8453: "BASE",
  dash: "DASH",
  dogecoin: "DOGE",
  "0x1": "ETH",
  "kaiyo-1": "KUJI",
  1: "ETH",
  litecoin: "LTC",
  "mayachain-stagenet-v1": "MAYA",
  "mayachain-mainnet-v1": "MAYA",
  "0xa": "OP",
  10: "OP",
  "osmosis-1": "OSMO",
  "0x89": "MATIC",
  137: "MATIC",
  "thorchain-stagenet-v2": "THOR",
  "thorchain-mainnet-v1": "THOR"
  /* THORChain */
}, ei = {
  ARB: "https://arbiscan.io",
  AVAX: "https://snowtrace.io",
  BSC: "https://bscscan.com",
  BNB: "https://explorer.binance.org",
  BCH: "https://www.blockchain.com/bch",
  BTC: "https://blockstream.info",
  BASE: "https://basescan.org",
  GAIA: "https://cosmos.bigdipper.live",
  DASH: "https://blockchair.com/dash",
  DGB: "https://chainz.cryptoid.info/dgb",
  DOGE: "https://blockchair.com/dogecoin",
  KUJI: "https://finder.kujira.network/kaiyo-1",
  EOS: "https://eosauthority.com/",
  ETH: "https://etherscan.io",
  LTC: "https://ltc.bitaps.com",
  MAYA: "https://www.mayascan.org",
  OP: "https://optimistic.etherscan.io",
  OSMO: "https://www.mintscan.io/osmosis",
  MATIC: "https://polygonscan.com",
  XRP: "https://xrpscan.com",
  THOR: "https://runescan.io",
  ZEC: "https://z.cash/ecosystem/zcash-explorer"
};
var at = /* @__PURE__ */ ((n) => (n.Average = "average", n.Fast = "fast", n.Fastest = "fastest", n))(at || {}), se = /* @__PURE__ */ ((n) => (n.KEYSTORE = "KEYSTORE", n.KEEPKEY = "KEEPKEY", n.XDEFI = "XDEFI", n.METAMASK = "METAMASK", n.COINBASE_WEB = "COINBASE_WEB", n.TREZOR = "TREZOR", n.TRUSTWALLET_WEB = "TRUSTWALLET_WEB", n.LEDGER = "LEDGER", n.KEPLR = "KEPLR", n.OKX = "OKX", n.BRAVE = "BRAVE", n.WALLETCONNECT = "WALLETCONNECT", n))(se || {});
const ui = [
  P.Arbitrum,
  P.Avalanche,
  P.Binance,
  P.BinanceSmartChain,
  P.Bitcoin,
  P.BitcoinCash,
  P.Cosmos,
  P.Dogecoin,
  P.Ethereum,
  P.Litecoin,
  P.Optimism,
  P.Polygon,
  P.THORChain
];
P.Cosmos, P.Bitcoin, P.BitcoinCash, P.Litecoin, P.Dogecoin, P.Ethereum, P.Arbitrum, P.Avalanche, P.BinanceSmartChain, P.Bitcoin, P.BitcoinCash, P.Cosmos, P.Dogecoin, P.Ethereum, P.Litecoin, P.Optimism, P.Polygon, P.THORChain, P.Ethereum, P.Binance, P.BinanceSmartChain, P.Avalanche, P.THORChain, P.Ethereum, P.Avalanche, P.BinanceSmartChain, P.Bitcoin, P.Cosmos;
const ni = ({ apiKey: n, chainId: t }) => ({
  getBalance: async (e) => {
    console.log("address: ", e), console.log("address: ", e);
    const { data: r } = await $c.get(
      `https://api.covalenthq.com/v1/${t}/address/${e}/balances_v2/`,
      { searchParams: { key: n } }
    );
    return console.log("data: ", r), ((r == null ? void 0 : r.items) || []).map(
      ({ balance: s, contract_decimals: i, contract_ticker_symbol: a, contract_address: o, native_token: c }) => ({
        value: oo({ value: BigInt(s), decimal: i }),
        decimal: i,
        chain: af[t],
        symbol: `${a}${c ? "" : `-${o}`}`
      })
    );
  }
}), of = "https://api.ethplorer.io", cf = (n = "freekey") => ({
  getBalance: async (t) => {
    const { tokens: e = [] } = await $c.get(
      `${of}/getAddressInfo/${t}`,
      { searchParams: { apiKey: n } }
    );
    return e.map(({ tokenInfo: { symbol: r, decimals: s, address: i }, rawBalance: a }) => ({
      chain: P.Ethereum,
      symbol: i ? `${r}-${i}` : r,
      value: oo({ value: BigInt(a), decimal: parseInt(s) }),
      decimal: parseInt(s)
    }));
  }
}), uf = [
  "approve",
  "approvedAmount",
  "call",
  "sendTransaction",
  "transfer",
  "getBalance",
  "isApproved",
  "approvedAmount",
  "EIP1193SendTransaction",
  "getFeeData",
  "broadcastTransaction",
  "estimateCall",
  "estimateGasLimit",
  "estimateGasPrices",
  "createContractTxObject"
], lf = ({
  toolbox: n,
  chainId: t,
  provider: e = window.ethereum
}) => {
  const r = uf.reduce((s, i) => {
    if (!n[i])
      return s;
    const a = n[i];
    return {
      ...s,
      [i]: ff(a, e, t)
    };
  }, {});
  return { ...n, ...r };
}, ff = (n, t, e) => async (...r) => {
  try {
    await df(t, e);
  } catch (s) {
    throw new Error(`Failed to switch network: ${s}`);
  }
  return n(...r);
}, eu = async ({ provider: n, params: t, method: e }) => {
  if (!(n != null && n.send))
    throw new Error("Provider not found");
  const r = t ? Array.isArray(t) ? t : [t] : [];
  return n.send(e, r);
}, hf = (n, t) => eu({ provider: n, method: "wallet_addEthereumChain", params: [t] }), df = (n, t = Ot.EthereumHex) => eu({ provider: n, method: "wallet_switchEthereumChain", params: [{ chainId: t }] }), n0 = async ({
  ethereumWindowProvider: n,
  chain: t,
  covalentApiKey: e,
  ethplorerApiKey: r
}) => {
  if (!n)
    throw new Error("Requested web3 wallet is not installed");
  if (t !== P.Ethereum && !e || t === P.Ethereum && !r)
    throw new Error(`Missing API key for ${t} chain`);
  const { BrowserProvider: s } = await import("./index-322bb10c.js"), i = new s(n, "any"), a = {
    provider: i,
    signer: await i.getSigner(),
    ethplorerApiKey: r,
    covalentApiKey: e
  }, o = t === P.Ethereum ? Wl(a) : t === P.Avalanche ? Kl(a) : zl(a);
  try {
    t !== P.Ethereum && await hf(
      i,
      o.getNetworkParams()
    );
  } catch {
    throw new Error(`Failed to add/switch ${t} network: ${t}`);
  }
  return lf({
    toolbox: { ...o },
    chainId: sf[t],
    provider: i
  });
}, r0 = async ({
  toolbox: n,
  from: t,
  memo: e = "",
  feeOptionKey: r = at.Fastest,
  assetValue: s,
  abi: i,
  funcName: a,
  funcParams: o,
  contractAddress: c,
  txOverrides: u
}) => {
  const f = (await n.getBalance(t)).find(
    ({ symbol: b, chain: T }) => {
      var O;
      return s ? b === s.symbol : b === ((O = wi.fromChainOrSignature(T)) == null ? void 0 : O.symbol);
    }
  ), h = (await n.estimateGasPrices())[r];
  if (!f)
    return wi.fromChainOrSignature(s.chain, 0);
  if (s && (f.chain !== s.chain || f.symbol !== (s == null ? void 0 : s.symbol)))
    return f;
  if ([i, a, o, c].some((b) => !b))
    throw new Error("Missing required parameters for smart contract estimateMaxSendableAmount");
  const p = i && a && o && c ? await n.estimateCall({
    contractAddress: c,
    abi: i,
    funcName: a,
    funcParams: o,
    txOverrides: u
  }) : await n.estimateGasLimit({
    from: t,
    recipient: t,
    memo: e,
    assetValue: s
  }), y = "maxFeePerGas" in h;
  if (!("gasPrice" in h) && !y)
    throw new Error("Could not fetch fee data");
  const m = p * (y ? h.maxFeePerGas + (h.maxPriorityFeePerGas || 1n) : h.gasPrice), I = xa.fromBigInt(f.getBaseValue("bigint")).sub(
    m.toString()
  );
  return wi.fromChainOrSignature(f.chain, I.getValue("string"));
}, s0 = (n) => {
  var t, e;
  (t = window.ethereum) == null || t.on("accountsChanged", () => n()), (e = window.xfi) == null || e.ethereum.on("accountsChanged", () => n());
}, i0 = () => {
  const { isTrust: n, isBraveWallet: t, __XDEFI: e, overrideIsMetaMask: r, selectedProvider: s } = (window == null ? void 0 : window.ethereum) || {};
  return n ? se.TRUSTWALLET_WEB : t ? se.BRAVE : r && (s != null && s.isCoinbaseWallet) ? se.COINBASE_WEB : (e && se.XDEFI, se.METAMASK);
}, a0 = (n) => pf().includes(n), pf = () => {
  var a, o, c, u, f, h, p;
  const n = (window == null ? void 0 : window.ethereum) && !((a = window.ethereum) != null && a.isBraveWallet), t = (window == null ? void 0 : window.xfi) || ((o = window == null ? void 0 : window.ethereum) == null ? void 0 : o.__XDEFI), e = (c = window == null ? void 0 : window.ethereum) == null ? void 0 : c.isBraveWallet, r = ((u = window == null ? void 0 : window.ethereum) == null ? void 0 : u.isTrust) || (window == null ? void 0 : window.trustwallet), s = ((f = window == null ? void 0 : window.ethereum) == null ? void 0 : f.overrideIsMetaMask) && ((p = (h = window == null ? void 0 : window.ethereum) == null ? void 0 : h.selectedProvider) == null ? void 0 : p.isCoinbaseWallet) || (window == null ? void 0 : window.coinbaseWalletExtension), i = [];
  return n && i.push(se.METAMASK), t && i.push(se.XDEFI), e && i.push(se.BRAVE), r && i.push(se.TRUSTWALLET_WEB), s && i.push(se.COINBASE_WEB), i;
}, o0 = () => typeof window.ethereum < "u", Sa = (n) => n > 0n ? `0x${n.toString(16)}` : "0x0", ls = async ({
  provider: n,
  api: t,
  address: e,
  chain: r,
  potentialScamFilter: s
}) => {
  const i = await t.getBalance(e[0].address), a = await n.getBalance(e[0].address), o = r === P.Ethereum ? [
    {
      chain: P.Ethereum,
      symbol: "ETH",
      value: oo({ value: BigInt(a), decimal: 18 }),
      decimal: pn.ETH
    },
    ...i
  ] : i;
  return (s ? tf(o) : o).map(({ symbol: u, value: f, decimal: h }) => ({ ...new wi({
    decimal: h || pn[r],
    value: f,
    identifier: `${r}.${u}`
  }), address: e[0].address }));
}, gf = "6.9.0";
function mf(n, t, e) {
  const r = t.split("|").map((i) => i.trim());
  for (let i = 0; i < r.length; i++)
    switch (t) {
      case "any":
        return;
      case "bigint":
      case "boolean":
      case "number":
      case "string":
        if (typeof n === t)
          return;
    }
  const s = new Error(`invalid value for type ${t}`);
  throw s.code = "INVALID_ARGUMENT", s.argument = `value.${e}`, s.value = n, s;
}
async function yt(n) {
  const t = Object.keys(n);
  return (await Promise.all(t.map((r) => Promise.resolve(n[r])))).reduce((r, s, i) => (r[t[i]] = s, r), {});
}
function F(n, t, e) {
  for (let r in t) {
    let s = t[r];
    const i = e ? e[r] : null;
    i && mf(s, i, r), Object.defineProperty(n, r, { enumerable: !0, value: s, writable: !1 });
  }
}
function or(n) {
  if (n == null)
    return "null";
  if (Array.isArray(n))
    return "[ " + n.map(or).join(", ") + " ]";
  if (n instanceof Uint8Array) {
    const t = "0123456789abcdef";
    let e = "0x";
    for (let r = 0; r < n.length; r++)
      e += t[n[r] >> 4], e += t[n[r] & 15];
    return e;
  }
  if (typeof n == "object" && typeof n.toJSON == "function")
    return or(n.toJSON());
  switch (typeof n) {
    case "boolean":
    case "symbol":
      return n.toString();
    case "bigint":
      return BigInt(n).toString();
    case "number":
      return n.toString();
    case "string":
      return JSON.stringify(n);
    case "object": {
      const t = Object.keys(n);
      return t.sort(), "{ " + t.map((e) => `${or(e)}: ${or(n[e])}`).join(", ") + " }";
    }
  }
  return "[ COULD NOT SERIALIZE ]";
}
function jt(n, t) {
  return n && n.code === t;
}
function uo(n) {
  return jt(n, "CALL_EXCEPTION");
}
function nt(n, t, e) {
  let r = n;
  {
    const i = [];
    if (e) {
      if ("message" in e || "code" in e || "name" in e)
        throw new Error(`value will overwrite populated values: ${or(e)}`);
      for (const a in e) {
        if (a === "shortMessage")
          continue;
        const o = e[a];
        i.push(a + "=" + or(o));
      }
    }
    i.push(`code=${t}`), i.push(`version=${gf}`), i.length && (n += " (" + i.join(", ") + ")");
  }
  let s;
  switch (t) {
    case "INVALID_ARGUMENT":
      s = new TypeError(n);
      break;
    case "NUMERIC_FAULT":
    case "BUFFER_OVERRUN":
      s = new RangeError(n);
      break;
    default:
      s = new Error(n);
  }
  return F(s, { code: t }), e && Object.assign(s, e), s.shortMessage == null && F(s, { shortMessage: r }), s;
}
function N(n, t, e, r) {
  if (!n)
    throw nt(t, e, r);
}
function g(n, t, e, r) {
  N(n, t, "INVALID_ARGUMENT", { argument: e, value: r });
}
function nu(n, t, e) {
  e == null && (e = ""), e && (e = ": " + e), N(n >= t, "missing arguemnt" + e, "MISSING_ARGUMENT", {
    count: n,
    expectedCount: t
  }), N(n <= t, "too many arguemnts" + e, "UNEXPECTED_ARGUMENT", {
    count: n,
    expectedCount: t
  });
}
const yf = ["NFD", "NFC", "NFKD", "NFKC"].reduce((n, t) => {
  try {
    if ("test".normalize(t) !== "test")
      throw new Error("bad");
    if (t === "NFD") {
      const e = String.fromCharCode(233).normalize("NFD"), r = String.fromCharCode(101, 769);
      if (e !== r)
        throw new Error("broken");
    }
    n.push(t);
  } catch {
  }
  return n;
}, []);
function wf(n) {
  N(yf.indexOf(n) >= 0, "platform missing String.prototype.normalize", "UNSUPPORTED_OPERATION", {
    operation: "String.prototype.normalize",
    info: { form: n }
  });
}
function ji(n, t, e) {
  if (e == null && (e = ""), n !== t) {
    let r = e, s = "new";
    e && (r += ".", s += " " + e), N(!1, `private constructor; use ${r}from* methods`, "UNSUPPORTED_OPERATION", {
      operation: s
    });
  }
}
function ru(n, t, e) {
  if (n instanceof Uint8Array)
    return e ? new Uint8Array(n) : n;
  if (typeof n == "string" && n.match(/^0x([0-9a-f][0-9a-f])*$/i)) {
    const r = new Uint8Array((n.length - 2) / 2);
    let s = 2;
    for (let i = 0; i < r.length; i++)
      r[i] = parseInt(n.substring(s, s + 2), 16), s += 2;
    return r;
  }
  g(!1, "invalid BytesLike value", t || "value", n);
}
function J(n, t) {
  return ru(n, t, !1);
}
function Bt(n, t) {
  return ru(n, t, !0);
}
function q(n, t) {
  return !(typeof n != "string" || !n.match(/^0x[0-9A-Fa-f]*$/) || typeof t == "number" && n.length !== 2 + 2 * t || t === !0 && n.length % 2 !== 0);
}
function Af(n) {
  return q(n, !0) || n instanceof Uint8Array;
}
const Qo = "0123456789abcdef";
function k(n) {
  const t = J(n);
  let e = "0x";
  for (let r = 0; r < t.length; r++) {
    const s = t[r];
    e += Qo[(s & 240) >> 4] + Qo[s & 15];
  }
  return e;
}
function rt(n) {
  return "0x" + n.map((t) => k(t).substring(2)).join("");
}
function pr(n) {
  return q(n, !0) ? (n.length - 2) / 2 : J(n).length;
}
function $(n, t, e) {
  const r = J(n);
  return e != null && e > r.length && N(!1, "cannot slice beyond data bounds", "BUFFER_OVERRUN", {
    buffer: r,
    length: r.length,
    offset: e
  }), k(r.slice(t ?? 0, e ?? r.length));
}
function su(n, t, e) {
  const r = J(n);
  N(t >= r.length, "padding exceeds data length", "BUFFER_OVERRUN", {
    buffer: new Uint8Array(r),
    length: t,
    offset: t + 1
  });
  const s = new Uint8Array(t);
  return s.fill(0), e ? s.set(r, t - r.length) : s.set(r, 0), k(s);
}
function Kn(n, t) {
  return su(n, t, !0);
}
function Ef(n, t) {
  return su(n, t, !1);
}
const Zi = BigInt(0), ie = BigInt(1), cr = 9007199254740991;
function bf(n, t) {
  const e = Xi(n, "value"), r = BigInt(H(t, "width"));
  if (N(e >> r === Zi, "overflow", "NUMERIC_FAULT", {
    operation: "fromTwos",
    fault: "overflow",
    value: n
  }), e >> r - ie) {
    const s = (ie << r) - ie;
    return -((~e & s) + ie);
  }
  return e;
}
function iu(n, t) {
  let e = D(n, "value");
  const r = BigInt(H(t, "width")), s = ie << r - ie;
  if (e < Zi) {
    e = -e, N(e <= s, "too low", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: n
    });
    const i = (ie << r) - ie;
    return (~e & i) + ie;
  } else
    N(e < s, "too high", "NUMERIC_FAULT", {
      operation: "toTwos",
      fault: "overflow",
      value: n
    });
  return e;
}
function ms(n, t) {
  const e = Xi(n, "value"), r = BigInt(H(t, "bits"));
  return e & (ie << r) - ie;
}
function D(n, t) {
  switch (typeof n) {
    case "bigint":
      return n;
    case "number":
      return g(Number.isInteger(n), "underflow", t || "value", n), g(n >= -cr && n <= cr, "overflow", t || "value", n), BigInt(n);
    case "string":
      try {
        if (n === "")
          throw new Error("empty string");
        return n[0] === "-" && n[1] !== "-" ? -BigInt(n.substring(1)) : BigInt(n);
      } catch (e) {
        g(!1, `invalid BigNumberish string: ${e.message}`, t || "value", n);
      }
  }
  g(!1, "invalid BigNumberish value", t || "value", n);
}
function Xi(n, t) {
  const e = D(n, t);
  return N(e >= Zi, "unsigned value cannot be negative", "NUMERIC_FAULT", {
    fault: "overflow",
    operation: "getUint",
    value: n
  }), e;
}
const Vo = "0123456789abcdef";
function lo(n) {
  if (n instanceof Uint8Array) {
    let t = "0x0";
    for (const e of n)
      t += Vo[e >> 4], t += Vo[e & 15];
    return BigInt(t);
  }
  return D(n);
}
function H(n, t) {
  switch (typeof n) {
    case "bigint":
      return g(n >= -cr && n <= cr, "overflow", t || "value", n), Number(n);
    case "number":
      return g(Number.isInteger(n), "underflow", t || "value", n), g(n >= -cr && n <= cr, "overflow", t || "value", n), n;
    case "string":
      try {
        if (n === "")
          throw new Error("empty string");
        return H(BigInt(n), t);
      } catch (e) {
        g(!1, `invalid numeric string: ${e.message}`, t || "value", n);
      }
  }
  g(!1, "invalid numeric value", t || "value", n);
}
function If(n) {
  return H(lo(n));
}
function gn(n, t) {
  let r = Xi(n, "value").toString(16);
  if (t == null)
    r.length % 2 && (r = "0" + r);
  else {
    const s = H(t, "width");
    for (N(s * 2 >= r.length, `value exceeds width (${s} bytes)`, "NUMERIC_FAULT", {
      operation: "toBeHex",
      fault: "overflow",
      value: n
    }); r.length < s * 2; )
      r = "0" + r;
  }
  return "0x" + r;
}
function Gt(n) {
  const t = Xi(n, "value");
  if (t === Zi)
    return new Uint8Array([]);
  let e = t.toString(16);
  e.length % 2 && (e = "0" + e);
  const r = new Uint8Array(e.length / 2);
  for (let s = 0; s < r.length; s++) {
    const i = s * 2;
    r[s] = parseInt(e.substring(i, i + 2), 16);
  }
  return r;
}
function ur(n) {
  let t = k(Af(n) ? n : Gt(n)).substring(2);
  for (; t.startsWith("0"); )
    t = t.substring(1);
  return t === "" && (t = "0"), "0x" + t;
}
const Nf = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
BigInt(0);
const Jo = BigInt(58);
function Tf(n) {
  let t = lo(J(n)), e = "";
  for (; t; )
    e = Nf[Number(t % Jo)] + e, t /= Jo;
  return e;
}
function Pf(n) {
  n = atob(n);
  const t = new Uint8Array(n.length);
  for (let e = 0; e < n.length; e++)
    t[e] = n.charCodeAt(e);
  return J(t);
}
function Bf(n) {
  const t = J(n);
  let e = "";
  for (let r = 0; r < t.length; r++)
    e += String.fromCharCode(t[r]);
  return btoa(e);
}
var mr;
class au {
  /**
   *  Create a new **EventPayload** for %%emitter%% with
   *  the %%listener%% and for %%filter%%.
   */
  constructor(t, e, r) {
    /**
     *  The event filter.
     */
    w(this, "filter");
    /**
     *  The **EventEmitterable**.
     */
    w(this, "emitter");
    A(this, mr, void 0);
    d(this, mr, e), F(this, { emitter: t, filter: r });
  }
  /**
   *  Unregister the triggered listener for future events.
   */
  async removeListener() {
    l(this, mr) != null && await this.emitter.off(this.filter, l(this, mr));
  }
}
mr = new WeakMap();
function Cf(n, t, e, r, s) {
  g(!1, `invalid codepoint at offset ${t}; ${n}`, "bytes", e);
}
function ou(n, t, e, r, s) {
  if (n === "BAD_PREFIX" || n === "UNEXPECTED_CONTINUE") {
    let i = 0;
    for (let a = t + 1; a < e.length && e[a] >> 6 === 2; a++)
      i++;
    return i;
  }
  return n === "OVERRUN" ? e.length - t - 1 : 0;
}
function Of(n, t, e, r, s) {
  return n === "OVERLONG" ? (g(typeof s == "number", "invalid bad code point for replacement", "badCodepoint", s), r.push(s), 0) : (r.push(65533), ou(n, t, e));
}
const xf = Object.freeze({
  error: Cf,
  ignore: ou,
  replace: Of
});
function Sf(n, t) {
  t == null && (t = xf.error);
  const e = J(n, "bytes"), r = [];
  let s = 0;
  for (; s < e.length; ) {
    const i = e[s++];
    if (!(i >> 7)) {
      r.push(i);
      continue;
    }
    let a = null, o = null;
    if ((i & 224) === 192)
      a = 1, o = 127;
    else if ((i & 240) === 224)
      a = 2, o = 2047;
    else if ((i & 248) === 240)
      a = 3, o = 65535;
    else {
      (i & 192) === 128 ? s += t("UNEXPECTED_CONTINUE", s - 1, e, r) : s += t("BAD_PREFIX", s - 1, e, r);
      continue;
    }
    if (s - 1 + a >= e.length) {
      s += t("OVERRUN", s - 1, e, r);
      continue;
    }
    let c = i & (1 << 8 - a - 1) - 1;
    for (let u = 0; u < a; u++) {
      let f = e[s];
      if ((f & 192) != 128) {
        s += t("MISSING_CONTINUE", s, e, r), c = null;
        break;
      }
      c = c << 6 | f & 63, s++;
    }
    if (c !== null) {
      if (c > 1114111) {
        s += t("OUT_OF_RANGE", s - 1 - a, e, r, c);
        continue;
      }
      if (c >= 55296 && c <= 57343) {
        s += t("UTF16_SURROGATE", s - 1 - a, e, r, c);
        continue;
      }
      if (c <= o) {
        s += t("OVERLONG", s - 1 - a, e, r, c);
        continue;
      }
      r.push(c);
    }
  }
  return r;
}
function Me(n, t) {
  t != null && (wf(t), n = n.normalize(t));
  let e = [];
  for (let r = 0; r < n.length; r++) {
    const s = n.charCodeAt(r);
    if (s < 128)
      e.push(s);
    else if (s < 2048)
      e.push(s >> 6 | 192), e.push(s & 63 | 128);
    else if ((s & 64512) == 55296) {
      r++;
      const i = n.charCodeAt(r);
      g(r < n.length && (i & 64512) === 56320, "invalid surrogate pair", "str", n);
      const a = 65536 + ((s & 1023) << 10) + (i & 1023);
      e.push(a >> 18 | 240), e.push(a >> 12 & 63 | 128), e.push(a >> 6 & 63 | 128), e.push(a & 63 | 128);
    } else
      e.push(s >> 12 | 224), e.push(s >> 6 & 63 | 128), e.push(s & 63 | 128);
  }
  return new Uint8Array(e);
}
function Rf(n) {
  return n.map((t) => t <= 65535 ? String.fromCharCode(t) : (t -= 65536, String.fromCharCode((t >> 10 & 1023) + 55296, (t & 1023) + 56320))).join("");
}
function fo(n, t) {
  return Rf(Sf(n, t));
}
function cu(n) {
  async function t(e, r) {
    const s = e.url.split(":")[0].toLowerCase();
    N(s === "http" || s === "https", `unsupported protocol ${s}`, "UNSUPPORTED_OPERATION", {
      info: { protocol: s },
      operation: "request"
    }), N(s === "https" || !e.credentials || e.allowInsecureAuthentication, "insecure authorized connections unsupported", "UNSUPPORTED_OPERATION", {
      operation: "request"
    });
    let i;
    if (r) {
      const h = new AbortController();
      i = h.signal, r.addListener(() => {
        h.abort();
      });
    }
    const a = {
      method: e.method,
      headers: new Headers(Array.from(e)),
      body: e.body || void 0,
      signal: i
    }, o = await fetch(e.url, a), c = {};
    o.headers.forEach((h, p) => {
      c[p.toLowerCase()] = h;
    });
    const u = await o.arrayBuffer(), f = u == null ? null : new Uint8Array(u);
    return {
      statusCode: o.status,
      statusMessage: o.statusText,
      headers: c,
      body: f
    };
  }
  return t;
}
const vf = 12, kf = 250;
let Ko = cu();
const Df = new RegExp("^data:([^;:]*)?(;base64)?,(.*)$", "i"), Uf = new RegExp("^ipfs://(ipfs/)?(.*)$", "i");
let da = !1;
async function uu(n, t) {
  try {
    const e = n.match(Df);
    if (!e)
      throw new Error("invalid data");
    return new dn(200, "OK", {
      "content-type": e[1] || "text/plain"
    }, e[2] ? Pf(e[3]) : Ff(e[3]));
  } catch {
    return new dn(599, "BAD REQUEST (invalid data: URI)", {}, null, new _e(n));
  }
}
function lu(n) {
  async function t(e, r) {
    try {
      const s = e.match(Uf);
      if (!s)
        throw new Error("invalid link");
      return new _e(`${n}${s[2]}`);
    } catch {
      return new dn(599, "BAD REQUEST (invalid IPFS URI)", {}, null, new _e(e));
    }
  }
  return t;
}
const li = {
  data: uu,
  ipfs: lu("https://gateway.ipfs.io/ipfs/")
}, fu = /* @__PURE__ */ new WeakMap();
var Tn, Xe;
class Lf {
  constructor(t) {
    A(this, Tn, void 0);
    A(this, Xe, void 0);
    d(this, Tn, []), d(this, Xe, !1), fu.set(t, () => {
      if (!l(this, Xe)) {
        d(this, Xe, !0);
        for (const e of l(this, Tn))
          setTimeout(() => {
            e();
          }, 0);
        d(this, Tn, []);
      }
    });
  }
  addListener(t) {
    N(!l(this, Xe), "singal already cancelled", "UNSUPPORTED_OPERATION", {
      operation: "fetchCancelSignal.addCancelListener"
    }), l(this, Tn).push(t);
  }
  get cancelled() {
    return l(this, Xe);
  }
  checkSignal() {
    N(!this.cancelled, "cancelled", "CANCELLED", {});
  }
}
Tn = new WeakMap(), Xe = new WeakMap();
function fi(n) {
  if (n == null)
    throw new Error("missing signal; should not happen");
  return n.checkSignal(), n;
}
var yr, wr, te, Ne, Ar, Er, it, Ut, Te, Pn, Bn, Cn, le, Pe, qe, On, ys;
const Gi = class Gi {
  /**
   *  Create a new FetchRequest instance with default values.
   *
   *  Once created, each property may be set before issuing a
   *  ``.send()`` to make the request.
   */
  constructor(t) {
    A(this, On);
    A(this, yr, void 0);
    A(this, wr, void 0);
    A(this, te, void 0);
    A(this, Ne, void 0);
    A(this, Ar, void 0);
    A(this, Er, void 0);
    A(this, it, void 0);
    A(this, Ut, void 0);
    A(this, Te, void 0);
    // Hooks
    A(this, Pn, void 0);
    A(this, Bn, void 0);
    A(this, Cn, void 0);
    A(this, le, void 0);
    A(this, Pe, void 0);
    A(this, qe, void 0);
    d(this, Er, String(t)), d(this, yr, !1), d(this, wr, !0), d(this, te, {}), d(this, Ne, ""), d(this, Ar, 3e5), d(this, Pe, {
      slotInterval: kf,
      maxAttempts: vf
    }), d(this, qe, null);
  }
  /**
   *  The fetch URL to request.
   */
  get url() {
    return l(this, Er);
  }
  set url(t) {
    d(this, Er, String(t));
  }
  /**
   *  The fetch body, if any, to send as the request body. //(default: null)//
   *
   *  When setting a body, the intrinsic ``Content-Type`` is automatically
   *  set and will be used if **not overridden** by setting a custom
   *  header.
   *
   *  If %%body%% is null, the body is cleared (along with the
   *  intrinsic ``Content-Type``).
   *
   *  If %%body%% is a string, the intrinsic ``Content-Type`` is set to
   *  ``text/plain``.
   *
   *  If %%body%% is a Uint8Array, the intrinsic ``Content-Type`` is set to
   *  ``application/octet-stream``.
   *
   *  If %%body%% is any other object, the intrinsic ``Content-Type`` is
   *  set to ``application/json``.
   */
  get body() {
    return l(this, it) == null ? null : new Uint8Array(l(this, it));
  }
  set body(t) {
    if (t == null)
      d(this, it, void 0), d(this, Ut, void 0);
    else if (typeof t == "string")
      d(this, it, Me(t)), d(this, Ut, "text/plain");
    else if (t instanceof Uint8Array)
      d(this, it, t), d(this, Ut, "application/octet-stream");
    else if (typeof t == "object")
      d(this, it, Me(JSON.stringify(t))), d(this, Ut, "application/json");
    else
      throw new Error("invalid body");
  }
  /**
   *  Returns true if the request has a body.
   */
  hasBody() {
    return l(this, it) != null;
  }
  /**
   *  The HTTP method to use when requesting the URI. If no method
   *  has been explicitly set, then ``GET`` is used if the body is
   *  null and ``POST`` otherwise.
   */
  get method() {
    return l(this, Ne) ? l(this, Ne) : this.hasBody() ? "POST" : "GET";
  }
  set method(t) {
    t == null && (t = ""), d(this, Ne, String(t).toUpperCase());
  }
  /**
   *  The headers that will be used when requesting the URI. All
   *  keys are lower-case.
   *
   *  This object is a copy, so any changes will **NOT** be reflected
   *  in the ``FetchRequest``.
   *
   *  To set a header entry, use the ``setHeader`` method.
   */
  get headers() {
    const t = Object.assign({}, l(this, te));
    return l(this, Te) && (t.authorization = `Basic ${Bf(Me(l(this, Te)))}`), this.allowGzip && (t["accept-encoding"] = "gzip"), t["content-type"] == null && l(this, Ut) && (t["content-type"] = l(this, Ut)), this.body && (t["content-length"] = String(this.body.length)), t;
  }
  /**
   *  Get the header for %%key%%, ignoring case.
   */
  getHeader(t) {
    return this.headers[t.toLowerCase()];
  }
  /**
   *  Set the header for %%key%% to %%value%%. All values are coerced
   *  to a string.
   */
  setHeader(t, e) {
    l(this, te)[String(t).toLowerCase()] = String(e);
  }
  /**
   *  Clear all headers, resetting all intrinsic headers.
   */
  clearHeaders() {
    d(this, te, {});
  }
  [Symbol.iterator]() {
    const t = this.headers, e = Object.keys(t);
    let r = 0;
    return {
      next: () => {
        if (r < e.length) {
          const s = e[r++];
          return {
            value: [s, t[s]],
            done: !1
          };
        }
        return { value: void 0, done: !0 };
      }
    };
  }
  /**
   *  The value that will be sent for the ``Authorization`` header.
   *
   *  To set the credentials, use the ``setCredentials`` method.
   */
  get credentials() {
    return l(this, Te) || null;
  }
  /**
   *  Sets an ``Authorization`` for %%username%% with %%password%%.
   */
  setCredentials(t, e) {
    g(!t.match(/:/), "invalid basic authentication username", "username", "[REDACTED]"), d(this, Te, `${t}:${e}`);
  }
  /**
   *  Enable and request gzip-encoded responses. The response will
   *  automatically be decompressed. //(default: true)//
   */
  get allowGzip() {
    return l(this, wr);
  }
  set allowGzip(t) {
    d(this, wr, !!t);
  }
  /**
   *  Allow ``Authentication`` credentials to be sent over insecure
   *  channels. //(default: false)//
   */
  get allowInsecureAuthentication() {
    return !!l(this, yr);
  }
  set allowInsecureAuthentication(t) {
    d(this, yr, !!t);
  }
  /**
   *  The timeout (in milliseconds) to wait for a complete response.
   *  //(default: 5 minutes)//
   */
  get timeout() {
    return l(this, Ar);
  }
  set timeout(t) {
    g(t >= 0, "timeout must be non-zero", "timeout", t), d(this, Ar, t);
  }
  /**
   *  This function is called prior to each request, for example
   *  during a redirection or retry in case of server throttling.
   *
   *  This offers an opportunity to populate headers or update
   *  content before sending a request.
   */
  get preflightFunc() {
    return l(this, Pn) || null;
  }
  set preflightFunc(t) {
    d(this, Pn, t);
  }
  /**
   *  This function is called after each response, offering an
   *  opportunity to provide client-level throttling or updating
   *  response data.
   *
   *  Any error thrown in this causes the ``send()`` to throw.
   *
   *  To schedule a retry attempt (assuming the maximum retry limit
   *  has not been reached), use [[response.throwThrottleError]].
   */
  get processFunc() {
    return l(this, Bn) || null;
  }
  set processFunc(t) {
    d(this, Bn, t);
  }
  /**
   *  This function is called on each retry attempt.
   */
  get retryFunc() {
    return l(this, Cn) || null;
  }
  set retryFunc(t) {
    d(this, Cn, t);
  }
  /**
   *  This function is called to fetch content from HTTP and
   *  HTTPS URLs and is platform specific (e.g. nodejs vs
   *  browsers).
   *
   *  This is by default the currently registered global getUrl
   *  function, which can be changed using [[registerGetUrl]].
   *  If this has been set, setting is to ``null`` will cause
   *  this FetchRequest (and any future clones) to revert back to
   *  using the currently registered global getUrl function.
   *
   *  Setting this is generally not necessary, but may be useful
   *  for developers that wish to intercept requests or to
   *  configurege a proxy or other agent.
   */
  get getUrlFunc() {
    return l(this, qe) || Ko;
  }
  set getUrlFunc(t) {
    d(this, qe, t);
  }
  toString() {
    return `<FetchRequest method=${JSON.stringify(this.method)} url=${JSON.stringify(this.url)} headers=${JSON.stringify(this.headers)} body=${l(this, it) ? k(l(this, it)) : "null"}>`;
  }
  /**
   *  Update the throttle parameters used to determine maximum
   *  attempts and exponential-backoff properties.
   */
  setThrottleParams(t) {
    t.slotInterval != null && (l(this, Pe).slotInterval = t.slotInterval), t.maxAttempts != null && (l(this, Pe).maxAttempts = t.maxAttempts);
  }
  /**
   *  Resolves to the response by sending the request.
   */
  send() {
    return N(l(this, le) == null, "request already sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.send" }), d(this, le, new Lf(this)), C(this, On, ys).call(this, 0, zo() + this.timeout, 0, this, new dn(0, "", {}, null, this));
  }
  /**
   *  Cancels the inflight response, causing a ``CANCELLED``
   *  error to be rejected from the [[send]].
   */
  cancel() {
    N(l(this, le) != null, "request has not been sent", "UNSUPPORTED_OPERATION", { operation: "fetchRequest.cancel" });
    const t = fu.get(this);
    if (!t)
      throw new Error("missing signal; should not happen");
    t();
  }
  /**
   *  Returns a new [[FetchRequest]] that represents the redirection
   *  to %%location%%.
   */
  redirect(t) {
    const e = this.url.split(":")[0].toLowerCase(), r = t.split(":")[0].toLowerCase();
    N(this.method === "GET" && (e !== "https" || r !== "http") && t.match(/^https?:/), "unsupported redirect", "UNSUPPORTED_OPERATION", {
      operation: `redirect(${this.method} ${JSON.stringify(this.url)} => ${JSON.stringify(t)})`
    });
    const s = new Gi(t);
    return s.method = "GET", s.allowGzip = this.allowGzip, s.timeout = this.timeout, d(s, te, Object.assign({}, l(this, te))), l(this, it) && d(s, it, new Uint8Array(l(this, it))), d(s, Ut, l(this, Ut)), s;
  }
  /**
   *  Create a new copy of this request.
   */
  clone() {
    const t = new Gi(this.url);
    return d(t, Ne, l(this, Ne)), l(this, it) && d(t, it, l(this, it)), d(t, Ut, l(this, Ut)), d(t, te, Object.assign({}, l(this, te))), d(t, Te, l(this, Te)), this.allowGzip && (t.allowGzip = !0), t.timeout = this.timeout, this.allowInsecureAuthentication && (t.allowInsecureAuthentication = !0), d(t, Pn, l(this, Pn)), d(t, Bn, l(this, Bn)), d(t, Cn, l(this, Cn)), d(t, qe, l(this, qe)), t;
  }
  /**
   *  Locks all static configuration for gateways and FetchGetUrlFunc
   *  registration.
   */
  static lockConfig() {
    da = !0;
  }
  /**
   *  Get the current Gateway function for %%scheme%%.
   */
  static getGateway(t) {
    return li[t.toLowerCase()] || null;
  }
  /**
   *  Use the %%func%% when fetching URIs using %%scheme%%.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGateway(t, e) {
    if (t = t.toLowerCase(), t === "http" || t === "https")
      throw new Error(`cannot intercept ${t}; use registerGetUrl`);
    if (da)
      throw new Error("gateways locked");
    li[t] = e;
  }
  /**
   *  Use %%getUrl%% when fetching URIs over HTTP and HTTPS requests.
   *
   *  This method affects all requests globally.
   *
   *  If [[lockConfig]] has been called, no change is made and this
   *  throws.
   */
  static registerGetUrl(t) {
    if (da)
      throw new Error("gateways locked");
    Ko = t;
  }
  /**
   *  Creates a getUrl function that fetches content from HTTP and
   *  HTTPS URLs.
   *
   *  The available %%options%% are dependent on the platform
   *  implementation of the default getUrl function.
   *
   *  This is not generally something that is needed, but is useful
   *  when trying to customize simple behaviour when fetching HTTP
   *  content.
   */
  static createGetUrlFunc(t) {
    return cu();
  }
  /**
   *  Creates a function that can "fetch" data URIs.
   *
   *  Note that this is automatically done internally to support
   *  data URIs, so it is not necessary to register it.
   *
   *  This is not generally something that is needed, but may
   *  be useful in a wrapper to perfom custom data URI functionality.
   */
  static createDataGateway() {
    return uu;
  }
  /**
   *  Creates a function that will fetch IPFS (unvalidated) from
   *  a custom gateway baseUrl.
   *
   *  The default IPFS gateway used internally is
   *  ``"https:/\/gateway.ipfs.io/ipfs/"``.
   */
  static createIpfsGatewayFunc(t) {
    return lu(t);
  }
};
yr = new WeakMap(), wr = new WeakMap(), te = new WeakMap(), Ne = new WeakMap(), Ar = new WeakMap(), Er = new WeakMap(), it = new WeakMap(), Ut = new WeakMap(), Te = new WeakMap(), Pn = new WeakMap(), Bn = new WeakMap(), Cn = new WeakMap(), le = new WeakMap(), Pe = new WeakMap(), qe = new WeakMap(), On = new WeakSet(), ys = async function(t, e, r, s, i) {
  var f, h, p;
  if (t >= l(this, Pe).maxAttempts)
    return i.makeServerError("exceeded maximum retry limit");
  N(zo() <= e, "timeout", "TIMEOUT", {
    operation: "request.send",
    reason: "timeout",
    request: s
  }), r > 0 && await Mf(r);
  let a = this.clone();
  const o = (a.url.split(":")[0] || "").toLowerCase();
  if (o in li) {
    const y = await li[o](a.url, fi(l(s, le)));
    if (y instanceof dn) {
      let E = y;
      if (this.processFunc) {
        fi(l(s, le));
        try {
          E = await this.processFunc(a, E);
        } catch (m) {
          (m.throttle == null || typeof m.stall != "number") && E.makeServerError("error in post-processing function", m).assertOk();
        }
      }
      return E;
    }
    a = y;
  }
  this.preflightFunc && (a = await this.preflightFunc(a));
  const c = await this.getUrlFunc(a, fi(l(s, le)));
  let u = new dn(c.statusCode, c.statusMessage, c.headers, c.body, s);
  if (u.statusCode === 301 || u.statusCode === 302) {
    try {
      const y = u.headers.location || "";
      return C(f = a.redirect(y), On, ys).call(f, t + 1, e, 0, s, u);
    } catch {
    }
    return u;
  } else if (u.statusCode === 429 && (this.retryFunc == null || await this.retryFunc(a, u, t))) {
    const y = u.headers["retry-after"];
    let E = l(this, Pe).slotInterval * Math.trunc(Math.random() * Math.pow(2, t));
    return typeof y == "string" && y.match(/^[1-9][0-9]*$/) && (E = parseInt(y)), C(h = a.clone(), On, ys).call(h, t + 1, e, E, s, u);
  }
  if (this.processFunc) {
    fi(l(s, le));
    try {
      u = await this.processFunc(a, u);
    } catch (y) {
      (y.throttle == null || typeof y.stall != "number") && u.makeServerError("error in post-processing function", y).assertOk();
      let E = l(this, Pe).slotInterval * Math.trunc(Math.random() * Math.pow(2, t));
      return y.stall >= 0 && (E = y.stall), C(p = a.clone(), On, ys).call(p, t + 1, e, E, s, u);
    }
  }
  return u;
};
let _e = Gi;
var Fs, Ms, Gs, ee, br, xn;
const Lo = class Lo {
  constructor(t, e, r, s, i) {
    A(this, Fs, void 0);
    A(this, Ms, void 0);
    A(this, Gs, void 0);
    A(this, ee, void 0);
    A(this, br, void 0);
    A(this, xn, void 0);
    d(this, Fs, t), d(this, Ms, e), d(this, Gs, Object.keys(r).reduce((a, o) => (a[o.toLowerCase()] = String(r[o]), a), {})), d(this, ee, s == null ? null : new Uint8Array(s)), d(this, br, i || null), d(this, xn, { message: "" });
  }
  toString() {
    return `<FetchResponse status=${this.statusCode} body=${l(this, ee) ? k(l(this, ee)) : "null"}>`;
  }
  /**
   *  The response status code.
   */
  get statusCode() {
    return l(this, Fs);
  }
  /**
   *  The response status message.
   */
  get statusMessage() {
    return l(this, Ms);
  }
  /**
   *  The response headers. All keys are lower-case.
   */
  get headers() {
    return Object.assign({}, l(this, Gs));
  }
  /**
   *  The response body, or ``null`` if there was no body.
   */
  get body() {
    return l(this, ee) == null ? null : new Uint8Array(l(this, ee));
  }
  /**
   *  The response body as a UTF-8 encoded string, or the empty
   *  string (i.e. ``""``) if there was no body.
   *
   *  An error is thrown if the body is invalid UTF-8 data.
   */
  get bodyText() {
    try {
      return l(this, ee) == null ? "" : fo(l(this, ee));
    } catch {
      N(!1, "response body is not valid UTF-8 data", "UNSUPPORTED_OPERATION", {
        operation: "bodyText",
        info: { response: this }
      });
    }
  }
  /**
   *  The response body, decoded as JSON.
   *
   *  An error is thrown if the body is invalid JSON-encoded data
   *  or if there was no body.
   */
  get bodyJson() {
    try {
      return JSON.parse(this.bodyText);
    } catch {
      N(!1, "response body is not valid JSON", "UNSUPPORTED_OPERATION", {
        operation: "bodyJson",
        info: { response: this }
      });
    }
  }
  [Symbol.iterator]() {
    const t = this.headers, e = Object.keys(t);
    let r = 0;
    return {
      next: () => {
        if (r < e.length) {
          const s = e[r++];
          return {
            value: [s, t[s]],
            done: !1
          };
        }
        return { value: void 0, done: !0 };
      }
    };
  }
  /**
   *  Return a Response with matching headers and body, but with
   *  an error status code (i.e. 599) and %%message%% with an
   *  optional %%error%%.
   */
  makeServerError(t, e) {
    let r;
    t ? r = `CLIENT ESCALATED SERVER ERROR (${this.statusCode} ${this.statusMessage}; ${t})` : (t = `${this.statusCode} ${this.statusMessage}`, r = `CLIENT ESCALATED SERVER ERROR (${t})`);
    const s = new Lo(599, r, this.headers, this.body, l(this, br) || void 0);
    return d(s, xn, { message: t, error: e }), s;
  }
  /**
   *  If called within a [request.processFunc](FetchRequest-processFunc)
   *  call, causes the request to retry as if throttled for %%stall%%
   *  milliseconds.
   */
  throwThrottleError(t, e) {
    e == null ? e = -1 : g(Number.isInteger(e) && e >= 0, "invalid stall timeout", "stall", e);
    const r = new Error(t || "throttling requests");
    throw F(r, { stall: e, throttle: !0 }), r;
  }
  /**
   *  Get the header value for %%key%%, ignoring case.
   */
  getHeader(t) {
    return this.headers[t.toLowerCase()];
  }
  /**
   *  Returns true if the response has a body.
   */
  hasBody() {
    return l(this, ee) != null;
  }
  /**
   *  The request made for this response.
   */
  get request() {
    return l(this, br);
  }
  /**
   *  Returns true if this response was a success statusCode.
   */
  ok() {
    return l(this, xn).message === "" && this.statusCode >= 200 && this.statusCode < 300;
  }
  /**
   *  Throws a ``SERVER_ERROR`` if this response is not ok.
   */
  assertOk() {
    if (this.ok())
      return;
    let { message: t, error: e } = l(this, xn);
    t === "" && (t = `server response ${this.statusCode} ${this.statusMessage}`), N(!1, t, "SERVER_ERROR", {
      request: this.request || "unknown request",
      response: this,
      error: e
    });
  }
};
Fs = new WeakMap(), Ms = new WeakMap(), Gs = new WeakMap(), ee = new WeakMap(), br = new WeakMap(), xn = new WeakMap();
let dn = Lo;
function zo() {
  return (/* @__PURE__ */ new Date()).getTime();
}
function Ff(n) {
  return Me(n.replace(/%([0-9a-f][0-9a-f])/gi, (t, e) => String.fromCharCode(parseInt(e, 16))));
}
function Mf(n) {
  return new Promise((t) => setTimeout(t, n));
}
function Gf(n) {
  let t = n.toString(16);
  for (; t.length < 2; )
    t = "0" + t;
  return "0x" + t;
}
function Wo(n, t, e) {
  let r = 0;
  for (let s = 0; s < e; s++)
    r = r * 256 + n[t + s];
  return r;
}
function Yo(n, t, e, r) {
  const s = [];
  for (; e < t + 1 + r; ) {
    const i = hu(n, e);
    s.push(i.result), e += i.consumed, N(e <= t + 1 + r, "child data too short", "BUFFER_OVERRUN", {
      buffer: n,
      length: r,
      offset: t
    });
  }
  return { consumed: 1 + r, result: s };
}
function hu(n, t) {
  N(n.length !== 0, "data too short", "BUFFER_OVERRUN", {
    buffer: n,
    length: 0,
    offset: 1
  });
  const e = (r) => {
    N(r <= n.length, "data short segment too short", "BUFFER_OVERRUN", {
      buffer: n,
      length: n.length,
      offset: r
    });
  };
  if (n[t] >= 248) {
    const r = n[t] - 247;
    e(t + 1 + r);
    const s = Wo(n, t + 1, r);
    return e(t + 1 + r + s), Yo(n, t, t + 1 + r, r + s);
  } else if (n[t] >= 192) {
    const r = n[t] - 192;
    return e(t + 1 + r), Yo(n, t, t + 1, r);
  } else if (n[t] >= 184) {
    const r = n[t] - 183;
    e(t + 1 + r);
    const s = Wo(n, t + 1, r);
    e(t + 1 + r + s);
    const i = k(n.slice(t + 1 + r, t + 1 + r + s));
    return { consumed: 1 + r + s, result: i };
  } else if (n[t] >= 128) {
    const r = n[t] - 128;
    e(t + 1 + r);
    const s = k(n.slice(t + 1, t + 1 + r));
    return { consumed: 1 + r, result: s };
  }
  return { consumed: 1, result: Gf(n[t]) };
}
function ho(n) {
  const t = J(n, "data"), e = hu(t, 0);
  return g(e.consumed === t.length, "unexpected junk after rlp payload", "data", n), e.result;
}
function jo(n) {
  const t = [];
  for (; n; )
    t.unshift(n & 255), n >>= 8;
  return t;
}
function du(n) {
  if (Array.isArray(n)) {
    let r = [];
    if (n.forEach(function(i) {
      r = r.concat(du(i));
    }), r.length <= 55)
      return r.unshift(192 + r.length), r;
    const s = jo(r.length);
    return s.unshift(247 + s.length), s.concat(r);
  }
  const t = Array.prototype.slice.call(J(n, "object"));
  if (t.length === 1 && t[0] <= 127)
    return t;
  if (t.length <= 55)
    return t.unshift(128 + t.length), t;
  const e = jo(t.length);
  return e.unshift(183 + e.length), e.concat(t);
}
const Zo = "0123456789abcdef";
function Cs(n) {
  let t = "0x";
  for (const e of du(n))
    t += Zo[e >> 4], t += Zo[e & 15];
  return t;
}
const At = 32, Ra = new Uint8Array(At), _f = ["then"], hi = {};
function ps(n, t) {
  const e = new Error(`deferred error during ABI decoding triggered accessing ${n}`);
  throw e.error = t, e;
}
var $e;
const Ps = class Ps extends Array {
  /**
   *  @private
   */
  constructor(...e) {
    const r = e[0];
    let s = e[1], i = (e[2] || []).slice(), a = !0;
    r !== hi && (s = e, i = [], a = !1);
    super(s.length);
    A(this, $e, void 0);
    s.forEach((c, u) => {
      this[u] = c;
    });
    const o = i.reduce((c, u) => (typeof u == "string" && c.set(u, (c.get(u) || 0) + 1), c), /* @__PURE__ */ new Map());
    if (d(this, $e, Object.freeze(s.map((c, u) => {
      const f = i[u];
      return f != null && o.get(f) === 1 ? f : null;
    }))), !!a)
      return Object.freeze(this), new Proxy(this, {
        get: (c, u, f) => {
          if (typeof u == "string") {
            if (u.match(/^[0-9]+$/)) {
              const p = H(u, "%index");
              if (p < 0 || p >= this.length)
                throw new RangeError("out of result range");
              const y = c[p];
              return y instanceof Error && ps(`index ${p}`, y), y;
            }
            if (_f.indexOf(u) >= 0)
              return Reflect.get(c, u, f);
            const h = c[u];
            if (h instanceof Function)
              return function(...p) {
                return h.apply(this === f ? c : this, p);
              };
            if (!(u in c))
              return c.getValue.apply(this === f ? c : this, [u]);
          }
          return Reflect.get(c, u, f);
        }
      });
  }
  /**
   *  Returns the Result as a normal Array.
   *
   *  This will throw if there are any outstanding deferred
   *  errors.
   */
  toArray() {
    const e = [];
    return this.forEach((r, s) => {
      r instanceof Error && ps(`index ${s}`, r), e.push(r);
    }), e;
  }
  /**
   *  Returns the Result as an Object with each name-value pair.
   *
   *  This will throw if any value is unnamed, or if there are
   *  any outstanding deferred errors.
   */
  toObject() {
    return l(this, $e).reduce((e, r, s) => (N(r != null, "value at index ${ index } unnamed", "UNSUPPORTED_OPERATION", {
      operation: "toObject()"
    }), r in e || (e[r] = this.getValue(r)), e), {});
  }
  /**
   *  @_ignore
   */
  slice(e, r) {
    e == null && (e = 0), e < 0 && (e += this.length, e < 0 && (e = 0)), r == null && (r = this.length), r < 0 && (r += this.length, r < 0 && (r = 0)), r > this.length && (r = this.length);
    const s = [], i = [];
    for (let a = e; a < r; a++)
      s.push(this[a]), i.push(l(this, $e)[a]);
    return new Ps(hi, s, i);
  }
  /**
   *  @_ignore
   */
  filter(e, r) {
    const s = [], i = [];
    for (let a = 0; a < this.length; a++) {
      const o = this[a];
      o instanceof Error && ps(`index ${a}`, o), e.call(r, o, a, this) && (s.push(o), i.push(l(this, $e)[a]));
    }
    return new Ps(hi, s, i);
  }
  /**
   *  @_ignore
   */
  map(e, r) {
    const s = [];
    for (let i = 0; i < this.length; i++) {
      const a = this[i];
      a instanceof Error && ps(`index ${i}`, a), s.push(e.call(r, a, i, this));
    }
    return s;
  }
  /**
   *  Returns the value for %%name%%.
   *
   *  Since it is possible to have a key whose name conflicts with
   *  a method on a [[Result]] or its superclass Array, or any
   *  JavaScript keyword, this ensures all named values are still
   *  accessible by name.
   */
  getValue(e) {
    const r = l(this, $e).indexOf(e);
    if (r === -1)
      return;
    const s = this[r];
    return s instanceof Error && ps(`property ${JSON.stringify(e)}`, s.error), s;
  }
  /**
   *  Creates a new [[Result]] for %%items%% with each entry
   *  also accessible by its corresponding name in %%keys%%.
   */
  static fromItems(e, r) {
    return new Ps(hi, e, r);
  }
};
$e = new WeakMap();
let Oi = Ps;
function Xo(n) {
  let t = Gt(n);
  return N(t.length <= At, "value out-of-bounds", "BUFFER_OVERRUN", { buffer: t, length: At, offset: t.length }), t.length !== At && (t = Bt(rt([Ra.slice(t.length % At), t]))), t;
}
class Qe {
  constructor(t, e, r, s) {
    // The coder name:
    //   - address, uint256, tuple, array, etc.
    w(this, "name");
    // The fully expanded type, including composite types:
    //   - address, uint256, tuple(address,bytes), uint256[3][4][],  etc.
    w(this, "type");
    // The localName bound in the signature, in this example it is "baz":
    //   - tuple(address foo, uint bar) baz
    w(this, "localName");
    // Whether this type is dynamic:
    //  - Dynamic: bytes, string, address[], tuple(boolean[]), etc.
    //  - Not Dynamic: address, uint256, boolean[3], tuple(address, uint8)
    w(this, "dynamic");
    F(this, { name: t, type: e, localName: r, dynamic: s }, {
      name: "string",
      type: "string",
      localName: "string",
      dynamic: "boolean"
    });
  }
  _throwError(t, e) {
    g(!1, t, this.localName, e);
  }
}
var Be, Sn, Ir, Ai;
class va {
  constructor() {
    A(this, Ir);
    // An array of WordSize lengthed objects to concatenation
    A(this, Be, void 0);
    A(this, Sn, void 0);
    d(this, Be, []), d(this, Sn, 0);
  }
  get data() {
    return rt(l(this, Be));
  }
  get length() {
    return l(this, Sn);
  }
  appendWriter(t) {
    return C(this, Ir, Ai).call(this, Bt(t.data));
  }
  // Arrayish item; pad on the right to *nearest* WordSize
  writeBytes(t) {
    let e = Bt(t);
    const r = e.length % At;
    return r && (e = Bt(rt([e, Ra.slice(r)]))), C(this, Ir, Ai).call(this, e);
  }
  // Numeric item; pad on the left *to* WordSize
  writeValue(t) {
    return C(this, Ir, Ai).call(this, Xo(t));
  }
  // Inserts a numeric place-holder, returning a callback that can
  // be used to asjust the value later
  writeUpdatableValue() {
    const t = l(this, Be).length;
    return l(this, Be).push(Ra), d(this, Sn, l(this, Sn) + At), (e) => {
      l(this, Be)[t] = Xo(e);
    };
  }
}
Be = new WeakMap(), Sn = new WeakMap(), Ir = new WeakSet(), Ai = function(t) {
  return l(this, Be).push(t), d(this, Sn, l(this, Sn) + t.length), t.length;
};
var Lt, Vt, _i, pu;
const Fo = class Fo {
  constructor(t, e) {
    A(this, _i);
    // Allows incomplete unpadded data to be read; otherwise an error
    // is raised if attempting to overrun the buffer. This is required
    // to deal with an old Solidity bug, in which event data for
    // external (not public thoguh) was tightly packed.
    w(this, "allowLoose");
    A(this, Lt, void 0);
    A(this, Vt, void 0);
    F(this, { allowLoose: !!e }), d(this, Lt, Bt(t)), d(this, Vt, 0);
  }
  get data() {
    return k(l(this, Lt));
  }
  get dataLength() {
    return l(this, Lt).length;
  }
  get consumed() {
    return l(this, Vt);
  }
  get bytes() {
    return new Uint8Array(l(this, Lt));
  }
  // Create a sub-reader with the same underlying data, but offset
  subReader(t) {
    return new Fo(l(this, Lt).slice(l(this, Vt) + t), this.allowLoose);
  }
  // Read bytes
  readBytes(t, e) {
    let r = C(this, _i, pu).call(this, 0, t, !!e);
    return d(this, Vt, l(this, Vt) + r.length), r.slice(0, t);
  }
  // Read a numeric values
  readValue() {
    return lo(this.readBytes(At));
  }
  readIndex() {
    return If(this.readBytes(At));
  }
};
Lt = new WeakMap(), Vt = new WeakMap(), _i = new WeakSet(), pu = function(t, e, r) {
  let s = Math.ceil(e / At) * At;
  return l(this, Vt) + s > l(this, Lt).length && (this.allowLoose && r && l(this, Vt) + e <= l(this, Lt).length ? s = e : N(!1, "data out-of-bounds", "BUFFER_OVERRUN", {
    buffer: Bt(l(this, Lt)),
    length: l(this, Lt).length,
    offset: l(this, Vt) + s
  })), l(this, Lt).slice(l(this, Vt), l(this, Vt) + s);
};
let ka = Fo;
function xi(n) {
  if (!Number.isSafeInteger(n) || n < 0)
    throw new Error(`Wrong positive integer: ${n}`);
}
function po(n, ...t) {
  if (!(n instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(n.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${n.length}`);
}
function Hf(n) {
  if (typeof n != "function" || typeof n.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  xi(n.outputLen), xi(n.blockLen);
}
function rs(n, t = !0) {
  if (n.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && n.finished)
    throw new Error("Hash#digest() has already been called");
}
function gu(n, t) {
  po(n);
  const e = t.outputLen;
  if (n.length < e)
    throw new Error(`digestInto() expects output buffer of length at least ${e}`);
}
const pa = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const mu = (n) => n instanceof Uint8Array, Qf = (n) => new Uint32Array(n.buffer, n.byteOffset, Math.floor(n.byteLength / 4)), ga = (n) => new DataView(n.buffer, n.byteOffset, n.byteLength), ue = (n, t) => n << 32 - t | n >>> t, Vf = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!Vf)
  throw new Error("Non little-endian hardware is not supported");
function Jf(n) {
  if (typeof n != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof n}`);
  return new Uint8Array(new TextEncoder().encode(n));
}
function qi(n) {
  if (typeof n == "string" && (n = Jf(n)), !mu(n))
    throw new Error(`expected Uint8Array, got ${typeof n}`);
  return n;
}
function Kf(...n) {
  const t = new Uint8Array(n.reduce((r, s) => r + s.length, 0));
  let e = 0;
  return n.forEach((r) => {
    if (!mu(r))
      throw new Error("Uint8Array expected");
    t.set(r, e), e += r.length;
  }), t;
}
class go {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
}
function yu(n) {
  const t = (r) => n().update(qi(r)).digest(), e = n();
  return t.outputLen = e.outputLen, t.blockLen = e.blockLen, t.create = () => n(), t;
}
function zf(n = 32) {
  if (pa && typeof pa.getRandomValues == "function")
    return pa.getRandomValues(new Uint8Array(n));
  throw new Error("crypto.getRandomValues must be defined");
}
class wu extends go {
  constructor(t, e) {
    super(), this.finished = !1, this.destroyed = !1, Hf(t);
    const r = qi(e);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const s = this.blockLen, i = new Uint8Array(s);
    i.set(r.length > s ? t.create().update(r).digest() : r);
    for (let a = 0; a < i.length; a++)
      i[a] ^= 54;
    this.iHash.update(i), this.oHash = t.create();
    for (let a = 0; a < i.length; a++)
      i[a] ^= 106;
    this.oHash.update(i), i.fill(0);
  }
  update(t) {
    return rs(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    rs(this), po(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: e, iHash: r, finished: s, destroyed: i, blockLen: a, outputLen: o } = this;
    return t = t, t.finished = s, t.destroyed = i, t.blockLen = a, t.outputLen = o, t.oHash = e._cloneInto(t.oHash), t.iHash = r._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
}
const Au = (n, t, e) => new wu(n, t).update(e).digest();
Au.create = (n, t) => new wu(n, t);
function Wf(n, t, e, r) {
  if (typeof n.setBigUint64 == "function")
    return n.setBigUint64(t, e, r);
  const s = BigInt(32), i = BigInt(4294967295), a = Number(e >> s & i), o = Number(e & i), c = r ? 4 : 0, u = r ? 0 : 4;
  n.setUint32(t + c, a, r), n.setUint32(t + u, o, r);
}
class Yf extends go {
  constructor(t, e, r, s) {
    super(), this.blockLen = t, this.outputLen = e, this.padOffset = r, this.isLE = s, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = ga(this.buffer);
  }
  update(t) {
    rs(this);
    const { view: e, buffer: r, blockLen: s } = this;
    t = qi(t);
    const i = t.length;
    for (let a = 0; a < i; ) {
      const o = Math.min(s - this.pos, i - a);
      if (o === s) {
        const c = ga(t);
        for (; s <= i - a; a += s)
          this.process(c, a);
        continue;
      }
      r.set(t.subarray(a, a + o), this.pos), this.pos += o, a += o, this.pos === s && (this.process(e, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    rs(this), gu(t, this), this.finished = !0;
    const { buffer: e, view: r, blockLen: s, isLE: i } = this;
    let { pos: a } = this;
    e[a++] = 128, this.buffer.subarray(a).fill(0), this.padOffset > s - a && (this.process(r, 0), a = 0);
    for (let h = a; h < s; h++)
      e[h] = 0;
    Wf(r, s - 8, BigInt(this.length * 8), i), this.process(r, 0);
    const o = ga(t), c = this.outputLen;
    if (c % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const u = c / 4, f = this.get();
    if (u > f.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let h = 0; h < u; h++)
      o.setUint32(4 * h, f[h], i);
  }
  digest() {
    const { buffer: t, outputLen: e } = this;
    this.digestInto(t);
    const r = t.slice(0, e);
    return this.destroy(), r;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: e, buffer: r, length: s, finished: i, destroyed: a, pos: o } = this;
    return t.length = s, t.pos = o, t.finished = i, t.destroyed = a, s % e && t.buffer.set(r), t;
  }
}
const jf = (n, t, e) => n & t ^ ~n & e, Zf = (n, t, e) => n & t ^ n & e ^ t & e, Xf = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), We = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Ye = /* @__PURE__ */ new Uint32Array(64);
class qf extends Yf {
  constructor() {
    super(64, 32, 8, !1), this.A = We[0] | 0, this.B = We[1] | 0, this.C = We[2] | 0, this.D = We[3] | 0, this.E = We[4] | 0, this.F = We[5] | 0, this.G = We[6] | 0, this.H = We[7] | 0;
  }
  get() {
    const { A: t, B: e, C: r, D: s, E: i, F: a, G: o, H: c } = this;
    return [t, e, r, s, i, a, o, c];
  }
  // prettier-ignore
  set(t, e, r, s, i, a, o, c) {
    this.A = t | 0, this.B = e | 0, this.C = r | 0, this.D = s | 0, this.E = i | 0, this.F = a | 0, this.G = o | 0, this.H = c | 0;
  }
  process(t, e) {
    for (let h = 0; h < 16; h++, e += 4)
      Ye[h] = t.getUint32(e, !1);
    for (let h = 16; h < 64; h++) {
      const p = Ye[h - 15], y = Ye[h - 2], E = ue(p, 7) ^ ue(p, 18) ^ p >>> 3, m = ue(y, 17) ^ ue(y, 19) ^ y >>> 10;
      Ye[h] = m + Ye[h - 7] + E + Ye[h - 16] | 0;
    }
    let { A: r, B: s, C: i, D: a, E: o, F: c, G: u, H: f } = this;
    for (let h = 0; h < 64; h++) {
      const p = ue(o, 6) ^ ue(o, 11) ^ ue(o, 25), y = f + p + jf(o, c, u) + Xf[h] + Ye[h] | 0, m = (ue(r, 2) ^ ue(r, 13) ^ ue(r, 22)) + Zf(r, s, i) | 0;
      f = u, u = c, c = o, o = a + y | 0, a = i, i = s, s = r, r = y + m | 0;
    }
    r = r + this.A | 0, s = s + this.B | 0, i = i + this.C | 0, a = a + this.D | 0, o = o + this.E | 0, c = c + this.F | 0, u = u + this.G | 0, f = f + this.H | 0, this.set(r, s, i, a, o, c, u, f);
  }
  roundClean() {
    Ye.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
const $f = /* @__PURE__ */ yu(() => new qf()), di = /* @__PURE__ */ BigInt(2 ** 32 - 1), qo = /* @__PURE__ */ BigInt(32);
function th(n, t = !1) {
  return t ? { h: Number(n & di), l: Number(n >> qo & di) } : { h: Number(n >> qo & di) | 0, l: Number(n & di) | 0 };
}
function eh(n, t = !1) {
  let e = new Uint32Array(n.length), r = new Uint32Array(n.length);
  for (let s = 0; s < n.length; s++) {
    const { h: i, l: a } = th(n[s], t);
    [e[s], r[s]] = [i, a];
  }
  return [e, r];
}
const nh = (n, t, e) => n << e | t >>> 32 - e, rh = (n, t, e) => t << e | n >>> 32 - e, sh = (n, t, e) => t << e - 32 | n >>> 64 - e, ih = (n, t, e) => n << e - 32 | t >>> 64 - e, [Eu, bu, Iu] = [[], [], []], ah = /* @__PURE__ */ BigInt(0), gs = /* @__PURE__ */ BigInt(1), oh = /* @__PURE__ */ BigInt(2), ch = /* @__PURE__ */ BigInt(7), uh = /* @__PURE__ */ BigInt(256), lh = /* @__PURE__ */ BigInt(113);
for (let n = 0, t = gs, e = 1, r = 0; n < 24; n++) {
  [e, r] = [r, (2 * e + 3 * r) % 5], Eu.push(2 * (5 * r + e)), bu.push((n + 1) * (n + 2) / 2 % 64);
  let s = ah;
  for (let i = 0; i < 7; i++)
    t = (t << gs ^ (t >> ch) * lh) % uh, t & oh && (s ^= gs << (gs << /* @__PURE__ */ BigInt(i)) - gs);
  Iu.push(s);
}
const [fh, hh] = /* @__PURE__ */ eh(Iu, !0), $o = (n, t, e) => e > 32 ? sh(n, t, e) : nh(n, t, e), tc = (n, t, e) => e > 32 ? ih(n, t, e) : rh(n, t, e);
function dh(n, t = 24) {
  const e = new Uint32Array(10);
  for (let r = 24 - t; r < 24; r++) {
    for (let a = 0; a < 10; a++)
      e[a] = n[a] ^ n[a + 10] ^ n[a + 20] ^ n[a + 30] ^ n[a + 40];
    for (let a = 0; a < 10; a += 2) {
      const o = (a + 8) % 10, c = (a + 2) % 10, u = e[c], f = e[c + 1], h = $o(u, f, 1) ^ e[o], p = tc(u, f, 1) ^ e[o + 1];
      for (let y = 0; y < 50; y += 10)
        n[a + y] ^= h, n[a + y + 1] ^= p;
    }
    let s = n[2], i = n[3];
    for (let a = 0; a < 24; a++) {
      const o = bu[a], c = $o(s, i, o), u = tc(s, i, o), f = Eu[a];
      s = n[f], i = n[f + 1], n[f] = c, n[f + 1] = u;
    }
    for (let a = 0; a < 50; a += 10) {
      for (let o = 0; o < 10; o++)
        e[o] = n[a + o];
      for (let o = 0; o < 10; o++)
        n[a + o] ^= ~e[(o + 2) % 10] & e[(o + 4) % 10];
    }
    n[0] ^= fh[r], n[1] ^= hh[r];
  }
  e.fill(0);
}
class mo extends go {
  // NOTE: we accept arguments in bytes instead of bits here.
  constructor(t, e, r, s = !1, i = 24) {
    if (super(), this.blockLen = t, this.suffix = e, this.outputLen = r, this.enableXOF = s, this.rounds = i, this.pos = 0, this.posOut = 0, this.finished = !1, this.destroyed = !1, xi(r), 0 >= this.blockLen || this.blockLen >= 200)
      throw new Error("Sha3 supports only keccak-f1600 function");
    this.state = new Uint8Array(200), this.state32 = Qf(this.state);
  }
  keccak() {
    dh(this.state32, this.rounds), this.posOut = 0, this.pos = 0;
  }
  update(t) {
    rs(this);
    const { blockLen: e, state: r } = this;
    t = qi(t);
    const s = t.length;
    for (let i = 0; i < s; ) {
      const a = Math.min(e - this.pos, s - i);
      for (let o = 0; o < a; o++)
        r[this.pos++] ^= t[i++];
      this.pos === e && this.keccak();
    }
    return this;
  }
  finish() {
    if (this.finished)
      return;
    this.finished = !0;
    const { state: t, suffix: e, pos: r, blockLen: s } = this;
    t[r] ^= e, e & 128 && r === s - 1 && this.keccak(), t[s - 1] ^= 128, this.keccak();
  }
  writeInto(t) {
    rs(this, !1), po(t), this.finish();
    const e = this.state, { blockLen: r } = this;
    for (let s = 0, i = t.length; s < i; ) {
      this.posOut >= r && this.keccak();
      const a = Math.min(r - this.posOut, i - s);
      t.set(e.subarray(this.posOut, this.posOut + a), s), this.posOut += a, s += a;
    }
    return t;
  }
  xofInto(t) {
    if (!this.enableXOF)
      throw new Error("XOF is not possible for this instance");
    return this.writeInto(t);
  }
  xof(t) {
    return xi(t), this.xofInto(new Uint8Array(t));
  }
  digestInto(t) {
    if (gu(t, this), this.finished)
      throw new Error("digest() was already called");
    return this.writeInto(t), this.destroy(), t;
  }
  digest() {
    return this.digestInto(new Uint8Array(this.outputLen));
  }
  destroy() {
    this.destroyed = !0, this.state.fill(0);
  }
  _cloneInto(t) {
    const { blockLen: e, suffix: r, outputLen: s, rounds: i, enableXOF: a } = this;
    return t || (t = new mo(e, r, s, a, i)), t.state32.set(this.state32), t.pos = this.pos, t.posOut = this.posOut, t.finished = this.finished, t.rounds = i, t.suffix = r, t.outputLen = s, t.enableXOF = a, t.destroyed = this.destroyed, t;
  }
}
const ph = (n, t, e) => yu(() => new mo(t, n, e)), gh = /* @__PURE__ */ ph(1, 136, 256 / 8);
let Nu = !1;
const Tu = function(n) {
  return gh(n);
};
let Pu = Tu;
function X(n) {
  const t = J(n, "data");
  return k(Pu(t));
}
X._ = Tu;
X.lock = function() {
  Nu = !0;
};
X.register = function(n) {
  if (Nu)
    throw new TypeError("keccak256 is locked");
  Pu = n;
};
Object.freeze(X);
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Bu = BigInt(0), $i = BigInt(1), mh = BigInt(2), ta = (n) => n instanceof Uint8Array, yh = /* @__PURE__ */ Array.from({ length: 256 }, (n, t) => t.toString(16).padStart(2, "0"));
function ss(n) {
  if (!ta(n))
    throw new Error("Uint8Array expected");
  let t = "";
  for (let e = 0; e < n.length; e++)
    t += yh[n[e]];
  return t;
}
function Cu(n) {
  const t = n.toString(16);
  return t.length & 1 ? `0${t}` : t;
}
function yo(n) {
  if (typeof n != "string")
    throw new Error("hex string expected, got " + typeof n);
  return BigInt(n === "" ? "0" : `0x${n}`);
}
function is(n) {
  if (typeof n != "string")
    throw new Error("hex string expected, got " + typeof n);
  const t = n.length;
  if (t % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + t);
  const e = new Uint8Array(t / 2);
  for (let r = 0; r < e.length; r++) {
    const s = r * 2, i = n.slice(s, s + 2), a = Number.parseInt(i, 16);
    if (Number.isNaN(a) || a < 0)
      throw new Error("Invalid byte sequence");
    e[r] = a;
  }
  return e;
}
function Vn(n) {
  return yo(ss(n));
}
function wo(n) {
  if (!ta(n))
    throw new Error("Uint8Array expected");
  return yo(ss(Uint8Array.from(n).reverse()));
}
function as(n, t) {
  return is(n.toString(16).padStart(t * 2, "0"));
}
function Ao(n, t) {
  return as(n, t).reverse();
}
function wh(n) {
  return is(Cu(n));
}
function $t(n, t, e) {
  let r;
  if (typeof t == "string")
    try {
      r = is(t);
    } catch (i) {
      throw new Error(`${n} must be valid hex string, got "${t}". Cause: ${i}`);
    }
  else if (ta(t))
    r = Uint8Array.from(t);
  else
    throw new Error(`${n} must be hex string or Uint8Array`);
  const s = r.length;
  if (typeof e == "number" && s !== e)
    throw new Error(`${n} expected ${e} bytes, got ${s}`);
  return r;
}
function Os(...n) {
  const t = new Uint8Array(n.reduce((r, s) => r + s.length, 0));
  let e = 0;
  return n.forEach((r) => {
    if (!ta(r))
      throw new Error("Uint8Array expected");
    t.set(r, e), e += r.length;
  }), t;
}
function Ah(n, t) {
  if (n.length !== t.length)
    return !1;
  for (let e = 0; e < n.length; e++)
    if (n[e] !== t[e])
      return !1;
  return !0;
}
function Eh(n) {
  if (typeof n != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof n}`);
  return new Uint8Array(new TextEncoder().encode(n));
}
function bh(n) {
  let t;
  for (t = 0; n > Bu; n >>= $i, t += 1)
    ;
  return t;
}
function Ih(n, t) {
  return n >> BigInt(t) & $i;
}
const Nh = (n, t, e) => n | (e ? $i : Bu) << BigInt(t), Eo = (n) => (mh << BigInt(n - 1)) - $i, ma = (n) => new Uint8Array(n), ec = (n) => Uint8Array.from(n);
function Ou(n, t, e) {
  if (typeof n != "number" || n < 2)
    throw new Error("hashLen must be a number");
  if (typeof t != "number" || t < 2)
    throw new Error("qByteLen must be a number");
  if (typeof e != "function")
    throw new Error("hmacFn must be a function");
  let r = ma(n), s = ma(n), i = 0;
  const a = () => {
    r.fill(1), s.fill(0), i = 0;
  }, o = (...h) => e(s, r, ...h), c = (h = ma()) => {
    s = o(ec([0]), h), r = o(), h.length !== 0 && (s = o(ec([1]), h), r = o());
  }, u = () => {
    if (i++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let h = 0;
    const p = [];
    for (; h < t; ) {
      r = o();
      const y = r.slice();
      p.push(y), h += r.length;
    }
    return Os(...p);
  };
  return (h, p) => {
    a(), c(h);
    let y;
    for (; !(y = p(u())); )
      c();
    return a(), y;
  };
}
const Th = {
  bigint: (n) => typeof n == "bigint",
  function: (n) => typeof n == "function",
  boolean: (n) => typeof n == "boolean",
  string: (n) => typeof n == "string",
  stringOrUint8Array: (n) => typeof n == "string" || n instanceof Uint8Array,
  isSafeInteger: (n) => Number.isSafeInteger(n),
  array: (n) => Array.isArray(n),
  field: (n, t) => t.Fp.isValid(n),
  hash: (n) => typeof n == "function" && Number.isSafeInteger(n.outputLen)
};
function ri(n, t, e = {}) {
  const r = (s, i, a) => {
    const o = Th[i];
    if (typeof o != "function")
      throw new Error(`Invalid validator "${i}", expected function`);
    const c = n[s];
    if (!(a && c === void 0) && !o(c, n))
      throw new Error(`Invalid param ${String(s)}=${c} (${typeof c}), expected ${i}`);
  };
  for (const [s, i] of Object.entries(t))
    r(s, i, !1);
  for (const [s, i] of Object.entries(e))
    r(s, i, !0);
  return n;
}
const Ph = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet: Ih,
  bitLen: bh,
  bitMask: Eo,
  bitSet: Nh,
  bytesToHex: ss,
  bytesToNumberBE: Vn,
  bytesToNumberLE: wo,
  concatBytes: Os,
  createHmacDrbg: Ou,
  ensureBytes: $t,
  equalBytes: Ah,
  hexToBytes: is,
  hexToNumber: yo,
  numberToBytesBE: as,
  numberToBytesLE: Ao,
  numberToHexUnpadded: Cu,
  numberToVarBytesBE: wh,
  utf8ToBytes: Eh,
  validateObject: ri
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const ot = BigInt(0), tt = BigInt(1), An = BigInt(2), Bh = BigInt(3), Da = BigInt(4), nc = BigInt(5), rc = BigInt(8);
BigInt(9);
BigInt(16);
function Nt(n, t) {
  const e = n % t;
  return e >= ot ? e : t + e;
}
function Ch(n, t, e) {
  if (e <= ot || t < ot)
    throw new Error("Expected power/modulo > 0");
  if (e === tt)
    return ot;
  let r = tt;
  for (; t > ot; )
    t & tt && (r = r * n % e), n = n * n % e, t >>= tt;
  return r;
}
function _t(n, t, e) {
  let r = n;
  for (; t-- > ot; )
    r *= r, r %= e;
  return r;
}
function Ua(n, t) {
  if (n === ot || t <= ot)
    throw new Error(`invert: expected positive integers, got n=${n} mod=${t}`);
  let e = Nt(n, t), r = t, s = ot, i = tt;
  for (; e !== ot; ) {
    const o = r / e, c = r % e, u = s - i * o;
    r = e, e = c, s = i, i = u;
  }
  if (r !== tt)
    throw new Error("invert: does not exist");
  return Nt(s, t);
}
function Oh(n) {
  const t = (n - tt) / An;
  let e, r, s;
  for (e = n - tt, r = 0; e % An === ot; e /= An, r++)
    ;
  for (s = An; s < n && Ch(s, t, n) !== n - tt; s++)
    ;
  if (r === 1) {
    const a = (n + tt) / Da;
    return function(c, u) {
      const f = c.pow(u, a);
      if (!c.eql(c.sqr(f), u))
        throw new Error("Cannot find square root");
      return f;
    };
  }
  const i = (e + tt) / An;
  return function(o, c) {
    if (o.pow(c, t) === o.neg(o.ONE))
      throw new Error("Cannot find square root");
    let u = r, f = o.pow(o.mul(o.ONE, s), e), h = o.pow(c, i), p = o.pow(c, e);
    for (; !o.eql(p, o.ONE); ) {
      if (o.eql(p, o.ZERO))
        return o.ZERO;
      let y = 1;
      for (let m = o.sqr(p); y < u && !o.eql(m, o.ONE); y++)
        m = o.sqr(m);
      const E = o.pow(f, tt << BigInt(u - y - 1));
      f = o.sqr(E), h = o.mul(h, E), p = o.mul(p, f), u = y;
    }
    return h;
  };
}
function xh(n) {
  if (n % Da === Bh) {
    const t = (n + tt) / Da;
    return function(r, s) {
      const i = r.pow(s, t);
      if (!r.eql(r.sqr(i), s))
        throw new Error("Cannot find square root");
      return i;
    };
  }
  if (n % rc === nc) {
    const t = (n - nc) / rc;
    return function(r, s) {
      const i = r.mul(s, An), a = r.pow(i, t), o = r.mul(s, a), c = r.mul(r.mul(o, An), a), u = r.mul(o, r.sub(c, r.ONE));
      if (!r.eql(r.sqr(u), s))
        throw new Error("Cannot find square root");
      return u;
    };
  }
  return Oh(n);
}
const Sh = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function Rh(n) {
  const t = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, e = Sh.reduce((r, s) => (r[s] = "function", r), t);
  return ri(n, e);
}
function vh(n, t, e) {
  if (e < ot)
    throw new Error("Expected power > 0");
  if (e === ot)
    return n.ONE;
  if (e === tt)
    return t;
  let r = n.ONE, s = t;
  for (; e > ot; )
    e & tt && (r = n.mul(r, s)), s = n.sqr(s), e >>= tt;
  return r;
}
function kh(n, t) {
  const e = new Array(t.length), r = t.reduce((i, a, o) => n.is0(a) ? i : (e[o] = i, n.mul(i, a)), n.ONE), s = n.inv(r);
  return t.reduceRight((i, a, o) => n.is0(a) ? i : (e[o] = n.mul(i, e[o]), n.mul(i, a)), s), e;
}
function xu(n, t) {
  const e = t !== void 0 ? t : n.toString(2).length, r = Math.ceil(e / 8);
  return { nBitLength: e, nByteLength: r };
}
function Dh(n, t, e = !1, r = {}) {
  if (n <= ot)
    throw new Error(`Expected Field ORDER > 0, got ${n}`);
  const { nBitLength: s, nByteLength: i } = xu(n, t);
  if (i > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const a = xh(n), o = Object.freeze({
    ORDER: n,
    BITS: s,
    BYTES: i,
    MASK: Eo(s),
    ZERO: ot,
    ONE: tt,
    create: (c) => Nt(c, n),
    isValid: (c) => {
      if (typeof c != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof c}`);
      return ot <= c && c < n;
    },
    is0: (c) => c === ot,
    isOdd: (c) => (c & tt) === tt,
    neg: (c) => Nt(-c, n),
    eql: (c, u) => c === u,
    sqr: (c) => Nt(c * c, n),
    add: (c, u) => Nt(c + u, n),
    sub: (c, u) => Nt(c - u, n),
    mul: (c, u) => Nt(c * u, n),
    pow: (c, u) => vh(o, c, u),
    div: (c, u) => Nt(c * Ua(u, n), n),
    // Same as above, but doesn't normalize
    sqrN: (c) => c * c,
    addN: (c, u) => c + u,
    subN: (c, u) => c - u,
    mulN: (c, u) => c * u,
    inv: (c) => Ua(c, n),
    sqrt: r.sqrt || ((c) => a(o, c)),
    invertBatch: (c) => kh(o, c),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (c, u, f) => f ? u : c,
    toBytes: (c) => e ? Ao(c, i) : as(c, i),
    fromBytes: (c) => {
      if (c.length !== i)
        throw new Error(`Fp.fromBytes: expected ${i}, got ${c.length}`);
      return e ? wo(c) : Vn(c);
    }
  });
  return Object.freeze(o);
}
function Su(n) {
  if (typeof n != "bigint")
    throw new Error("field order must be bigint");
  const t = n.toString(2).length;
  return Math.ceil(t / 8);
}
function Ru(n) {
  const t = Su(n);
  return t + Math.ceil(t / 2);
}
function Uh(n, t, e = !1) {
  const r = n.length, s = Su(t), i = Ru(t);
  if (r < 16 || r < i || r > 1024)
    throw new Error(`expected ${i}-1024 bytes of input, got ${r}`);
  const a = e ? Vn(n) : wo(n), o = Nt(a, t - tt) + tt;
  return e ? Ao(o, s) : as(o, s);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Lh = BigInt(0), ya = BigInt(1);
function Fh(n, t) {
  const e = (s, i) => {
    const a = i.negate();
    return s ? a : i;
  }, r = (s) => {
    const i = Math.ceil(t / s) + 1, a = 2 ** (s - 1);
    return { windows: i, windowSize: a };
  };
  return {
    constTimeNegate: e,
    // non-const time multiplication ladder
    unsafeLadder(s, i) {
      let a = n.ZERO, o = s;
      for (; i > Lh; )
        i & ya && (a = a.add(o)), o = o.double(), i >>= ya;
      return a;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(s, i) {
      const { windows: a, windowSize: o } = r(i), c = [];
      let u = s, f = u;
      for (let h = 0; h < a; h++) {
        f = u, c.push(f);
        for (let p = 1; p < o; p++)
          f = f.add(u), c.push(f);
        u = f.double();
      }
      return c;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(s, i, a) {
      const { windows: o, windowSize: c } = r(s);
      let u = n.ZERO, f = n.BASE;
      const h = BigInt(2 ** s - 1), p = 2 ** s, y = BigInt(s);
      for (let E = 0; E < o; E++) {
        const m = E * c;
        let I = Number(a & h);
        a >>= y, I > c && (I -= p, a += ya);
        const b = m, T = m + Math.abs(I) - 1, O = E % 2 !== 0, v = I < 0;
        I === 0 ? f = f.add(e(O, i[b])) : u = u.add(e(v, i[T]));
      }
      return { p: u, f };
    },
    wNAFCached(s, i, a, o) {
      const c = s._WINDOW_SIZE || 1;
      let u = i.get(s);
      return u || (u = this.precomputeWindow(s, c), c !== 1 && i.set(s, o(u))), this.wNAF(c, u, a);
    }
  };
}
function vu(n) {
  return Rh(n.Fp), ri(n, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...xu(n.n, n.nBitLength),
    ...n,
    p: n.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function Mh(n) {
  const t = vu(n);
  ri(t, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: e, Fp: r, a: s } = t;
  if (e) {
    if (!r.eql(s, r.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof e != "object" || typeof e.beta != "bigint" || typeof e.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...t });
}
const { bytesToNumberBE: Gh, hexToBytes: _h } = Ph, bn = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(t = "") {
      super(t);
    }
  },
  _parseInt(n) {
    const { Err: t } = bn;
    if (n.length < 2 || n[0] !== 2)
      throw new t("Invalid signature integer tag");
    const e = n[1], r = n.subarray(2, e + 2);
    if (!e || r.length !== e)
      throw new t("Invalid signature integer: wrong length");
    if (r[0] & 128)
      throw new t("Invalid signature integer: negative");
    if (r[0] === 0 && !(r[1] & 128))
      throw new t("Invalid signature integer: unnecessary leading zero");
    return { d: Gh(r), l: n.subarray(e + 2) };
  },
  toSig(n) {
    const { Err: t } = bn, e = typeof n == "string" ? _h(n) : n;
    if (!(e instanceof Uint8Array))
      throw new Error("ui8a expected");
    let r = e.length;
    if (r < 2 || e[0] != 48)
      throw new t("Invalid signature tag");
    if (e[1] !== r - 2)
      throw new t("Invalid signature: incorrect length");
    const { d: s, l: i } = bn._parseInt(e.subarray(2)), { d: a, l: o } = bn._parseInt(i);
    if (o.length)
      throw new t("Invalid signature: left bytes after parsing");
    return { r: s, s: a };
  },
  hexFromSig(n) {
    const t = (u) => Number.parseInt(u[0], 16) & 8 ? "00" + u : u, e = (u) => {
      const f = u.toString(16);
      return f.length & 1 ? `0${f}` : f;
    }, r = t(e(n.s)), s = t(e(n.r)), i = r.length / 2, a = s.length / 2, o = e(i), c = e(a);
    return `30${e(a + i + 4)}02${c}${s}02${o}${r}`;
  }
}, Le = BigInt(0), Yt = BigInt(1);
BigInt(2);
const sc = BigInt(3);
BigInt(4);
function Hh(n) {
  const t = Mh(n), { Fp: e } = t, r = t.toBytes || ((E, m, I) => {
    const b = m.toAffine();
    return Os(Uint8Array.from([4]), e.toBytes(b.x), e.toBytes(b.y));
  }), s = t.fromBytes || ((E) => {
    const m = E.subarray(1), I = e.fromBytes(m.subarray(0, e.BYTES)), b = e.fromBytes(m.subarray(e.BYTES, 2 * e.BYTES));
    return { x: I, y: b };
  });
  function i(E) {
    const { a: m, b: I } = t, b = e.sqr(E), T = e.mul(b, E);
    return e.add(e.add(T, e.mul(E, m)), I);
  }
  if (!e.eql(e.sqr(t.Gy), i(t.Gx)))
    throw new Error("bad generator point: equation left != right");
  function a(E) {
    return typeof E == "bigint" && Le < E && E < t.n;
  }
  function o(E) {
    if (!a(E))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function c(E) {
    const { allowedPrivateKeyLengths: m, nByteLength: I, wrapPrivateKey: b, n: T } = t;
    if (m && typeof E != "bigint") {
      if (E instanceof Uint8Array && (E = ss(E)), typeof E != "string" || !m.includes(E.length))
        throw new Error("Invalid key");
      E = E.padStart(I * 2, "0");
    }
    let O;
    try {
      O = typeof E == "bigint" ? E : Vn($t("private key", E, I));
    } catch {
      throw new Error(`private key must be ${I} bytes, hex or bigint, not ${typeof E}`);
    }
    return b && (O = Nt(O, T)), o(O), O;
  }
  const u = /* @__PURE__ */ new Map();
  function f(E) {
    if (!(E instanceof h))
      throw new Error("ProjectivePoint expected");
  }
  class h {
    constructor(m, I, b) {
      if (this.px = m, this.py = I, this.pz = b, m == null || !e.isValid(m))
        throw new Error("x required");
      if (I == null || !e.isValid(I))
        throw new Error("y required");
      if (b == null || !e.isValid(b))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(m) {
      const { x: I, y: b } = m || {};
      if (!m || !e.isValid(I) || !e.isValid(b))
        throw new Error("invalid affine point");
      if (m instanceof h)
        throw new Error("projective point not allowed");
      const T = (O) => e.eql(O, e.ZERO);
      return T(I) && T(b) ? h.ZERO : new h(I, b, e.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(m) {
      const I = e.invertBatch(m.map((b) => b.pz));
      return m.map((b, T) => b.toAffine(I[T])).map(h.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(m) {
      const I = h.fromAffine(s($t("pointHex", m)));
      return I.assertValidity(), I;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(m) {
      return h.BASE.multiply(c(m));
    }
    // "Private method", don't use it directly
    _setWindowSize(m) {
      this._WINDOW_SIZE = m, u.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (t.allowInfinityPoint && !e.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: m, y: I } = this.toAffine();
      if (!e.isValid(m) || !e.isValid(I))
        throw new Error("bad point: x or y not FE");
      const b = e.sqr(I), T = i(m);
      if (!e.eql(b, T))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: m } = this.toAffine();
      if (e.isOdd)
        return !e.isOdd(m);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(m) {
      f(m);
      const { px: I, py: b, pz: T } = this, { px: O, py: v, pz: U } = m, R = e.eql(e.mul(I, U), e.mul(O, T)), M = e.eql(e.mul(b, U), e.mul(v, T));
      return R && M;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new h(this.px, e.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: m, b: I } = t, b = e.mul(I, sc), { px: T, py: O, pz: v } = this;
      let U = e.ZERO, R = e.ZERO, M = e.ZERO, G = e.mul(T, T), et = e.mul(O, O), z = e.mul(v, v), K = e.mul(T, O);
      return K = e.add(K, K), M = e.mul(T, v), M = e.add(M, M), U = e.mul(m, M), R = e.mul(b, z), R = e.add(U, R), U = e.sub(et, R), R = e.add(et, R), R = e.mul(U, R), U = e.mul(K, U), M = e.mul(b, M), z = e.mul(m, z), K = e.sub(G, z), K = e.mul(m, K), K = e.add(K, M), M = e.add(G, G), G = e.add(M, G), G = e.add(G, z), G = e.mul(G, K), R = e.add(R, G), z = e.mul(O, v), z = e.add(z, z), G = e.mul(z, K), U = e.sub(U, G), M = e.mul(z, et), M = e.add(M, M), M = e.add(M, M), new h(U, R, M);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(m) {
      f(m);
      const { px: I, py: b, pz: T } = this, { px: O, py: v, pz: U } = m;
      let R = e.ZERO, M = e.ZERO, G = e.ZERO;
      const et = t.a, z = e.mul(t.b, sc);
      let K = e.mul(I, O), xt = e.mul(b, v), St = e.mul(T, U), Ve = e.add(I, b), B = e.add(O, v);
      Ve = e.mul(Ve, B), B = e.add(K, xt), Ve = e.sub(Ve, B), B = e.add(I, T);
      let S = e.add(O, U);
      return B = e.mul(B, S), S = e.add(K, St), B = e.sub(B, S), S = e.add(b, T), R = e.add(v, U), S = e.mul(S, R), R = e.add(xt, St), S = e.sub(S, R), G = e.mul(et, B), R = e.mul(z, St), G = e.add(R, G), R = e.sub(xt, G), G = e.add(xt, G), M = e.mul(R, G), xt = e.add(K, K), xt = e.add(xt, K), St = e.mul(et, St), B = e.mul(z, B), xt = e.add(xt, St), St = e.sub(K, St), St = e.mul(et, St), B = e.add(B, St), K = e.mul(xt, B), M = e.add(M, K), K = e.mul(S, B), R = e.mul(Ve, R), R = e.sub(R, K), K = e.mul(Ve, xt), G = e.mul(S, G), G = e.add(G, K), new h(R, M, G);
    }
    subtract(m) {
      return this.add(m.negate());
    }
    is0() {
      return this.equals(h.ZERO);
    }
    wNAF(m) {
      return y.wNAFCached(this, u, m, (I) => {
        const b = e.invertBatch(I.map((T) => T.pz));
        return I.map((T, O) => T.toAffine(b[O])).map(h.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(m) {
      const I = h.ZERO;
      if (m === Le)
        return I;
      if (o(m), m === Yt)
        return this;
      const { endo: b } = t;
      if (!b)
        return y.unsafeLadder(this, m);
      let { k1neg: T, k1: O, k2neg: v, k2: U } = b.splitScalar(m), R = I, M = I, G = this;
      for (; O > Le || U > Le; )
        O & Yt && (R = R.add(G)), U & Yt && (M = M.add(G)), G = G.double(), O >>= Yt, U >>= Yt;
      return T && (R = R.negate()), v && (M = M.negate()), M = new h(e.mul(M.px, b.beta), M.py, M.pz), R.add(M);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(m) {
      o(m);
      let I = m, b, T;
      const { endo: O } = t;
      if (O) {
        const { k1neg: v, k1: U, k2neg: R, k2: M } = O.splitScalar(I);
        let { p: G, f: et } = this.wNAF(U), { p: z, f: K } = this.wNAF(M);
        G = y.constTimeNegate(v, G), z = y.constTimeNegate(R, z), z = new h(e.mul(z.px, O.beta), z.py, z.pz), b = G.add(z), T = et.add(K);
      } else {
        const { p: v, f: U } = this.wNAF(I);
        b = v, T = U;
      }
      return h.normalizeZ([b, T])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(m, I, b) {
      const T = h.BASE, O = (U, R) => R === Le || R === Yt || !U.equals(T) ? U.multiplyUnsafe(R) : U.multiply(R), v = O(this, I).add(O(m, b));
      return v.is0() ? void 0 : v;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(m) {
      const { px: I, py: b, pz: T } = this, O = this.is0();
      m == null && (m = O ? e.ONE : e.inv(T));
      const v = e.mul(I, m), U = e.mul(b, m), R = e.mul(T, m);
      if (O)
        return { x: e.ZERO, y: e.ZERO };
      if (!e.eql(R, e.ONE))
        throw new Error("invZ was invalid");
      return { x: v, y: U };
    }
    isTorsionFree() {
      const { h: m, isTorsionFree: I } = t;
      if (m === Yt)
        return !0;
      if (I)
        return I(h, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: m, clearCofactor: I } = t;
      return m === Yt ? this : I ? I(h, this) : this.multiplyUnsafe(t.h);
    }
    toRawBytes(m = !0) {
      return this.assertValidity(), r(h, this, m);
    }
    toHex(m = !0) {
      return ss(this.toRawBytes(m));
    }
  }
  h.BASE = new h(t.Gx, t.Gy, e.ONE), h.ZERO = new h(e.ZERO, e.ONE, e.ZERO);
  const p = t.nBitLength, y = Fh(h, t.endo ? Math.ceil(p / 2) : p);
  return {
    CURVE: t,
    ProjectivePoint: h,
    normPrivateKeyToScalar: c,
    weierstrassEquation: i,
    isWithinCurveOrder: a
  };
}
function Qh(n) {
  const t = vu(n);
  return ri(t, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...t });
}
function Vh(n) {
  const t = Qh(n), { Fp: e, n: r } = t, s = e.BYTES + 1, i = 2 * e.BYTES + 1;
  function a(B) {
    return Le < B && B < e.ORDER;
  }
  function o(B) {
    return Nt(B, r);
  }
  function c(B) {
    return Ua(B, r);
  }
  const { ProjectivePoint: u, normPrivateKeyToScalar: f, weierstrassEquation: h, isWithinCurveOrder: p } = Hh({
    ...t,
    toBytes(B, S, _) {
      const Y = S.toAffine(), W = e.toBytes(Y.x), st = Os;
      return _ ? st(Uint8Array.from([S.hasEvenY() ? 2 : 3]), W) : st(Uint8Array.from([4]), W, e.toBytes(Y.y));
    },
    fromBytes(B) {
      const S = B.length, _ = B[0], Y = B.subarray(1);
      if (S === s && (_ === 2 || _ === 3)) {
        const W = Vn(Y);
        if (!a(W))
          throw new Error("Point is not on curve");
        const st = h(W);
        let Rt = e.sqrt(st);
        const vt = (Rt & Yt) === Yt;
        return (_ & 1) === 1 !== vt && (Rt = e.neg(Rt)), { x: W, y: Rt };
      } else if (S === i && _ === 4) {
        const W = e.fromBytes(Y.subarray(0, e.BYTES)), st = e.fromBytes(Y.subarray(e.BYTES, 2 * e.BYTES));
        return { x: W, y: st };
      } else
        throw new Error(`Point of length ${S} was invalid. Expected ${s} compressed bytes or ${i} uncompressed bytes`);
    }
  }), y = (B) => ss(as(B, t.nByteLength));
  function E(B) {
    const S = r >> Yt;
    return B > S;
  }
  function m(B) {
    return E(B) ? o(-B) : B;
  }
  const I = (B, S, _) => Vn(B.slice(S, _));
  class b {
    constructor(S, _, Y) {
      this.r = S, this.s = _, this.recovery = Y, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(S) {
      const _ = t.nByteLength;
      return S = $t("compactSignature", S, _ * 2), new b(I(S, 0, _), I(S, _, 2 * _));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(S) {
      const { r: _, s: Y } = bn.toSig($t("DER", S));
      return new b(_, Y);
    }
    assertValidity() {
      if (!p(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!p(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(S) {
      return new b(this.r, this.s, S);
    }
    recoverPublicKey(S) {
      const { r: _, s: Y, recovery: W } = this, st = M($t("msgHash", S));
      if (W == null || ![0, 1, 2, 3].includes(W))
        throw new Error("recovery id invalid");
      const Rt = W === 2 || W === 3 ? _ + t.n : _;
      if (Rt >= e.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const vt = W & 1 ? "03" : "02", Je = u.fromHex(vt + y(Rt)), Ke = c(Rt), Xn = o(-st * Ke), hs = o(Y * Ke), ze = u.BASE.multiplyAndAddUnsafe(Je, Xn, hs);
      if (!ze)
        throw new Error("point at infinify");
      return ze.assertValidity(), ze;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return E(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new b(this.r, o(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return is(this.toDERHex());
    }
    toDERHex() {
      return bn.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return is(this.toCompactHex());
    }
    toCompactHex() {
      return y(this.r) + y(this.s);
    }
  }
  const T = {
    isValidPrivateKey(B) {
      try {
        return f(B), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: f,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const B = Ru(t.n);
      return Uh(t.randomBytes(B), t.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(B = 8, S = u.BASE) {
      return S._setWindowSize(B), S.multiply(BigInt(3)), S;
    }
  };
  function O(B, S = !0) {
    return u.fromPrivateKey(B).toRawBytes(S);
  }
  function v(B) {
    const S = B instanceof Uint8Array, _ = typeof B == "string", Y = (S || _) && B.length;
    return S ? Y === s || Y === i : _ ? Y === 2 * s || Y === 2 * i : B instanceof u;
  }
  function U(B, S, _ = !0) {
    if (v(B))
      throw new Error("first arg must be private key");
    if (!v(S))
      throw new Error("second arg must be public key");
    return u.fromHex(S).multiply(f(B)).toRawBytes(_);
  }
  const R = t.bits2int || function(B) {
    const S = Vn(B), _ = B.length * 8 - t.nBitLength;
    return _ > 0 ? S >> BigInt(_) : S;
  }, M = t.bits2int_modN || function(B) {
    return o(R(B));
  }, G = Eo(t.nBitLength);
  function et(B) {
    if (typeof B != "bigint")
      throw new Error("bigint expected");
    if (!(Le <= B && B < G))
      throw new Error(`bigint expected < 2^${t.nBitLength}`);
    return as(B, t.nByteLength);
  }
  function z(B, S, _ = K) {
    if (["recovered", "canonical"].some((yn) => yn in _))
      throw new Error("sign() legacy options not supported");
    const { hash: Y, randomBytes: W } = t;
    let { lowS: st, prehash: Rt, extraEntropy: vt } = _;
    st == null && (st = !0), B = $t("msgHash", B), Rt && (B = $t("prehashed msgHash", Y(B)));
    const Je = M(B), Ke = f(S), Xn = [et(Ke), et(Je)];
    if (vt != null) {
      const yn = vt === !0 ? W(e.BYTES) : vt;
      Xn.push($t("extraEntropy", yn));
    }
    const hs = Os(...Xn), ze = Je;
    function la(yn) {
      const qn = R(yn);
      if (!p(qn))
        return;
      const Go = c(qn), $n = u.BASE.multiply(qn).toAffine(), Xt = o($n.x);
      if (Xt === Le)
        return;
      const tr = o(Go * o(ze + Xt * Ke));
      if (tr === Le)
        return;
      let _o = ($n.x === Xt ? 0 : 2) | Number($n.y & Yt), Ho = tr;
      return st && E(tr) && (Ho = m(tr), _o ^= 1), new b(Xt, Ho, _o);
    }
    return { seed: hs, k2sig: la };
  }
  const K = { lowS: t.lowS, prehash: !1 }, xt = { lowS: t.lowS, prehash: !1 };
  function St(B, S, _ = K) {
    const { seed: Y, k2sig: W } = z(B, S, _), st = t;
    return Ou(st.hash.outputLen, st.nByteLength, st.hmac)(Y, W);
  }
  u.BASE._setWindowSize(8);
  function Ve(B, S, _, Y = xt) {
    var $n;
    const W = B;
    if (S = $t("msgHash", S), _ = $t("publicKey", _), "strict" in Y)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: st, prehash: Rt } = Y;
    let vt, Je;
    try {
      if (typeof W == "string" || W instanceof Uint8Array)
        try {
          vt = b.fromDER(W);
        } catch (Xt) {
          if (!(Xt instanceof bn.Err))
            throw Xt;
          vt = b.fromCompact(W);
        }
      else if (typeof W == "object" && typeof W.r == "bigint" && typeof W.s == "bigint") {
        const { r: Xt, s: tr } = W;
        vt = new b(Xt, tr);
      } else
        throw new Error("PARSE");
      Je = u.fromHex(_);
    } catch (Xt) {
      if (Xt.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (st && vt.hasHighS())
      return !1;
    Rt && (S = t.hash(S));
    const { r: Ke, s: Xn } = vt, hs = M(S), ze = c(Xn), la = o(hs * ze), yn = o(Ke * ze), qn = ($n = u.BASE.multiplyAndAddUnsafe(Je, la, yn)) == null ? void 0 : $n.toAffine();
    return qn ? o(qn.x) === Ke : !1;
  }
  return {
    CURVE: t,
    getPublicKey: O,
    getSharedSecret: U,
    sign: St,
    verify: Ve,
    ProjectivePoint: u,
    Signature: b,
    utils: T
  };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function Jh(n) {
  return {
    hash: n,
    hmac: (t, ...e) => Au(n, t, Kf(...e)),
    randomBytes: zf
  };
}
function Kh(n, t) {
  const e = (r) => Vh({ ...n, ...Jh(r) });
  return Object.freeze({ ...e(t), create: e });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const ku = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), ic = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), zh = BigInt(1), La = BigInt(2), ac = (n, t) => (n + t / La) / t;
function Wh(n) {
  const t = ku, e = BigInt(3), r = BigInt(6), s = BigInt(11), i = BigInt(22), a = BigInt(23), o = BigInt(44), c = BigInt(88), u = n * n * n % t, f = u * u * n % t, h = _t(f, e, t) * f % t, p = _t(h, e, t) * f % t, y = _t(p, La, t) * u % t, E = _t(y, s, t) * y % t, m = _t(E, i, t) * E % t, I = _t(m, o, t) * m % t, b = _t(I, c, t) * I % t, T = _t(b, o, t) * m % t, O = _t(T, e, t) * f % t, v = _t(O, a, t) * E % t, U = _t(v, r, t) * u % t, R = _t(U, La, t);
  if (!Fa.eql(Fa.sqr(R), n))
    throw new Error("Cannot find square root");
  return R;
}
const Fa = Dh(ku, void 0, void 0, { sqrt: Wh }), je = Kh({
  a: BigInt(0),
  b: BigInt(7),
  Fp: Fa,
  n: ic,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (n) => {
      const t = ic, e = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), r = -zh * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), s = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), i = e, a = BigInt("0x100000000000000000000000000000000"), o = ac(i * n, t), c = ac(-r * n, t);
      let u = Nt(n - o * e - c * s, t), f = Nt(-o * r - c * i, t);
      const h = u > a, p = f > a;
      if (h && (u = t - u), p && (f = t - f), u > a || f > a)
        throw new Error("splitScalar: Endomorphism failed, k=" + n);
      return { k1neg: h, k1: u, k2neg: p, k2: f };
    }
  }
}, $f);
BigInt(0);
je.ProjectivePoint;
const Ma = "0x0000000000000000000000000000000000000000", oc = "0x0000000000000000000000000000000000000000000000000000000000000000";
BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141");
BigInt("1000000000000000000");
BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
BigInt("0x8000000000000000000000000000000000000000000000000000000000000000") * BigInt(-1);
const Yh = BigInt("0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"), cc = BigInt(0), uc = BigInt(1), lc = BigInt(2), fc = BigInt(27), hc = BigInt(28), pi = BigInt(35), er = {};
function dc(n) {
  return Kn(Gt(n), 32);
}
var Nr, Tr, Pr, Rn;
const qt = class qt {
  /**
   *  @private
   */
  constructor(t, e, r, s) {
    A(this, Nr, void 0);
    A(this, Tr, void 0);
    A(this, Pr, void 0);
    A(this, Rn, void 0);
    ji(t, er, "Signature"), d(this, Nr, e), d(this, Tr, r), d(this, Pr, s), d(this, Rn, null);
  }
  /**
   *  The ``r`` value for a signautre.
   *
   *  This represents the ``x`` coordinate of a "reference" or
   *  challenge point, from which the ``y`` can be computed.
   */
  get r() {
    return l(this, Nr);
  }
  set r(t) {
    g(pr(t) === 32, "invalid r", "value", t), d(this, Nr, k(t));
  }
  /**
   *  The ``s`` value for a signature.
   */
  get s() {
    return l(this, Tr);
  }
  set s(t) {
    g(pr(t) === 32, "invalid s", "value", t);
    const e = k(t);
    g(parseInt(e.substring(0, 3)) < 8, "non-canonical s", "value", e), d(this, Tr, e);
  }
  /**
   *  The ``v`` value for a signature.
   *
   *  Since a given ``x`` value for ``r`` has two possible values for
   *  its correspondin ``y``, the ``v`` indicates which of the two ``y``
   *  values to use.
   *
   *  It is normalized to the values ``27`` or ``28`` for legacy
   *  purposes.
   */
  get v() {
    return l(this, Pr);
  }
  set v(t) {
    const e = H(t, "value");
    g(e === 27 || e === 28, "invalid v", "v", t), d(this, Pr, e);
  }
  /**
   *  The EIP-155 ``v`` for legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get networkV() {
    return l(this, Rn);
  }
  /**
   *  The chain ID for EIP-155 legacy transactions. For non-legacy
   *  transactions, this value is ``null``.
   */
  get legacyChainId() {
    const t = this.networkV;
    return t == null ? null : qt.getChainId(t);
  }
  /**
   *  The ``yParity`` for the signature.
   *
   *  See ``v`` for more details on how this value is used.
   */
  get yParity() {
    return this.v === 27 ? 0 : 1;
  }
  /**
   *  The [[link-eip-2098]] compact representation of the ``yParity``
   *  and ``s`` compacted into a single ``bytes32``.
   */
  get yParityAndS() {
    const t = J(this.s);
    return this.yParity && (t[0] |= 128), k(t);
  }
  /**
   *  The [[link-eip-2098]] compact representation.
   */
  get compactSerialized() {
    return rt([this.r, this.yParityAndS]);
  }
  /**
   *  The serialized representation.
   */
  get serialized() {
    return rt([this.r, this.s, this.yParity ? "0x1c" : "0x1b"]);
  }
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return `Signature { r: "${this.r}", s: "${this.s}", yParity: ${this.yParity}, networkV: ${this.networkV} }`;
  }
  /**
   *  Returns a new identical [[Signature]].
   */
  clone() {
    const t = new qt(er, this.r, this.s, this.v);
    return this.networkV && d(t, Rn, this.networkV), t;
  }
  /**
   *  Returns a representation that is compatible with ``JSON.stringify``.
   */
  toJSON() {
    const t = this.networkV;
    return {
      _type: "signature",
      networkV: t != null ? t.toString() : null,
      r: this.r,
      s: this.s,
      v: this.v
    };
  }
  /**
   *  Compute the chain ID from the ``v`` in a legacy EIP-155 transactions.
   *
   *  @example:
   *    Signature.getChainId(45)
   *    //_result:
   *
   *    Signature.getChainId(46)
   *    //_result:
   */
  static getChainId(t) {
    const e = D(t, "v");
    return e == fc || e == hc ? cc : (g(e >= pi, "invalid EIP-155 v", "v", t), (e - pi) / lc);
  }
  /**
   *  Compute the ``v`` for a chain ID for a legacy EIP-155 transactions.
   *
   *  Legacy transactions which use [[link-eip-155]] hijack the ``v``
   *  property to include the chain ID.
   *
   *  @example:
   *    Signature.getChainIdV(5, 27)
   *    //_result:
   *
   *    Signature.getChainIdV(5, 28)
   *    //_result:
   *
   */
  static getChainIdV(t, e) {
    return D(t) * lc + BigInt(35 + e - 27);
  }
  /**
   *  Compute the normalized legacy transaction ``v`` from a ``yParirty``,
   *  a legacy transaction ``v`` or a legacy [[link-eip-155]] transaction.
   *
   *  @example:
   *    // The values 0 and 1 imply v is actually yParity
   *    Signature.getNormalizedV(0)
   *    //_result:
   *
   *    // Legacy non-EIP-1559 transaction (i.e. 27 or 28)
   *    Signature.getNormalizedV(27)
   *    //_result:
   *
   *    // Legacy EIP-155 transaction (i.e. >= 35)
   *    Signature.getNormalizedV(46)
   *    //_result:
   *
   *    // Invalid values throw
   *    Signature.getNormalizedV(5)
   *    //_error:
   */
  static getNormalizedV(t) {
    const e = D(t);
    return e === cc || e === fc ? 27 : e === uc || e === hc ? 28 : (g(e >= pi, "invalid v", "v", t), e & uc ? 27 : 28);
  }
  /**
   *  Creates a new [[Signature]].
   *
   *  If no %%sig%% is provided, a new [[Signature]] is created
   *  with default values.
   *
   *  If %%sig%% is a string, it is parsed.
   */
  static from(t) {
    function e(u, f) {
      g(u, f, "signature", t);
    }
    if (t == null)
      return new qt(er, oc, oc, 27);
    if (typeof t == "string") {
      const u = J(t, "signature");
      if (u.length === 64) {
        const f = k(u.slice(0, 32)), h = u.slice(32, 64), p = h[0] & 128 ? 28 : 27;
        return h[0] &= 127, new qt(er, f, k(h), p);
      }
      if (u.length === 65) {
        const f = k(u.slice(0, 32)), h = u.slice(32, 64);
        e((h[0] & 128) === 0, "non-canonical s");
        const p = qt.getNormalizedV(u[64]);
        return new qt(er, f, k(h), p);
      }
      e(!1, "invalid raw signature length");
    }
    if (t instanceof qt)
      return t.clone();
    const r = t.r;
    e(r != null, "missing r");
    const s = dc(r), i = function(u, f) {
      if (u != null)
        return dc(u);
      if (f != null) {
        e(q(f, 32), "invalid yParityAndS");
        const h = J(f);
        return h[0] &= 127, k(h);
      }
      e(!1, "missing s");
    }(t.s, t.yParityAndS);
    e((J(i)[0] & 128) == 0, "non-canonical s");
    const { networkV: a, v: o } = function(u, f, h) {
      if (u != null) {
        const p = D(u);
        return {
          networkV: p >= pi ? p : void 0,
          v: qt.getNormalizedV(p)
        };
      }
      if (f != null)
        return e(q(f, 32), "invalid yParityAndS"), { v: J(f)[0] & 128 ? 28 : 27 };
      if (h != null) {
        switch (H(h, "sig.yParity")) {
          case 0:
            return { v: 27 };
          case 1:
            return { v: 28 };
        }
        e(!1, "invalid yParity");
      }
      e(!1, "missing v");
    }(t.v, t.yParityAndS, t.yParity), c = new qt(er, s, i, o);
    return a && d(c, Rn, a), e(t.yParity == null || H(t.yParity, "sig.yParity") === c.yParity, "yParity mismatch"), e(t.yParityAndS == null || t.yParityAndS === c.yParityAndS, "yParityAndS mismatch"), c;
  }
};
Nr = new WeakMap(), Tr = new WeakMap(), Pr = new WeakMap(), Rn = new WeakMap();
let ae = qt;
var Ce;
const En = class En {
  /**
   *  Creates a new **SigningKey** for %%privateKey%%.
   */
  constructor(t) {
    A(this, Ce, void 0);
    g(pr(t) === 32, "invalid private key", "privateKey", "[REDACTED]"), d(this, Ce, k(t));
  }
  /**
   *  The private key.
   */
  get privateKey() {
    return l(this, Ce);
  }
  /**
   *  The uncompressed public key.
   *
   * This will always begin with the prefix ``0x04`` and be 132
   * characters long (the ``0x`` prefix and 130 hexadecimal nibbles).
   */
  get publicKey() {
    return En.computePublicKey(l(this, Ce));
  }
  /**
   *  The compressed public key.
   *
   *  This will always begin with either the prefix ``0x02`` or ``0x03``
   *  and be 68 characters long (the ``0x`` prefix and 33 hexadecimal
   *  nibbles)
   */
  get compressedPublicKey() {
    return En.computePublicKey(l(this, Ce), !0);
  }
  /**
   *  Return the signature of the signed %%digest%%.
   */
  sign(t) {
    g(pr(t) === 32, "invalid digest length", "digest", t);
    const e = je.sign(Bt(t), Bt(l(this, Ce)), {
      lowS: !0
    });
    return ae.from({
      r: gn(e.r, 32),
      s: gn(e.s, 32),
      v: e.recovery ? 28 : 27
    });
  }
  /**
   *  Returns the [[link-wiki-ecdh]] shared secret between this
   *  private key and the %%other%% key.
   *
   *  The %%other%% key may be any type of key, a raw public key,
   *  a compressed/uncompressed pubic key or aprivate key.
   *
   *  Best practice is usually to use a cryptographic hash on the
   *  returned value before using it as a symetric secret.
   *
   *  @example:
   *    sign1 = new SigningKey(id("some-secret-1"))
   *    sign2 = new SigningKey(id("some-secret-2"))
   *
   *    // Notice that privA.computeSharedSecret(pubB)...
   *    sign1.computeSharedSecret(sign2.publicKey)
   *    //_result:
   *
   *    // ...is equal to privB.computeSharedSecret(pubA).
   *    sign2.computeSharedSecret(sign1.publicKey)
   *    //_result:
   */
  computeSharedSecret(t) {
    const e = En.computePublicKey(t);
    return k(je.getSharedSecret(Bt(l(this, Ce)), J(e), !1));
  }
  /**
   *  Compute the public key for %%key%%, optionally %%compressed%%.
   *
   *  The %%key%% may be any type of key, a raw public key, a
   *  compressed/uncompressed public key or private key.
   *
   *  @example:
   *    sign = new SigningKey(id("some-secret"));
   *
   *    // Compute the uncompressed public key for a private key
   *    SigningKey.computePublicKey(sign.privateKey)
   *    //_result:
   *
   *    // Compute the compressed public key for a private key
   *    SigningKey.computePublicKey(sign.privateKey, true)
   *    //_result:
   *
   *    // Compute the uncompressed public key
   *    SigningKey.computePublicKey(sign.publicKey, false);
   *    //_result:
   *
   *    // Compute the Compressed a public key
   *    SigningKey.computePublicKey(sign.publicKey, true);
   *    //_result:
   */
  static computePublicKey(t, e) {
    let r = J(t, "key");
    if (r.length === 32) {
      const i = je.getPublicKey(r, !!e);
      return k(i);
    }
    if (r.length === 64) {
      const i = new Uint8Array(65);
      i[0] = 4, i.set(r, 1), r = i;
    }
    const s = je.ProjectivePoint.fromHex(r);
    return k(s.toRawBytes(e));
  }
  /**
   *  Returns the public key for the private key which produced the
   *  %%signature%% for the given %%digest%%.
   *
   *  @example:
   *    key = new SigningKey(id("some-secret"))
   *    digest = id("hello world")
   *    sig = key.sign(digest)
   *
   *    // Notice the signer public key...
   *    key.publicKey
   *    //_result:
   *
   *    // ...is equal to the recovered public key
   *    SigningKey.recoverPublicKey(digest, sig)
   *    //_result:
   *
   */
  static recoverPublicKey(t, e) {
    g(pr(t) === 32, "invalid digest length", "digest", t);
    const r = ae.from(e);
    let s = je.Signature.fromCompact(Bt(rt([r.r, r.s])));
    s = s.addRecoveryBit(r.yParity);
    const i = s.recoverPublicKey(Bt(t));
    return g(i != null, "invalid signautre for digest", "signature", e), "0x" + i.toHex(!1);
  }
  /**
   *  Returns the point resulting from adding the ellipic curve points
   *  %%p0%% and %%p1%%.
   *
   *  This is not a common function most developers should require, but
   *  can be useful for certain privacy-specific techniques.
   *
   *  For example, it is used by [[HDNodeWallet]] to compute child
   *  addresses from parent public keys and chain codes.
   */
  static addPoints(t, e, r) {
    const s = je.ProjectivePoint.fromHex(En.computePublicKey(t).substring(2)), i = je.ProjectivePoint.fromHex(En.computePublicKey(e).substring(2));
    return "0x" + s.add(i).toHex(!!r);
  }
};
Ce = new WeakMap();
let xs = En;
const jh = BigInt(0), Zh = BigInt(36);
function pc(n) {
  n = n.toLowerCase();
  const t = n.substring(2).split(""), e = new Uint8Array(40);
  for (let s = 0; s < 40; s++)
    e[s] = t[s].charCodeAt(0);
  const r = J(X(e));
  for (let s = 0; s < 40; s += 2)
    r[s >> 1] >> 4 >= 8 && (t[s] = t[s].toUpperCase()), (r[s >> 1] & 15) >= 8 && (t[s + 1] = t[s + 1].toUpperCase());
  return "0x" + t.join("");
}
const bo = {};
for (let n = 0; n < 10; n++)
  bo[String(n)] = String(n);
for (let n = 0; n < 26; n++)
  bo[String.fromCharCode(65 + n)] = String(10 + n);
const gc = 15;
function Xh(n) {
  n = n.toUpperCase(), n = n.substring(4) + n.substring(0, 2) + "00";
  let t = n.split("").map((r) => bo[r]).join("");
  for (; t.length >= gc; ) {
    let r = t.substring(0, gc);
    t = parseInt(r, 10) % 97 + t.substring(r.length);
  }
  let e = String(98 - parseInt(t, 10) % 97);
  for (; e.length < 2; )
    e = "0" + e;
  return e;
}
const qh = function() {
  const n = {};
  for (let t = 0; t < 36; t++) {
    const e = "0123456789abcdefghijklmnopqrstuvwxyz"[t];
    n[e] = BigInt(t);
  }
  return n;
}();
function $h(n) {
  n = n.toLowerCase();
  let t = jh;
  for (let e = 0; e < n.length; e++)
    t = t * Zh + qh[n[e]];
  return t;
}
function Q(n) {
  if (g(typeof n == "string", "invalid address", "address", n), n.match(/^(0x)?[0-9a-fA-F]{40}$/)) {
    n.startsWith("0x") || (n = "0x" + n);
    const t = pc(n);
    return g(!n.match(/([A-F].*[a-f])|([a-f].*[A-F])/) || t === n, "bad address checksum", "address", n), t;
  }
  if (n.match(/^XE[0-9]{2}[0-9A-Za-z]{30,31}$/)) {
    g(n.substring(2, 4) === Xh(n), "bad icap checksum", "address", n);
    let t = $h(n.substring(4)).toString(16);
    for (; t.length < 40; )
      t = "0" + t;
    return pc("0x" + t);
  }
  g(!1, "invalid address", "address", n);
}
function td(n) {
  const t = Q(n.from);
  let r = D(n.nonce, "tx.nonce").toString(16);
  return r === "0" ? r = "0x" : r.length % 2 ? r = "0x0" + r : r = "0x" + r, Q($(X(Cs([t, r])), 12));
}
function Du(n) {
  return n && typeof n.getAddress == "function";
}
async function wa(n, t) {
  const e = await t;
  return (e == null || e === "0x0000000000000000000000000000000000000000") && (N(typeof n != "string", "unconfigured name", "UNCONFIGURED_NAME", { value: n }), g(!1, "invalid AddressLike value; did not resolve to a value address", "target", n)), Q(e);
}
function Et(n, t) {
  if (typeof n == "string")
    return n.match(/^0x[0-9a-f]{40}$/i) ? Q(n) : (N(t != null, "ENS resolution requires a provider", "UNSUPPORTED_OPERATION", { operation: "resolveName" }), wa(n, t.resolveName(n)));
  if (Du(n))
    return wa(n, n.getAddress());
  if (n && typeof n.then == "function")
    return wa(n, n);
  g(!1, "unsupported addressable value", "target", n);
}
const Ee = {};
function x(n, t) {
  let e = !1;
  return t < 0 && (e = !0, t *= -1), new gt(Ee, `${e ? "" : "u"}int${t}`, n, { signed: e, width: t });
}
function V(n, t) {
  return new gt(Ee, `bytes${t || ""}`, n, { size: t });
}
const mc = Symbol.for("_ethers_typed");
var vn;
const be = class be {
  /**
   *  @_ignore:
   */
  constructor(t, e, r, s) {
    /**
     *  The type, as a Solidity-compatible type.
     */
    w(this, "type");
    /**
     *  The actual value.
     */
    w(this, "value");
    A(this, vn, void 0);
    /**
     *  @_ignore:
     */
    w(this, "_typedSymbol");
    s == null && (s = null), ji(Ee, t, "Typed"), F(this, { _typedSymbol: mc, type: e, value: r }), d(this, vn, s), this.format();
  }
  /**
   *  Format the type as a Human-Readable type.
   */
  format() {
    if (this.type === "array")
      throw new Error("");
    if (this.type === "dynamicArray")
      throw new Error("");
    return this.type === "tuple" ? `tuple(${this.value.map((t) => t.format()).join(",")})` : this.type;
  }
  /**
   *  The default value returned by this type.
   */
  defaultValue() {
    return 0;
  }
  /**
   *  The minimum value for numeric types.
   */
  minValue() {
    return 0;
  }
  /**
   *  The maximum value for numeric types.
   */
  maxValue() {
    return 0;
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedBigInt]].
   */
  isBigInt() {
    return !!this.type.match(/^u?int[0-9]+$/);
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedData]].
   */
  isData() {
    return this.type.startsWith("bytes");
  }
  /**
   *  Returns ``true`` and provides a type guard is this is a [[TypedString]].
   */
  isString() {
    return this.type === "string";
  }
  /**
   *  Returns the tuple name, if this is a tuple. Throws otherwise.
   */
  get tupleName() {
    if (this.type !== "tuple")
      throw TypeError("not a tuple");
    return l(this, vn);
  }
  // Returns the length of this type as an array
  // - `null` indicates the length is unforced, it could be dynamic
  // - `-1` indicates the length is dynamic
  // - any other value indicates it is a static array and is its length
  /**
   *  Returns the length of the array type or ``-1`` if it is dynamic.
   *
   *  Throws if the type is not an array.
   */
  get arrayLength() {
    if (this.type !== "array")
      throw TypeError("not an array");
    return l(this, vn) === !0 ? -1 : l(this, vn) === !1 ? this.value.length : null;
  }
  /**
   *  Returns a new **Typed** of %%type%% with the %%value%%.
   */
  static from(t, e) {
    return new be(Ee, t, e);
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static uint8(t) {
    return x(t, 8);
  }
  /**
   *  Return a new ``uint16`` type for %%v%%.
   */
  static uint16(t) {
    return x(t, 16);
  }
  /**
   *  Return a new ``uint24`` type for %%v%%.
   */
  static uint24(t) {
    return x(t, 24);
  }
  /**
   *  Return a new ``uint32`` type for %%v%%.
   */
  static uint32(t) {
    return x(t, 32);
  }
  /**
   *  Return a new ``uint40`` type for %%v%%.
   */
  static uint40(t) {
    return x(t, 40);
  }
  /**
   *  Return a new ``uint48`` type for %%v%%.
   */
  static uint48(t) {
    return x(t, 48);
  }
  /**
   *  Return a new ``uint56`` type for %%v%%.
   */
  static uint56(t) {
    return x(t, 56);
  }
  /**
   *  Return a new ``uint64`` type for %%v%%.
   */
  static uint64(t) {
    return x(t, 64);
  }
  /**
   *  Return a new ``uint72`` type for %%v%%.
   */
  static uint72(t) {
    return x(t, 72);
  }
  /**
   *  Return a new ``uint80`` type for %%v%%.
   */
  static uint80(t) {
    return x(t, 80);
  }
  /**
   *  Return a new ``uint88`` type for %%v%%.
   */
  static uint88(t) {
    return x(t, 88);
  }
  /**
   *  Return a new ``uint96`` type for %%v%%.
   */
  static uint96(t) {
    return x(t, 96);
  }
  /**
   *  Return a new ``uint104`` type for %%v%%.
   */
  static uint104(t) {
    return x(t, 104);
  }
  /**
   *  Return a new ``uint112`` type for %%v%%.
   */
  static uint112(t) {
    return x(t, 112);
  }
  /**
   *  Return a new ``uint120`` type for %%v%%.
   */
  static uint120(t) {
    return x(t, 120);
  }
  /**
   *  Return a new ``uint128`` type for %%v%%.
   */
  static uint128(t) {
    return x(t, 128);
  }
  /**
   *  Return a new ``uint136`` type for %%v%%.
   */
  static uint136(t) {
    return x(t, 136);
  }
  /**
   *  Return a new ``uint144`` type for %%v%%.
   */
  static uint144(t) {
    return x(t, 144);
  }
  /**
   *  Return a new ``uint152`` type for %%v%%.
   */
  static uint152(t) {
    return x(t, 152);
  }
  /**
   *  Return a new ``uint160`` type for %%v%%.
   */
  static uint160(t) {
    return x(t, 160);
  }
  /**
   *  Return a new ``uint168`` type for %%v%%.
   */
  static uint168(t) {
    return x(t, 168);
  }
  /**
   *  Return a new ``uint176`` type for %%v%%.
   */
  static uint176(t) {
    return x(t, 176);
  }
  /**
   *  Return a new ``uint184`` type for %%v%%.
   */
  static uint184(t) {
    return x(t, 184);
  }
  /**
   *  Return a new ``uint192`` type for %%v%%.
   */
  static uint192(t) {
    return x(t, 192);
  }
  /**
   *  Return a new ``uint200`` type for %%v%%.
   */
  static uint200(t) {
    return x(t, 200);
  }
  /**
   *  Return a new ``uint208`` type for %%v%%.
   */
  static uint208(t) {
    return x(t, 208);
  }
  /**
   *  Return a new ``uint216`` type for %%v%%.
   */
  static uint216(t) {
    return x(t, 216);
  }
  /**
   *  Return a new ``uint224`` type for %%v%%.
   */
  static uint224(t) {
    return x(t, 224);
  }
  /**
   *  Return a new ``uint232`` type for %%v%%.
   */
  static uint232(t) {
    return x(t, 232);
  }
  /**
   *  Return a new ``uint240`` type for %%v%%.
   */
  static uint240(t) {
    return x(t, 240);
  }
  /**
   *  Return a new ``uint248`` type for %%v%%.
   */
  static uint248(t) {
    return x(t, 248);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint256(t) {
    return x(t, 256);
  }
  /**
   *  Return a new ``uint256`` type for %%v%%.
   */
  static uint(t) {
    return x(t, 256);
  }
  /**
   *  Return a new ``int8`` type for %%v%%.
   */
  static int8(t) {
    return x(t, -8);
  }
  /**
   *  Return a new ``int16`` type for %%v%%.
   */
  static int16(t) {
    return x(t, -16);
  }
  /**
   *  Return a new ``int24`` type for %%v%%.
   */
  static int24(t) {
    return x(t, -24);
  }
  /**
   *  Return a new ``int32`` type for %%v%%.
   */
  static int32(t) {
    return x(t, -32);
  }
  /**
   *  Return a new ``int40`` type for %%v%%.
   */
  static int40(t) {
    return x(t, -40);
  }
  /**
   *  Return a new ``int48`` type for %%v%%.
   */
  static int48(t) {
    return x(t, -48);
  }
  /**
   *  Return a new ``int56`` type for %%v%%.
   */
  static int56(t) {
    return x(t, -56);
  }
  /**
   *  Return a new ``int64`` type for %%v%%.
   */
  static int64(t) {
    return x(t, -64);
  }
  /**
   *  Return a new ``int72`` type for %%v%%.
   */
  static int72(t) {
    return x(t, -72);
  }
  /**
   *  Return a new ``int80`` type for %%v%%.
   */
  static int80(t) {
    return x(t, -80);
  }
  /**
   *  Return a new ``int88`` type for %%v%%.
   */
  static int88(t) {
    return x(t, -88);
  }
  /**
   *  Return a new ``int96`` type for %%v%%.
   */
  static int96(t) {
    return x(t, -96);
  }
  /**
   *  Return a new ``int104`` type for %%v%%.
   */
  static int104(t) {
    return x(t, -104);
  }
  /**
   *  Return a new ``int112`` type for %%v%%.
   */
  static int112(t) {
    return x(t, -112);
  }
  /**
   *  Return a new ``int120`` type for %%v%%.
   */
  static int120(t) {
    return x(t, -120);
  }
  /**
   *  Return a new ``int128`` type for %%v%%.
   */
  static int128(t) {
    return x(t, -128);
  }
  /**
   *  Return a new ``int136`` type for %%v%%.
   */
  static int136(t) {
    return x(t, -136);
  }
  /**
   *  Return a new ``int144`` type for %%v%%.
   */
  static int144(t) {
    return x(t, -144);
  }
  /**
   *  Return a new ``int52`` type for %%v%%.
   */
  static int152(t) {
    return x(t, -152);
  }
  /**
   *  Return a new ``int160`` type for %%v%%.
   */
  static int160(t) {
    return x(t, -160);
  }
  /**
   *  Return a new ``int168`` type for %%v%%.
   */
  static int168(t) {
    return x(t, -168);
  }
  /**
   *  Return a new ``int176`` type for %%v%%.
   */
  static int176(t) {
    return x(t, -176);
  }
  /**
   *  Return a new ``int184`` type for %%v%%.
   */
  static int184(t) {
    return x(t, -184);
  }
  /**
   *  Return a new ``int92`` type for %%v%%.
   */
  static int192(t) {
    return x(t, -192);
  }
  /**
   *  Return a new ``int200`` type for %%v%%.
   */
  static int200(t) {
    return x(t, -200);
  }
  /**
   *  Return a new ``int208`` type for %%v%%.
   */
  static int208(t) {
    return x(t, -208);
  }
  /**
   *  Return a new ``int216`` type for %%v%%.
   */
  static int216(t) {
    return x(t, -216);
  }
  /**
   *  Return a new ``int224`` type for %%v%%.
   */
  static int224(t) {
    return x(t, -224);
  }
  /**
   *  Return a new ``int232`` type for %%v%%.
   */
  static int232(t) {
    return x(t, -232);
  }
  /**
   *  Return a new ``int240`` type for %%v%%.
   */
  static int240(t) {
    return x(t, -240);
  }
  /**
   *  Return a new ``int248`` type for %%v%%.
   */
  static int248(t) {
    return x(t, -248);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int256(t) {
    return x(t, -256);
  }
  /**
   *  Return a new ``int256`` type for %%v%%.
   */
  static int(t) {
    return x(t, -256);
  }
  /**
   *  Return a new ``bytes1`` type for %%v%%.
   */
  static bytes1(t) {
    return V(t, 1);
  }
  /**
   *  Return a new ``bytes2`` type for %%v%%.
   */
  static bytes2(t) {
    return V(t, 2);
  }
  /**
   *  Return a new ``bytes3`` type for %%v%%.
   */
  static bytes3(t) {
    return V(t, 3);
  }
  /**
   *  Return a new ``bytes4`` type for %%v%%.
   */
  static bytes4(t) {
    return V(t, 4);
  }
  /**
   *  Return a new ``bytes5`` type for %%v%%.
   */
  static bytes5(t) {
    return V(t, 5);
  }
  /**
   *  Return a new ``bytes6`` type for %%v%%.
   */
  static bytes6(t) {
    return V(t, 6);
  }
  /**
   *  Return a new ``bytes7`` type for %%v%%.
   */
  static bytes7(t) {
    return V(t, 7);
  }
  /**
   *  Return a new ``bytes8`` type for %%v%%.
   */
  static bytes8(t) {
    return V(t, 8);
  }
  /**
   *  Return a new ``bytes9`` type for %%v%%.
   */
  static bytes9(t) {
    return V(t, 9);
  }
  /**
   *  Return a new ``bytes10`` type for %%v%%.
   */
  static bytes10(t) {
    return V(t, 10);
  }
  /**
   *  Return a new ``bytes11`` type for %%v%%.
   */
  static bytes11(t) {
    return V(t, 11);
  }
  /**
   *  Return a new ``bytes12`` type for %%v%%.
   */
  static bytes12(t) {
    return V(t, 12);
  }
  /**
   *  Return a new ``bytes13`` type for %%v%%.
   */
  static bytes13(t) {
    return V(t, 13);
  }
  /**
   *  Return a new ``bytes14`` type for %%v%%.
   */
  static bytes14(t) {
    return V(t, 14);
  }
  /**
   *  Return a new ``bytes15`` type for %%v%%.
   */
  static bytes15(t) {
    return V(t, 15);
  }
  /**
   *  Return a new ``bytes16`` type for %%v%%.
   */
  static bytes16(t) {
    return V(t, 16);
  }
  /**
   *  Return a new ``bytes17`` type for %%v%%.
   */
  static bytes17(t) {
    return V(t, 17);
  }
  /**
   *  Return a new ``bytes18`` type for %%v%%.
   */
  static bytes18(t) {
    return V(t, 18);
  }
  /**
   *  Return a new ``bytes19`` type for %%v%%.
   */
  static bytes19(t) {
    return V(t, 19);
  }
  /**
   *  Return a new ``bytes20`` type for %%v%%.
   */
  static bytes20(t) {
    return V(t, 20);
  }
  /**
   *  Return a new ``bytes21`` type for %%v%%.
   */
  static bytes21(t) {
    return V(t, 21);
  }
  /**
   *  Return a new ``bytes22`` type for %%v%%.
   */
  static bytes22(t) {
    return V(t, 22);
  }
  /**
   *  Return a new ``bytes23`` type for %%v%%.
   */
  static bytes23(t) {
    return V(t, 23);
  }
  /**
   *  Return a new ``bytes24`` type for %%v%%.
   */
  static bytes24(t) {
    return V(t, 24);
  }
  /**
   *  Return a new ``bytes25`` type for %%v%%.
   */
  static bytes25(t) {
    return V(t, 25);
  }
  /**
   *  Return a new ``bytes26`` type for %%v%%.
   */
  static bytes26(t) {
    return V(t, 26);
  }
  /**
   *  Return a new ``bytes27`` type for %%v%%.
   */
  static bytes27(t) {
    return V(t, 27);
  }
  /**
   *  Return a new ``bytes28`` type for %%v%%.
   */
  static bytes28(t) {
    return V(t, 28);
  }
  /**
   *  Return a new ``bytes29`` type for %%v%%.
   */
  static bytes29(t) {
    return V(t, 29);
  }
  /**
   *  Return a new ``bytes30`` type for %%v%%.
   */
  static bytes30(t) {
    return V(t, 30);
  }
  /**
   *  Return a new ``bytes31`` type for %%v%%.
   */
  static bytes31(t) {
    return V(t, 31);
  }
  /**
   *  Return a new ``bytes32`` type for %%v%%.
   */
  static bytes32(t) {
    return V(t, 32);
  }
  /**
   *  Return a new ``address`` type for %%v%%.
   */
  static address(t) {
    return new be(Ee, "address", t);
  }
  /**
   *  Return a new ``bool`` type for %%v%%.
   */
  static bool(t) {
    return new be(Ee, "bool", !!t);
  }
  /**
   *  Return a new ``bytes`` type for %%v%%.
   */
  static bytes(t) {
    return new be(Ee, "bytes", t);
  }
  /**
   *  Return a new ``string`` type for %%v%%.
   */
  static string(t) {
    return new be(Ee, "string", t);
  }
  /**
   *  Return a new ``array`` type for %%v%%, allowing %%dynamic%% length.
   */
  static array(t, e) {
    throw new Error("not implemented yet");
  }
  /**
   *  Return a new ``tuple`` type for %%v%%, with the optional %%name%%.
   */
  static tuple(t, e) {
    throw new Error("not implemented yet");
  }
  /**
   *  Return a new ``uint8`` type for %%v%%.
   */
  static overrides(t) {
    return new be(Ee, "overrides", Object.assign({}, t));
  }
  /**
   *  Returns true only if %%value%% is a [[Typed]] instance.
   */
  static isTyped(t) {
    return t && typeof t == "object" && "_typedSymbol" in t && t._typedSymbol === mc;
  }
  /**
   *  If the value is a [[Typed]] instance, validates the underlying value
   *  and returns it, otherwise returns value directly.
   *
   *  This is useful for functions that with to accept either a [[Typed]]
   *  object or values.
   */
  static dereference(t, e) {
    if (be.isTyped(t)) {
      if (t.type !== e)
        throw new Error(`invalid type: expecetd ${e}, got ${t.type}`);
      return t.value;
    }
    return t;
  }
};
vn = new WeakMap();
let gt = be;
class ed extends Qe {
  constructor(t) {
    super("address", "address", t, !1);
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000";
  }
  encode(t, e) {
    let r = gt.dereference(e, "string");
    try {
      r = Q(r);
    } catch (s) {
      return this._throwError(s.message, e);
    }
    return t.writeValue(r);
  }
  decode(t) {
    return Q(gn(t.readValue(), 20));
  }
}
class nd extends Qe {
  constructor(e) {
    super(e.name, e.type, "_", e.dynamic);
    w(this, "coder");
    this.coder = e;
  }
  defaultValue() {
    return this.coder.defaultValue();
  }
  encode(e, r) {
    return this.coder.encode(e, r);
  }
  decode(e) {
    return this.coder.decode(e);
  }
}
function Uu(n, t, e) {
  let r = [];
  if (Array.isArray(e))
    r = e;
  else if (e && typeof e == "object") {
    let c = {};
    r = t.map((u) => {
      const f = u.localName;
      return N(f, "cannot encode object for signature with missing names", "INVALID_ARGUMENT", { argument: "values", info: { coder: u }, value: e }), N(!c[f], "cannot encode object for signature with duplicate names", "INVALID_ARGUMENT", { argument: "values", info: { coder: u }, value: e }), c[f] = !0, e[f];
    });
  } else
    g(!1, "invalid tuple value", "tuple", e);
  g(t.length === r.length, "types/value length mismatch", "tuple", e);
  let s = new va(), i = new va(), a = [];
  t.forEach((c, u) => {
    let f = r[u];
    if (c.dynamic) {
      let h = i.length;
      c.encode(i, f);
      let p = s.writeUpdatableValue();
      a.push((y) => {
        p(y + h);
      });
    } else
      c.encode(s, f);
  }), a.forEach((c) => {
    c(s.length);
  });
  let o = n.appendWriter(s);
  return o += n.appendWriter(i), o;
}
function Lu(n, t) {
  let e = [], r = [], s = n.subReader(0);
  return t.forEach((i) => {
    let a = null;
    if (i.dynamic) {
      let o = n.readIndex(), c = s.subReader(o);
      try {
        a = i.decode(c);
      } catch (u) {
        if (jt(u, "BUFFER_OVERRUN"))
          throw u;
        a = u, a.baseType = i.name, a.name = i.localName, a.type = i.type;
      }
    } else
      try {
        a = i.decode(n);
      } catch (o) {
        if (jt(o, "BUFFER_OVERRUN"))
          throw o;
        a = o, a.baseType = i.name, a.name = i.localName, a.type = i.type;
      }
    if (a == null)
      throw new Error("investigate");
    e.push(a), r.push(i.localName || null);
  }), Oi.fromItems(e, r);
}
class rd extends Qe {
  constructor(e, r, s) {
    const i = e.type + "[" + (r >= 0 ? r : "") + "]", a = r === -1 || e.dynamic;
    super("array", i, s, a);
    w(this, "coder");
    w(this, "length");
    F(this, { coder: e, length: r });
  }
  defaultValue() {
    const e = this.coder.defaultValue(), r = [];
    for (let s = 0; s < this.length; s++)
      r.push(e);
    return r;
  }
  encode(e, r) {
    const s = gt.dereference(r, "array");
    Array.isArray(s) || this._throwError("expected array value", s);
    let i = this.length;
    i === -1 && (i = s.length, e.writeValue(s.length)), nu(s.length, i, "coder array" + (this.localName ? " " + this.localName : ""));
    let a = [];
    for (let o = 0; o < s.length; o++)
      a.push(this.coder);
    return Uu(e, a, s);
  }
  decode(e) {
    let r = this.length;
    r === -1 && (r = e.readIndex(), N(r * At <= e.dataLength, "insufficient data length", "BUFFER_OVERRUN", { buffer: e.bytes, offset: r * At, length: e.dataLength }));
    let s = [];
    for (let i = 0; i < r; i++)
      s.push(new nd(this.coder));
    return Lu(e, s);
  }
}
class sd extends Qe {
  constructor(t) {
    super("bool", "bool", t, !1);
  }
  defaultValue() {
    return !1;
  }
  encode(t, e) {
    const r = gt.dereference(e, "bool");
    return t.writeValue(r ? 1 : 0);
  }
  decode(t) {
    return !!t.readValue();
  }
}
class Fu extends Qe {
  constructor(t, e) {
    super(t, t, e, !0);
  }
  defaultValue() {
    return "0x";
  }
  encode(t, e) {
    e = Bt(e);
    let r = t.writeValue(e.length);
    return r += t.writeBytes(e), r;
  }
  decode(t) {
    return t.readBytes(t.readIndex(), !0);
  }
}
class id extends Fu {
  constructor(t) {
    super("bytes", t);
  }
  decode(t) {
    return k(super.decode(t));
  }
}
class ad extends Qe {
  constructor(e, r) {
    let s = "bytes" + String(e);
    super(s, s, r, !1);
    w(this, "size");
    F(this, { size: e }, { size: "number" });
  }
  defaultValue() {
    return "0x0000000000000000000000000000000000000000000000000000000000000000".substring(0, 2 + this.size * 2);
  }
  encode(e, r) {
    let s = Bt(gt.dereference(r, this.type));
    return s.length !== this.size && this._throwError("incorrect data length", r), e.writeBytes(s);
  }
  decode(e) {
    return k(e.readBytes(this.size));
  }
}
const od = new Uint8Array([]);
class cd extends Qe {
  constructor(t) {
    super("null", "", t, !1);
  }
  defaultValue() {
    return null;
  }
  encode(t, e) {
    return e != null && this._throwError("not null", e), t.writeBytes(od);
  }
  decode(t) {
    return t.readBytes(0), null;
  }
}
const ud = BigInt(0), ld = BigInt(1), fd = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
class hd extends Qe {
  constructor(e, r, s) {
    const i = (r ? "int" : "uint") + e * 8;
    super(i, i, s, !1);
    w(this, "size");
    w(this, "signed");
    F(this, { size: e, signed: r }, { size: "number", signed: "boolean" });
  }
  defaultValue() {
    return 0;
  }
  encode(e, r) {
    let s = D(gt.dereference(r, this.type)), i = ms(fd, At * 8);
    if (this.signed) {
      let a = ms(i, this.size * 8 - 1);
      (s > a || s < -(a + ld)) && this._throwError("value out-of-bounds", r), s = iu(s, 8 * At);
    } else
      (s < ud || s > ms(i, this.size * 8)) && this._throwError("value out-of-bounds", r);
    return e.writeValue(s);
  }
  decode(e) {
    let r = ms(e.readValue(), this.size * 8);
    return this.signed && (r = bf(r, this.size * 8)), r;
  }
}
class dd extends Fu {
  constructor(t) {
    super("string", t);
  }
  defaultValue() {
    return "";
  }
  encode(t, e) {
    return super.encode(t, Me(gt.dereference(e, "string")));
  }
  decode(t) {
    return fo(super.decode(t));
  }
}
class gi extends Qe {
  constructor(e, r) {
    let s = !1;
    const i = [];
    e.forEach((o) => {
      o.dynamic && (s = !0), i.push(o.type);
    });
    const a = "tuple(" + i.join(",") + ")";
    super("tuple", a, r, s);
    w(this, "coders");
    F(this, { coders: Object.freeze(e.slice()) });
  }
  defaultValue() {
    const e = [];
    this.coders.forEach((s) => {
      e.push(s.defaultValue());
    });
    const r = this.coders.reduce((s, i) => {
      const a = i.localName;
      return a && (s[a] || (s[a] = 0), s[a]++), s;
    }, {});
    return this.coders.forEach((s, i) => {
      let a = s.localName;
      !a || r[a] !== 1 || (a === "length" && (a = "_length"), e[a] == null && (e[a] = e[i]));
    }), Object.freeze(e);
  }
  encode(e, r) {
    const s = gt.dereference(r, "tuple");
    return Uu(e, this.coders, s);
  }
  decode(e) {
    return Lu(e, this.coders);
  }
}
function zn(n) {
  return X(Me(n));
}
var pd = "";
const yc = /* @__PURE__ */ new Map([[8217, "apostrophe"], [8260, "fraction slash"], [12539, "middle dot"]]), wc = 4;
function gd(n) {
  let t = 0;
  function e() {
    return n[t++] << 8 | n[t++];
  }
  let r = e(), s = 1, i = [0, 1];
  for (let U = 1; U < r; U++)
    i.push(s += e());
  let a = e(), o = t;
  t += a;
  let c = 0, u = 0;
  function f() {
    return c == 0 && (u = u << 8 | n[t++], c = 8), u >> --c & 1;
  }
  const h = 31, p = 2 ** h, y = p >>> 1, E = y >> 1, m = p - 1;
  let I = 0;
  for (let U = 0; U < h; U++)
    I = I << 1 | f();
  let b = [], T = 0, O = p;
  for (; ; ) {
    let U = Math.floor(((I - T + 1) * s - 1) / O), R = 0, M = r;
    for (; M - R > 1; ) {
      let z = R + M >>> 1;
      U < i[z] ? M = z : R = z;
    }
    if (R == 0)
      break;
    b.push(R);
    let G = T + Math.floor(O * i[R] / s), et = T + Math.floor(O * i[R + 1] / s) - 1;
    for (; !((G ^ et) & y); )
      I = I << 1 & m | f(), G = G << 1 & m, et = et << 1 & m | 1;
    for (; G & ~et & E; )
      I = I & y | I << 1 & m >>> 1 | f(), G = G << 1 ^ y, et = (et ^ y) << 1 | y | 1;
    T = G, O = 1 + et - G;
  }
  let v = r - 4;
  return b.map((U) => {
    switch (U - v) {
      case 3:
        return v + 65792 + (n[o++] << 16 | n[o++] << 8 | n[o++]);
      case 2:
        return v + 256 + (n[o++] << 8 | n[o++]);
      case 1:
        return v + n[o++];
      default:
        return U - 1;
    }
  });
}
function md(n) {
  let t = 0;
  return () => n[t++];
}
function Mu(n) {
  return md(gd(yd(n)));
}
function yd(n) {
  let t = [];
  [..."ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"].forEach((s, i) => t[s.charCodeAt(0)] = i);
  let e = n.length, r = new Uint8Array(6 * e >> 3);
  for (let s = 0, i = 0, a = 0, o = 0; s < e; s++)
    o = o << 6 | t[n.charCodeAt(s)], a += 6, a >= 8 && (r[i++] = o >> (a -= 8));
  return r;
}
function wd(n) {
  return n & 1 ? ~n >> 1 : n >> 1;
}
function Ad(n, t) {
  let e = Array(n);
  for (let r = 0, s = 0; r < n; r++)
    e[r] = s += wd(t());
  return e;
}
function Ss(n, t = 0) {
  let e = [];
  for (; ; ) {
    let r = n(), s = n();
    if (!s)
      break;
    t += r;
    for (let i = 0; i < s; i++)
      e.push(t + i);
    t += s + 1;
  }
  return e;
}
function Gu(n) {
  return Rs(() => {
    let t = Ss(n);
    if (t.length)
      return t;
  });
}
function _u(n) {
  let t = [];
  for (; ; ) {
    let e = n();
    if (e == 0)
      break;
    t.push(Ed(e, n));
  }
  for (; ; ) {
    let e = n() - 1;
    if (e < 0)
      break;
    t.push(bd(e, n));
  }
  return t.flat();
}
function Rs(n) {
  let t = [];
  for (; ; ) {
    let e = n(t.length);
    if (!e)
      break;
    t.push(e);
  }
  return t;
}
function Hu(n, t, e) {
  let r = Array(n).fill().map(() => []);
  for (let s = 0; s < t; s++)
    Ad(n, e).forEach((i, a) => r[a].push(i));
  return r;
}
function Ed(n, t) {
  let e = 1 + t(), r = t(), s = Rs(t);
  return Hu(s.length, 1 + n, t).flatMap((a, o) => {
    let [c, ...u] = a;
    return Array(s[o]).fill().map((f, h) => {
      let p = h * r;
      return [c + h * e, u.map((y) => y + p)];
    });
  });
}
function bd(n, t) {
  let e = 1 + t();
  return Hu(e, 1 + n, t).map((s) => [s[0], s.slice(1)]);
}
function Id(n) {
  let t = [], e = Ss(n);
  return s(r([]), []), t;
  function r(i) {
    let a = n(), o = Rs(() => {
      let c = Ss(n).map((u) => e[u]);
      if (c.length)
        return r(c);
    });
    return { S: a, B: o, Q: i };
  }
  function s({ S: i, B: a }, o, c) {
    if (!(i & 4 && c === o[o.length - 1])) {
      i & 2 && (c = o[o.length - 1]), i & 1 && t.push(o);
      for (let u of a)
        for (let f of u.Q)
          s(u, [...o, f], c);
    }
  }
}
function Nd(n) {
  return n.toString(16).toUpperCase().padStart(2, "0");
}
function Qu(n) {
  return `{${Nd(n)}}`;
}
function Td(n) {
  let t = [];
  for (let e = 0, r = n.length; e < r; ) {
    let s = n.codePointAt(e);
    e += s < 65536 ? 1 : 2, t.push(s);
  }
  return t;
}
function os(n) {
  let e = n.length;
  if (e < 4096)
    return String.fromCodePoint(...n);
  let r = [];
  for (let s = 0; s < e; )
    r.push(String.fromCodePoint(...n.slice(s, s += 4096)));
  return r.join("");
}
function Pd(n, t) {
  let e = n.length, r = e - t.length;
  for (let s = 0; r == 0 && s < e; s++)
    r = n[s] - t[s];
  return r;
}
var Bd = "AEUDTAHBCFQATQDRADAAcgAgADQAFAAsABQAHwAOACQADQARAAoAFwAHABIACAAPAAUACwAFAAwABAAQAAMABwAEAAoABQAIAAIACgABAAQAFAALAAIACwABAAIAAQAHAAMAAwAEAAsADAAMAAwACgANAA0AAwAKAAkABAAdAAYAZwDSAdsDJgC0CkMB8xhZAqfoC190UGcThgBurwf7PT09Pb09AjgJum8OjDllxHYUKXAPxzq6tABAxgK8ysUvWAgMPT09PT09PSs6LT2HcgWXWwFLoSMEEEl5RFVMKvO0XQ8ExDdJMnIgsj26PTQyy8FfEQ8AY8IPAGcEbwRwBHEEcgRzBHQEdQR2BHcEeAR6BHsEfAR+BIAEgfndBQoBYgULAWIFDAFiBNcE2ATZBRAFEQUvBdALFAsVDPcNBw13DYcOMA4xDjMB4BllHI0B2grbAMDpHLkQ7QHVAPRNQQFnGRUEg0yEB2uaJF8AJpIBpob5AERSMAKNoAXqaQLUBMCzEiACnwRZEkkVsS7tANAsBG0RuAQLEPABv9HICTUBXigPZwRBApMDOwAamhtaABqEAY8KvKx3LQ4ArAB8UhwEBAVSagD8AEFZADkBIadVj2UMUgx5Il4ANQC9AxIB1BlbEPMAs30CGxlXAhwZKQIECBc6EbsCoxngzv7UzRQA8M0BawL6ZwkN7wABAD33OQRcsgLJCjMCjqUChtw/km+NAsXPAoP2BT84PwURAK0RAvptb6cApQS/OMMey5HJS84UdxpxTPkCogVFITaTOwERAK5pAvkNBOVyA7q3BKlOJSALAgUIBRcEdASpBXqzABXFSWZOawLCOqw//AolCZdvv3dSBkEQGyelEPcMMwG1ATsN7UvYBPEGOwTJH30ZGQ/NlZwIpS3dDO0m4y6hgFoj9SqDBe1L9DzdC01RaA9ZC2UJ4zpjgU4DIQENIosK3Q05CG0Q8wrJaw3lEUUHOQPVSZoApQcBCxEdNRW1JhBirAsJOXcG+xr2C48mrxMpevwF0xohBk0BKRr/AM8u54WwWjFcHE9fBgMLJSPHFKhQIA0lQLd4SBobBxUlqQKRQ3BKh1E2HpMh9jw9DWYuE1F8B/U8BRlPC4E8nkarRQ4R0j6NPUgiSUwsBDV/LC8niwnPD4UMuXxyAVkJIQmxDHETMREXN8UIOQcZLZckJxUIIUaVYJoE958D8xPRAwsFPwlBBxMDtRwtEy4VKQUNgSTXAvM21S6zAo9WgAEXBcsPJR/fEFBH4A7pCJsCZQODJesALRUhABcimwhDYwBfj9hTBS7LCMdqbCN0A2cU52ERcweRDlcHpxwzFb8c4XDIXguGCCijrwlbAXUJmQFfBOMICTVbjKAgQWdTi1gYmyBhQT9d/AIxDGUVn0S9h3gCiw9rEhsBNQFzBzkNAQJ3Ee0RaxCVCOuGBDW1M/g6JQRPIYMgEQonA09szgsnJvkM+GkBoxJiAww0PXfuZ6tgtiQX/QcZMsVBYCHxC5JPzQycGsEYQlQuGeQHvwPzGvMn6kFXBf8DowMTOk0z7gS9C2kIiwk/AEkOoxcH1xhqCnGM0AExiwG3mQNXkYMCb48GNwcLAGcLhwV55QAdAqcIowAFAM8DVwA5Aq0HnQAZAIVBAT0DJy8BIeUCjwOTCDHLAZUvAfMpBBvDDBUA9zduSgLDsQKAamaiBd1YAo4CSTUBTSUEBU5HUQOvceEA2wBLBhPfRwEVq0rLGuNDAd9vKwDHAPsABTUHBUEBzQHzbQC3AV8LMQmis7UBTekpAIMAFWsB1wKJAN0ANQB/8QFTAE0FWfkF0wJPSQERMRgrV2EBuwMfATMBDQB5BsuNpckHHwRtB9MCEBsV4QLvLge1AQMi3xPNQsUCvd5VoWACZIECYkJbTa9bNyACofcCaJgCZgkCn4Q4GwsCZjsCZiYEbgR/A38TA36SOQY5dxc5gjojIwJsHQIyNjgKAm3HAm2u74ozZ0UrAWcA3gDhAEoFB5gMjQD+C8IADbUCdy8CdqI/AnlLQwJ4uh1c20WuRtcCfD8CesgCfQkCfPAFWQUgSABIfWMkAoFtAoAAAoAFAn+uSVhKWxUXSswC0QEC0MxLJwOITwOH5kTFkTIC8qFdAwMDrkvOTC0lA89NTE2vAos/AorYwRsHHUNnBbcCjjcCjlxAl4ECjtkCjlx4UbRTNQpS1FSFApP7ApMMAOkAHFUeVa9V0AYsGymVhjLheGZFOzkCl58C77JYIagAWSUClo8ClnycAKlZrFoJgU0AOwKWtQKWTlxEXNECmcsCmWRcyl0HGQKcmznCOp0CnBYCn5sCnriKAB0PMSoPAp3xAp6SALU9YTRh7wKe0wKgbgGpAp6fHwKeTqVjyGQnJSsCJ68CJn4CoPsCoEwCot0CocQCpi8Cpc4Cp/8AfQKn8mh8aLEAA0lqHGrRAqzjAqyuAq1nAq0CAlcdAlXcArHh1wMfTmyXArK9DQKy6Bds4G1jbUhfAyXNArZcOz9ukAMpRQK4XgK5RxUCuSp3cDZw4QK9GQK72nCWAzIRAr6IcgIDM3ECvhpzInNPAsPLAsMEc4J0SzVFdOADPKcDPJoDPb8CxXwCxkcCxhCJAshpUQLIRALJTwLJLgJknQLd0nh5YXiueSVL0AMYo2cCAmH0GfOVJHsLXpJeuxECz2sCz2wvS1PS8xOfAMatAs9zASnqA04SfksFAtwnAtuKAtJPA1JcA1NfAQEDVYyAiT8AyxbtYEWCHILTgs6DjQLaxwLZ3oQQhEmnPAOGpQAvA2QOhnFZ+QBVAt9lAt64c3cC4i/tFAHzMCcB9JsB8tKHAuvzAulweQLq+QLq5AD5RwG5Au6JAuuclqqXAwLuPwOF4Jh5cOBxoQLzAwBpA44WmZMC9xMDkW4DkocC95gC+dkC+GaaHJqruzebHgOdgwL++gEbADmfHJ+zAwWNA6ZqA6bZANHFAwZqoYiiBQkDDEkCwAA/AwDhQRdTARHzA2sHl2cFAJMtK7evvdsBiZkUfxEEOQH7KQUhDp0JnwCS/SlXxQL3AZ0AtwW5AG8LbUEuFCaNLgFDAYD8AbUmAHUDDgRtACwCFgyhAAAKAj0CagPdA34EkQEgRQUhfAoABQBEABMANhICdwEABdUDa+8KxQIA9wqfJ7+xt+UBkSFBQgHpFH8RNMCJAAQAGwBaAkUChIsABjpTOpSNbQC4Oo860ACNOME63AClAOgAywE6gTo7Ofw5+Tt2iTpbO56JOm85GAFWATMBbAUvNV01njWtNWY1dTW2NcU1gjWRNdI14TWeNa017jX9NbI1wTYCNhE1xjXVNhY2JzXeNe02LjY9Ni41LSE2OjY9Njw2yTcIBJA8VzY4Nt03IDcPNsogN4k3MAoEsDxnNiQ3GTdsOo03IULUQwdC4EMLHA8PCZsobShRVQYA6X8A6bABFCnXAukBowC9BbcAbwNzBL8MDAMMAQgDAAkKCwsLCQoGBAVVBI/DvwDz9b29kaUCb0QtsRTNLt4eGBcSHAMZFhYZEhYEARAEBUEcQRxBHEEcQRxBHEEaQRxBHEFCSTxBPElISUhBNkM2QTYbNklISVmBVIgBFLWZAu0BhQCjBcEAbykBvwGJAaQcEZ0ePCklMAAhMvAIMAL54gC7Bm8EescjzQMpARQpKgDUABavAj626xQAJP0A3etzuf4NNRA7efy2Z9NQrCnC0OSyANz5BBIbJ5IFDR6miIavYS6tprjjmuKebxm5C74Q225X1pkaYYPb6f1DK4k3xMEBb9S2WMjEibTNWhsRJIA+vwNVEiXTE5iXs/wezV66oFLfp9NZGYW+Gk19J2+bCT6Ye2w6LDYdgzKMUabk595eLBCXANz9HUpWbATq9vqXVx9XDg+Pc9Xp4+bsS005SVM/BJBM4687WUuf+Uj9dEi8aDNaPxtpbDxcG1THTImUMZq4UCaaNYpsVqraNyKLJXDYsFZ/5jl7bLRtO88t7P3xZaAxhb5OdPMXqsSkp1WCieG8jXm1U99+blvLlXzPCS+M93VnJCiK+09LfaSaBAVBomyDgJua8dfUzR7ga34IvR2Nvj+A9heJ6lsl1KG4NkI1032Cnff1m1wof2B9oHJK4bi6JkEdSqeNeiuo6QoZZincoc73/TH9SXF8sCE7XyuYyW8WSgbGFCjPV0ihLKhdPs08Tx82fYAkLLc4I2wdl4apY7GU5lHRFzRWJep7Ww3wbeA3qmd59/86P4xuNaqDpygXt6M85glSBHOCGgJDnt+pN9bK7HApMguX6+06RZNjzVmcZJ+wcUrJ9//bpRNxNuKpNl9uFds+S9tdx7LaM5ZkIrPj6nIU9mnbFtVbs9s/uLgl8MVczAwet+iOEzzBlYW7RCMgE6gyNLeq6+1tIx4dpgZnd0DksJS5f+JNDpwwcPNXaaVspq1fbQajOrJgK0ofKtJ1Ne90L6VO4MOl5S886p7u6xo7OLjG8TGL+HU1JXGJgppg4nNbNJ5nlzSpuPYy21JUEcUA94PoFiZfjZue+QnyQ80ekOuZVkxx4g+cvhJfHgNl4hy1/a6+RKcKlar/J29y//EztlbVPHVUeQ1zX86eQVAjR/M3dA9w4W8LfaXp4EgM85wOWasli837PzVMOnsLzR+k3o75/lRPAJSE1xAKQzEi5v10ke+VBvRt1cwQRMd+U5mLCTGVd6XiZtgBG5cDi0w22GKcVNvHiu5LQbZEDVtz0onn7k5+heuKXVsZtSzilkLRAUmjMXEMB3J9YC50XBxPiz53SC+EhnPl9WsKCv92SM/OFFIMJZYfl0WW8tIO3UxYcwdMAj7FSmgrsZ2aAZO03BOhP1bNNZItyXYQFTpC3SG1VuPDqH9GkiCDmE+JwxyIVSO5siDErAOpEXFgjy6PQtOVDj+s6e1r8heWVvmZnTciuf4EiNZzCAd7SOMhXERIOlsHIMG399i9aLTy3m2hRLZjJVDNLS53iGIK11dPqQt0zBDyg6qc7YqkDm2M5Ve6dCWCaCbTXX2rToaIgz6+zh4lYUi/+6nqcFMAkQJKHYLK0wYk5N9szV6xihDbDDFr45lN1K4aCXBq/FitPSud9gLt5ZVn+ZqGX7cwm2z5EGMgfFpIFyhGGuDPmso6TItTMwny+7uPnLCf4W6goFQFV0oQSsc9VfMmVLcLr6ZetDZbaSFTLqnSO/bIPjA3/zAUoqgGFAEQS4IhuMzEp2I3jJzbzkk/IEmyax+rhZTwd6f+CGtwPixu8IvzACquPWPREu9ZvGkUzpRwvRRuaNN6cr0W1wWits9ICdYJ7ltbgMiSL3sTPeufgNcVqMVWFkCPDH4jG2jA0XcVgQj62Cb29v9f/z/+2KbYvIv/zzjpQAPkliaVDzNrW57TZ/ZOyZD0nlfMmAIBIAGAI0D3k/mdN4xr9v85ZbZbbqfH2jGd5hUqNZWwl5SPfoGmfElmazUIeNL1j/mkF7VNAzTq4jNt8JoQ11NQOcmhprXoxSxfRGJ9LDEOAQ+dmxAQH90iti9e2u/MoeuaGcDTHoC+xsmEeWmxEKefQuIzHbpw5Tc5cEocboAD09oipWQhtTO1wivf/O+DRe2rpl/E9wlrzBorjJsOeG1B/XPW4EaJEFdNlECEZga5ZoGRHXgYouGRuVkm8tDESiEyFNo+3s5M5puSdTyUL2llnINVHEt91XUNW4ewdMgJ4boJfEyt/iY5WXqbA+A2Fkt5Z0lutiWhe9nZIyIUjyXDC3UsaG1t+eNx6z4W/OYoTB7A6x+dNSTOi9AInctbESqm5gvOLww7OWXPrmHwVZasrl4eD113pm+JtT7JVOvnCXqdzzdTRHgJ0PiGTFYW5Gvt9R9LD6Lzfs0v/TZZHSmyVNq7viIHE6DBK7Qp07Iz55EM8SYtQvZf/obBniTWi5C2/ovHfw4VndkE5XYdjOhCMRjDeOEfXeN/CwfGduiUIfsoFeUxXeQXba7c7972XNv8w+dTjjUM0QeNAReW+J014dKAD/McQYXT7c0GQPIkn3Ll6R7gGjuiQoZD0TEeEqQpKoZ15g/0OPQI17QiSv9AUROa/V/TQN3dvLArec3RrsYlvBm1b8LWzltdugsC50lNKYLEp2a+ZZYqPejULRlOJh5zj/LVMyTDvwKhMxxwuDkxJ1QpoNI0OTWLom4Z71SNzI9TV1iXJrIu9Wcnd+MCaAw8o1jSXd94YU/1gnkrC9BUEOtQvEIQ7g0i6h+KL2JKk8Ydl7HruvgWMSAmNe+LshGhV4qnWHhO9/RIPQzY1tHRj2VqOyNsDpK0cww+56AdDC4gsWwY0XxoucIWIqs/GcwnWqlaT0KPr8mbK5U94/301i1WLt4YINTVvCFBrFZbIbY8eycOdeJ2teD5IfPLCRg7jjcFTwlMFNl9zdh/o3E/hHPwj7BWg0MU09pPrBLbrCgm54A6H+I6v27+jL5gkjWg/iYdks9jbfVP5y/n0dlgWEMlKasl7JvFZd56LfybW1eeaVO0gxTfXZwD8G4SI116yx7UKVRgui6Ya1YpixqXeNLc8IxtAwCU5IhwQgn+NqHnRaDv61CxKhOq4pOX7M6pkA+Pmpd4j1vn6ACUALoLLc4vpXci8VidLxzm7qFBe7s+quuJs6ETYmnpgS3LwSZxPIltgBDXz8M1k/W2ySNv2f9/NPhxLGK2D21dkHeSGmenRT3Yqcdl0m/h3OYr8V+lXNYGf8aCCpd4bWjE4QIPj7vUKN4Nrfs7ML6Y2OyS830JCnofg/k7lpFpt4SqZc5HGg1HCOrHvOdC8bP6FGDbE/VV0mX4IakzbdS/op+Kt3G24/8QbBV7y86sGSQ/vZzU8FXs7u6jIvwchsEP2BpIhW3G8uWNwa3HmjfH/ZjhhCWvluAcF+nMf14ClKg5hGgtPLJ98ueNAkc5Hs2WZlk2QHvfreCK1CCGO6nMZVSb99VM/ajr8WHTte9JSmkXq/i/U943HEbdzW6Re/S88dKgg8pGOLlAeNiqrcLkUR3/aClFpMXcOUP3rmETcWSfMXZE3TUOi8i+fqRnTYLflVx/Vb/6GJ7eIRZUA6k3RYR3iFSK9c4iDdNwJuZL2FKz/IK5VimcNWEqdXjSoxSgmF0UPlDoUlNrPcM7ftmA8Y9gKiqKEHuWN+AZRIwtVSxye2Kf8rM3lhJ5XcBXU9n4v0Oy1RU2M+4qM8AQPVwse8ErNSob5oFPWxuqZnVzo1qB/IBxkM3EVUKFUUlO3e51259GgNcJbCmlvrdjtoTW7rChm1wyCKzpCTwozUUEOIcWLneRLgMXh+SjGSFkAllzbGS5HK7LlfCMRNRDSvbQPjcXaenNYxCvu2Qyznz6StuxVj66SgI0T8B6/sfHAJYZaZ78thjOSIFumNWLQbeZixDCCC+v0YBtkxiBB3jefHqZ/dFHU+crbj6OvS1x/JDD7vlm7zOVPwpUC01nhxZuY/63E7g";
const vs = 44032, Si = 4352, Ri = 4449, vi = 4519, Vu = 19, Ju = 21, cs = 28, ki = Ju * cs, Cd = Vu * ki, Od = vs + Cd, xd = Si + Vu, Sd = Ri + Ju, Rd = vi + cs;
function ws(n) {
  return n >> 24 & 255;
}
function Ku(n) {
  return n & 16777215;
}
let Ga, Ac, _a, Ei;
function vd() {
  let n = Mu(Bd);
  Ga = new Map(Gu(n).flatMap((t, e) => t.map((r) => [r, e + 1 << 24]))), Ac = new Set(Ss(n)), _a = /* @__PURE__ */ new Map(), Ei = /* @__PURE__ */ new Map();
  for (let [t, e] of _u(n)) {
    if (!Ac.has(t) && e.length == 2) {
      let [r, s] = e, i = Ei.get(r);
      i || (i = /* @__PURE__ */ new Map(), Ei.set(r, i)), i.set(s, t);
    }
    _a.set(t, e.reverse());
  }
}
function zu(n) {
  return n >= vs && n < Od;
}
function kd(n, t) {
  if (n >= Si && n < xd && t >= Ri && t < Sd)
    return vs + (n - Si) * ki + (t - Ri) * cs;
  if (zu(n) && t > vi && t < Rd && (n - vs) % cs == 0)
    return n + (t - vi);
  {
    let e = Ei.get(n);
    return e && (e = e.get(t), e) ? e : -1;
  }
}
function Wu(n) {
  Ga || vd();
  let t = [], e = [], r = !1;
  function s(i) {
    let a = Ga.get(i);
    a && (r = !0, i |= a), t.push(i);
  }
  for (let i of n)
    for (; ; ) {
      if (i < 128)
        t.push(i);
      else if (zu(i)) {
        let a = i - vs, o = a / ki | 0, c = a % ki / cs | 0, u = a % cs;
        s(Si + o), s(Ri + c), u > 0 && s(vi + u);
      } else {
        let a = _a.get(i);
        a ? e.push(...a) : s(i);
      }
      if (!e.length)
        break;
      i = e.pop();
    }
  if (r && t.length > 1) {
    let i = ws(t[0]);
    for (let a = 1; a < t.length; a++) {
      let o = ws(t[a]);
      if (o == 0 || i <= o) {
        i = o;
        continue;
      }
      let c = a - 1;
      for (; ; ) {
        let u = t[c + 1];
        if (t[c + 1] = t[c], t[c] = u, !c || (i = ws(t[--c]), i <= o))
          break;
      }
      i = ws(t[a]);
    }
  }
  return t;
}
function Dd(n) {
  let t = [], e = [], r = -1, s = 0;
  for (let i of n) {
    let a = ws(i), o = Ku(i);
    if (r == -1)
      a == 0 ? r = o : t.push(o);
    else if (s > 0 && s >= a)
      a == 0 ? (t.push(r, ...e), e.length = 0, r = o) : e.push(o), s = a;
    else {
      let c = kd(r, o);
      c >= 0 ? r = c : s == 0 && a == 0 ? (t.push(r), r = o) : (e.push(o), s = a);
    }
  }
  return r >= 0 && t.push(r, ...e), t;
}
function Yu(n) {
  return Wu(n).map(Ku);
}
function Ud(n) {
  return Dd(Wu(n));
}
const Ec = 45, ju = ".", Zu = 65039, Xu = 1, lr = (n) => Array.from(n);
function ks(n, t) {
  return n.P.has(t) || n.Q.has(t);
}
class Ld extends Array {
  get is_emoji() {
    return !0;
  }
  // free tagging system
}
let Ha, qu, In, Qa, $u, gr, Aa, sr, tl, bc, Va;
function Io() {
  if (Ha)
    return;
  let n = Mu(pd);
  const t = () => Ss(n), e = () => new Set(t());
  Ha = new Map(_u(n)), qu = e(), In = t(), Qa = new Set(t().map((f) => In[f])), In = new Set(In), $u = e(), e();
  let r = Gu(n), s = n();
  const i = () => new Set(t().flatMap((f) => r[f]).concat(t()));
  gr = Rs((f) => {
    let h = Rs(n).map((p) => p + 96);
    if (h.length) {
      let p = f >= s;
      h[0] -= 32, h = os(h), p && (h = `Restricted[${h}]`);
      let y = i(), E = i(), m = !n();
      return { N: h, P: y, Q: E, M: m, R: p };
    }
  }), Aa = e(), sr = /* @__PURE__ */ new Map();
  let a = t().concat(lr(Aa)).sort((f, h) => f - h);
  a.forEach((f, h) => {
    let p = n(), y = a[h] = p ? a[h - p] : { V: [], M: /* @__PURE__ */ new Map() };
    y.V.push(f), Aa.has(f) || sr.set(f, y);
  });
  for (let { V: f, M: h } of new Set(sr.values())) {
    let p = [];
    for (let E of f) {
      let m = gr.filter((b) => ks(b, E)), I = p.find(({ G: b }) => m.some((T) => b.has(T)));
      I || (I = { G: /* @__PURE__ */ new Set(), V: [] }, p.push(I)), I.V.push(E), m.forEach((b) => I.G.add(b));
    }
    let y = p.flatMap((E) => lr(E.G));
    for (let { G: E, V: m } of p) {
      let I = new Set(y.filter((b) => !E.has(b)));
      for (let b of m)
        h.set(b, I);
    }
  }
  let o = /* @__PURE__ */ new Set(), c = /* @__PURE__ */ new Set();
  const u = (f) => o.has(f) ? c.add(f) : o.add(f);
  for (let f of gr) {
    for (let h of f.P)
      u(h);
    for (let h of f.Q)
      u(h);
  }
  for (let f of o)
    !sr.has(f) && !c.has(f) && sr.set(f, Xu);
  tl = new Set(lr(o).concat(lr(Yu(o)))), bc = Id(n).map((f) => Ld.from(f)).sort(Pd), Va = /* @__PURE__ */ new Map();
  for (let f of bc) {
    let h = [Va];
    for (let p of f) {
      let y = h.map((E) => {
        let m = E.get(p);
        return m || (m = /* @__PURE__ */ new Map(), E.set(p, m)), m;
      });
      p === Zu ? h.push(...y) : h = y;
    }
    for (let p of h)
      p.V = f;
  }
}
function No(n) {
  return (el(n) ? "" : `${To(ea([n]))} `) + Qu(n);
}
function To(n) {
  return `"${n}"‎`;
}
function Fd(n) {
  if (n.length >= 4 && n[2] == Ec && n[3] == Ec)
    throw new Error(`invalid label extension: "${os(n.slice(0, 4))}"`);
}
function Md(n) {
  for (let e = n.lastIndexOf(95); e > 0; )
    if (n[--e] !== 95)
      throw new Error("underscore allowed only at start");
}
function Gd(n) {
  let t = n[0], e = yc.get(t);
  if (e)
    throw Is(`leading ${e}`);
  let r = n.length, s = -1;
  for (let i = 1; i < r; i++) {
    t = n[i];
    let a = yc.get(t);
    if (a) {
      if (s == i)
        throw Is(`${e} + ${a}`);
      s = i + 1, e = a;
    }
  }
  if (s == r)
    throw Is(`trailing ${e}`);
}
function ea(n, t = Qu) {
  let e = [];
  _d(n[0]) && e.push("◌");
  let r = 0, s = n.length;
  for (let i = 0; i < s; i++) {
    let a = n[i];
    el(a) && (e.push(os(n.slice(r, i))), e.push(t(a)), r = i + 1);
  }
  return e.push(os(n.slice(r, s))), e.join("");
}
function _d(n) {
  return Io(), In.has(n);
}
function el(n) {
  return Io(), $u.has(n);
}
function Hd(n) {
  return Kd(Qd(n, Ud, Yd));
}
function Qd(n, t, e) {
  if (!n)
    return [];
  Io();
  let r = 0;
  return n.split(ju).map((s) => {
    let i = Td(s), a = {
      input: i,
      offset: r
      // codepoint, not substring!
    };
    r += i.length + 1;
    try {
      let o = a.tokens = Wd(i, t, e), c = o.length, u;
      if (!c)
        throw new Error("empty label");
      let f = a.output = o.flat();
      if (Md(f), !(a.emoji = c > 1 || o[0].is_emoji) && f.every((p) => p < 128))
        Fd(f), u = "ASCII";
      else {
        let p = o.flatMap((y) => y.is_emoji ? [] : y);
        if (!p.length)
          u = "Emoji";
        else {
          if (In.has(f[0]))
            throw Is("leading combining mark");
          for (let m = 1; m < c; m++) {
            let I = o[m];
            if (!I.is_emoji && In.has(I[0]))
              throw Is(`emoji + combining mark: "${os(o[m - 1])} + ${ea([I[0]])}"`);
          }
          Gd(f);
          let y = lr(new Set(p)), [E] = Jd(y);
          zd(E, p), Vd(E, y), u = E.N;
        }
      }
      a.type = u;
    } catch (o) {
      a.error = o;
    }
    return a;
  });
}
function Vd(n, t) {
  let e, r = [];
  for (let s of t) {
    let i = sr.get(s);
    if (i === Xu)
      return;
    if (i) {
      let a = i.M.get(s);
      if (e = e ? e.filter((o) => a.has(o)) : lr(a), !e.length)
        return;
    } else
      r.push(s);
  }
  if (e) {
    for (let s of e)
      if (r.every((i) => ks(s, i)))
        throw new Error(`whole-script confusable: ${n.N}/${s.N}`);
  }
}
function Jd(n) {
  let t = gr;
  for (let e of n) {
    let r = t.filter((s) => ks(s, e));
    if (!r.length)
      throw gr.some((s) => ks(s, e)) ? rl(t[0], e) : nl(e);
    if (t = r, r.length == 1)
      break;
  }
  return t;
}
function Kd(n) {
  return n.map(({ input: t, error: e, output: r }) => {
    if (e) {
      let s = e.message;
      throw new Error(n.length == 1 ? s : `Invalid label ${To(ea(t))}: ${s}`);
    }
    return os(r);
  }).join(ju);
}
function nl(n) {
  return new Error(`disallowed character: ${No(n)}`);
}
function rl(n, t) {
  let e = No(t), r = gr.find((s) => s.P.has(t));
  return r && (e = `${r.N} ${e}`), new Error(`illegal mixture: ${n.N} + ${e}`);
}
function Is(n) {
  return new Error(`illegal placement: ${n}`);
}
function zd(n, t) {
  for (let e of t)
    if (!ks(n, e))
      throw rl(n, e);
  if (n.M) {
    let e = Yu(t);
    for (let r = 1, s = e.length; r < s; r++)
      if (Qa.has(e[r])) {
        let i = r + 1;
        for (let a; i < s && Qa.has(a = e[i]); i++)
          for (let o = r; o < i; o++)
            if (e[o] == a)
              throw new Error(`duplicate non-spacing marks: ${No(a)}`);
        if (i - r > wc)
          throw new Error(`excessive non-spacing marks: ${To(ea(e.slice(r - 1, i)))} (${i - r}/${wc})`);
        r = i;
      }
  }
}
function Wd(n, t, e) {
  let r = [], s = [];
  for (n = n.slice().reverse(); n.length; ) {
    let i = jd(n);
    if (i)
      s.length && (r.push(t(s)), s = []), r.push(e(i));
    else {
      let a = n.pop();
      if (tl.has(a))
        s.push(a);
      else {
        let o = Ha.get(a);
        if (o)
          s.push(...o);
        else if (!qu.has(a))
          throw nl(a);
      }
    }
  }
  return s.length && r.push(t(s)), r;
}
function Yd(n) {
  return n.filter((t) => t != Zu);
}
function jd(n, t) {
  let e = Va, r, s = n.length;
  for (; s && (e = e.get(n[--s]), !!e); ) {
    let { V: i } = e;
    i && (r = i, t && t.push(...n.slice(s).reverse()), n.length = s);
  }
  return r;
}
const sl = new Uint8Array(32);
sl.fill(0);
function Ic(n) {
  return g(n.length !== 0, "invalid ENS name; empty component", "comp", n), n;
}
function il(n) {
  const t = Me(Zd(n)), e = [];
  if (n.length === 0)
    return e;
  let r = 0;
  for (let s = 0; s < t.length; s++)
    t[s] === 46 && (e.push(Ic(t.slice(r, s))), r = s + 1);
  return g(r < t.length, "invalid ENS name; empty component", "name", n), e.push(Ic(t.slice(r))), e;
}
function Zd(n) {
  try {
    if (n.length === 0)
      throw new Error("empty label");
    return Hd(n);
  } catch (t) {
    g(!1, `invalid ENS name (${t.message})`, "name", n);
  }
}
function Ja(n) {
  g(typeof n == "string", "invalid ENS name; not a string", "name", n), g(n.length, "invalid ENS name (empty label)", "name", n);
  let t = sl;
  const e = il(n);
  for (; e.length; )
    t = X(rt([t, X(e.pop())]));
  return k(t);
}
function Xd(n) {
  return k(rt(il(n).map((t) => {
    if (t.length > 63)
      throw new Error("invalid DNS encoded entry; length exceeds 63 bytes");
    const e = new Uint8Array(t.length + 1);
    return e.set(t, 1), e[0] = e.length - 1, e;
  }))) + "00";
}
function Ea(n, t) {
  return {
    address: Q(n),
    storageKeys: t.map((e, r) => (g(q(e, 32), "invalid slot", `storageKeys[${r}]`, e), e.toLowerCase()))
  };
}
function Zn(n) {
  if (Array.isArray(n))
    return n.map((e, r) => Array.isArray(e) ? (g(e.length === 2, "invalid slot set", `value[${r}]`, e), Ea(e[0], e[1])) : (g(e != null && typeof e == "object", "invalid address-slot set", "value", n), Ea(e.address, e.storageKeys)));
  g(n != null && typeof n == "object", "invalid access list", "value", n);
  const t = Object.keys(n).map((e) => {
    const r = n[e].reduce((s, i) => (s[i] = !0, s), {});
    return Ea(e, Object.keys(r).sort());
  });
  return t.sort((e, r) => e.address.localeCompare(r.address)), t;
}
function qd(n) {
  let t;
  return typeof n == "string" ? t = xs.computePublicKey(n, !1) : t = n.publicKey, Q(X("0x" + t.substring(4)).substring(26));
}
function $d(n, t) {
  return qd(xs.recoverPublicKey(n, t));
}
const Tt = BigInt(0), tp = BigInt(2), ep = BigInt(27), np = BigInt(28), rp = BigInt(35), sp = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function Po(n) {
  return n === "0x" ? null : Q(n);
}
function al(n, t) {
  try {
    return Zn(n);
  } catch (e) {
    g(!1, e.message, t, n);
  }
}
function na(n, t) {
  return n === "0x" ? 0 : H(n, t);
}
function wt(n, t) {
  if (n === "0x")
    return Tt;
  const e = D(n, t);
  return g(e <= sp, "value exceeds uint size", t, e), e;
}
function ut(n, t) {
  const e = D(n, "value"), r = Gt(e);
  return g(r.length <= 32, "value too large", `tx.${t}`, e), r;
}
function ol(n) {
  return Zn(n).map((t) => [t.address, t.storageKeys]);
}
function ip(n) {
  const t = ho(n);
  g(Array.isArray(t) && (t.length === 9 || t.length === 6), "invalid field count for legacy transaction", "data", n);
  const e = {
    type: 0,
    nonce: na(t[0], "nonce"),
    gasPrice: wt(t[1], "gasPrice"),
    gasLimit: wt(t[2], "gasLimit"),
    to: Po(t[3]),
    value: wt(t[4], "value"),
    data: k(t[5]),
    chainId: Tt
  };
  if (t.length === 6)
    return e;
  const r = wt(t[6], "v"), s = wt(t[7], "r"), i = wt(t[8], "s");
  if (s === Tt && i === Tt)
    e.chainId = r;
  else {
    let a = (r - rp) / tp;
    a < Tt && (a = Tt), e.chainId = a, g(a !== Tt || r === ep || r === np, "non-canonical legacy v", "v", t[6]), e.signature = ae.from({
      r: Kn(t[7], 32),
      s: Kn(t[8], 32),
      v: r
    }), e.hash = X(n);
  }
  return e;
}
function Nc(n, t) {
  const e = [
    ut(n.nonce || 0, "nonce"),
    ut(n.gasPrice || 0, "gasPrice"),
    ut(n.gasLimit || 0, "gasLimit"),
    n.to != null ? Q(n.to) : "0x",
    ut(n.value || 0, "value"),
    n.data || "0x"
  ];
  let r = Tt;
  if (n.chainId != Tt)
    r = D(n.chainId, "tx.chainId"), g(!t || t.networkV == null || t.legacyChainId === r, "tx.chainId/sig.v mismatch", "sig", t);
  else if (n.signature) {
    const i = n.signature.legacyChainId;
    i != null && (r = i);
  }
  if (!t)
    return r !== Tt && (e.push(Gt(r)), e.push("0x"), e.push("0x")), Cs(e);
  let s = BigInt(27 + t.yParity);
  return r !== Tt ? s = ae.getChainIdV(r, t.v) : BigInt(t.v) !== s && g(!1, "tx.chainId/sig.v mismatch", "sig", t), e.push(Gt(s)), e.push(Gt(t.r)), e.push(Gt(t.s)), Cs(e);
}
function cl(n, t) {
  let e;
  try {
    if (e = na(t[0], "yParity"), e !== 0 && e !== 1)
      throw new Error("bad yParity");
  } catch {
    g(!1, "invalid yParity", "yParity", t[0]);
  }
  const r = Kn(t[1], 32), s = Kn(t[2], 32), i = ae.from({ r, s, yParity: e });
  n.signature = i;
}
function ap(n) {
  const t = ho(J(n).slice(1));
  g(Array.isArray(t) && (t.length === 9 || t.length === 12), "invalid field count for transaction type: 2", "data", k(n));
  const e = wt(t[2], "maxPriorityFeePerGas"), r = wt(t[3], "maxFeePerGas"), s = {
    type: 2,
    chainId: wt(t[0], "chainId"),
    nonce: na(t[1], "nonce"),
    maxPriorityFeePerGas: e,
    maxFeePerGas: r,
    gasPrice: null,
    gasLimit: wt(t[4], "gasLimit"),
    to: Po(t[5]),
    value: wt(t[6], "value"),
    data: k(t[7]),
    accessList: al(t[8], "accessList")
  };
  return t.length === 9 || (s.hash = X(n), cl(s, t.slice(9))), s;
}
function Tc(n, t) {
  const e = [
    ut(n.chainId || 0, "chainId"),
    ut(n.nonce || 0, "nonce"),
    ut(n.maxPriorityFeePerGas || 0, "maxPriorityFeePerGas"),
    ut(n.maxFeePerGas || 0, "maxFeePerGas"),
    ut(n.gasLimit || 0, "gasLimit"),
    n.to != null ? Q(n.to) : "0x",
    ut(n.value || 0, "value"),
    n.data || "0x",
    ol(n.accessList || [])
  ];
  return t && (e.push(ut(t.yParity, "yParity")), e.push(Gt(t.r)), e.push(Gt(t.s))), rt(["0x02", Cs(e)]);
}
function op(n) {
  const t = ho(J(n).slice(1));
  g(Array.isArray(t) && (t.length === 8 || t.length === 11), "invalid field count for transaction type: 1", "data", k(n));
  const e = {
    type: 1,
    chainId: wt(t[0], "chainId"),
    nonce: na(t[1], "nonce"),
    gasPrice: wt(t[2], "gasPrice"),
    gasLimit: wt(t[3], "gasLimit"),
    to: Po(t[4]),
    value: wt(t[5], "value"),
    data: k(t[6]),
    accessList: al(t[7], "accessList")
  };
  return t.length === 8 || (e.hash = X(n), cl(e, t.slice(8))), e;
}
function Pc(n, t) {
  const e = [
    ut(n.chainId || 0, "chainId"),
    ut(n.nonce || 0, "nonce"),
    ut(n.gasPrice || 0, "gasPrice"),
    ut(n.gasLimit || 0, "gasLimit"),
    n.to != null ? Q(n.to) : "0x",
    ut(n.value || 0, "value"),
    n.data || "0x",
    ol(n.accessList || [])
  ];
  return t && (e.push(ut(t.yParity, "recoveryParam")), e.push(Gt(t.r)), e.push(Gt(t.s))), rt(["0x01", Cs(e)]);
}
var Oe, Br, Cr, Or, xr, Sr, Rr, vr, kr, Dr, Ur, Lr;
const Ze = class Ze {
  /**
   *  Creates a new Transaction with default values.
   */
  constructor() {
    A(this, Oe, void 0);
    A(this, Br, void 0);
    A(this, Cr, void 0);
    A(this, Or, void 0);
    A(this, xr, void 0);
    A(this, Sr, void 0);
    A(this, Rr, void 0);
    A(this, vr, void 0);
    A(this, kr, void 0);
    A(this, Dr, void 0);
    A(this, Ur, void 0);
    A(this, Lr, void 0);
    d(this, Oe, null), d(this, Br, null), d(this, Or, 0), d(this, xr, BigInt(0)), d(this, Sr, null), d(this, Rr, null), d(this, vr, null), d(this, Cr, "0x"), d(this, kr, BigInt(0)), d(this, Dr, BigInt(0)), d(this, Ur, null), d(this, Lr, null);
  }
  /**
   *  The transaction type.
   *
   *  If null, the type will be automatically inferred based on
   *  explicit properties.
   */
  get type() {
    return l(this, Oe);
  }
  set type(t) {
    switch (t) {
      case null:
        d(this, Oe, null);
        break;
      case 0:
      case "legacy":
        d(this, Oe, 0);
        break;
      case 1:
      case "berlin":
      case "eip-2930":
        d(this, Oe, 1);
        break;
      case 2:
      case "london":
      case "eip-1559":
        d(this, Oe, 2);
        break;
      default:
        g(!1, "unsupported transaction type", "type", t);
    }
  }
  /**
   *  The name of the transaction type.
   */
  get typeName() {
    switch (this.type) {
      case 0:
        return "legacy";
      case 1:
        return "eip-2930";
      case 2:
        return "eip-1559";
    }
    return null;
  }
  /**
   *  The ``to`` address for the transaction or ``null`` if the
   *  transaction is an ``init`` transaction.
   */
  get to() {
    return l(this, Br);
  }
  set to(t) {
    d(this, Br, t == null ? null : Q(t));
  }
  /**
   *  The transaction nonce.
   */
  get nonce() {
    return l(this, Or);
  }
  set nonce(t) {
    d(this, Or, H(t, "value"));
  }
  /**
   *  The gas limit.
   */
  get gasLimit() {
    return l(this, xr);
  }
  set gasLimit(t) {
    d(this, xr, D(t));
  }
  /**
   *  The gas price.
   *
   *  On legacy networks this defines the fee that will be paid. On
   *  EIP-1559 networks, this should be ``null``.
   */
  get gasPrice() {
    const t = l(this, Sr);
    return t == null && (this.type === 0 || this.type === 1) ? Tt : t;
  }
  set gasPrice(t) {
    d(this, Sr, t == null ? null : D(t, "gasPrice"));
  }
  /**
   *  The maximum priority fee per unit of gas to pay. On legacy
   *  networks this should be ``null``.
   */
  get maxPriorityFeePerGas() {
    const t = l(this, Rr);
    return t ?? (this.type === 2 ? Tt : null);
  }
  set maxPriorityFeePerGas(t) {
    d(this, Rr, t == null ? null : D(t, "maxPriorityFeePerGas"));
  }
  /**
   *  The maximum total fee per unit of gas to pay. On legacy
   *  networks this should be ``null``.
   */
  get maxFeePerGas() {
    const t = l(this, vr);
    return t ?? (this.type === 2 ? Tt : null);
  }
  set maxFeePerGas(t) {
    d(this, vr, t == null ? null : D(t, "maxFeePerGas"));
  }
  /**
   *  The transaction data. For ``init`` transactions this is the
   *  deployment code.
   */
  get data() {
    return l(this, Cr);
  }
  set data(t) {
    d(this, Cr, k(t));
  }
  /**
   *  The amount of ether (in wei) to send in this transactions.
   */
  get value() {
    return l(this, kr);
  }
  set value(t) {
    d(this, kr, D(t, "value"));
  }
  /**
   *  The chain ID this transaction is valid on.
   */
  get chainId() {
    return l(this, Dr);
  }
  set chainId(t) {
    d(this, Dr, D(t));
  }
  /**
   *  If signed, the signature for this transaction.
   */
  get signature() {
    return l(this, Ur) || null;
  }
  set signature(t) {
    d(this, Ur, t == null ? null : ae.from(t));
  }
  /**
   *  The access list.
   *
   *  An access list permits discounted (but pre-paid) access to
   *  bytecode and state variable access within contract execution.
   */
  get accessList() {
    const t = l(this, Lr) || null;
    return t ?? (this.type === 1 || this.type === 2 ? [] : null);
  }
  set accessList(t) {
    d(this, Lr, t == null ? null : Zn(t));
  }
  /**
   *  The transaction hash, if signed. Otherwise, ``null``.
   */
  get hash() {
    return this.signature == null ? null : X(this.serialized);
  }
  /**
   *  The pre-image hash of this transaction.
   *
   *  This is the digest that a [[Signer]] must sign to authorize
   *  this transaction.
   */
  get unsignedHash() {
    return X(this.unsignedSerialized);
  }
  /**
   *  The sending address, if signed. Otherwise, ``null``.
   */
  get from() {
    return this.signature == null ? null : $d(this.unsignedHash, this.signature);
  }
  /**
   *  The public key of the sender, if signed. Otherwise, ``null``.
   */
  get fromPublicKey() {
    return this.signature == null ? null : xs.recoverPublicKey(this.unsignedHash, this.signature);
  }
  /**
   *  Returns true if signed.
   *
   *  This provides a Type Guard that properties requiring a signed
   *  transaction are non-null.
   */
  isSigned() {
    return this.signature != null;
  }
  /**
   *  The serialized transaction.
   *
   *  This throws if the transaction is unsigned. For the pre-image,
   *  use [[unsignedSerialized]].
   */
  get serialized() {
    switch (N(this.signature != null, "cannot serialize unsigned transaction; maybe you meant .unsignedSerialized", "UNSUPPORTED_OPERATION", { operation: ".serialized" }), this.inferType()) {
      case 0:
        return Nc(this, this.signature);
      case 1:
        return Pc(this, this.signature);
      case 2:
        return Tc(this, this.signature);
    }
    N(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".serialized" });
  }
  /**
   *  The transaction pre-image.
   *
   *  The hash of this is the digest which needs to be signed to
   *  authorize this transaction.
   */
  get unsignedSerialized() {
    switch (this.inferType()) {
      case 0:
        return Nc(this);
      case 1:
        return Pc(this);
      case 2:
        return Tc(this);
    }
    N(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: ".unsignedSerialized" });
  }
  /**
   *  Return the most "likely" type; currently the highest
   *  supported transaction type.
   */
  inferType() {
    return this.inferTypes().pop();
  }
  /**
   *  Validates the explicit properties and returns a list of compatible
   *  transaction types.
   */
  inferTypes() {
    const t = this.gasPrice != null, e = this.maxFeePerGas != null || this.maxPriorityFeePerGas != null, r = this.accessList != null;
    this.maxFeePerGas != null && this.maxPriorityFeePerGas != null && N(this.maxFeePerGas >= this.maxPriorityFeePerGas, "priorityFee cannot be more than maxFee", "BAD_DATA", { value: this }), N(!e || this.type !== 0 && this.type !== 1, "transaction type cannot have maxFeePerGas or maxPriorityFeePerGas", "BAD_DATA", { value: this }), N(this.type !== 0 || !r, "legacy transaction cannot have accessList", "BAD_DATA", { value: this });
    const s = [];
    return this.type != null ? s.push(this.type) : e ? s.push(2) : t ? (s.push(1), r || s.push(0)) : r ? (s.push(1), s.push(2)) : (s.push(0), s.push(1), s.push(2)), s.sort(), s;
  }
  /**
   *  Returns true if this transaction is a legacy transaction (i.e.
   *  ``type === 0``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if this transaction is berlin hardform transaction (i.e.
   *  ``type === 1``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if this transaction is london hardform transaction (i.e.
   *  ``type === 2``).
   *
   *  This provides a Type Guard that the related properties are
   *  non-null.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Create a copy of this transaciton.
   */
  clone() {
    return Ze.from(this);
  }
  /**
   *  Return a JSON-friendly object.
   */
  toJSON() {
    const t = (e) => e == null ? null : e.toString();
    return {
      type: this.type,
      to: this.to,
      //            from: this.from,
      data: this.data,
      nonce: this.nonce,
      gasLimit: t(this.gasLimit),
      gasPrice: t(this.gasPrice),
      maxPriorityFeePerGas: t(this.maxPriorityFeePerGas),
      maxFeePerGas: t(this.maxFeePerGas),
      value: t(this.value),
      chainId: t(this.chainId),
      sig: this.signature ? this.signature.toJSON() : null,
      accessList: this.accessList
    };
  }
  /**
   *  Create a **Transaction** from a serialized transaction or a
   *  Transaction-like object.
   */
  static from(t) {
    if (t == null)
      return new Ze();
    if (typeof t == "string") {
      const r = J(t);
      if (r[0] >= 127)
        return Ze.from(ip(r));
      switch (r[0]) {
        case 1:
          return Ze.from(op(r));
        case 2:
          return Ze.from(ap(r));
      }
      N(!1, "unsupported transaction type", "UNSUPPORTED_OPERATION", { operation: "from" });
    }
    const e = new Ze();
    return t.type != null && (e.type = t.type), t.to != null && (e.to = t.to), t.nonce != null && (e.nonce = t.nonce), t.gasLimit != null && (e.gasLimit = t.gasLimit), t.gasPrice != null && (e.gasPrice = t.gasPrice), t.maxPriorityFeePerGas != null && (e.maxPriorityFeePerGas = t.maxPriorityFeePerGas), t.maxFeePerGas != null && (e.maxFeePerGas = t.maxFeePerGas), t.data != null && (e.data = t.data), t.value != null && (e.value = t.value), t.chainId != null && (e.chainId = t.chainId), t.signature != null && (e.signature = ae.from(t.signature)), t.accessList != null && (e.accessList = t.accessList), t.hash != null && (g(e.isSigned(), "unsigned transaction cannot define hash", "tx", t), g(e.hash === t.hash, "hash mismatch", "tx", t)), t.from != null && (g(e.isSigned(), "unsigned transaction cannot define from", "tx", t), g(e.from.toLowerCase() === (t.from || "").toLowerCase(), "from mismatch", "tx", t)), e;
  }
};
Oe = new WeakMap(), Br = new WeakMap(), Cr = new WeakMap(), Or = new WeakMap(), xr = new WeakMap(), Sr = new WeakMap(), Rr = new WeakMap(), vr = new WeakMap(), kr = new WeakMap(), Dr = new WeakMap(), Ur = new WeakMap(), Lr = new WeakMap();
let Di = Ze;
const ul = new Uint8Array(32);
ul.fill(0);
const cp = BigInt(-1), ll = BigInt(0), fl = BigInt(1), up = BigInt("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff");
function lp(n) {
  const t = J(n), e = t.length % 32;
  return e ? rt([t, ul.slice(e)]) : k(t);
}
const fp = gn(fl, 32), hp = gn(ll, 32), Bc = {
  name: "string",
  version: "string",
  chainId: "uint256",
  verifyingContract: "address",
  salt: "bytes32"
}, ba = [
  "name",
  "version",
  "chainId",
  "verifyingContract",
  "salt"
];
function Cc(n) {
  return function(t) {
    return g(typeof t == "string", `invalid domain value for ${JSON.stringify(n)}`, `domain.${n}`, t), t;
  };
}
const dp = {
  name: Cc("name"),
  version: Cc("version"),
  chainId: function(n) {
    const t = D(n, "domain.chainId");
    return g(t >= 0, "invalid chain ID", "domain.chainId", n), Number.isSafeInteger(t) ? Number(t) : ur(t);
  },
  verifyingContract: function(n) {
    try {
      return Q(n).toLowerCase();
    } catch {
    }
    g(!1, 'invalid domain value "verifyingContract"', "domain.verifyingContract", n);
  },
  salt: function(n) {
    const t = J(n, "domain.salt");
    return g(t.length === 32, 'invalid domain value "salt"', "domain.salt", n), k(t);
  }
};
function Ia(n) {
  {
    const t = n.match(/^(u?)int(\d*)$/);
    if (t) {
      const e = t[1] === "", r = parseInt(t[2] || "256");
      g(r % 8 === 0 && r !== 0 && r <= 256 && (t[2] == null || t[2] === String(r)), "invalid numeric width", "type", n);
      const s = ms(up, e ? r - 1 : r), i = e ? (s + fl) * cp : ll;
      return function(a) {
        const o = D(a, "value");
        return g(o >= i && o <= s, `value out-of-bounds for ${n}`, "value", o), gn(e ? iu(o, 256) : o, 32);
      };
    }
  }
  {
    const t = n.match(/^bytes(\d+)$/);
    if (t) {
      const e = parseInt(t[1]);
      return g(e !== 0 && e <= 32 && t[1] === String(e), "invalid bytes width", "type", n), function(r) {
        const s = J(r);
        return g(s.length === e, `invalid length for ${n}`, "value", r), lp(r);
      };
    }
  }
  switch (n) {
    case "address":
      return function(t) {
        return Kn(Q(t), 32);
      };
    case "bool":
      return function(t) {
        return t ? fp : hp;
      };
    case "bytes":
      return function(t) {
        return X(t);
      };
    case "string":
      return function(t) {
        return zn(t);
      };
  }
  return null;
}
function Oc(n, t) {
  return `${n}(${t.map(({ name: e, type: r }) => r + " " + e).join(",")})`;
}
var _s, xe, Fr, Hi, hl;
const Ht = class Ht {
  /**
   *  Create a new **TypedDataEncoder** for %%types%%.
   *
   *  This performs all necessary checking that types are valid and
   *  do not violate the [[link-eip-712]] structural constraints as
   *  well as computes the [[primaryType]].
   */
  constructor(t) {
    A(this, Hi);
    /**
     *  The primary type for the structured [[types]].
     *
     *  This is derived automatically from the [[types]], since no
     *  recursion is possible, once the DAG for the types is consturcted
     *  internally, the primary type must be the only remaining type with
     *  no parent nodes.
     */
    w(this, "primaryType");
    A(this, _s, void 0);
    A(this, xe, void 0);
    A(this, Fr, void 0);
    d(this, _s, JSON.stringify(t)), d(this, xe, /* @__PURE__ */ new Map()), d(this, Fr, /* @__PURE__ */ new Map());
    const e = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Map(), s = /* @__PURE__ */ new Map();
    Object.keys(t).forEach((o) => {
      e.set(o, /* @__PURE__ */ new Set()), r.set(o, []), s.set(o, /* @__PURE__ */ new Set());
    });
    for (const o in t) {
      const c = /* @__PURE__ */ new Set();
      for (const u of t[o]) {
        g(!c.has(u.name), `duplicate variable name ${JSON.stringify(u.name)} in ${JSON.stringify(o)}`, "types", t), c.add(u.name);
        const f = u.type.match(/^([^\x5b]*)(\x5b|$)/)[1] || null;
        g(f !== o, `circular type reference to ${JSON.stringify(f)}`, "types", t), !Ia(f) && (g(r.has(f), `unknown type ${JSON.stringify(f)}`, "types", t), r.get(f).push(o), e.get(o).add(f));
      }
    }
    const i = Array.from(r.keys()).filter((o) => r.get(o).length === 0);
    g(i.length !== 0, "missing primary type", "types", t), g(i.length === 1, `ambiguous primary types or unused types: ${i.map((o) => JSON.stringify(o)).join(", ")}`, "types", t), F(this, { primaryType: i[0] });
    function a(o, c) {
      g(!c.has(o), `circular type reference to ${JSON.stringify(o)}`, "types", t), c.add(o);
      for (const u of e.get(o))
        if (r.has(u)) {
          a(u, c);
          for (const f of c)
            s.get(f).add(u);
        }
      c.delete(o);
    }
    a(this.primaryType, /* @__PURE__ */ new Set());
    for (const [o, c] of s) {
      const u = Array.from(c);
      u.sort(), l(this, xe).set(o, Oc(o, t[o]) + u.map((f) => Oc(f, t[f])).join(""));
    }
  }
  /**
   *  The types.
   */
  get types() {
    return JSON.parse(l(this, _s));
  }
  /**
   *  Returnthe encoder for the specific %%type%%.
   */
  getEncoder(t) {
    let e = l(this, Fr).get(t);
    return e || (e = C(this, Hi, hl).call(this, t), l(this, Fr).set(t, e)), e;
  }
  /**
   *  Return the full type for %%name%%.
   */
  encodeType(t) {
    const e = l(this, xe).get(t);
    return g(e, `unknown type: ${JSON.stringify(t)}`, "name", t), e;
  }
  /**
   *  Return the encoded %%value%% for the %%type%%.
   */
  encodeData(t, e) {
    return this.getEncoder(t)(e);
  }
  /**
   *  Returns the hash of %%value%% for the type of %%name%%.
   */
  hashStruct(t, e) {
    return X(this.encodeData(t, e));
  }
  /**
   *  Return the fulled encoded %%value%% for the [[types]].
   */
  encode(t) {
    return this.encodeData(this.primaryType, t);
  }
  /**
   *  Return the hash of the fully encoded %%value%% for the [[types]].
   */
  hash(t) {
    return this.hashStruct(this.primaryType, t);
  }
  /**
   *  @_ignore:
   */
  _visit(t, e, r) {
    if (Ia(t))
      return r(t, e);
    const s = t.match(/^(.*)(\x5b(\d*)\x5d)$/);
    if (s)
      return g(!s[3] || parseInt(s[3]) === e.length, `array length mismatch; expected length ${parseInt(s[3])}`, "value", e), e.map((a) => this._visit(s[1], a, r));
    const i = this.types[t];
    if (i)
      return i.reduce((a, { name: o, type: c }) => (a[o] = this._visit(c, e[o], r), a), {});
    g(!1, `unknown type: ${t}`, "type", t);
  }
  /**
   *  Call %%calback%% for each value in %%value%%, passing the type and
   *  component within %%value%%.
   *
   *  This is useful for replacing addresses or other transformation that
   *  may be desired on each component, based on its type.
   */
  visit(t, e) {
    return this._visit(this.primaryType, t, e);
  }
  /**
   *  Create a new **TypedDataEncoder** for %%types%%.
   */
  static from(t) {
    return new Ht(t);
  }
  /**
   *  Return the primary type for %%types%%.
   */
  static getPrimaryType(t) {
    return Ht.from(t).primaryType;
  }
  /**
   *  Return the hashed struct for %%value%% using %%types%% and %%name%%.
   */
  static hashStruct(t, e, r) {
    return Ht.from(e).hashStruct(t, r);
  }
  /**
   *  Return the domain hash for %%domain%%.
   */
  static hashDomain(t) {
    const e = [];
    for (const r in t) {
      if (t[r] == null)
        continue;
      const s = Bc[r];
      g(s, `invalid typed-data domain key: ${JSON.stringify(r)}`, "domain", t), e.push({ name: r, type: s });
    }
    return e.sort((r, s) => ba.indexOf(r.name) - ba.indexOf(s.name)), Ht.hashStruct("EIP712Domain", { EIP712Domain: e }, t);
  }
  /**
   *  Return the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
   */
  static encode(t, e, r) {
    return rt([
      "0x1901",
      Ht.hashDomain(t),
      Ht.from(e).hash(r)
    ]);
  }
  /**
   *  Return the hash of the fully encoded [[link-eip-712]] %%value%% for %%types%% with %%domain%%.
   */
  static hash(t, e, r) {
    return X(Ht.encode(t, e, r));
  }
  // Replaces all address types with ENS names with their looked up address
  /**
   * Resolves to the value from resolving all addresses in %%value%% for
   * %%types%% and the %%domain%%.
   */
  static async resolveNames(t, e, r, s) {
    t = Object.assign({}, t);
    for (const o in t)
      t[o] == null && delete t[o];
    const i = {};
    t.verifyingContract && !q(t.verifyingContract, 20) && (i[t.verifyingContract] = "0x");
    const a = Ht.from(e);
    a.visit(r, (o, c) => (o === "address" && !q(c, 20) && (i[c] = "0x"), c));
    for (const o in i)
      i[o] = await s(o);
    return t.verifyingContract && i[t.verifyingContract] && (t.verifyingContract = i[t.verifyingContract]), r = a.visit(r, (o, c) => o === "address" && i[c] ? i[c] : c), { domain: t, value: r };
  }
  /**
   *  Returns the JSON-encoded payload expected by nodes which implement
   *  the JSON-RPC [[link-eip-712]] method.
   */
  static getPayload(t, e, r) {
    Ht.hashDomain(t);
    const s = {}, i = [];
    ba.forEach((c) => {
      const u = t[c];
      u != null && (s[c] = dp[c](u), i.push({ name: c, type: Bc[c] }));
    });
    const a = Ht.from(e), o = Object.assign({}, e);
    return g(o.EIP712Domain == null, "types must not contain EIP712Domain type", "types.EIP712Domain", e), o.EIP712Domain = i, a.encode(r), {
      types: o,
      domain: s,
      primaryType: a.primaryType,
      message: a.visit(r, (c, u) => {
        if (c.match(/^bytes(\d*)/))
          return k(J(u));
        if (c.match(/^u?int/))
          return D(u).toString();
        switch (c) {
          case "address":
            return u.toLowerCase();
          case "bool":
            return !!u;
          case "string":
            return g(typeof u == "string", "invalid string", "value", u), u;
        }
        g(!1, "unsupported type", "type", c);
      })
    };
  }
};
_s = new WeakMap(), xe = new WeakMap(), Fr = new WeakMap(), Hi = new WeakSet(), hl = function(t) {
  {
    const s = Ia(t);
    if (s)
      return s;
  }
  const e = t.match(/^(.*)(\x5b(\d*)\x5d)$/);
  if (e) {
    const s = e[1], i = this.getEncoder(s);
    return (a) => {
      g(!e[3] || parseInt(e[3]) === a.length, `array length mismatch; expected length ${parseInt(e[3])}`, "value", a);
      let o = a.map(i);
      return l(this, xe).has(s) && (o = o.map(X)), X(rt(o));
    };
  }
  const r = this.types[t];
  if (r) {
    const s = zn(l(this, xe).get(t));
    return (i) => {
      const a = r.map(({ name: o, type: c }) => {
        const u = this.getEncoder(c)(i[o]);
        return l(this, xe).has(c) ? X(u) : u;
      });
      return a.unshift(s), rt(a);
    };
  }
  g(!1, `unknown type: ${t}`, "type", t);
};
let Ui = Ht;
function bt(n) {
  const t = /* @__PURE__ */ new Set();
  return n.forEach((e) => t.add(e)), Object.freeze(t);
}
const pp = "external public payable", gp = bt(pp.split(" ")), dl = "constant external internal payable private public pure view", mp = bt(dl.split(" ")), pl = "constructor error event fallback function receive struct", gl = bt(pl.split(" ")), ml = "calldata memory storage payable indexed", yp = bt(ml.split(" ")), wp = "tuple returns", Ap = [pl, ml, wp, dl].join(" "), Ep = bt(Ap.split(" ")), bp = {
  "(": "OPEN_PAREN",
  ")": "CLOSE_PAREN",
  "[": "OPEN_BRACKET",
  "]": "CLOSE_BRACKET",
  ",": "COMMA",
  "@": "AT"
}, Ip = new RegExp("^(\\s*)"), Np = new RegExp("^([0-9]+)"), Tp = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)"), yl = new RegExp("^([a-zA-Z$_][a-zA-Z0-9$_]*)$"), wl = new RegExp("^(address|bool|bytes([0-9]*)|string|u?int([0-9]*))$");
var ct, ne, Hs, Ka;
const Qi = class Qi {
  constructor(t) {
    A(this, Hs);
    A(this, ct, void 0);
    A(this, ne, void 0);
    d(this, ct, 0), d(this, ne, t.slice());
  }
  get offset() {
    return l(this, ct);
  }
  get length() {
    return l(this, ne).length - l(this, ct);
  }
  clone() {
    return new Qi(l(this, ne));
  }
  reset() {
    d(this, ct, 0);
  }
  // Pops and returns the value of the next token, if it is a keyword in allowed; throws if out of tokens
  popKeyword(t) {
    const e = this.peek();
    if (e.type !== "KEYWORD" || !t.has(e.text))
      throw new Error(`expected keyword ${e.text}`);
    return this.pop().text;
  }
  // Pops and returns the value of the next token if it is `type`; throws if out of tokens
  popType(t) {
    if (this.peek().type !== t)
      throw new Error(`expected ${t}; got ${JSON.stringify(this.peek())}`);
    return this.pop().text;
  }
  // Pops and returns a "(" TOKENS ")"
  popParen() {
    const t = this.peek();
    if (t.type !== "OPEN_PAREN")
      throw new Error("bad start");
    const e = C(this, Hs, Ka).call(this, l(this, ct) + 1, t.match + 1);
    return d(this, ct, t.match + 1), e;
  }
  // Pops and returns the items within "(" ITEM1 "," ITEM2 "," ... ")"
  popParams() {
    const t = this.peek();
    if (t.type !== "OPEN_PAREN")
      throw new Error("bad start");
    const e = [];
    for (; l(this, ct) < t.match - 1; ) {
      const r = this.peek().linkNext;
      e.push(C(this, Hs, Ka).call(this, l(this, ct) + 1, r)), d(this, ct, r);
    }
    return d(this, ct, t.match + 1), e;
  }
  // Returns the top Token, throwing if out of tokens
  peek() {
    if (l(this, ct) >= l(this, ne).length)
      throw new Error("out-of-bounds");
    return l(this, ne)[l(this, ct)];
  }
  // Returns the next value, if it is a keyword in `allowed`
  peekKeyword(t) {
    const e = this.peekType("KEYWORD");
    return e != null && t.has(e) ? e : null;
  }
  // Returns the value of the next token if it is `type`
  peekType(t) {
    if (this.length === 0)
      return null;
    const e = this.peek();
    return e.type === t ? e.text : null;
  }
  // Returns the next token; throws if out of tokens
  pop() {
    const t = this.peek();
    return ds(this, ct)._++, t;
  }
  toString() {
    const t = [];
    for (let e = l(this, ct); e < l(this, ne).length; e++) {
      const r = l(this, ne)[e];
      t.push(`${r.type}:${r.text}`);
    }
    return `<TokenString ${t.join(" ")}>`;
  }
};
ct = new WeakMap(), ne = new WeakMap(), Hs = new WeakSet(), Ka = function(t = 0, e = 0) {
  return new Qi(l(this, ne).slice(t, e).map((r) => Object.freeze(Object.assign({}, r, {
    match: r.match - t,
    linkBack: r.linkBack - t,
    linkNext: r.linkNext - t
  }))));
};
let oe = Qi;
function mn(n) {
  const t = [], e = (a) => {
    const o = i < n.length ? JSON.stringify(n[i]) : "$EOI";
    throw new Error(`invalid token ${o} at ${i}: ${a}`);
  };
  let r = [], s = [], i = 0;
  for (; i < n.length; ) {
    let a = n.substring(i), o = a.match(Ip);
    o && (i += o[1].length, a = n.substring(i));
    const c = { depth: r.length, linkBack: -1, linkNext: -1, match: -1, type: "", text: "", offset: i, value: -1 };
    t.push(c);
    let u = bp[a[0]] || "";
    if (u) {
      if (c.type = u, c.text = a[0], i++, u === "OPEN_PAREN")
        r.push(t.length - 1), s.push(t.length - 1);
      else if (u == "CLOSE_PAREN")
        r.length === 0 && e("no matching open bracket"), c.match = r.pop(), t[c.match].match = t.length - 1, c.depth--, c.linkBack = s.pop(), t[c.linkBack].linkNext = t.length - 1;
      else if (u === "COMMA")
        c.linkBack = s.pop(), t[c.linkBack].linkNext = t.length - 1, s.push(t.length - 1);
      else if (u === "OPEN_BRACKET")
        c.type = "BRACKET";
      else if (u === "CLOSE_BRACKET") {
        let f = t.pop().text;
        if (t.length > 0 && t[t.length - 1].type === "NUMBER") {
          const h = t.pop().text;
          f = h + f, t[t.length - 1].value = H(h);
        }
        if (t.length === 0 || t[t.length - 1].type !== "BRACKET")
          throw new Error("missing opening bracket");
        t[t.length - 1].text += f;
      }
      continue;
    }
    if (o = a.match(Tp), o) {
      if (c.text = o[1], i += c.text.length, Ep.has(c.text)) {
        c.type = "KEYWORD";
        continue;
      }
      if (c.text.match(wl)) {
        c.type = "TYPE";
        continue;
      }
      c.type = "ID";
      continue;
    }
    if (o = a.match(Np), o) {
      c.text = o[1], c.type = "NUMBER", i += c.text.length;
      continue;
    }
    throw new Error(`unexpected token ${JSON.stringify(a[0])} at position ${i}`);
  }
  return new oe(t.map((a) => Object.freeze(a)));
}
function xc(n, t) {
  let e = [];
  for (const r in t.keys())
    n.has(r) && e.push(r);
  if (e.length > 1)
    throw new Error(`conflicting types: ${e.join(", ")}`);
}
function ra(n, t) {
  if (t.peekKeyword(gl)) {
    const e = t.pop().text;
    if (e !== n)
      throw new Error(`expected ${n}, got ${e}`);
  }
  return t.popType("ID");
}
function He(n, t) {
  const e = /* @__PURE__ */ new Set();
  for (; ; ) {
    const r = n.peekType("KEYWORD");
    if (r == null || t && !t.has(r))
      break;
    if (n.pop(), e.has(r))
      throw new Error(`duplicate keywords: ${JSON.stringify(r)}`);
    e.add(r);
  }
  return Object.freeze(e);
}
function Al(n) {
  let t = He(n, mp);
  return xc(t, bt("constant payable nonpayable".split(" "))), xc(t, bt("pure view payable nonpayable".split(" "))), t.has("view") ? "view" : t.has("pure") ? "pure" : t.has("payable") ? "payable" : t.has("nonpayable") ? "nonpayable" : t.has("constant") ? "view" : "nonpayable";
}
function Ge(n, t) {
  return n.popParams().map((e) => lt.from(e, t));
}
function El(n) {
  if (n.peekType("AT")) {
    if (n.pop(), n.peekType("NUMBER"))
      return D(n.pop().text);
    throw new Error("invalid gas");
  }
  return null;
}
function Wn(n) {
  if (n.length)
    throw new Error(`unexpected tokens: ${n.toString()}`);
}
const Pp = new RegExp(/^(.*)\[([0-9]*)\]$/);
function Sc(n) {
  const t = n.match(wl);
  if (g(t, "invalid type", "type", n), n === "uint")
    return "uint256";
  if (n === "int")
    return "int256";
  if (t[2]) {
    const e = parseInt(t[2]);
    g(e !== 0 && e <= 32, "invalid bytes length", "type", n);
  } else if (t[3]) {
    const e = parseInt(t[3]);
    g(e !== 0 && e <= 256 && e % 8 === 0, "invalid numeric width", "type", n);
  }
  return n;
}
const Z = {}, Ct = Symbol.for("_ethers_internal"), Rc = "_ParamTypeInternal", vc = "_ErrorInternal", kc = "_EventInternal", Dc = "_ConstructorInternal", Uc = "_FallbackInternal", Lc = "_FunctionInternal", Fc = "_StructInternal";
var Mr, bi;
const Qt = class Qt {
  /**
   *  @private
   */
  constructor(t, e, r, s, i, a, o, c) {
    A(this, Mr);
    /**
     *  The local name of the parameter (or ``""`` if unbound)
     */
    w(this, "name");
    /**
     *  The fully qualified type (e.g. ``"address"``, ``"tuple(address)"``,
     *  ``"uint256[3][]"``)
     */
    w(this, "type");
    /**
     *  The base type (e.g. ``"address"``, ``"tuple"``, ``"array"``)
     */
    w(this, "baseType");
    /**
     *  True if the parameters is indexed.
     *
     *  For non-indexable types this is ``null``.
     */
    w(this, "indexed");
    /**
     *  The components for the tuple.
     *
     *  For non-tuple types this is ``null``.
     */
    w(this, "components");
    /**
     *  The array length, or ``-1`` for dynamic-lengthed arrays.
     *
     *  For non-array types this is ``null``.
     */
    w(this, "arrayLength");
    /**
     *  The type of each child in the array.
     *
     *  For non-array types this is ``null``.
     */
    w(this, "arrayChildren");
    if (ji(t, Z, "ParamType"), Object.defineProperty(this, Ct, { value: Rc }), a && (a = Object.freeze(a.slice())), s === "array") {
      if (o == null || c == null)
        throw new Error("");
    } else if (o != null || c != null)
      throw new Error("");
    if (s === "tuple") {
      if (a == null)
        throw new Error("");
    } else if (a != null)
      throw new Error("");
    F(this, {
      name: e,
      type: r,
      baseType: s,
      indexed: i,
      components: a,
      arrayLength: o,
      arrayChildren: c
    });
  }
  /**
   *  Return a string representation of this type.
   *
   *  For example,
   *
   *  ``sighash" => "(uint256,address)"``
   *
   *  ``"minimal" => "tuple(uint256,address) indexed"``
   *
   *  ``"full" => "tuple(uint256 foo, address bar) indexed baz"``
   */
  format(t) {
    if (t == null && (t = "sighash"), t === "json") {
      const r = this.name || "";
      if (this.isArray()) {
        const i = JSON.parse(this.arrayChildren.format("json"));
        return i.name = r, i.type += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`, JSON.stringify(i);
      }
      const s = {
        type: this.baseType === "tuple" ? "tuple" : this.type,
        name: r
      };
      return typeof this.indexed == "boolean" && (s.indexed = this.indexed), this.isTuple() && (s.components = this.components.map((i) => JSON.parse(i.format(t)))), JSON.stringify(s);
    }
    let e = "";
    return this.isArray() ? (e += this.arrayChildren.format(t), e += `[${this.arrayLength < 0 ? "" : String(this.arrayLength)}]`) : this.isTuple() ? e += "(" + this.components.map((r) => r.format(t)).join(t === "full" ? ", " : ",") + ")" : e += this.type, t !== "sighash" && (this.indexed === !0 && (e += " indexed"), t === "full" && this.name && (e += " " + this.name)), e;
  }
  /**
   *  Returns true if %%this%% is an Array type.
   *
   *  This provides a type gaurd ensuring that [[arrayChildren]]
   *  and [[arrayLength]] are non-null.
   */
  isArray() {
    return this.baseType === "array";
  }
  /**
   *  Returns true if %%this%% is a Tuple type.
   *
   *  This provides a type gaurd ensuring that [[components]]
   *  is non-null.
   */
  isTuple() {
    return this.baseType === "tuple";
  }
  /**
   *  Returns true if %%this%% is an Indexable type.
   *
   *  This provides a type gaurd ensuring that [[indexed]]
   *  is non-null.
   */
  isIndexable() {
    return this.indexed != null;
  }
  /**
   *  Walks the **ParamType** with %%value%%, calling %%process%%
   *  on each type, destructing the %%value%% recursively.
   */
  walk(t, e) {
    if (this.isArray()) {
      if (!Array.isArray(t))
        throw new Error("invalid array value");
      if (this.arrayLength !== -1 && t.length !== this.arrayLength)
        throw new Error("array is wrong length");
      const r = this;
      return t.map((s) => r.arrayChildren.walk(s, e));
    }
    if (this.isTuple()) {
      if (!Array.isArray(t))
        throw new Error("invalid tuple value");
      if (t.length !== this.components.length)
        throw new Error("array is wrong length");
      const r = this;
      return t.map((s, i) => r.components[i].walk(s, e));
    }
    return e(this.type, t);
  }
  /**
   *  Walks the **ParamType** with %%value%%, asynchronously calling
   *  %%process%% on each type, destructing the %%value%% recursively.
   *
   *  This can be used to resolve ENS naes by walking and resolving each
   *  ``"address"`` type.
   */
  async walkAsync(t, e) {
    const r = [], s = [t];
    return C(this, Mr, bi).call(this, r, t, e, (i) => {
      s[0] = i;
    }), r.length && await Promise.all(r), s[0];
  }
  /**
   *  Creates a new **ParamType** for %%obj%%.
   *
   *  If %%allowIndexed%% then the ``indexed`` keyword is permitted,
   *  otherwise the ``indexed`` keyword will throw an error.
   */
  static from(t, e) {
    if (Qt.isParamType(t))
      return t;
    if (typeof t == "string")
      try {
        return Qt.from(mn(t), e);
      } catch {
        g(!1, "invalid param type", "obj", t);
      }
    else if (t instanceof oe) {
      let o = "", c = "", u = null;
      He(t, bt(["tuple"])).has("tuple") || t.peekType("OPEN_PAREN") ? (c = "tuple", u = t.popParams().map((m) => Qt.from(m)), o = `tuple(${u.map((m) => m.format()).join(",")})`) : (o = Sc(t.popType("TYPE")), c = o);
      let f = null, h = null;
      for (; t.length && t.peekType("BRACKET"); ) {
        const m = t.pop();
        f = new Qt(Z, "", o, c, null, u, h, f), h = m.value, o += m.text, c = "array", u = null;
      }
      let p = null;
      if (He(t, yp).has("indexed")) {
        if (!e)
          throw new Error("");
        p = !0;
      }
      const E = t.peekType("ID") ? t.pop().text : "";
      if (t.length)
        throw new Error("leftover tokens");
      return new Qt(Z, E, o, c, p, u, h, f);
    }
    const r = t.name;
    g(!r || typeof r == "string" && r.match(yl), "invalid name", "obj.name", r);
    let s = t.indexed;
    s != null && (g(e, "parameter cannot be indexed", "obj.indexed", t.indexed), s = !!s);
    let i = t.type, a = i.match(Pp);
    if (a) {
      const o = parseInt(a[2] || "-1"), c = Qt.from({
        type: a[1],
        components: t.components
      });
      return new Qt(Z, r || "", i, "array", s, null, o, c);
    }
    if (i === "tuple" || i.startsWith(
      "tuple("
      /* fix: ) */
    ) || i.startsWith(
      "("
      /* fix: ) */
    )) {
      const o = t.components != null ? t.components.map((u) => Qt.from(u)) : null;
      return new Qt(Z, r || "", i, "tuple", s, o, null, null);
    }
    return i = Sc(t.type), new Qt(Z, r || "", i, i, s, null, null, null);
  }
  /**
   *  Returns true if %%value%% is a **ParamType**.
   */
  static isParamType(t) {
    return t && t[Ct] === Rc;
  }
};
Mr = new WeakSet(), bi = function(t, e, r, s) {
  if (this.isArray()) {
    if (!Array.isArray(e))
      throw new Error("invalid array value");
    if (this.arrayLength !== -1 && e.length !== this.arrayLength)
      throw new Error("array is wrong length");
    const a = this.arrayChildren, o = e.slice();
    o.forEach((c, u) => {
      var f;
      C(f = a, Mr, bi).call(f, t, c, r, (h) => {
        o[u] = h;
      });
    }), s(o);
    return;
  }
  if (this.isTuple()) {
    const a = this.components;
    let o;
    if (Array.isArray(e))
      o = e.slice();
    else {
      if (e == null || typeof e != "object")
        throw new Error("invalid tuple value");
      o = a.map((c) => {
        if (!c.name)
          throw new Error("cannot use object value with unnamed components");
        if (!(c.name in e))
          throw new Error(`missing value for component ${c.name}`);
        return e[c.name];
      });
    }
    if (o.length !== this.components.length)
      throw new Error("array is wrong length");
    o.forEach((c, u) => {
      var f;
      C(f = a[u], Mr, bi).call(f, t, c, r, (h) => {
        o[u] = h;
      });
    }), s(o);
    return;
  }
  const i = r(this.type, e);
  i.then ? t.push(async function() {
    s(await i);
  }()) : s(i);
};
let lt = Qt;
class Yn {
  /**
   *  @private
   */
  constructor(t, e, r) {
    /**
     *  The type of the fragment.
     */
    w(this, "type");
    /**
     *  The inputs for the fragment.
     */
    w(this, "inputs");
    ji(t, Z, "Fragment"), r = Object.freeze(r.slice()), F(this, { type: e, inputs: r });
  }
  /**
   *  Creates a new **Fragment** for %%obj%%, wich can be any supported
   *  ABI frgament type.
   */
  static from(t) {
    if (typeof t == "string") {
      try {
        Yn.from(JSON.parse(t));
      } catch {
      }
      return Yn.from(mn(t));
    }
    if (t instanceof oe)
      switch (t.peekKeyword(gl)) {
        case "constructor":
          return Fe.from(t);
        case "error":
          return Pt.from(t);
        case "event":
          return ye.from(t);
        case "fallback":
        case "receive":
          return Ie.from(t);
        case "function":
          return we.from(t);
        case "struct":
          return Jn.from(t);
      }
    else if (typeof t == "object") {
      switch (t.type) {
        case "constructor":
          return Fe.from(t);
        case "error":
          return Pt.from(t);
        case "event":
          return ye.from(t);
        case "fallback":
        case "receive":
          return Ie.from(t);
        case "function":
          return we.from(t);
        case "struct":
          return Jn.from(t);
      }
      N(!1, `unsupported type: ${t.type}`, "UNSUPPORTED_OPERATION", {
        operation: "Fragment.from"
      });
    }
    g(!1, "unsupported frgament object", "obj", t);
  }
  /**
   *  Returns true if %%value%% is a [[ConstructorFragment]].
   */
  static isConstructor(t) {
    return Fe.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is an [[ErrorFragment]].
   */
  static isError(t) {
    return Pt.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is an [[EventFragment]].
   */
  static isEvent(t) {
    return ye.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is a [[FunctionFragment]].
   */
  static isFunction(t) {
    return we.isFragment(t);
  }
  /**
   *  Returns true if %%value%% is a [[StructFragment]].
   */
  static isStruct(t) {
    return Jn.isFragment(t);
  }
}
class sa extends Yn {
  /**
   *  @private
   */
  constructor(e, r, s, i) {
    super(e, r, i);
    /**
     *  The name of the fragment.
     */
    w(this, "name");
    g(typeof s == "string" && s.match(yl), "invalid identifier", "name", s), i = Object.freeze(i.slice()), F(this, { name: s });
  }
}
function Ds(n, t) {
  return "(" + t.map((e) => e.format(n)).join(n === "full" ? ", " : ",") + ")";
}
class Pt extends sa {
  /**
   *  @private
   */
  constructor(t, e, r) {
    super(t, "error", e, r), Object.defineProperty(this, Ct, { value: vc });
  }
  /**
   *  The Custom Error selector.
   */
  get selector() {
    return zn(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this fragment as %%format%%.
   */
  format(t) {
    if (t == null && (t = "sighash"), t === "json")
      return JSON.stringify({
        type: "error",
        name: this.name,
        inputs: this.inputs.map((r) => JSON.parse(r.format(t)))
      });
    const e = [];
    return t !== "sighash" && e.push("error"), e.push(this.name + Ds(t, this.inputs)), e.join(" ");
  }
  /**
   *  Returns a new **ErrorFragment** for %%obj%%.
   */
  static from(t) {
    if (Pt.isFragment(t))
      return t;
    if (typeof t == "string")
      return Pt.from(mn(t));
    if (t instanceof oe) {
      const e = ra("error", t), r = Ge(t);
      return Wn(t), new Pt(Z, e, r);
    }
    return new Pt(Z, t.name, t.inputs ? t.inputs.map(lt.from) : []);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **ErrorFragment**.
   */
  static isFragment(t) {
    return t && t[Ct] === vc;
  }
}
class ye extends sa {
  /**
   *  @private
   */
  constructor(e, r, s, i) {
    super(e, "event", r, s);
    /**
     *  Whether this event is anonymous.
     */
    w(this, "anonymous");
    Object.defineProperty(this, Ct, { value: kc }), F(this, { anonymous: i });
  }
  /**
   *  The Event topic hash.
   */
  get topicHash() {
    return zn(this.format("sighash"));
  }
  /**
   *  Returns a string representation of this event as %%format%%.
   */
  format(e) {
    if (e == null && (e = "sighash"), e === "json")
      return JSON.stringify({
        type: "event",
        anonymous: this.anonymous,
        name: this.name,
        inputs: this.inputs.map((s) => JSON.parse(s.format(e)))
      });
    const r = [];
    return e !== "sighash" && r.push("event"), r.push(this.name + Ds(e, this.inputs)), e !== "sighash" && this.anonymous && r.push("anonymous"), r.join(" ");
  }
  /**
   *  Return the topic hash for an event with %%name%% and %%params%%.
   */
  static getTopicHash(e, r) {
    return r = (r || []).map((i) => lt.from(i)), new ye(Z, e, r, !1).topicHash;
  }
  /**
   *  Returns a new **EventFragment** for %%obj%%.
   */
  static from(e) {
    if (ye.isFragment(e))
      return e;
    if (typeof e == "string")
      try {
        return ye.from(mn(e));
      } catch {
        g(!1, "invalid event fragment", "obj", e);
      }
    else if (e instanceof oe) {
      const r = ra("event", e), s = Ge(e, !0), i = !!He(e, bt(["anonymous"])).has("anonymous");
      return Wn(e), new ye(Z, r, s, i);
    }
    return new ye(Z, e.name, e.inputs ? e.inputs.map((r) => lt.from(r, !0)) : [], !!e.anonymous);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is an
   *  **EventFragment**.
   */
  static isFragment(e) {
    return e && e[Ct] === kc;
  }
}
class Fe extends Yn {
  /**
   *  @private
   */
  constructor(e, r, s, i, a) {
    super(e, r, s);
    /**
     *  Whether the constructor can receive an endowment.
     */
    w(this, "payable");
    /**
     *  The recommended gas limit for deployment or ``null``.
     */
    w(this, "gas");
    Object.defineProperty(this, Ct, { value: Dc }), F(this, { payable: i, gas: a });
  }
  /**
   *  Returns a string representation of this constructor as %%format%%.
   */
  format(e) {
    if (N(e != null && e !== "sighash", "cannot format a constructor for sighash", "UNSUPPORTED_OPERATION", { operation: "format(sighash)" }), e === "json")
      return JSON.stringify({
        type: "constructor",
        stateMutability: this.payable ? "payable" : "undefined",
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((s) => JSON.parse(s.format(e)))
      });
    const r = [`constructor${Ds(e, this.inputs)}`];
    return this.payable && r.push("payable"), this.gas != null && r.push(`@${this.gas.toString()}`), r.join(" ");
  }
  /**
   *  Returns a new **ConstructorFragment** for %%obj%%.
   */
  static from(e) {
    if (Fe.isFragment(e))
      return e;
    if (typeof e == "string")
      try {
        return Fe.from(mn(e));
      } catch {
        g(!1, "invalid constuctor fragment", "obj", e);
      }
    else if (e instanceof oe) {
      He(e, bt(["constructor"]));
      const r = Ge(e), s = !!He(e, gp).has("payable"), i = El(e);
      return Wn(e), new Fe(Z, "constructor", r, s, i);
    }
    return new Fe(Z, "constructor", e.inputs ? e.inputs.map(lt.from) : [], !!e.payable, e.gas != null ? e.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **ConstructorFragment**.
   */
  static isFragment(e) {
    return e && e[Ct] === Dc;
  }
}
class Ie extends Yn {
  constructor(e, r, s) {
    super(e, "fallback", r);
    /**
     *  If the function can be sent value during invocation.
     */
    w(this, "payable");
    Object.defineProperty(this, Ct, { value: Uc }), F(this, { payable: s });
  }
  /**
   *  Returns a string representation of this fallback as %%format%%.
   */
  format(e) {
    const r = this.inputs.length === 0 ? "receive" : "fallback";
    if (e === "json") {
      const s = this.payable ? "payable" : "nonpayable";
      return JSON.stringify({ type: r, stateMutability: s });
    }
    return `${r}()${this.payable ? " payable" : ""}`;
  }
  /**
   *  Returns a new **FallbackFragment** for %%obj%%.
   */
  static from(e) {
    if (Ie.isFragment(e))
      return e;
    if (typeof e == "string")
      try {
        return Ie.from(mn(e));
      } catch {
        g(!1, "invalid fallback fragment", "obj", e);
      }
    else if (e instanceof oe) {
      const r = e.toString(), s = e.peekKeyword(bt(["fallback", "receive"]));
      if (g(s, "type must be fallback or receive", "obj", r), e.popKeyword(bt(["fallback", "receive"])) === "receive") {
        const c = Ge(e);
        return g(c.length === 0, "receive cannot have arguments", "obj.inputs", c), He(e, bt(["payable"])), Wn(e), new Ie(Z, [], !0);
      }
      let a = Ge(e);
      a.length ? g(a.length === 1 && a[0].type === "bytes", "invalid fallback inputs", "obj.inputs", a.map((c) => c.format("minimal")).join(", ")) : a = [lt.from("bytes")];
      const o = Al(e);
      if (g(o === "nonpayable" || o === "payable", "fallback cannot be constants", "obj.stateMutability", o), He(e, bt(["returns"])).has("returns")) {
        const c = Ge(e);
        g(c.length === 1 && c[0].type === "bytes", "invalid fallback outputs", "obj.outputs", c.map((u) => u.format("minimal")).join(", "));
      }
      return Wn(e), new Ie(Z, a, o === "payable");
    }
    if (e.type === "receive")
      return new Ie(Z, [], !0);
    if (e.type === "fallback") {
      const r = [lt.from("bytes")], s = e.stateMutability === "payable";
      return new Ie(Z, r, s);
    }
    g(!1, "invalid fallback description", "obj", e);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FallbackFragment**.
   */
  static isFragment(e) {
    return e && e[Ct] === Uc;
  }
}
class we extends sa {
  /**
   *  @private
   */
  constructor(e, r, s, i, a, o) {
    super(e, "function", r, i);
    /**
     *  If the function is constant (e.g. ``pure`` or ``view`` functions).
     */
    w(this, "constant");
    /**
     *  The returned types for the result of calling this function.
     */
    w(this, "outputs");
    /**
     *  The state mutability (e.g. ``payable``, ``nonpayable``, ``view``
     *  or ``pure``)
     */
    w(this, "stateMutability");
    /**
     *  If the function can be sent value during invocation.
     */
    w(this, "payable");
    /**
     *  The recommended gas limit to send when calling this function.
     */
    w(this, "gas");
    Object.defineProperty(this, Ct, { value: Lc }), a = Object.freeze(a.slice()), F(this, { constant: s === "view" || s === "pure", gas: o, outputs: a, payable: s === "payable", stateMutability: s });
  }
  /**
   *  The Function selector.
   */
  get selector() {
    return zn(this.format("sighash")).substring(0, 10);
  }
  /**
   *  Returns a string representation of this function as %%format%%.
   */
  format(e) {
    if (e == null && (e = "sighash"), e === "json")
      return JSON.stringify({
        type: "function",
        name: this.name,
        constant: this.constant,
        stateMutability: this.stateMutability !== "nonpayable" ? this.stateMutability : void 0,
        payable: this.payable,
        gas: this.gas != null ? this.gas : void 0,
        inputs: this.inputs.map((s) => JSON.parse(s.format(e))),
        outputs: this.outputs.map((s) => JSON.parse(s.format(e)))
      });
    const r = [];
    return e !== "sighash" && r.push("function"), r.push(this.name + Ds(e, this.inputs)), e !== "sighash" && (this.stateMutability !== "nonpayable" && r.push(this.stateMutability), this.outputs && this.outputs.length && (r.push("returns"), r.push(Ds(e, this.outputs))), this.gas != null && r.push(`@${this.gas.toString()}`)), r.join(" ");
  }
  /**
   *  Return the selector for a function with %%name%% and %%params%%.
   */
  static getSelector(e, r) {
    return r = (r || []).map((i) => lt.from(i)), new we(Z, e, "view", r, [], null).selector;
  }
  /**
   *  Returns a new **FunctionFragment** for %%obj%%.
   */
  static from(e) {
    if (we.isFragment(e))
      return e;
    if (typeof e == "string")
      try {
        return we.from(mn(e));
      } catch {
        g(!1, "invalid function fragment", "obj", e);
      }
    else if (e instanceof oe) {
      const s = ra("function", e), i = Ge(e), a = Al(e);
      let o = [];
      He(e, bt(["returns"])).has("returns") && (o = Ge(e));
      const c = El(e);
      return Wn(e), new we(Z, s, a, i, o, c);
    }
    let r = e.stateMutability;
    return r == null && (r = "payable", typeof e.constant == "boolean" ? (r = "view", e.constant || (r = "payable", typeof e.payable == "boolean" && !e.payable && (r = "nonpayable"))) : typeof e.payable == "boolean" && !e.payable && (r = "nonpayable")), new we(Z, e.name, r, e.inputs ? e.inputs.map(lt.from) : [], e.outputs ? e.outputs.map(lt.from) : [], e.gas != null ? e.gas : null);
  }
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **FunctionFragment**.
   */
  static isFragment(e) {
    return e && e[Ct] === Lc;
  }
}
class Jn extends sa {
  /**
   *  @private
   */
  constructor(t, e, r) {
    super(t, "struct", e, r), Object.defineProperty(this, Ct, { value: Fc });
  }
  /**
   *  Returns a string representation of this struct as %%format%%.
   */
  format() {
    throw new Error("@TODO");
  }
  /**
   *  Returns a new **StructFragment** for %%obj%%.
   */
  static from(t) {
    if (typeof t == "string")
      try {
        return Jn.from(mn(t));
      } catch {
        g(!1, "invalid struct fragment", "obj", t);
      }
    else if (t instanceof oe) {
      const e = ra("struct", t), r = Ge(t);
      return Wn(t), new Jn(Z, e, r);
    }
    return new Jn(Z, t.name, t.inputs ? t.inputs.map(lt.from) : []);
  }
  // @TODO: fix this return type
  /**
   *  Returns ``true`` and provides a type guard if %%value%% is a
   *  **StructFragment**.
   */
  static isFragment(t) {
    return t && t[Ct] === Fc;
  }
}
const ce = /* @__PURE__ */ new Map();
ce.set(0, "GENERIC_PANIC");
ce.set(1, "ASSERT_FALSE");
ce.set(17, "OVERFLOW");
ce.set(18, "DIVIDE_BY_ZERO");
ce.set(33, "ENUM_RANGE_ERROR");
ce.set(34, "BAD_STORAGE_DATA");
ce.set(49, "STACK_UNDERFLOW");
ce.set(50, "ARRAY_RANGE_ERROR");
ce.set(65, "OUT_OF_MEMORY");
ce.set(81, "UNINITIALIZED_FUNCTION_CALL");
const Bp = new RegExp(/^bytes([0-9]*)$/), Cp = new RegExp(/^(u?int)([0-9]*)$/);
let Na = null;
function Op(n, t, e, r) {
  let s = "missing revert data", i = null;
  const a = null;
  let o = null;
  if (e) {
    s = "execution reverted";
    const u = J(e);
    if (e = k(e), u.length === 0)
      s += " (no data present; likely require(false) occurred", i = "require(false)";
    else if (u.length % 32 !== 4)
      s += " (could not decode reason; invalid data length)";
    else if (k(u.slice(0, 4)) === "0x08c379a0")
      try {
        i = r.decode(["string"], u.slice(4))[0], o = {
          signature: "Error(string)",
          name: "Error",
          args: [i]
        }, s += `: ${JSON.stringify(i)}`;
      } catch {
        s += " (could not decode reason; invalid string data)";
      }
    else if (k(u.slice(0, 4)) === "0x4e487b71")
      try {
        const f = Number(r.decode(["uint256"], u.slice(4))[0]);
        o = {
          signature: "Panic(uint256)",
          name: "Panic",
          args: [f]
        }, i = `Panic due to ${ce.get(f) || "UNKNOWN"}(${f})`, s += `: ${i}`;
      } catch {
        s += " (could not decode panic code)";
      }
    else
      s += " (unknown custom error)";
  }
  const c = {
    to: t.to ? Q(t.to) : null,
    data: t.data || "0x"
  };
  return t.from && (c.from = Q(t.from)), nt(s, "CALL_EXCEPTION", {
    action: n,
    data: e,
    reason: i,
    transaction: c,
    invocation: a,
    revert: o
  });
}
var tn, ir;
const Vi = class Vi {
  constructor() {
    A(this, tn);
  }
  /**
   *  Get the default values for the given %%types%%.
   *
   *  For example, a ``uint`` is by default ``0`` and ``bool``
   *  is by default ``false``.
   */
  getDefaultValue(t) {
    const e = t.map((s) => C(this, tn, ir).call(this, lt.from(s)));
    return new gi(e, "_").defaultValue();
  }
  /**
   *  Encode the %%values%% as the %%types%% into ABI data.
   *
   *  @returns DataHexstring
   */
  encode(t, e) {
    nu(e.length, t.length, "types/values length mismatch");
    const r = t.map((a) => C(this, tn, ir).call(this, lt.from(a))), s = new gi(r, "_"), i = new va();
    return s.encode(i, e), i.data;
  }
  /**
   *  Decode the ABI %%data%% as the %%types%% into values.
   *
   *  If %%loose%% decoding is enabled, then strict padding is
   *  not enforced. Some older versions of Solidity incorrectly
   *  padded event data emitted from ``external`` functions.
   */
  decode(t, e, r) {
    const s = t.map((a) => C(this, tn, ir).call(this, lt.from(a)));
    return new gi(s, "_").decode(new ka(e, r));
  }
  /**
   *  Returns the shared singleton instance of a default [[AbiCoder]].
   *
   *  On the first call, the instance is created internally.
   */
  static defaultAbiCoder() {
    return Na == null && (Na = new Vi()), Na;
  }
  /**
   *  Returns an ethers-compatible [[CallExceptionError]] Error for the given
   *  result %%data%% for the [[CallExceptionAction]] %%action%% against
   *  the Transaction %%tx%%.
   */
  static getBuiltinCallException(t, e, r) {
    return Op(t, e, r, Vi.defaultAbiCoder());
  }
};
tn = new WeakSet(), ir = function(t) {
  if (t.isArray())
    return new rd(C(this, tn, ir).call(this, t.arrayChildren), t.arrayLength, t.name);
  if (t.isTuple())
    return new gi(t.components.map((r) => C(this, tn, ir).call(this, r)), t.name);
  switch (t.baseType) {
    case "address":
      return new ed(t.name);
    case "bool":
      return new sd(t.name);
    case "string":
      return new dd(t.name);
    case "bytes":
      return new id(t.name);
    case "":
      return new cd(t.name);
  }
  let e = t.type.match(Cp);
  if (e) {
    let r = parseInt(e[2] || "256");
    return g(r !== 0 && r <= 256 && r % 8 === 0, "invalid " + e[1] + " bit length", "param", t), new hd(r / 8, e[1] === "int", t.name);
  }
  if (e = t.type.match(Bp), e) {
    let r = parseInt(e[1]);
    return g(r !== 0 && r <= 32, "invalid bytes length", "param", t), new ad(r, t.name);
  }
  g(!1, "invalid type", "type", t.type);
};
let Us = Vi;
class xp {
  /**
   *  @_ignore:
   */
  constructor(t, e, r) {
    /**
     *  The matching fragment for the ``topic0``.
     */
    w(this, "fragment");
    /**
     *  The name of the Event.
     */
    w(this, "name");
    /**
     *  The full Event signature.
     */
    w(this, "signature");
    /**
     *  The topic hash for the Event.
     */
    w(this, "topic");
    /**
     *  The arguments passed into the Event with ``emit``.
     */
    w(this, "args");
    const s = t.name, i = t.format();
    F(this, {
      fragment: t,
      name: s,
      signature: i,
      topic: e,
      args: r
    });
  }
}
class Sp {
  /**
   *  @_ignore:
   */
  constructor(t, e, r, s) {
    /**
     *  The matching fragment from the transaction ``data``.
     */
    w(this, "fragment");
    /**
     *  The name of the Function from the transaction ``data``.
     */
    w(this, "name");
    /**
     *  The arguments passed to the Function from the transaction ``data``.
     */
    w(this, "args");
    /**
     *  The full Function signature from the transaction ``data``.
     */
    w(this, "signature");
    /**
     *  The selector for the Function from the transaction ``data``.
     */
    w(this, "selector");
    /**
     *  The ``value`` (in wei) from the transaction.
     */
    w(this, "value");
    const i = t.name, a = t.format();
    F(this, {
      fragment: t,
      name: i,
      args: r,
      signature: a,
      selector: e,
      value: s
    });
  }
}
class Rp {
  /**
   *  @_ignore:
   */
  constructor(t, e, r) {
    /**
     *  The matching fragment.
     */
    w(this, "fragment");
    /**
     *  The name of the Error.
     */
    w(this, "name");
    /**
     *  The arguments passed to the Error with ``revert``.
     */
    w(this, "args");
    /**
     *  The full Error signature.
     */
    w(this, "signature");
    /**
     *  The selector for the Error.
     */
    w(this, "selector");
    const s = t.name, i = t.format();
    F(this, {
      fragment: t,
      name: s,
      args: r,
      signature: i,
      selector: e
    });
  }
}
class Mc {
  /**
   *  @_ignore:
   */
  constructor(t) {
    /**
     *  The ``keccak256`` of the value logged.
     */
    w(this, "hash");
    /**
     *  @_ignore:
     */
    w(this, "_isIndexed");
    F(this, { hash: t, _isIndexed: !0 });
  }
  /**
   *  Returns ``true`` if %%value%% is an **Indexed**.
   *
   *  This provides a Type Guard for property access.
   */
  static isIndexed(t) {
    return !!(t && t._isIndexed);
  }
}
const Gc = {
  0: "generic panic",
  1: "assert(false)",
  17: "arithmetic overflow",
  18: "division or modulo by zero",
  33: "enum overflow",
  34: "invalid encoded storage byte array accessed",
  49: "out-of-bounds array access; popping on an empty array",
  50: "out-of-bounds access of an array or bytesN",
  65: "out of memory",
  81: "uninitialized function"
}, _c = {
  "0x08c379a0": {
    signature: "Error(string)",
    name: "Error",
    inputs: ["string"],
    reason: (n) => `reverted with reason string ${JSON.stringify(n)}`
  },
  "0x4e487b71": {
    signature: "Panic(uint256)",
    name: "Panic",
    inputs: ["uint256"],
    reason: (n) => {
      let t = "unknown panic code";
      return n >= 0 && n <= 255 && Gc[n.toString()] && (t = Gc[n.toString()]), `reverted with panic code 0x${n.toString(16)} (${t})`;
    }
  }
};
var fe, he, de, ft, Gr, Ii, _r, Ni;
const fr = class fr {
  /**
   *  Create a new Interface for the %%fragments%%.
   */
  constructor(t) {
    // Find a function definition by any means necessary (unless it is ambiguous)
    A(this, Gr);
    // Find an event definition by any means necessary (unless it is ambiguous)
    A(this, _r);
    /**
     *  All the Contract ABI members (i.e. methods, events, errors, etc).
     */
    w(this, "fragments");
    /**
     *  The Contract constructor.
     */
    w(this, "deploy");
    /**
     *  The Fallback method, if any.
     */
    w(this, "fallback");
    /**
     *  If receiving ether is supported.
     */
    w(this, "receive");
    A(this, fe, void 0);
    A(this, he, void 0);
    A(this, de, void 0);
    //    #structs: Map<string, StructFragment>;
    A(this, ft, void 0);
    let e = [];
    typeof t == "string" ? e = JSON.parse(t) : e = t, d(this, de, /* @__PURE__ */ new Map()), d(this, fe, /* @__PURE__ */ new Map()), d(this, he, /* @__PURE__ */ new Map());
    const r = [];
    for (const a of e)
      try {
        r.push(Yn.from(a));
      } catch (o) {
        console.log("EE", o);
      }
    F(this, {
      fragments: Object.freeze(r)
    });
    let s = null, i = !1;
    d(this, ft, this.getAbiCoder()), this.fragments.forEach((a, o) => {
      let c;
      switch (a.type) {
        case "constructor":
          if (this.deploy) {
            console.log("duplicate definition - constructor");
            return;
          }
          F(this, { deploy: a });
          return;
        case "fallback":
          a.inputs.length === 0 ? i = !0 : (g(!s || a.payable !== s.payable, "conflicting fallback fragments", `fragments[${o}]`, a), s = a, i = s.payable);
          return;
        case "function":
          c = l(this, de);
          break;
        case "event":
          c = l(this, he);
          break;
        case "error":
          c = l(this, fe);
          break;
        default:
          return;
      }
      const u = a.format();
      c.has(u) || c.set(u, a);
    }), this.deploy || F(this, {
      deploy: Fe.from("constructor()")
    }), F(this, { fallback: s, receive: i });
  }
  /**
   *  Returns the entire Human-Readable ABI, as an array of
   *  signatures, optionally as %%minimal%% strings, which
   *  removes parameter names and unneceesary spaces.
   */
  format(t) {
    const e = t ? "minimal" : "full";
    return this.fragments.map((s) => s.format(e));
  }
  /**
   *  Return the JSON-encoded ABI. This is the format Solidiy
   *  returns.
   */
  formatJson() {
    const t = this.fragments.map((e) => e.format("json"));
    return JSON.stringify(t.map((e) => JSON.parse(e)));
  }
  /**
   *  The ABI coder that will be used to encode and decode binary
   *  data.
   */
  getAbiCoder() {
    return Us.defaultAbiCoder();
  }
  /**
   *  Get the function name for %%key%%, which may be a function selector,
   *  function name or function signature that belongs to the ABI.
   */
  getFunctionName(t) {
    const e = C(this, Gr, Ii).call(this, t, null, !1);
    return g(e, "no matching function", "key", t), e.name;
  }
  /**
   *  Returns true if %%key%% (a function selector, function name or
   *  function signature) is present in the ABI.
   *
   *  In the case of a function name, the name may be ambiguous, so
   *  accessing the [[FunctionFragment]] may require refinement.
   */
  hasFunction(t) {
    return !!C(this, Gr, Ii).call(this, t, null, !1);
  }
  /**
   *  Get the [[FunctionFragment]] for %%key%%, which may be a function
   *  selector, function name or function signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple functions match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single function in
   *  the ABI, this will throw.
   */
  getFunction(t, e) {
    return C(this, Gr, Ii).call(this, t, e || null, !0);
  }
  /**
   *  Iterate over all functions, calling %%callback%%, sorted by their name.
   */
  forEachFunction(t) {
    const e = Array.from(l(this, de).keys());
    e.sort((r, s) => r.localeCompare(s));
    for (let r = 0; r < e.length; r++) {
      const s = e[r];
      t(l(this, de).get(s), r);
    }
  }
  /**
   *  Get the event name for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   */
  getEventName(t) {
    const e = C(this, _r, Ni).call(this, t, null, !1);
    return g(e, "no matching event", "key", t), e.name;
  }
  /**
   *  Returns true if %%key%% (an event topic hash, event name or
   *  event signature) is present in the ABI.
   *
   *  In the case of an event name, the name may be ambiguous, so
   *  accessing the [[EventFragment]] may require refinement.
   */
  hasEvent(t) {
    return !!C(this, _r, Ni).call(this, t, null, !1);
  }
  /**
   *  Get the [[EventFragment]] for %%key%%, which may be a topic hash,
   *  event name or event signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple events match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single event in
   *  the ABI, this will throw.
   */
  getEvent(t, e) {
    return C(this, _r, Ni).call(this, t, e || null, !0);
  }
  /**
   *  Iterate over all events, calling %%callback%%, sorted by their name.
   */
  forEachEvent(t) {
    const e = Array.from(l(this, he).keys());
    e.sort((r, s) => r.localeCompare(s));
    for (let r = 0; r < e.length; r++) {
      const s = e[r];
      t(l(this, he).get(s), r);
    }
  }
  /**
   *  Get the [[ErrorFragment]] for %%key%%, which may be an error
   *  selector, error name or error signature that belongs to the ABI.
   *
   *  If %%values%% is provided, it will use the Typed API to handle
   *  ambiguous cases where multiple errors match by name.
   *
   *  If the %%key%% and %%values%% do not refine to a single error in
   *  the ABI, this will throw.
   */
  getError(t, e) {
    if (q(t)) {
      const s = t.toLowerCase();
      if (_c[s])
        return Pt.from(_c[s].signature);
      for (const i of l(this, fe).values())
        if (s === i.selector)
          return i;
      return null;
    }
    if (t.indexOf("(") === -1) {
      const s = [];
      for (const [i, a] of l(this, fe))
        i.split(
          "("
          /* fix:) */
        )[0] === t && s.push(a);
      if (s.length === 0)
        return t === "Error" ? Pt.from("error Error(string)") : t === "Panic" ? Pt.from("error Panic(uint256)") : null;
      if (s.length > 1) {
        const i = s.map((a) => JSON.stringify(a.format())).join(", ");
        g(!1, `ambiguous error description (i.e. ${i})`, "name", t);
      }
      return s[0];
    }
    if (t = Pt.from(t).format(), t === "Error(string)")
      return Pt.from("error Error(string)");
    if (t === "Panic(uint256)")
      return Pt.from("error Panic(uint256)");
    const r = l(this, fe).get(t);
    return r || null;
  }
  /**
   *  Iterate over all errors, calling %%callback%%, sorted by their name.
   */
  forEachError(t) {
    const e = Array.from(l(this, fe).keys());
    e.sort((r, s) => r.localeCompare(s));
    for (let r = 0; r < e.length; r++) {
      const s = e[r];
      t(l(this, fe).get(s), r);
    }
  }
  // Get the 4-byte selector used by Solidity to identify a function
  /*
  getSelector(fragment: ErrorFragment | FunctionFragment): string {
      if (typeof(fragment) === "string") {
          const matches: Array<Fragment> = [ ];
  
          try { matches.push(this.getFunction(fragment)); } catch (error) { }
          try { matches.push(this.getError(<string>fragment)); } catch (_) { }
  
          if (matches.length === 0) {
              logger.throwArgumentError("unknown fragment", "key", fragment);
          } else if (matches.length > 1) {
              logger.throwArgumentError("ambiguous fragment matches function and error", "key", fragment);
          }
  
          fragment = matches[0];
      }
  
      return dataSlice(id(fragment.format()), 0, 4);
  }
      */
  // Get the 32-byte topic hash used by Solidity to identify an event
  /*
  getEventTopic(fragment: EventFragment): string {
      //if (typeof(fragment) === "string") { fragment = this.getEvent(eventFragment); }
      return id(fragment.format());
  }
  */
  _decodeParams(t, e) {
    return l(this, ft).decode(t, e);
  }
  _encodeParams(t, e) {
    return l(this, ft).encode(t, e);
  }
  /**
   *  Encodes a ``tx.data`` object for deploying the Contract with
   *  the %%values%% as the constructor arguments.
   */
  encodeDeploy(t) {
    return this._encodeParams(this.deploy.inputs, t || []);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified error (see [[getError]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeErrorResult(t, e) {
    if (typeof t == "string") {
      const r = this.getError(t);
      g(r, "unknown error", "fragment", t), t = r;
    }
    return g($(e, 0, 4) === t.selector, `data signature does not match error ${t.name}.`, "data", e), this._decodeParams(t.inputs, $(e, 4));
  }
  /**
   *  Encodes the transaction revert data for a call result that
   *  reverted from the the Contract with the sepcified %%error%%
   *  (see [[getError]] for valid values for %%fragment%%) with the %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeErrorResult(t, e) {
    if (typeof t == "string") {
      const r = this.getError(t);
      g(r, "unknown error", "fragment", t), t = r;
    }
    return rt([
      t.selector,
      this._encodeParams(t.inputs, e || [])
    ]);
  }
  /**
   *  Decodes the %%data%% from a transaction ``tx.data`` for
   *  the function specified (see [[getFunction]] for valid values
   *  for %%fragment%%).
   *
   *  Most developers should prefer the [[parseTransaction]] method
   *  instead, which will automatically detect the fragment.
   */
  decodeFunctionData(t, e) {
    if (typeof t == "string") {
      const r = this.getFunction(t);
      g(r, "unknown function", "fragment", t), t = r;
    }
    return g($(e, 0, 4) === t.selector, `data signature does not match function ${t.name}.`, "data", e), this._decodeParams(t.inputs, $(e, 4));
  }
  /**
   *  Encodes the ``tx.data`` for a transaction that calls the function
   *  specified (see [[getFunction]] for valid values for %%fragment%%) with
   *  the %%values%%.
   */
  encodeFunctionData(t, e) {
    if (typeof t == "string") {
      const r = this.getFunction(t);
      g(r, "unknown function", "fragment", t), t = r;
    }
    return rt([
      t.selector,
      this._encodeParams(t.inputs, e || [])
    ]);
  }
  /**
   *  Decodes the result %%data%% (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values for
   *  %%key%%).
   *
   *  Most developers should prefer the [[parseCallResult]] method instead,
   *  which will automatically detect a ``CALL_EXCEPTION`` and throw the
   *  corresponding error.
   */
  decodeFunctionResult(t, e) {
    if (typeof t == "string") {
      const i = this.getFunction(t);
      g(i, "unknown function", "fragment", t), t = i;
    }
    let r = "invalid length for result data";
    const s = Bt(e);
    if (s.length % 32 === 0)
      try {
        return l(this, ft).decode(t.outputs, s);
      } catch {
        r = "could not decode result data";
      }
    N(!1, r, "BAD_DATA", {
      value: k(s),
      info: { method: t.name, signature: t.format() }
    });
  }
  makeError(t, e) {
    const r = J(t, "data"), s = Us.getBuiltinCallException("call", e, r), i = "execution reverted (unknown custom error)";
    if (s.message.startsWith(i)) {
      const o = k(r.slice(0, 4)), c = this.getError(o);
      if (c)
        try {
          const u = l(this, ft).decode(c.inputs, r.slice(4));
          s.revert = {
            name: c.name,
            signature: c.format(),
            args: u
          }, s.reason = s.revert.signature, s.message = `execution reverted: ${s.reason}`;
        } catch {
          s.message = "execution reverted (coult not decode custom error)";
        }
    }
    const a = this.parseTransaction(e);
    return a && (s.invocation = {
      method: a.name,
      signature: a.signature,
      args: a.args
    }), s;
  }
  /**
   *  Encodes the result data (e.g. from an ``eth_call``) for the
   *  specified function (see [[getFunction]] for valid values
   *  for %%fragment%%) with %%values%%.
   *
   *  This is generally not used by most developers, unless trying to mock
   *  a result from a Contract.
   */
  encodeFunctionResult(t, e) {
    if (typeof t == "string") {
      const r = this.getFunction(t);
      g(r, "unknown function", "fragment", t), t = r;
    }
    return k(l(this, ft).encode(t.outputs, e || []));
  }
  /*
      spelunk(inputs: Array<ParamType>, values: ReadonlyArray<any>, processfunc: (type: string, value: any) => Promise<any>): Promise<Array<any>> {
          const promises: Array<Promise<>> = [ ];
          const process = function(type: ParamType, value: any): any {
              if (type.baseType === "array") {
                  return descend(type.child
              }
              if (type. === "address") {
              }
          };
  
          const descend = function (inputs: Array<ParamType>, values: ReadonlyArray<any>) {
              if (inputs.length !== values.length) { throw new Error("length mismatch"); }
              
          };
  
          const result: Array<any> = [ ];
          values.forEach((value, index) => {
              if (value == null) {
                  topics.push(null);
              } else if (param.baseType === "array" || param.baseType === "tuple") {
                  logger.throwArgumentError("filtering with tuples or arrays not supported", ("contract." + param.name), value);
              } else if (Array.isArray(value)) {
                  topics.push(value.map((value) => encodeTopic(param, value)));
              } else {
                  topics.push(encodeTopic(param, value));
              }
          });
      }
  */
  // Create the filter for the event with search criteria (e.g. for eth_filterLog)
  encodeFilterTopics(t, e) {
    if (typeof t == "string") {
      const i = this.getEvent(t);
      g(i, "unknown event", "eventFragment", t), t = i;
    }
    N(e.length <= t.inputs.length, `too many arguments for ${t.format()}`, "UNEXPECTED_ARGUMENT", { count: e.length, expectedCount: t.inputs.length });
    const r = [];
    t.anonymous || r.push(t.topicHash);
    const s = (i, a) => i.type === "string" ? zn(a) : i.type === "bytes" ? X(k(a)) : (i.type === "bool" && typeof a == "boolean" ? a = a ? "0x01" : "0x00" : i.type.match(/^u?int/) ? a = gn(a) : i.type.match(/^bytes/) ? a = Ef(a, 32) : i.type === "address" && l(this, ft).encode(["address"], [a]), Kn(k(a), 32));
    for (e.forEach((i, a) => {
      const o = t.inputs[a];
      if (!o.indexed) {
        g(i == null, "cannot filter non-indexed parameters; must be null", "contract." + o.name, i);
        return;
      }
      i == null ? r.push(null) : o.baseType === "array" || o.baseType === "tuple" ? g(!1, "filtering with tuples or arrays not supported", "contract." + o.name, i) : Array.isArray(i) ? r.push(i.map((c) => s(o, c))) : r.push(s(o, i));
    }); r.length && r[r.length - 1] === null; )
      r.pop();
    return r;
  }
  encodeEventLog(t, e) {
    if (typeof t == "string") {
      const a = this.getEvent(t);
      g(a, "unknown event", "eventFragment", t), t = a;
    }
    const r = [], s = [], i = [];
    return t.anonymous || r.push(t.topicHash), g(e.length === t.inputs.length, "event arguments/values mismatch", "values", e), t.inputs.forEach((a, o) => {
      const c = e[o];
      if (a.indexed)
        if (a.type === "string")
          r.push(zn(c));
        else if (a.type === "bytes")
          r.push(X(c));
        else {
          if (a.baseType === "tuple" || a.baseType === "array")
            throw new Error("not implemented");
          r.push(l(this, ft).encode([a.type], [c]));
        }
      else
        s.push(a), i.push(c);
    }), {
      data: l(this, ft).encode(s, i),
      topics: r
    };
  }
  // Decode a filter for the event and the search criteria
  decodeEventLog(t, e, r) {
    if (typeof t == "string") {
      const y = this.getEvent(t);
      g(y, "unknown event", "eventFragment", t), t = y;
    }
    if (r != null && !t.anonymous) {
      const y = t.topicHash;
      g(q(r[0], 32) && r[0].toLowerCase() === y, "fragment/topic mismatch", "topics[0]", r[0]), r = r.slice(1);
    }
    const s = [], i = [], a = [];
    t.inputs.forEach((y, E) => {
      y.indexed ? y.type === "string" || y.type === "bytes" || y.baseType === "tuple" || y.baseType === "array" ? (s.push(lt.from({ type: "bytes32", name: y.name })), a.push(!0)) : (s.push(y), a.push(!1)) : (i.push(y), a.push(!1));
    });
    const o = r != null ? l(this, ft).decode(s, rt(r)) : null, c = l(this, ft).decode(i, e, !0), u = [], f = [];
    let h = 0, p = 0;
    return t.inputs.forEach((y, E) => {
      let m = null;
      if (y.indexed)
        if (o == null)
          m = new Mc(null);
        else if (a[E])
          m = new Mc(o[p++]);
        else
          try {
            m = o[p++];
          } catch (I) {
            m = I;
          }
      else
        try {
          m = c[h++];
        } catch (I) {
          m = I;
        }
      u.push(m), f.push(y.name || null);
    }), Oi.fromItems(u, f);
  }
  /**
   *  Parses a transaction, finding the matching function and extracts
   *  the parameter values along with other useful function details.
   *
   *  If the matching function cannot be found, return null.
   */
  parseTransaction(t) {
    const e = J(t.data, "tx.data"), r = D(t.value != null ? t.value : 0, "tx.value"), s = this.getFunction(k(e.slice(0, 4)));
    if (!s)
      return null;
    const i = l(this, ft).decode(s.inputs, e.slice(4));
    return new Sp(s, s.selector, i, r);
  }
  parseCallResult(t) {
    throw new Error("@TODO");
  }
  /**
   *  Parses a receipt log, finding the matching event and extracts
   *  the parameter values along with other useful event details.
   *
   *  If the matching event cannot be found, returns null.
   */
  parseLog(t) {
    const e = this.getEvent(t.topics[0]);
    return !e || e.anonymous ? null : new xp(e, e.topicHash, this.decodeEventLog(e, t.data, t.topics));
  }
  /**
   *  Parses a revert data, finding the matching error and extracts
   *  the parameter values along with other useful error details.
   *
   *  If the matching error cannot be found, returns null.
   */
  parseError(t) {
    const e = k(t), r = this.getError($(e, 0, 4));
    if (!r)
      return null;
    const s = l(this, ft).decode(r.inputs, $(e, 4));
    return new Rp(r, r.selector, s);
  }
  /**
   *  Creates a new [[Interface]] from the ABI %%value%%.
   *
   *  The %%value%% may be provided as an existing [[Interface]] object,
   *  a JSON-encoded ABI or any Human-Readable ABI format.
   */
  static from(t) {
    return t instanceof fr ? t : typeof t == "string" ? new fr(JSON.parse(t)) : typeof t.format == "function" ? new fr(t.format("json")) : new fr(t);
  }
};
fe = new WeakMap(), he = new WeakMap(), de = new WeakMap(), ft = new WeakMap(), Gr = new WeakSet(), Ii = function(t, e, r) {
  if (q(t)) {
    const i = t.toLowerCase();
    for (const a of l(this, de).values())
      if (i === a.selector)
        return a;
    return null;
  }
  if (t.indexOf("(") === -1) {
    const i = [];
    for (const [a, o] of l(this, de))
      a.split(
        "("
        /* fix:) */
      )[0] === t && i.push(o);
    if (e) {
      const a = e.length > 0 ? e[e.length - 1] : null;
      let o = e.length, c = !0;
      gt.isTyped(a) && a.type === "overrides" && (c = !1, o--);
      for (let u = i.length - 1; u >= 0; u--) {
        const f = i[u].inputs.length;
        f !== o && (!c || f !== o - 1) && i.splice(u, 1);
      }
      for (let u = i.length - 1; u >= 0; u--) {
        const f = i[u].inputs;
        for (let h = 0; h < e.length; h++)
          if (gt.isTyped(e[h])) {
            if (h >= f.length) {
              if (e[h].type === "overrides")
                continue;
              i.splice(u, 1);
              break;
            }
            if (e[h].type !== f[h].baseType) {
              i.splice(u, 1);
              break;
            }
          }
      }
    }
    if (i.length === 1 && e && e.length !== i[0].inputs.length) {
      const a = e[e.length - 1];
      (a == null || Array.isArray(a) || typeof a != "object") && i.splice(0, 1);
    }
    if (i.length === 0)
      return null;
    if (i.length > 1 && r) {
      const a = i.map((o) => JSON.stringify(o.format())).join(", ");
      g(!1, `ambiguous function description (i.e. matches ${a})`, "key", t);
    }
    return i[0];
  }
  const s = l(this, de).get(we.from(t).format());
  return s || null;
}, _r = new WeakSet(), Ni = function(t, e, r) {
  if (q(t)) {
    const i = t.toLowerCase();
    for (const a of l(this, he).values())
      if (i === a.topicHash)
        return a;
    return null;
  }
  if (t.indexOf("(") === -1) {
    const i = [];
    for (const [a, o] of l(this, he))
      a.split(
        "("
        /* fix:) */
      )[0] === t && i.push(o);
    if (e) {
      for (let a = i.length - 1; a >= 0; a--)
        i[a].inputs.length < e.length && i.splice(a, 1);
      for (let a = i.length - 1; a >= 0; a--) {
        const o = i[a].inputs;
        for (let c = 0; c < e.length; c++)
          if (gt.isTyped(e[c]) && e[c].type !== o[c].baseType) {
            i.splice(a, 1);
            break;
          }
      }
    }
    if (i.length === 0)
      return null;
    if (i.length > 1 && r) {
      const a = i.map((o) => JSON.stringify(o.format())).join(", ");
      g(!1, `ambiguous event description (i.e. matches ${a})`, "key", t);
    }
    return i[0];
  }
  const s = l(this, he).get(ye.from(t).format());
  return s || null;
};
let za = fr;
const bl = BigInt(0);
function Ns(n) {
  return n ?? null;
}
function pt(n) {
  return n == null ? null : n.toString();
}
class Hc {
  /**
   *  Creates a new FeeData for %%gasPrice%%, %%maxFeePerGas%% and
   *  %%maxPriorityFeePerGas%%.
   */
  constructor(t, e, r) {
    /**
     *  The gas price for legacy networks.
     */
    w(this, "gasPrice");
    /**
     *  The maximum fee to pay per gas.
     *
     *  The base fee per gas is defined by the network and based on
     *  congestion, increasing the cost during times of heavy load
     *  and lowering when less busy.
     *
     *  The actual fee per gas will be the base fee for the block
     *  and the priority fee, up to the max fee per gas.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */
    w(this, "maxFeePerGas");
    /**
     *  The additional amout to pay per gas to encourage a validator
     *  to include the transaction.
     *
     *  The purpose of this is to compensate the validator for the
     *  adjusted risk for including a given transaction.
     *
     *  This will be ``null`` on legacy networks (i.e. [pre-EIP-1559](link-eip-1559))
     */
    w(this, "maxPriorityFeePerGas");
    F(this, {
      gasPrice: Ns(t),
      maxFeePerGas: Ns(e),
      maxPriorityFeePerGas: Ns(r)
    });
  }
  /**
   *  Returns a JSON-friendly value.
   */
  toJSON() {
    const { gasPrice: t, maxFeePerGas: e, maxPriorityFeePerGas: r } = this;
    return {
      _type: "FeeData",
      gasPrice: pt(t),
      maxFeePerGas: pt(e),
      maxPriorityFeePerGas: pt(r)
    };
  }
}
function Li(n) {
  const t = {};
  n.to && (t.to = n.to), n.from && (t.from = n.from), n.data && (t.data = k(n.data));
  const e = "chainId,gasLimit,gasPrice,maxFeePerGas,maxPriorityFeePerGas,value".split(/,/);
  for (const s of e)
    !(s in n) || n[s] == null || (t[s] = D(n[s], `request.${s}`));
  const r = "type,nonce".split(/,/);
  for (const s of r)
    !(s in n) || n[s] == null || (t[s] = H(n[s], `request.${s}`));
  return n.accessList && (t.accessList = Zn(n.accessList)), "blockTag" in n && (t.blockTag = n.blockTag), "enableCcipRead" in n && (t.enableCcipRead = !!n.enableCcipRead), "customData" in n && (t.customData = n.customData), t;
}
var Se;
class vp {
  /**
   *  Create a new **Block** object.
   *
   *  This should generally not be necessary as the unless implementing a
   *  low-level library.
   */
  constructor(t, e) {
    /**
     *  The provider connected to the block used to fetch additional details
     *  if necessary.
     */
    w(this, "provider");
    /**
     *  The block number, sometimes called the block height. This is a
     *  sequential number that is one higher than the parent block.
     */
    w(this, "number");
    /**
     *  The block hash.
     *
     *  This hash includes all properties, so can be safely used to identify
     *  an exact set of block properties.
     */
    w(this, "hash");
    /**
     *  The timestamp for this block, which is the number of seconds since
     *  epoch that this block was included.
     */
    w(this, "timestamp");
    /**
     *  The block hash of the parent block.
     */
    w(this, "parentHash");
    /**
     *  The nonce.
     *
     *  On legacy networks, this is the random number inserted which
     *  permitted the difficulty target to be reached.
     */
    w(this, "nonce");
    /**
     *  The difficulty target.
     *
     *  On legacy networks, this is the proof-of-work target required
     *  for a block to meet the protocol rules to be included.
     *
     *  On modern networks, this is a random number arrived at using
     *  randao.  @TODO: Find links?
     */
    w(this, "difficulty");
    /**
     *  The total gas limit for this block.
     */
    w(this, "gasLimit");
    /**
     *  The total gas used in this block.
     */
    w(this, "gasUsed");
    /**
     *  The miner coinbase address, wihch receives any subsidies for
     *  including this block.
     */
    w(this, "miner");
    /**
     *  Any extra data the validator wished to include.
     */
    w(this, "extraData");
    /**
     *  The base fee per gas that all transactions in this block were
     *  charged.
     *
     *  This adjusts after each block, depending on how congested the network
     *  is.
     */
    w(this, "baseFeePerGas");
    A(this, Se, void 0);
    d(this, Se, t.transactions.map((r) => typeof r != "string" ? new Ls(r, e) : r)), F(this, {
      provider: e,
      hash: Ns(t.hash),
      number: t.number,
      timestamp: t.timestamp,
      parentHash: t.parentHash,
      nonce: t.nonce,
      difficulty: t.difficulty,
      gasLimit: t.gasLimit,
      gasUsed: t.gasUsed,
      miner: t.miner,
      extraData: t.extraData,
      baseFeePerGas: Ns(t.baseFeePerGas)
    });
  }
  /**
   *  Returns the list of transaction hashes, in the order
   *  they were executed within the block.
   */
  get transactions() {
    return l(this, Se).map((t) => typeof t == "string" ? t : t.hash);
  }
  /**
   *  Returns the complete transactions, in the order they
   *  were executed within the block.
   *
   *  This is only available for blocks which prefetched
   *  transactions, by passing ``true`` to %%prefetchTxs%%
   *  into [[Provider-getBlock]].
   */
  get prefetchedTransactions() {
    const t = l(this, Se).slice();
    return t.length === 0 ? [] : (N(typeof t[0] == "object", "transactions were not prefetched with block request", "UNSUPPORTED_OPERATION", {
      operation: "transactionResponses()"
    }), t);
  }
  /**
   *  Returns a JSON-friendly value.
   */
  toJSON() {
    const { baseFeePerGas: t, difficulty: e, extraData: r, gasLimit: s, gasUsed: i, hash: a, miner: o, nonce: c, number: u, parentHash: f, timestamp: h, transactions: p } = this;
    return {
      _type: "Block",
      baseFeePerGas: pt(t),
      difficulty: pt(e),
      extraData: r,
      gasLimit: pt(s),
      gasUsed: pt(i),
      hash: a,
      miner: o,
      nonce: c,
      number: u,
      parentHash: f,
      timestamp: h,
      transactions: p
    };
  }
  [Symbol.iterator]() {
    let t = 0;
    const e = this.transactions;
    return {
      next: () => t < this.length ? {
        value: e[t++],
        done: !1
      } : { value: void 0, done: !0 }
    };
  }
  /**
   *  The number of transactions in this block.
   */
  get length() {
    return l(this, Se).length;
  }
  /**
   *  The [[link-js-date]] this block was included at.
   */
  get date() {
    return this.timestamp == null ? null : new Date(this.timestamp * 1e3);
  }
  /**
   *  Get the transaction at %%indexe%% within this block.
   */
  async getTransaction(t) {
    let e;
    if (typeof t == "number")
      e = l(this, Se)[t];
    else {
      const r = t.toLowerCase();
      for (const s of l(this, Se))
        if (typeof s == "string") {
          if (s !== r)
            continue;
          e = s;
          break;
        } else {
          if (s.hash === r)
            continue;
          e = s;
          break;
        }
    }
    if (e == null)
      throw new Error("no such tx");
    return typeof e == "string" ? await this.provider.getTransaction(e) : e;
  }
  /**
   *  If a **Block** was fetched with a request to include the transactions
   *  this will allow synchronous access to those transactions.
   *
   *  If the transactions were not prefetched, this will throw.
   */
  getPrefetchedTransaction(t) {
    const e = this.prefetchedTransactions;
    if (typeof t == "number")
      return e[t];
    t = t.toLowerCase();
    for (const r of e)
      if (r.hash === t)
        return r;
    g(!1, "no matching transaction", "indexOrHash", t);
  }
  /**
   *  Returns true if this block been mined. This provides a type guard
   *  for all properties on a [[MinedBlock]].
   */
  isMined() {
    return !!this.hash;
  }
  /**
   *  Returns true if this block is an [[link-eip-2930]] block.
   */
  isLondon() {
    return !!this.baseFeePerGas;
  }
  /**
   *  @_ignore:
   */
  orphanedEvent() {
    if (!this.isMined())
      throw new Error("");
    return kp(this);
  }
}
Se = new WeakMap();
class si {
  /**
   *  @_ignore:
   */
  constructor(t, e) {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    w(this, "provider");
    /**
     *  The transaction hash of the transaction this log occurred in. Use the
     *  [[Log-getTransaction]] to get the [[TransactionResponse]].
     */
    w(this, "transactionHash");
    /**
     *  The block hash of the block this log occurred in. Use the
     *  [[Log-getBlock]] to get the [[Block]].
     */
    w(this, "blockHash");
    /**
     *  The block number of the block this log occurred in. It is preferred
     *  to use the [[Block-hash]] when fetching the related [[Block]],
     *  since in the case of an orphaned block, the block at that height may
     *  have changed.
     */
    w(this, "blockNumber");
    /**
     *  If the **Log** represents a block that was removed due to an orphaned
     *  block, this will be true.
     *
     *  This can only happen within an orphan event listener.
     */
    w(this, "removed");
    /**
     *  The address of the contract that emitted this log.
     */
    w(this, "address");
    /**
     *  The data included in this log when it was emitted.
     */
    w(this, "data");
    /**
     *  The indexed topics included in this log when it was emitted.
     *
     *  All topics are included in the bloom filters, so they can be
     *  efficiently filtered using the [[Provider-getLogs]] method.
     */
    w(this, "topics");
    /**
     *  The index within the block this log occurred at. This is generally
     *  not useful to developers, but can be used with the various roots
     *  to proof inclusion within a block.
     */
    w(this, "index");
    /**
     *  The index within the transaction of this log.
     */
    w(this, "transactionIndex");
    this.provider = e;
    const r = Object.freeze(t.topics.slice());
    F(this, {
      transactionHash: t.transactionHash,
      blockHash: t.blockHash,
      blockNumber: t.blockNumber,
      removed: t.removed,
      address: t.address,
      data: t.data,
      topics: r,
      index: t.index,
      transactionIndex: t.transactionIndex
    });
  }
  /**
   *  Returns a JSON-compatible object.
   */
  toJSON() {
    const { address: t, blockHash: e, blockNumber: r, data: s, index: i, removed: a, topics: o, transactionHash: c, transactionIndex: u } = this;
    return {
      _type: "log",
      address: t,
      blockHash: e,
      blockNumber: r,
      data: s,
      index: i,
      removed: a,
      topics: o,
      transactionHash: c,
      transactionIndex: u
    };
  }
  /**
   *  Returns the block that this log occurred in.
   */
  async getBlock() {
    const t = await this.provider.getBlock(this.blockHash);
    return N(!!t, "failed to find transaction", "UNKNOWN_ERROR", {}), t;
  }
  /**
   *  Returns the transaction that this log occurred in.
   */
  async getTransaction() {
    const t = await this.provider.getTransaction(this.transactionHash);
    return N(!!t, "failed to find transaction", "UNKNOWN_ERROR", {}), t;
  }
  /**
   *  Returns the transaction receipt fot the transaction that this
   *  log occurred in.
   */
  async getTransactionReceipt() {
    const t = await this.provider.getTransactionReceipt(this.transactionHash);
    return N(!!t, "failed to find transaction receipt", "UNKNOWN_ERROR", {}), t;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return Dp(this);
  }
}
var Qs;
class Il {
  /**
   *  @_ignore:
   */
  constructor(t, e) {
    /**
     *  The provider connected to the log used to fetch additional details
     *  if necessary.
     */
    w(this, "provider");
    /**
     *  The address the transaction was sent to.
     */
    w(this, "to");
    /**
     *  The sender of the transaction.
     */
    w(this, "from");
    /**
     *  The address of the contract if the transaction was directly
     *  responsible for deploying one.
     *
     *  This is non-null **only** if the ``to`` is empty and the ``data``
     *  was successfully executed as initcode.
     */
    w(this, "contractAddress");
    /**
     *  The transaction hash.
     */
    w(this, "hash");
    /**
     *  The index of this transaction within the block transactions.
     */
    w(this, "index");
    /**
     *  The block hash of the [[Block]] this transaction was included in.
     */
    w(this, "blockHash");
    /**
     *  The block number of the [[Block]] this transaction was included in.
     */
    w(this, "blockNumber");
    /**
     *  The bloom filter bytes that represent all logs that occurred within
     *  this transaction. This is generally not useful for most developers,
     *  but can be used to validate the included logs.
     */
    w(this, "logsBloom");
    /**
     *  The actual amount of gas used by this transaction.
     *
     *  When creating a transaction, the amount of gas that will be used can
     *  only be approximated, but the sender must pay the gas fee for the
     *  entire gas limit. After the transaction, the difference is refunded.
     */
    w(this, "gasUsed");
    /**
     *  The amount of gas used by all transactions within the block for this
     *  and all transactions with a lower ``index``.
     *
     *  This is generally not useful for developers but can be used to
     *  validate certain aspects of execution.
     */
    w(this, "cumulativeGasUsed");
    /**
     *  The actual gas price used during execution.
     *
     *  Due to the complexity of [[link-eip-1559]] this value can only
     *  be caluclated after the transaction has been mined, snce the base
     *  fee is protocol-enforced.
     */
    w(this, "gasPrice");
    /**
     *  The [[link-eip-2718]] transaction type.
     */
    w(this, "type");
    //readonly byzantium!: boolean;
    /**
     *  The status of this transaction, indicating success (i.e. ``1``) or
     *  a revert (i.e. ``0``).
     *
     *  This is available in post-byzantium blocks, but some backends may
     *  backfill this value.
     */
    w(this, "status");
    /**
     *  The root hash of this transaction.
     *
     *  This is no present and was only included in pre-byzantium blocks, but
     *  could be used to validate certain parts of the receipt.
     */
    w(this, "root");
    A(this, Qs, void 0);
    d(this, Qs, Object.freeze(t.logs.map((s) => new si(s, e))));
    let r = bl;
    t.effectiveGasPrice != null ? r = t.effectiveGasPrice : t.gasPrice != null && (r = t.gasPrice), F(this, {
      provider: e,
      to: t.to,
      from: t.from,
      contractAddress: t.contractAddress,
      hash: t.hash,
      index: t.index,
      blockHash: t.blockHash,
      blockNumber: t.blockNumber,
      logsBloom: t.logsBloom,
      gasUsed: t.gasUsed,
      cumulativeGasUsed: t.cumulativeGasUsed,
      gasPrice: r,
      type: t.type,
      //byzantium: tx.byzantium,
      status: t.status,
      root: t.root
    });
  }
  /**
   *  The logs for this transaction.
   */
  get logs() {
    return l(this, Qs);
  }
  /**
   *  Returns a JSON-compatible representation.
   */
  toJSON() {
    const {
      to: t,
      from: e,
      contractAddress: r,
      hash: s,
      index: i,
      blockHash: a,
      blockNumber: o,
      logsBloom: c,
      logs: u,
      //byzantium, 
      status: f,
      root: h
    } = this;
    return {
      _type: "TransactionReceipt",
      blockHash: a,
      blockNumber: o,
      //byzantium, 
      contractAddress: r,
      cumulativeGasUsed: pt(this.cumulativeGasUsed),
      from: e,
      gasPrice: pt(this.gasPrice),
      gasUsed: pt(this.gasUsed),
      hash: s,
      index: i,
      logs: u,
      logsBloom: c,
      root: h,
      status: f,
      to: t
    };
  }
  /**
   *  @_ignore:
   */
  get length() {
    return this.logs.length;
  }
  [Symbol.iterator]() {
    let t = 0;
    return {
      next: () => t < this.length ? { value: this.logs[t++], done: !1 } : { value: void 0, done: !0 }
    };
  }
  /**
   *  The total fee for this transaction, in wei.
   */
  get fee() {
    return this.gasUsed * this.gasPrice;
  }
  /**
   *  Resolves to the block this transaction occurred in.
   */
  async getBlock() {
    const t = await this.provider.getBlock(this.blockHash);
    if (t == null)
      throw new Error("TODO");
    return t;
  }
  /**
   *  Resolves to the transaction this transaction occurred in.
   */
  async getTransaction() {
    const t = await this.provider.getTransaction(this.hash);
    if (t == null)
      throw new Error("TODO");
    return t;
  }
  /**
   *  Resolves to the return value of the execution of this transaction.
   *
   *  Support for this feature is limited, as it requires an archive node
   *  with the ``debug_`` or ``trace_`` API enabled.
   */
  async getResult() {
    return await this.provider.getTransactionResult(this.hash);
  }
  /**
   *  Resolves to the number of confirmations this transaction has.
   */
  async confirmations() {
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  @_ignore:
   */
  removedEvent() {
    return Tl(this);
  }
  /**
   *  @_ignore:
   */
  reorderedEvent(t) {
    return N(!t || t.isMined(), "unmined 'other' transction cannot be orphaned", "UNSUPPORTED_OPERATION", { operation: "reorderedEvent(other)" }), Nl(this, t);
  }
}
Qs = new WeakMap();
var en;
const Mo = class Mo {
  /**
   *  @_ignore:
   */
  constructor(t, e) {
    /**
     *  The provider this is connected to, which will influence how its
     *  methods will resolve its async inspection methods.
     */
    w(this, "provider");
    /**
     *  The block number of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    w(this, "blockNumber");
    /**
     *  The blockHash of the block that this transaction was included in.
     *
     *  This is ``null`` for pending transactions.
     */
    w(this, "blockHash");
    /**
     *  The index within the block that this transaction resides at.
     */
    w(this, "index");
    /**
     *  The transaction hash.
     */
    w(this, "hash");
    /**
     *  The [[link-eip-2718]] transaction envelope type. This is
     *  ``0`` for legacy transactions types.
     */
    w(this, "type");
    /**
     *  The receiver of this transaction.
     *
     *  If ``null``, then the transaction is an initcode transaction.
     *  This means the result of executing the [[data]] will be deployed
     *  as a new contract on chain (assuming it does not revert) and the
     *  address may be computed using [[getCreateAddress]].
     */
    w(this, "to");
    /**
     *  The sender of this transaction. It is implicitly computed
     *  from the transaction pre-image hash (as the digest) and the
     *  [[signature]] using ecrecover.
     */
    w(this, "from");
    /**
     *  The nonce, which is used to prevent replay attacks and offer
     *  a method to ensure transactions from a given sender are explicitly
     *  ordered.
     *
     *  When sending a transaction, this must be equal to the number of
     *  transactions ever sent by [[from]].
     */
    w(this, "nonce");
    /**
     *  The maximum units of gas this transaction can consume. If execution
     *  exceeds this, the entries transaction is reverted and the sender
     *  is charged for the full amount, despite not state changes being made.
     */
    w(this, "gasLimit");
    /**
     *  The gas price can have various values, depending on the network.
     *
     *  In modern networks, for transactions that are included this is
     *  the //effective gas price// (the fee per gas that was actually
     *  charged), while for transactions that have not been included yet
     *  is the [[maxFeePerGas]].
     *
     *  For legacy transactions, or transactions on legacy networks, this
     *  is the fee that will be charged per unit of gas the transaction
     *  consumes.
     */
    w(this, "gasPrice");
    /**
     *  The maximum priority fee (per unit of gas) to allow a
     *  validator to charge the sender. This is inclusive of the
     *  [[maxFeeFeePerGas]].
     */
    w(this, "maxPriorityFeePerGas");
    /**
     *  The maximum fee (per unit of gas) to allow this transaction
     *  to charge the sender.
     */
    w(this, "maxFeePerGas");
    /**
     *  The data.
     */
    w(this, "data");
    /**
     *  The value, in wei. Use [[formatEther]] to format this value
     *  as ether.
     */
    w(this, "value");
    /**
     *  The chain ID.
     */
    w(this, "chainId");
    /**
     *  The signature.
     */
    w(this, "signature");
    /**
     *  The [[link-eip-2930]] access list for transaction types that
     *  support it, otherwise ``null``.
     */
    w(this, "accessList");
    A(this, en, void 0);
    this.provider = e, this.blockNumber = t.blockNumber != null ? t.blockNumber : null, this.blockHash = t.blockHash != null ? t.blockHash : null, this.hash = t.hash, this.index = t.index, this.type = t.type, this.from = t.from, this.to = t.to || null, this.gasLimit = t.gasLimit, this.nonce = t.nonce, this.data = t.data, this.value = t.value, this.gasPrice = t.gasPrice, this.maxPriorityFeePerGas = t.maxPriorityFeePerGas != null ? t.maxPriorityFeePerGas : null, this.maxFeePerGas = t.maxFeePerGas != null ? t.maxFeePerGas : null, this.chainId = t.chainId, this.signature = t.signature, this.accessList = t.accessList != null ? t.accessList : null, d(this, en, -1);
  }
  /**
   *  Returns a JSON-compatible representation of this transaction.
   */
  toJSON() {
    const { blockNumber: t, blockHash: e, index: r, hash: s, type: i, to: a, from: o, nonce: c, data: u, signature: f, accessList: h } = this;
    return {
      _type: "TransactionReceipt",
      accessList: h,
      blockNumber: t,
      blockHash: e,
      chainId: pt(this.chainId),
      data: u,
      from: o,
      gasLimit: pt(this.gasLimit),
      gasPrice: pt(this.gasPrice),
      hash: s,
      maxFeePerGas: pt(this.maxFeePerGas),
      maxPriorityFeePerGas: pt(this.maxPriorityFeePerGas),
      nonce: c,
      signature: f,
      to: a,
      index: r,
      type: i,
      value: pt(this.value)
    };
  }
  /**
   *  Resolves to the Block that this transaction was included in.
   *
   *  This will return null if the transaction has not been included yet.
   */
  async getBlock() {
    let t = this.blockNumber;
    if (t == null) {
      const r = await this.getTransaction();
      r && (t = r.blockNumber);
    }
    if (t == null)
      return null;
    const e = this.provider.getBlock(t);
    if (e == null)
      throw new Error("TODO");
    return e;
  }
  /**
   *  Resolves to this transaction being re-requested from the
   *  provider. This can be used if you have an unmined transaction
   *  and wish to get an up-to-date populated instance.
   */
  async getTransaction() {
    return this.provider.getTransaction(this.hash);
  }
  /**
   *  Resolve to the number of confirmations this transaction has.
   */
  async confirmations() {
    if (this.blockNumber == null) {
      const { tx: e, blockNumber: r } = await yt({
        tx: this.getTransaction(),
        blockNumber: this.provider.getBlockNumber()
      });
      return e == null || e.blockNumber == null ? 0 : r - e.blockNumber + 1;
    }
    return await this.provider.getBlockNumber() - this.blockNumber + 1;
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(t, e) {
    const r = t ?? 1, s = e ?? 0;
    let i = l(this, en), a = -1, o = i === -1;
    const c = async () => {
      if (o)
        return null;
      const { blockNumber: p, nonce: y } = await yt({
        blockNumber: this.provider.getBlockNumber(),
        nonce: this.provider.getTransactionCount(this.from)
      });
      if (y < this.nonce) {
        i = p;
        return;
      }
      if (o)
        return null;
      const E = await this.getTransaction();
      if (!(E && E.blockNumber != null))
        for (a === -1 && (a = i - 3, a < l(this, en) && (a = l(this, en))); a <= p; ) {
          if (o)
            return null;
          const m = await this.provider.getBlock(a, !0);
          if (m == null)
            return;
          for (const I of m)
            if (I === this.hash)
              return;
          for (let I = 0; I < m.length; I++) {
            const b = await m.getTransaction(I);
            if (b.from === this.from && b.nonce === this.nonce) {
              if (o)
                return null;
              const T = await this.provider.getTransactionReceipt(b.hash);
              if (T == null || p - T.blockNumber + 1 < r)
                return;
              let O = "replaced";
              b.data === this.data && b.to === this.to && b.value === this.value ? O = "repriced" : b.data === "0x" && b.from === b.to && b.value === bl && (O = "cancelled"), N(!1, "transaction was replaced", "TRANSACTION_REPLACED", {
                cancelled: O === "replaced" || O === "cancelled",
                reason: O,
                replacement: b.replaceableTransaction(i),
                hash: b.hash,
                receipt: T
              });
            }
          }
          a++;
        }
    }, u = (p) => {
      if (p == null || p.status !== 0)
        return p;
      N(!1, "transaction execution reverted", "CALL_EXCEPTION", {
        action: "sendTransaction",
        data: null,
        reason: null,
        invocation: null,
        revert: null,
        transaction: {
          to: p.to,
          from: p.from,
          data: ""
          // @TODO: in v7, split out sendTransaction properties
        },
        receipt: p
      });
    }, f = await this.provider.getTransactionReceipt(this.hash);
    if (r === 0)
      return u(f);
    if (f) {
      if (await f.confirmations() >= r)
        return u(f);
    } else if (await c(), r === 0)
      return null;
    return await new Promise((p, y) => {
      const E = [], m = () => {
        E.forEach((b) => b());
      };
      if (E.push(() => {
        o = !0;
      }), s > 0) {
        const b = setTimeout(() => {
          m(), y(nt("wait for transaction timeout", "TIMEOUT"));
        }, s);
        E.push(() => {
          clearTimeout(b);
        });
      }
      const I = async (b) => {
        if (await b.confirmations() >= r) {
          m();
          try {
            p(u(b));
          } catch (T) {
            y(T);
          }
        }
      };
      if (E.push(() => {
        this.provider.off(this.hash, I);
      }), this.provider.on(this.hash, I), i >= 0) {
        const b = async () => {
          try {
            await c();
          } catch (T) {
            if (jt(T, "TRANSACTION_REPLACED")) {
              m(), y(T);
              return;
            }
          }
          o || this.provider.once("block", b);
        };
        E.push(() => {
          this.provider.off("block", b);
        }), this.provider.once("block", b);
      }
    });
  }
  /**
   *  Returns ``true`` if this transaction has been included.
   *
   *  This is effective only as of the time the TransactionResponse
   *  was instantiated. To get up-to-date information, use
   *  [[getTransaction]].
   *
   *  This provides a Type Guard that this transaction will have
   *  non-null property values for properties that are null for
   *  unmined transactions.
   */
  isMined() {
    return this.blockHash != null;
  }
  /**
   *  Returns true if the transaction is a legacy (i.e. ``type == 0``)
   *  transaction.
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLegacy() {
    return this.type === 0;
  }
  /**
   *  Returns true if the transaction is a Berlin (i.e. ``type == 1``)
   *  transaction. See [[link-eip-2070]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isBerlin() {
    return this.type === 1;
  }
  /**
   *  Returns true if the transaction is a London (i.e. ``type == 2``)
   *  transaction. See [[link-eip-1559]].
   *
   *  This provides a Type Guard that this transaction will have
   *  the ``null``-ness for hardfork-specific properties set correctly.
   */
  isLondon() {
    return this.type === 2;
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that evict this transaction.
   */
  removedEvent() {
    return N(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), Tl(this);
  }
  /**
   *  Returns a filter which can be used to listen for orphan events
   *  that re-order this event against %%other%%.
   */
  reorderedEvent(t) {
    return N(this.isMined(), "unmined transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), N(!t || t.isMined(), "unmined 'other' transaction canot be orphaned", "UNSUPPORTED_OPERATION", { operation: "removeEvent()" }), Nl(this, t);
  }
  /**
   *  Returns a new TransactionResponse instance which has the ability to
   *  detect (and throw an error) if the transaction is replaced, which
   *  will begin scanning at %%startBlock%%.
   *
   *  This should generally not be used by developers and is intended
   *  primarily for internal use. Setting an incorrect %%startBlock%% can
   *  have devastating performance consequences if used incorrectly.
   */
  replaceableTransaction(t) {
    g(Number.isInteger(t) && t >= 0, "invalid startBlock", "startBlock", t);
    const e = new Mo(this, this.provider);
    return d(e, en, t), e;
  }
};
en = new WeakMap();
let Ls = Mo;
function kp(n) {
  return { orphan: "drop-block", hash: n.hash, number: n.number };
}
function Nl(n, t) {
  return { orphan: "reorder-transaction", tx: n, other: t };
}
function Tl(n) {
  return { orphan: "drop-transaction", tx: n };
}
function Dp(n) {
  return { orphan: "drop-log", log: {
    transactionHash: n.transactionHash,
    blockHash: n.blockHash,
    blockNumber: n.blockNumber,
    address: n.address,
    data: n.data,
    topics: Object.freeze(n.topics.slice()),
    index: n.index
  } };
}
class Bo extends si {
  /**
   * @_ignore:
   */
  constructor(e, r, s) {
    super(e, e.provider);
    /**
     *  The Contract Interface.
     */
    w(this, "interface");
    /**
     *  The matching event.
     */
    w(this, "fragment");
    /**
     *  The parsed arguments passed to the event by ``emit``.
     */
    w(this, "args");
    const i = r.decodeEventLog(s, e.data, e.topics);
    F(this, { args: i, fragment: s, interface: r });
  }
  /**
   *  The name of the event.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The signature of the event.
   */
  get eventSignature() {
    return this.fragment.format();
  }
}
class Pl extends si {
  /**
   * @_ignore:
   */
  constructor(e, r) {
    super(e, e.provider);
    /**
     *  The error encounted when trying to decode the log.
     */
    w(this, "error");
    F(this, { error: r });
  }
}
var Hr;
class Up extends Il {
  /**
   *  @_ignore:
   */
  constructor(e, r, s) {
    super(s, r);
    A(this, Hr, void 0);
    d(this, Hr, e);
  }
  /**
   *  The parsed logs for any [[Log]] which has a matching event in the
   *  Contract ABI.
   */
  get logs() {
    return super.logs.map((e) => {
      const r = e.topics.length ? l(this, Hr).getEvent(e.topics[0]) : null;
      if (r)
        try {
          return new Bo(e, l(this, Hr), r);
        } catch (s) {
          return new Pl(e, s);
        }
      return e;
    });
  }
}
Hr = new WeakMap();
var Vs;
class Co extends Ls {
  /**
   *  @_ignore:
   */
  constructor(e, r, s) {
    super(s, r);
    A(this, Vs, void 0);
    d(this, Vs, e);
  }
  /**
   *  Resolves once this transaction has been mined and has
   *  %%confirms%% blocks including it (default: ``1``) with an
   *  optional %%timeout%%.
   *
   *  This can resolve to ``null`` only if %%confirms%% is ``0``
   *  and the transaction has not been mined, otherwise this will
   *  wait until enough confirmations have completed.
   */
  async wait(e) {
    const r = await super.wait(e);
    return r == null ? null : new Up(l(this, Vs), this.provider, r);
  }
}
Vs = new WeakMap();
class Bl extends au {
  /**
   *  @_event:
   */
  constructor(e, r, s, i) {
    super(e, r, s);
    /**
     *  The log with no matching events.
     */
    w(this, "log");
    F(this, { log: i });
  }
  /**
   *  Resolves to the block the event occured in.
   */
  async getBlock() {
    return await this.log.getBlock();
  }
  /**
   *  Resolves to the transaction the event occured in.
   */
  async getTransaction() {
    return await this.log.getTransaction();
  }
  /**
   *  Resolves to the transaction receipt the event occured in.
   */
  async getTransactionReceipt() {
    return await this.log.getTransactionReceipt();
  }
}
class Lp extends Bl {
  /**
   *  @_ignore:
   */
  constructor(t, e, r, s, i) {
    super(t, e, r, new Bo(i, t.interface, s));
    const a = t.interface.decodeEventLog(s, this.log.data, this.log.topics);
    F(this, { args: a, fragment: s });
  }
  /**
   *  The event name.
   */
  get eventName() {
    return this.fragment.name;
  }
  /**
   *  The event signature.
   */
  get eventSignature() {
    return this.fragment.format();
  }
}
const Qc = BigInt(0);
function Cl(n) {
  return n && typeof n.call == "function";
}
function Ol(n) {
  return n && typeof n.estimateGas == "function";
}
function ia(n) {
  return n && typeof n.resolveName == "function";
}
function xl(n) {
  return n && typeof n.sendTransaction == "function";
}
function Sl(n) {
  if (n != null) {
    if (ia(n))
      return n;
    if (n.provider)
      return n.provider;
  }
}
var Js;
class Fp {
  constructor(t, e, r) {
    A(this, Js, void 0);
    w(this, "fragment");
    if (F(this, { fragment: e }), e.inputs.length < r.length)
      throw new Error("too many arguments");
    const s = jn(t.runner, "resolveName"), i = ia(s) ? s : null;
    d(this, Js, async function() {
      const a = await Promise.all(e.inputs.map((o, c) => r[c] == null ? null : o.walkAsync(r[c], (f, h) => f === "address" ? Array.isArray(h) ? Promise.all(h.map((p) => Et(p, i))) : Et(h, i) : h)));
      return t.interface.encodeFilterTopics(e, a);
    }());
  }
  getTopicFilter() {
    return l(this, Js);
  }
}
Js = new WeakMap();
function jn(n, t) {
  return n == null ? null : typeof n[t] == "function" ? n : n.provider && typeof n.provider[t] == "function" ? n.provider : null;
}
function Nn(n) {
  return n == null ? null : n.provider || null;
}
async function Rl(n, t) {
  const e = gt.dereference(n, "overrides");
  g(typeof e == "object", "invalid overrides parameter", "overrides", n);
  const r = Li(e);
  return g(r.to == null || (t || []).indexOf("to") >= 0, "cannot override to", "overrides.to", r.to), g(r.data == null || (t || []).indexOf("data") >= 0, "cannot override data", "overrides.data", r.data), r.from && (r.from = r.from), r;
}
async function Mp(n, t, e) {
  const r = jn(n, "resolveName"), s = ia(r) ? r : null;
  return await Promise.all(t.map((i, a) => i.walkAsync(e[a], (o, c) => (c = gt.dereference(c, o), o === "address" ? Et(c, s) : c))));
}
function Gp(n) {
  const t = async function(a) {
    const o = await Rl(a, ["data"]);
    o.to = await n.getAddress(), o.from && (o.from = await Et(o.from, Sl(n.runner)));
    const c = n.interface, u = D(o.value || Qc, "overrides.value") === Qc, f = (o.data || "0x") === "0x";
    c.fallback && !c.fallback.payable && c.receive && !f && !u && g(!1, "cannot send data to receive or send value to non-payable fallback", "overrides", a), g(c.fallback || f, "cannot send data to receive-only contract", "overrides.data", o.data);
    const h = c.receive || c.fallback && c.fallback.payable;
    return g(h || u, "cannot send value to non-payable fallback", "overrides.value", o.value), g(c.fallback || f, "cannot send data to receive-only contract", "overrides.data", o.data), o;
  }, e = async function(a) {
    const o = jn(n.runner, "call");
    N(Cl(o), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const c = await t(a);
    try {
      return await o.call(c);
    } catch (u) {
      throw uo(u) && u.data ? n.interface.makeError(u.data, c) : u;
    }
  }, r = async function(a) {
    const o = n.runner;
    N(xl(o), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const c = await o.sendTransaction(await t(a)), u = Nn(n.runner);
    return new Co(n.interface, u, c);
  }, s = async function(a) {
    const o = jn(n.runner, "estimateGas");
    return N(Ol(o), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" }), await o.estimateGas(await t(a));
  }, i = async (a) => await r(a);
  return F(i, {
    _contract: n,
    estimateGas: s,
    populateTransaction: t,
    send: r,
    staticCall: e
  }), i;
}
function _p(n, t) {
  const e = function(...u) {
    const f = n.interface.getFunction(t, u);
    return N(f, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key: t, args: u }
    }), f;
  }, r = async function(...u) {
    const f = e(...u);
    let h = {};
    if (f.inputs.length + 1 === u.length && (h = await Rl(u.pop()), h.from && (h.from = await Et(h.from, Sl(n.runner)))), f.inputs.length !== u.length)
      throw new Error("internal error: fragment inputs doesn't match arguments; should not happen");
    const p = await Mp(n.runner, f.inputs, u);
    return Object.assign({}, h, await yt({
      to: n.getAddress(),
      data: n.interface.encodeFunctionData(f, p)
    }));
  }, s = async function(...u) {
    const f = await o(...u);
    return f.length === 1 ? f[0] : f;
  }, i = async function(...u) {
    const f = n.runner;
    N(xl(f), "contract runner does not support sending transactions", "UNSUPPORTED_OPERATION", { operation: "sendTransaction" });
    const h = await f.sendTransaction(await r(...u)), p = Nn(n.runner);
    return new Co(n.interface, p, h);
  }, a = async function(...u) {
    const f = jn(n.runner, "estimateGas");
    return N(Ol(f), "contract runner does not support gas estimation", "UNSUPPORTED_OPERATION", { operation: "estimateGas" }), await f.estimateGas(await r(...u));
  }, o = async function(...u) {
    const f = jn(n.runner, "call");
    N(Cl(f), "contract runner does not support calling", "UNSUPPORTED_OPERATION", { operation: "call" });
    const h = await r(...u);
    let p = "0x";
    try {
      p = await f.call(h);
    } catch (E) {
      throw uo(E) && E.data ? n.interface.makeError(E.data, h) : E;
    }
    const y = e(...u);
    return n.interface.decodeFunctionResult(y, p);
  }, c = async (...u) => e(...u).constant ? await s(...u) : await i(...u);
  return F(c, {
    name: n.interface.getFunctionName(t),
    _contract: n,
    _key: t,
    getFragment: e,
    estimateGas: a,
    populateTransaction: r,
    send: i,
    staticCall: s,
    staticCallResult: o
  }), Object.defineProperty(c, "fragment", {
    configurable: !1,
    enumerable: !0,
    get: () => {
      const u = n.interface.getFunction(t);
      return N(u, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key: t }
      }), u;
    }
  }), c;
}
function Hp(n, t) {
  const e = function(...s) {
    const i = n.interface.getEvent(t, s);
    return N(i, "no matching fragment", "UNSUPPORTED_OPERATION", {
      operation: "fragment",
      info: { key: t, args: s }
    }), i;
  }, r = function(...s) {
    return new Fp(n, e(...s), s);
  };
  return F(r, {
    name: n.interface.getEventName(t),
    _contract: n,
    _key: t,
    getFragment: e
  }), Object.defineProperty(r, "fragment", {
    configurable: !1,
    enumerable: !0,
    get: () => {
      const s = n.interface.getEvent(t);
      return N(s, "no matching fragment", "UNSUPPORTED_OPERATION", {
        operation: "fragment",
        info: { key: t }
      }), s;
    }
  }), r;
}
const Fi = Symbol.for("_ethersInternal_contract"), vl = /* @__PURE__ */ new WeakMap();
function Qp(n, t) {
  vl.set(n[Fi], t);
}
function Dt(n) {
  return vl.get(n[Fi]);
}
function Vp(n) {
  return n && typeof n == "object" && "getTopicFilter" in n && typeof n.getTopicFilter == "function" && n.fragment;
}
async function Oo(n, t) {
  let e, r = null;
  if (Array.isArray(t)) {
    const i = function(a) {
      if (q(a, 32))
        return a;
      const o = n.interface.getEvent(a);
      return g(o, "unknown fragment", "name", a), o.topicHash;
    };
    e = t.map((a) => a == null ? null : Array.isArray(a) ? a.map(i) : i(a));
  } else
    t === "*" ? e = [null] : typeof t == "string" ? q(t, 32) ? e = [t] : (r = n.interface.getEvent(t), g(r, "unknown fragment", "event", t), e = [r.topicHash]) : Vp(t) ? e = await t.getTopicFilter() : "fragment" in t ? (r = t.fragment, e = [r.topicHash]) : g(!1, "unknown event name", "event", t);
  e = e.map((i) => {
    if (i == null)
      return null;
    if (Array.isArray(i)) {
      const a = Array.from(new Set(i.map((o) => o.toLowerCase())).values());
      return a.length === 1 ? a[0] : (a.sort(), a);
    }
    return i.toLowerCase();
  });
  const s = e.map((i) => i == null ? "null" : Array.isArray(i) ? i.join("|") : i).join("&");
  return { fragment: r, tag: s, topics: e };
}
async function As(n, t) {
  const { subs: e } = Dt(n);
  return e.get((await Oo(n, t)).tag) || null;
}
async function Vc(n, t, e) {
  const r = Nn(n.runner);
  N(r, "contract runner does not support subscribing", "UNSUPPORTED_OPERATION", { operation: t });
  const { fragment: s, tag: i, topics: a } = await Oo(n, e), { addr: o, subs: c } = Dt(n);
  let u = c.get(i);
  if (!u) {
    const h = { address: o || n, topics: a }, p = (I) => {
      let b = s;
      if (b == null)
        try {
          b = n.interface.getEvent(I.topics[0]);
        } catch {
        }
      if (b) {
        const T = b, O = s ? n.interface.decodeEventLog(s, I.data, I.topics) : [];
        Ya(n, e, O, (v) => new Lp(n, v, e, T, I));
      } else
        Ya(n, e, [], (T) => new Bl(n, T, e, I));
    };
    let y = [];
    u = { tag: i, listeners: [], start: () => {
      y.length || y.push(r.on(h, p));
    }, stop: async () => {
      if (y.length == 0)
        return;
      let I = y;
      y = [], await Promise.all(I), r.off(h, p);
    } }, c.set(i, u);
  }
  return u;
}
let Wa = Promise.resolve();
async function Jp(n, t, e, r) {
  await Wa;
  const s = await As(n, t);
  if (!s)
    return !1;
  const i = s.listeners.length;
  return s.listeners = s.listeners.filter(({ listener: a, once: o }) => {
    const c = Array.from(e);
    r && c.push(r(o ? null : a));
    try {
      a.call(n, ...c);
    } catch {
    }
    return !o;
  }), s.listeners.length === 0 && (s.stop(), Dt(n).subs.delete(s.tag)), i > 0;
}
async function Ya(n, t, e, r) {
  try {
    await Wa;
  } catch {
  }
  const s = Jp(n, t, e, r);
  return Wa = s, await s;
}
const mi = ["then"];
var $g;
const Bs = class Bs {
  /**
   *  Creates a new contract connected to %%target%% with the %%abi%% and
   *  optionally connected to a %%runner%% to perform operations on behalf
   *  of.
   */
  constructor(t, e, r, s) {
    /**
     *  The target to connect to.
     *
     *  This can be an address, ENS name or any [[Addressable]], such as
     *  another contract. To get the resovled address, use the ``getAddress``
     *  method.
     */
    w(this, "target");
    /**
     *  The contract Interface.
     */
    w(this, "interface");
    /**
     *  The connected runner. This is generally a [[Provider]] or a
     *  [[Signer]], which dictates what operations are supported.
     *
     *  For example, a **Contract** connected to a [[Provider]] may
     *  only execute read-only operations.
     */
    w(this, "runner");
    /**
     *  All the Events available on this contract.
     */
    w(this, "filters");
    /**
     *  @_ignore:
     */
    w(this, $g);
    /**
     *  The fallback or receive function if any.
     */
    w(this, "fallback");
    g(typeof t == "string" || Du(t), "invalid value for Contract target", "target", t), r == null && (r = null);
    const i = za.from(e);
    F(this, { target: t, runner: r, interface: i }), Object.defineProperty(this, Fi, { value: {} });
    let a, o = null, c = null;
    if (s) {
      const h = Nn(r);
      c = new Co(this.interface, h, s);
    }
    let u = /* @__PURE__ */ new Map();
    if (typeof t == "string")
      if (q(t))
        o = t, a = Promise.resolve(t);
      else {
        const h = jn(r, "resolveName");
        if (!ia(h))
          throw nt("contract runner does not support name resolution", "UNSUPPORTED_OPERATION", {
            operation: "resolveName"
          });
        a = h.resolveName(t).then((p) => {
          if (p == null)
            throw nt("an ENS name used for a contract target must be correctly configured", "UNCONFIGURED_NAME", {
              value: t
            });
          return Dt(this).addr = p, p;
        });
      }
    else
      a = t.getAddress().then((h) => {
        if (h == null)
          throw new Error("TODO");
        return Dt(this).addr = h, h;
      });
    Qp(this, { addrPromise: a, addr: o, deployTx: c, subs: u });
    const f = new Proxy({}, {
      get: (h, p, y) => {
        if (typeof p == "symbol" || mi.indexOf(p) >= 0)
          return Reflect.get(h, p, y);
        try {
          return this.getEvent(p);
        } catch (E) {
          if (!jt(E, "INVALID_ARGUMENT") || E.argument !== "key")
            throw E;
        }
      },
      has: (h, p) => mi.indexOf(p) >= 0 ? Reflect.has(h, p) : Reflect.has(h, p) || this.interface.hasEvent(String(p))
    });
    return F(this, { filters: f }), F(this, {
      fallback: i.receive || i.fallback ? Gp(this) : null
    }), new Proxy(this, {
      get: (h, p, y) => {
        if (typeof p == "symbol" || p in h || mi.indexOf(p) >= 0)
          return Reflect.get(h, p, y);
        try {
          return h.getFunction(p);
        } catch (E) {
          if (!jt(E, "INVALID_ARGUMENT") || E.argument !== "key")
            throw E;
        }
      },
      has: (h, p) => typeof p == "symbol" || p in h || mi.indexOf(p) >= 0 ? Reflect.has(h, p) : h.interface.hasFunction(p)
    });
  }
  /**
   *  Return a new Contract instance with the same target and ABI, but
   *  a different %%runner%%.
   */
  connect(t) {
    return new Bs(this.target, this.interface, t);
  }
  /**
   *  Return a new Contract instance with the same ABI and runner, but
   *  a different %%target%%.
   */
  attach(t) {
    return new Bs(t, this.interface, this.runner);
  }
  /**
   *  Return the resolved address of this Contract.
   */
  async getAddress() {
    return await Dt(this).addrPromise;
  }
  /**
   *  Return the deployed bytecode or null if no bytecode is found.
   */
  async getDeployedCode() {
    const t = Nn(this.runner);
    N(t, "runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "getDeployedCode" });
    const e = await t.getCode(await this.getAddress());
    return e === "0x" ? null : e;
  }
  /**
   *  Resolve to this Contract once the bytecode has been deployed, or
   *  resolve immediately if already deployed.
   */
  async waitForDeployment() {
    const t = this.deploymentTransaction();
    if (t)
      return await t.wait(), this;
    if (await this.getDeployedCode() != null)
      return this;
    const r = Nn(this.runner);
    return N(r != null, "contract runner does not support .provider", "UNSUPPORTED_OPERATION", { operation: "waitForDeployment" }), new Promise((s, i) => {
      const a = async () => {
        try {
          if (await this.getDeployedCode() != null)
            return s(this);
          r.once("block", a);
        } catch (o) {
          i(o);
        }
      };
      a();
    });
  }
  /**
   *  Return the transaction used to deploy this contract.
   *
   *  This is only available if this instance was returned from a
   *  [[ContractFactory]].
   */
  deploymentTransaction() {
    return Dt(this).deployTx;
  }
  /**
   *  Return the function for a given name. This is useful when a contract
   *  method name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getFunction(t) {
    return typeof t != "string" && (t = t.format()), _p(this, t);
  }
  /**
   *  Return the event for a given name. This is useful when a contract
   *  event name conflicts with a JavaScript name such as ``prototype`` or
   *  when using a Contract programatically.
   */
  getEvent(t) {
    return typeof t != "string" && (t = t.format()), Hp(this, t);
  }
  /**
   *  @_ignore:
   */
  async queryTransaction(t) {
    throw new Error("@TODO");
  }
  /*
      // @TODO: this is a non-backwards compatible change, but will be added
      //        in v7 and in a potential SmartContract class in an upcoming
      //        v6 release
      async getTransactionReceipt(hash: string): Promise<null | ContractTransactionReceipt> {
          const provider = getProvider(this.runner);
          assert(provider, "contract runner does not have a provider",
              "UNSUPPORTED_OPERATION", { operation: "queryTransaction" });
  
          const receipt = await provider.getTransactionReceipt(hash);
          if (receipt == null) { return null; }
  
          return new ContractTransactionReceipt(this.interface, provider, receipt);
      }
      */
  /**
   *  Provide historic access to event data for %%event%% in the range
   *  %%fromBlock%% (default: ``0``) to %%toBlock%% (default: ``"latest"``)
   *  inclusive.
   */
  async queryFilter(t, e, r) {
    e == null && (e = 0), r == null && (r = "latest");
    const { addr: s, addrPromise: i } = Dt(this), a = s || await i, { fragment: o, topics: c } = await Oo(this, t), u = { address: a, topics: c, fromBlock: e, toBlock: r }, f = Nn(this.runner);
    return N(f, "contract runner does not have a provider", "UNSUPPORTED_OPERATION", { operation: "queryFilter" }), (await f.getLogs(u)).map((h) => {
      let p = o;
      if (p == null)
        try {
          p = this.interface.getEvent(h.topics[0]);
        } catch {
        }
      if (p)
        try {
          return new Bo(h, this.interface, p);
        } catch (y) {
          return new Pl(h, y);
        }
      return new si(h, f);
    });
  }
  /**
   *  Add an event %%listener%% for the %%event%%.
   */
  async on(t, e) {
    const r = await Vc(this, "on", t);
    return r.listeners.push({ listener: e, once: !1 }), r.start(), this;
  }
  /**
   *  Add an event %%listener%% for the %%event%%, but remove the listener
   *  after it is fired once.
   */
  async once(t, e) {
    const r = await Vc(this, "once", t);
    return r.listeners.push({ listener: e, once: !0 }), r.start(), this;
  }
  /**
   *  Emit an %%event%% calling all listeners with %%args%%.
   *
   *  Resolves to ``true`` if any listeners were called.
   */
  async emit(t, ...e) {
    return await Ya(this, t, e, null);
  }
  /**
   *  Resolves to the number of listeners of %%event%% or the total number
   *  of listeners if unspecified.
   */
  async listenerCount(t) {
    if (t) {
      const s = await As(this, t);
      return s ? s.listeners.length : 0;
    }
    const { subs: e } = Dt(this);
    let r = 0;
    for (const { listeners: s } of e.values())
      r += s.length;
    return r;
  }
  /**
   *  Resolves to the listeners subscribed to %%event%% or all listeners
   *  if unspecified.
   */
  async listeners(t) {
    if (t) {
      const s = await As(this, t);
      return s ? s.listeners.map(({ listener: i }) => i) : [];
    }
    const { subs: e } = Dt(this);
    let r = [];
    for (const { listeners: s } of e.values())
      r = r.concat(s.map(({ listener: i }) => i));
    return r;
  }
  /**
   *  Remove the %%listener%% from the listeners for %%event%% or remove
   *  all listeners if unspecified.
   */
  async off(t, e) {
    const r = await As(this, t);
    if (!r)
      return this;
    if (e) {
      const s = r.listeners.map(({ listener: i }) => i).indexOf(e);
      s >= 0 && r.listeners.splice(s, 1);
    }
    return (e == null || r.listeners.length === 0) && (r.stop(), Dt(this).subs.delete(r.tag)), this;
  }
  /**
   *  Remove all the listeners for %%event%% or remove all listeners if
   *  unspecified.
   */
  async removeAllListeners(t) {
    if (t) {
      const e = await As(this, t);
      if (!e)
        return this;
      e.stop(), Dt(this).subs.delete(e.tag);
    } else {
      const { subs: e } = Dt(this);
      for (const { tag: r, stop: s } of e.values())
        s(), e.delete(r);
    }
    return this;
  }
  /**
   *  Alias for [on].
   */
  async addListener(t, e) {
    return await this.on(t, e);
  }
  /**
   *  Alias for [off].
   */
  async removeListener(t, e) {
    return await this.off(t, e);
  }
  /**
   *  Create a new Class for the %%abi%%.
   */
  static buildClass(t) {
    class e extends Bs {
      constructor(s, i = null) {
        super(s, t, i);
      }
    }
    return e;
  }
  /**
   *  Create a new BaseContract with a specified Interface.
   */
  static from(t, e, r) {
    return r == null && (r = null), new this(t, e, r);
  }
};
$g = Fi;
let ja = Bs;
function Kp() {
  return ja;
}
class Ts extends Kp() {
}
function Ta(n) {
  return n.match(/^ipfs:\/\/ipfs\//i) ? n = n.substring(12) : n.match(/^ipfs:\/\//i) ? n = n.substring(7) : g(!1, "unsupported IPFS format", "link", n), `https://gateway.ipfs.io/ipfs/${n}`;
}
class zp {
  /**
   *  Creates a new **MulticoinProviderPluing** for %%name%%.
   */
  constructor(t) {
    /**
     *  The name.
     */
    w(this, "name");
    F(this, { name: t });
  }
  connect(t) {
    return this;
  }
  /**
   *  Returns ``true`` if %%coinType%% is supported by this plugin.
   */
  supportsCoinType(t) {
    return !1;
  }
  /**
   *  Resovles to the encoded %%address%% for %%coinType%%.
   */
  async encodeAddress(t, e) {
    throw new Error("unsupported coin");
  }
  /**
   *  Resovles to the decoded %%data%% for %%coinType%%.
   */
  async decodeAddress(t, e) {
    throw new Error("unsupported coin");
  }
}
const kl = new RegExp("^(ipfs)://(.*)$", "i"), Jc = [
  new RegExp("^(https)://(.*)$", "i"),
  new RegExp("^(data):(.*)$", "i"),
  kl,
  new RegExp("^eip155:[0-9]+/(erc[0-9]+):(.*)$", "i")
];
var nn, kn, rn, ar, Ji, Dl;
const hr = class hr {
  constructor(t, e, r) {
    A(this, rn);
    /**
     *  The connected provider.
     */
    w(this, "provider");
    /**
     *  The address of the resolver.
     */
    w(this, "address");
    /**
     *  The name this resolver was resolved against.
     */
    w(this, "name");
    // For EIP-2544 names, the ancestor that provided the resolver
    A(this, nn, void 0);
    A(this, kn, void 0);
    F(this, { provider: t, address: e, name: r }), d(this, nn, null), d(this, kn, new Ts(e, [
      "function supportsInterface(bytes4) view returns (bool)",
      "function resolve(bytes, bytes) view returns (bytes)",
      "function addr(bytes32) view returns (address)",
      "function addr(bytes32, uint) view returns (bytes)",
      "function text(bytes32, string) view returns (string)",
      "function contenthash(bytes32) view returns (bytes)"
    ], t));
  }
  /**
   *  Resolves to true if the resolver supports wildcard resolution.
   */
  async supportsWildcard() {
    return l(this, nn) == null && d(this, nn, (async () => {
      try {
        return await l(this, kn).supportsInterface("0x9061b923");
      } catch (t) {
        if (jt(t, "CALL_EXCEPTION"))
          return !1;
        throw d(this, nn, null), t;
      }
    })()), await l(this, nn);
  }
  /**
   *  Resolves to the address for %%coinType%% or null if the
   *  provided %%coinType%% has not been configured.
   */
  async getAddress(t) {
    if (t == null && (t = 60), t === 60)
      try {
        const i = await C(this, rn, ar).call(this, "addr(bytes32)");
        return i == null || i === Ma ? null : i;
      } catch (i) {
        if (jt(i, "CALL_EXCEPTION"))
          return null;
        throw i;
      }
    if (t >= 0 && t < 2147483648) {
      let i = t + 2147483648;
      const a = await C(this, rn, ar).call(this, "addr(bytes32,uint)", [i]);
      if (q(a, 20))
        return Q(a);
    }
    let e = null;
    for (const i of this.provider.plugins)
      if (i instanceof zp && i.supportsCoinType(t)) {
        e = i;
        break;
      }
    if (e == null)
      return null;
    const r = await C(this, rn, ar).call(this, "addr(bytes32,uint)", [t]);
    if (r == null || r === "0x")
      return null;
    const s = await e.decodeAddress(t, r);
    if (s != null)
      return s;
    N(!1, "invalid coin data", "UNSUPPORTED_OPERATION", {
      operation: `getAddress(${t})`,
      info: { coinType: t, data: r }
    });
  }
  /**
   *  Resolves to the EIP-634 text record for %%key%%, or ``null``
   *  if unconfigured.
   */
  async getText(t) {
    const e = await C(this, rn, ar).call(this, "text(bytes32,string)", [t]);
    return e == null || e === "0x" ? null : e;
  }
  /**
   *  Rsolves to the content-hash or ``null`` if unconfigured.
   */
  async getContentHash() {
    const t = await C(this, rn, ar).call(this, "contenthash(bytes32)");
    if (t == null || t === "0x")
      return null;
    const e = t.match(/^0x(e3010170|e5010172)(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);
    if (e) {
      const s = e[1] === "e3010170" ? "ipfs" : "ipns", i = parseInt(e[4], 16);
      if (e[5].length === i * 2)
        return `${s}://${Tf("0x" + e[2])}`;
    }
    const r = t.match(/^0xe40101fa011b20([0-9a-f]*)$/);
    if (r && r[1].length === 64)
      return `bzz://${r[1]}`;
    N(!1, "invalid or unsupported content hash data", "UNSUPPORTED_OPERATION", {
      operation: "getContentHash()",
      info: { data: t }
    });
  }
  /**
   *  Resolves to the avatar url or ``null`` if the avatar is either
   *  unconfigured or incorrectly configured (e.g. references an NFT
   *  not owned by the address).
   *
   *  If diagnosing issues with configurations, the [[_getAvatar]]
   *  method may be useful.
   */
  async getAvatar() {
    return (await this._getAvatar()).url;
  }
  /**
   *  When resolving an avatar, there are many steps involved, such
   *  fetching metadata and possibly validating ownership of an
   *  NFT.
   *
   *  This method can be used to examine each step and the value it
   *  was working from.
   */
  async _getAvatar() {
    const t = [{ type: "name", value: this.name }];
    try {
      const e = await this.getText("avatar");
      if (e == null)
        return t.push({ type: "!avatar", value: "" }), { url: null, linkage: t };
      t.push({ type: "avatar", value: e });
      for (let r = 0; r < Jc.length; r++) {
        const s = e.match(Jc[r]);
        if (s == null)
          continue;
        const i = s[1].toLowerCase();
        switch (i) {
          case "https":
          case "data":
            return t.push({ type: "url", value: e }), { linkage: t, url: e };
          case "ipfs": {
            const a = Ta(e);
            return t.push({ type: "ipfs", value: e }), t.push({ type: "url", value: a }), { linkage: t, url: a };
          }
          case "erc721":
          case "erc1155": {
            const a = i === "erc721" ? "tokenURI(uint256)" : "uri(uint256)";
            t.push({ type: i, value: e });
            const o = await this.getAddress();
            if (o == null)
              return t.push({ type: "!owner", value: "" }), { url: null, linkage: t };
            const c = (s[2] || "").split("/");
            if (c.length !== 2)
              return t.push({ type: `!${i}caip`, value: s[2] || "" }), { url: null, linkage: t };
            const u = c[1], f = new Ts(c[0], [
              // ERC-721
              "function tokenURI(uint) view returns (string)",
              "function ownerOf(uint) view returns (address)",
              // ERC-1155
              "function uri(uint) view returns (string)",
              "function balanceOf(address, uint256) view returns (uint)"
            ], this.provider);
            if (i === "erc721") {
              const m = await f.ownerOf(u);
              if (o !== m)
                return t.push({ type: "!owner", value: m }), { url: null, linkage: t };
              t.push({ type: "owner", value: m });
            } else if (i === "erc1155") {
              const m = await f.balanceOf(o, u);
              if (!m)
                return t.push({ type: "!balance", value: "0" }), { url: null, linkage: t };
              t.push({ type: "balance", value: m.toString() });
            }
            let h = await f[a](u);
            if (h == null || h === "0x")
              return t.push({ type: "!metadata-url", value: "" }), { url: null, linkage: t };
            t.push({ type: "metadata-url-base", value: h }), i === "erc1155" && (h = h.replace("{id}", gn(u, 32).substring(2)), t.push({ type: "metadata-url-expanded", value: h })), h.match(/^ipfs:/i) && (h = Ta(h)), t.push({ type: "metadata-url", value: h });
            let p = {};
            const y = await new _e(h).send();
            y.assertOk();
            try {
              p = y.bodyJson;
            } catch {
              try {
                t.push({ type: "!metadata", value: y.bodyText });
              } catch {
                const b = y.body;
                return b && t.push({ type: "!metadata", value: k(b) }), { url: null, linkage: t };
              }
              return { url: null, linkage: t };
            }
            if (!p)
              return t.push({ type: "!metadata", value: "" }), { url: null, linkage: t };
            t.push({ type: "metadata", value: JSON.stringify(p) });
            let E = p.image;
            if (typeof E != "string")
              return t.push({ type: "!imageUrl", value: "" }), { url: null, linkage: t };
            if (!E.match(/^(https:\/\/|data:)/i)) {
              if (E.match(kl) == null)
                return t.push({ type: "!imageUrl-ipfs", value: E }), { url: null, linkage: t };
              t.push({ type: "imageUrl-ipfs", value: E }), E = Ta(E);
            }
            return t.push({ type: "url", value: E }), { linkage: t, url: E };
          }
        }
      }
    } catch {
    }
    return { linkage: t, url: null };
  }
  static async getEnsAddress(t) {
    const e = await t.getNetwork(), r = e.getPlugin("org.ethers.plugins.network.Ens");
    return N(r, "network does not support ENS", "UNSUPPORTED_OPERATION", {
      operation: "getEnsAddress",
      info: { network: e }
    }), r.address;
  }
  /**
   *  Resolve to the ENS resolver for %%name%% using %%provider%% or
   *  ``null`` if unconfigured.
   */
  static async fromName(t, e) {
    var s;
    let r = e;
    for (; ; ) {
      if (r === "" || r === "." || e !== "eth" && r === "eth")
        return null;
      const i = await C(s = hr, Ji, Dl).call(s, t, r);
      if (i != null) {
        const a = new hr(t, i, e);
        return r !== e && !await a.supportsWildcard() ? null : a;
      }
      r = r.split(".").slice(1).join(".");
    }
  }
};
nn = new WeakMap(), kn = new WeakMap(), rn = new WeakSet(), ar = async function(t, e) {
  e = (e || []).slice();
  const r = l(this, kn).interface;
  e.unshift(Ja(this.name));
  let s = null;
  await this.supportsWildcard() && (s = r.getFunction(t), N(s, "missing fragment", "UNKNOWN_ERROR", {
    info: { funcName: t }
  }), e = [
    Xd(this.name),
    r.encodeFunctionData(s, e)
  ], t = "resolve(bytes,bytes)"), e.push({
    enableCcipRead: !0
  });
  try {
    const i = await l(this, kn)[t](...e);
    return s ? r.decodeFunctionResult(s, i)[0] : i;
  } catch (i) {
    if (!jt(i, "CALL_EXCEPTION"))
      throw i;
  }
  return null;
}, Ji = new WeakSet(), Dl = async function(t, e) {
  const r = await hr.getEnsAddress(t);
  try {
    const i = await new Ts(r, [
      "function resolver(bytes32) view returns (address)"
    ], t).resolver(Ja(e), {
      enableCcipRead: !0
    });
    return i === Ma ? null : i;
  } catch (s) {
    throw s;
  }
  return null;
}, A(hr, Ji);
let Mi = hr;
const Kc = BigInt(0);
function j(n, t) {
  return function(e) {
    return e == null ? t : n(e);
  };
}
function xo(n) {
  return (t) => {
    if (!Array.isArray(t))
      throw new Error("not an array");
    return t.map((e) => n(e));
  };
}
function ii(n, t) {
  return (e) => {
    const r = {};
    for (const s in n) {
      let i = s;
      if (t && s in t && !(i in e)) {
        for (const a of t[s])
          if (a in e) {
            i = a;
            break;
          }
      }
      try {
        const a = n[s](e[i]);
        a !== void 0 && (r[s] = a);
      } catch (a) {
        const o = a instanceof Error ? a.message : "not-an-error";
        N(!1, `invalid value for value.${s} (${o})`, "BAD_DATA", { value: e });
      }
    }
    return r;
  };
}
function Wp(n) {
  switch (n) {
    case !0:
    case "true":
      return !0;
    case !1:
    case "false":
      return !1;
  }
  g(!1, `invalid boolean; ${JSON.stringify(n)}`, "value", n);
}
function us(n) {
  return g(q(n, !0), "invalid data", "value", n), n;
}
function Zt(n) {
  return g(q(n, 32), "invalid hash", "value", n), n;
}
const Yp = ii({
  address: Q,
  blockHash: Zt,
  blockNumber: H,
  data: us,
  index: H,
  removed: j(Wp, !1),
  topics: xo(Zt),
  transactionHash: Zt,
  transactionIndex: H
}, {
  index: ["logIndex"]
});
function jp(n) {
  return Yp(n);
}
const Zp = ii({
  hash: j(Zt),
  parentHash: Zt,
  number: H,
  timestamp: H,
  nonce: j(us),
  difficulty: D,
  gasLimit: D,
  gasUsed: D,
  miner: j(Q),
  extraData: us,
  baseFeePerGas: j(D)
});
function Xp(n) {
  const t = Zp(n);
  return t.transactions = n.transactions.map((e) => typeof e == "string" ? e : Ul(e)), t;
}
const qp = ii({
  transactionIndex: H,
  blockNumber: H,
  transactionHash: Zt,
  address: Q,
  topics: xo(Zt),
  data: us,
  index: H,
  blockHash: Zt
}, {
  index: ["logIndex"]
});
function $p(n) {
  return qp(n);
}
const tg = ii({
  to: j(Q, null),
  from: j(Q, null),
  contractAddress: j(Q, null),
  // should be allowNull(hash), but broken-EIP-658 support is handled in receipt
  index: H,
  root: j(k),
  gasUsed: D,
  logsBloom: j(us),
  blockHash: Zt,
  hash: Zt,
  logs: xo($p),
  blockNumber: H,
  //confirmations: allowNull(getNumber, null),
  cumulativeGasUsed: D,
  effectiveGasPrice: j(D),
  status: j(H),
  type: j(H, 0)
}, {
  effectiveGasPrice: ["gasPrice"],
  hash: ["transactionHash"],
  index: ["transactionIndex"]
});
function eg(n) {
  return tg(n);
}
function Ul(n) {
  n.to && D(n.to) === Kc && (n.to = "0x0000000000000000000000000000000000000000");
  const t = ii({
    hash: Zt,
    type: (e) => e === "0x" || e == null ? 0 : H(e),
    accessList: j(Zn, null),
    blockHash: j(Zt, null),
    blockNumber: j(H, null),
    transactionIndex: j(H, null),
    //confirmations: allowNull(getNumber, null),
    from: Q,
    // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas) must be set
    gasPrice: j(D),
    maxPriorityFeePerGas: j(D),
    maxFeePerGas: j(D),
    gasLimit: D,
    to: j(Q, null),
    value: D,
    nonce: H,
    data: us,
    creates: j(Q, null),
    chainId: j(D, null)
  }, {
    data: ["input"],
    gasLimit: ["gas"]
  })(n);
  if (t.to == null && t.creates == null && (t.creates = td(t)), (n.type === 1 || n.type === 2) && n.accessList == null && (t.accessList = []), n.signature ? t.signature = ae.from(n.signature) : t.signature = ae.from(n), t.chainId == null) {
    const e = t.signature.legacyChainId;
    e != null && (t.chainId = e);
  }
  return t.blockHash && D(t.blockHash) === Kc && (t.blockHash = null), t;
}
const ng = "0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e";
class ai {
  /**
   *  Creates a new **NetworkPlugin**.
   */
  constructor(t) {
    /**
     *  The name of the plugin.
     *
     *  It is recommended to use reverse-domain-notation, which permits
     *  unique names with a known authority as well as hierarchal entries.
     */
    w(this, "name");
    F(this, { name: t });
  }
  /**
   *  Creates a copy of this plugin.
   */
  clone() {
    return new ai(this.name);
  }
}
class aa extends ai {
  /**
   *  Creates a new GasCostPlugin from %%effectiveBlock%% until the
   *  latest block or another GasCostPlugin supercedes that block number,
   *  with the associated %%costs%%.
   */
  constructor(e, r) {
    e == null && (e = 0);
    super(`org.ethers.network.plugins.GasCost#${e || 0}`);
    /**
     *  The block number to treat these values as valid from.
     *
     *  This allows a hardfork to have updated values included as well as
     *  mulutiple hardforks to be supported.
     */
    w(this, "effectiveBlock");
    /**
     *  The transactions base fee.
     */
    w(this, "txBase");
    /**
     *  The fee for creating a new account.
     */
    w(this, "txCreate");
    /**
     *  The fee per zero-byte in the data.
     */
    w(this, "txDataZero");
    /**
     *  The fee per non-zero-byte in the data.
     */
    w(this, "txDataNonzero");
    /**
     *  The fee per storage key in the [[link-eip-2930]] access list.
     */
    w(this, "txAccessListStorageKey");
    /**
     *  The fee per address in the [[link-eip-2930]] access list.
     */
    w(this, "txAccessListAddress");
    const s = { effectiveBlock: e };
    function i(a, o) {
      let c = (r || {})[a];
      c == null && (c = o), g(typeof c == "number", `invalud value for ${a}`, "costs", r), s[a] = c;
    }
    i("txBase", 21e3), i("txCreate", 32e3), i("txDataZero", 4), i("txDataNonzero", 16), i("txAccessListStorageKey", 1900), i("txAccessListAddress", 2400), F(this, s);
  }
  clone() {
    return new aa(this.effectiveBlock, this);
  }
}
class oa extends ai {
  /**
   *  Creates a new **EnsPlugin** connected to %%address%% on the
   *  %%targetNetwork%%. The default ENS address and mainnet is used
   *  if unspecified.
   */
  constructor(e, r) {
    super("org.ethers.plugins.network.Ens");
    /**
     *  The ENS Registrty Contract address.
     */
    w(this, "address");
    /**
     *  The chain ID that the ENS contract lives on.
     */
    w(this, "targetNetwork");
    F(this, {
      address: e || ng,
      targetNetwork: r ?? 1
    });
  }
  clone() {
    return new oa(this.address, this.targetNetwork);
  }
}
var Ks, zs;
class rg extends ai {
  /**
   *  Creates a new **FetchUrlFeeDataNetworkPlugin** which will
   *  be used when computing the fee data for the network.
   */
  constructor(e, r) {
    super("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    A(this, Ks, void 0);
    A(this, zs, void 0);
    d(this, Ks, e), d(this, zs, r);
  }
  /**
   *  The URL to initialize the FetchRequest with in %%processFunc%%.
   */
  get url() {
    return l(this, Ks);
  }
  /**
   *  The callback to use when computing the FeeData.
   */
  get processFunc() {
    return l(this, zs);
  }
  // We are immutable, so we can serve as our own clone
  clone() {
    return this;
  }
}
Ks = new WeakMap(), zs = new WeakMap();
const Pa = /* @__PURE__ */ new Map();
var Qr, Vr, sn;
const dr = class dr {
  /**
   *  Creates a new **Network** for %%name%% and %%chainId%%.
   */
  constructor(t, e) {
    A(this, Qr, void 0);
    A(this, Vr, void 0);
    A(this, sn, void 0);
    d(this, Qr, t), d(this, Vr, D(e)), d(this, sn, /* @__PURE__ */ new Map());
  }
  /**
   *  Returns a JSON-compatible representation of a Network.
   */
  toJSON() {
    return { name: this.name, chainId: String(this.chainId) };
  }
  /**
   *  The network common name.
   *
   *  This is the canonical name, as networks migh have multiple
   *  names.
   */
  get name() {
    return l(this, Qr);
  }
  set name(t) {
    d(this, Qr, t);
  }
  /**
   *  The network chain ID.
   */
  get chainId() {
    return l(this, Vr);
  }
  set chainId(t) {
    d(this, Vr, D(t, "chainId"));
  }
  /**
   *  Returns true if %%other%% matches this network. Any chain ID
   *  must match, and if no chain ID is present, the name must match.
   *
   *  This method does not currently check for additional properties,
   *  such as ENS address or plug-in compatibility.
   */
  matches(t) {
    if (t == null)
      return !1;
    if (typeof t == "string") {
      try {
        return this.chainId === D(t);
      } catch {
      }
      return this.name === t;
    }
    if (typeof t == "number" || typeof t == "bigint") {
      try {
        return this.chainId === D(t);
      } catch {
      }
      return !1;
    }
    if (typeof t == "object") {
      if (t.chainId != null) {
        try {
          return this.chainId === D(t.chainId);
        } catch {
        }
        return !1;
      }
      return t.name != null ? this.name === t.name : !1;
    }
    return !1;
  }
  /**
   *  Returns the list of plugins currently attached to this Network.
   */
  get plugins() {
    return Array.from(l(this, sn).values());
  }
  /**
   *  Attach a new %%plugin%% to this Network. The network name
   *  must be unique, excluding any fragment.
   */
  attachPlugin(t) {
    if (l(this, sn).get(t.name))
      throw new Error(`cannot replace existing plugin: ${t.name} `);
    return l(this, sn).set(t.name, t.clone()), this;
  }
  /**
   *  Return the plugin, if any, matching %%name%% exactly. Plugins
   *  with fragments will not be returned unless %%name%% includes
   *  a fragment.
   */
  getPlugin(t) {
    return l(this, sn).get(t) || null;
  }
  /**
   *  Gets a list of all plugins that match %%name%%, with otr without
   *  a fragment.
   */
  getPlugins(t) {
    return this.plugins.filter((e) => e.name.split("#")[0] === t);
  }
  /**
   *  Create a copy of this Network.
   */
  clone() {
    const t = new dr(this.name, this.chainId);
    return this.plugins.forEach((e) => {
      t.attachPlugin(e.clone());
    }), t;
  }
  /**
   *  Compute the intrinsic gas required for a transaction.
   *
   *  A GasCostPlugin can be attached to override the default
   *  values.
   */
  computeIntrinsicGas(t) {
    const e = this.getPlugin("org.ethers.plugins.network.GasCost") || new aa();
    let r = e.txBase;
    if (t.to == null && (r += e.txCreate), t.data)
      for (let s = 2; s < t.data.length; s += 2)
        t.data.substring(s, s + 2) === "00" ? r += e.txDataZero : r += e.txDataNonzero;
    if (t.accessList) {
      const s = Zn(t.accessList);
      for (const i in s)
        r += e.txAccessListAddress + e.txAccessListStorageKey * s[i].storageKeys.length;
    }
    return r;
  }
  /**
   *  Returns a new Network for the %%network%% name or chainId.
   */
  static from(t) {
    if (sg(), t == null)
      return dr.from("mainnet");
    if (typeof t == "number" && (t = BigInt(t)), typeof t == "string" || typeof t == "bigint") {
      const e = Pa.get(t);
      if (e)
        return e();
      if (typeof t == "bigint")
        return new dr("unknown", t);
      g(!1, "unknown network", "network", t);
    }
    if (typeof t.clone == "function")
      return t.clone();
    if (typeof t == "object") {
      g(typeof t.name == "string" && typeof t.chainId == "number", "invalid network object name or chainId", "network", t);
      const e = new dr(t.name, t.chainId);
      return (t.ensAddress || t.ensNetwork != null) && e.attachPlugin(new oa(t.ensAddress, t.ensNetwork)), e;
    }
    g(!1, "invalid network", "network", t);
  }
  /**
   *  Register %%nameOrChainId%% with a function which returns
   *  an instance of a Network representing that chain.
   */
  static register(t, e) {
    typeof t == "number" && (t = BigInt(t));
    const r = Pa.get(t);
    r && g(!1, `conflicting network for ${JSON.stringify(r.name)}`, "nameOrChainId", t), Pa.set(t, e);
  }
};
Qr = new WeakMap(), Vr = new WeakMap(), sn = new WeakMap();
let Ae = dr;
function zc(n, t) {
  const e = String(n);
  if (!e.match(/^[0-9.]+$/))
    throw new Error(`invalid gwei value: ${n}`);
  const r = e.split(".");
  if (r.length === 1 && r.push(""), r.length !== 2)
    throw new Error(`invalid gwei value: ${n}`);
  for (; r[1].length < t; )
    r[1] += "0";
  if (r[1].length > 9) {
    let s = BigInt(r[1].substring(0, 9));
    r[1].substring(9).match(/^0+$/) || s++, r[1] = s.toString();
  }
  return BigInt(r[0] + r[1]);
}
function Wc(n) {
  return new rg(n, async (t, e, r) => {
    r.setHeader("User-Agent", "ethers");
    let s;
    try {
      const [i, a] = await Promise.all([
        r.send(),
        t()
      ]);
      s = i;
      const o = s.bodyJson.standard;
      return {
        gasPrice: a.gasPrice,
        maxFeePerGas: zc(o.maxFee, 9),
        maxPriorityFeePerGas: zc(o.maxPriorityFee, 9)
      };
    } catch (i) {
      N(!1, `error encountered with polygon gas station (${JSON.stringify(r.url)})`, "SERVER_ERROR", { request: r, response: s, error: i });
    }
  });
}
let Yc = !1;
function sg() {
  if (Yc)
    return;
  Yc = !0;
  function n(t, e, r) {
    const s = function() {
      const i = new Ae(t, e);
      return r.ensNetwork != null && i.attachPlugin(new oa(null, r.ensNetwork)), i.attachPlugin(new aa()), (r.plugins || []).forEach((a) => {
        i.attachPlugin(a);
      }), i;
    };
    Ae.register(t, s), Ae.register(e, s), r.altNames && r.altNames.forEach((i) => {
      Ae.register(i, s);
    });
  }
  n("mainnet", 1, { ensNetwork: 1, altNames: ["homestead"] }), n("ropsten", 3, { ensNetwork: 3 }), n("rinkeby", 4, { ensNetwork: 4 }), n("goerli", 5, { ensNetwork: 5 }), n("kovan", 42, { ensNetwork: 42 }), n("sepolia", 11155111, { ensNetwork: 11155111 }), n("classic", 61, {}), n("classicKotti", 6, {}), n("arbitrum", 42161, {
    ensNetwork: 1
  }), n("arbitrum-goerli", 421613, {}), n("base", 8453, { ensNetwork: 1 }), n("base-goerli", 84531, {}), n("base-sepolia", 84532, {}), n("bnb", 56, { ensNetwork: 1 }), n("bnbt", 97, {}), n("linea", 59144, { ensNetwork: 1 }), n("linea-goerli", 59140, {}), n("matic", 137, {
    ensNetwork: 1,
    plugins: [
      Wc("https://gasstation.polygon.technology/v2")
    ]
  }), n("matic-mumbai", 80001, {
    altNames: ["maticMumbai", "maticmum"],
    plugins: [
      Wc("https://gasstation-testnet.polygon.technology/v2")
    ]
  }), n("optimism", 10, {
    ensNetwork: 1,
    plugins: []
  }), n("optimism-goerli", 420, {}), n("xdai", 100, { ensNetwork: 1 });
}
function Za(n) {
  return JSON.parse(JSON.stringify(n));
}
var Re, Jt, an, pe, Jr, Ti;
class ig {
  /**
   *  Create a new **PollingBlockSubscriber** attached to %%provider%%.
   */
  constructor(t) {
    A(this, Jr);
    A(this, Re, void 0);
    A(this, Jt, void 0);
    A(this, an, void 0);
    // The most recent block we have scanned for events. The value -2
    // indicates we still need to fetch an initial block number
    A(this, pe, void 0);
    d(this, Re, t), d(this, Jt, null), d(this, an, 4e3), d(this, pe, -2);
  }
  /**
   *  The polling interval.
   */
  get pollingInterval() {
    return l(this, an);
  }
  set pollingInterval(t) {
    d(this, an, t);
  }
  start() {
    l(this, Jt) || (d(this, Jt, l(this, Re)._setTimeout(C(this, Jr, Ti).bind(this), l(this, an))), C(this, Jr, Ti).call(this));
  }
  stop() {
    l(this, Jt) && (l(this, Re)._clearTimeout(l(this, Jt)), d(this, Jt, null));
  }
  pause(t) {
    this.stop(), t && d(this, pe, -2);
  }
  resume() {
    this.start();
  }
}
Re = new WeakMap(), Jt = new WeakMap(), an = new WeakMap(), pe = new WeakMap(), Jr = new WeakSet(), Ti = async function() {
  try {
    const t = await l(this, Re).getBlockNumber();
    if (l(this, pe) === -2) {
      d(this, pe, t);
      return;
    }
    if (t !== l(this, pe)) {
      for (let e = l(this, pe) + 1; e <= t; e++) {
        if (l(this, Jt) == null)
          return;
        await l(this, Re).emit("block", e);
      }
      d(this, pe, t);
    }
  } catch {
  }
  l(this, Jt) != null && d(this, Jt, l(this, Re)._setTimeout(C(this, Jr, Ti).bind(this), l(this, an)));
};
var Dn, Un, on;
class So {
  /**
   *  Create a new **OnBlockSubscriber** attached to %%provider%%.
   */
  constructor(t) {
    A(this, Dn, void 0);
    A(this, Un, void 0);
    A(this, on, void 0);
    d(this, Dn, t), d(this, on, !1), d(this, Un, (e) => {
      this._poll(e, l(this, Dn));
    });
  }
  /**
   *  Called on every new block.
   */
  async _poll(t, e) {
    throw new Error("sub-classes must override this");
  }
  start() {
    l(this, on) || (d(this, on, !0), l(this, Un).call(this, -2), l(this, Dn).on("block", l(this, Un)));
  }
  stop() {
    l(this, on) && (d(this, on, !1), l(this, Dn).off("block", l(this, Un)));
  }
  pause(t) {
    this.stop();
  }
  resume() {
    this.start();
  }
}
Dn = new WeakMap(), Un = new WeakMap(), on = new WeakMap();
var Kr, ve;
class ag extends So {
  constructor(e, r) {
    super(e);
    A(this, Kr, void 0);
    A(this, ve, void 0);
    d(this, Kr, r), d(this, ve, -2);
  }
  pause(e) {
    e && d(this, ve, -2), super.pause(e);
  }
  async _poll(e, r) {
    const s = await r.getBlock(l(this, Kr));
    s != null && (l(this, ve) === -2 ? d(this, ve, s.number) : s.number > l(this, ve) && (r.emit(l(this, Kr), s.number), d(this, ve, s.number)));
  }
}
Kr = new WeakMap(), ve = new WeakMap();
var Ki;
class og extends So {
  constructor(e, r) {
    super(e);
    A(this, Ki, void 0);
    d(this, Ki, Za(r));
  }
  async _poll(e, r) {
    throw new Error("@TODO");
  }
}
Ki = new WeakMap();
var zr;
class cg extends So {
  /**
   *  Create a new **PollingTransactionSubscriber** attached to
   *  %%provider%%, listening for %%hash%%.
   */
  constructor(e, r) {
    super(e);
    A(this, zr, void 0);
    d(this, zr, r);
  }
  async _poll(e, r) {
    const s = await r.getTransactionReceipt(l(this, zr));
    s && r.emit(l(this, zr), s);
  }
}
zr = new WeakMap();
var ke, Wr, Yr, cn, Kt, zi, Ll;
class Ro {
  /**
   *  Create a new **PollingTransactionSubscriber** attached to
   *  %%provider%%, listening for %%filter%%.
   */
  constructor(t, e) {
    A(this, zi);
    A(this, ke, void 0);
    A(this, Wr, void 0);
    A(this, Yr, void 0);
    A(this, cn, void 0);
    // The most recent block we have scanned for events. The value -2
    // indicates we still need to fetch an initial block number
    A(this, Kt, void 0);
    d(this, ke, t), d(this, Wr, Za(e)), d(this, Yr, C(this, zi, Ll).bind(this)), d(this, cn, !1), d(this, Kt, -2);
  }
  start() {
    l(this, cn) || (d(this, cn, !0), l(this, Kt) === -2 && l(this, ke).getBlockNumber().then((t) => {
      d(this, Kt, t);
    }), l(this, ke).on("block", l(this, Yr)));
  }
  stop() {
    l(this, cn) && (d(this, cn, !1), l(this, ke).off("block", l(this, Yr)));
  }
  pause(t) {
    this.stop(), t && d(this, Kt, -2);
  }
  resume() {
    this.start();
  }
}
ke = new WeakMap(), Wr = new WeakMap(), Yr = new WeakMap(), cn = new WeakMap(), Kt = new WeakMap(), zi = new WeakSet(), Ll = async function(t) {
  if (l(this, Kt) === -2)
    return;
  const e = Za(l(this, Wr));
  e.fromBlock = l(this, Kt) + 1, e.toBlock = t;
  const r = await l(this, ke).getLogs(e);
  if (r.length === 0) {
    l(this, Kt) < t - 60 && d(this, Kt, t - 60);
    return;
  }
  for (const s of r)
    l(this, ke).emit(l(this, Wr), s), d(this, Kt, s.blockNumber);
};
const ug = BigInt(2), lg = 10;
function yi(n) {
  return n && typeof n.then == "function";
}
function Pi(n, t) {
  return n + ":" + JSON.stringify(t, (e, r) => {
    if (r == null)
      return "null";
    if (typeof r == "bigint")
      return `bigint:${r.toString()}`;
    if (typeof r == "string")
      return r.toLowerCase();
    if (typeof r == "object" && !Array.isArray(r)) {
      const s = Object.keys(r);
      return s.sort(), s.reduce((i, a) => (i[a] = r[a], i), {});
    }
    return r;
  });
}
class Fl {
  /**
   *  Create a new UnmanagedSubscriber with %%name%%.
   */
  constructor(t) {
    /**
     *  The name fof the event.
     */
    w(this, "name");
    F(this, { name: t });
  }
  start() {
  }
  stop() {
  }
  pause(t) {
  }
  resume() {
  }
}
function fg(n) {
  return JSON.parse(JSON.stringify(n));
}
function Xa(n) {
  return n = Array.from(new Set(n).values()), n.sort(), n;
}
async function Ba(n, t) {
  if (n == null)
    throw new Error("invalid event");
  if (Array.isArray(n) && (n = { topics: n }), typeof n == "string")
    switch (n) {
      case "block":
      case "debug":
      case "error":
      case "finalized":
      case "network":
      case "pending":
      case "safe":
        return { type: n, tag: n };
    }
  if (q(n, 32)) {
    const e = n.toLowerCase();
    return { type: "transaction", tag: Pi("tx", { hash: e }), hash: e };
  }
  if (n.orphan) {
    const e = n;
    return { type: "orphan", tag: Pi("orphan", e), filter: fg(e) };
  }
  if (n.address || n.topics) {
    const e = n, r = {
      topics: (e.topics || []).map((s) => s == null ? null : Array.isArray(s) ? Xa(s.map((i) => i.toLowerCase())) : s.toLowerCase())
    };
    if (e.address) {
      const s = [], i = [], a = (o) => {
        q(o) ? s.push(o) : i.push((async () => {
          s.push(await Et(o, t));
        })());
      };
      Array.isArray(e.address) ? e.address.forEach(a) : a(e.address), i.length && await Promise.all(i), r.address = Xa(s.map((o) => o.toLowerCase()));
    }
    return { filter: r, tag: Pi("event", r), type: "event" };
  }
  g(!1, "unknown ProviderEvent", "event", n);
}
function Ca() {
  return (/* @__PURE__ */ new Date()).getTime();
}
const hg = {
  cacheTimeout: 250,
  pollingInterval: 4e3
};
var ht, un, dt, jr, Ft, Ln, ln, De, Ws, zt, Zr, Xr, mt, kt, Ys, qa, js, $a, Fn, Es, Zs, to, Mn, bs, qr, Bi;
class dg {
  /**
   *  Create a new **AbstractProvider** connected to %%network%%, or
   *  use the various network detection capabilities to discover the
   *  [[Network]] if necessary.
   */
  constructor(t, e) {
    // Shares multiple identical requests made during the same 250ms
    A(this, mt);
    A(this, Ys);
    A(this, js);
    // Account
    A(this, Fn);
    A(this, Zs);
    A(this, Mn);
    A(this, qr);
    A(this, ht, void 0);
    A(this, un, void 0);
    // null=unpaused, true=paused+dropWhilePaused, false=paused
    A(this, dt, void 0);
    A(this, jr, void 0);
    A(this, Ft, void 0);
    A(this, Ln, void 0);
    A(this, ln, void 0);
    // The most recent block number if running an event or -1 if no "block" event
    A(this, De, void 0);
    A(this, Ws, void 0);
    A(this, zt, void 0);
    A(this, Zr, void 0);
    A(this, Xr, void 0);
    if (d(this, Xr, Object.assign({}, hg, e || {})), t === "any")
      d(this, Ln, !0), d(this, Ft, null);
    else if (t) {
      const r = Ae.from(t);
      d(this, Ln, !1), d(this, Ft, Promise.resolve(r)), setTimeout(() => {
        this.emit("network", r, null);
      }, 0);
    } else
      d(this, Ln, !1), d(this, Ft, null);
    d(this, De, -1), d(this, ln, /* @__PURE__ */ new Map()), d(this, ht, /* @__PURE__ */ new Map()), d(this, un, /* @__PURE__ */ new Map()), d(this, dt, null), d(this, jr, !1), d(this, Ws, 1), d(this, zt, /* @__PURE__ */ new Map()), d(this, Zr, !1);
  }
  get pollingInterval() {
    return l(this, Xr).pollingInterval;
  }
  /**
   *  Returns ``this``, to allow an **AbstractProvider** to implement
   *  the [[ContractRunner]] interface.
   */
  get provider() {
    return this;
  }
  /**
   *  Returns all the registered plug-ins.
   */
  get plugins() {
    return Array.from(l(this, un).values());
  }
  /**
   *  Attach a new plug-in.
   */
  attachPlugin(t) {
    if (l(this, un).get(t.name))
      throw new Error(`cannot replace existing plugin: ${t.name} `);
    return l(this, un).set(t.name, t.connect(this)), this;
  }
  /**
   *  Get a plugin by name.
   */
  getPlugin(t) {
    return l(this, un).get(t) || null;
  }
  /**
   *  Prevent any CCIP-read operation, regardless of whether requested
   *  in a [[call]] using ``enableCcipRead``.
   */
  get disableCcipRead() {
    return l(this, Zr);
  }
  set disableCcipRead(t) {
    d(this, Zr, !!t);
  }
  /**
   *  Resolves to the data for executing the CCIP-read operations.
   */
  async ccipReadFetch(t, e, r) {
    if (this.disableCcipRead || r.length === 0 || t.to == null)
      return null;
    const s = t.to.toLowerCase(), i = e.toLowerCase(), a = [];
    for (let o = 0; o < r.length; o++) {
      const c = r[o], u = c.replace("{sender}", s).replace("{data}", i), f = new _e(u);
      c.indexOf("{data}") === -1 && (f.body = { data: i, sender: s }), this.emit("debug", { action: "sendCcipReadFetchRequest", request: f, index: o, urls: r });
      let h = "unknown error";
      const p = await f.send();
      try {
        const y = p.bodyJson;
        if (y.data)
          return this.emit("debug", { action: "receiveCcipReadFetchResult", request: f, result: y }), y.data;
        y.message && (h = y.message), this.emit("debug", { action: "receiveCcipReadFetchError", request: f, result: y });
      } catch {
      }
      N(p.statusCode < 400 || p.statusCode >= 500, `response not found during CCIP fetch: ${h}`, "OFFCHAIN_FAULT", { reason: "404_MISSING_RESOURCE", transaction: t, info: { url: c, errorMessage: h } }), a.push(h);
    }
    N(!1, `error encountered during CCIP fetch: ${a.map((o) => JSON.stringify(o)).join(", ")}`, "OFFCHAIN_FAULT", {
      reason: "500_SERVER_ERROR",
      transaction: t,
      info: { urls: r, errorMessages: a }
    });
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a block before
   *  returning it, to add additional properties or an alternate
   *  sub-class of [[Block]].
   */
  _wrapBlock(t, e) {
    return new vp(Xp(t), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a log before
   *  returning it, to add additional properties or an alternate
   *  sub-class of [[Log]].
   */
  _wrapLog(t, e) {
    return new si(jp(t), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a transaction
   *  receipt before returning it, to add additional properties or an
   *  alternate sub-class of [[TransactionReceipt]].
   */
  _wrapTransactionReceipt(t, e) {
    return new Il(eg(t), this);
  }
  /**
   *  Provides the opportunity for a sub-class to wrap a transaction
   *  response before returning it, to add additional properties or an
   *  alternate sub-class of [[TransactionResponse]].
   */
  _wrapTransactionResponse(t, e) {
    return new Ls(Ul(t), this);
  }
  /**
   *  Resolves to the Network, forcing a network detection using whatever
   *  technique the sub-class requires.
   *
   *  Sub-classes **must** override this.
   */
  _detectNetwork() {
    N(!1, "sub-classes must implement this", "UNSUPPORTED_OPERATION", {
      operation: "_detectNetwork"
    });
  }
  /**
   *  Sub-classes should use this to perform all built-in operations. All
   *  methods sanitizes and normalizes the values passed into this.
   *
   *  Sub-classes **must** override this.
   */
  async _perform(t) {
    N(!1, `unsupported method: ${t.method}`, "UNSUPPORTED_OPERATION", {
      operation: t.method,
      info: t
    });
  }
  // State
  async getBlockNumber() {
    const t = H(await C(this, mt, kt).call(this, { method: "getBlockNumber" }), "%response");
    return l(this, De) >= 0 && d(this, De, t), t;
  }
  /**
   *  Returns or resolves to the address for %%address%%, resolving ENS
   *  names and [[Addressable]] objects and returning if already an
   *  address.
   */
  _getAddress(t) {
    return Et(t, this);
  }
  /**
   *  Returns or resolves to a valid block tag for %%blockTag%%, resolving
   *  negative values and returning if already a valid block tag.
   */
  _getBlockTag(t) {
    if (t == null)
      return "latest";
    switch (t) {
      case "earliest":
        return "0x0";
      case "finalized":
      case "latest":
      case "pending":
      case "safe":
        return t;
    }
    if (q(t))
      return q(t, 32) ? t : ur(t);
    if (typeof t == "bigint" && (t = H(t, "blockTag")), typeof t == "number")
      return t >= 0 ? ur(t) : l(this, De) >= 0 ? ur(l(this, De) + t) : this.getBlockNumber().then((e) => ur(e + t));
    g(!1, "invalid blockTag", "blockTag", t);
  }
  /**
   *  Returns or resolves to a filter for %%filter%%, resolving any ENS
   *  names or [[Addressable]] object and returning if already a valid
   *  filter.
   */
  _getFilter(t) {
    const e = (t.topics || []).map((c) => c == null ? null : Array.isArray(c) ? Xa(c.map((u) => u.toLowerCase())) : c.toLowerCase()), r = "blockHash" in t ? t.blockHash : void 0, s = (c, u, f) => {
      let h;
      switch (c.length) {
        case 0:
          break;
        case 1:
          h = c[0];
          break;
        default:
          c.sort(), h = c;
      }
      if (r && (u != null || f != null))
        throw new Error("invalid filter");
      const p = {};
      return h && (p.address = h), e.length && (p.topics = e), u && (p.fromBlock = u), f && (p.toBlock = f), r && (p.blockHash = r), p;
    };
    let i = [];
    if (t.address)
      if (Array.isArray(t.address))
        for (const c of t.address)
          i.push(this._getAddress(c));
      else
        i.push(this._getAddress(t.address));
    let a;
    "fromBlock" in t && (a = this._getBlockTag(t.fromBlock));
    let o;
    return "toBlock" in t && (o = this._getBlockTag(t.toBlock)), i.filter((c) => typeof c != "string").length || a != null && typeof a != "string" || o != null && typeof o != "string" ? Promise.all([Promise.all(i), a, o]).then((c) => s(c[0], c[1], c[2])) : s(i, a, o);
  }
  /**
   *  Returns or resovles to a transaction for %%request%%, resolving
   *  any ENS names or [[Addressable]] and returning if already a valid
   *  transaction.
   */
  _getTransactionRequest(t) {
    const e = Li(t), r = [];
    if (["to", "from"].forEach((s) => {
      if (e[s] == null)
        return;
      const i = Et(e[s], this);
      yi(i) ? r.push(async function() {
        e[s] = await i;
      }()) : e[s] = i;
    }), e.blockTag != null) {
      const s = this._getBlockTag(e.blockTag);
      yi(s) ? r.push(async function() {
        e.blockTag = await s;
      }()) : e.blockTag = s;
    }
    return r.length ? async function() {
      return await Promise.all(r), e;
    }() : e;
  }
  async getNetwork() {
    if (l(this, Ft) == null) {
      const s = this._detectNetwork().then((i) => (this.emit("network", i, null), i), (i) => {
        throw l(this, Ft) === s && d(this, Ft, null), i;
      });
      return d(this, Ft, s), (await s).clone();
    }
    const t = l(this, Ft), [e, r] = await Promise.all([
      t,
      this._detectNetwork()
      // The actual connected network
    ]);
    return e.chainId !== r.chainId && (l(this, Ln) ? (this.emit("network", r, e), l(this, Ft) === t && d(this, Ft, Promise.resolve(r))) : N(!1, `network changed: ${e.chainId} => ${r.chainId} `, "NETWORK_ERROR", {
      event: "changed"
    })), e.clone();
  }
  async getFeeData() {
    const t = await this.getNetwork(), e = async () => {
      const { _block: s, gasPrice: i, priorityFee: a } = await yt({
        _block: C(this, Zs, to).call(this, "latest", !1),
        gasPrice: (async () => {
          try {
            const f = await C(this, mt, kt).call(this, { method: "getGasPrice" });
            return D(f, "%response");
          } catch {
          }
          return null;
        })(),
        priorityFee: (async () => {
          try {
            const f = await C(this, mt, kt).call(this, { method: "getPriorityFee" });
            return D(f, "%response");
          } catch {
          }
          return null;
        })()
      });
      let o = null, c = null;
      const u = this._wrapBlock(s, t);
      return u && u.baseFeePerGas && (c = a ?? BigInt("1000000000"), o = u.baseFeePerGas * ug + c), new Hc(i, o, c);
    }, r = t.getPlugin("org.ethers.plugins.network.FetchUrlFeeDataPlugin");
    if (r) {
      const s = new _e(r.url), i = await r.processFunc(e, this, s);
      return new Hc(i.gasPrice, i.maxFeePerGas, i.maxPriorityFeePerGas);
    }
    return await e();
  }
  async estimateGas(t) {
    let e = this._getTransactionRequest(t);
    return yi(e) && (e = await e), D(await C(this, mt, kt).call(this, {
      method: "estimateGas",
      transaction: e
    }), "%response");
  }
  async call(t) {
    const { tx: e, blockTag: r } = await yt({
      tx: this._getTransactionRequest(t),
      blockTag: this._getBlockTag(t.blockTag)
    });
    return await C(this, js, $a).call(this, C(this, Ys, qa).call(this, e, r, t.enableCcipRead ? 0 : -1));
  }
  async getBalance(t, e) {
    return D(await C(this, Fn, Es).call(this, { method: "getBalance" }, t, e), "%response");
  }
  async getTransactionCount(t, e) {
    return H(await C(this, Fn, Es).call(this, { method: "getTransactionCount" }, t, e), "%response");
  }
  async getCode(t, e) {
    return k(await C(this, Fn, Es).call(this, { method: "getCode" }, t, e));
  }
  async getStorage(t, e, r) {
    const s = D(e, "position");
    return k(await C(this, Fn, Es).call(this, { method: "getStorage", position: s }, t, r));
  }
  // Write
  async broadcastTransaction(t) {
    const { blockNumber: e, hash: r, network: s } = await yt({
      blockNumber: this.getBlockNumber(),
      hash: this._perform({
        method: "broadcastTransaction",
        signedTransaction: t
      }),
      network: this.getNetwork()
    }), i = Di.from(t);
    if (i.hash !== r)
      throw new Error("@TODO: the returned hash did not match");
    return this._wrapTransactionResponse(i, s).replaceableTransaction(e);
  }
  // Queries
  async getBlock(t, e) {
    const { network: r, params: s } = await yt({
      network: this.getNetwork(),
      params: C(this, Zs, to).call(this, t, !!e)
    });
    return s == null ? null : this._wrapBlock(s, r);
  }
  async getTransaction(t) {
    const { network: e, params: r } = await yt({
      network: this.getNetwork(),
      params: C(this, mt, kt).call(this, { method: "getTransaction", hash: t })
    });
    return r == null ? null : this._wrapTransactionResponse(r, e);
  }
  async getTransactionReceipt(t) {
    const { network: e, params: r } = await yt({
      network: this.getNetwork(),
      params: C(this, mt, kt).call(this, { method: "getTransactionReceipt", hash: t })
    });
    if (r == null)
      return null;
    if (r.gasPrice == null && r.effectiveGasPrice == null) {
      const s = await C(this, mt, kt).call(this, { method: "getTransaction", hash: t });
      if (s == null)
        throw new Error("report this; could not find tx or effectiveGasPrice");
      r.effectiveGasPrice = s.gasPrice;
    }
    return this._wrapTransactionReceipt(r, e);
  }
  async getTransactionResult(t) {
    const { result: e } = await yt({
      network: this.getNetwork(),
      result: C(this, mt, kt).call(this, { method: "getTransactionResult", hash: t })
    });
    return e == null ? null : k(e);
  }
  // Bloom-filter Queries
  async getLogs(t) {
    let e = this._getFilter(t);
    yi(e) && (e = await e);
    const { network: r, params: s } = await yt({
      network: this.getNetwork(),
      params: C(this, mt, kt).call(this, { method: "getLogs", filter: e })
    });
    return s.map((i) => this._wrapLog(i, r));
  }
  // ENS
  _getProvider(t) {
    N(!1, "provider cannot connect to target network", "UNSUPPORTED_OPERATION", {
      operation: "_getProvider()"
    });
  }
  async getResolver(t) {
    return await Mi.fromName(this, t);
  }
  async getAvatar(t) {
    const e = await this.getResolver(t);
    return e ? await e.getAvatar() : null;
  }
  async resolveName(t) {
    const e = await this.getResolver(t);
    return e ? await e.getAddress() : null;
  }
  async lookupAddress(t) {
    t = Q(t);
    const e = Ja(t.substring(2).toLowerCase() + ".addr.reverse");
    try {
      const r = await Mi.getEnsAddress(this), i = await new Ts(r, [
        "function resolver(bytes32) view returns (address)"
      ], this).resolver(e);
      if (i == null || i === Ma)
        return null;
      const o = await new Ts(i, [
        "function name(bytes32) view returns (string)"
      ], this).name(e);
      return await this.resolveName(o) !== t ? null : o;
    } catch (r) {
      if (jt(r, "BAD_DATA") && r.value === "0x" || jt(r, "CALL_EXCEPTION"))
        return null;
      throw r;
    }
    return null;
  }
  async waitForTransaction(t, e, r) {
    const s = e ?? 1;
    return s === 0 ? this.getTransactionReceipt(t) : new Promise(async (i, a) => {
      let o = null;
      const c = async (u) => {
        try {
          const f = await this.getTransactionReceipt(t);
          if (f != null && u - f.blockNumber + 1 >= s) {
            i(f), o && (clearTimeout(o), o = null);
            return;
          }
        } catch (f) {
          console.log("EEE", f);
        }
        this.once("block", c);
      };
      r != null && (o = setTimeout(() => {
        o != null && (o = null, this.off("block", c), a(nt("timeout", "TIMEOUT", { reason: "timeout" })));
      }, r)), c(await this.getBlockNumber());
    });
  }
  async waitForBlock(t) {
    N(!1, "not implemented yet", "NOT_IMPLEMENTED", {
      operation: "waitForBlock"
    });
  }
  /**
   *  Clear a timer created using the [[_setTimeout]] method.
   */
  _clearTimeout(t) {
    const e = l(this, zt).get(t);
    e && (e.timer && clearTimeout(e.timer), l(this, zt).delete(t));
  }
  /**
   *  Create a timer that will execute %%func%% after at least %%timeout%%
   *  (in ms). If %%timeout%% is unspecified, then %%func%% will execute
   *  in the next event loop.
   *
   *  [Pausing](AbstractProvider-paused) the provider will pause any
   *  associated timers.
   */
  _setTimeout(t, e) {
    e == null && (e = 0);
    const r = ds(this, Ws)._++, s = () => {
      l(this, zt).delete(r), t();
    };
    if (this.paused)
      l(this, zt).set(r, { timer: null, func: s, time: e });
    else {
      const i = setTimeout(s, e);
      l(this, zt).set(r, { timer: i, func: s, time: Ca() });
    }
    return r;
  }
  /**
   *  Perform %%func%% on each subscriber.
   */
  _forEachSubscriber(t) {
    for (const e of l(this, ht).values())
      t(e.subscriber);
  }
  /**
   *  Sub-classes may override this to customize subscription
   *  implementations.
   */
  _getSubscriber(t) {
    switch (t.type) {
      case "debug":
      case "error":
      case "network":
        return new Fl(t.type);
      case "block": {
        const e = new ig(this);
        return e.pollingInterval = this.pollingInterval, e;
      }
      case "safe":
      case "finalized":
        return new ag(this, t.type);
      case "event":
        return new Ro(this, t.filter);
      case "transaction":
        return new cg(this, t.hash);
      case "orphan":
        return new og(this, t.filter);
    }
    throw new Error(`unsupported event: ${t.type}`);
  }
  /**
   *  If a [[Subscriber]] fails and needs to replace itself, this
   *  method may be used.
   *
   *  For example, this is used for providers when using the
   *  ``eth_getFilterChanges`` method, which can return null if state
   *  filters are not supported by the backend, allowing the Subscriber
   *  to swap in a [[PollingEventSubscriber]].
   */
  _recoverSubscriber(t, e) {
    for (const r of l(this, ht).values())
      if (r.subscriber === t) {
        r.started && r.subscriber.stop(), r.subscriber = e, r.started && e.start(), l(this, dt) != null && e.pause(l(this, dt));
        break;
      }
  }
  async on(t, e) {
    const r = await C(this, qr, Bi).call(this, t);
    return r.listeners.push({ listener: e, once: !1 }), r.started || (r.subscriber.start(), r.started = !0, l(this, dt) != null && r.subscriber.pause(l(this, dt))), this;
  }
  async once(t, e) {
    const r = await C(this, qr, Bi).call(this, t);
    return r.listeners.push({ listener: e, once: !0 }), r.started || (r.subscriber.start(), r.started = !0, l(this, dt) != null && r.subscriber.pause(l(this, dt))), this;
  }
  async emit(t, ...e) {
    const r = await C(this, Mn, bs).call(this, t, e);
    if (!r || r.listeners.length === 0)
      return !1;
    const s = r.listeners.length;
    return r.listeners = r.listeners.filter(({ listener: i, once: a }) => {
      const o = new au(this, a ? null : i, t);
      try {
        i.call(this, ...e, o);
      } catch {
      }
      return !a;
    }), r.listeners.length === 0 && (r.started && r.subscriber.stop(), l(this, ht).delete(r.tag)), s > 0;
  }
  async listenerCount(t) {
    if (t) {
      const r = await C(this, Mn, bs).call(this, t);
      return r ? r.listeners.length : 0;
    }
    let e = 0;
    for (const { listeners: r } of l(this, ht).values())
      e += r.length;
    return e;
  }
  async listeners(t) {
    if (t) {
      const r = await C(this, Mn, bs).call(this, t);
      return r ? r.listeners.map(({ listener: s }) => s) : [];
    }
    let e = [];
    for (const { listeners: r } of l(this, ht).values())
      e = e.concat(r.map(({ listener: s }) => s));
    return e;
  }
  async off(t, e) {
    const r = await C(this, Mn, bs).call(this, t);
    if (!r)
      return this;
    if (e) {
      const s = r.listeners.map(({ listener: i }) => i).indexOf(e);
      s >= 0 && r.listeners.splice(s, 1);
    }
    return (!e || r.listeners.length === 0) && (r.started && r.subscriber.stop(), l(this, ht).delete(r.tag)), this;
  }
  async removeAllListeners(t) {
    if (t) {
      const { tag: e, started: r, subscriber: s } = await C(this, qr, Bi).call(this, t);
      r && s.stop(), l(this, ht).delete(e);
    } else
      for (const [e, { started: r, subscriber: s }] of l(this, ht))
        r && s.stop(), l(this, ht).delete(e);
    return this;
  }
  // Alias for "on"
  async addListener(t, e) {
    return await this.on(t, e);
  }
  // Alias for "off"
  async removeListener(t, e) {
    return this.off(t, e);
  }
  /**
   *  If this provider has been destroyed using the [[destroy]] method.
   *
   *  Once destroyed, all resources are reclaimed, internal event loops
   *  and timers are cleaned up and no further requests may be sent to
   *  the provider.
   */
  get destroyed() {
    return l(this, jr);
  }
  /**
   *  Sub-classes may use this to shutdown any sockets or release their
   *  resources and reject any pending requests.
   *
   *  Sub-classes **must** call ``super.destroy()``.
   */
  destroy() {
    this.removeAllListeners();
    for (const t of l(this, zt).keys())
      this._clearTimeout(t);
    d(this, jr, !0);
  }
  /**
   *  Whether the provider is currently paused.
   *
   *  A paused provider will not emit any events, and generally should
   *  not make any requests to the network, but that is up to sub-classes
   *  to manage.
   *
   *  Setting ``paused = true`` is identical to calling ``.pause(false)``,
   *  which will buffer any events that occur while paused until the
   *  provider is unpaused.
   */
  get paused() {
    return l(this, dt) != null;
  }
  set paused(t) {
    !!t !== this.paused && (this.paused ? this.resume() : this.pause(!1));
  }
  /**
   *  Pause the provider. If %%dropWhilePaused%%, any events that occur
   *  while paused are dropped, otherwise all events will be emitted once
   *  the provider is unpaused.
   */
  pause(t) {
    if (d(this, De, -1), l(this, dt) != null) {
      if (l(this, dt) == !!t)
        return;
      N(!1, "cannot change pause type; resume first", "UNSUPPORTED_OPERATION", {
        operation: "pause"
      });
    }
    this._forEachSubscriber((e) => e.pause(t)), d(this, dt, !!t);
    for (const e of l(this, zt).values())
      e.timer && clearTimeout(e.timer), e.time = Ca() - e.time;
  }
  /**
   *  Resume the provider.
   */
  resume() {
    if (l(this, dt) != null) {
      this._forEachSubscriber((t) => t.resume()), d(this, dt, null);
      for (const t of l(this, zt).values()) {
        let e = t.time;
        e < 0 && (e = 0), t.time = Ca(), setTimeout(t.func, e);
      }
    }
  }
}
ht = new WeakMap(), un = new WeakMap(), dt = new WeakMap(), jr = new WeakMap(), Ft = new WeakMap(), Ln = new WeakMap(), ln = new WeakMap(), De = new WeakMap(), Ws = new WeakMap(), zt = new WeakMap(), Zr = new WeakMap(), Xr = new WeakMap(), mt = new WeakSet(), kt = async function(t) {
  const e = l(this, Xr).cacheTimeout;
  if (e < 0)
    return await this._perform(t);
  const r = Pi(t.method, t);
  let s = l(this, ln).get(r);
  return s || (s = this._perform(t), l(this, ln).set(r, s), setTimeout(() => {
    l(this, ln).get(r) === s && l(this, ln).delete(r);
  }, e)), await s;
}, Ys = new WeakSet(), qa = async function(t, e, r) {
  N(r < lg, "CCIP read exceeded maximum redirections", "OFFCHAIN_FAULT", {
    reason: "TOO_MANY_REDIRECTS",
    transaction: Object.assign({}, t, { blockTag: e, enableCcipRead: !0 })
  });
  const s = Li(t);
  try {
    return k(await this._perform({ method: "call", transaction: s, blockTag: e }));
  } catch (i) {
    if (!this.disableCcipRead && uo(i) && i.data && r >= 0 && e === "latest" && s.to != null && $(i.data, 0, 4) === "0x556f1830") {
      const a = i.data, o = await Et(s.to, this);
      let c;
      try {
        c = wg($(i.data, 4));
      } catch (h) {
        N(!1, h.message, "OFFCHAIN_FAULT", {
          reason: "BAD_DATA",
          transaction: s,
          info: { data: a }
        });
      }
      N(c.sender.toLowerCase() === o.toLowerCase(), "CCIP Read sender mismatch", "CALL_EXCEPTION", {
        action: "call",
        data: a,
        reason: "OffchainLookup",
        transaction: s,
        invocation: null,
        revert: {
          signature: "OffchainLookup(address,string[],bytes,bytes4,bytes)",
          name: "OffchainLookup",
          args: c.errorArgs
        }
      });
      const u = await this.ccipReadFetch(s, c.calldata, c.urls);
      N(u != null, "CCIP Read failed to fetch data", "OFFCHAIN_FAULT", {
        reason: "FETCH_FAILED",
        transaction: s,
        info: { data: i.data, errorArgs: c.errorArgs }
      });
      const f = {
        to: o,
        data: rt([c.selector, yg([u, c.extraData])])
      };
      this.emit("debug", { action: "sendCcipReadCall", transaction: f });
      try {
        const h = await C(this, Ys, qa).call(this, f, e, r + 1);
        return this.emit("debug", { action: "receiveCcipReadCallResult", transaction: Object.assign({}, f), result: h }), h;
      } catch (h) {
        throw this.emit("debug", { action: "receiveCcipReadCallError", transaction: Object.assign({}, f), error: h }), h;
      }
    }
    throw i;
  }
}, js = new WeakSet(), $a = async function(t) {
  const { value: e } = await yt({
    network: this.getNetwork(),
    value: t
  });
  return e;
}, Fn = new WeakSet(), Es = async function(t, e, r) {
  let s = this._getAddress(e), i = this._getBlockTag(r);
  return (typeof s != "string" || typeof i != "string") && ([s, i] = await Promise.all([s, i])), await C(this, js, $a).call(this, C(this, mt, kt).call(this, Object.assign(t, { address: s, blockTag: i })));
}, Zs = new WeakSet(), to = async function(t, e) {
  if (q(t, 32))
    return await C(this, mt, kt).call(this, {
      method: "getBlock",
      blockHash: t,
      includeTransactions: e
    });
  let r = this._getBlockTag(t);
  return typeof r != "string" && (r = await r), await C(this, mt, kt).call(this, {
    method: "getBlock",
    blockTag: r,
    includeTransactions: e
  });
}, Mn = new WeakSet(), bs = async function(t, e) {
  let r = await Ba(t, this);
  return r.type === "event" && e && e.length > 0 && e[0].removed === !0 && (r = await Ba({ orphan: "drop-log", log: e[0] }, this)), l(this, ht).get(r.tag) || null;
}, qr = new WeakSet(), Bi = async function(t) {
  const e = await Ba(t, this), r = e.tag;
  let s = l(this, ht).get(r);
  return s || (s = { subscriber: this._getSubscriber(e), tag: r, addressableMap: /* @__PURE__ */ new WeakMap(), nameMap: /* @__PURE__ */ new Map(), started: !1, listeners: [] }, l(this, ht).set(r, s)), s;
};
function pg(n, t) {
  try {
    const e = eo(n, t);
    if (e)
      return fo(e);
  } catch {
  }
  return null;
}
function eo(n, t) {
  if (n === "0x")
    return null;
  try {
    const e = H($(n, t, t + 32)), r = H($(n, e, e + 32));
    return $(n, e + 32, e + 32 + r);
  } catch {
  }
  return null;
}
function jc(n) {
  const t = Gt(n);
  if (t.length > 32)
    throw new Error("internal; should not happen");
  const e = new Uint8Array(32);
  return e.set(t, 32 - t.length), e;
}
function gg(n) {
  if (n.length % 32 === 0)
    return n;
  const t = new Uint8Array(Math.ceil(n.length / 32) * 32);
  return t.set(n), t;
}
const mg = new Uint8Array([]);
function yg(n) {
  const t = [];
  let e = 0;
  for (let r = 0; r < n.length; r++)
    t.push(mg), e += 32;
  for (let r = 0; r < n.length; r++) {
    const s = J(n[r]);
    t[r] = jc(e), t.push(jc(s.length)), t.push(gg(s)), e += 32 + Math.ceil(s.length / 32) * 32;
  }
  return rt(t);
}
const Zc = "0x0000000000000000000000000000000000000000000000000000000000000000";
function wg(n) {
  const t = {
    sender: "",
    urls: [],
    calldata: "",
    selector: "",
    extraData: "",
    errorArgs: []
  };
  N(pr(n) >= 5 * 32, "insufficient OffchainLookup data", "OFFCHAIN_FAULT", {
    reason: "insufficient OffchainLookup data"
  });
  const e = $(n, 0, 32);
  N($(e, 0, 12) === $(Zc, 0, 12), "corrupt OffchainLookup sender", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup sender"
  }), t.sender = $(e, 12);
  try {
    const r = [], s = H($(n, 32, 64)), i = H($(n, s, s + 32)), a = $(n, s + 32);
    for (let o = 0; o < i; o++) {
      const c = pg(a, o * 32);
      if (c == null)
        throw new Error("abort");
      r.push(c);
    }
    t.urls = r;
  } catch {
    N(!1, "corrupt OffchainLookup urls", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup urls"
    });
  }
  try {
    const r = eo(n, 64);
    if (r == null)
      throw new Error("abort");
    t.calldata = r;
  } catch {
    N(!1, "corrupt OffchainLookup calldata", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup calldata"
    });
  }
  N($(n, 100, 128) === $(Zc, 0, 28), "corrupt OffchainLookup callbaackSelector", "OFFCHAIN_FAULT", {
    reason: "corrupt OffchainLookup callbaackSelector"
  }), t.selector = $(n, 96, 100);
  try {
    const r = eo(n, 128);
    if (r == null)
      throw new Error("abort");
    t.extraData = r;
  } catch {
    N(!1, "corrupt OffchainLookup extraData", "OFFCHAIN_FAULT", {
      reason: "corrupt OffchainLookup extraData"
    });
  }
  return t.errorArgs = "sender,urls,calldata,selector,extraData".split(/,/).map((r) => t[r]), t;
}
function nr(n, t) {
  if (n.provider)
    return n.provider;
  N(!1, "missing provider", "UNSUPPORTED_OPERATION", { operation: t });
}
async function Xc(n, t) {
  let e = Li(t);
  if (e.to != null && (e.to = Et(e.to, n)), e.from != null) {
    const r = e.from;
    e.from = Promise.all([
      n.getAddress(),
      Et(r, n)
    ]).then(([s, i]) => (g(s.toLowerCase() === i.toLowerCase(), "transaction from mismatch", "tx.from", i), s));
  } else
    e.from = n.getAddress();
  return await yt(e);
}
class Ag {
  /**
   *  Creates a new Signer connected to %%provider%%.
   */
  constructor(t) {
    /**
     *  The provider this signer is connected to.
     */
    w(this, "provider");
    F(this, { provider: t || null });
  }
  async getNonce(t) {
    return nr(this, "getTransactionCount").getTransactionCount(await this.getAddress(), t);
  }
  async populateCall(t) {
    return await Xc(this, t);
  }
  async populateTransaction(t) {
    const e = nr(this, "populateTransaction"), r = await Xc(this, t);
    r.nonce == null && (r.nonce = await this.getNonce("pending")), r.gasLimit == null && (r.gasLimit = await this.estimateGas(r));
    const s = await this.provider.getNetwork();
    if (r.chainId != null) {
      const a = D(r.chainId);
      g(a === s.chainId, "transaction chainId mismatch", "tx.chainId", t.chainId);
    } else
      r.chainId = s.chainId;
    const i = r.maxFeePerGas != null || r.maxPriorityFeePerGas != null;
    if (r.gasPrice != null && (r.type === 2 || i) ? g(!1, "eip-1559 transaction do not support gasPrice", "tx", t) : (r.type === 0 || r.type === 1) && i && g(!1, "pre-eip-1559 transaction do not support maxFeePerGas/maxPriorityFeePerGas", "tx", t), (r.type === 2 || r.type == null) && r.maxFeePerGas != null && r.maxPriorityFeePerGas != null)
      r.type = 2;
    else if (r.type === 0 || r.type === 1) {
      const a = await e.getFeeData();
      N(a.gasPrice != null, "network does not support gasPrice", "UNSUPPORTED_OPERATION", {
        operation: "getGasPrice"
      }), r.gasPrice == null && (r.gasPrice = a.gasPrice);
    } else {
      const a = await e.getFeeData();
      if (r.type == null)
        if (a.maxFeePerGas != null && a.maxPriorityFeePerGas != null)
          if (r.type = 2, r.gasPrice != null) {
            const o = r.gasPrice;
            delete r.gasPrice, r.maxFeePerGas = o, r.maxPriorityFeePerGas = o;
          } else
            r.maxFeePerGas == null && (r.maxFeePerGas = a.maxFeePerGas), r.maxPriorityFeePerGas == null && (r.maxPriorityFeePerGas = a.maxPriorityFeePerGas);
        else
          a.gasPrice != null ? (N(!i, "network does not support EIP-1559", "UNSUPPORTED_OPERATION", {
            operation: "populateTransaction"
          }), r.gasPrice == null && (r.gasPrice = a.gasPrice), r.type = 0) : N(!1, "failed to get consistent fee data", "UNSUPPORTED_OPERATION", {
            operation: "signer.getFeeData"
          });
      else
        r.type === 2 && (r.maxFeePerGas == null && (r.maxFeePerGas = a.maxFeePerGas), r.maxPriorityFeePerGas == null && (r.maxPriorityFeePerGas = a.maxPriorityFeePerGas));
    }
    return await yt(r);
  }
  async estimateGas(t) {
    return nr(this, "estimateGas").estimateGas(await this.populateCall(t));
  }
  async call(t) {
    return nr(this, "call").call(await this.populateCall(t));
  }
  async resolveName(t) {
    return await nr(this, "resolveName").resolveName(t);
  }
  async sendTransaction(t) {
    const e = nr(this, "sendTransaction"), r = await this.populateTransaction(t);
    delete r.from;
    const s = Di.from(r);
    return await e.broadcastTransaction(await this.signTransaction(s));
  }
}
function Eg(n) {
  return JSON.parse(JSON.stringify(n));
}
var It, ge, Gn, fn, _n, $r, Xs, no, qs, ro;
class Ml {
  /**
   *  Creates a new **FilterIdSubscriber** which will used [[_subscribe]]
   *  and [[_emitResults]] to setup the subscription and provide the event
   *  to the %%provider%%.
   */
  constructor(t) {
    A(this, Xs);
    A(this, qs);
    A(this, It, void 0);
    A(this, ge, void 0);
    A(this, Gn, void 0);
    A(this, fn, void 0);
    A(this, _n, void 0);
    A(this, $r, void 0);
    d(this, It, t), d(this, ge, null), d(this, Gn, C(this, Xs, no).bind(this)), d(this, fn, !1), d(this, _n, null), d(this, $r, !1);
  }
  /**
   *  Sub-classes **must** override this to begin the subscription.
   */
  _subscribe(t) {
    throw new Error("subclasses must override this");
  }
  /**
   *  Sub-classes **must** override this handle the events.
   */
  _emitResults(t, e) {
    throw new Error("subclasses must override this");
  }
  /**
   *  Sub-classes **must** override this handle recovery on errors.
   */
  _recover(t) {
    throw new Error("subclasses must override this");
  }
  start() {
    l(this, fn) || (d(this, fn, !0), C(this, Xs, no).call(this, -2));
  }
  stop() {
    l(this, fn) && (d(this, fn, !1), d(this, $r, !0), C(this, qs, ro).call(this), l(this, It).off("block", l(this, Gn)));
  }
  pause(t) {
    t && C(this, qs, ro).call(this), l(this, It).off("block", l(this, Gn));
  }
  resume() {
    this.start();
  }
}
It = new WeakMap(), ge = new WeakMap(), Gn = new WeakMap(), fn = new WeakMap(), _n = new WeakMap(), $r = new WeakMap(), Xs = new WeakSet(), no = async function(t) {
  try {
    l(this, ge) == null && d(this, ge, this._subscribe(l(this, It)));
    let e = null;
    try {
      e = await l(this, ge);
    } catch (i) {
      if (!jt(i, "UNSUPPORTED_OPERATION") || i.operation !== "eth_newFilter")
        throw i;
    }
    if (e == null) {
      d(this, ge, null), l(this, It)._recoverSubscriber(this, this._recover(l(this, It)));
      return;
    }
    const r = await l(this, It).getNetwork();
    if (l(this, _n) || d(this, _n, r), l(this, _n).chainId !== r.chainId)
      throw new Error("chaid changed");
    if (l(this, $r))
      return;
    const s = await l(this, It).send("eth_getFilterChanges", [e]);
    await this._emitResults(l(this, It), s);
  } catch (e) {
    console.log("@TODO", e);
  }
  l(this, It).once("block", l(this, Gn));
}, qs = new WeakSet(), ro = function() {
  const t = l(this, ge);
  t && (d(this, ge, null), t.then((e) => {
    l(this, It).send("eth_uninstallFilter", [e]);
  }));
};
var Hn;
class bg extends Ml {
  /**
   *  Creates a new **FilterIdEventSubscriber** attached to %%provider%%
   *  listening for %%filter%%.
   */
  constructor(e, r) {
    super(e);
    A(this, Hn, void 0);
    d(this, Hn, Eg(r));
  }
  _recover(e) {
    return new Ro(e, l(this, Hn));
  }
  async _subscribe(e) {
    return await e.send("eth_newFilter", [l(this, Hn)]);
  }
  async _emitResults(e, r) {
    for (const s of r)
      e.emit(l(this, Hn), e._wrapLog(s, e._network));
  }
}
Hn = new WeakMap();
class Ig extends Ml {
  async _subscribe(t) {
    return await t.send("eth_newPendingTransactionFilter", []);
  }
  async _emitResults(t, e) {
    for (const r of e)
      t.emit("pending", r);
  }
}
const Ng = "bigint,boolean,function,number,string,symbol".split(/,/g);
function Ci(n) {
  if (n == null || Ng.indexOf(typeof n) >= 0 || typeof n.getAddress == "function")
    return n;
  if (Array.isArray(n))
    return n.map(Ci);
  if (typeof n == "object")
    return Object.keys(n).reduce((t, e) => (t[e] = n[e], t), {});
  throw new Error(`should not happen: ${n} (${typeof n})`);
}
function Tg(n) {
  return new Promise((t) => {
    setTimeout(t, n);
  });
}
function rr(n) {
  return n && n.toLowerCase();
}
function qc(n) {
  return n && typeof n.pollingInterval == "number";
}
const Pg = {
  polling: !1,
  staticNetwork: null,
  batchStallTime: 10,
  batchMaxSize: 1 << 20,
  batchMaxCount: 100,
  cacheTimeout: 250,
  pollingInterval: 4e3
};
class Oa extends Ag {
  constructor(e, r) {
    super(e);
    w(this, "address");
    r = Q(r), F(this, { address: r });
  }
  connect(e) {
    N(!1, "cannot reconnect JsonRpcSigner", "UNSUPPORTED_OPERATION", {
      operation: "signer.connect"
    });
  }
  async getAddress() {
    return this.address;
  }
  // JSON-RPC will automatially fill in nonce, etc. so we just check from
  async populateTransaction(e) {
    return await this.populateCall(e);
  }
  // Returns just the hash of the transaction after sent, which is what
  // the bare JSON-RPC API does;
  async sendUncheckedTransaction(e) {
    const r = Ci(e), s = [];
    if (r.from) {
      const a = r.from;
      s.push((async () => {
        const o = await Et(a, this.provider);
        g(o != null && o.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", e), r.from = o;
      })());
    } else
      r.from = this.address;
    if (r.gasLimit == null && s.push((async () => {
      r.gasLimit = await this.provider.estimateGas({ ...r, from: this.address });
    })()), r.to != null) {
      const a = r.to;
      s.push((async () => {
        r.to = await Et(a, this.provider);
      })());
    }
    s.length && await Promise.all(s);
    const i = this.provider.getRpcTransaction(r);
    return this.provider.send("eth_sendTransaction", [i]);
  }
  async sendTransaction(e) {
    const r = await this.provider.getBlockNumber(), s = await this.sendUncheckedTransaction(e);
    return await new Promise((i, a) => {
      const o = [1e3, 100], c = async () => {
        const u = await this.provider.getTransaction(s);
        if (u != null) {
          i(u.replaceableTransaction(r));
          return;
        }
        this.provider._setTimeout(() => {
          c();
        }, o.pop() || 4e3);
      };
      c();
    });
  }
  async signTransaction(e) {
    const r = Ci(e);
    if (r.from) {
      const i = await Et(r.from, this.provider);
      g(i != null && i.toLowerCase() === this.address.toLowerCase(), "from address mismatch", "transaction", e), r.from = i;
    } else
      r.from = this.address;
    const s = this.provider.getRpcTransaction(r);
    return await this.provider.send("eth_signTransaction", [s]);
  }
  async signMessage(e) {
    const r = typeof e == "string" ? Me(e) : e;
    return await this.provider.send("personal_sign", [
      k(r),
      this.address.toLowerCase()
    ]);
  }
  async signTypedData(e, r, s) {
    const i = Ci(s), a = await Ui.resolveNames(e, r, i, async (o) => {
      const c = await Et(o);
      return g(c != null, "TypedData does not support null address", "value", o), c;
    });
    return await this.provider.send("eth_signTypedData_v4", [
      this.address.toLowerCase(),
      JSON.stringify(Ui.getPayload(a.domain, r, a.value))
    ]);
  }
  async unlock(e) {
    return this.provider.send("personal_unlockAccount", [
      this.address.toLowerCase(),
      e,
      null
    ]);
  }
  // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign
  async _legacySignMessage(e) {
    const r = typeof e == "string" ? Me(e) : e;
    return await this.provider.send("eth_sign", [
      this.address.toLowerCase(),
      k(r)
    ]);
  }
}
var Qn, ts, Ue, me, re, Wt, Mt, $s, so;
class Bg extends dg {
  constructor(e, r) {
    super(e, r);
    A(this, $s);
    A(this, Qn, void 0);
    // The next ID to use for the JSON-RPC ID field
    A(this, ts, void 0);
    // Payloads are queued and triggered in batches using the drainTimer
    A(this, Ue, void 0);
    A(this, me, void 0);
    A(this, re, void 0);
    A(this, Wt, void 0);
    A(this, Mt, void 0);
    d(this, ts, 1), d(this, Qn, Object.assign({}, Pg, r || {})), d(this, Ue, []), d(this, me, null), d(this, Wt, null), d(this, Mt, null);
    {
      let i = null;
      const a = new Promise((o) => {
        i = o;
      });
      d(this, re, { promise: a, resolve: i });
    }
    const s = this._getOption("staticNetwork");
    typeof s == "boolean" ? (g(!s || e !== "any", "staticNetwork cannot be used on special network 'any'", "options", r), s && e != null && d(this, Wt, Ae.from(e))) : s && (g(e == null || s.matches(e), "staticNetwork MUST match network object", "options", r), d(this, Wt, s));
  }
  /**
   *  Returns the value associated with the option %%key%%.
   *
   *  Sub-classes can use this to inquire about configuration options.
   */
  _getOption(e) {
    return l(this, Qn)[e];
  }
  /**
   *  Gets the [[Network]] this provider has committed to. On each call, the network
   *  is detected, and if it has changed, the call will reject.
   */
  get _network() {
    return N(l(this, Wt), "network is not available yet", "NETWORK_ERROR"), l(this, Wt);
  }
  /**
   *  Resolves to the non-normalized value by performing %%req%%.
   *
   *  Sub-classes may override this to modify behavior of actions,
   *  and should generally call ``super._perform`` as a fallback.
   */
  async _perform(e) {
    if (e.method === "call" || e.method === "estimateGas") {
      let s = e.transaction;
      if (s && s.type != null && D(s.type) && s.maxFeePerGas == null && s.maxPriorityFeePerGas == null) {
        const i = await this.getFeeData();
        i.maxFeePerGas == null && i.maxPriorityFeePerGas == null && (e = Object.assign({}, e, {
          transaction: Object.assign({}, s, { type: void 0 })
        }));
      }
    }
    const r = this.getRpcRequest(e);
    return r != null ? await this.send(r.method, r.args) : super._perform(e);
  }
  /**
   *  Sub-classes may override this; it detects the *actual* network that
   *  we are **currently** connected to.
   *
   *  Keep in mind that [[send]] may only be used once [[ready]], otherwise the
   *  _send primitive must be used instead.
   */
  async _detectNetwork() {
    const e = this._getOption("staticNetwork");
    if (e)
      if (e === !0) {
        if (l(this, Wt))
          return l(this, Wt);
      } else
        return e;
    return l(this, Mt) ? await l(this, Mt) : this.ready ? (d(this, Mt, (async () => {
      const r = Ae.from(D(await this.send("eth_chainId", [])));
      return d(this, Mt, null), r;
    })()), await l(this, Mt)) : (d(this, Mt, (async () => {
      const r = {
        id: ds(this, ts)._++,
        method: "eth_chainId",
        params: [],
        jsonrpc: "2.0"
      };
      this.emit("debug", { action: "sendRpcPayload", payload: r });
      let s;
      try {
        s = (await this._send(r))[0], d(this, Mt, null);
      } catch (i) {
        throw d(this, Mt, null), this.emit("debug", { action: "receiveRpcError", error: i }), i;
      }
      if (this.emit("debug", { action: "receiveRpcResult", result: s }), "result" in s)
        return Ae.from(D(s.result));
      throw this.getRpcError(r, s);
    })()), await l(this, Mt));
  }
  /**
   *  Sub-classes **MUST** call this. Until [[_start]] has been called, no calls
   *  will be passed to [[_send]] from [[send]]. If it is overridden, then
   *  ``super._start()`` **MUST** be called.
   *
   *  Calling it multiple times is safe and has no effect.
   */
  _start() {
    l(this, re) == null || l(this, re).resolve == null || (l(this, re).resolve(), d(this, re, null), (async () => {
      for (; l(this, Wt) == null && !this.destroyed; )
        try {
          d(this, Wt, await this._detectNetwork());
        } catch (e) {
          if (this.destroyed)
            break;
          console.log("JsonRpcProvider failed to detect network and cannot start up; retry in 1s (perhaps the URL is wrong or the node is not started)"), this.emit("error", nt("failed to bootstrap network detection", "NETWORK_ERROR", { event: "initial-network-discovery", info: { error: e } })), await Tg(1e3);
        }
      C(this, $s, so).call(this);
    })());
  }
  /**
   *  Resolves once the [[_start]] has been called. This can be used in
   *  sub-classes to defer sending data until the connection has been
   *  established.
   */
  async _waitUntilReady() {
    if (l(this, re) != null)
      return await l(this, re).promise;
  }
  /**
   *  Return a Subscriber that will manage the %%sub%%.
   *
   *  Sub-classes may override this to modify the behavior of
   *  subscription management.
   */
  _getSubscriber(e) {
    return e.type === "pending" ? new Ig(this) : e.type === "event" ? this._getOption("polling") ? new Ro(this, e.filter) : new bg(this, e.filter) : e.type === "orphan" && e.filter.orphan === "drop-log" ? new Fl("orphan") : super._getSubscriber(e);
  }
  /**
   *  Returns true only if the [[_start]] has been called.
   */
  get ready() {
    return l(this, re) == null;
  }
  /**
   *  Returns %%tx%% as a normalized JSON-RPC transaction request,
   *  which has all values hexlified and any numeric values converted
   *  to Quantity values.
   */
  getRpcTransaction(e) {
    const r = {};
    return ["chainId", "gasLimit", "gasPrice", "type", "maxFeePerGas", "maxPriorityFeePerGas", "nonce", "value"].forEach((s) => {
      if (e[s] == null)
        return;
      let i = s;
      s === "gasLimit" && (i = "gas"), r[i] = ur(D(e[s], `tx.${s}`));
    }), ["from", "to", "data"].forEach((s) => {
      e[s] != null && (r[s] = k(e[s]));
    }), e.accessList && (r.accessList = Zn(e.accessList)), r;
  }
  /**
   *  Returns the request method and arguments required to perform
   *  %%req%%.
   */
  getRpcRequest(e) {
    switch (e.method) {
      case "chainId":
        return { method: "eth_chainId", args: [] };
      case "getBlockNumber":
        return { method: "eth_blockNumber", args: [] };
      case "getGasPrice":
        return { method: "eth_gasPrice", args: [] };
      case "getPriorityFee":
        return { method: "eth_maxPriorityFeePerGas", args: [] };
      case "getBalance":
        return {
          method: "eth_getBalance",
          args: [rr(e.address), e.blockTag]
        };
      case "getTransactionCount":
        return {
          method: "eth_getTransactionCount",
          args: [rr(e.address), e.blockTag]
        };
      case "getCode":
        return {
          method: "eth_getCode",
          args: [rr(e.address), e.blockTag]
        };
      case "getStorage":
        return {
          method: "eth_getStorageAt",
          args: [
            rr(e.address),
            "0x" + e.position.toString(16),
            e.blockTag
          ]
        };
      case "broadcastTransaction":
        return {
          method: "eth_sendRawTransaction",
          args: [e.signedTransaction]
        };
      case "getBlock":
        if ("blockTag" in e)
          return {
            method: "eth_getBlockByNumber",
            args: [e.blockTag, !!e.includeTransactions]
          };
        if ("blockHash" in e)
          return {
            method: "eth_getBlockByHash",
            args: [e.blockHash, !!e.includeTransactions]
          };
        break;
      case "getTransaction":
        return {
          method: "eth_getTransactionByHash",
          args: [e.hash]
        };
      case "getTransactionReceipt":
        return {
          method: "eth_getTransactionReceipt",
          args: [e.hash]
        };
      case "call":
        return {
          method: "eth_call",
          args: [this.getRpcTransaction(e.transaction), e.blockTag]
        };
      case "estimateGas":
        return {
          method: "eth_estimateGas",
          args: [this.getRpcTransaction(e.transaction)]
        };
      case "getLogs":
        return e.filter && e.filter.address != null && (Array.isArray(e.filter.address) ? e.filter.address = e.filter.address.map(rr) : e.filter.address = rr(e.filter.address)), { method: "eth_getLogs", args: [e.filter] };
    }
    return null;
  }
  /**
   *  Returns an ethers-style Error for the given JSON-RPC error
   *  %%payload%%, coalescing the various strings and error shapes
   *  that different nodes return, coercing them into a machine-readable
   *  standardized error.
   */
  getRpcError(e, r) {
    const { method: s } = e, { error: i } = r;
    if (s === "eth_estimateGas" && i.message) {
      const c = i.message;
      if (!c.match(/revert/i) && c.match(/insufficient funds/i))
        return nt("insufficient funds", "INSUFFICIENT_FUNDS", {
          transaction: e.params[0],
          info: { payload: e, error: i }
        });
    }
    if (s === "eth_call" || s === "eth_estimateGas") {
      const c = io(i), u = Us.getBuiltinCallException(s === "eth_call" ? "call" : "estimateGas", e.params[0], c ? c.data : null);
      return u.info = { error: i, payload: e }, u;
    }
    const a = JSON.stringify(Og(i));
    if (typeof i.message == "string" && i.message.match(/user denied|ethers-user-denied/i))
      return nt("user rejected action", "ACTION_REJECTED", {
        action: {
          eth_sign: "signMessage",
          personal_sign: "signMessage",
          eth_signTypedData_v4: "signTypedData",
          eth_signTransaction: "signTransaction",
          eth_sendTransaction: "sendTransaction",
          eth_requestAccounts: "requestAccess",
          wallet_requestAccounts: "requestAccess"
        }[s] || "unknown",
        reason: "rejected",
        info: { payload: e, error: i }
      });
    if (s === "eth_sendRawTransaction" || s === "eth_sendTransaction") {
      const c = e.params[0];
      if (a.match(/insufficient funds|base fee exceeds gas limit/i))
        return nt("insufficient funds for intrinsic transaction cost", "INSUFFICIENT_FUNDS", {
          transaction: c,
          info: { error: i }
        });
      if (a.match(/nonce/i) && a.match(/too low/i))
        return nt("nonce has already been used", "NONCE_EXPIRED", { transaction: c, info: { error: i } });
      if (a.match(/replacement transaction/i) && a.match(/underpriced/i))
        return nt("replacement fee too low", "REPLACEMENT_UNDERPRICED", { transaction: c, info: { error: i } });
      if (a.match(/only replay-protected/i))
        return nt("legacy pre-eip-155 transactions not supported", "UNSUPPORTED_OPERATION", {
          operation: s,
          info: { transaction: c, info: { error: i } }
        });
    }
    let o = !!a.match(/the method .* does not exist/i);
    return o || i && i.details && i.details.startsWith("Unauthorized method:") && (o = !0), o ? nt("unsupported operation", "UNSUPPORTED_OPERATION", {
      operation: e.method,
      info: { error: i, payload: e }
    }) : nt("could not coalesce error", "UNKNOWN_ERROR", { error: i, payload: e });
  }
  /**
   *  Requests the %%method%% with %%params%% via the JSON-RPC protocol
   *  over the underlying channel. This can be used to call methods
   *  on the backend that do not have a high-level API within the Provider
   *  API.
   *
   *  This method queues requests according to the batch constraints
   *  in the options, assigns the request a unique ID.
   *
   *  **Do NOT override** this method in sub-classes; instead
   *  override [[_send]] or force the options values in the
   *  call to the constructor to modify this method's behavior.
   */
  send(e, r) {
    if (this.destroyed)
      return Promise.reject(nt("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: e }));
    const s = ds(this, ts)._++, i = new Promise((a, o) => {
      l(this, Ue).push({
        resolve: a,
        reject: o,
        payload: { method: e, params: r, id: s, jsonrpc: "2.0" }
      });
    });
    return C(this, $s, so).call(this), i;
  }
  /**
   *  Resolves to the [[Signer]] account for  %%address%% managed by
   *  the client.
   *
   *  If the %%address%% is a number, it is used as an index in the
   *  the accounts from [[listAccounts]].
   *
   *  This can only be used on clients which manage accounts (such as
   *  Geth with imported account or MetaMask).
   *
   *  Throws if the account doesn't exist.
   */
  async getSigner(e) {
    e == null && (e = 0);
    const r = this.send("eth_accounts", []);
    if (typeof e == "number") {
      const i = await r;
      if (e >= i.length)
        throw new Error("no such account");
      return new Oa(this, i[e]);
    }
    const { accounts: s } = await yt({
      network: this.getNetwork(),
      accounts: r
    });
    e = Q(e);
    for (const i of s)
      if (Q(i) === e)
        return new Oa(this, e);
    throw new Error("invalid account");
  }
  async listAccounts() {
    return (await this.send("eth_accounts", [])).map((r) => new Oa(this, r));
  }
  destroy() {
    l(this, me) && (clearTimeout(l(this, me)), d(this, me, null));
    for (const { payload: e, reject: r } of l(this, Ue))
      r(nt("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: e.method }));
    d(this, Ue, []), super.destroy();
  }
}
Qn = new WeakMap(), ts = new WeakMap(), Ue = new WeakMap(), me = new WeakMap(), re = new WeakMap(), Wt = new WeakMap(), Mt = new WeakMap(), $s = new WeakSet(), so = function() {
  if (l(this, me))
    return;
  const e = this._getOption("batchMaxCount") === 1 ? 0 : this._getOption("batchStallTime");
  d(this, me, setTimeout(() => {
    d(this, me, null);
    const r = l(this, Ue);
    for (d(this, Ue, []); r.length; ) {
      const s = [r.shift()];
      for (; r.length && s.length !== l(this, Qn).batchMaxCount; )
        if (s.push(r.shift()), JSON.stringify(s.map((a) => a.payload)).length > l(this, Qn).batchMaxSize) {
          r.unshift(s.pop());
          break;
        }
      (async () => {
        const i = s.length === 1 ? s[0].payload : s.map((a) => a.payload);
        this.emit("debug", { action: "sendRpcPayload", payload: i });
        try {
          const a = await this._send(i);
          this.emit("debug", { action: "receiveRpcResult", result: a });
          for (const { resolve: o, reject: c, payload: u } of s) {
            if (this.destroyed) {
              c(nt("provider destroyed; cancelled request", "UNSUPPORTED_OPERATION", { operation: u.method }));
              continue;
            }
            const f = a.filter((h) => h.id === u.id)[0];
            if (f == null) {
              const h = nt("missing response for request", "BAD_DATA", {
                value: a,
                info: { payload: u }
              });
              this.emit("error", h), c(h);
              continue;
            }
            if ("error" in f) {
              c(this.getRpcError(u, f));
              continue;
            }
            o(f.result);
          }
        } catch (a) {
          this.emit("debug", { action: "receiveRpcError", error: a });
          for (const { reject: o } of s)
            o(a);
        }
      })();
    }
  }, e));
};
var hn;
class Gl extends Bg {
  constructor(e, r) {
    super(e, r);
    A(this, hn, void 0);
    d(this, hn, 4e3);
  }
  _getSubscriber(e) {
    const r = super._getSubscriber(e);
    return qc(r) && (r.pollingInterval = l(this, hn)), r;
  }
  /**
   *  The polling interval (default: 4000 ms)
   */
  get pollingInterval() {
    return l(this, hn);
  }
  set pollingInterval(e) {
    if (!Number.isInteger(e) || e < 0)
      throw new Error("invalid interval");
    d(this, hn, e), this._forEachSubscriber((r) => {
      qc(r) && (r.pollingInterval = l(this, hn));
    });
  }
}
hn = new WeakMap();
var es;
class Cg extends Gl {
  constructor(e, r, s) {
    e == null && (e = "http://localhost:8545");
    super(r, s);
    A(this, es, void 0);
    typeof e == "string" ? d(this, es, new _e(e)) : d(this, es, e.clone());
  }
  _getConnection() {
    return l(this, es).clone();
  }
  async send(e, r) {
    return await this._start(), await super.send(e, r);
  }
  async _send(e) {
    const r = this._getConnection();
    r.body = JSON.stringify(e), r.setHeader("content-type", "application/json");
    const s = await r.send();
    s.assertOk();
    let i = s.bodyJson;
    return Array.isArray(i) || (i = [i]), i;
  }
}
es = new WeakMap();
function io(n) {
  if (n == null)
    return null;
  if (typeof n.message == "string" && n.message.match(/revert/i) && q(n.data))
    return { message: n.message, data: n.data };
  if (typeof n == "object") {
    for (const t in n) {
      const e = io(n[t]);
      if (e)
        return e;
    }
    return null;
  }
  if (typeof n == "string")
    try {
      return io(JSON.parse(n));
    } catch {
    }
  return null;
}
function ao(n, t) {
  if (n != null) {
    if (typeof n.message == "string" && t.push(n.message), typeof n == "object")
      for (const e in n)
        ao(n[e], t);
    if (typeof n == "string")
      try {
        return ao(JSON.parse(n), t);
      } catch {
      }
  }
}
function Og(n) {
  const t = [];
  return ao(n, t), t;
}
var ns;
class xg extends Gl {
  /**
   *  Connnect to the %%ethereum%% provider, optionally forcing the
   *  %%network%%.
   */
  constructor(e, r) {
    super(r, { batchMaxCount: 1 });
    A(this, ns, void 0);
    d(this, ns, async (s, i) => {
      const a = { method: s, params: i };
      this.emit("debug", { action: "sendEip1193Request", payload: a });
      try {
        const o = await e.request(a);
        return this.emit("debug", { action: "receiveEip1193Result", result: o }), o;
      } catch (o) {
        const c = new Error(o.message);
        throw c.code = o.code, c.data = o.data, c.payload = a, this.emit("debug", { action: "receiveEip1193Error", error: c }), c;
      }
    });
  }
  async send(e, r) {
    return await this._start(), await super.send(e, r);
  }
  async _send(e) {
    g(!Array.isArray(e), "EIP-1193 does not support batch request", "payload", e);
    try {
      const r = await l(this, ns).call(this, e.method, e.params || []);
      return [{ id: e.id, result: r }];
    } catch (r) {
      return [{
        id: e.id,
        error: { code: r.code, data: r.data, message: r.message }
      }];
    }
  }
  getRpcError(e, r) {
    switch (r = JSON.parse(JSON.stringify(r)), r.error.code || -1) {
      case 4001:
        r.error.message = `ethers-user-denied: ${r.error.message}`;
        break;
      case 4200:
        r.error.message = `ethers-unsupported: ${r.error.message}`;
        break;
    }
    return super.getRpcError(e, r);
  }
  /**
   *  Resolves to ``true`` if the provider manages the %%address%%.
   */
  async hasSigner(e) {
    e == null && (e = 0);
    const r = await this.send("eth_accounts", []);
    return typeof e == "number" ? r.length > e : (e = e.toLowerCase(), r.filter((s) => s.toLowerCase() === e).length !== 0);
  }
  async getSigner(e) {
    if (e == null && (e = 0), !await this.hasSigner(e))
      try {
        await l(this, ns).call(this, "eth_requestAccounts", []);
      } catch (r) {
        const s = r.payload;
        throw this.getRpcError(s, { id: s.id, error: r });
      }
    return await super.getSigner(e);
  }
}
ns = new WeakMap();
const u0 = (n, t) => new Cg(t || rf[n]), _l = Yh, Sg = {
  [P.Arbitrum]: wn.ARB,
  [P.Ethereum]: wn.ETH,
  [P.Avalanche]: wn.AVAX,
  [P.BinanceSmartChain]: wn.BSC,
  [P.Polygon]: wn.MATIC,
  [P.Optimism]: wn.OP
}, Rg = ["payable", "nonpayable"], vg = (n) => n.type === 2 || !!n.maxFeePerGas || !!n.maxPriorityFeePerGas, oi = (n) => n instanceof xg, ci = async (n, t, e) => {
  const { Interface: r, Contract: s } = await import("./index-322bb10c.js");
  return new s(n, r.from(t), e);
}, kg = (n) => {
  try {
    return Q(n), !0;
  } catch {
    return !1;
  }
}, Hl = (n, t) => {
  const e = n.find((r) => r.name === t);
  if (!e)
    throw new Error(`No ABI fragment found for function ${t}`);
  return e.stateMutability && Rg.includes(e.stateMutability);
}, ca = async (n, t, {
  callProvider: e,
  signer: r,
  contractAddress: s,
  abi: i,
  funcName: a,
  funcParams: o = [],
  txOverrides: c,
  feeOption: u = at.Fast
}) => {
  const f = e || n;
  if (!s)
    throw new Error("contractAddress must be provided");
  const h = Hl(i, a);
  if (h && oi(f) && r) {
    const E = await vo(f, {
      contractAddress: s,
      abi: i,
      funcName: a,
      funcParams: o,
      txOverrides: c
    });
    return ua(f, E);
  }
  const p = await ci(s, i, f);
  if (h) {
    if (!r)
      throw new Error("Signer is not defined");
    const E = (c == null ? void 0 : c.from) || await r.getAddress();
    if (!E)
      throw new Error("No signer address found");
    const m = p.connect(r), { maxFeePerGas: I, maxPriorityFeePerGas: b, gasPrice: T } = (await ko(n, t))[u], O = await p.getFunction(a).estimateGas(...o, c), v = await m[a](...o, {
      ...c,
      gasLimit: O,
      maxFeePerGas: I,
      maxPriorityFeePerGas: b,
      gasPrice: T,
      /**
       * nonce must be set due to a possible bug with ethers.js,
       * expecting a synchronous nonce while the JsonRpcProvider delivers Promise
       */
      nonce: (c == null ? void 0 : c.nonce) || await f.getTransactionCount(E)
    });
    return typeof (v == null ? void 0 : v.hash) == "string" ? v == null ? void 0 : v.hash : v;
  }
  const y = await p[a](...o);
  return typeof (y == null ? void 0 : y.hash) == "string" ? y == null ? void 0 : y.hash : y;
}, vo = async (n, { contractAddress: t, abi: e, funcName: r, funcParams: s = [], txOverrides: i }) => (await ci(t, e, n)).getFunction(r).populateTransaction(...s.concat(i).filter((a) => typeof a < "u")), Ql = async (n, { assetAddress: t, spenderAddress: e, from: r }) => await ca(n, !0, {
  contractAddress: t,
  abi: Wi,
  funcName: "allowance",
  funcParams: [r, e]
}), Dg = async (n, { assetAddress: t, spenderAddress: e, from: r, amount: s = _l }) => xa.fromBigInt(
  await Ql(n, { assetAddress: t, spenderAddress: e, from: r })
).gte(xa.fromBigInt(BigInt(s))), Ug = async (n, {
  assetAddress: t,
  spenderAddress: e,
  feeOptionKey: r = at.Fast,
  amount: s,
  gasLimitFallback: i,
  from: a,
  nonce: o
}, c, u = !0) => {
  const f = [e, BigInt(s || _l)], p = {
    contractAddress: t,
    abi: Wi,
    funcName: "approve",
    funcParams: f,
    signer: c,
    txOverrides: { from: a }
  };
  return oi(n) ? ua(
    n,
    await vo(n, p)
  ) : ca(n, u, {
    ...p,
    funcParams: f,
    txOverrides: {
      from: a,
      nonce: o,
      gasLimit: i ? BigInt(i.toString()) : void 0
    },
    feeOption: r
  });
}, Lg = async (n, {
  assetValue: t,
  memo: e,
  recipient: r,
  feeOptionKey: s = at.Fast,
  data: i,
  from: a,
  maxFeePerGas: o,
  maxPriorityFeePerGas: c,
  gasPrice: u,
  ...f
}, h, p = !0) => {
  const y = t.getBaseValue("bigint"), E = t.chain;
  if (!tu(t)) {
    const T = Do(t, E);
    if (!T)
      throw new Error("No contract address found");
    return ca(n, p, {
      signer: h,
      contractAddress: T,
      abi: Wi,
      funcName: "transfer",
      funcParams: [r, y],
      txOverrides: { from: a, maxFeePerGas: o, maxPriorityFeePerGas: c, gasPrice: u },
      feeOption: s
    });
  }
  const { hexlify: m, toUtf8Bytes: I } = await import("./index-322bb10c.js"), b = {
    ...f,
    from: a,
    to: r,
    value: y,
    data: i || m(I(e || ""))
  };
  return Jl(n, b, s, h, p);
}, ko = async (n, t = !0) => {
  try {
    const { maxFeePerGas: e, maxPriorityFeePerGas: r, gasPrice: s } = await n.getFeeData();
    switch (t) {
      case !0:
        if (!e || !r)
          throw new Error("No fee data available");
        return {
          [at.Average]: {
            maxFeePerGas: e,
            maxPriorityFeePerGas: r
          },
          [at.Fast]: {
            maxFeePerGas: e * 15n / 10n,
            maxPriorityFeePerGas: r * 15n / 10n
          },
          [at.Fastest]: {
            maxFeePerGas: e * 2n,
            maxPriorityFeePerGas: r * 2n
          }
        };
      case !1:
        if (!s)
          throw new Error("No fee data available");
        return {
          [at.Average]: {
            gasPrice: s
          },
          [at.Fast]: {
            gasPrice: s * 15n / 10n
          },
          [at.Fastest]: {
            gasPrice: s * 2n
          }
        };
    }
  } catch (e) {
    throw new Error(
      `Failed to estimate gas price: ${e.msg ?? e.toString()}`
    );
  }
}, Vl = async (n, {
  signer: t,
  contractAddress: e,
  abi: r,
  funcName: s,
  funcParams: i = [],
  txOverrides: a
}) => {
  if (!e)
    throw new Error("contractAddress must be provided");
  const o = await ci(e, r, n);
  return t ? o.connect(t).getFunction(s).estimateGas(...i, a) : o.getFunction(s).estimateGas(...i, a);
}, Fg = async (n, {
  assetValue: t,
  recipient: e,
  memo: r,
  from: s,
  funcName: i,
  funcParams: a,
  txOverrides: o,
  signer: c
}) => {
  const { hexlify: u, toUtf8Bytes: f } = await import("./index-322bb10c.js"), h = t.bigIntValue, p = tu({ ...t }) ? null : Do(t, t.chain);
  return p && i ? Vl(n, {
    contractAddress: p,
    abi: Wi,
    funcName: i,
    funcParams: a,
    txOverrides: o,
    signer: c
  }) : n.estimateGas({
    from: s,
    to: e,
    value: h,
    data: r ? u(f(r)) : void 0
  });
}, Jl = async (n, t, e = at.Fast, r, s = !0) => {
  if (console.log("TOOLBOX: checkpoint: "), !r)
    throw new Error("Signer is not defined");
  const { from: i, to: a, data: o, value: c, ...u } = t;
  if (console.log("TOOLBOX: tx: ", t), !a)
    throw new Error("No to address provided");
  const f = {
    ...u,
    data: o || "0x",
    to: a,
    from: i,
    value: BigInt(c || 0)
  };
  if (oi(n))
    return ua(n, f);
  const h = i || await r.getAddress(), p = t.nonce || await n.getTransactionCount(h), y = (await n.getNetwork()).chainId, E = vg(f) || s, m = E && (!f.maxFeePerGas || !f.maxPriorityFeePerGas) || !f.gasPrice ? Object.entries(
    (await ko(n, s))[e]
  ).reduce(
    (b, [T, O]) => ({ ...b, [T]: Sa(BigInt(O)) }),
    {}
  ) : {};
  let I;
  try {
    I = Sa(
      f.gasLimit || await n.estimateGas(f) * 11n / 10n
    );
  } catch (b) {
    throw new Error(`Error estimating gas limit: ${JSON.stringify(b)}`);
  }
  try {
    const b = {
      ...f,
      chainId: y,
      type: E ? 2 : 0,
      gasLimit: I,
      nonce: p,
      ...m
    };
    console.log("TOOLBOX: txObject: ", b);
    try {
      const T = await r.sendTransaction(b);
      return console.log("TOOLBOX: response: ", T), typeof (T == null ? void 0 : T.hash) == "string" ? T.hash : T;
    } catch {
      const O = await r.signTransaction({
        ...b,
        from: h
      }), v = await n.broadcastTransaction(O);
      return typeof (v == null ? void 0 : v.hash) == "string" ? v.hash : v;
    }
  } catch (b) {
    throw new Error(`Error sending transaction: ${JSON.stringify(b)}`);
  }
}, l0 = (n) => Q(n), ua = async (n, { from: t, to: e, data: r, value: s }) => {
  if (!oi(n))
    throw new Error("Provider is not EIP-1193 compatible");
  return n.send("eth_sendTransaction", [
    { value: Sa(BigInt(s || 0)), from: t, to: e, data: r }
  ]);
}, f0 = (n, t) => {
  const e = Do(n, t);
  if (e)
    return Q(e.toLowerCase());
  throw new Error("invalid gas asset address");
}, Do = ({ chain: n, symbol: t, ticker: e }, r) => {
  try {
    return n === r && t === r && e === r || n === P.BinanceSmartChain && t === "BNB" && e === "BNB" ? Sg[r] : Q(t.slice(e.length + 1).replace(/^0X/, ""));
  } catch {
    return null;
  }
}, fs = ({
  provider: n,
  signer: t,
  isEIP1559Compatible: e = !0
}) => ({
  approve: (r) => Ug(n, r, t, e),
  approvedAmount: (r) => Ql(n, r),
  broadcastTransaction: n.broadcastTransaction,
  call: (r) => ca(n, e, { ...r, signer: t }),
  createContract: ci,
  createContractTxObject: (r) => vo(n, r),
  EIP1193SendTransaction: (r) => ua(n, r),
  estimateCall: (r) => Vl(n, { ...r, signer: t }),
  estimateGasLimit: ({
    assetValue: r,
    recipient: s,
    memo: i
  }) => Fg(n, { assetValue: r, recipient: s, memo: i, signer: t }),
  estimateGasPrices: () => ko(n, e),
  isApproved: (r) => Dg(n, r),
  sendTransaction: (r, s) => Jl(n, r, s, t, e),
  transfer: (r) => Lg(n, r, t, e),
  validateAddress: kg
});
var Mg = /* @__PURE__ */ ((n) => (n.Test = "goerli", n.Main = "homestead", n))(Mg || {});
const Gg = () => ({
  chainId: Ot.ArbitrumHex,
  chainName: "Arbitrum One",
  nativeCurrency: { name: "Ethereum", symbol: P.Ethereum, decimals: pn.ETH },
  rpcUrls: [ti.Arbitrum],
  blockExplorerUrls: [ei[P.Arbitrum]]
}), _g = async (n) => {
  try {
    const { gasPrice: t } = await n.getFeeData();
    if (!t)
      throw new Error("No fee data available");
    return {
      [at.Average]: { gasPrice: t },
      [at.Fast]: { gasPrice: t },
      [at.Fastest]: { gasPrice: t }
    };
  } catch (t) {
    throw new Error(
      `Failed to estimate gas price: ${t.msg ?? t.toString()}`
    );
  }
}, Hg = ({
  api: n,
  provider: t,
  signer: e,
  covalentApiKey: r
}) => {
  const s = n || ni({ apiKey: r, chainId: Ot.Arbitrum });
  return {
    ...fs({ provider: t, signer: e, isEIP1559Compatible: !1 }),
    getNetworkParams: Gg,
    estimateGasPrices: () => _g(t),
    getBalance: (a, o) => ls({ provider: t, api: s, address: a, chain: P.Arbitrum, potentialScamFilter: o })
  };
}, Qg = () => ({
  chainId: Ot.AvalancheHex,
  chainName: "Avalanche Network",
  nativeCurrency: { name: "Avalanche", symbol: P.Avalanche, decimals: pn.AVAX },
  // Use external rpc URL so wallets don't throw warning to user
  rpcUrls: ["https://api.avax.network/ext/bc/C/rpc"],
  blockExplorerUrls: [ei[P.Avalanche]]
}), Kl = ({
  api: n,
  provider: t,
  signer: e,
  covalentApiKey: r
}) => {
  const s = n || ni({ apiKey: r, chainId: Ot.Avalanche });
  return {
    ...fs({ provider: t, signer: e }),
    getNetworkParams: Qg,
    getBalance: (a, o) => ls({ provider: t, api: s, address: a, chain: P.Avalanche, potentialScamFilter: o })
  };
}, Vg = () => ({
  chainId: Ot.BinanceSmartChainHex,
  chainName: "Smart Chain",
  nativeCurrency: { name: "Binance Coin", symbol: P.Binance, decimals: pn.BSC },
  rpcUrls: ["https://bsc-dataseed.binance.org"],
  blockExplorerUrls: [ei[P.BinanceSmartChain]]
}), zl = ({
  api: n,
  provider: t,
  signer: e,
  covalentApiKey: r
}) => {
  const s = n || ni({ apiKey: r, chainId: Ot.BinanceSmartChain }), i = fs({ provider: t, signer: e, isEIP1559Compatible: !1 }), a = async (o, {
    callProvider: c,
    signer: u,
    contractAddress: f,
    abi: h,
    funcName: p,
    funcParams: y = [],
    txOverrides: E
  }) => {
    const m = c || o;
    if (!f)
      throw new Error("contractAddress must be provided");
    const I = Hl(h, p), b = I ? { ...(await i.estimateGasPrices()).average } : {};
    if (I && oi(m) && u) {
      const v = await i.createContractTxObject({
        contractAddress: f,
        abi: h,
        funcName: p,
        funcParams: y,
        txOverrides: { ...b, ...E }
      });
      return i.EIP1193SendTransaction(v);
    }
    const T = await ci(f, h, m);
    if (I) {
      if (!u)
        throw new Error("Signer is not defined");
      const v = (E == null ? void 0 : E.from) || await u.getAddress();
      if (!v)
        throw new Error("No signer address found");
      const U = await T.connect(u).getFunction(p)(...y, {
        ...b,
        ...E,
        /**
         * nonce must be set due to a possible bug with ethers.js,
         * expecting a synchronous nonce while the JsonRpcProvider delivers Promise
         */
        nonce: (E == null ? void 0 : E.nonce) || await m.getTransactionCount(v)
      });
      return typeof U == "string" ? U : U == null ? void 0 : U.hash;
    }
    const O = await T.getFunction(p)(...y);
    return typeof O == "string" ? O : O == null ? void 0 : O.hash;
  };
  return {
    ...i,
    call: (o) => a(t, { signer: e, ...o }),
    getNetworkParams: Vg,
    getBalance: (o, c) => ls({
      provider: t,
      api: s,
      address: o,
      chain: P.BinanceSmartChain,
      potentialScamFilter: c
    })
  };
}, Wl = ({
  api: n,
  ethplorerApiKey: t,
  signer: e,
  provider: r
}) => {
  const s = n || cf(t);
  return {
    ...fs({ provider: r, signer: e }),
    getBalance: (a, o) => ls({ provider: r, api: s, address: a, chain: P.Ethereum, potentialScamFilter: o })
  };
}, Jg = () => ({
  chainId: Ot.PolygonHex,
  chainName: "Polygon Mainnet",
  nativeCurrency: { name: "Polygon", symbol: P.Polygon, decimals: pn.MATIC },
  rpcUrls: [ti.Polygon],
  blockExplorerUrls: [ei[P.Polygon]]
}), Kg = ({
  api: n,
  provider: t,
  signer: e,
  covalentApiKey: r
}) => {
  const s = n || ni({ apiKey: r, chainId: Ot.Polygon });
  return {
    ...fs({ provider: t, signer: e }),
    getNetworkParams: Jg,
    getBalance: (a, o) => ls({ provider: t, api: s, address: a, chain: P.Polygon, potentialScamFilter: o })
  };
}, zg = [
  {
    inputs: [{ internalType: "address", name: "_owner", type: "address" }],
    stateMutability: "nonpayable",
    type: "constructor"
  },
  {
    anonymous: !1,
    inputs: [{ indexed: !1, internalType: "uint256", name: "", type: "uint256" }],
    name: "DecimalsUpdated",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [{ indexed: !1, internalType: "uint256", name: "", type: "uint256" }],
    name: "GasPriceUpdated",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [{ indexed: !1, internalType: "uint256", name: "", type: "uint256" }],
    name: "L1BaseFeeUpdated",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [{ indexed: !1, internalType: "uint256", name: "", type: "uint256" }],
    name: "OverheadUpdated",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [
      { indexed: !0, internalType: "address", name: "previousOwner", type: "address" },
      { indexed: !0, internalType: "address", name: "newOwner", type: "address" }
    ],
    name: "OwnershipTransferred",
    type: "event"
  },
  {
    anonymous: !1,
    inputs: [{ indexed: !1, internalType: "uint256", name: "", type: "uint256" }],
    name: "ScalarUpdated",
    type: "event"
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "gasPrice",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "bytes", name: "_data", type: "bytes" }],
    name: "getL1Fee",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "bytes", name: "_data", type: "bytes" }],
    name: "getL1GasUsed",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "l1BaseFee",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "overhead",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "owner",
    outputs: [{ internalType: "address", name: "", type: "address" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [],
    name: "scalar",
    outputs: [{ internalType: "uint256", name: "", type: "uint256" }],
    stateMutability: "view",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_decimals", type: "uint256" }],
    name: "setDecimals",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_gasPrice", type: "uint256" }],
    name: "setGasPrice",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_baseFee", type: "uint256" }],
    name: "setL1BaseFee",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_overhead", type: "uint256" }],
    name: "setOverhead",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "uint256", name: "_scalar", type: "uint256" }],
    name: "setScalar",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  },
  {
    inputs: [{ internalType: "address", name: "newOwner", type: "address" }],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function"
  }
], Wg = "0x420000000000000000000000000000000000000f", Uo = async (n) => {
  const { Contract: t } = await import("./index-322bb10c.js");
  return new t(Wg, zg, n);
}, Yl = async (n) => (await Uo(n)).l1BaseFee(), jl = async (n, { data: t, from: e, to: r, gasPrice: s, type: i, gasLimit: a, nonce: o }) => {
  if (!r)
    throw new Error("Missing to address");
  const { Transaction: c } = await import("./index-322bb10c.js");
  return c.from({
    data: t,
    to: r,
    gasPrice: s,
    type: i,
    gasLimit: a,
    nonce: o || (e ? await n.getTransactionCount(e) : 0)
  }).serialized;
}, Zl = async (n, t) => (await Uo(n)).getL1Fee(await jl(n, t)), Xl = async (n, t) => {
  const e = await n.send("eth_gasPrice", []), r = await n.estimateGas(t);
  return e.mul(r);
}, Yg = async (n, t) => {
  const e = await Zl(n, t), r = await Xl(n, t);
  return e.add(r);
}, jg = async (n, t) => (await Uo(n)).getL1GasUsed(await jl(n, t)), Zg = () => ({
  chainId: Ot.OptimismHex,
  chainName: "Optimism",
  nativeCurrency: { name: "Ethereum", symbol: P.Ethereum, decimals: pn.ETH },
  rpcUrls: [ti.Optimism],
  blockExplorerUrls: [ei[P.Optimism]]
}), Xg = async (n) => {
  try {
    const { maxFeePerGas: t, maxPriorityFeePerGas: e, gasPrice: r } = await n.getFeeData(), s = await Yl(n);
    if (!t || !e)
      throw new Error("No fee data available");
    const i = r;
    return {
      [at.Average]: {
        l1GasPrice: s,
        gasPrice: r,
        maxFeePerGas: t,
        maxPriorityFeePerGas: e
      },
      [at.Fast]: {
        l1GasPrice: s * 15n / 10n,
        gasPrice: i * 15n / 10n,
        maxFeePerGas: t,
        maxPriorityFeePerGas: e * 15n / 10n
      },
      [at.Fastest]: {
        l1GasPrice: s * 2n,
        gasPrice: i * 2n,
        maxFeePerGas: t,
        maxPriorityFeePerGas: e * 2n
      }
    };
  } catch (t) {
    throw new Error(
      `Failed to estimate gas price: ${t.msg ?? t.toString()}`
    );
  }
}, qg = ({
  api: n,
  provider: t,
  signer: e,
  covalentApiKey: r
}) => {
  const s = n || ni({ apiKey: r, chainId: Ot.Optimism });
  return {
    ...fs({ provider: t, signer: e }),
    estimateTotalGasCost: (a) => Yg(t, a),
    estimateL1GasCost: (a) => Zl(t, a),
    estimateL2GasCost: (a) => Xl(t, a),
    getL1GasPrice: () => Yl(t),
    estimateL1Gas: (a) => jg(t, a),
    getNetworkParams: Zg,
    estimateGasPrices: () => Xg(t),
    getBalance: (a, o) => ls({ provider: t, api: s, address: a, chain: P.Optimism, potentialScamFilter: o })
  };
}, h0 = async (n) => {
  switch (n) {
    case P.Avalanche:
      return Kl;
    case P.Arbitrum:
      return Hg;
    case P.Optimism:
      return qg;
    case P.Polygon:
      return Kg;
    case P.BinanceSmartChain:
      return zl;
    default:
      return Wl;
  }
};
export {
  Ae as $,
  Us as A,
  ja as B,
  Fe as C,
  vp as D,
  Pt as E,
  Yn as F,
  Hc as G,
  si as H,
  Mc as I,
  Il as J,
  Ls as K,
  xp as L,
  Yh as M,
  sa as N,
  Ag as O,
  lt as P,
  dg as Q,
  Oi as R,
  Jn as S,
  Sp as T,
  Pl as U,
  Bg as V,
  Cg as W,
  Oa as X,
  xg as Y,
  Ma as Z,
  Mi as _,
  ye as a,
  Wl as a$,
  oa as a0,
  rg as a1,
  aa as a2,
  ai as a3,
  zp as a4,
  Fl as a5,
  Li as a6,
  Zn as a7,
  qd as a8,
  $d as a9,
  dn as aA,
  Lf as aB,
  D as aC,
  H as aD,
  Xi as aE,
  Gt as aF,
  lo as aG,
  gn as aH,
  If as aI,
  ur as aJ,
  bf as aK,
  iu as aL,
  ms as aM,
  Me as aN,
  fo as aO,
  xf as aP,
  ho as aQ,
  Cs as aR,
  fs as aS,
  ua as aT,
  f0 as aU,
  Do as aV,
  _l as aW,
  l0 as aX,
  Hg as aY,
  Kl as aZ,
  zl as a_,
  Di as aa,
  Tf as ab,
  Pf as ac,
  Bf as ad,
  rt as ae,
  pr as af,
  $ as ag,
  J as ah,
  Bt as ai,
  k as aj,
  q as ak,
  Af as al,
  Ef as am,
  Kn as an,
  F as ao,
  yt as ap,
  N as aq,
  g as ar,
  nu as as,
  wf as at,
  ji as au,
  nt as av,
  uo as aw,
  jt as ax,
  au as ay,
  _e as az,
  Ie as b,
  h0 as b0,
  Kg as b1,
  qg as b2,
  ni as b3,
  cf as b4,
  lf as b5,
  ff as b6,
  hf as b7,
  df as b8,
  n0 as b9,
  r0 as ba,
  s0 as bb,
  i0 as bc,
  a0 as bd,
  o0 as be,
  Sa as bf,
  ls as bg,
  u0 as bh,
  Mg as bi,
  we as c,
  Rp as d,
  za as e,
  gt as f,
  Q as g,
  td as h,
  Du as i,
  oc as j,
  Ts as k,
  Lp as l,
  Up as m,
  Co as n,
  Bl as o,
  Bo as p,
  X as q,
  Et as r,
  ae as s,
  xs as t,
  zn as u,
  gf as v,
  Zd as w,
  Ja as x,
  Xd as y,
  Ui as z
};
