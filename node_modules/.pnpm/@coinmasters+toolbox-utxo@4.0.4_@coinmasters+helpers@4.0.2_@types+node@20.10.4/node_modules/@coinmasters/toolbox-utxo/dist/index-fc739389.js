var Kv = Object.defineProperty;
var qv = (e, t, r) => t in e ? Kv(e, t, { enumerable: !0, configurable: !0, writable: !0, value: r }) : e[t] = r;
var mi = (e, t, r) => (qv(e, typeof t != "symbol" ? t + "" : t, r), r);
import { SwapKitNumber as Gv, AssetValue as nu, RequestClient as Vi } from "@coinmasters/helpers";
var Ar = typeof globalThis < "u" ? globalThis : typeof window < "u" ? window : typeof global < "u" ? global : typeof self < "u" ? self : {};
function Vv(e) {
  return e && e.__esModule && Object.prototype.hasOwnProperty.call(e, "default") ? e.default : e;
}
function Wv(e) {
  if (e.__esModule)
    return e;
  var t = e.default;
  if (typeof t == "function") {
    var r = function n() {
      return this instanceof n ? Reflect.construct(t, arguments, this.constructor) : t.apply(this, arguments);
    };
    r.prototype = t.prototype;
  } else
    r = {};
  return Object.defineProperty(r, "__esModule", { value: !0 }), Object.keys(e).forEach(function(n) {
    var i = Object.getOwnPropertyDescriptor(e, n);
    Object.defineProperty(r, n, i.get ? i : {
      enumerable: !0,
      get: function() {
        return e[n];
      }
    });
  }), r;
}
var N = {}, ar = {}, Ha = {};
Ha.byteLength = Yv;
Ha.toByteArray = Jv;
Ha.fromByteArray = tw;
var Er = [], Xt = [], zv = typeof Uint8Array < "u" ? Uint8Array : Array, Mf = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
for (var Ei = 0, Xv = Mf.length; Ei < Xv; ++Ei)
  Er[Ei] = Mf[Ei], Xt[Mf.charCodeAt(Ei)] = Ei;
Xt["-".charCodeAt(0)] = 62;
Xt["_".charCodeAt(0)] = 63;
function w0(e) {
  var t = e.length;
  if (t % 4 > 0)
    throw new Error("Invalid string. Length must be a multiple of 4");
  var r = e.indexOf("=");
  r === -1 && (r = t);
  var n = r === t ? 0 : 4 - r % 4;
  return [r, n];
}
function Yv(e) {
  var t = w0(e), r = t[0], n = t[1];
  return (r + n) * 3 / 4 - n;
}
function Zv(e, t, r) {
  return (t + r) * 3 / 4 - r;
}
function Jv(e) {
  var t, r = w0(e), n = r[0], i = r[1], o = new zv(Zv(e, n, i)), s = 0, a = i > 0 ? n - 4 : n, f;
  for (f = 0; f < a; f += 4)
    t = Xt[e.charCodeAt(f)] << 18 | Xt[e.charCodeAt(f + 1)] << 12 | Xt[e.charCodeAt(f + 2)] << 6 | Xt[e.charCodeAt(f + 3)], o[s++] = t >> 16 & 255, o[s++] = t >> 8 & 255, o[s++] = t & 255;
  return i === 2 && (t = Xt[e.charCodeAt(f)] << 2 | Xt[e.charCodeAt(f + 1)] >> 4, o[s++] = t & 255), i === 1 && (t = Xt[e.charCodeAt(f)] << 10 | Xt[e.charCodeAt(f + 1)] << 4 | Xt[e.charCodeAt(f + 2)] >> 2, o[s++] = t >> 8 & 255, o[s++] = t & 255), o;
}
function Qv(e) {
  return Er[e >> 18 & 63] + Er[e >> 12 & 63] + Er[e >> 6 & 63] + Er[e & 63];
}
function ew(e, t, r) {
  for (var n, i = [], o = t; o < r; o += 3)
    n = (e[o] << 16 & 16711680) + (e[o + 1] << 8 & 65280) + (e[o + 2] & 255), i.push(Qv(n));
  return i.join("");
}
function tw(e) {
  for (var t, r = e.length, n = r % 3, i = [], o = 16383, s = 0, a = r - n; s < a; s += o)
    i.push(ew(e, s, s + o > a ? a : s + o));
  return n === 1 ? (t = e[r - 1], i.push(
    Er[t >> 2] + Er[t << 4 & 63] + "=="
  )) : n === 2 && (t = (e[r - 2] << 8) + e[r - 1], i.push(
    Er[t >> 10] + Er[t >> 4 & 63] + Er[t << 2 & 63] + "="
  )), i.join("");
}
var zu = {};
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */
zu.read = function(e, t, r, n, i) {
  var o, s, a = i * 8 - n - 1, f = (1 << a) - 1, l = f >> 1, h = -7, y = r ? i - 1 : 0, v = r ? -1 : 1, g = e[t + y];
  for (y += v, o = g & (1 << -h) - 1, g >>= -h, h += a; h > 0; o = o * 256 + e[t + y], y += v, h -= 8)
    ;
  for (s = o & (1 << -h) - 1, o >>= -h, h += n; h > 0; s = s * 256 + e[t + y], y += v, h -= 8)
    ;
  if (o === 0)
    o = 1 - l;
  else {
    if (o === f)
      return s ? NaN : (g ? -1 : 1) * (1 / 0);
    s = s + Math.pow(2, n), o = o - l;
  }
  return (g ? -1 : 1) * s * Math.pow(2, o - n);
};
zu.write = function(e, t, r, n, i, o) {
  var s, a, f, l = o * 8 - i - 1, h = (1 << l) - 1, y = h >> 1, v = i === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0, g = n ? 0 : o - 1, m = n ? 1 : -1, E = t < 0 || t === 0 && 1 / t < 0 ? 1 : 0;
  for (t = Math.abs(t), isNaN(t) || t === 1 / 0 ? (a = isNaN(t) ? 1 : 0, s = h) : (s = Math.floor(Math.log(t) / Math.LN2), t * (f = Math.pow(2, -s)) < 1 && (s--, f *= 2), s + y >= 1 ? t += v / f : t += v * Math.pow(2, 1 - y), t * f >= 2 && (s++, f /= 2), s + y >= h ? (a = 0, s = h) : s + y >= 1 ? (a = (t * f - 1) * Math.pow(2, i), s = s + y) : (a = t * Math.pow(2, y - 1) * Math.pow(2, i), s = 0)); i >= 8; e[r + g] = a & 255, g += m, a /= 256, i -= 8)
    ;
  for (s = s << i | a, l += i; l > 0; e[r + g] = s & 255, g += m, s /= 256, l -= 8)
    ;
  e[r + g - m] |= E * 128;
};
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
(function(e) {
  const t = Ha, r = zu, n = typeof Symbol == "function" && typeof Symbol.for == "function" ? Symbol.for("nodejs.util.inspect.custom") : null;
  e.Buffer = a, e.SlowBuffer = U, e.INSPECT_MAX_BYTES = 50;
  const i = 2147483647;
  e.kMaxLength = i, a.TYPED_ARRAY_SUPPORT = o(), !a.TYPED_ARRAY_SUPPORT && typeof console < "u" && typeof console.error == "function" && console.error(
    "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
  );
  function o() {
    try {
      const p = new Uint8Array(1), c = { foo: function() {
        return 42;
      } };
      return Object.setPrototypeOf(c, Uint8Array.prototype), Object.setPrototypeOf(p, c), p.foo() === 42;
    } catch {
      return !1;
    }
  }
  Object.defineProperty(a.prototype, "parent", {
    enumerable: !0,
    get: function() {
      if (a.isBuffer(this))
        return this.buffer;
    }
  }), Object.defineProperty(a.prototype, "offset", {
    enumerable: !0,
    get: function() {
      if (a.isBuffer(this))
        return this.byteOffset;
    }
  });
  function s(p) {
    if (p > i)
      throw new RangeError('The value "' + p + '" is invalid for option "size"');
    const c = new Uint8Array(p);
    return Object.setPrototypeOf(c, a.prototype), c;
  }
  function a(p, c, u) {
    if (typeof p == "number") {
      if (typeof c == "string")
        throw new TypeError(
          'The "string" argument must be of type string. Received type number'
        );
      return y(p);
    }
    return f(p, c, u);
  }
  a.poolSize = 8192;
  function f(p, c, u) {
    if (typeof p == "string")
      return v(p, c);
    if (ArrayBuffer.isView(p))
      return m(p);
    if (p == null)
      throw new TypeError(
        "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof p
      );
    if (ge(p, ArrayBuffer) || p && ge(p.buffer, ArrayBuffer) || typeof SharedArrayBuffer < "u" && (ge(p, SharedArrayBuffer) || p && ge(p.buffer, SharedArrayBuffer)))
      return E(p, c, u);
    if (typeof p == "number")
      throw new TypeError(
        'The "value" argument must not be of type number. Received type number'
      );
    const w = p.valueOf && p.valueOf();
    if (w != null && w !== p)
      return a.from(w, c, u);
    const I = O(p);
    if (I)
      return I;
    if (typeof Symbol < "u" && Symbol.toPrimitive != null && typeof p[Symbol.toPrimitive] == "function")
      return a.from(p[Symbol.toPrimitive]("string"), c, u);
    throw new TypeError(
      "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof p
    );
  }
  a.from = function(p, c, u) {
    return f(p, c, u);
  }, Object.setPrototypeOf(a.prototype, Uint8Array.prototype), Object.setPrototypeOf(a, Uint8Array);
  function l(p) {
    if (typeof p != "number")
      throw new TypeError('"size" argument must be of type number');
    if (p < 0)
      throw new RangeError('The value "' + p + '" is invalid for option "size"');
  }
  function h(p, c, u) {
    return l(p), p <= 0 ? s(p) : c !== void 0 ? typeof u == "string" ? s(p).fill(c, u) : s(p).fill(c) : s(p);
  }
  a.alloc = function(p, c, u) {
    return h(p, c, u);
  };
  function y(p) {
    return l(p), s(p < 0 ? 0 : x(p) | 0);
  }
  a.allocUnsafe = function(p) {
    return y(p);
  }, a.allocUnsafeSlow = function(p) {
    return y(p);
  };
  function v(p, c) {
    if ((typeof c != "string" || c === "") && (c = "utf8"), !a.isEncoding(c))
      throw new TypeError("Unknown encoding: " + c);
    const u = H(p, c) | 0;
    let w = s(u);
    const I = w.write(p, c);
    return I !== u && (w = w.slice(0, I)), w;
  }
  function g(p) {
    const c = p.length < 0 ? 0 : x(p.length) | 0, u = s(c);
    for (let w = 0; w < c; w += 1)
      u[w] = p[w] & 255;
    return u;
  }
  function m(p) {
    if (ge(p, Uint8Array)) {
      const c = new Uint8Array(p);
      return E(c.buffer, c.byteOffset, c.byteLength);
    }
    return g(p);
  }
  function E(p, c, u) {
    if (c < 0 || p.byteLength < c)
      throw new RangeError('"offset" is outside of buffer bounds');
    if (p.byteLength < c + (u || 0))
      throw new RangeError('"length" is outside of buffer bounds');
    let w;
    return c === void 0 && u === void 0 ? w = new Uint8Array(p) : u === void 0 ? w = new Uint8Array(p, c) : w = new Uint8Array(p, c, u), Object.setPrototypeOf(w, a.prototype), w;
  }
  function O(p) {
    if (a.isBuffer(p)) {
      const c = x(p.length) | 0, u = s(c);
      return u.length === 0 || p.copy(u, 0, 0, c), u;
    }
    if (p.length !== void 0)
      return typeof p.length != "number" || je(p.length) ? s(0) : g(p);
    if (p.type === "Buffer" && Array.isArray(p.data))
      return g(p.data);
  }
  function x(p) {
    if (p >= i)
      throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + i.toString(16) + " bytes");
    return p | 0;
  }
  function U(p) {
    return +p != p && (p = 0), a.alloc(+p);
  }
  a.isBuffer = function(c) {
    return c != null && c._isBuffer === !0 && c !== a.prototype;
  }, a.compare = function(c, u) {
    if (ge(c, Uint8Array) && (c = a.from(c, c.offset, c.byteLength)), ge(u, Uint8Array) && (u = a.from(u, u.offset, u.byteLength)), !a.isBuffer(c) || !a.isBuffer(u))
      throw new TypeError(
        'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
      );
    if (c === u)
      return 0;
    let w = c.length, I = u.length;
    for (let R = 0, G = Math.min(w, I); R < G; ++R)
      if (c[R] !== u[R]) {
        w = c[R], I = u[R];
        break;
      }
    return w < I ? -1 : I < w ? 1 : 0;
  }, a.isEncoding = function(c) {
    switch (String(c).toLowerCase()) {
      case "hex":
      case "utf8":
      case "utf-8":
      case "ascii":
      case "latin1":
      case "binary":
      case "base64":
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return !0;
      default:
        return !1;
    }
  }, a.concat = function(c, u) {
    if (!Array.isArray(c))
      throw new TypeError('"list" argument must be an Array of Buffers');
    if (c.length === 0)
      return a.alloc(0);
    let w;
    if (u === void 0)
      for (u = 0, w = 0; w < c.length; ++w)
        u += c[w].length;
    const I = a.allocUnsafe(u);
    let R = 0;
    for (w = 0; w < c.length; ++w) {
      let G = c[w];
      if (ge(G, Uint8Array))
        R + G.length > I.length ? (a.isBuffer(G) || (G = a.from(G)), G.copy(I, R)) : Uint8Array.prototype.set.call(
          I,
          G,
          R
        );
      else if (a.isBuffer(G))
        G.copy(I, R);
      else
        throw new TypeError('"list" argument must be an Array of Buffers');
      R += G.length;
    }
    return I;
  };
  function H(p, c) {
    if (a.isBuffer(p))
      return p.length;
    if (ArrayBuffer.isView(p) || ge(p, ArrayBuffer))
      return p.byteLength;
    if (typeof p != "string")
      throw new TypeError(
        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof p
      );
    const u = p.length, w = arguments.length > 2 && arguments[2] === !0;
    if (!w && u === 0)
      return 0;
    let I = !1;
    for (; ; )
      switch (c) {
        case "ascii":
        case "latin1":
        case "binary":
          return u;
        case "utf8":
        case "utf-8":
          return Ee(p).length;
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return u * 2;
        case "hex":
          return u >>> 1;
        case "base64":
          return Tt(p).length;
        default:
          if (I)
            return w ? -1 : Ee(p).length;
          c = ("" + c).toLowerCase(), I = !0;
      }
  }
  a.byteLength = H;
  function M(p, c, u) {
    let w = !1;
    if ((c === void 0 || c < 0) && (c = 0), c > this.length || ((u === void 0 || u > this.length) && (u = this.length), u <= 0) || (u >>>= 0, c >>>= 0, u <= c))
      return "";
    for (p || (p = "utf8"); ; )
      switch (p) {
        case "hex":
          return z(this, c, u);
        case "utf8":
        case "utf-8":
          return de(this, c, u);
        case "ascii":
          return ue(this, c, u);
        case "latin1":
        case "binary":
          return pe(this, c, u);
        case "base64":
          return ae(this, c, u);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return Y(this, c, u);
        default:
          if (w)
            throw new TypeError("Unknown encoding: " + p);
          p = (p + "").toLowerCase(), w = !0;
      }
  }
  a.prototype._isBuffer = !0;
  function k(p, c, u) {
    const w = p[c];
    p[c] = p[u], p[u] = w;
  }
  a.prototype.swap16 = function() {
    const c = this.length;
    if (c % 2 !== 0)
      throw new RangeError("Buffer size must be a multiple of 16-bits");
    for (let u = 0; u < c; u += 2)
      k(this, u, u + 1);
    return this;
  }, a.prototype.swap32 = function() {
    const c = this.length;
    if (c % 4 !== 0)
      throw new RangeError("Buffer size must be a multiple of 32-bits");
    for (let u = 0; u < c; u += 4)
      k(this, u, u + 3), k(this, u + 1, u + 2);
    return this;
  }, a.prototype.swap64 = function() {
    const c = this.length;
    if (c % 8 !== 0)
      throw new RangeError("Buffer size must be a multiple of 64-bits");
    for (let u = 0; u < c; u += 8)
      k(this, u, u + 7), k(this, u + 1, u + 6), k(this, u + 2, u + 5), k(this, u + 3, u + 4);
    return this;
  }, a.prototype.toString = function() {
    const c = this.length;
    return c === 0 ? "" : arguments.length === 0 ? de(this, 0, c) : M.apply(this, arguments);
  }, a.prototype.toLocaleString = a.prototype.toString, a.prototype.equals = function(c) {
    if (!a.isBuffer(c))
      throw new TypeError("Argument must be a Buffer");
    return this === c ? !0 : a.compare(this, c) === 0;
  }, a.prototype.inspect = function() {
    let c = "";
    const u = e.INSPECT_MAX_BYTES;
    return c = this.toString("hex", 0, u).replace(/(.{2})/g, "$1 ").trim(), this.length > u && (c += " ... "), "<Buffer " + c + ">";
  }, n && (a.prototype[n] = a.prototype.inspect), a.prototype.compare = function(c, u, w, I, R) {
    if (ge(c, Uint8Array) && (c = a.from(c, c.offset, c.byteLength)), !a.isBuffer(c))
      throw new TypeError(
        'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof c
      );
    if (u === void 0 && (u = 0), w === void 0 && (w = c ? c.length : 0), I === void 0 && (I = 0), R === void 0 && (R = this.length), u < 0 || w > c.length || I < 0 || R > this.length)
      throw new RangeError("out of range index");
    if (I >= R && u >= w)
      return 0;
    if (I >= R)
      return -1;
    if (u >= w)
      return 1;
    if (u >>>= 0, w >>>= 0, I >>>= 0, R >>>= 0, this === c)
      return 0;
    let G = R - I, oe = w - u;
    const le = Math.min(G, oe), he = this.slice(I, R), _e = c.slice(u, w);
    for (let ve = 0; ve < le; ++ve)
      if (he[ve] !== _e[ve]) {
        G = he[ve], oe = _e[ve];
        break;
      }
    return G < oe ? -1 : oe < G ? 1 : 0;
  };
  function _(p, c, u, w, I) {
    if (p.length === 0)
      return -1;
    if (typeof u == "string" ? (w = u, u = 0) : u > 2147483647 ? u = 2147483647 : u < -2147483648 && (u = -2147483648), u = +u, je(u) && (u = I ? 0 : p.length - 1), u < 0 && (u = p.length + u), u >= p.length) {
      if (I)
        return -1;
      u = p.length - 1;
    } else if (u < 0)
      if (I)
        u = 0;
      else
        return -1;
    if (typeof c == "string" && (c = a.from(c, w)), a.isBuffer(c))
      return c.length === 0 ? -1 : L(p, c, u, w, I);
    if (typeof c == "number")
      return c = c & 255, typeof Uint8Array.prototype.indexOf == "function" ? I ? Uint8Array.prototype.indexOf.call(p, c, u) : Uint8Array.prototype.lastIndexOf.call(p, c, u) : L(p, [c], u, w, I);
    throw new TypeError("val must be string, number or Buffer");
  }
  function L(p, c, u, w, I) {
    let R = 1, G = p.length, oe = c.length;
    if (w !== void 0 && (w = String(w).toLowerCase(), w === "ucs2" || w === "ucs-2" || w === "utf16le" || w === "utf-16le")) {
      if (p.length < 2 || c.length < 2)
        return -1;
      R = 2, G /= 2, oe /= 2, u /= 2;
    }
    function le(_e, ve) {
      return R === 1 ? _e[ve] : _e.readUInt16BE(ve * R);
    }
    let he;
    if (I) {
      let _e = -1;
      for (he = u; he < G; he++)
        if (le(p, he) === le(c, _e === -1 ? 0 : he - _e)) {
          if (_e === -1 && (_e = he), he - _e + 1 === oe)
            return _e * R;
        } else
          _e !== -1 && (he -= he - _e), _e = -1;
    } else
      for (u + oe > G && (u = G - oe), he = u; he >= 0; he--) {
        let _e = !0;
        for (let ve = 0; ve < oe; ve++)
          if (le(p, he + ve) !== le(c, ve)) {
            _e = !1;
            break;
          }
        if (_e)
          return he;
      }
    return -1;
  }
  a.prototype.includes = function(c, u, w) {
    return this.indexOf(c, u, w) !== -1;
  }, a.prototype.indexOf = function(c, u, w) {
    return _(this, c, u, w, !0);
  }, a.prototype.lastIndexOf = function(c, u, w) {
    return _(this, c, u, w, !1);
  };
  function j(p, c, u, w) {
    u = Number(u) || 0;
    const I = p.length - u;
    w ? (w = Number(w), w > I && (w = I)) : w = I;
    const R = c.length;
    w > R / 2 && (w = R / 2);
    let G;
    for (G = 0; G < w; ++G) {
      const oe = parseInt(c.substr(G * 2, 2), 16);
      if (je(oe))
        return G;
      p[u + G] = oe;
    }
    return G;
  }
  function F(p, c, u, w) {
    return ze(Ee(c, p.length - u), p, u, w);
  }
  function W(p, c, u, w) {
    return ze(Ue(c), p, u, w);
  }
  function te(p, c, u, w) {
    return ze(Tt(c), p, u, w);
  }
  function re(p, c, u, w) {
    return ze(Z(c, p.length - u), p, u, w);
  }
  a.prototype.write = function(c, u, w, I) {
    if (u === void 0)
      I = "utf8", w = this.length, u = 0;
    else if (w === void 0 && typeof u == "string")
      I = u, w = this.length, u = 0;
    else if (isFinite(u))
      u = u >>> 0, isFinite(w) ? (w = w >>> 0, I === void 0 && (I = "utf8")) : (I = w, w = void 0);
    else
      throw new Error(
        "Buffer.write(string, encoding, offset[, length]) is no longer supported"
      );
    const R = this.length - u;
    if ((w === void 0 || w > R) && (w = R), c.length > 0 && (w < 0 || u < 0) || u > this.length)
      throw new RangeError("Attempt to write outside buffer bounds");
    I || (I = "utf8");
    let G = !1;
    for (; ; )
      switch (I) {
        case "hex":
          return j(this, c, u, w);
        case "utf8":
        case "utf-8":
          return F(this, c, u, w);
        case "ascii":
        case "latin1":
        case "binary":
          return W(this, c, u, w);
        case "base64":
          return te(this, c, u, w);
        case "ucs2":
        case "ucs-2":
        case "utf16le":
        case "utf-16le":
          return re(this, c, u, w);
        default:
          if (G)
            throw new TypeError("Unknown encoding: " + I);
          I = ("" + I).toLowerCase(), G = !0;
      }
  }, a.prototype.toJSON = function() {
    return {
      type: "Buffer",
      data: Array.prototype.slice.call(this._arr || this, 0)
    };
  };
  function ae(p, c, u) {
    return c === 0 && u === p.length ? t.fromByteArray(p) : t.fromByteArray(p.slice(c, u));
  }
  function de(p, c, u) {
    u = Math.min(p.length, u);
    const w = [];
    let I = c;
    for (; I < u; ) {
      const R = p[I];
      let G = null, oe = R > 239 ? 4 : R > 223 ? 3 : R > 191 ? 2 : 1;
      if (I + oe <= u) {
        let le, he, _e, ve;
        switch (oe) {
          case 1:
            R < 128 && (G = R);
            break;
          case 2:
            le = p[I + 1], (le & 192) === 128 && (ve = (R & 31) << 6 | le & 63, ve > 127 && (G = ve));
            break;
          case 3:
            le = p[I + 1], he = p[I + 2], (le & 192) === 128 && (he & 192) === 128 && (ve = (R & 15) << 12 | (le & 63) << 6 | he & 63, ve > 2047 && (ve < 55296 || ve > 57343) && (G = ve));
            break;
          case 4:
            le = p[I + 1], he = p[I + 2], _e = p[I + 3], (le & 192) === 128 && (he & 192) === 128 && (_e & 192) === 128 && (ve = (R & 15) << 18 | (le & 63) << 12 | (he & 63) << 6 | _e & 63, ve > 65535 && ve < 1114112 && (G = ve));
        }
      }
      G === null ? (G = 65533, oe = 1) : G > 65535 && (G -= 65536, w.push(G >>> 10 & 1023 | 55296), G = 56320 | G & 1023), w.push(G), I += oe;
    }
    return ne(w);
  }
  const J = 4096;
  function ne(p) {
    const c = p.length;
    if (c <= J)
      return String.fromCharCode.apply(String, p);
    let u = "", w = 0;
    for (; w < c; )
      u += String.fromCharCode.apply(
        String,
        p.slice(w, w += J)
      );
    return u;
  }
  function ue(p, c, u) {
    let w = "";
    u = Math.min(p.length, u);
    for (let I = c; I < u; ++I)
      w += String.fromCharCode(p[I] & 127);
    return w;
  }
  function pe(p, c, u) {
    let w = "";
    u = Math.min(p.length, u);
    for (let I = c; I < u; ++I)
      w += String.fromCharCode(p[I]);
    return w;
  }
  function z(p, c, u) {
    const w = p.length;
    (!c || c < 0) && (c = 0), (!u || u < 0 || u > w) && (u = w);
    let I = "";
    for (let R = c; R < u; ++R)
      I += d[p[R]];
    return I;
  }
  function Y(p, c, u) {
    const w = p.slice(c, u);
    let I = "";
    for (let R = 0; R < w.length - 1; R += 2)
      I += String.fromCharCode(w[R] + w[R + 1] * 256);
    return I;
  }
  a.prototype.slice = function(c, u) {
    const w = this.length;
    c = ~~c, u = u === void 0 ? w : ~~u, c < 0 ? (c += w, c < 0 && (c = 0)) : c > w && (c = w), u < 0 ? (u += w, u < 0 && (u = 0)) : u > w && (u = w), u < c && (u = c);
    const I = this.subarray(c, u);
    return Object.setPrototypeOf(I, a.prototype), I;
  };
  function ee(p, c, u) {
    if (p % 1 !== 0 || p < 0)
      throw new RangeError("offset is not uint");
    if (p + c > u)
      throw new RangeError("Trying to access beyond buffer length");
  }
  a.prototype.readUintLE = a.prototype.readUIntLE = function(c, u, w) {
    c = c >>> 0, u = u >>> 0, w || ee(c, u, this.length);
    let I = this[c], R = 1, G = 0;
    for (; ++G < u && (R *= 256); )
      I += this[c + G] * R;
    return I;
  }, a.prototype.readUintBE = a.prototype.readUIntBE = function(c, u, w) {
    c = c >>> 0, u = u >>> 0, w || ee(c, u, this.length);
    let I = this[c + --u], R = 1;
    for (; u > 0 && (R *= 256); )
      I += this[c + --u] * R;
    return I;
  }, a.prototype.readUint8 = a.prototype.readUInt8 = function(c, u) {
    return c = c >>> 0, u || ee(c, 1, this.length), this[c];
  }, a.prototype.readUint16LE = a.prototype.readUInt16LE = function(c, u) {
    return c = c >>> 0, u || ee(c, 2, this.length), this[c] | this[c + 1] << 8;
  }, a.prototype.readUint16BE = a.prototype.readUInt16BE = function(c, u) {
    return c = c >>> 0, u || ee(c, 2, this.length), this[c] << 8 | this[c + 1];
  }, a.prototype.readUint32LE = a.prototype.readUInt32LE = function(c, u) {
    return c = c >>> 0, u || ee(c, 4, this.length), (this[c] | this[c + 1] << 8 | this[c + 2] << 16) + this[c + 3] * 16777216;
  }, a.prototype.readUint32BE = a.prototype.readUInt32BE = function(c, u) {
    return c = c >>> 0, u || ee(c, 4, this.length), this[c] * 16777216 + (this[c + 1] << 16 | this[c + 2] << 8 | this[c + 3]);
  }, a.prototype.readBigUInt64LE = b(function(c) {
    c = c >>> 0, V(c, "offset");
    const u = this[c], w = this[c + 7];
    (u === void 0 || w === void 0) && Q(c, this.length - 8);
    const I = u + this[++c] * 2 ** 8 + this[++c] * 2 ** 16 + this[++c] * 2 ** 24, R = this[++c] + this[++c] * 2 ** 8 + this[++c] * 2 ** 16 + w * 2 ** 24;
    return BigInt(I) + (BigInt(R) << BigInt(32));
  }), a.prototype.readBigUInt64BE = b(function(c) {
    c = c >>> 0, V(c, "offset");
    const u = this[c], w = this[c + 7];
    (u === void 0 || w === void 0) && Q(c, this.length - 8);
    const I = u * 2 ** 24 + this[++c] * 2 ** 16 + this[++c] * 2 ** 8 + this[++c], R = this[++c] * 2 ** 24 + this[++c] * 2 ** 16 + this[++c] * 2 ** 8 + w;
    return (BigInt(I) << BigInt(32)) + BigInt(R);
  }), a.prototype.readIntLE = function(c, u, w) {
    c = c >>> 0, u = u >>> 0, w || ee(c, u, this.length);
    let I = this[c], R = 1, G = 0;
    for (; ++G < u && (R *= 256); )
      I += this[c + G] * R;
    return R *= 128, I >= R && (I -= Math.pow(2, 8 * u)), I;
  }, a.prototype.readIntBE = function(c, u, w) {
    c = c >>> 0, u = u >>> 0, w || ee(c, u, this.length);
    let I = u, R = 1, G = this[c + --I];
    for (; I > 0 && (R *= 256); )
      G += this[c + --I] * R;
    return R *= 128, G >= R && (G -= Math.pow(2, 8 * u)), G;
  }, a.prototype.readInt8 = function(c, u) {
    return c = c >>> 0, u || ee(c, 1, this.length), this[c] & 128 ? (255 - this[c] + 1) * -1 : this[c];
  }, a.prototype.readInt16LE = function(c, u) {
    c = c >>> 0, u || ee(c, 2, this.length);
    const w = this[c] | this[c + 1] << 8;
    return w & 32768 ? w | 4294901760 : w;
  }, a.prototype.readInt16BE = function(c, u) {
    c = c >>> 0, u || ee(c, 2, this.length);
    const w = this[c + 1] | this[c] << 8;
    return w & 32768 ? w | 4294901760 : w;
  }, a.prototype.readInt32LE = function(c, u) {
    return c = c >>> 0, u || ee(c, 4, this.length), this[c] | this[c + 1] << 8 | this[c + 2] << 16 | this[c + 3] << 24;
  }, a.prototype.readInt32BE = function(c, u) {
    return c = c >>> 0, u || ee(c, 4, this.length), this[c] << 24 | this[c + 1] << 16 | this[c + 2] << 8 | this[c + 3];
  }, a.prototype.readBigInt64LE = b(function(c) {
    c = c >>> 0, V(c, "offset");
    const u = this[c], w = this[c + 7];
    (u === void 0 || w === void 0) && Q(c, this.length - 8);
    const I = this[c + 4] + this[c + 5] * 2 ** 8 + this[c + 6] * 2 ** 16 + (w << 24);
    return (BigInt(I) << BigInt(32)) + BigInt(u + this[++c] * 2 ** 8 + this[++c] * 2 ** 16 + this[++c] * 2 ** 24);
  }), a.prototype.readBigInt64BE = b(function(c) {
    c = c >>> 0, V(c, "offset");
    const u = this[c], w = this[c + 7];
    (u === void 0 || w === void 0) && Q(c, this.length - 8);
    const I = (u << 24) + // Overflow
    this[++c] * 2 ** 16 + this[++c] * 2 ** 8 + this[++c];
    return (BigInt(I) << BigInt(32)) + BigInt(this[++c] * 2 ** 24 + this[++c] * 2 ** 16 + this[++c] * 2 ** 8 + w);
  }), a.prototype.readFloatLE = function(c, u) {
    return c = c >>> 0, u || ee(c, 4, this.length), r.read(this, c, !0, 23, 4);
  }, a.prototype.readFloatBE = function(c, u) {
    return c = c >>> 0, u || ee(c, 4, this.length), r.read(this, c, !1, 23, 4);
  }, a.prototype.readDoubleLE = function(c, u) {
    return c = c >>> 0, u || ee(c, 8, this.length), r.read(this, c, !0, 52, 8);
  }, a.prototype.readDoubleBE = function(c, u) {
    return c = c >>> 0, u || ee(c, 8, this.length), r.read(this, c, !1, 52, 8);
  };
  function $(p, c, u, w, I, R) {
    if (!a.isBuffer(p))
      throw new TypeError('"buffer" argument must be a Buffer instance');
    if (c > I || c < R)
      throw new RangeError('"value" argument is out of bounds');
    if (u + w > p.length)
      throw new RangeError("Index out of range");
  }
  a.prototype.writeUintLE = a.prototype.writeUIntLE = function(c, u, w, I) {
    if (c = +c, u = u >>> 0, w = w >>> 0, !I) {
      const oe = Math.pow(2, 8 * w) - 1;
      $(this, c, u, w, oe, 0);
    }
    let R = 1, G = 0;
    for (this[u] = c & 255; ++G < w && (R *= 256); )
      this[u + G] = c / R & 255;
    return u + w;
  }, a.prototype.writeUintBE = a.prototype.writeUIntBE = function(c, u, w, I) {
    if (c = +c, u = u >>> 0, w = w >>> 0, !I) {
      const oe = Math.pow(2, 8 * w) - 1;
      $(this, c, u, w, oe, 0);
    }
    let R = w - 1, G = 1;
    for (this[u + R] = c & 255; --R >= 0 && (G *= 256); )
      this[u + R] = c / G & 255;
    return u + w;
  }, a.prototype.writeUint8 = a.prototype.writeUInt8 = function(c, u, w) {
    return c = +c, u = u >>> 0, w || $(this, c, u, 1, 255, 0), this[u] = c & 255, u + 1;
  }, a.prototype.writeUint16LE = a.prototype.writeUInt16LE = function(c, u, w) {
    return c = +c, u = u >>> 0, w || $(this, c, u, 2, 65535, 0), this[u] = c & 255, this[u + 1] = c >>> 8, u + 2;
  }, a.prototype.writeUint16BE = a.prototype.writeUInt16BE = function(c, u, w) {
    return c = +c, u = u >>> 0, w || $(this, c, u, 2, 65535, 0), this[u] = c >>> 8, this[u + 1] = c & 255, u + 2;
  }, a.prototype.writeUint32LE = a.prototype.writeUInt32LE = function(c, u, w) {
    return c = +c, u = u >>> 0, w || $(this, c, u, 4, 4294967295, 0), this[u + 3] = c >>> 24, this[u + 2] = c >>> 16, this[u + 1] = c >>> 8, this[u] = c & 255, u + 4;
  }, a.prototype.writeUint32BE = a.prototype.writeUInt32BE = function(c, u, w) {
    return c = +c, u = u >>> 0, w || $(this, c, u, 4, 4294967295, 0), this[u] = c >>> 24, this[u + 1] = c >>> 16, this[u + 2] = c >>> 8, this[u + 3] = c & 255, u + 4;
  };
  function q(p, c, u, w, I) {
    T(c, w, I, p, u, 7);
    let R = Number(c & BigInt(4294967295));
    p[u++] = R, R = R >> 8, p[u++] = R, R = R >> 8, p[u++] = R, R = R >> 8, p[u++] = R;
    let G = Number(c >> BigInt(32) & BigInt(4294967295));
    return p[u++] = G, G = G >> 8, p[u++] = G, G = G >> 8, p[u++] = G, G = G >> 8, p[u++] = G, u;
  }
  function X(p, c, u, w, I) {
    T(c, w, I, p, u, 7);
    let R = Number(c & BigInt(4294967295));
    p[u + 7] = R, R = R >> 8, p[u + 6] = R, R = R >> 8, p[u + 5] = R, R = R >> 8, p[u + 4] = R;
    let G = Number(c >> BigInt(32) & BigInt(4294967295));
    return p[u + 3] = G, G = G >> 8, p[u + 2] = G, G = G >> 8, p[u + 1] = G, G = G >> 8, p[u] = G, u + 8;
  }
  a.prototype.writeBigUInt64LE = b(function(c, u = 0) {
    return q(this, c, u, BigInt(0), BigInt("0xffffffffffffffff"));
  }), a.prototype.writeBigUInt64BE = b(function(c, u = 0) {
    return X(this, c, u, BigInt(0), BigInt("0xffffffffffffffff"));
  }), a.prototype.writeIntLE = function(c, u, w, I) {
    if (c = +c, u = u >>> 0, !I) {
      const le = Math.pow(2, 8 * w - 1);
      $(this, c, u, w, le - 1, -le);
    }
    let R = 0, G = 1, oe = 0;
    for (this[u] = c & 255; ++R < w && (G *= 256); )
      c < 0 && oe === 0 && this[u + R - 1] !== 0 && (oe = 1), this[u + R] = (c / G >> 0) - oe & 255;
    return u + w;
  }, a.prototype.writeIntBE = function(c, u, w, I) {
    if (c = +c, u = u >>> 0, !I) {
      const le = Math.pow(2, 8 * w - 1);
      $(this, c, u, w, le - 1, -le);
    }
    let R = w - 1, G = 1, oe = 0;
    for (this[u + R] = c & 255; --R >= 0 && (G *= 256); )
      c < 0 && oe === 0 && this[u + R + 1] !== 0 && (oe = 1), this[u + R] = (c / G >> 0) - oe & 255;
    return u + w;
  }, a.prototype.writeInt8 = function(c, u, w) {
    return c = +c, u = u >>> 0, w || $(this, c, u, 1, 127, -128), c < 0 && (c = 255 + c + 1), this[u] = c & 255, u + 1;
  }, a.prototype.writeInt16LE = function(c, u, w) {
    return c = +c, u = u >>> 0, w || $(this, c, u, 2, 32767, -32768), this[u] = c & 255, this[u + 1] = c >>> 8, u + 2;
  }, a.prototype.writeInt16BE = function(c, u, w) {
    return c = +c, u = u >>> 0, w || $(this, c, u, 2, 32767, -32768), this[u] = c >>> 8, this[u + 1] = c & 255, u + 2;
  }, a.prototype.writeInt32LE = function(c, u, w) {
    return c = +c, u = u >>> 0, w || $(this, c, u, 4, 2147483647, -2147483648), this[u] = c & 255, this[u + 1] = c >>> 8, this[u + 2] = c >>> 16, this[u + 3] = c >>> 24, u + 4;
  }, a.prototype.writeInt32BE = function(c, u, w) {
    return c = +c, u = u >>> 0, w || $(this, c, u, 4, 2147483647, -2147483648), c < 0 && (c = 4294967295 + c + 1), this[u] = c >>> 24, this[u + 1] = c >>> 16, this[u + 2] = c >>> 8, this[u + 3] = c & 255, u + 4;
  }, a.prototype.writeBigInt64LE = b(function(c, u = 0) {
    return q(this, c, u, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  }), a.prototype.writeBigInt64BE = b(function(c, u = 0) {
    return X(this, c, u, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
  });
  function ie(p, c, u, w, I, R) {
    if (u + w > p.length)
      throw new RangeError("Index out of range");
    if (u < 0)
      throw new RangeError("Index out of range");
  }
  function D(p, c, u, w, I) {
    return c = +c, u = u >>> 0, I || ie(p, c, u, 4), r.write(p, c, u, w, 23, 4), u + 4;
  }
  a.prototype.writeFloatLE = function(c, u, w) {
    return D(this, c, u, !0, w);
  }, a.prototype.writeFloatBE = function(c, u, w) {
    return D(this, c, u, !1, w);
  };
  function A(p, c, u, w, I) {
    return c = +c, u = u >>> 0, I || ie(p, c, u, 8), r.write(p, c, u, w, 52, 8), u + 8;
  }
  a.prototype.writeDoubleLE = function(c, u, w) {
    return A(this, c, u, !0, w);
  }, a.prototype.writeDoubleBE = function(c, u, w) {
    return A(this, c, u, !1, w);
  }, a.prototype.copy = function(c, u, w, I) {
    if (!a.isBuffer(c))
      throw new TypeError("argument should be a Buffer");
    if (w || (w = 0), !I && I !== 0 && (I = this.length), u >= c.length && (u = c.length), u || (u = 0), I > 0 && I < w && (I = w), I === w || c.length === 0 || this.length === 0)
      return 0;
    if (u < 0)
      throw new RangeError("targetStart out of bounds");
    if (w < 0 || w >= this.length)
      throw new RangeError("Index out of range");
    if (I < 0)
      throw new RangeError("sourceEnd out of bounds");
    I > this.length && (I = this.length), c.length - u < I - w && (I = c.length - u + w);
    const R = I - w;
    return this === c && typeof Uint8Array.prototype.copyWithin == "function" ? this.copyWithin(u, w, I) : Uint8Array.prototype.set.call(
      c,
      this.subarray(w, I),
      u
    ), R;
  }, a.prototype.fill = function(c, u, w, I) {
    if (typeof c == "string") {
      if (typeof u == "string" ? (I = u, u = 0, w = this.length) : typeof w == "string" && (I = w, w = this.length), I !== void 0 && typeof I != "string")
        throw new TypeError("encoding must be a string");
      if (typeof I == "string" && !a.isEncoding(I))
        throw new TypeError("Unknown encoding: " + I);
      if (c.length === 1) {
        const G = c.charCodeAt(0);
        (I === "utf8" && G < 128 || I === "latin1") && (c = G);
      }
    } else
      typeof c == "number" ? c = c & 255 : typeof c == "boolean" && (c = Number(c));
    if (u < 0 || this.length < u || this.length < w)
      throw new RangeError("Out of range index");
    if (w <= u)
      return this;
    u = u >>> 0, w = w === void 0 ? this.length : w >>> 0, c || (c = 0);
    let R;
    if (typeof c == "number")
      for (R = u; R < w; ++R)
        this[R] = c;
    else {
      const G = a.isBuffer(c) ? c : a.from(c, I), oe = G.length;
      if (oe === 0)
        throw new TypeError('The value "' + c + '" is invalid for argument "value"');
      for (R = 0; R < w - u; ++R)
        this[R + u] = G[R % oe];
    }
    return this;
  };
  const P = {};
  function C(p, c, u) {
    P[p] = class extends u {
      constructor() {
        super(), Object.defineProperty(this, "message", {
          value: c.apply(this, arguments),
          writable: !0,
          configurable: !0
        }), this.name = `${this.name} [${p}]`, this.stack, delete this.name;
      }
      get code() {
        return p;
      }
      set code(I) {
        Object.defineProperty(this, "code", {
          configurable: !0,
          enumerable: !0,
          value: I,
          writable: !0
        });
      }
      toString() {
        return `${this.name} [${p}]: ${this.message}`;
      }
    };
  }
  C(
    "ERR_BUFFER_OUT_OF_BOUNDS",
    function(p) {
      return p ? `${p} is outside of buffer bounds` : "Attempt to access memory outside buffer bounds";
    },
    RangeError
  ), C(
    "ERR_INVALID_ARG_TYPE",
    function(p, c) {
      return `The "${p}" argument must be of type number. Received type ${typeof c}`;
    },
    TypeError
  ), C(
    "ERR_OUT_OF_RANGE",
    function(p, c, u) {
      let w = `The value of "${p}" is out of range.`, I = u;
      return Number.isInteger(u) && Math.abs(u) > 2 ** 32 ? I = K(String(u)) : typeof u == "bigint" && (I = String(u), (u > BigInt(2) ** BigInt(32) || u < -(BigInt(2) ** BigInt(32))) && (I = K(I)), I += "n"), w += ` It must be ${c}. Received ${I}`, w;
    },
    RangeError
  );
  function K(p) {
    let c = "", u = p.length;
    const w = p[0] === "-" ? 1 : 0;
    for (; u >= w + 4; u -= 3)
      c = `_${p.slice(u - 3, u)}${c}`;
    return `${p.slice(0, u)}${c}`;
  }
  function S(p, c, u) {
    V(c, "offset"), (p[c] === void 0 || p[c + u] === void 0) && Q(c, p.length - (u + 1));
  }
  function T(p, c, u, w, I, R) {
    if (p > u || p < c) {
      const G = typeof c == "bigint" ? "n" : "";
      let oe;
      throw R > 3 ? c === 0 || c === BigInt(0) ? oe = `>= 0${G} and < 2${G} ** ${(R + 1) * 8}${G}` : oe = `>= -(2${G} ** ${(R + 1) * 8 - 1}${G}) and < 2 ** ${(R + 1) * 8 - 1}${G}` : oe = `>= ${c}${G} and <= ${u}${G}`, new P.ERR_OUT_OF_RANGE("value", oe, p);
    }
    S(w, I, R);
  }
  function V(p, c) {
    if (typeof p != "number")
      throw new P.ERR_INVALID_ARG_TYPE(c, "number", p);
  }
  function Q(p, c, u) {
    throw Math.floor(p) !== p ? (V(p, u), new P.ERR_OUT_OF_RANGE(u || "offset", "an integer", p)) : c < 0 ? new P.ERR_BUFFER_OUT_OF_BOUNDS() : new P.ERR_OUT_OF_RANGE(
      u || "offset",
      `>= ${u ? 1 : 0} and <= ${c}`,
      p
    );
  }
  const be = /[^+/0-9A-Za-z-_]/g;
  function ye(p) {
    if (p = p.split("=")[0], p = p.trim().replace(be, ""), p.length < 2)
      return "";
    for (; p.length % 4 !== 0; )
      p = p + "=";
    return p;
  }
  function Ee(p, c) {
    c = c || 1 / 0;
    let u;
    const w = p.length;
    let I = null;
    const R = [];
    for (let G = 0; G < w; ++G) {
      if (u = p.charCodeAt(G), u > 55295 && u < 57344) {
        if (!I) {
          if (u > 56319) {
            (c -= 3) > -1 && R.push(239, 191, 189);
            continue;
          } else if (G + 1 === w) {
            (c -= 3) > -1 && R.push(239, 191, 189);
            continue;
          }
          I = u;
          continue;
        }
        if (u < 56320) {
          (c -= 3) > -1 && R.push(239, 191, 189), I = u;
          continue;
        }
        u = (I - 55296 << 10 | u - 56320) + 65536;
      } else
        I && (c -= 3) > -1 && R.push(239, 191, 189);
      if (I = null, u < 128) {
        if ((c -= 1) < 0)
          break;
        R.push(u);
      } else if (u < 2048) {
        if ((c -= 2) < 0)
          break;
        R.push(
          u >> 6 | 192,
          u & 63 | 128
        );
      } else if (u < 65536) {
        if ((c -= 3) < 0)
          break;
        R.push(
          u >> 12 | 224,
          u >> 6 & 63 | 128,
          u & 63 | 128
        );
      } else if (u < 1114112) {
        if ((c -= 4) < 0)
          break;
        R.push(
          u >> 18 | 240,
          u >> 12 & 63 | 128,
          u >> 6 & 63 | 128,
          u & 63 | 128
        );
      } else
        throw new Error("Invalid code point");
    }
    return R;
  }
  function Ue(p) {
    const c = [];
    for (let u = 0; u < p.length; ++u)
      c.push(p.charCodeAt(u) & 255);
    return c;
  }
  function Z(p, c) {
    let u, w, I;
    const R = [];
    for (let G = 0; G < p.length && !((c -= 2) < 0); ++G)
      u = p.charCodeAt(G), w = u >> 8, I = u % 256, R.push(I), R.push(w);
    return R;
  }
  function Tt(p) {
    return t.toByteArray(ye(p));
  }
  function ze(p, c, u, w) {
    let I;
    for (I = 0; I < w && !(I + u >= c.length || I >= p.length); ++I)
      c[I + u] = p[I];
    return I;
  }
  function ge(p, c) {
    return p instanceof c || p != null && p.constructor != null && p.constructor.name != null && p.constructor.name === c.name;
  }
  function je(p) {
    return p !== p;
  }
  const d = function() {
    const p = "0123456789abcdef", c = new Array(256);
    for (let u = 0; u < 16; ++u) {
      const w = u * 16;
      for (let I = 0; I < 16; ++I)
        c[w + I] = p[u] + p[I];
    }
    return c;
  }();
  function b(p) {
    return typeof BigInt > "u" ? B : p;
  }
  function B() {
    throw new Error("BigInt not supported");
  }
})(ar);
var m0 = { exports: {} }, Ze = m0.exports = {}, wr, mr;
function iu() {
  throw new Error("setTimeout has not been defined");
}
function ou() {
  throw new Error("clearTimeout has not been defined");
}
(function() {
  try {
    typeof setTimeout == "function" ? wr = setTimeout : wr = iu;
  } catch {
    wr = iu;
  }
  try {
    typeof clearTimeout == "function" ? mr = clearTimeout : mr = ou;
  } catch {
    mr = ou;
  }
})();
function E0(e) {
  if (wr === setTimeout)
    return setTimeout(e, 0);
  if ((wr === iu || !wr) && setTimeout)
    return wr = setTimeout, setTimeout(e, 0);
  try {
    return wr(e, 0);
  } catch {
    try {
      return wr.call(null, e, 0);
    } catch {
      return wr.call(this, e, 0);
    }
  }
}
function rw(e) {
  if (mr === clearTimeout)
    return clearTimeout(e);
  if ((mr === ou || !mr) && clearTimeout)
    return mr = clearTimeout, clearTimeout(e);
  try {
    return mr(e);
  } catch {
    try {
      return mr.call(null, e);
    } catch {
      return mr.call(this, e);
    }
  }
}
var Lr = [], $i = !1, Nn, Vs = -1;
function nw() {
  !$i || !Nn || ($i = !1, Nn.length ? Lr = Nn.concat(Lr) : Vs = -1, Lr.length && _0());
}
function _0() {
  if (!$i) {
    var e = E0(nw);
    $i = !0;
    for (var t = Lr.length; t; ) {
      for (Nn = Lr, Lr = []; ++Vs < t; )
        Nn && Nn[Vs].run();
      Vs = -1, t = Lr.length;
    }
    Nn = null, $i = !1, rw(e);
  }
}
Ze.nextTick = function(e) {
  var t = new Array(arguments.length - 1);
  if (arguments.length > 1)
    for (var r = 1; r < arguments.length; r++)
      t[r - 1] = arguments[r];
  Lr.push(new S0(e, t)), Lr.length === 1 && !$i && E0(_0);
};
function S0(e, t) {
  this.fun = e, this.array = t;
}
S0.prototype.run = function() {
  this.fun.apply(null, this.array);
};
Ze.title = "browser";
Ze.browser = !0;
Ze.env = {};
Ze.argv = [];
Ze.version = "";
Ze.versions = {};
function zr() {
}
Ze.on = zr;
Ze.addListener = zr;
Ze.once = zr;
Ze.off = zr;
Ze.removeListener = zr;
Ze.removeAllListeners = zr;
Ze.emit = zr;
Ze.prependListener = zr;
Ze.prependOnceListener = zr;
Ze.listeners = function(e) {
  return [];
};
Ze.binding = function(e) {
  throw new Error("process.binding is not supported");
};
Ze.cwd = function() {
  return "/";
};
Ze.chdir = function(e) {
  throw new Error("process.chdir is not supported");
};
Ze.umask = function() {
  return 0;
};
var iw = m0.exports;
(function(e) {
  Object.defineProperty(e, Symbol.toStringTag, { value: "Module" });
  const t = ar, r = iw, n = (s) => s && s.__esModule ? s : { default: s }, i = n(r), o = globalThis || void 0 || self;
  Object.defineProperty(e, "Buffer", { enumerable: !0, get: () => t.Buffer }), Object.defineProperty(e, "process", { enumerable: !0, get: () => i.default }), e.global = o;
})(N);
var we = /* @__PURE__ */ ((e) => (e.INVALID_INPUT_PARAMETERS = "1000", e.UNKNOWN_PROVIDERS = "1001", e.CANNOT_FIND_INBOUND_ADDRESS = "1002", e.NO_INBOUND_ADDRESSES = "1003", e.CHAIN_HALTED_OR_UNSUPPORTED = "1004", e.MISSING_INPUT_PARAMETER = "1005", e.INVALID_TYPE_GENERIC = "1100", e.INVALID_NUMBER_STRING = "1101", e.INVALID_NUMBER = "1102", e.INVALID_BOOLEAN = "1103", e.INVALID_OBJECT = "1104", e.INVALID_ARRAY = "1105", e.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER = "2000", e.SELL_BUY_ASSETS_ARE_THE_SAME = "2001", e.MISSING_SOURCE_ADDRESS_FOR_SYNTH = "2002", e.AFF_ADDRESS_AND_BPS_OR_NEITHER = "2003", e.AFF_ADDRESS_TOO_LONG = "2004", e.AFF_BPS_INTEGER_0_100 = "2005", e.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN = "2006", e.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN = "2007", e.PREFERRED_PROFVIDER_NOT_SUPPORTED = "2008", e.DESTINATION_ADDRESS_SMART_CONTRACT = "2009", e.BUY_AMOUNT_MUST_BE_POSITIVE_INTEGER = "2010", e.SOURCE_ADDRESS_SMART_CONTRACT = "2011", e.INVALID_PROVIDER = "2100", e.MISSING_CROSS_CHAIN_PROVIDER = "2101", e.MISSING_AVAX_PROVIDER = "2102", e.MISSING_BSC_PROVIDER = "2103", e.MISSING_ETH_PROVIDER = "2104", e.INVALID_PROVIDER_FOR_SWAP_OUT = "2105", e.MISSING_ARB_PROVIDER = "2106", e.INVALID_CHAIN = "2200", e.INVALID_ASSET = "2201", e.INVALID_ASSET_IDENTIFIER = "2202", e.UNSUPPORTED_CHAIN = "2204", e.UNSUPPORTED_ASSET = "2203", e.UNSUPPORTED_ASSET_FOR_SWAPOUT = "2205", e.INVALID_SOURCE_ADDRESS = "2300", e.INVALID_DESTINATION_ADDRESS = "2301", e.THORNODE_QUOTE_GENERIC_ERROR = "3000", e.NOT_ENOUGH_SYNTH_BALANCE = "3001", e.SYNTH_MINTING_CAP_REACHED = "3002", e.INVALID_QUOTE_MODE = "4000", e.NO_QUOTES = "4001", e.SERVICE_UNAVAILABLE_GENERIC = "5000", e.MISSING_GAS_DATA_GENERIC = "5100", e.MISSING_TOKEN_INFO_GENERIC = "5200", e.CANT_FIND_TOKEN_LIST = "5201", e.NO_PRICE = "5202", e.PRICE_IS_STALE = "5203", e.ADDRESS_NOT_WHITELISTED = "6000", e.ADDRESS_ALREADY_CLAIMED = "6001", e.TEMPORARY_ERROR = "9999", e))(we || {});
we.INVALID_INPUT_PARAMETERS + "", we.UNKNOWN_PROVIDERS + "", we.CANNOT_FIND_INBOUND_ADDRESS + "", we.NO_INBOUND_ADDRESSES + "", we.CHAIN_HALTED_OR_UNSUPPORTED + "", we.MISSING_INPUT_PARAMETER + "", we.INVALID_TYPE_GENERIC + "", we.INVALID_NUMBER_STRING + "", we.INVALID_NUMBER + "", we.INVALID_BOOLEAN + "", we.INVALID_OBJECT + "", we.INVALID_ARRAY + "", we.SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER + "", we.SELL_BUY_ASSETS_ARE_THE_SAME + "", we.MISSING_SOURCE_ADDRESS_FOR_SYNTH + "", we.AFF_ADDRESS_AND_BPS_OR_NEITHER + "", we.AFF_ADDRESS_TOO_LONG + "", we.AFF_BPS_INTEGER_0_100 + "", we.SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN + "", we.DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN + "", we.PREFERRED_PROFVIDER_NOT_SUPPORTED + "", we.DESTINATION_ADDRESS_SMART_CONTRACT + "", we.BUY_AMOUNT_MUST_BE_POSITIVE_INTEGER + "", we.INVALID_PROVIDER + "", we.MISSING_CROSS_CHAIN_PROVIDER + "", we.MISSING_AVAX_PROVIDER + "", we.MISSING_BSC_PROVIDER + "", we.MISSING_ETH_PROVIDER + "", we.MISSING_ARB_PROVIDER + "", we.INVALID_PROVIDER_FOR_SWAP_OUT + "", we.INVALID_CHAIN + "", we.INVALID_ASSET + "", we.UNSUPPORTED_CHAIN + "", we.UNSUPPORTED_ASSET + "", we.UNSUPPORTED_ASSET_FOR_SWAPOUT + "", we.THORNODE_QUOTE_GENERIC_ERROR + "", we.INVALID_SOURCE_ADDRESS + "", we.INVALID_DESTINATION_ADDRESS + "", we.NOT_ENOUGH_SYNTH_BALANCE + "", we.SYNTH_MINTING_CAP_REACHED + "", we.INVALID_QUOTE_MODE + "", we.NO_QUOTES + "", we.SERVICE_UNAVAILABLE_GENERIC + "", we.MISSING_GAS_DATA_GENERIC + "", we.MISSING_TOKEN_INFO_GENERIC + "", we.CANT_FIND_TOKEN_LIST + "", we.NO_PRICE + "", we.PRICE_IS_STALE + "", we.ADDRESS_NOT_WHITELISTED + "", we.ADDRESS_ALREADY_CLAIMED + "";
var se = /* @__PURE__ */ ((e) => (e.Arbitrum = "ARB", e.Avalanche = "AVAX", e.Base = "BASE", e.Binance = "BNB", e.BinanceSmartChain = "BSC", e.Bitcoin = "BTC", e.BitcoinCash = "BCH", e.Cosmos = "GAIA", e.Dash = "DASH", e.Digibyte = "DGB", e.Dogecoin = "DOGE", e.EOS = "EOS", e.Ethereum = "ETH", e.Kujira = "KUJI", e.Litecoin = "LTC", e.Maya = "MAYA", e.Optimism = "OP", e.Osmosis = "OSMO", e.Polygon = "MATIC", e.Ripple = "XRP", e.THORChain = "THOR", e.Zcash = "ZEC", e))(se || {});
const ow = {
  ARB: "eip155:42161",
  AVAX: "eip155:43114",
  BSC: "eip155:56",
  BNB: "binance:bnb-beacon-chain",
  BCH: "bip122:000000000000000000651ef99cb9fcbe",
  BTC: "bip122:000000000019d6689c085ae165831e93",
  BASE: "eip155:8453",
  GAIA: "cosmos:cosmoshub-4",
  DASH: "bip122:dash-hash",
  DGB: "bip122:digibytes-hash",
  DOGE: "bip122:00000000001a91e3dace36e2be3bf030",
  KUJI: "cosmos:kaiyo-1",
  EOS: "eos:cf057bbfb72640471fd910bcb67639c2",
  ETH: "eip155:1",
  LTC: "bip122:12a765e31ffd4059bada1e25190f6e98",
  MAYA: "cosmos:maya-mainnet-v1",
  OP: "eip155:10",
  OSMO: "cosmos:osmosis-1",
  MATIC: "eip155:137",
  XRP: "ripple:unknown",
  THOR: "cosmos:thorchain-mainnet-v1",
  ZEC: "bip122:0000000000196a45"
};
for (const e in se)
  ow[se[e]], se[e];
var O0 = /* @__PURE__ */ ((e) => (e.ARB = "m/44'/60'/0'/0", e.AVAX = "m/44'/60'/0'/0", e.BASE = "m/44'/60'/0'/0", e.BCH = "m/44'/145'/0'/0", e.BNB = "m/44'/714'/0'/0", e.BSC = "m/44'/60'/0'/0", e.BTC = "m/84'/0'/0'/0", e.DOGE = "m/44'/3'/0'/0", e.DASH = "m/44'/5'/0'/0", e.DGB = "m/44'/20'/0'/0", e.ETH = "m/44'/60'/0'/0", e.EOS = "m/44'/194'/0'/0", e.GAIA = "m/44'/118'/0'/0", e.KUJI = "m/44'/118'/0'/0", e.LTC = "m/84'/2'/0'/0", e.MATIC = "m/44'/60'/0'/0", e.MAYA = "m/44'/931'/0'/0", e.OP = "m/44'/60'/0'/0", e.OSMO = "m/44'/118'/0'/0", e.XRP = "m/44'/144'/0'/0", e.THOR = "m/44'/931'/0'/0", e.ZEC = "m/44'/133'/0'/0", e))(O0 || {});
const Ff = [
  "ETH",
  "AVAX",
  "BSC",
  "ARB",
  // Chain.Base,
  "OP",
  "MATIC"
  /* Polygon */
];
var Xu = /* @__PURE__ */ ((e) => (e.Arbitrum = "42161", e.ArbitrumHex = "0xa4b1", e.Avalanche = "43114", e.AvalancheHex = "0xa86a", e.Base = "8453", e.Binance = "Binance-Chain-Tigris", e.BinanceSmartChain = "56", e.BinanceSmartChainHex = "0x38", e.Bitcoin = "bitcoin", e.BitcoinCash = "bitcoincash", e.Cosmos = "cosmoshub-4", e.Dash = "dash", e.Dogecoin = "dogecoin", e.Kujira = "kaiyo-1", e.Ethereum = "1", e.EthereumHex = "0x1", e.Litecoin = "litecoin", e.Maya = "mayachain-mainnet-v1", e.MayaStagenet = "mayachain-stagenet-v1", e.Optimism = "10", e.OptimismHex = "0xa", e.Osmosis = "osmosis-1", e.Polygon = "137", e.PolygonHex = "0x89", e.THORChain = "thorchain-mainnet-v1", e.THORChainStagenet = "thorchain-stagenet-v2", e))(Xu || {}), Zn = /* @__PURE__ */ ((e) => (e.Arbitrum = "https://arb1.arbitrum.io/rpc", e.Avalanche = "https://node-router.thorswap.net/avalanche-c", e.Binance = "https://base.llamarpc.com", e.BinanceSmartChain = "https://bsc-dataseed.binance.org", e.Bitcoin = "https://node-router.thorswap.net/bitcoin", e.BitcoinCash = "https://node-router.thorswap.net/bitcoin-cash", e.Cosmos = "https://node-router.thorswap.net/cosmos/rpc", e.Kujira = "https://rpc-kujira.synergynodes.com/", e.Dash = "https://dash.nownodes.io", e.Dogecoin = "https://node-router.thorswap.net/dogecoin", e.Ethereum = "https://node-router.thorswap.net/ethereum", e.Litecoin = "https://node-router.thorswap.net/litecoin", e.Maya = "https://tendermint.mayachain.info", e.MayaStagenet = "https://stagenet.tendermint.mayachain.info", e.Optimism = "https://mainnet.optimism.io", e.Osmosis = "https://rpc-osmosis.keplr.app", e.Polygon = "https://polygon-rpc.com", e.THORChain = "https://rpc.thorswap.net", e.THORChainStagenet = "https://stagenet-rpc.ninerealms.com", e))(Zn || {});
const La = Object.values(se), sw = Object.keys(se), Yu = La.reduce(
  (e, t) => {
    const r = sw.find((n) => se[n] === t);
    return r && (e[t] = r), e;
  },
  {}
);
La.reduce(
  (e, t) => (e[t] = Xu[Yu[t]], e),
  {}
);
La.reduce(
  (e, t) => (e[t] = Zn[Yu[t]], e),
  {}
);
La.reduce(
  (e, t) => {
    const r = `${Yu[t]}Hex`;
    return e[t] = Xu[r], e;
  },
  {}
);
var pn = /* @__PURE__ */ ((e) => (e.Average = "average", e.Fast = "fast", e.Fastest = "fastest", e))(pn || {});
const ws = [
  se.Arbitrum,
  se.Avalanche,
  se.Binance,
  se.BinanceSmartChain,
  se.Bitcoin,
  se.BitcoinCash,
  se.Cosmos,
  se.Dogecoin,
  se.Ethereum,
  se.Litecoin,
  se.Optimism,
  se.Polygon,
  se.THORChain
];
se.Cosmos, se.Bitcoin, se.BitcoinCash, se.Litecoin, se.Dogecoin, se.Ethereum, se.Arbitrum, se.Avalanche, se.BinanceSmartChain, se.Bitcoin, se.BitcoinCash, se.Cosmos, se.Dogecoin, se.Ethereum, se.Litecoin, se.Optimism, se.Polygon, se.THORChain, se.Ethereum, se.Binance, se.BinanceSmartChain, se.Avalanche, se.THORChain, se.Ethereum, se.Avalanche, se.BinanceSmartChain, se.Bitcoin, se.Cosmos;
function Hi(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
function aw(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
function fn(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
function Zu(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  Hi(e.outputLen), Hi(e.blockLen);
}
function $o(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
function A0(e, t) {
  fn(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
const fw = { number: Hi, bool: aw, bytes: fn, hash: Zu, exists: $o, output: A0 }, cw = fw, Ws = typeof globalThis == "object" && "crypto" in globalThis ? globalThis.crypto : void 0, uw = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  crypto: Ws
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const Ju = (e) => e instanceof Uint8Array, Dn = (e) => new DataView(e.buffer, e.byteOffset, e.byteLength), lr = (e, t) => e << 32 - t | e >>> t, lw = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!lw)
  throw new Error("Non little-endian hardware is not supported");
const hw = /* @__PURE__ */ Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function pw(e) {
  if (!Ju(e))
    throw new Error("Uint8Array expected");
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += hw[e[r]];
  return t;
}
function dw(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  const t = e.length;
  if (t % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + t);
  const r = new Uint8Array(t / 2);
  for (let n = 0; n < r.length; n++) {
    const i = n * 2, o = e.slice(i, i + 2), s = Number.parseInt(o, 16);
    if (Number.isNaN(s) || s < 0)
      throw new Error("Invalid byte sequence");
    r[n] = s;
  }
  return r;
}
function T0(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function Ho(e) {
  if (typeof e == "string" && (e = T0(e)), !Ju(e))
    throw new Error(`expected Uint8Array, got ${typeof e}`);
  return e;
}
function Oo(...e) {
  const t = new Uint8Array(e.reduce((n, i) => n + i.length, 0));
  let r = 0;
  return e.forEach((n) => {
    if (!Ju(n))
      throw new Error("Uint8Array expected");
    t.set(n, r), r += n.length;
  }), t;
}
let I0 = class {
  // Safe version that clones internal state
  clone() {
    return this._cloneInto();
  }
};
const yw = {}.toString;
function gw(e, t) {
  if (t !== void 0 && yw.call(t) !== "[object Object]")
    throw new Error("Options should be object or undefined");
  return Object.assign(e, t);
}
function Qu(e) {
  const t = (n) => e().update(Ho(n)).digest(), r = e();
  return t.outputLen = r.outputLen, t.blockLen = r.blockLen, t.create = () => e(), t;
}
function bw(e = 32) {
  if (Ws && typeof Ws.getRandomValues == "function")
    return Ws.getRandomValues(new Uint8Array(e));
  throw new Error("crypto.getRandomValues must be defined");
}
class P0 extends I0 {
  constructor(t, r) {
    super(), this.finished = !1, this.destroyed = !1, Zu(t);
    const n = Ho(r);
    if (this.iHash = t.create(), typeof this.iHash.update != "function")
      throw new Error("Expected instance of class which extends utils.Hash");
    this.blockLen = this.iHash.blockLen, this.outputLen = this.iHash.outputLen;
    const i = this.blockLen, o = new Uint8Array(i);
    o.set(n.length > i ? t.create().update(n).digest() : n);
    for (let s = 0; s < o.length; s++)
      o[s] ^= 54;
    this.iHash.update(o), this.oHash = t.create();
    for (let s = 0; s < o.length; s++)
      o[s] ^= 106;
    this.oHash.update(o), o.fill(0);
  }
  update(t) {
    return $o(this), this.iHash.update(t), this;
  }
  digestInto(t) {
    $o(this), fn(t, this.outputLen), this.finished = !0, this.iHash.digestInto(t), this.oHash.update(t), this.oHash.digestInto(t), this.destroy();
  }
  digest() {
    const t = new Uint8Array(this.oHash.outputLen);
    return this.digestInto(t), t;
  }
  _cloneInto(t) {
    t || (t = Object.create(Object.getPrototypeOf(this), {}));
    const { oHash: r, iHash: n, finished: i, destroyed: o, blockLen: s, outputLen: a } = this;
    return t = t, t.finished = i, t.destroyed = o, t.blockLen = s, t.outputLen = a, t.oHash = r._cloneInto(t.oHash), t.iHash = n._cloneInto(t.iHash), t;
  }
  destroy() {
    this.destroyed = !0, this.oHash.destroy(), this.iHash.destroy();
  }
}
const Lo = (e, t, r) => new P0(e, t).update(r).digest();
Lo.create = (e, t) => new P0(e, t);
function vw(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const i = BigInt(32), o = BigInt(4294967295), s = Number(r >> i & o), a = Number(r & o), f = n ? 4 : 0, l = n ? 0 : 4;
  e.setUint32(t + f, s, n), e.setUint32(t + l, a, n);
}
let el = class extends I0 {
  constructor(t, r, n, i) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = i, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = Dn(this.buffer);
  }
  update(t) {
    $o(this);
    const { view: r, buffer: n, blockLen: i } = this;
    t = Ho(t);
    const o = t.length;
    for (let s = 0; s < o; ) {
      const a = Math.min(i - this.pos, o - s);
      if (a === i) {
        const f = Dn(t);
        for (; i <= o - s; s += i)
          this.process(f, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === i && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    $o(this), A0(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: i, isLE: o } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > i - s && (this.process(n, 0), s = 0);
    for (let y = s; y < i; y++)
      r[y] = 0;
    vw(n, i - 8, BigInt(this.length * 8), o), this.process(n, 0);
    const a = Dn(t), f = this.outputLen;
    if (f % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const l = f / 4, h = this.get();
    if (l > h.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let y = 0; y < l; y++)
      a.setUint32(4 * y, h[y], o);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: i, finished: o, destroyed: s, pos: a } = this;
    return t.length = i, t.pos = a, t.finished = o, t.destroyed = s, i % r && t.buffer.set(n), t;
  }
};
const ww = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]), x0 = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (e, t) => t), mw = /* @__PURE__ */ x0.map((e) => (9 * e + 5) % 16);
let tl = [x0], rl = [mw];
for (let e = 0; e < 4; e++)
  for (let t of [tl, rl])
    t.push(t[e].map((r) => ww[r]));
const B0 = /* @__PURE__ */ [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((e) => new Uint8Array(e)), Ew = /* @__PURE__ */ tl.map((e, t) => e.map((r) => B0[t][r])), _w = /* @__PURE__ */ rl.map((e, t) => e.map((r) => B0[t][r])), Sw = /* @__PURE__ */ new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]), Ow = /* @__PURE__ */ new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]), ms = (e, t) => e << t | e >>> 32 - t;
function Wh(e, t, r, n) {
  return e === 0 ? t ^ r ^ n : e === 1 ? t & r | ~t & n : e === 2 ? (t | ~r) ^ n : e === 3 ? t & n | r & ~n : t ^ (r | ~n);
}
const Es = /* @__PURE__ */ new Uint32Array(16);
let Aw = class extends el {
  constructor() {
    super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
  }
  get() {
    const { h0: t, h1: r, h2: n, h3: i, h4: o } = this;
    return [t, r, n, i, o];
  }
  set(t, r, n, i, o) {
    this.h0 = t | 0, this.h1 = r | 0, this.h2 = n | 0, this.h3 = i | 0, this.h4 = o | 0;
  }
  process(t, r) {
    for (let g = 0; g < 16; g++, r += 4)
      Es[g] = t.getUint32(r, !0);
    let n = this.h0 | 0, i = n, o = this.h1 | 0, s = o, a = this.h2 | 0, f = a, l = this.h3 | 0, h = l, y = this.h4 | 0, v = y;
    for (let g = 0; g < 5; g++) {
      const m = 4 - g, E = Sw[g], O = Ow[g], x = tl[g], U = rl[g], H = Ew[g], M = _w[g];
      for (let k = 0; k < 16; k++) {
        const _ = ms(n + Wh(g, o, a, l) + Es[x[k]] + E, H[k]) + y | 0;
        n = y, y = l, l = ms(a, 10) | 0, a = o, o = _;
      }
      for (let k = 0; k < 16; k++) {
        const _ = ms(i + Wh(m, s, f, h) + Es[U[k]] + O, M[k]) + v | 0;
        i = v, v = h, h = ms(f, 10) | 0, f = s, s = _;
      }
    }
    this.set(this.h1 + a + h | 0, this.h2 + l + v | 0, this.h3 + y + i | 0, this.h4 + n + s | 0, this.h0 + o + f | 0);
  }
  roundClean() {
    Es.fill(0);
  }
  destroy() {
    this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
  }
};
const Tw = /* @__PURE__ */ Qu(() => new Aw()), Iw = (e, t, r) => e & t ^ ~e & r, Pw = (e, t, r) => e & t ^ e & r ^ t & r, xw = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), Yr = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), Zr = /* @__PURE__ */ new Uint32Array(64);
let Bw = class extends el {
  constructor() {
    super(64, 32, 8, !1), this.A = Yr[0] | 0, this.B = Yr[1] | 0, this.C = Yr[2] | 0, this.D = Yr[3] | 0, this.E = Yr[4] | 0, this.F = Yr[5] | 0, this.G = Yr[6] | 0, this.H = Yr[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: i, E: o, F: s, G: a, H: f } = this;
    return [t, r, n, i, o, s, a, f];
  }
  // prettier-ignore
  set(t, r, n, i, o, s, a, f) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = i | 0, this.E = o | 0, this.F = s | 0, this.G = a | 0, this.H = f | 0;
  }
  process(t, r) {
    for (let y = 0; y < 16; y++, r += 4)
      Zr[y] = t.getUint32(r, !1);
    for (let y = 16; y < 64; y++) {
      const v = Zr[y - 15], g = Zr[y - 2], m = lr(v, 7) ^ lr(v, 18) ^ v >>> 3, E = lr(g, 17) ^ lr(g, 19) ^ g >>> 10;
      Zr[y] = E + Zr[y - 7] + m + Zr[y - 16] | 0;
    }
    let { A: n, B: i, C: o, D: s, E: a, F: f, G: l, H: h } = this;
    for (let y = 0; y < 64; y++) {
      const v = lr(a, 6) ^ lr(a, 11) ^ lr(a, 25), g = h + v + Iw(a, f, l) + xw[y] + Zr[y] | 0, E = (lr(n, 2) ^ lr(n, 13) ^ lr(n, 22)) + Pw(n, i, o) | 0;
      h = l, l = f, f = a, a = s + g | 0, s = o, o = i, i = n, n = g + E | 0;
    }
    n = n + this.A | 0, i = i + this.B | 0, o = o + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, f = f + this.F | 0, l = l + this.G | 0, h = h + this.H | 0, this.set(n, i, o, s, a, f, l, h);
  }
  roundClean() {
    Zr.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
};
const Da = /* @__PURE__ */ Qu(() => new Bw()), _s = /* @__PURE__ */ BigInt(2 ** 32 - 1), su = /* @__PURE__ */ BigInt(32);
function k0(e, t = !1) {
  return t ? { h: Number(e & _s), l: Number(e >> su & _s) } : { h: Number(e >> su & _s) | 0, l: Number(e & _s) | 0 };
}
function kw(e, t = !1) {
  let r = new Uint32Array(e.length), n = new Uint32Array(e.length);
  for (let i = 0; i < e.length; i++) {
    const { h: o, l: s } = k0(e[i], t);
    [r[i], n[i]] = [o, s];
  }
  return [r, n];
}
const Rw = (e, t) => BigInt(e >>> 0) << su | BigInt(t >>> 0), Nw = (e, t, r) => e >>> r, Uw = (e, t, r) => e << 32 - r | t >>> r, Cw = (e, t, r) => e >>> r | t << 32 - r, $w = (e, t, r) => e << 32 - r | t >>> r, Hw = (e, t, r) => e << 64 - r | t >>> r - 32, Lw = (e, t, r) => e >>> r - 32 | t << 64 - r, Dw = (e, t) => t, Mw = (e, t) => e, Fw = (e, t, r) => e << r | t >>> 32 - r, jw = (e, t, r) => t << r | e >>> 32 - r, Kw = (e, t, r) => t << r - 32 | e >>> 64 - r, qw = (e, t, r) => e << r - 32 | t >>> 64 - r;
function Gw(e, t, r, n) {
  const i = (t >>> 0) + (n >>> 0);
  return { h: e + r + (i / 2 ** 32 | 0) | 0, l: i | 0 };
}
const Vw = (e, t, r) => (e >>> 0) + (t >>> 0) + (r >>> 0), Ww = (e, t, r, n) => t + r + n + (e / 2 ** 32 | 0) | 0, zw = (e, t, r, n) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0), Xw = (e, t, r, n, i) => t + r + n + i + (e / 2 ** 32 | 0) | 0, Yw = (e, t, r, n, i) => (e >>> 0) + (t >>> 0) + (r >>> 0) + (n >>> 0) + (i >>> 0), Zw = (e, t, r, n, i, o) => t + r + n + i + o + (e / 2 ** 32 | 0) | 0, Jw = {
  fromBig: k0,
  split: kw,
  toBig: Rw,
  shrSH: Nw,
  shrSL: Uw,
  rotrSH: Cw,
  rotrSL: $w,
  rotrBH: Hw,
  rotrBL: Lw,
  rotr32H: Dw,
  rotr32L: Mw,
  rotlSH: Fw,
  rotlSL: jw,
  rotlBH: Kw,
  rotlBL: qw,
  add: Gw,
  add3L: Vw,
  add3H: Ww,
  add4L: zw,
  add4H: Xw,
  add5H: Zw,
  add5L: Yw
}, Ae = Jw, [Qw, em] = /* @__PURE__ */ (() => Ae.split([
  "0x428a2f98d728ae22",
  "0x7137449123ef65cd",
  "0xb5c0fbcfec4d3b2f",
  "0xe9b5dba58189dbbc",
  "0x3956c25bf348b538",
  "0x59f111f1b605d019",
  "0x923f82a4af194f9b",
  "0xab1c5ed5da6d8118",
  "0xd807aa98a3030242",
  "0x12835b0145706fbe",
  "0x243185be4ee4b28c",
  "0x550c7dc3d5ffb4e2",
  "0x72be5d74f27b896f",
  "0x80deb1fe3b1696b1",
  "0x9bdc06a725c71235",
  "0xc19bf174cf692694",
  "0xe49b69c19ef14ad2",
  "0xefbe4786384f25e3",
  "0x0fc19dc68b8cd5b5",
  "0x240ca1cc77ac9c65",
  "0x2de92c6f592b0275",
  "0x4a7484aa6ea6e483",
  "0x5cb0a9dcbd41fbd4",
  "0x76f988da831153b5",
  "0x983e5152ee66dfab",
  "0xa831c66d2db43210",
  "0xb00327c898fb213f",
  "0xbf597fc7beef0ee4",
  "0xc6e00bf33da88fc2",
  "0xd5a79147930aa725",
  "0x06ca6351e003826f",
  "0x142929670a0e6e70",
  "0x27b70a8546d22ffc",
  "0x2e1b21385c26c926",
  "0x4d2c6dfc5ac42aed",
  "0x53380d139d95b3df",
  "0x650a73548baf63de",
  "0x766a0abb3c77b2a8",
  "0x81c2c92e47edaee6",
  "0x92722c851482353b",
  "0xa2bfe8a14cf10364",
  "0xa81a664bbc423001",
  "0xc24b8b70d0f89791",
  "0xc76c51a30654be30",
  "0xd192e819d6ef5218",
  "0xd69906245565a910",
  "0xf40e35855771202a",
  "0x106aa07032bbd1b8",
  "0x19a4c116b8d2d0c8",
  "0x1e376c085141ab53",
  "0x2748774cdf8eeb99",
  "0x34b0bcb5e19b48a8",
  "0x391c0cb3c5c95a63",
  "0x4ed8aa4ae3418acb",
  "0x5b9cca4f7763e373",
  "0x682e6ff3d6b2b8a3",
  "0x748f82ee5defb2fc",
  "0x78a5636f43172f60",
  "0x84c87814a1f0ab72",
  "0x8cc702081a6439ec",
  "0x90befffa23631e28",
  "0xa4506cebde82bde9",
  "0xbef9a3f7b2c67915",
  "0xc67178f2e372532b",
  "0xca273eceea26619c",
  "0xd186b8c721c0c207",
  "0xeada7dd6cde0eb1e",
  "0xf57d4f7fee6ed178",
  "0x06f067aa72176fba",
  "0x0a637dc5a2c898a6",
  "0x113f9804bef90dae",
  "0x1b710b35131c471b",
  "0x28db77f523047d84",
  "0x32caab7b40c72493",
  "0x3c9ebe0a15c9bebc",
  "0x431d67c49c100d4c",
  "0x4cc5d4becb3e42b6",
  "0x597f299cfc657e2a",
  "0x5fcb6fab3ad6faec",
  "0x6c44198c4a475817"
].map((e) => BigInt(e))))(), Jr = /* @__PURE__ */ new Uint32Array(80), Qr = /* @__PURE__ */ new Uint32Array(80);
let tm = class extends el {
  constructor() {
    super(128, 64, 16, !1), this.Ah = 1779033703, this.Al = -205731576, this.Bh = -1150833019, this.Bl = -2067093701, this.Ch = 1013904242, this.Cl = -23791573, this.Dh = -1521486534, this.Dl = 1595750129, this.Eh = 1359893119, this.El = -1377402159, this.Fh = -1694144372, this.Fl = 725511199, this.Gh = 528734635, this.Gl = -79577749, this.Hh = 1541459225, this.Hl = 327033209;
  }
  // prettier-ignore
  get() {
    const { Ah: t, Al: r, Bh: n, Bl: i, Ch: o, Cl: s, Dh: a, Dl: f, Eh: l, El: h, Fh: y, Fl: v, Gh: g, Gl: m, Hh: E, Hl: O } = this;
    return [t, r, n, i, o, s, a, f, l, h, y, v, g, m, E, O];
  }
  // prettier-ignore
  set(t, r, n, i, o, s, a, f, l, h, y, v, g, m, E, O) {
    this.Ah = t | 0, this.Al = r | 0, this.Bh = n | 0, this.Bl = i | 0, this.Ch = o | 0, this.Cl = s | 0, this.Dh = a | 0, this.Dl = f | 0, this.Eh = l | 0, this.El = h | 0, this.Fh = y | 0, this.Fl = v | 0, this.Gh = g | 0, this.Gl = m | 0, this.Hh = E | 0, this.Hl = O | 0;
  }
  process(t, r) {
    for (let H = 0; H < 16; H++, r += 4)
      Jr[H] = t.getUint32(r), Qr[H] = t.getUint32(r += 4);
    for (let H = 16; H < 80; H++) {
      const M = Jr[H - 15] | 0, k = Qr[H - 15] | 0, _ = Ae.rotrSH(M, k, 1) ^ Ae.rotrSH(M, k, 8) ^ Ae.shrSH(M, k, 7), L = Ae.rotrSL(M, k, 1) ^ Ae.rotrSL(M, k, 8) ^ Ae.shrSL(M, k, 7), j = Jr[H - 2] | 0, F = Qr[H - 2] | 0, W = Ae.rotrSH(j, F, 19) ^ Ae.rotrBH(j, F, 61) ^ Ae.shrSH(j, F, 6), te = Ae.rotrSL(j, F, 19) ^ Ae.rotrBL(j, F, 61) ^ Ae.shrSL(j, F, 6), re = Ae.add4L(L, te, Qr[H - 7], Qr[H - 16]), ae = Ae.add4H(re, _, W, Jr[H - 7], Jr[H - 16]);
      Jr[H] = ae | 0, Qr[H] = re | 0;
    }
    let { Ah: n, Al: i, Bh: o, Bl: s, Ch: a, Cl: f, Dh: l, Dl: h, Eh: y, El: v, Fh: g, Fl: m, Gh: E, Gl: O, Hh: x, Hl: U } = this;
    for (let H = 0; H < 80; H++) {
      const M = Ae.rotrSH(y, v, 14) ^ Ae.rotrSH(y, v, 18) ^ Ae.rotrBH(y, v, 41), k = Ae.rotrSL(y, v, 14) ^ Ae.rotrSL(y, v, 18) ^ Ae.rotrBL(y, v, 41), _ = y & g ^ ~y & E, L = v & m ^ ~v & O, j = Ae.add5L(U, k, L, em[H], Qr[H]), F = Ae.add5H(j, x, M, _, Qw[H], Jr[H]), W = j | 0, te = Ae.rotrSH(n, i, 28) ^ Ae.rotrBH(n, i, 34) ^ Ae.rotrBH(n, i, 39), re = Ae.rotrSL(n, i, 28) ^ Ae.rotrBL(n, i, 34) ^ Ae.rotrBL(n, i, 39), ae = n & o ^ n & a ^ o & a, de = i & s ^ i & f ^ s & f;
      x = E | 0, U = O | 0, E = g | 0, O = m | 0, g = y | 0, m = v | 0, { h: y, l: v } = Ae.add(l | 0, h | 0, F | 0, W | 0), l = a | 0, h = f | 0, a = o | 0, f = s | 0, o = n | 0, s = i | 0;
      const J = Ae.add3L(W, re, de);
      n = Ae.add3H(J, F, te, ae), i = J | 0;
    }
    ({ h: n, l: i } = Ae.add(this.Ah | 0, this.Al | 0, n | 0, i | 0)), { h: o, l: s } = Ae.add(this.Bh | 0, this.Bl | 0, o | 0, s | 0), { h: a, l: f } = Ae.add(this.Ch | 0, this.Cl | 0, a | 0, f | 0), { h: l, l: h } = Ae.add(this.Dh | 0, this.Dl | 0, l | 0, h | 0), { h: y, l: v } = Ae.add(this.Eh | 0, this.El | 0, y | 0, v | 0), { h: g, l: m } = Ae.add(this.Fh | 0, this.Fl | 0, g | 0, m | 0), { h: E, l: O } = Ae.add(this.Gh | 0, this.Gl | 0, E | 0, O | 0), { h: x, l: U } = Ae.add(this.Hh | 0, this.Hl | 0, x | 0, U | 0), this.set(n, i, o, s, a, f, l, h, y, v, g, m, E, O, x, U);
  }
  roundClean() {
    Jr.fill(0), Qr.fill(0);
  }
  destroy() {
    this.buffer.fill(0), this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
  }
};
const au = /* @__PURE__ */ Qu(() => new tm());
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const R0 = BigInt(0), Ma = BigInt(1), rm = BigInt(2), Fa = (e) => e instanceof Uint8Array, nm = /* @__PURE__ */ Array.from({ length: 256 }, (e, t) => t.toString(16).padStart(2, "0"));
function Wi(e) {
  if (!Fa(e))
    throw new Error("Uint8Array expected");
  let t = "";
  for (let r = 0; r < e.length; r++)
    t += nm[e[r]];
  return t;
}
function N0(e) {
  const t = e.toString(16);
  return t.length & 1 ? `0${t}` : t;
}
function nl(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  return BigInt(e === "" ? "0" : `0x${e}`);
}
function zi(e) {
  if (typeof e != "string")
    throw new Error("hex string expected, got " + typeof e);
  const t = e.length;
  if (t % 2)
    throw new Error("padded hex string expected, got unpadded hex of length " + t);
  const r = new Uint8Array(t / 2);
  for (let n = 0; n < r.length; n++) {
    const i = n * 2, o = e.slice(i, i + 2), s = Number.parseInt(o, 16);
    if (Number.isNaN(s) || s < 0)
      throw new Error("Invalid byte sequence");
    r[n] = s;
  }
  return r;
}
function Mn(e) {
  return nl(Wi(e));
}
function il(e) {
  if (!Fa(e))
    throw new Error("Uint8Array expected");
  return nl(Wi(Uint8Array.from(e).reverse()));
}
function Xi(e, t) {
  return zi(e.toString(16).padStart(t * 2, "0"));
}
function ol(e, t) {
  return Xi(e, t).reverse();
}
function im(e) {
  return zi(N0(e));
}
function ir(e, t, r) {
  let n;
  if (typeof t == "string")
    try {
      n = zi(t);
    } catch (o) {
      throw new Error(`${e} must be valid hex string, got "${t}". Cause: ${o}`);
    }
  else if (Fa(t))
    n = Uint8Array.from(t);
  else
    throw new Error(`${e} must be hex string or Uint8Array`);
  const i = n.length;
  if (typeof r == "number" && i !== r)
    throw new Error(`${e} expected ${r} bytes, got ${i}`);
  return n;
}
function Do(...e) {
  const t = new Uint8Array(e.reduce((n, i) => n + i.length, 0));
  let r = 0;
  return e.forEach((n) => {
    if (!Fa(n))
      throw new Error("Uint8Array expected");
    t.set(n, r), r += n.length;
  }), t;
}
function om(e, t) {
  if (e.length !== t.length)
    return !1;
  for (let r = 0; r < e.length; r++)
    if (e[r] !== t[r])
      return !1;
  return !0;
}
function sm(e) {
  if (typeof e != "string")
    throw new Error(`utf8ToBytes expected string, got ${typeof e}`);
  return new Uint8Array(new TextEncoder().encode(e));
}
function am(e) {
  let t;
  for (t = 0; e > R0; e >>= Ma, t += 1)
    ;
  return t;
}
function fm(e, t) {
  return e >> BigInt(t) & Ma;
}
const cm = (e, t, r) => e | (r ? Ma : R0) << BigInt(t), sl = (e) => (rm << BigInt(e - 1)) - Ma, jf = (e) => new Uint8Array(e), zh = (e) => Uint8Array.from(e);
function U0(e, t, r) {
  if (typeof e != "number" || e < 2)
    throw new Error("hashLen must be a number");
  if (typeof t != "number" || t < 2)
    throw new Error("qByteLen must be a number");
  if (typeof r != "function")
    throw new Error("hmacFn must be a function");
  let n = jf(e), i = jf(e), o = 0;
  const s = () => {
    n.fill(1), i.fill(0), o = 0;
  }, a = (...y) => r(i, n, ...y), f = (y = jf()) => {
    i = a(zh([0]), y), n = a(), y.length !== 0 && (i = a(zh([1]), y), n = a());
  }, l = () => {
    if (o++ >= 1e3)
      throw new Error("drbg: tried 1000 values");
    let y = 0;
    const v = [];
    for (; y < t; ) {
      n = a();
      const g = n.slice();
      v.push(g), y += n.length;
    }
    return Do(...v);
  };
  return (y, v) => {
    s(), f(y);
    let g;
    for (; !(g = v(l())); )
      f();
    return s(), g;
  };
}
const um = {
  bigint: (e) => typeof e == "bigint",
  function: (e) => typeof e == "function",
  boolean: (e) => typeof e == "boolean",
  string: (e) => typeof e == "string",
  stringOrUint8Array: (e) => typeof e == "string" || e instanceof Uint8Array,
  isSafeInteger: (e) => Number.isSafeInteger(e),
  array: (e) => Array.isArray(e),
  field: (e, t) => t.Fp.isValid(e),
  hash: (e) => typeof e == "function" && Number.isSafeInteger(e.outputLen)
};
function Jo(e, t, r = {}) {
  const n = (i, o, s) => {
    const a = um[o];
    if (typeof a != "function")
      throw new Error(`Invalid validator "${o}", expected function`);
    const f = e[i];
    if (!(s && f === void 0) && !a(f, e))
      throw new Error(`Invalid param ${String(i)}=${f} (${typeof f}), expected ${o}`);
  };
  for (const [i, o] of Object.entries(t))
    n(i, o, !1);
  for (const [i, o] of Object.entries(r))
    n(i, o, !0);
  return e;
}
const lm = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  bitGet: fm,
  bitLen: am,
  bitMask: sl,
  bitSet: cm,
  bytesToHex: Wi,
  bytesToNumberBE: Mn,
  bytesToNumberLE: il,
  concatBytes: Do,
  createHmacDrbg: U0,
  ensureBytes: ir,
  equalBytes: om,
  hexToBytes: zi,
  hexToNumber: nl,
  numberToBytesBE: Xi,
  numberToBytesLE: ol,
  numberToHexUnpadded: N0,
  numberToVarBytesBE: im,
  utf8ToBytes: sm,
  validateObject: Jo
}, Symbol.toStringTag, { value: "Module" }));
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const lt = BigInt(0), Ye = BigInt(1), Pn = BigInt(2), hm = BigInt(3), fu = BigInt(4), Xh = BigInt(5), Yh = BigInt(8);
BigInt(9);
BigInt(16);
function Rt(e, t) {
  const r = e % t;
  return r >= lt ? r : t + r;
}
function pm(e, t, r) {
  if (r <= lt || t < lt)
    throw new Error("Expected power/modulo > 0");
  if (r === Ye)
    return lt;
  let n = Ye;
  for (; t > lt; )
    t & Ye && (n = n * e % r), e = e * e % r, t >>= Ye;
  return n;
}
function Gt(e, t, r) {
  let n = e;
  for (; t-- > lt; )
    n *= n, n %= r;
  return n;
}
function cu(e, t) {
  if (e === lt || t <= lt)
    throw new Error(`invert: expected positive integers, got n=${e} mod=${t}`);
  let r = Rt(e, t), n = t, i = lt, o = Ye;
  for (; r !== lt; ) {
    const a = n / r, f = n % r, l = i - o * a;
    n = r, r = f, i = o, o = l;
  }
  if (n !== Ye)
    throw new Error("invert: does not exist");
  return Rt(i, t);
}
function dm(e) {
  const t = (e - Ye) / Pn;
  let r, n, i;
  for (r = e - Ye, n = 0; r % Pn === lt; r /= Pn, n++)
    ;
  for (i = Pn; i < e && pm(i, t, e) !== e - Ye; i++)
    ;
  if (n === 1) {
    const s = (e + Ye) / fu;
    return function(f, l) {
      const h = f.pow(l, s);
      if (!f.eql(f.sqr(h), l))
        throw new Error("Cannot find square root");
      return h;
    };
  }
  const o = (r + Ye) / Pn;
  return function(a, f) {
    if (a.pow(f, t) === a.neg(a.ONE))
      throw new Error("Cannot find square root");
    let l = n, h = a.pow(a.mul(a.ONE, i), r), y = a.pow(f, o), v = a.pow(f, r);
    for (; !a.eql(v, a.ONE); ) {
      if (a.eql(v, a.ZERO))
        return a.ZERO;
      let g = 1;
      for (let E = a.sqr(v); g < l && !a.eql(E, a.ONE); g++)
        E = a.sqr(E);
      const m = a.pow(h, Ye << BigInt(l - g - 1));
      h = a.sqr(m), y = a.mul(y, m), v = a.mul(v, h), l = g;
    }
    return y;
  };
}
function ym(e) {
  if (e % fu === hm) {
    const t = (e + Ye) / fu;
    return function(n, i) {
      const o = n.pow(i, t);
      if (!n.eql(n.sqr(o), i))
        throw new Error("Cannot find square root");
      return o;
    };
  }
  if (e % Yh === Xh) {
    const t = (e - Xh) / Yh;
    return function(n, i) {
      const o = n.mul(i, Pn), s = n.pow(o, t), a = n.mul(i, s), f = n.mul(n.mul(a, Pn), s), l = n.mul(a, n.sub(f, n.ONE));
      if (!n.eql(n.sqr(l), i))
        throw new Error("Cannot find square root");
      return l;
    };
  }
  return dm(e);
}
const gm = [
  "create",
  "isValid",
  "is0",
  "neg",
  "inv",
  "sqrt",
  "sqr",
  "eql",
  "add",
  "sub",
  "mul",
  "pow",
  "div",
  "addN",
  "subN",
  "mulN",
  "sqrN"
];
function bm(e) {
  const t = {
    ORDER: "bigint",
    MASK: "bigint",
    BYTES: "isSafeInteger",
    BITS: "isSafeInteger"
  }, r = gm.reduce((n, i) => (n[i] = "function", n), t);
  return Jo(e, r);
}
function vm(e, t, r) {
  if (r < lt)
    throw new Error("Expected power > 0");
  if (r === lt)
    return e.ONE;
  if (r === Ye)
    return t;
  let n = e.ONE, i = t;
  for (; r > lt; )
    r & Ye && (n = e.mul(n, i)), i = e.sqr(i), r >>= Ye;
  return n;
}
function wm(e, t) {
  const r = new Array(t.length), n = t.reduce((o, s, a) => e.is0(s) ? o : (r[a] = o, e.mul(o, s)), e.ONE), i = e.inv(n);
  return t.reduceRight((o, s, a) => e.is0(s) ? o : (r[a] = e.mul(o, r[a]), e.mul(o, s)), i), r;
}
function C0(e, t) {
  const r = t !== void 0 ? t : e.toString(2).length, n = Math.ceil(r / 8);
  return { nBitLength: r, nByteLength: n };
}
function mm(e, t, r = !1, n = {}) {
  if (e <= lt)
    throw new Error(`Expected Field ORDER > 0, got ${e}`);
  const { nBitLength: i, nByteLength: o } = C0(e, t);
  if (o > 2048)
    throw new Error("Field lengths over 2048 bytes are not supported");
  const s = ym(e), a = Object.freeze({
    ORDER: e,
    BITS: i,
    BYTES: o,
    MASK: sl(i),
    ZERO: lt,
    ONE: Ye,
    create: (f) => Rt(f, e),
    isValid: (f) => {
      if (typeof f != "bigint")
        throw new Error(`Invalid field element: expected bigint, got ${typeof f}`);
      return lt <= f && f < e;
    },
    is0: (f) => f === lt,
    isOdd: (f) => (f & Ye) === Ye,
    neg: (f) => Rt(-f, e),
    eql: (f, l) => f === l,
    sqr: (f) => Rt(f * f, e),
    add: (f, l) => Rt(f + l, e),
    sub: (f, l) => Rt(f - l, e),
    mul: (f, l) => Rt(f * l, e),
    pow: (f, l) => vm(a, f, l),
    div: (f, l) => Rt(f * cu(l, e), e),
    // Same as above, but doesn't normalize
    sqrN: (f) => f * f,
    addN: (f, l) => f + l,
    subN: (f, l) => f - l,
    mulN: (f, l) => f * l,
    inv: (f) => cu(f, e),
    sqrt: n.sqrt || ((f) => s(a, f)),
    invertBatch: (f) => wm(a, f),
    // TODO: do we really need constant cmov?
    // We don't have const-time bigints anyway, so probably will be not very useful
    cmov: (f, l, h) => h ? l : f,
    toBytes: (f) => r ? ol(f, o) : Xi(f, o),
    fromBytes: (f) => {
      if (f.length !== o)
        throw new Error(`Fp.fromBytes: expected ${o}, got ${f.length}`);
      return r ? il(f) : Mn(f);
    }
  });
  return Object.freeze(a);
}
function $0(e) {
  if (typeof e != "bigint")
    throw new Error("field order must be bigint");
  const t = e.toString(2).length;
  return Math.ceil(t / 8);
}
function H0(e) {
  const t = $0(e);
  return t + Math.ceil(t / 2);
}
function Em(e, t, r = !1) {
  const n = e.length, i = $0(t), o = H0(t);
  if (n < 16 || n < o || n > 1024)
    throw new Error(`expected ${o}-1024 bytes of input, got ${n}`);
  const s = r ? Mn(e) : il(e), a = Rt(s, t - Ye) + Ye;
  return r ? ol(a, i) : Xi(a, i);
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const _m = BigInt(0), Kf = BigInt(1);
function Sm(e, t) {
  const r = (i, o) => {
    const s = o.negate();
    return i ? s : o;
  }, n = (i) => {
    const o = Math.ceil(t / i) + 1, s = 2 ** (i - 1);
    return { windows: o, windowSize: s };
  };
  return {
    constTimeNegate: r,
    // non-const time multiplication ladder
    unsafeLadder(i, o) {
      let s = e.ZERO, a = i;
      for (; o > _m; )
        o & Kf && (s = s.add(a)), a = a.double(), o >>= Kf;
      return s;
    },
    /**
     * Creates a wNAF precomputation window. Used for caching.
     * Default window size is set by `utils.precompute()` and is equal to 8.
     * Number of precomputed points depends on the curve size:
     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:
     * - 𝑊 is the window size
     * - 𝑛 is the bitlength of the curve order.
     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.
     * @returns precomputed point tables flattened to a single array
     */
    precomputeWindow(i, o) {
      const { windows: s, windowSize: a } = n(o), f = [];
      let l = i, h = l;
      for (let y = 0; y < s; y++) {
        h = l, f.push(h);
        for (let v = 1; v < a; v++)
          h = h.add(l), f.push(h);
        l = h.double();
      }
      return f;
    },
    /**
     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.
     * @param W window size
     * @param precomputes precomputed tables
     * @param n scalar (we don't check here, but should be less than curve order)
     * @returns real and fake (for const-time) points
     */
    wNAF(i, o, s) {
      const { windows: a, windowSize: f } = n(i);
      let l = e.ZERO, h = e.BASE;
      const y = BigInt(2 ** i - 1), v = 2 ** i, g = BigInt(i);
      for (let m = 0; m < a; m++) {
        const E = m * f;
        let O = Number(s & y);
        s >>= g, O > f && (O -= v, s += Kf);
        const x = E, U = E + Math.abs(O) - 1, H = m % 2 !== 0, M = O < 0;
        O === 0 ? h = h.add(r(H, o[x])) : l = l.add(r(M, o[U]));
      }
      return { p: l, f: h };
    },
    wNAFCached(i, o, s, a) {
      const f = i._WINDOW_SIZE || 1;
      let l = o.get(i);
      return l || (l = this.precomputeWindow(i, f), f !== 1 && o.set(i, a(l))), this.wNAF(f, l, s);
    }
  };
}
function L0(e) {
  return bm(e.Fp), Jo(e, {
    n: "bigint",
    h: "bigint",
    Gx: "field",
    Gy: "field"
  }, {
    nBitLength: "isSafeInteger",
    nByteLength: "isSafeInteger"
  }), Object.freeze({
    ...C0(e.n, e.nBitLength),
    ...e,
    p: e.Fp.ORDER
  });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function Om(e) {
  const t = L0(e);
  Jo(t, {
    a: "field",
    b: "field"
  }, {
    allowedPrivateKeyLengths: "array",
    wrapPrivateKey: "boolean",
    isTorsionFree: "function",
    clearCofactor: "function",
    allowInfinityPoint: "boolean",
    fromBytes: "function",
    toBytes: "function"
  });
  const { endo: r, Fp: n, a: i } = t;
  if (r) {
    if (!n.eql(i, n.ZERO))
      throw new Error("Endomorphism can only be defined for Koblitz curves that have a=0");
    if (typeof r != "object" || typeof r.beta != "bigint" || typeof r.splitScalar != "function")
      throw new Error("Expected endomorphism with beta: bigint and splitScalar: function");
  }
  return Object.freeze({ ...t });
}
const { bytesToNumberBE: Am, hexToBytes: Tm } = lm, Un = {
  // asn.1 DER encoding utils
  Err: class extends Error {
    constructor(t = "") {
      super(t);
    }
  },
  _parseInt(e) {
    const { Err: t } = Un;
    if (e.length < 2 || e[0] !== 2)
      throw new t("Invalid signature integer tag");
    const r = e[1], n = e.subarray(2, r + 2);
    if (!r || n.length !== r)
      throw new t("Invalid signature integer: wrong length");
    if (n[0] & 128)
      throw new t("Invalid signature integer: negative");
    if (n[0] === 0 && !(n[1] & 128))
      throw new t("Invalid signature integer: unnecessary leading zero");
    return { d: Am(n), l: e.subarray(r + 2) };
  },
  toSig(e) {
    const { Err: t } = Un, r = typeof e == "string" ? Tm(e) : e;
    if (!(r instanceof Uint8Array))
      throw new Error("ui8a expected");
    let n = r.length;
    if (n < 2 || r[0] != 48)
      throw new t("Invalid signature tag");
    if (r[1] !== n - 2)
      throw new t("Invalid signature: incorrect length");
    const { d: i, l: o } = Un._parseInt(r.subarray(2)), { d: s, l: a } = Un._parseInt(o);
    if (a.length)
      throw new t("Invalid signature: left bytes after parsing");
    return { r: i, s };
  },
  hexFromSig(e) {
    const t = (l) => Number.parseInt(l[0], 16) & 8 ? "00" + l : l, r = (l) => {
      const h = l.toString(16);
      return h.length & 1 ? `0${h}` : h;
    }, n = t(r(e.s)), i = t(r(e.r)), o = n.length / 2, s = i.length / 2, a = r(o), f = r(s);
    return `30${r(s + o + 4)}02${f}${i}02${a}${n}`;
  }
}, $r = BigInt(0), Yt = BigInt(1);
BigInt(2);
const Zh = BigInt(3);
BigInt(4);
function Im(e) {
  const t = Om(e), { Fp: r } = t, n = t.toBytes || ((m, E, O) => {
    const x = E.toAffine();
    return Do(Uint8Array.from([4]), r.toBytes(x.x), r.toBytes(x.y));
  }), i = t.fromBytes || ((m) => {
    const E = m.subarray(1), O = r.fromBytes(E.subarray(0, r.BYTES)), x = r.fromBytes(E.subarray(r.BYTES, 2 * r.BYTES));
    return { x: O, y: x };
  });
  function o(m) {
    const { a: E, b: O } = t, x = r.sqr(m), U = r.mul(x, m);
    return r.add(r.add(U, r.mul(m, E)), O);
  }
  if (!r.eql(r.sqr(t.Gy), o(t.Gx)))
    throw new Error("bad generator point: equation left != right");
  function s(m) {
    return typeof m == "bigint" && $r < m && m < t.n;
  }
  function a(m) {
    if (!s(m))
      throw new Error("Expected valid bigint: 0 < bigint < curve.n");
  }
  function f(m) {
    const { allowedPrivateKeyLengths: E, nByteLength: O, wrapPrivateKey: x, n: U } = t;
    if (E && typeof m != "bigint") {
      if (m instanceof Uint8Array && (m = Wi(m)), typeof m != "string" || !E.includes(m.length))
        throw new Error("Invalid key");
      m = m.padStart(O * 2, "0");
    }
    let H;
    try {
      H = typeof m == "bigint" ? m : Mn(ir("private key", m, O));
    } catch {
      throw new Error(`private key must be ${O} bytes, hex or bigint, not ${typeof m}`);
    }
    return x && (H = Rt(H, U)), a(H), H;
  }
  const l = /* @__PURE__ */ new Map();
  function h(m) {
    if (!(m instanceof y))
      throw new Error("ProjectivePoint expected");
  }
  class y {
    constructor(E, O, x) {
      if (this.px = E, this.py = O, this.pz = x, E == null || !r.isValid(E))
        throw new Error("x required");
      if (O == null || !r.isValid(O))
        throw new Error("y required");
      if (x == null || !r.isValid(x))
        throw new Error("z required");
    }
    // Does not validate if the point is on-curve.
    // Use fromHex instead, or call assertValidity() later.
    static fromAffine(E) {
      const { x: O, y: x } = E || {};
      if (!E || !r.isValid(O) || !r.isValid(x))
        throw new Error("invalid affine point");
      if (E instanceof y)
        throw new Error("projective point not allowed");
      const U = (H) => r.eql(H, r.ZERO);
      return U(O) && U(x) ? y.ZERO : new y(O, x, r.ONE);
    }
    get x() {
      return this.toAffine().x;
    }
    get y() {
      return this.toAffine().y;
    }
    /**
     * Takes a bunch of Projective Points but executes only one
     * inversion on all of them. Inversion is very slow operation,
     * so this improves performance massively.
     * Optimization: converts a list of projective points to a list of identical points with Z=1.
     */
    static normalizeZ(E) {
      const O = r.invertBatch(E.map((x) => x.pz));
      return E.map((x, U) => x.toAffine(O[U])).map(y.fromAffine);
    }
    /**
     * Converts hash string or Uint8Array to Point.
     * @param hex short/long ECDSA hex
     */
    static fromHex(E) {
      const O = y.fromAffine(i(ir("pointHex", E)));
      return O.assertValidity(), O;
    }
    // Multiplies generator point by privateKey.
    static fromPrivateKey(E) {
      return y.BASE.multiply(f(E));
    }
    // "Private method", don't use it directly
    _setWindowSize(E) {
      this._WINDOW_SIZE = E, l.delete(this);
    }
    // A point on curve is valid if it conforms to equation.
    assertValidity() {
      if (this.is0()) {
        if (t.allowInfinityPoint && !r.is0(this.py))
          return;
        throw new Error("bad point: ZERO");
      }
      const { x: E, y: O } = this.toAffine();
      if (!r.isValid(E) || !r.isValid(O))
        throw new Error("bad point: x or y not FE");
      const x = r.sqr(O), U = o(E);
      if (!r.eql(x, U))
        throw new Error("bad point: equation left != right");
      if (!this.isTorsionFree())
        throw new Error("bad point: not in prime-order subgroup");
    }
    hasEvenY() {
      const { y: E } = this.toAffine();
      if (r.isOdd)
        return !r.isOdd(E);
      throw new Error("Field doesn't support isOdd");
    }
    /**
     * Compare one point to another.
     */
    equals(E) {
      h(E);
      const { px: O, py: x, pz: U } = this, { px: H, py: M, pz: k } = E, _ = r.eql(r.mul(O, k), r.mul(H, U)), L = r.eql(r.mul(x, k), r.mul(M, U));
      return _ && L;
    }
    /**
     * Flips point to one corresponding to (x, -y) in Affine coordinates.
     */
    negate() {
      return new y(this.px, r.neg(this.py), this.pz);
    }
    // Renes-Costello-Batina exception-free doubling formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 3
    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.
    double() {
      const { a: E, b: O } = t, x = r.mul(O, Zh), { px: U, py: H, pz: M } = this;
      let k = r.ZERO, _ = r.ZERO, L = r.ZERO, j = r.mul(U, U), F = r.mul(H, H), W = r.mul(M, M), te = r.mul(U, H);
      return te = r.add(te, te), L = r.mul(U, M), L = r.add(L, L), k = r.mul(E, L), _ = r.mul(x, W), _ = r.add(k, _), k = r.sub(F, _), _ = r.add(F, _), _ = r.mul(k, _), k = r.mul(te, k), L = r.mul(x, L), W = r.mul(E, W), te = r.sub(j, W), te = r.mul(E, te), te = r.add(te, L), L = r.add(j, j), j = r.add(L, j), j = r.add(j, W), j = r.mul(j, te), _ = r.add(_, j), W = r.mul(H, M), W = r.add(W, W), j = r.mul(W, te), k = r.sub(k, j), L = r.mul(W, F), L = r.add(L, L), L = r.add(L, L), new y(k, _, L);
    }
    // Renes-Costello-Batina exception-free addition formula.
    // There is 30% faster Jacobian formula, but it is not complete.
    // https://eprint.iacr.org/2015/1060, algorithm 1
    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.
    add(E) {
      h(E);
      const { px: O, py: x, pz: U } = this, { px: H, py: M, pz: k } = E;
      let _ = r.ZERO, L = r.ZERO, j = r.ZERO;
      const F = t.a, W = r.mul(t.b, Zh);
      let te = r.mul(O, H), re = r.mul(x, M), ae = r.mul(U, k), de = r.add(O, x), J = r.add(H, M);
      de = r.mul(de, J), J = r.add(te, re), de = r.sub(de, J), J = r.add(O, U);
      let ne = r.add(H, k);
      return J = r.mul(J, ne), ne = r.add(te, ae), J = r.sub(J, ne), ne = r.add(x, U), _ = r.add(M, k), ne = r.mul(ne, _), _ = r.add(re, ae), ne = r.sub(ne, _), j = r.mul(F, J), _ = r.mul(W, ae), j = r.add(_, j), _ = r.sub(re, j), j = r.add(re, j), L = r.mul(_, j), re = r.add(te, te), re = r.add(re, te), ae = r.mul(F, ae), J = r.mul(W, J), re = r.add(re, ae), ae = r.sub(te, ae), ae = r.mul(F, ae), J = r.add(J, ae), te = r.mul(re, J), L = r.add(L, te), te = r.mul(ne, J), _ = r.mul(de, _), _ = r.sub(_, te), te = r.mul(de, re), j = r.mul(ne, j), j = r.add(j, te), new y(_, L, j);
    }
    subtract(E) {
      return this.add(E.negate());
    }
    is0() {
      return this.equals(y.ZERO);
    }
    wNAF(E) {
      return g.wNAFCached(this, l, E, (O) => {
        const x = r.invertBatch(O.map((U) => U.pz));
        return O.map((U, H) => U.toAffine(x[H])).map(y.fromAffine);
      });
    }
    /**
     * Non-constant-time multiplication. Uses double-and-add algorithm.
     * It's faster, but should only be used when you don't care about
     * an exposed private key e.g. sig verification, which works over *public* keys.
     */
    multiplyUnsafe(E) {
      const O = y.ZERO;
      if (E === $r)
        return O;
      if (a(E), E === Yt)
        return this;
      const { endo: x } = t;
      if (!x)
        return g.unsafeLadder(this, E);
      let { k1neg: U, k1: H, k2neg: M, k2: k } = x.splitScalar(E), _ = O, L = O, j = this;
      for (; H > $r || k > $r; )
        H & Yt && (_ = _.add(j)), k & Yt && (L = L.add(j)), j = j.double(), H >>= Yt, k >>= Yt;
      return U && (_ = _.negate()), M && (L = L.negate()), L = new y(r.mul(L.px, x.beta), L.py, L.pz), _.add(L);
    }
    /**
     * Constant time multiplication.
     * Uses wNAF method. Windowed method may be 10% faster,
     * but takes 2x longer to generate and consumes 2x memory.
     * Uses precomputes when available.
     * Uses endomorphism for Koblitz curves.
     * @param scalar by which the point would be multiplied
     * @returns New point
     */
    multiply(E) {
      a(E);
      let O = E, x, U;
      const { endo: H } = t;
      if (H) {
        const { k1neg: M, k1: k, k2neg: _, k2: L } = H.splitScalar(O);
        let { p: j, f: F } = this.wNAF(k), { p: W, f: te } = this.wNAF(L);
        j = g.constTimeNegate(M, j), W = g.constTimeNegate(_, W), W = new y(r.mul(W.px, H.beta), W.py, W.pz), x = j.add(W), U = F.add(te);
      } else {
        const { p: M, f: k } = this.wNAF(O);
        x = M, U = k;
      }
      return y.normalizeZ([x, U])[0];
    }
    /**
     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.
     * Not using Strauss-Shamir trick: precomputation tables are faster.
     * The trick could be useful if both P and Q are not G (not in our case).
     * @returns non-zero affine point
     */
    multiplyAndAddUnsafe(E, O, x) {
      const U = y.BASE, H = (k, _) => _ === $r || _ === Yt || !k.equals(U) ? k.multiplyUnsafe(_) : k.multiply(_), M = H(this, O).add(H(E, x));
      return M.is0() ? void 0 : M;
    }
    // Converts Projective point to affine (x, y) coordinates.
    // Can accept precomputed Z^-1 - for example, from invertBatch.
    // (x, y, z) ∋ (x=x/z, y=y/z)
    toAffine(E) {
      const { px: O, py: x, pz: U } = this, H = this.is0();
      E == null && (E = H ? r.ONE : r.inv(U));
      const M = r.mul(O, E), k = r.mul(x, E), _ = r.mul(U, E);
      if (H)
        return { x: r.ZERO, y: r.ZERO };
      if (!r.eql(_, r.ONE))
        throw new Error("invZ was invalid");
      return { x: M, y: k };
    }
    isTorsionFree() {
      const { h: E, isTorsionFree: O } = t;
      if (E === Yt)
        return !0;
      if (O)
        return O(y, this);
      throw new Error("isTorsionFree() has not been declared for the elliptic curve");
    }
    clearCofactor() {
      const { h: E, clearCofactor: O } = t;
      return E === Yt ? this : O ? O(y, this) : this.multiplyUnsafe(t.h);
    }
    toRawBytes(E = !0) {
      return this.assertValidity(), n(y, this, E);
    }
    toHex(E = !0) {
      return Wi(this.toRawBytes(E));
    }
  }
  y.BASE = new y(t.Gx, t.Gy, r.ONE), y.ZERO = new y(r.ZERO, r.ONE, r.ZERO);
  const v = t.nBitLength, g = Sm(y, t.endo ? Math.ceil(v / 2) : v);
  return {
    CURVE: t,
    ProjectivePoint: y,
    normPrivateKeyToScalar: f,
    weierstrassEquation: o,
    isWithinCurveOrder: s
  };
}
function Pm(e) {
  const t = L0(e);
  return Jo(t, {
    hash: "hash",
    hmac: "function",
    randomBytes: "function"
  }, {
    bits2int: "function",
    bits2int_modN: "function",
    lowS: "boolean"
  }), Object.freeze({ lowS: !0, ...t });
}
function xm(e) {
  const t = Pm(e), { Fp: r, n } = t, i = r.BYTES + 1, o = 2 * r.BYTES + 1;
  function s(J) {
    return $r < J && J < r.ORDER;
  }
  function a(J) {
    return Rt(J, n);
  }
  function f(J) {
    return cu(J, n);
  }
  const { ProjectivePoint: l, normPrivateKeyToScalar: h, weierstrassEquation: y, isWithinCurveOrder: v } = Im({
    ...t,
    toBytes(J, ne, ue) {
      const pe = ne.toAffine(), z = r.toBytes(pe.x), Y = Do;
      return ue ? Y(Uint8Array.from([ne.hasEvenY() ? 2 : 3]), z) : Y(Uint8Array.from([4]), z, r.toBytes(pe.y));
    },
    fromBytes(J) {
      const ne = J.length, ue = J[0], pe = J.subarray(1);
      if (ne === i && (ue === 2 || ue === 3)) {
        const z = Mn(pe);
        if (!s(z))
          throw new Error("Point is not on curve");
        const Y = y(z);
        let ee = r.sqrt(Y);
        const $ = (ee & Yt) === Yt;
        return (ue & 1) === 1 !== $ && (ee = r.neg(ee)), { x: z, y: ee };
      } else if (ne === o && ue === 4) {
        const z = r.fromBytes(pe.subarray(0, r.BYTES)), Y = r.fromBytes(pe.subarray(r.BYTES, 2 * r.BYTES));
        return { x: z, y: Y };
      } else
        throw new Error(`Point of length ${ne} was invalid. Expected ${i} compressed bytes or ${o} uncompressed bytes`);
    }
  }), g = (J) => Wi(Xi(J, t.nByteLength));
  function m(J) {
    const ne = n >> Yt;
    return J > ne;
  }
  function E(J) {
    return m(J) ? a(-J) : J;
  }
  const O = (J, ne, ue) => Mn(J.slice(ne, ue));
  class x {
    constructor(ne, ue, pe) {
      this.r = ne, this.s = ue, this.recovery = pe, this.assertValidity();
    }
    // pair (bytes of r, bytes of s)
    static fromCompact(ne) {
      const ue = t.nByteLength;
      return ne = ir("compactSignature", ne, ue * 2), new x(O(ne, 0, ue), O(ne, ue, 2 * ue));
    }
    // DER encoded ECDSA signature
    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script
    static fromDER(ne) {
      const { r: ue, s: pe } = Un.toSig(ir("DER", ne));
      return new x(ue, pe);
    }
    assertValidity() {
      if (!v(this.r))
        throw new Error("r must be 0 < r < CURVE.n");
      if (!v(this.s))
        throw new Error("s must be 0 < s < CURVE.n");
    }
    addRecoveryBit(ne) {
      return new x(this.r, this.s, ne);
    }
    recoverPublicKey(ne) {
      const { r: ue, s: pe, recovery: z } = this, Y = L(ir("msgHash", ne));
      if (z == null || ![0, 1, 2, 3].includes(z))
        throw new Error("recovery id invalid");
      const ee = z === 2 || z === 3 ? ue + t.n : ue;
      if (ee >= r.ORDER)
        throw new Error("recovery id 2 or 3 invalid");
      const $ = z & 1 ? "03" : "02", q = l.fromHex($ + g(ee)), X = f(ee), ie = a(-Y * X), D = a(pe * X), A = l.BASE.multiplyAndAddUnsafe(q, ie, D);
      if (!A)
        throw new Error("point at infinify");
      return A.assertValidity(), A;
    }
    // Signatures should be low-s, to prevent malleability.
    hasHighS() {
      return m(this.s);
    }
    normalizeS() {
      return this.hasHighS() ? new x(this.r, a(-this.s), this.recovery) : this;
    }
    // DER-encoded
    toDERRawBytes() {
      return zi(this.toDERHex());
    }
    toDERHex() {
      return Un.hexFromSig({ r: this.r, s: this.s });
    }
    // padded bytes of r, then padded bytes of s
    toCompactRawBytes() {
      return zi(this.toCompactHex());
    }
    toCompactHex() {
      return g(this.r) + g(this.s);
    }
  }
  const U = {
    isValidPrivateKey(J) {
      try {
        return h(J), !0;
      } catch {
        return !1;
      }
    },
    normPrivateKeyToScalar: h,
    /**
     * Produces cryptographically secure private key from random of size
     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.
     */
    randomPrivateKey: () => {
      const J = H0(t.n);
      return Em(t.randomBytes(J), t.n);
    },
    /**
     * Creates precompute table for an arbitrary EC point. Makes point "cached".
     * Allows to massively speed-up `point.multiply(scalar)`.
     * @returns cached point
     * @example
     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));
     * fast.multiply(privKey); // much faster ECDH now
     */
    precompute(J = 8, ne = l.BASE) {
      return ne._setWindowSize(J), ne.multiply(BigInt(3)), ne;
    }
  };
  function H(J, ne = !0) {
    return l.fromPrivateKey(J).toRawBytes(ne);
  }
  function M(J) {
    const ne = J instanceof Uint8Array, ue = typeof J == "string", pe = (ne || ue) && J.length;
    return ne ? pe === i || pe === o : ue ? pe === 2 * i || pe === 2 * o : J instanceof l;
  }
  function k(J, ne, ue = !0) {
    if (M(J))
      throw new Error("first arg must be private key");
    if (!M(ne))
      throw new Error("second arg must be public key");
    return l.fromHex(ne).multiply(h(J)).toRawBytes(ue);
  }
  const _ = t.bits2int || function(J) {
    const ne = Mn(J), ue = J.length * 8 - t.nBitLength;
    return ue > 0 ? ne >> BigInt(ue) : ne;
  }, L = t.bits2int_modN || function(J) {
    return a(_(J));
  }, j = sl(t.nBitLength);
  function F(J) {
    if (typeof J != "bigint")
      throw new Error("bigint expected");
    if (!($r <= J && J < j))
      throw new Error(`bigint expected < 2^${t.nBitLength}`);
    return Xi(J, t.nByteLength);
  }
  function W(J, ne, ue = te) {
    if (["recovered", "canonical"].some((C) => C in ue))
      throw new Error("sign() legacy options not supported");
    const { hash: pe, randomBytes: z } = t;
    let { lowS: Y, prehash: ee, extraEntropy: $ } = ue;
    Y == null && (Y = !0), J = ir("msgHash", J), ee && (J = ir("prehashed msgHash", pe(J)));
    const q = L(J), X = h(ne), ie = [F(X), F(q)];
    if ($ != null) {
      const C = $ === !0 ? z(r.BYTES) : $;
      ie.push(ir("extraEntropy", C));
    }
    const D = Do(...ie), A = q;
    function P(C) {
      const K = _(C);
      if (!v(K))
        return;
      const S = f(K), T = l.BASE.multiply(K).toAffine(), V = a(T.x);
      if (V === $r)
        return;
      const Q = a(S * a(A + V * X));
      if (Q === $r)
        return;
      let be = (T.x === V ? 0 : 2) | Number(T.y & Yt), ye = Q;
      return Y && m(Q) && (ye = E(Q), be ^= 1), new x(V, ye, be);
    }
    return { seed: D, k2sig: P };
  }
  const te = { lowS: t.lowS, prehash: !1 }, re = { lowS: t.lowS, prehash: !1 };
  function ae(J, ne, ue = te) {
    const { seed: pe, k2sig: z } = W(J, ne, ue), Y = t;
    return U0(Y.hash.outputLen, Y.nByteLength, Y.hmac)(pe, z);
  }
  l.BASE._setWindowSize(8);
  function de(J, ne, ue, pe = re) {
    var T;
    const z = J;
    if (ne = ir("msgHash", ne), ue = ir("publicKey", ue), "strict" in pe)
      throw new Error("options.strict was renamed to lowS");
    const { lowS: Y, prehash: ee } = pe;
    let $, q;
    try {
      if (typeof z == "string" || z instanceof Uint8Array)
        try {
          $ = x.fromDER(z);
        } catch (V) {
          if (!(V instanceof Un.Err))
            throw V;
          $ = x.fromCompact(z);
        }
      else if (typeof z == "object" && typeof z.r == "bigint" && typeof z.s == "bigint") {
        const { r: V, s: Q } = z;
        $ = new x(V, Q);
      } else
        throw new Error("PARSE");
      q = l.fromHex(ue);
    } catch (V) {
      if (V.message === "PARSE")
        throw new Error("signature must be Signature instance, Uint8Array or hex string");
      return !1;
    }
    if (Y && $.hasHighS())
      return !1;
    ee && (ne = t.hash(ne));
    const { r: X, s: ie } = $, D = L(ne), A = f(ie), P = a(D * A), C = a(X * A), K = (T = l.BASE.multiplyAndAddUnsafe(q, P, C)) == null ? void 0 : T.toAffine();
    return K ? a(K.x) === X : !1;
  }
  return {
    CURVE: t,
    getPublicKey: H,
    getSharedSecret: k,
    sign: ae,
    verify: de,
    ProjectivePoint: l,
    Signature: x,
    utils: U
  };
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
function Bm(e) {
  return {
    hash: e,
    hmac: (t, ...r) => Lo(e, t, Oo(...r)),
    randomBytes: bw
  };
}
function km(e, t) {
  const r = (n) => xm({ ...e, ...Bm(n) });
  return Object.freeze({ ...r(t), create: r });
}
/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */
const D0 = BigInt("0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f"), Jh = BigInt("0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141"), Rm = BigInt(1), uu = BigInt(2), Qh = (e, t) => (e + t / uu) / t;
function Nm(e) {
  const t = D0, r = BigInt(3), n = BigInt(6), i = BigInt(11), o = BigInt(22), s = BigInt(23), a = BigInt(44), f = BigInt(88), l = e * e * e % t, h = l * l * e % t, y = Gt(h, r, t) * h % t, v = Gt(y, r, t) * h % t, g = Gt(v, uu, t) * l % t, m = Gt(g, i, t) * g % t, E = Gt(m, o, t) * m % t, O = Gt(E, a, t) * E % t, x = Gt(O, f, t) * O % t, U = Gt(x, a, t) * E % t, H = Gt(U, r, t) * h % t, M = Gt(H, s, t) * m % t, k = Gt(M, n, t) * l % t, _ = Gt(k, uu, t);
  if (!lu.eql(lu.sqr(_), e))
    throw new Error("Cannot find square root");
  return _;
}
const lu = mm(D0, void 0, void 0, { sqrt: Nm }), gr = km({
  a: BigInt(0),
  b: BigInt(7),
  Fp: lu,
  n: Jh,
  // Base point (x, y) aka generator point
  Gx: BigInt("55066263022277343669578718895168534326250603453777594175500187360389116729240"),
  Gy: BigInt("32670510020758816978083085130507043184471273380659243275938904335757337482424"),
  h: BigInt(1),
  lowS: !0,
  /**
   * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.
   * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.
   * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.
   * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066
   */
  endo: {
    beta: BigInt("0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee"),
    splitScalar: (e) => {
      const t = Jh, r = BigInt("0x3086d221a7d46bcde86c90e49284eb15"), n = -Rm * BigInt("0xe4437ed6010e88286f547fa90abfe4c3"), i = BigInt("0x114ca50f7a8e2f3f657c1108d9d44cfd8"), o = r, s = BigInt("0x100000000000000000000000000000000"), a = Qh(o * e, t), f = Qh(-n * e, t);
      let l = Rt(e - a * r - f * i, t), h = Rt(-a * n - f * o, t);
      const y = l > s, v = h > s;
      if (y && (l = t - l), v && (h = t - h), l > s || h > s)
        throw new Error("splitScalar: Endomorphism failed, k=" + e);
      return { k1neg: y, k1: l, k2neg: v, k2: h };
    }
  }
}, Da);
BigInt(0);
gr.ProjectivePoint;
/*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) */
// @__NO_SIDE_EFFECTS__
function al(...e) {
  const t = (i, o) => (s) => i(o(s)), r = Array.from(e).reverse().reduce((i, o) => i ? t(i, o.encode) : o.encode, void 0), n = e.reduce((i, o) => i ? t(i, o.decode) : o.decode, void 0);
  return { encode: r, decode: n };
}
// @__NO_SIDE_EFFECTS__
function M0(e) {
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("alphabet.encode input should be an array of numbers");
      return t.map((r) => {
        if (r < 0 || r >= e.length)
          throw new Error(`Digit index outside alphabet: ${r} (alphabet: ${e.length})`);
        return e[r];
      });
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("alphabet.decode input should be array of strings");
      return t.map((r) => {
        if (typeof r != "string")
          throw new Error(`alphabet.decode: not string element=${r}`);
        const n = e.indexOf(r);
        if (n === -1)
          throw new Error(`Unknown letter: "${r}". Allowed: ${e}`);
        return n;
      });
    }
  };
}
// @__NO_SIDE_EFFECTS__
function F0(e = "") {
  if (typeof e != "string")
    throw new Error("join separator should be string");
  return {
    encode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "string")
        throw new Error("join.encode input should be array of strings");
      for (let r of t)
        if (typeof r != "string")
          throw new Error(`join.encode: non-string input=${r}`);
      return t.join(e);
    },
    decode: (t) => {
      if (typeof t != "string")
        throw new Error("join.decode input should be string");
      return t.split(e);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Um(e, t = "=") {
  if (typeof t != "string")
    throw new Error("padding chr should be string");
  return {
    encode(r) {
      if (!Array.isArray(r) || r.length && typeof r[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let n of r)
        if (typeof n != "string")
          throw new Error(`padding.encode: non-string input=${n}`);
      for (; r.length * e % 8; )
        r.push(t);
      return r;
    },
    decode(r) {
      if (!Array.isArray(r) || r.length && typeof r[0] != "string")
        throw new Error("padding.encode input should be array of strings");
      for (let i of r)
        if (typeof i != "string")
          throw new Error(`padding.decode: non-string input=${i}`);
      let n = r.length;
      if (n * e % 8)
        throw new Error("Invalid padding: string should have whole number of bytes");
      for (; n > 0 && r[n - 1] === t; n--)
        if (!((n - 1) * e % 8))
          throw new Error("Invalid padding: string has too much padding");
      return r.slice(0, n);
    }
  };
}
// @__NO_SIDE_EFFECTS__
function ep(e, t, r) {
  if (t < 2)
    throw new Error(`convertRadix: wrong from=${t}, base cannot be less than 2`);
  if (r < 2)
    throw new Error(`convertRadix: wrong to=${r}, base cannot be less than 2`);
  if (!Array.isArray(e))
    throw new Error("convertRadix: data should be array");
  if (!e.length)
    return [];
  let n = 0;
  const i = [], o = Array.from(e);
  for (o.forEach((s) => {
    if (s < 0 || s >= t)
      throw new Error(`Wrong integer: ${s}`);
  }); ; ) {
    let s = 0, a = !0;
    for (let f = n; f < o.length; f++) {
      const l = o[f], h = t * s + l;
      if (!Number.isSafeInteger(h) || t * s / t !== s || h - l !== t * s)
        throw new Error("convertRadix: carry overflow");
      s = h % r;
      const y = Math.floor(h / r);
      if (o[f] = y, !Number.isSafeInteger(y) || y * r + s !== h)
        throw new Error("convertRadix: carry overflow");
      if (a)
        y ? a = !1 : n = f;
      else
        continue;
    }
    if (i.push(s), a)
      break;
  }
  for (let s = 0; s < e.length - 1 && e[s] === 0; s++)
    i.push(0);
  return i.reverse();
}
const j0 = /* @__NO_SIDE_EFFECTS__ */ (e, t) => t ? /* @__PURE__ */ j0(t, e % t) : e, ua = /* @__NO_SIDE_EFFECTS__ */ (e, t) => e + (t - /* @__PURE__ */ j0(e, t));
// @__NO_SIDE_EFFECTS__
function tp(e, t, r, n) {
  if (!Array.isArray(e))
    throw new Error("convertRadix2: data should be array");
  if (t <= 0 || t > 32)
    throw new Error(`convertRadix2: wrong from=${t}`);
  if (r <= 0 || r > 32)
    throw new Error(`convertRadix2: wrong to=${r}`);
  if (/* @__PURE__ */ ua(t, r) > 32)
    throw new Error(`convertRadix2: carry overflow from=${t} to=${r} carryBits=${/* @__PURE__ */ ua(t, r)}`);
  let i = 0, o = 0;
  const s = 2 ** r - 1, a = [];
  for (const f of e) {
    if (f >= 2 ** t)
      throw new Error(`convertRadix2: invalid data word=${f} from=${t}`);
    if (i = i << t | f, o + t > 32)
      throw new Error(`convertRadix2: carry overflow pos=${o} from=${t}`);
    for (o += t; o >= r; o -= r)
      a.push((i >> o - r & s) >>> 0);
    i &= 2 ** o - 1;
  }
  if (i = i << r - o & s, !n && o >= t)
    throw new Error("Excess padding");
  if (!n && i)
    throw new Error(`Non-zero padding: ${i}`);
  return n && o > 0 && a.push(i >>> 0), a;
}
// @__NO_SIDE_EFFECTS__
function K0(e) {
  return {
    encode: (t) => {
      if (!(t instanceof Uint8Array))
        throw new Error("radix.encode input should be Uint8Array");
      return /* @__PURE__ */ ep(Array.from(t), 2 ** 8, e);
    },
    decode: (t) => {
      if (!Array.isArray(t) || t.length && typeof t[0] != "number")
        throw new Error("radix.decode input should be array of strings");
      return Uint8Array.from(/* @__PURE__ */ ep(t, e, 2 ** 8));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function Cm(e, t = !1) {
  if (e <= 0 || e > 32)
    throw new Error("radix2: bits should be in (0..32]");
  if (/* @__PURE__ */ ua(8, e) > 32 || /* @__PURE__ */ ua(e, 8) > 32)
    throw new Error("radix2: carry overflow");
  return {
    encode: (r) => {
      if (!(r instanceof Uint8Array))
        throw new Error("radix2.encode input should be Uint8Array");
      return /* @__PURE__ */ tp(Array.from(r), 8, e, !t);
    },
    decode: (r) => {
      if (!Array.isArray(r) || r.length && typeof r[0] != "number")
        throw new Error("radix2.decode input should be array of strings");
      return Uint8Array.from(/* @__PURE__ */ tp(r, e, 8, t));
    }
  };
}
// @__NO_SIDE_EFFECTS__
function q0(e, t) {
  if (typeof t != "function")
    throw new Error("checksum fn should be function");
  return {
    encode(r) {
      if (!(r instanceof Uint8Array))
        throw new Error("checksum.encode: input should be Uint8Array");
      const n = t(r).slice(0, e), i = new Uint8Array(r.length + e);
      return i.set(r), i.set(n, r.length), i;
    },
    decode(r) {
      if (!(r instanceof Uint8Array))
        throw new Error("checksum.decode: input should be Uint8Array");
      const n = r.slice(0, -e), i = t(n).slice(0, e), o = r.slice(-e);
      for (let s = 0; s < e; s++)
        if (i[s] !== o[s])
          throw new Error("Invalid checksum");
      return n;
    }
  };
}
const Ss = { alphabet: M0, chain: al, checksum: q0, radix: K0, radix2: Cm, join: F0, padding: Um }, $m = (e) => /* @__PURE__ */ al(/* @__PURE__ */ K0(58), /* @__PURE__ */ M0(e), /* @__PURE__ */ F0("")), Hm = /* @__PURE__ */ $m("123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"), Lm = (e) => /* @__PURE__ */ al(/* @__PURE__ */ q0(4, (t) => e(e(t))), Hm);
/*! scure-bip32 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) */
const Os = gr.ProjectivePoint, qf = Lm(Da);
function rp(e) {
  return BigInt(`0x${pw(e)}`);
}
function Dm(e) {
  return dw(e.toString(16).padStart(64, "0"));
}
const Mm = T0("Bitcoin seed"), Gf = { private: 76066276, public: 76067358 }, Vf = 2147483648, Fm = (e) => Tw(Da(e)), jm = (e) => Dn(e).getUint32(0, !1), As = (e) => {
  if (!Number.isSafeInteger(e) || e < 0 || e > 2 ** 32 - 1)
    throw new Error(`Invalid number=${e}. Should be from 0 to 2 ** 32 - 1`);
  const t = new Uint8Array(4);
  return Dn(t).setUint32(0, e, !1), t;
};
class xn {
  get fingerprint() {
    if (!this.pubHash)
      throw new Error("No publicKey set!");
    return jm(this.pubHash);
  }
  get identifier() {
    return this.pubHash;
  }
  get pubKeyHash() {
    return this.pubHash;
  }
  get privateKey() {
    return this.privKeyBytes || null;
  }
  get publicKey() {
    return this.pubKey || null;
  }
  get privateExtendedKey() {
    const t = this.privateKey;
    if (!t)
      throw new Error("No private key");
    return qf.encode(this.serialize(this.versions.private, Oo(new Uint8Array([0]), t)));
  }
  get publicExtendedKey() {
    if (!this.pubKey)
      throw new Error("No public key");
    return qf.encode(this.serialize(this.versions.public, this.pubKey));
  }
  static fromMasterSeed(t, r = Gf) {
    if (fn(t), 8 * t.length < 128 || 8 * t.length > 512)
      throw new Error(`HDKey: wrong seed length=${t.length}. Should be between 128 and 512 bits; 256 bits is advised)`);
    const n = Lo(au, Mm, t);
    return new xn({
      versions: r,
      chainCode: n.slice(32),
      privateKey: n.slice(0, 32)
    });
  }
  static fromExtendedKey(t, r = Gf) {
    const n = qf.decode(t), i = Dn(n), o = i.getUint32(0, !1), s = {
      versions: r,
      depth: n[4],
      parentFingerprint: i.getUint32(5, !1),
      index: i.getUint32(9, !1),
      chainCode: n.slice(13, 45)
    }, a = n.slice(45), f = a[0] === 0;
    if (o !== r[f ? "private" : "public"])
      throw new Error("Version mismatch");
    return f ? new xn({ ...s, privateKey: a.slice(1) }) : new xn({ ...s, publicKey: a });
  }
  static fromJSON(t) {
    return xn.fromExtendedKey(t.xpriv);
  }
  constructor(t) {
    if (this.depth = 0, this.index = 0, this.chainCode = null, this.parentFingerprint = 0, !t || typeof t != "object")
      throw new Error("HDKey.constructor must not be called directly");
    if (this.versions = t.versions || Gf, this.depth = t.depth || 0, this.chainCode = t.chainCode, this.index = t.index || 0, this.parentFingerprint = t.parentFingerprint || 0, !this.depth && (this.parentFingerprint || this.index))
      throw new Error("HDKey: zero depth with non-zero index/parent fingerprint");
    if (t.publicKey && t.privateKey)
      throw new Error("HDKey: publicKey and privateKey at same time.");
    if (t.privateKey) {
      if (!gr.utils.isValidPrivateKey(t.privateKey))
        throw new Error("Invalid private key");
      this.privKey = typeof t.privateKey == "bigint" ? t.privateKey : rp(t.privateKey), this.privKeyBytes = Dm(this.privKey), this.pubKey = gr.getPublicKey(t.privateKey, !0);
    } else if (t.publicKey)
      this.pubKey = Os.fromHex(t.publicKey).toRawBytes(!0);
    else
      throw new Error("HDKey: no public or private key provided");
    this.pubHash = Fm(this.pubKey);
  }
  derive(t) {
    if (!/^[mM]'?/.test(t))
      throw new Error('Path must start with "m" or "M"');
    if (/^[mM]'?$/.test(t))
      return this;
    const r = t.replace(/^[mM]'?\//, "").split("/");
    let n = this;
    for (const i of r) {
      const o = /^(\d+)('?)$/.exec(i), s = o && o[1];
      if (!o || o.length !== 3 || typeof s != "string")
        throw new Error(`Invalid child index: ${i}`);
      let a = +s;
      if (!Number.isSafeInteger(a) || a >= Vf)
        throw new Error("Invalid index");
      o[2] === "'" && (a += Vf), n = n.deriveChild(a);
    }
    return n;
  }
  deriveChild(t) {
    if (!this.pubKey || !this.chainCode)
      throw new Error("No publicKey or chainCode set");
    let r = As(t);
    if (t >= Vf) {
      const a = this.privateKey;
      if (!a)
        throw new Error("Could not derive hardened child key");
      r = Oo(new Uint8Array([0]), a, r);
    } else
      r = Oo(this.pubKey, r);
    const n = Lo(au, this.chainCode, r), i = rp(n.slice(0, 32)), o = n.slice(32);
    if (!gr.utils.isValidPrivateKey(i))
      throw new Error("Tweak bigger than curve order");
    const s = {
      versions: this.versions,
      chainCode: o,
      depth: this.depth + 1,
      parentFingerprint: this.fingerprint,
      index: t
    };
    try {
      if (this.privateKey) {
        const a = Rt(this.privKey + i, gr.CURVE.n);
        if (!gr.utils.isValidPrivateKey(a))
          throw new Error("The tweak was out of range or the resulted private key is invalid");
        s.privateKey = a;
      } else {
        const a = Os.fromHex(this.pubKey).add(Os.fromPrivateKey(i));
        if (a.equals(Os.ZERO))
          throw new Error("The tweak was equal to negative P, which made the result key invalid");
        s.publicKey = a.toRawBytes(!0);
      }
      return new xn(s);
    } catch {
      return this.deriveChild(t + 1);
    }
  }
  sign(t) {
    if (!this.privateKey)
      throw new Error("No privateKey set!");
    return fn(t, 32), gr.sign(t, this.privKey).toCompactRawBytes();
  }
  verify(t, r) {
    if (fn(t, 32), fn(r, 64), !this.publicKey)
      throw new Error("No publicKey set!");
    let n;
    try {
      n = gr.Signature.fromCompact(r);
    } catch {
      return !1;
    }
    return gr.verify(n, t, this.publicKey);
  }
  wipePrivateData() {
    return this.privKey = void 0, this.privKeyBytes && (this.privKeyBytes.fill(0), this.privKeyBytes = void 0), this;
  }
  toJSON() {
    return {
      xpriv: this.privateExtendedKey,
      xpub: this.publicExtendedKey
    };
  }
  serialize(t, r) {
    if (!this.chainCode)
      throw new Error("No chainCode set");
    return fn(r, 33), Oo(As(t), new Uint8Array([this.depth]), As(this.parentFingerprint), As(this.index), this.chainCode, r);
  }
}
var qr = {}, Ut = {}, pt = {};
Object.defineProperty(pt, "__esModule", { value: !0 });
pt.testnet = pt.regtest = pt.bitcoin = void 0;
pt.bitcoin = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "bc",
  bip32: {
    public: 76067358,
    private: 76066276
  },
  pubKeyHash: 0,
  scriptHash: 5,
  wif: 128
};
pt.regtest = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "bcrt",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
pt.testnet = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "tb",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
var oo = {}, ja = {}, Ht = {}, Mr = {};
Object.defineProperty(Mr, "__esModule", { value: !0 });
Mr.encode = Mr.decode = Mr.check = void 0;
function Km(e) {
  if (e.length < 8 || e.length > 72 || e[0] !== 48 || e[1] !== e.length - 2 || e[2] !== 2)
    return !1;
  const t = e[3];
  if (t === 0 || 5 + t >= e.length || e[4 + t] !== 2)
    return !1;
  const r = e[5 + t];
  return !(r === 0 || 6 + t + r !== e.length || e[4] & 128 || t > 1 && e[4] === 0 && !(e[5] & 128) || e[t + 6] & 128 || r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128));
}
Mr.check = Km;
function qm(e) {
  if (e.length < 8)
    throw new Error("DER sequence length is too short");
  if (e.length > 72)
    throw new Error("DER sequence length is too long");
  if (e[0] !== 48)
    throw new Error("Expected DER sequence");
  if (e[1] !== e.length - 2)
    throw new Error("DER sequence length is invalid");
  if (e[2] !== 2)
    throw new Error("Expected DER integer");
  const t = e[3];
  if (t === 0)
    throw new Error("R length is zero");
  if (5 + t >= e.length)
    throw new Error("R length is too long");
  if (e[4 + t] !== 2)
    throw new Error("Expected DER integer (2)");
  const r = e[5 + t];
  if (r === 0)
    throw new Error("S length is zero");
  if (6 + t + r !== e.length)
    throw new Error("S length is invalid");
  if (e[4] & 128)
    throw new Error("R value is negative");
  if (t > 1 && e[4] === 0 && !(e[5] & 128))
    throw new Error("R value excessively padded");
  if (e[t + 6] & 128)
    throw new Error("S value is negative");
  if (r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128))
    throw new Error("S value excessively padded");
  return {
    r: e.slice(4, 4 + t),
    s: e.slice(6 + t)
  };
}
Mr.decode = qm;
function Gm(e, t) {
  const r = e.length, n = t.length;
  if (r === 0)
    throw new Error("R length is zero");
  if (n === 0)
    throw new Error("S length is zero");
  if (r > 33)
    throw new Error("R length is too long");
  if (n > 33)
    throw new Error("S length is too long");
  if (e[0] & 128)
    throw new Error("R value is negative");
  if (t[0] & 128)
    throw new Error("S value is negative");
  if (r > 1 && e[0] === 0 && !(e[1] & 128))
    throw new Error("R value excessively padded");
  if (n > 1 && t[0] === 0 && !(t[1] & 128))
    throw new Error("S value excessively padded");
  const i = N.Buffer.allocUnsafe(6 + r + n);
  return i[0] = 48, i[1] = i.length - 2, i[2] = 2, i[3] = e.length, e.copy(i, 4), i[4 + r] = 2, i[5 + r] = t.length, t.copy(i, 6 + r), i;
}
Mr.encode = Gm;
var vn = {};
Object.defineProperty(vn, "__esModule", { value: !0 });
vn.REVERSE_OPS = vn.OPS = void 0;
const hu = {
  OP_FALSE: 0,
  OP_0: 0,
  OP_PUSHDATA1: 76,
  OP_PUSHDATA2: 77,
  OP_PUSHDATA4: 78,
  OP_1NEGATE: 79,
  OP_RESERVED: 80,
  OP_TRUE: 81,
  OP_1: 81,
  OP_2: 82,
  OP_3: 83,
  OP_4: 84,
  OP_5: 85,
  OP_6: 86,
  OP_7: 87,
  OP_8: 88,
  OP_9: 89,
  OP_10: 90,
  OP_11: 91,
  OP_12: 92,
  OP_13: 93,
  OP_14: 94,
  OP_15: 95,
  OP_16: 96,
  OP_NOP: 97,
  OP_VER: 98,
  OP_IF: 99,
  OP_NOTIF: 100,
  OP_VERIF: 101,
  OP_VERNOTIF: 102,
  OP_ELSE: 103,
  OP_ENDIF: 104,
  OP_VERIFY: 105,
  OP_RETURN: 106,
  OP_TOALTSTACK: 107,
  OP_FROMALTSTACK: 108,
  OP_2DROP: 109,
  OP_2DUP: 110,
  OP_3DUP: 111,
  OP_2OVER: 112,
  OP_2ROT: 113,
  OP_2SWAP: 114,
  OP_IFDUP: 115,
  OP_DEPTH: 116,
  OP_DROP: 117,
  OP_DUP: 118,
  OP_NIP: 119,
  OP_OVER: 120,
  OP_PICK: 121,
  OP_ROLL: 122,
  OP_ROT: 123,
  OP_SWAP: 124,
  OP_TUCK: 125,
  OP_CAT: 126,
  OP_SUBSTR: 127,
  OP_LEFT: 128,
  OP_RIGHT: 129,
  OP_SIZE: 130,
  OP_INVERT: 131,
  OP_AND: 132,
  OP_OR: 133,
  OP_XOR: 134,
  OP_EQUAL: 135,
  OP_EQUALVERIFY: 136,
  OP_RESERVED1: 137,
  OP_RESERVED2: 138,
  OP_1ADD: 139,
  OP_1SUB: 140,
  OP_2MUL: 141,
  OP_2DIV: 142,
  OP_NEGATE: 143,
  OP_ABS: 144,
  OP_NOT: 145,
  OP_0NOTEQUAL: 146,
  OP_ADD: 147,
  OP_SUB: 148,
  OP_MUL: 149,
  OP_DIV: 150,
  OP_MOD: 151,
  OP_LSHIFT: 152,
  OP_RSHIFT: 153,
  OP_BOOLAND: 154,
  OP_BOOLOR: 155,
  OP_NUMEQUAL: 156,
  OP_NUMEQUALVERIFY: 157,
  OP_NUMNOTEQUAL: 158,
  OP_LESSTHAN: 159,
  OP_GREATERTHAN: 160,
  OP_LESSTHANOREQUAL: 161,
  OP_GREATERTHANOREQUAL: 162,
  OP_MIN: 163,
  OP_MAX: 164,
  OP_WITHIN: 165,
  OP_RIPEMD160: 166,
  OP_SHA1: 167,
  OP_SHA256: 168,
  OP_HASH160: 169,
  OP_HASH256: 170,
  OP_CODESEPARATOR: 171,
  OP_CHECKSIG: 172,
  OP_CHECKSIGVERIFY: 173,
  OP_CHECKMULTISIG: 174,
  OP_CHECKMULTISIGVERIFY: 175,
  OP_NOP1: 176,
  OP_NOP2: 177,
  OP_CHECKLOCKTIMEVERIFY: 177,
  OP_NOP3: 178,
  OP_CHECKSEQUENCEVERIFY: 178,
  OP_NOP4: 179,
  OP_NOP5: 180,
  OP_NOP6: 181,
  OP_NOP7: 182,
  OP_NOP8: 183,
  OP_NOP9: 184,
  OP_NOP10: 185,
  OP_CHECKSIGADD: 186,
  OP_PUBKEYHASH: 253,
  OP_PUBKEY: 254,
  OP_INVALIDOPCODE: 255
};
vn.OPS = hu;
const G0 = {};
vn.REVERSE_OPS = G0;
for (const e of Object.keys(hu)) {
  const t = hu[e];
  G0[t] = e;
}
var dn = {};
Object.defineProperty(dn, "__esModule", { value: !0 });
dn.decode = dn.encode = dn.encodingLength = void 0;
const cn = vn;
function V0(e) {
  return e < cn.OPS.OP_PUSHDATA1 ? 1 : e <= 255 ? 2 : e <= 65535 ? 3 : 5;
}
dn.encodingLength = V0;
function Vm(e, t, r) {
  const n = V0(t);
  return n === 1 ? e.writeUInt8(t, r) : n === 2 ? (e.writeUInt8(cn.OPS.OP_PUSHDATA1, r), e.writeUInt8(t, r + 1)) : n === 3 ? (e.writeUInt8(cn.OPS.OP_PUSHDATA2, r), e.writeUInt16LE(t, r + 1)) : (e.writeUInt8(cn.OPS.OP_PUSHDATA4, r), e.writeUInt32LE(t, r + 1)), n;
}
dn.encode = Vm;
function Wm(e, t) {
  const r = e.readUInt8(t);
  let n, i;
  if (r < cn.OPS.OP_PUSHDATA1)
    n = r, i = 1;
  else if (r === cn.OPS.OP_PUSHDATA1) {
    if (t + 2 > e.length)
      return null;
    n = e.readUInt8(t + 1), i = 2;
  } else if (r === cn.OPS.OP_PUSHDATA2) {
    if (t + 3 > e.length)
      return null;
    n = e.readUInt16LE(t + 1), i = 3;
  } else {
    if (t + 5 > e.length)
      return null;
    if (r !== cn.OPS.OP_PUSHDATA4)
      throw new Error("Unexpected opcode");
    n = e.readUInt32LE(t + 1), i = 5;
  }
  return {
    opcode: r,
    number: n,
    size: i
  };
}
dn.decode = Wm;
var Yi = {};
Object.defineProperty(Yi, "__esModule", { value: !0 });
Yi.encode = Yi.decode = void 0;
function zm(e, t, r) {
  t = t || 4, r = r === void 0 ? !0 : r;
  const n = e.length;
  if (n === 0)
    return 0;
  if (n > t)
    throw new TypeError("Script number overflow");
  if (r && !(e[n - 1] & 127) && (n <= 1 || !(e[n - 2] & 128)))
    throw new Error("Non-minimally encoded script number");
  if (n === 5) {
    const o = e.readUInt32LE(0), s = e.readUInt8(4);
    return s & 128 ? -((s & -129) * 4294967296 + o) : s * 4294967296 + o;
  }
  let i = 0;
  for (let o = 0; o < n; ++o)
    i |= e[o] << 8 * o;
  return e[n - 1] & 128 ? -(i & ~(128 << 8 * (n - 1))) : i;
}
Yi.decode = zm;
function Xm(e) {
  return e > 2147483647 ? 5 : e > 8388607 ? 4 : e > 32767 ? 3 : e > 127 ? 2 : e > 0 ? 1 : 0;
}
function Ym(e) {
  let t = Math.abs(e);
  const r = Xm(t), n = N.Buffer.allocUnsafe(r), i = e < 0;
  for (let o = 0; o < r; ++o)
    n.writeUInt8(t & 255, o), t >>= 8;
  return n[r - 1] & 128 ? n.writeUInt8(i ? 128 : 0, r - 1) : i && (n[r - 1] |= 128), n;
}
Yi.encode = Ym;
var Zi = {}, wt = {}, Mo = {
  Array: function(e) {
    return e != null && e.constructor === Array;
  },
  Boolean: function(e) {
    return typeof e == "boolean";
  },
  Function: function(e) {
    return typeof e == "function";
  },
  Nil: function(e) {
    return e == null;
  },
  Number: function(e) {
    return typeof e == "number";
  },
  Object: function(e) {
    return typeof e == "object";
  },
  String: function(e) {
    return typeof e == "string";
  },
  "": function() {
    return !0;
  }
};
Mo.Null = Mo.Nil;
for (var np in Mo)
  Mo[np].toJSON = (function(e) {
    return e;
  }).bind(null, np);
var fl = Mo, Fn = fl;
function W0(e) {
  return e.name || e.toString().match(/function (.*?)\s*\(/)[1];
}
function cl(e) {
  return Fn.Nil(e) ? "" : W0(e.constructor);
}
function Zm(e) {
  return Fn.Function(e) ? "" : Fn.String(e) ? JSON.stringify(e) : e && Fn.Object(e) ? "" : e;
}
function ul(e, t) {
  Error.captureStackTrace && Error.captureStackTrace(e, t);
}
function la(e) {
  return Fn.Function(e) ? e.toJSON ? e.toJSON() : W0(e) : Fn.Array(e) ? "Array" : e && Fn.Object(e) ? "Object" : e !== void 0 ? e : "";
}
function z0(e, t, r) {
  var n = Zm(t);
  return "Expected " + la(e) + ", got" + (r !== "" ? " " + r : "") + (n !== "" ? " " + n : "");
}
function Gr(e, t, r) {
  r = r || cl(t), this.message = z0(e, t, r), ul(this, Gr), this.__type = e, this.__value = t, this.__valueTypeName = r;
}
Gr.prototype = Object.create(Error.prototype);
Gr.prototype.constructor = Gr;
function Jm(e, t, r, n, i) {
  var o = '" of type ';
  return t === "key" && (o = '" with key type '), z0('property "' + la(r) + o + la(e), n, i);
}
function Li(e, t, r, n, i) {
  e ? (i = i || cl(n), this.message = Jm(e, r, t, n, i)) : this.message = 'Unexpected property "' + t + '"', ul(this, Gr), this.__label = r, this.__property = t, this.__type = e, this.__value = n, this.__valueTypeName = i;
}
Li.prototype = Object.create(Error.prototype);
Li.prototype.constructor = Gr;
function Qm(e, t) {
  return new Gr(e, {}, t);
}
function e2(e, t, r) {
  return e instanceof Li ? (t = t + "." + e.__property, e = new Li(
    e.__type,
    t,
    e.__label,
    e.__value,
    e.__valueTypeName
  )) : e instanceof Gr && (e = new Li(
    e.__type,
    t,
    r,
    e.__value,
    e.__valueTypeName
  )), ul(e), e;
}
var X0 = {
  TfTypeError: Gr,
  TfPropertyTypeError: Li,
  tfCustomError: Qm,
  tfSubError: e2,
  tfJSON: la,
  getValueTypeName: cl
}, Wf, ip;
function t2() {
  if (ip)
    return Wf;
  ip = 1;
  var e = fl, t = X0;
  function r(_) {
    return N.Buffer.isBuffer(_);
  }
  function n(_) {
    return typeof _ == "string" && /^([0-9a-f]{2})+$/i.test(_);
  }
  function i(_, L) {
    var j = _.toJSON();
    function F(W) {
      if (!_(W))
        return !1;
      if (W.length === L)
        return !0;
      throw t.tfCustomError(j + "(Length: " + L + ")", j + "(Length: " + W.length + ")");
    }
    return F.toJSON = function() {
      return j;
    }, F;
  }
  var o = i.bind(null, e.Array), s = i.bind(null, r), a = i.bind(null, n), f = i.bind(null, e.String);
  function l(_, L, j) {
    j = j || e.Number;
    function F(W, te) {
      return j(W, te) && W > _ && W < L;
    }
    return F.toJSON = function() {
      return `${j.toJSON()} between [${_}, ${L}]`;
    }, F;
  }
  var h = Math.pow(2, 53) - 1;
  function y(_) {
    return typeof _ == "number" && isFinite(_);
  }
  function v(_) {
    return _ << 24 >> 24 === _;
  }
  function g(_) {
    return _ << 16 >> 16 === _;
  }
  function m(_) {
    return (_ | 0) === _;
  }
  function E(_) {
    return typeof _ == "number" && _ >= -h && _ <= h && Math.floor(_) === _;
  }
  function O(_) {
    return (_ & 255) === _;
  }
  function x(_) {
    return (_ & 65535) === _;
  }
  function U(_) {
    return _ >>> 0 === _;
  }
  function H(_) {
    return typeof _ == "number" && _ >= 0 && _ <= h && Math.floor(_) === _;
  }
  var M = {
    ArrayN: o,
    Buffer: r,
    BufferN: s,
    Finite: y,
    Hex: n,
    HexN: a,
    Int8: v,
    Int16: g,
    Int32: m,
    Int53: E,
    Range: l,
    StringN: f,
    UInt8: O,
    UInt16: x,
    UInt32: U,
    UInt53: H
  };
  for (var k in M)
    M[k].toJSON = (function(_) {
      return _;
    }).bind(null, k);
  return Wf = M, Wf;
}
var Qo = X0, Nt = fl, Br = Qo.tfJSON, Y0 = Qo.TfTypeError, Z0 = Qo.TfPropertyTypeError, Ts = Qo.tfSubError;
Qo.getValueTypeName;
var Hr = {
  arrayOf: function(t, r) {
    t = br(t), r = r || {};
    function n(i, o) {
      return !Nt.Array(i) || Nt.Nil(i) || r.minLength !== void 0 && i.length < r.minLength || r.maxLength !== void 0 && i.length > r.maxLength || r.length !== void 0 && i.length !== r.length ? !1 : i.every(function(s, a) {
        try {
          return Mt(t, s, o);
        } catch (f) {
          throw Ts(f, a);
        }
      });
    }
    return n.toJSON = function() {
      var i = "[" + Br(t) + "]";
      return r.length !== void 0 ? i += "{" + r.length + "}" : (r.minLength !== void 0 || r.maxLength !== void 0) && (i += "{" + (r.minLength === void 0 ? 0 : r.minLength) + "," + (r.maxLength === void 0 ? 1 / 0 : r.maxLength) + "}"), i;
    }, n;
  },
  maybe: function e(t) {
    t = br(t);
    function r(n, i) {
      return Nt.Nil(n) || t(n, i, e);
    }
    return r.toJSON = function() {
      return "?" + Br(t);
    }, r;
  },
  map: function(t, r) {
    t = br(t), r && (r = br(r));
    function n(i, o) {
      if (!Nt.Object(i) || Nt.Nil(i))
        return !1;
      for (var s in i) {
        try {
          r && Mt(r, s, o);
        } catch (f) {
          throw Ts(f, s, "key");
        }
        try {
          var a = i[s];
          Mt(t, a, o);
        } catch (f) {
          throw Ts(f, s);
        }
      }
      return !0;
    }
    return r ? n.toJSON = function() {
      return "{" + Br(r) + ": " + Br(t) + "}";
    } : n.toJSON = function() {
      return "{" + Br(t) + "}";
    }, n;
  },
  object: function(t) {
    var r = {};
    for (var n in t)
      r[n] = br(t[n]);
    function i(o, s) {
      if (!Nt.Object(o) || Nt.Nil(o))
        return !1;
      var a;
      try {
        for (a in r) {
          var f = r[a], l = o[a];
          Mt(f, l, s);
        }
      } catch (h) {
        throw Ts(h, a);
      }
      if (s) {
        for (a in o)
          if (!r[a])
            throw new Z0(void 0, a);
      }
      return !0;
    }
    return i.toJSON = function() {
      return Br(r);
    }, i;
  },
  anyOf: function() {
    var t = [].slice.call(arguments).map(br);
    function r(n, i) {
      return t.some(function(o) {
        try {
          return Mt(o, n, i);
        } catch {
          return !1;
        }
      });
    }
    return r.toJSON = function() {
      return t.map(Br).join("|");
    }, r;
  },
  allOf: function() {
    var t = [].slice.call(arguments).map(br);
    function r(n, i) {
      return t.every(function(o) {
        try {
          return Mt(o, n, i);
        } catch {
          return !1;
        }
      });
    }
    return r.toJSON = function() {
      return t.map(Br).join(" & ");
    }, r;
  },
  quacksLike: function(t) {
    function r(n) {
      return !0;
    }
    return r.toJSON = function() {
      return t;
    }, r;
  },
  tuple: function() {
    var t = [].slice.call(arguments).map(br);
    function r(n, i) {
      return !0;
    }
    return r.toJSON = function() {
      return "(" + t.map(Br).join(", ") + ")";
    }, r;
  },
  value: function(t) {
    function r(n) {
      return !0;
    }
    return r.toJSON = function() {
      return t;
    }, r;
  }
};
Hr.oneOf = Hr.anyOf;
function br(e) {
  if (Nt.String(e))
    return e[0] === "?" ? Hr.maybe(e.slice(1)) : Nt[e] || Hr.quacksLike(e);
  if (e && Nt.Object(e)) {
    if (Nt.Array(e)) {
      if (e.length !== 1)
        throw new TypeError(
          "Expected compile() parameter of type Array of length 1"
        );
      return Hr.arrayOf(e[0]);
    }
    return Hr.object(e);
  } else if (Nt.Function(e))
    return e;
  return Hr.value(e);
}
function Mt(e, t, r, n) {
  if (Nt.Function(e)) {
    if (e(t, r))
      return !0;
    throw new Y0(n || e, t);
  }
  return Mt(br(e), t, r);
}
for (var yn in Nt)
  Mt[yn] = Nt[yn];
for (yn in Hr)
  Mt[yn] = Hr[yn];
var op = t2();
for (yn in op)
  Mt[yn] = op[yn];
Mt.compile = br;
Mt.TfTypeError = Y0;
Mt.TfPropertyTypeError = Z0;
var De = Mt;
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.oneOf = e.Null = e.BufferN = e.Function = e.UInt32 = e.UInt8 = e.tuple = e.maybe = e.Hex = e.Buffer = e.String = e.Boolean = e.Array = e.Number = e.Hash256bit = e.Hash160bit = e.Buffer256bit = e.isTaptree = e.isTapleaf = e.TAPLEAF_VERSION_MASK = e.Network = e.ECPoint = e.Satoshi = e.Signer = e.BIP32Path = e.UInt31 = e.isPoint = e.typeforce = void 0;
  const t = ar;
  e.typeforce = De;
  const r = t.Buffer.alloc(32, 0), n = t.Buffer.from(
    "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
    "hex"
  );
  function i(g) {
    if (!t.Buffer.isBuffer(g) || g.length < 33)
      return !1;
    const m = g[0], E = g.slice(1, 33);
    if (E.compare(r) === 0 || E.compare(n) >= 0)
      return !1;
    if ((m === 2 || m === 3) && g.length === 33)
      return !0;
    const O = g.slice(33);
    return O.compare(r) === 0 || O.compare(n) >= 0 ? !1 : m === 4 && g.length === 65;
  }
  e.isPoint = i;
  const o = Math.pow(2, 31) - 1;
  function s(g) {
    return e.typeforce.UInt32(g) && g <= o;
  }
  e.UInt31 = s;
  function a(g) {
    return e.typeforce.String(g) && !!g.match(/^(m\/)?(\d+'?\/)*\d+'?$/);
  }
  e.BIP32Path = a, a.toJSON = () => "BIP32 derivation path";
  function f(g) {
    return (e.typeforce.Buffer(g.publicKey) || typeof g.getPublicKey == "function") && typeof g.sign == "function";
  }
  e.Signer = f;
  const l = 21 * 1e14;
  function h(g) {
    return e.typeforce.UInt53(g) && g <= l;
  }
  e.Satoshi = h, e.ECPoint = e.typeforce.quacksLike("Point"), e.Network = e.typeforce.compile({
    messagePrefix: e.typeforce.oneOf(
      e.typeforce.Buffer,
      e.typeforce.String
    ),
    bip32: {
      public: e.typeforce.UInt32,
      private: e.typeforce.UInt32
    },
    pubKeyHash: e.typeforce.UInt8,
    scriptHash: e.typeforce.UInt8,
    wif: e.typeforce.UInt8
  }), e.TAPLEAF_VERSION_MASK = 254;
  function y(g) {
    return !g || !("output" in g) || !t.Buffer.isBuffer(g.output) ? !1 : g.version !== void 0 ? (g.version & e.TAPLEAF_VERSION_MASK) === g.version : !0;
  }
  e.isTapleaf = y;
  function v(g) {
    return (0, e.Array)(g) ? g.length !== 2 ? !1 : g.every((m) => v(m)) : y(g);
  }
  e.isTaptree = v, e.Buffer256bit = e.typeforce.BufferN(32), e.Hash160bit = e.typeforce.BufferN(20), e.Hash256bit = e.typeforce.BufferN(32), e.Number = e.typeforce.Number, e.Array = e.typeforce.Array, e.Boolean = e.typeforce.Boolean, e.String = e.typeforce.String, e.Buffer = e.typeforce.Buffer, e.Hex = e.typeforce.Hex, e.maybe = e.typeforce.maybe, e.tuple = e.typeforce.tuple, e.UInt8 = e.typeforce.UInt8, e.UInt32 = e.typeforce.UInt32, e.Function = e.typeforce.Function, e.BufferN = e.typeforce.BufferN, e.Null = e.typeforce.Null, e.oneOf = e.typeforce.oneOf;
})(wt);
Object.defineProperty(Zi, "__esModule", { value: !0 });
Zi.encode = Zi.decode = void 0;
const J0 = Mr, pu = wt, { typeforce: r2 } = pu, sp = N.Buffer.alloc(1, 0);
function ap(e) {
  let t = 0;
  for (; e[t] === 0; )
    ++t;
  return t === e.length ? sp : (e = e.slice(t), e[0] & 128 ? N.Buffer.concat([sp, e], 1 + e.length) : e);
}
function fp(e) {
  e[0] === 0 && (e = e.slice(1));
  const t = N.Buffer.alloc(32, 0), r = Math.max(0, 32 - e.length);
  return e.copy(t, r), t;
}
function n2(e) {
  const t = e.readUInt8(e.length - 1), r = t & -129;
  if (r <= 0 || r >= 4)
    throw new Error("Invalid hashType " + t);
  const n = J0.decode(e.slice(0, -1)), i = fp(n.r), o = fp(n.s);
  return { signature: N.Buffer.concat([i, o], 64), hashType: t };
}
Zi.decode = n2;
function i2(e, t) {
  r2(
    {
      signature: pu.BufferN(64),
      hashType: pu.UInt8
    },
    { signature: e, hashType: t }
  );
  const r = t & -129;
  if (r <= 0 || r >= 4)
    throw new Error("Invalid hashType " + t);
  const n = N.Buffer.allocUnsafe(1);
  n.writeUInt8(t, 0);
  const i = ap(e.slice(0, 32)), o = ap(e.slice(32, 64));
  return N.Buffer.concat([J0.encode(i, o), n]);
}
Zi.encode = i2;
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.signature = e.number = e.isCanonicalScriptSignature = e.isDefinedHashType = e.isCanonicalPubKey = e.toStack = e.fromASM = e.toASM = e.decompile = e.compile = e.countNonPushOnlyOPs = e.isPushOnly = e.OPS = void 0;
  const t = Mr, r = vn;
  Object.defineProperty(e, "OPS", {
    enumerable: !0,
    get: function() {
      return r.OPS;
    }
  });
  const n = dn, i = Yi, o = Zi, s = wt, { typeforce: a } = s, f = r.OPS.OP_RESERVED;
  function l(F) {
    return s.Number(F) && (F === r.OPS.OP_0 || F >= r.OPS.OP_1 && F <= r.OPS.OP_16 || F === r.OPS.OP_1NEGATE);
  }
  function h(F) {
    return s.Buffer(F) || l(F);
  }
  function y(F) {
    return s.Array(F) && F.every(h);
  }
  e.isPushOnly = y;
  function v(F) {
    return F.length - F.filter(h).length;
  }
  e.countNonPushOnlyOPs = v;
  function g(F) {
    if (F.length === 0)
      return r.OPS.OP_0;
    if (F.length === 1) {
      if (F[0] >= 1 && F[0] <= 16)
        return f + F[0];
      if (F[0] === 129)
        return r.OPS.OP_1NEGATE;
    }
  }
  function m(F) {
    return N.Buffer.isBuffer(F);
  }
  function E(F) {
    return s.Array(F);
  }
  function O(F) {
    return N.Buffer.isBuffer(F);
  }
  function x(F) {
    if (m(F))
      return F;
    a(s.Array, F);
    const W = F.reduce((ae, de) => O(de) ? de.length === 1 && g(de) !== void 0 ? ae + 1 : ae + n.encodingLength(de.length) + de.length : ae + 1, 0), te = N.Buffer.allocUnsafe(W);
    let re = 0;
    if (F.forEach((ae) => {
      if (O(ae)) {
        const de = g(ae);
        if (de !== void 0) {
          te.writeUInt8(de, re), re += 1;
          return;
        }
        re += n.encode(te, ae.length, re), ae.copy(te, re), re += ae.length;
      } else
        te.writeUInt8(ae, re), re += 1;
    }), re !== te.length)
      throw new Error("Could not decode chunks");
    return te;
  }
  e.compile = x;
  function U(F) {
    if (E(F))
      return F;
    a(s.Buffer, F);
    const W = [];
    let te = 0;
    for (; te < F.length; ) {
      const re = F[te];
      if (re > r.OPS.OP_0 && re <= r.OPS.OP_PUSHDATA4) {
        const ae = n.decode(F, te);
        if (ae === null || (te += ae.size, te + ae.number > F.length))
          return null;
        const de = F.slice(te, te + ae.number);
        te += ae.number;
        const J = g(de);
        J !== void 0 ? W.push(J) : W.push(de);
      } else
        W.push(re), te += 1;
    }
    return W;
  }
  e.decompile = U;
  function H(F) {
    return m(F) && (F = U(F)), F.map((W) => {
      if (O(W)) {
        const te = g(W);
        if (te === void 0)
          return W.toString("hex");
        W = te;
      }
      return r.REVERSE_OPS[W];
    }).join(" ");
  }
  e.toASM = H;
  function M(F) {
    return a(s.String, F), x(
      F.split(" ").map((W) => r.OPS[W] !== void 0 ? r.OPS[W] : (a(s.Hex, W), N.Buffer.from(W, "hex")))
    );
  }
  e.fromASM = M;
  function k(F) {
    return F = U(F), a(y, F), F.map((W) => O(W) ? W : W === r.OPS.OP_0 ? N.Buffer.allocUnsafe(0) : i.encode(W - f));
  }
  e.toStack = k;
  function _(F) {
    return s.isPoint(F);
  }
  e.isCanonicalPubKey = _;
  function L(F) {
    const W = F & -129;
    return W > 0 && W < 4;
  }
  e.isDefinedHashType = L;
  function j(F) {
    return !N.Buffer.isBuffer(F) || !L(F[F.length - 1]) ? !1 : t.check(F.slice(0, -1));
  }
  e.isCanonicalScriptSignature = j, e.number = i, e.signature = o;
})(Ht);
var qt = {};
Object.defineProperty(qt, "__esModule", { value: !0 });
qt.value = qt.prop = void 0;
function o2(e, t, r) {
  Object.defineProperty(e, t, {
    configurable: !0,
    enumerable: !0,
    get() {
      const n = r.call(this);
      return this[t] = n, n;
    },
    set(n) {
      Object.defineProperty(this, t, {
        configurable: !0,
        enumerable: !0,
        value: n,
        writable: !0
      });
    }
  });
}
qt.prop = o2;
function s2(e) {
  let t;
  return () => (t !== void 0 || (t = e()), t);
}
qt.value = s2;
Object.defineProperty(ja, "__esModule", { value: !0 });
ja.p2data = void 0;
const a2 = pt, zs = Ht, kr = wt, cp = qt, up = zs.OPS;
function f2(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => r.equals(t[n]));
}
function c2(e, t) {
  if (!e.data && !e.output)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, kr.typeforce)(
    {
      network: kr.typeforce.maybe(kr.typeforce.Object),
      output: kr.typeforce.maybe(kr.typeforce.Buffer),
      data: kr.typeforce.maybe(
        kr.typeforce.arrayOf(kr.typeforce.Buffer)
      )
    },
    e
  );
  const n = { name: "embed", network: e.network || a2.bitcoin };
  if (cp.prop(n, "output", () => {
    if (e.data)
      return zs.compile([up.OP_RETURN].concat(e.data));
  }), cp.prop(n, "data", () => {
    if (e.output)
      return zs.decompile(e.output).slice(1);
  }), t.validate && e.output) {
    const i = zs.decompile(e.output);
    if (i[0] !== up.OP_RETURN)
      throw new TypeError("Output is invalid");
    if (!i.slice(1).every(kr.typeforce.Buffer))
      throw new TypeError("Output is invalid");
    if (e.data && !f2(e.data, n.data))
      throw new TypeError("Data mismatch");
  }
  return Object.assign(n, e);
}
ja.p2data = c2;
var Ka = {};
Object.defineProperty(Ka, "__esModule", { value: !0 });
Ka.p2ms = void 0;
const u2 = pt, Ti = Ht, tt = wt, en = qt, Ii = Ti.OPS, Is = Ii.OP_RESERVED;
function lp(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => r.equals(t[n]));
}
function l2(e, t) {
  if (!e.input && !e.output && !(e.pubkeys && e.m !== void 0) && !e.signatures)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {});
  function r(f) {
    return Ti.isCanonicalScriptSignature(f) || (t.allowIncomplete && f === Ii.OP_0) !== void 0;
  }
  (0, tt.typeforce)(
    {
      network: tt.typeforce.maybe(tt.typeforce.Object),
      m: tt.typeforce.maybe(tt.typeforce.Number),
      n: tt.typeforce.maybe(tt.typeforce.Number),
      output: tt.typeforce.maybe(tt.typeforce.Buffer),
      pubkeys: tt.typeforce.maybe(
        tt.typeforce.arrayOf(tt.isPoint)
      ),
      signatures: tt.typeforce.maybe(
        tt.typeforce.arrayOf(r)
      ),
      input: tt.typeforce.maybe(tt.typeforce.Buffer)
    },
    e
  );
  const i = { network: e.network || u2.bitcoin };
  let o = [], s = !1;
  function a(f) {
    s || (s = !0, o = Ti.decompile(f), i.m = o[0] - Is, i.n = o[o.length - 2] - Is, i.pubkeys = o.slice(1, -2));
  }
  if (en.prop(i, "output", () => {
    if (e.m && i.n && e.pubkeys)
      return Ti.compile(
        [].concat(
          Is + e.m,
          e.pubkeys,
          Is + i.n,
          Ii.OP_CHECKMULTISIG
        )
      );
  }), en.prop(i, "m", () => {
    if (i.output)
      return a(i.output), i.m;
  }), en.prop(i, "n", () => {
    if (i.pubkeys)
      return i.pubkeys.length;
  }), en.prop(i, "pubkeys", () => {
    if (e.output)
      return a(e.output), i.pubkeys;
  }), en.prop(i, "signatures", () => {
    if (e.input)
      return Ti.decompile(e.input).slice(1);
  }), en.prop(i, "input", () => {
    if (e.signatures)
      return Ti.compile([Ii.OP_0].concat(e.signatures));
  }), en.prop(i, "witness", () => {
    if (i.input)
      return [];
  }), en.prop(i, "name", () => {
    if (!(!i.m || !i.n))
      return `p2ms(${i.m} of ${i.n})`;
  }), t.validate) {
    if (e.output) {
      if (a(e.output), !tt.typeforce.Number(o[0]))
        throw new TypeError("Output is invalid");
      if (!tt.typeforce.Number(o[o.length - 2]))
        throw new TypeError("Output is invalid");
      if (o[o.length - 1] !== Ii.OP_CHECKMULTISIG)
        throw new TypeError("Output is invalid");
      if (i.m <= 0 || i.n > 16 || i.m > i.n || i.n !== o.length - 3)
        throw new TypeError("Output is invalid");
      if (!i.pubkeys.every((f) => (0, tt.isPoint)(f)))
        throw new TypeError("Output is invalid");
      if (e.m !== void 0 && e.m !== i.m)
        throw new TypeError("m mismatch");
      if (e.n !== void 0 && e.n !== i.n)
        throw new TypeError("n mismatch");
      if (e.pubkeys && !lp(e.pubkeys, i.pubkeys))
        throw new TypeError("Pubkeys mismatch");
    }
    if (e.pubkeys) {
      if (e.n !== void 0 && e.n !== e.pubkeys.length)
        throw new TypeError("Pubkey count mismatch");
      if (i.n = e.pubkeys.length, i.n < i.m)
        throw new TypeError("Pubkey count cannot be less than m");
    }
    if (e.signatures) {
      if (e.signatures.length < i.m)
        throw new TypeError("Not enough signatures provided");
      if (e.signatures.length > i.m)
        throw new TypeError("Too many signatures provided");
    }
    if (e.input) {
      if (e.input[0] !== Ii.OP_0)
        throw new TypeError("Input is invalid");
      if (i.signatures.length === 0 || !i.signatures.every(r))
        throw new TypeError("Input has invalid signature(s)");
      if (e.signatures && !lp(e.signatures, i.signatures))
        throw new TypeError("Signature mismatch");
      if (e.m !== void 0 && e.m !== e.signatures.length)
        throw new TypeError("Signature count mismatch");
    }
  }
  return Object.assign(i, e);
}
Ka.p2ms = l2;
var qa = {};
Object.defineProperty(qa, "__esModule", { value: !0 });
qa.p2pk = void 0;
const h2 = pt, Pi = Ht, nr = wt, _i = qt, hp = Pi.OPS;
function p2(e, t) {
  if (!e.input && !e.output && !e.pubkey && !e.input && !e.signature)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, nr.typeforce)(
    {
      network: nr.typeforce.maybe(nr.typeforce.Object),
      output: nr.typeforce.maybe(nr.typeforce.Buffer),
      pubkey: nr.typeforce.maybe(nr.isPoint),
      signature: nr.typeforce.maybe(Pi.isCanonicalScriptSignature),
      input: nr.typeforce.maybe(nr.typeforce.Buffer)
    },
    e
  );
  const r = _i.value(() => Pi.decompile(e.input)), i = { name: "p2pk", network: e.network || h2.bitcoin };
  if (_i.prop(i, "output", () => {
    if (e.pubkey)
      return Pi.compile([e.pubkey, hp.OP_CHECKSIG]);
  }), _i.prop(i, "pubkey", () => {
    if (e.output)
      return e.output.slice(1, -1);
  }), _i.prop(i, "signature", () => {
    if (e.input)
      return r()[0];
  }), _i.prop(i, "input", () => {
    if (e.signature)
      return Pi.compile([e.signature]);
  }), _i.prop(i, "witness", () => {
    if (i.input)
      return [];
  }), t.validate) {
    if (e.output) {
      if (e.output[e.output.length - 1] !== hp.OP_CHECKSIG)
        throw new TypeError("Output is invalid");
      if (!(0, nr.isPoint)(i.pubkey))
        throw new TypeError("Output pubkey is invalid");
      if (e.pubkey && !e.pubkey.equals(i.pubkey))
        throw new TypeError("Pubkey mismatch");
    }
    if (e.signature && e.input && !e.input.equals(i.input))
      throw new TypeError("Signature mismatch");
    if (e.input) {
      if (r().length !== 1)
        throw new TypeError("Input is invalid");
      if (!Pi.isCanonicalScriptSignature(i.signature))
        throw new TypeError("Input has invalid signature");
    }
  }
  return Object.assign(i, e);
}
qa.p2pk = p2;
var Ga = {}, Ir = {}, Ji = {}, so = {}, Ct = {};
Object.defineProperty(Ct, "__esModule", { value: !0 });
Ct.output = Ct.exists = Ct.hash = Ct.bytes = Ct.bool = Ct.number = void 0;
function ha(e) {
  if (!Number.isSafeInteger(e) || e < 0)
    throw new Error(`Wrong positive integer: ${e}`);
}
Ct.number = ha;
function Q0(e) {
  if (typeof e != "boolean")
    throw new Error(`Expected boolean, not ${e}`);
}
Ct.bool = Q0;
function ll(e, ...t) {
  if (!(e instanceof Uint8Array))
    throw new Error("Expected Uint8Array");
  if (t.length > 0 && !t.includes(e.length))
    throw new Error(`Expected Uint8Array of length ${t}, not of length=${e.length}`);
}
Ct.bytes = ll;
function ey(e) {
  if (typeof e != "function" || typeof e.create != "function")
    throw new Error("Hash should be wrapped by utils.wrapConstructor");
  ha(e.outputLen), ha(e.blockLen);
}
Ct.hash = ey;
function ty(e, t = !0) {
  if (e.destroyed)
    throw new Error("Hash instance has been destroyed");
  if (t && e.finished)
    throw new Error("Hash#digest() has already been called");
}
Ct.exists = ty;
function ry(e, t) {
  ll(e);
  const r = t.outputLen;
  if (e.length < r)
    throw new Error(`digestInto() expects output buffer of length at least ${r}`);
}
Ct.output = ry;
const d2 = { number: ha, bool: Q0, bytes: ll, hash: ey, exists: ty, output: ry };
Ct.default = d2;
var es = {};
const y2 = /* @__PURE__ */ Wv(uw);
(function(e) {
  /*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */
  Object.defineProperty(e, "__esModule", { value: !0 }), e.randomBytes = e.wrapXOFConstructorWithOpts = e.wrapConstructorWithOpts = e.wrapConstructor = e.checkOpts = e.Hash = e.concatBytes = e.toBytes = e.utf8ToBytes = e.asyncLoop = e.nextTick = e.hexToBytes = e.bytesToHex = e.isLE = e.rotr = e.createView = e.u32 = e.u8 = void 0;
  const t = y2, r = (_) => _ instanceof Uint8Array, n = (_) => new Uint8Array(_.buffer, _.byteOffset, _.byteLength);
  e.u8 = n;
  const i = (_) => new Uint32Array(_.buffer, _.byteOffset, Math.floor(_.byteLength / 4));
  e.u32 = i;
  const o = (_) => new DataView(_.buffer, _.byteOffset, _.byteLength);
  e.createView = o;
  const s = (_, L) => _ << 32 - L | _ >>> L;
  if (e.rotr = s, e.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68, !e.isLE)
    throw new Error("Non little-endian hardware is not supported");
  const a = /* @__PURE__ */ Array.from({ length: 256 }, (_, L) => L.toString(16).padStart(2, "0"));
  function f(_) {
    if (!r(_))
      throw new Error("Uint8Array expected");
    let L = "";
    for (let j = 0; j < _.length; j++)
      L += a[_[j]];
    return L;
  }
  e.bytesToHex = f;
  function l(_) {
    if (typeof _ != "string")
      throw new Error("hex string expected, got " + typeof _);
    const L = _.length;
    if (L % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + L);
    const j = new Uint8Array(L / 2);
    for (let F = 0; F < j.length; F++) {
      const W = F * 2, te = _.slice(W, W + 2), re = Number.parseInt(te, 16);
      if (Number.isNaN(re) || re < 0)
        throw new Error("Invalid byte sequence");
      j[F] = re;
    }
    return j;
  }
  e.hexToBytes = l;
  const h = async () => {
  };
  e.nextTick = h;
  async function y(_, L, j) {
    let F = Date.now();
    for (let W = 0; W < _; W++) {
      j(W);
      const te = Date.now() - F;
      te >= 0 && te < L || (await (0, e.nextTick)(), F += te);
    }
  }
  e.asyncLoop = y;
  function v(_) {
    if (typeof _ != "string")
      throw new Error(`utf8ToBytes expected string, got ${typeof _}`);
    return new Uint8Array(new TextEncoder().encode(_));
  }
  e.utf8ToBytes = v;
  function g(_) {
    if (typeof _ == "string" && (_ = v(_)), !r(_))
      throw new Error(`expected Uint8Array, got ${typeof _}`);
    return _;
  }
  e.toBytes = g;
  function m(..._) {
    const L = new Uint8Array(_.reduce((F, W) => F + W.length, 0));
    let j = 0;
    return _.forEach((F) => {
      if (!r(F))
        throw new Error("Uint8Array expected");
      L.set(F, j), j += F.length;
    }), L;
  }
  e.concatBytes = m;
  class E {
    // Safe version that clones internal state
    clone() {
      return this._cloneInto();
    }
  }
  e.Hash = E;
  const O = {}.toString;
  function x(_, L) {
    if (L !== void 0 && O.call(L) !== "[object Object]")
      throw new Error("Options should be object or undefined");
    return Object.assign(_, L);
  }
  e.checkOpts = x;
  function U(_) {
    const L = (F) => _().update(g(F)).digest(), j = _();
    return L.outputLen = j.outputLen, L.blockLen = j.blockLen, L.create = () => _(), L;
  }
  e.wrapConstructor = U;
  function H(_) {
    const L = (F, W) => _(W).update(g(F)).digest(), j = _({});
    return L.outputLen = j.outputLen, L.blockLen = j.blockLen, L.create = (F) => _(F), L;
  }
  e.wrapConstructorWithOpts = H;
  function M(_) {
    const L = (F, W) => _(W).update(g(F)).digest(), j = _({});
    return L.outputLen = j.outputLen, L.blockLen = j.blockLen, L.create = (F) => _(F), L;
  }
  e.wrapXOFConstructorWithOpts = M;
  function k(_ = 32) {
    if (t.crypto && typeof t.crypto.getRandomValues == "function")
      return t.crypto.getRandomValues(new Uint8Array(_));
    throw new Error("crypto.getRandomValues must be defined");
  }
  e.randomBytes = k;
})(es);
Object.defineProperty(so, "__esModule", { value: !0 });
so.SHA2 = void 0;
const zf = Ct, lo = es;
function g2(e, t, r, n) {
  if (typeof e.setBigUint64 == "function")
    return e.setBigUint64(t, r, n);
  const i = BigInt(32), o = BigInt(4294967295), s = Number(r >> i & o), a = Number(r & o), f = n ? 4 : 0, l = n ? 0 : 4;
  e.setUint32(t + f, s, n), e.setUint32(t + l, a, n);
}
class b2 extends lo.Hash {
  constructor(t, r, n, i) {
    super(), this.blockLen = t, this.outputLen = r, this.padOffset = n, this.isLE = i, this.finished = !1, this.length = 0, this.pos = 0, this.destroyed = !1, this.buffer = new Uint8Array(t), this.view = (0, lo.createView)(this.buffer);
  }
  update(t) {
    (0, zf.exists)(this);
    const { view: r, buffer: n, blockLen: i } = this;
    t = (0, lo.toBytes)(t);
    const o = t.length;
    for (let s = 0; s < o; ) {
      const a = Math.min(i - this.pos, o - s);
      if (a === i) {
        const f = (0, lo.createView)(t);
        for (; i <= o - s; s += i)
          this.process(f, s);
        continue;
      }
      n.set(t.subarray(s, s + a), this.pos), this.pos += a, s += a, this.pos === i && (this.process(r, 0), this.pos = 0);
    }
    return this.length += t.length, this.roundClean(), this;
  }
  digestInto(t) {
    (0, zf.exists)(this), (0, zf.output)(t, this), this.finished = !0;
    const { buffer: r, view: n, blockLen: i, isLE: o } = this;
    let { pos: s } = this;
    r[s++] = 128, this.buffer.subarray(s).fill(0), this.padOffset > i - s && (this.process(n, 0), s = 0);
    for (let y = s; y < i; y++)
      r[y] = 0;
    g2(n, i - 8, BigInt(this.length * 8), o), this.process(n, 0);
    const a = (0, lo.createView)(t), f = this.outputLen;
    if (f % 4)
      throw new Error("_sha2: outputLen should be aligned to 32bit");
    const l = f / 4, h = this.get();
    if (l > h.length)
      throw new Error("_sha2: outputLen bigger than state");
    for (let y = 0; y < l; y++)
      a.setUint32(4 * y, h[y], o);
  }
  digest() {
    const { buffer: t, outputLen: r } = this;
    this.digestInto(t);
    const n = t.slice(0, r);
    return this.destroy(), n;
  }
  _cloneInto(t) {
    t || (t = new this.constructor()), t.set(...this.get());
    const { blockLen: r, buffer: n, length: i, finished: o, destroyed: s, pos: a } = this;
    return t.length = i, t.pos = a, t.finished = o, t.destroyed = s, i % r && t.buffer.set(n), t;
  }
}
so.SHA2 = b2;
Object.defineProperty(Ji, "__esModule", { value: !0 });
Ji.ripemd160 = Ji.RIPEMD160 = void 0;
const v2 = so, w2 = es, m2 = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]), ny = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (e, t) => t), E2 = /* @__PURE__ */ ny.map((e) => (9 * e + 5) % 16);
let hl = [ny], pl = [E2];
for (let e = 0; e < 4; e++)
  for (let t of [hl, pl])
    t.push(t[e].map((r) => m2[r]));
const iy = /* @__PURE__ */ [
  [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
  [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
  [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
  [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
  [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
].map((e) => new Uint8Array(e)), _2 = /* @__PURE__ */ hl.map((e, t) => e.map((r) => iy[t][r])), S2 = /* @__PURE__ */ pl.map((e, t) => e.map((r) => iy[t][r])), O2 = /* @__PURE__ */ new Uint32Array([
  0,
  1518500249,
  1859775393,
  2400959708,
  2840853838
]), A2 = /* @__PURE__ */ new Uint32Array([
  1352829926,
  1548603684,
  1836072691,
  2053994217,
  0
]), Ps = (e, t) => e << t | e >>> 32 - t;
function pp(e, t, r, n) {
  return e === 0 ? t ^ r ^ n : e === 1 ? t & r | ~t & n : e === 2 ? (t | ~r) ^ n : e === 3 ? t & n | r & ~n : t ^ (r | ~n);
}
const xs = /* @__PURE__ */ new Uint32Array(16);
let oy = class extends v2.SHA2 {
  constructor() {
    super(64, 20, 8, !0), this.h0 = 1732584193, this.h1 = -271733879, this.h2 = -1732584194, this.h3 = 271733878, this.h4 = -1009589776;
  }
  get() {
    const { h0: t, h1: r, h2: n, h3: i, h4: o } = this;
    return [t, r, n, i, o];
  }
  set(t, r, n, i, o) {
    this.h0 = t | 0, this.h1 = r | 0, this.h2 = n | 0, this.h3 = i | 0, this.h4 = o | 0;
  }
  process(t, r) {
    for (let g = 0; g < 16; g++, r += 4)
      xs[g] = t.getUint32(r, !0);
    let n = this.h0 | 0, i = n, o = this.h1 | 0, s = o, a = this.h2 | 0, f = a, l = this.h3 | 0, h = l, y = this.h4 | 0, v = y;
    for (let g = 0; g < 5; g++) {
      const m = 4 - g, E = O2[g], O = A2[g], x = hl[g], U = pl[g], H = _2[g], M = S2[g];
      for (let k = 0; k < 16; k++) {
        const _ = Ps(n + pp(g, o, a, l) + xs[x[k]] + E, H[k]) + y | 0;
        n = y, y = l, l = Ps(a, 10) | 0, a = o, o = _;
      }
      for (let k = 0; k < 16; k++) {
        const _ = Ps(i + pp(m, s, f, h) + xs[U[k]] + O, M[k]) + v | 0;
        i = v, v = h, h = Ps(f, 10) | 0, f = s, s = _;
      }
    }
    this.set(this.h1 + a + h | 0, this.h2 + l + v | 0, this.h3 + y + i | 0, this.h4 + n + s | 0, this.h0 + o + f | 0);
  }
  roundClean() {
    xs.fill(0);
  }
  destroy() {
    this.destroyed = !0, this.buffer.fill(0), this.set(0, 0, 0, 0, 0);
  }
};
Ji.RIPEMD160 = oy;
Ji.ripemd160 = (0, w2.wrapConstructor)(() => new oy());
var Va = {};
Object.defineProperty(Va, "__esModule", { value: !0 });
Va.sha1 = void 0;
const T2 = so, I2 = es, Xf = (e, t) => e << t | e >>> 32 - t >>> 0, P2 = (e, t, r) => e & t ^ ~e & r, x2 = (e, t, r) => e & t ^ e & r ^ t & r, ho = /* @__PURE__ */ new Uint32Array([
  1732584193,
  4023233417,
  2562383102,
  271733878,
  3285377520
]), tn = /* @__PURE__ */ new Uint32Array(80);
class B2 extends T2.SHA2 {
  constructor() {
    super(64, 20, 8, !1), this.A = ho[0] | 0, this.B = ho[1] | 0, this.C = ho[2] | 0, this.D = ho[3] | 0, this.E = ho[4] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: i, E: o } = this;
    return [t, r, n, i, o];
  }
  set(t, r, n, i, o) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = i | 0, this.E = o | 0;
  }
  process(t, r) {
    for (let f = 0; f < 16; f++, r += 4)
      tn[f] = t.getUint32(r, !1);
    for (let f = 16; f < 80; f++)
      tn[f] = Xf(tn[f - 3] ^ tn[f - 8] ^ tn[f - 14] ^ tn[f - 16], 1);
    let { A: n, B: i, C: o, D: s, E: a } = this;
    for (let f = 0; f < 80; f++) {
      let l, h;
      f < 20 ? (l = P2(i, o, s), h = 1518500249) : f < 40 ? (l = i ^ o ^ s, h = 1859775393) : f < 60 ? (l = x2(i, o, s), h = 2400959708) : (l = i ^ o ^ s, h = 3395469782);
      const y = Xf(n, 5) + l + a + h + tn[f] | 0;
      a = s, s = o, o = Xf(i, 30), i = n, n = y;
    }
    n = n + this.A | 0, i = i + this.B | 0, o = o + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, this.set(n, i, o, s, a);
  }
  roundClean() {
    tn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
Va.sha1 = (0, I2.wrapConstructor)(() => new B2());
var Wn = {};
Object.defineProperty(Wn, "__esModule", { value: !0 });
Wn.sha224 = Wn.sha256 = void 0;
const k2 = so, zt = es, R2 = (e, t, r) => e & t ^ ~e & r, N2 = (e, t, r) => e & t ^ e & r ^ t & r, U2 = /* @__PURE__ */ new Uint32Array([
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
]), rn = /* @__PURE__ */ new Uint32Array([
  1779033703,
  3144134277,
  1013904242,
  2773480762,
  1359893119,
  2600822924,
  528734635,
  1541459225
]), nn = /* @__PURE__ */ new Uint32Array(64);
class sy extends k2.SHA2 {
  constructor() {
    super(64, 32, 8, !1), this.A = rn[0] | 0, this.B = rn[1] | 0, this.C = rn[2] | 0, this.D = rn[3] | 0, this.E = rn[4] | 0, this.F = rn[5] | 0, this.G = rn[6] | 0, this.H = rn[7] | 0;
  }
  get() {
    const { A: t, B: r, C: n, D: i, E: o, F: s, G: a, H: f } = this;
    return [t, r, n, i, o, s, a, f];
  }
  // prettier-ignore
  set(t, r, n, i, o, s, a, f) {
    this.A = t | 0, this.B = r | 0, this.C = n | 0, this.D = i | 0, this.E = o | 0, this.F = s | 0, this.G = a | 0, this.H = f | 0;
  }
  process(t, r) {
    for (let y = 0; y < 16; y++, r += 4)
      nn[y] = t.getUint32(r, !1);
    for (let y = 16; y < 64; y++) {
      const v = nn[y - 15], g = nn[y - 2], m = (0, zt.rotr)(v, 7) ^ (0, zt.rotr)(v, 18) ^ v >>> 3, E = (0, zt.rotr)(g, 17) ^ (0, zt.rotr)(g, 19) ^ g >>> 10;
      nn[y] = E + nn[y - 7] + m + nn[y - 16] | 0;
    }
    let { A: n, B: i, C: o, D: s, E: a, F: f, G: l, H: h } = this;
    for (let y = 0; y < 64; y++) {
      const v = (0, zt.rotr)(a, 6) ^ (0, zt.rotr)(a, 11) ^ (0, zt.rotr)(a, 25), g = h + v + R2(a, f, l) + U2[y] + nn[y] | 0, E = ((0, zt.rotr)(n, 2) ^ (0, zt.rotr)(n, 13) ^ (0, zt.rotr)(n, 22)) + N2(n, i, o) | 0;
      h = l, l = f, f = a, a = s + g | 0, s = o, o = i, i = n, n = g + E | 0;
    }
    n = n + this.A | 0, i = i + this.B | 0, o = o + this.C | 0, s = s + this.D | 0, a = a + this.E | 0, f = f + this.F | 0, l = l + this.G | 0, h = h + this.H | 0, this.set(n, i, o, s, a, f, l, h);
  }
  roundClean() {
    nn.fill(0);
  }
  destroy() {
    this.set(0, 0, 0, 0, 0, 0, 0, 0), this.buffer.fill(0);
  }
}
class C2 extends sy {
  constructor() {
    super(), this.A = -1056596264, this.B = 914150663, this.C = 812702999, this.D = -150054599, this.E = -4191439, this.F = 1750603025, this.G = 1694076839, this.H = -1090891868, this.outputLen = 28;
  }
}
Wn.sha256 = (0, zt.wrapConstructor)(() => new sy());
Wn.sha224 = (0, zt.wrapConstructor)(() => new C2());
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.taggedHash = e.TAGGED_HASH_PREFIXES = e.TAGS = e.hash256 = e.hash160 = e.sha256 = e.sha1 = e.ripemd160 = void 0;
  const t = Ji, r = Va, n = Wn;
  function i(h) {
    return N.Buffer.from((0, t.ripemd160)(Uint8Array.from(h)));
  }
  e.ripemd160 = i;
  function o(h) {
    return N.Buffer.from((0, r.sha1)(Uint8Array.from(h)));
  }
  e.sha1 = o;
  function s(h) {
    return N.Buffer.from((0, n.sha256)(Uint8Array.from(h)));
  }
  e.sha256 = s;
  function a(h) {
    return N.Buffer.from(
      (0, t.ripemd160)((0, n.sha256)(Uint8Array.from(h)))
    );
  }
  e.hash160 = a;
  function f(h) {
    return N.Buffer.from(
      (0, n.sha256)((0, n.sha256)(Uint8Array.from(h)))
    );
  }
  e.hash256 = f, e.TAGS = [
    "BIP0340/challenge",
    "BIP0340/aux",
    "BIP0340/nonce",
    "TapLeaf",
    "TapBranch",
    "TapSighash",
    "TapTweak",
    "KeyAgg list",
    "KeyAgg coefficient"
  ], e.TAGGED_HASH_PREFIXES = {
    "BIP0340/challenge": N.Buffer.from([
      123,
      181,
      45,
      122,
      159,
      239,
      88,
      50,
      62,
      177,
      191,
      122,
      64,
      125,
      179,
      130,
      210,
      243,
      242,
      216,
      27,
      177,
      34,
      79,
      73,
      254,
      81,
      143,
      109,
      72,
      211,
      124,
      123,
      181,
      45,
      122,
      159,
      239,
      88,
      50,
      62,
      177,
      191,
      122,
      64,
      125,
      179,
      130,
      210,
      243,
      242,
      216,
      27,
      177,
      34,
      79,
      73,
      254,
      81,
      143,
      109,
      72,
      211,
      124
    ]),
    "BIP0340/aux": N.Buffer.from([
      241,
      239,
      78,
      94,
      192,
      99,
      202,
      218,
      109,
      148,
      202,
      250,
      157,
      152,
      126,
      160,
      105,
      38,
      88,
      57,
      236,
      193,
      31,
      151,
      45,
      119,
      165,
      46,
      216,
      193,
      204,
      144,
      241,
      239,
      78,
      94,
      192,
      99,
      202,
      218,
      109,
      148,
      202,
      250,
      157,
      152,
      126,
      160,
      105,
      38,
      88,
      57,
      236,
      193,
      31,
      151,
      45,
      119,
      165,
      46,
      216,
      193,
      204,
      144
    ]),
    "BIP0340/nonce": N.Buffer.from([
      7,
      73,
      119,
      52,
      167,
      155,
      203,
      53,
      91,
      155,
      140,
      125,
      3,
      79,
      18,
      28,
      244,
      52,
      215,
      62,
      247,
      45,
      218,
      25,
      135,
      0,
      97,
      251,
      82,
      191,
      235,
      47,
      7,
      73,
      119,
      52,
      167,
      155,
      203,
      53,
      91,
      155,
      140,
      125,
      3,
      79,
      18,
      28,
      244,
      52,
      215,
      62,
      247,
      45,
      218,
      25,
      135,
      0,
      97,
      251,
      82,
      191,
      235,
      47
    ]),
    TapLeaf: N.Buffer.from([
      174,
      234,
      143,
      220,
      66,
      8,
      152,
      49,
      5,
      115,
      75,
      88,
      8,
      29,
      30,
      38,
      56,
      211,
      95,
      28,
      181,
      64,
      8,
      212,
      211,
      87,
      202,
      3,
      190,
      120,
      233,
      238,
      174,
      234,
      143,
      220,
      66,
      8,
      152,
      49,
      5,
      115,
      75,
      88,
      8,
      29,
      30,
      38,
      56,
      211,
      95,
      28,
      181,
      64,
      8,
      212,
      211,
      87,
      202,
      3,
      190,
      120,
      233,
      238
    ]),
    TapBranch: N.Buffer.from([
      25,
      65,
      161,
      242,
      229,
      110,
      185,
      95,
      162,
      169,
      241,
      148,
      190,
      92,
      1,
      247,
      33,
      111,
      51,
      237,
      130,
      176,
      145,
      70,
      52,
      144,
      208,
      91,
      245,
      22,
      160,
      21,
      25,
      65,
      161,
      242,
      229,
      110,
      185,
      95,
      162,
      169,
      241,
      148,
      190,
      92,
      1,
      247,
      33,
      111,
      51,
      237,
      130,
      176,
      145,
      70,
      52,
      144,
      208,
      91,
      245,
      22,
      160,
      21
    ]),
    TapSighash: N.Buffer.from([
      244,
      10,
      72,
      223,
      75,
      42,
      112,
      200,
      180,
      146,
      75,
      242,
      101,
      70,
      97,
      237,
      61,
      149,
      253,
      102,
      163,
      19,
      235,
      135,
      35,
      117,
      151,
      198,
      40,
      228,
      160,
      49,
      244,
      10,
      72,
      223,
      75,
      42,
      112,
      200,
      180,
      146,
      75,
      242,
      101,
      70,
      97,
      237,
      61,
      149,
      253,
      102,
      163,
      19,
      235,
      135,
      35,
      117,
      151,
      198,
      40,
      228,
      160,
      49
    ]),
    TapTweak: N.Buffer.from([
      232,
      15,
      225,
      99,
      156,
      156,
      160,
      80,
      227,
      175,
      27,
      57,
      193,
      67,
      198,
      62,
      66,
      156,
      188,
      235,
      21,
      217,
      64,
      251,
      181,
      197,
      161,
      244,
      175,
      87,
      197,
      233,
      232,
      15,
      225,
      99,
      156,
      156,
      160,
      80,
      227,
      175,
      27,
      57,
      193,
      67,
      198,
      62,
      66,
      156,
      188,
      235,
      21,
      217,
      64,
      251,
      181,
      197,
      161,
      244,
      175,
      87,
      197,
      233
    ]),
    "KeyAgg list": N.Buffer.from([
      72,
      28,
      151,
      28,
      60,
      11,
      70,
      215,
      240,
      178,
      117,
      174,
      89,
      141,
      78,
      44,
      126,
      215,
      49,
      156,
      89,
      74,
      92,
      110,
      199,
      158,
      160,
      212,
      153,
      2,
      148,
      240,
      72,
      28,
      151,
      28,
      60,
      11,
      70,
      215,
      240,
      178,
      117,
      174,
      89,
      141,
      78,
      44,
      126,
      215,
      49,
      156,
      89,
      74,
      92,
      110,
      199,
      158,
      160,
      212,
      153,
      2,
      148,
      240
    ]),
    "KeyAgg coefficient": N.Buffer.from([
      191,
      201,
      4,
      3,
      77,
      28,
      136,
      232,
      200,
      14,
      34,
      229,
      61,
      36,
      86,
      109,
      100,
      130,
      78,
      214,
      66,
      114,
      129,
      192,
      145,
      0,
      249,
      77,
      205,
      82,
      201,
      129,
      191,
      201,
      4,
      3,
      77,
      28,
      136,
      232,
      200,
      14,
      34,
      229,
      61,
      36,
      86,
      109,
      100,
      130,
      78,
      214,
      66,
      114,
      129,
      192,
      145,
      0,
      249,
      77,
      205,
      82,
      201,
      129
    ])
  };
  function l(h, y) {
    return s(N.Buffer.concat([e.TAGGED_HASH_PREFIXES[h], y]));
  }
  e.taggedHash = l;
})(Ir);
function $2(e) {
  if (e.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), r = 0; r < t.length; r++)
    t[r] = 255;
  for (var n = 0; n < e.length; n++) {
    var i = e.charAt(n), o = i.charCodeAt(0);
    if (t[o] !== 255)
      throw new TypeError(i + " is ambiguous");
    t[o] = n;
  }
  var s = e.length, a = e.charAt(0), f = Math.log(s) / Math.log(256), l = Math.log(256) / Math.log(s);
  function h(g) {
    if (g instanceof Uint8Array || (ArrayBuffer.isView(g) ? g = new Uint8Array(g.buffer, g.byteOffset, g.byteLength) : Array.isArray(g) && (g = Uint8Array.from(g))), !(g instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (g.length === 0)
      return "";
    for (var m = 0, E = 0, O = 0, x = g.length; O !== x && g[O] === 0; )
      O++, m++;
    for (var U = (x - O) * l + 1 >>> 0, H = new Uint8Array(U); O !== x; ) {
      for (var M = g[O], k = 0, _ = U - 1; (M !== 0 || k < E) && _ !== -1; _--, k++)
        M += 256 * H[_] >>> 0, H[_] = M % s >>> 0, M = M / s >>> 0;
      if (M !== 0)
        throw new Error("Non-zero carry");
      E = k, O++;
    }
    for (var L = U - E; L !== U && H[L] === 0; )
      L++;
    for (var j = a.repeat(m); L < U; ++L)
      j += e.charAt(H[L]);
    return j;
  }
  function y(g) {
    if (typeof g != "string")
      throw new TypeError("Expected String");
    if (g.length === 0)
      return new Uint8Array();
    for (var m = 0, E = 0, O = 0; g[m] === a; )
      E++, m++;
    for (var x = (g.length - m) * f + 1 >>> 0, U = new Uint8Array(x); g[m]; ) {
      var H = t[g.charCodeAt(m)];
      if (H === 255)
        return;
      for (var M = 0, k = x - 1; (H !== 0 || M < O) && k !== -1; k--, M++)
        H += s * U[k] >>> 0, U[k] = H % 256 >>> 0, H = H / 256 >>> 0;
      if (H !== 0)
        throw new Error("Non-zero carry");
      O = M, m++;
    }
    for (var _ = x - O; _ !== x && U[_] === 0; )
      _++;
    for (var L = new Uint8Array(E + (x - _)), j = E; _ !== x; )
      L[j++] = U[_++];
    return L;
  }
  function v(g) {
    var m = y(g);
    if (m)
      return m;
    throw new Error("Non-base" + s + " character");
  }
  return {
    encode: h,
    decodeUnsafe: y,
    decode: v
  };
}
var H2 = $2;
const L2 = H2, D2 = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
var M2 = L2(D2), Yf = M2, F2 = function(e) {
  function t(o) {
    var s = Uint8Array.from(o), a = e(s), f = s.length + 4, l = new Uint8Array(f);
    return l.set(s, 0), l.set(a.subarray(0, 4), s.length), Yf.encode(l, f);
  }
  function r(o) {
    var s = o.slice(0, -4), a = o.slice(-4), f = e(s);
    if (!(a[0] ^ f[0] | a[1] ^ f[1] | a[2] ^ f[2] | a[3] ^ f[3]))
      return s;
  }
  function n(o) {
    var s = Yf.decodeUnsafe(o);
    if (s)
      return r(s);
  }
  function i(o) {
    var s = Yf.decode(o), a = r(s);
    if (!a)
      throw new Error("Invalid checksum");
    return a;
  }
  return {
    encode: t,
    decode: i,
    decodeUnsafe: n
  };
}, { sha256: dp } = Wn, j2 = F2;
function K2(e) {
  return dp(dp(e));
}
var dl = j2(K2);
Object.defineProperty(Ga, "__esModule", { value: !0 });
Ga.p2pkh = void 0;
const Zf = Ir, q2 = pt, xi = Ht, It = wt, Rr = qt, yp = dl, on = xi.OPS;
function G2(e, t) {
  if (!e.address && !e.hash && !e.output && !e.pubkey && !e.input)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, It.typeforce)(
    {
      network: It.typeforce.maybe(It.typeforce.Object),
      address: It.typeforce.maybe(It.typeforce.String),
      hash: It.typeforce.maybe(It.typeforce.BufferN(20)),
      output: It.typeforce.maybe(It.typeforce.BufferN(25)),
      pubkey: It.typeforce.maybe(It.isPoint),
      signature: It.typeforce.maybe(xi.isCanonicalScriptSignature),
      input: It.typeforce.maybe(It.typeforce.Buffer)
    },
    e
  );
  const r = Rr.value(() => {
    const s = N.Buffer.from(yp.decode(e.address)), a = s.readUInt8(0), f = s.slice(1);
    return { version: a, hash: f };
  }), n = Rr.value(() => xi.decompile(e.input)), i = e.network || q2.bitcoin, o = { name: "p2pkh", network: i };
  if (Rr.prop(o, "address", () => {
    if (!o.hash)
      return;
    const s = N.Buffer.allocUnsafe(21);
    return s.writeUInt8(i.pubKeyHash, 0), o.hash.copy(s, 1), yp.encode(s);
  }), Rr.prop(o, "hash", () => {
    if (e.output)
      return e.output.slice(3, 23);
    if (e.address)
      return r().hash;
    if (e.pubkey || o.pubkey)
      return Zf.hash160(e.pubkey || o.pubkey);
  }), Rr.prop(o, "output", () => {
    if (o.hash)
      return xi.compile([
        on.OP_DUP,
        on.OP_HASH160,
        o.hash,
        on.OP_EQUALVERIFY,
        on.OP_CHECKSIG
      ]);
  }), Rr.prop(o, "pubkey", () => {
    if (e.input)
      return n()[1];
  }), Rr.prop(o, "signature", () => {
    if (e.input)
      return n()[0];
  }), Rr.prop(o, "input", () => {
    if (e.pubkey && e.signature)
      return xi.compile([e.signature, e.pubkey]);
  }), Rr.prop(o, "witness", () => {
    if (o.input)
      return [];
  }), t.validate) {
    let s = N.Buffer.from([]);
    if (e.address) {
      if (r().version !== i.pubKeyHash)
        throw new TypeError("Invalid version or Network mismatch");
      if (r().hash.length !== 20)
        throw new TypeError("Invalid address");
      s = r().hash;
    }
    if (e.hash) {
      if (s.length > 0 && !s.equals(e.hash))
        throw new TypeError("Hash mismatch");
      s = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 25 || e.output[0] !== on.OP_DUP || e.output[1] !== on.OP_HASH160 || e.output[2] !== 20 || e.output[23] !== on.OP_EQUALVERIFY || e.output[24] !== on.OP_CHECKSIG)
        throw new TypeError("Output is invalid");
      const a = e.output.slice(3, 23);
      if (s.length > 0 && !s.equals(a))
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.pubkey) {
      const a = Zf.hash160(e.pubkey);
      if (s.length > 0 && !s.equals(a))
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.input) {
      const a = n();
      if (a.length !== 2)
        throw new TypeError("Input is invalid");
      if (!xi.isCanonicalScriptSignature(a[0]))
        throw new TypeError("Input has invalid signature");
      if (!(0, It.isPoint)(a[1]))
        throw new TypeError("Input has invalid pubkey");
      if (e.signature && !e.signature.equals(a[0]))
        throw new TypeError("Signature mismatch");
      if (e.pubkey && !e.pubkey.equals(a[1]))
        throw new TypeError("Pubkey mismatch");
      const f = Zf.hash160(a[1]);
      if (s.length > 0 && !s.equals(f))
        throw new TypeError("Hash mismatch");
    }
  }
  return Object.assign(o, e);
}
Ga.p2pkh = G2;
var Wa = {};
Object.defineProperty(Wa, "__esModule", { value: !0 });
Wa.p2sh = void 0;
const gp = Ir, V2 = pt, dr = Ht, Ge = wt, hr = qt, bp = dl, po = dr.OPS;
function W2(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => r.equals(t[n]));
}
function z2(e, t) {
  if (!e.address && !e.hash && !e.output && !e.redeem && !e.input)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, Ge.typeforce)(
    {
      network: Ge.typeforce.maybe(Ge.typeforce.Object),
      address: Ge.typeforce.maybe(Ge.typeforce.String),
      hash: Ge.typeforce.maybe(Ge.typeforce.BufferN(20)),
      output: Ge.typeforce.maybe(Ge.typeforce.BufferN(23)),
      redeem: Ge.typeforce.maybe({
        network: Ge.typeforce.maybe(Ge.typeforce.Object),
        output: Ge.typeforce.maybe(Ge.typeforce.Buffer),
        input: Ge.typeforce.maybe(Ge.typeforce.Buffer),
        witness: Ge.typeforce.maybe(
          Ge.typeforce.arrayOf(Ge.typeforce.Buffer)
        )
      }),
      input: Ge.typeforce.maybe(Ge.typeforce.Buffer),
      witness: Ge.typeforce.maybe(
        Ge.typeforce.arrayOf(Ge.typeforce.Buffer)
      )
    },
    e
  );
  let r = e.network;
  r || (r = e.redeem && e.redeem.network || V2.bitcoin);
  const n = { network: r }, i = hr.value(() => {
    const a = N.Buffer.from(bp.decode(e.address)), f = a.readUInt8(0), l = a.slice(1);
    return { version: f, hash: l };
  }), o = hr.value(() => dr.decompile(e.input)), s = hr.value(() => {
    const a = o(), f = a[a.length - 1];
    return {
      network: r,
      output: f === po.OP_FALSE ? N.Buffer.from([]) : f,
      input: dr.compile(a.slice(0, -1)),
      witness: e.witness || []
    };
  });
  if (hr.prop(n, "address", () => {
    if (!n.hash)
      return;
    const a = N.Buffer.allocUnsafe(21);
    return a.writeUInt8(n.network.scriptHash, 0), n.hash.copy(a, 1), bp.encode(a);
  }), hr.prop(n, "hash", () => {
    if (e.output)
      return e.output.slice(2, 22);
    if (e.address)
      return i().hash;
    if (n.redeem && n.redeem.output)
      return gp.hash160(n.redeem.output);
  }), hr.prop(n, "output", () => {
    if (n.hash)
      return dr.compile([po.OP_HASH160, n.hash, po.OP_EQUAL]);
  }), hr.prop(n, "redeem", () => {
    if (e.input)
      return s();
  }), hr.prop(n, "input", () => {
    if (!(!e.redeem || !e.redeem.input || !e.redeem.output))
      return dr.compile(
        [].concat(dr.decompile(e.redeem.input), e.redeem.output)
      );
  }), hr.prop(n, "witness", () => {
    if (n.redeem && n.redeem.witness)
      return n.redeem.witness;
    if (n.input)
      return [];
  }), hr.prop(n, "name", () => {
    const a = ["p2sh"];
    return n.redeem !== void 0 && n.redeem.name !== void 0 && a.push(n.redeem.name), a.join("-");
  }), t.validate) {
    let a = N.Buffer.from([]);
    if (e.address) {
      if (i().version !== r.scriptHash)
        throw new TypeError("Invalid version or Network mismatch");
      if (i().hash.length !== 20)
        throw new TypeError("Invalid address");
      a = i().hash;
    }
    if (e.hash) {
      if (a.length > 0 && !a.equals(e.hash))
        throw new TypeError("Hash mismatch");
      a = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 23 || e.output[0] !== po.OP_HASH160 || e.output[1] !== 20 || e.output[22] !== po.OP_EQUAL)
        throw new TypeError("Output is invalid");
      const l = e.output.slice(2, 22);
      if (a.length > 0 && !a.equals(l))
        throw new TypeError("Hash mismatch");
      a = l;
    }
    const f = (l) => {
      if (l.output) {
        const h = dr.decompile(l.output);
        if (!h || h.length < 1)
          throw new TypeError("Redeem.output too short");
        if (l.output.byteLength > 520)
          throw new TypeError(
            "Redeem.output unspendable if larger than 520 bytes"
          );
        if (dr.countNonPushOnlyOPs(h) > 201)
          throw new TypeError(
            "Redeem.output unspendable with more than 201 non-push ops"
          );
        const y = gp.hash160(l.output);
        if (a.length > 0 && !a.equals(y))
          throw new TypeError("Hash mismatch");
        a = y;
      }
      if (l.input) {
        const h = l.input.length > 0, y = l.witness && l.witness.length > 0;
        if (!h && !y)
          throw new TypeError("Empty input");
        if (h && y)
          throw new TypeError("Input and witness provided");
        if (h) {
          const v = dr.decompile(l.input);
          if (!dr.isPushOnly(v))
            throw new TypeError("Non push-only scriptSig");
        }
      }
    };
    if (e.input) {
      const l = o();
      if (!l || l.length < 1)
        throw new TypeError("Input too short");
      if (!N.Buffer.isBuffer(s().output))
        throw new TypeError("Input is invalid");
      f(s());
    }
    if (e.redeem) {
      if (e.redeem.network && e.redeem.network !== r)
        throw new TypeError("Network mismatch");
      if (e.input) {
        const l = s();
        if (e.redeem.output && !e.redeem.output.equals(l.output))
          throw new TypeError("Redeem.output mismatch");
        if (e.redeem.input && !e.redeem.input.equals(l.input))
          throw new TypeError("Redeem.input mismatch");
      }
      f(e.redeem);
    }
    if (e.witness && e.redeem && e.redeem.witness && !W2(e.redeem.witness, e.witness))
      throw new TypeError("Witness and redeem.witness mismatch");
  }
  return Object.assign(n, e);
}
Wa.p2sh = z2;
var za = {}, Vr = {};
Object.defineProperty(Vr, "__esModule", { value: !0 });
Vr.bech32m = Vr.bech32 = void 0;
const pa = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", ay = {};
for (let e = 0; e < pa.length; e++) {
  const t = pa.charAt(e);
  ay[t] = e;
}
function Di(e) {
  const t = e >> 25;
  return (e & 33554431) << 5 ^ -(t >> 0 & 1) & 996825010 ^ -(t >> 1 & 1) & 642813549 ^ -(t >> 2 & 1) & 513874426 ^ -(t >> 3 & 1) & 1027748829 ^ -(t >> 4 & 1) & 705979059;
}
function vp(e) {
  let t = 1;
  for (let r = 0; r < e.length; ++r) {
    const n = e.charCodeAt(r);
    if (n < 33 || n > 126)
      return "Invalid prefix (" + e + ")";
    t = Di(t) ^ n >> 5;
  }
  t = Di(t);
  for (let r = 0; r < e.length; ++r) {
    const n = e.charCodeAt(r);
    t = Di(t) ^ n & 31;
  }
  return t;
}
function yl(e, t, r, n) {
  let i = 0, o = 0;
  const s = (1 << r) - 1, a = [];
  for (let f = 0; f < e.length; ++f)
    for (i = i << t | e[f], o += t; o >= r; )
      o -= r, a.push(i >> o & s);
  if (n)
    o > 0 && a.push(i << r - o & s);
  else {
    if (o >= t)
      return "Excess padding";
    if (i << r - o & s)
      return "Non-zero padding";
  }
  return a;
}
function X2(e) {
  return yl(e, 8, 5, !0);
}
function Y2(e) {
  const t = yl(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
}
function Z2(e) {
  const t = yl(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
  throw new Error(t);
}
function fy(e) {
  let t;
  e === "bech32" ? t = 1 : t = 734539939;
  function r(s, a, f) {
    if (f = f || 90, s.length + 7 + a.length > f)
      throw new TypeError("Exceeds length limit");
    s = s.toLowerCase();
    let l = vp(s);
    if (typeof l == "string")
      throw new Error(l);
    let h = s + "1";
    for (let y = 0; y < a.length; ++y) {
      const v = a[y];
      if (v >> 5)
        throw new Error("Non 5-bit word");
      l = Di(l) ^ v, h += pa.charAt(v);
    }
    for (let y = 0; y < 6; ++y)
      l = Di(l);
    l ^= t;
    for (let y = 0; y < 6; ++y) {
      const v = l >> (5 - y) * 5 & 31;
      h += pa.charAt(v);
    }
    return h;
  }
  function n(s, a) {
    if (a = a || 90, s.length < 8)
      return s + " too short";
    if (s.length > a)
      return "Exceeds length limit";
    const f = s.toLowerCase(), l = s.toUpperCase();
    if (s !== f && s !== l)
      return "Mixed-case string " + s;
    s = f;
    const h = s.lastIndexOf("1");
    if (h === -1)
      return "No separator character for " + s;
    if (h === 0)
      return "Missing prefix for " + s;
    const y = s.slice(0, h), v = s.slice(h + 1);
    if (v.length < 6)
      return "Data too short";
    let g = vp(y);
    if (typeof g == "string")
      return g;
    const m = [];
    for (let E = 0; E < v.length; ++E) {
      const O = v.charAt(E), x = ay[O];
      if (x === void 0)
        return "Unknown character " + O;
      g = Di(g) ^ x, !(E + 6 >= v.length) && m.push(x);
    }
    return g !== t ? "Invalid checksum for " + s : { prefix: y, words: m };
  }
  function i(s, a) {
    const f = n(s, a);
    if (typeof f == "object")
      return f;
  }
  function o(s, a) {
    const f = n(s, a);
    if (typeof f == "object")
      return f;
    throw new Error(f);
  }
  return {
    decodeUnsafe: i,
    decode: o,
    encode: r,
    toWords: X2,
    fromWordsUnsafe: Y2,
    fromWords: Z2
  };
}
Vr.bech32 = fy("bech32");
Vr.bech32m = fy("bech32m");
Object.defineProperty(za, "__esModule", { value: !0 });
za.p2wpkh = void 0;
const Jf = Ir, J2 = pt, Xs = Ht, rt = wt, sn = qt, Bs = Vr, wp = Xs.OPS, Q2 = N.Buffer.alloc(0);
function eE(e, t) {
  if (!e.address && !e.hash && !e.output && !e.pubkey && !e.witness)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, rt.typeforce)(
    {
      address: rt.typeforce.maybe(rt.typeforce.String),
      hash: rt.typeforce.maybe(rt.typeforce.BufferN(20)),
      input: rt.typeforce.maybe(rt.typeforce.BufferN(0)),
      network: rt.typeforce.maybe(rt.typeforce.Object),
      output: rt.typeforce.maybe(rt.typeforce.BufferN(22)),
      pubkey: rt.typeforce.maybe(rt.isPoint),
      signature: rt.typeforce.maybe(Xs.isCanonicalScriptSignature),
      witness: rt.typeforce.maybe(
        rt.typeforce.arrayOf(rt.typeforce.Buffer)
      )
    },
    e
  );
  const r = sn.value(() => {
    const o = Bs.bech32.decode(e.address), s = o.words.shift(), a = Bs.bech32.fromWords(o.words);
    return {
      version: s,
      prefix: o.prefix,
      data: N.Buffer.from(a)
    };
  }), n = e.network || J2.bitcoin, i = { name: "p2wpkh", network: n };
  if (sn.prop(i, "address", () => {
    if (!i.hash)
      return;
    const o = Bs.bech32.toWords(i.hash);
    return o.unshift(0), Bs.bech32.encode(n.bech32, o);
  }), sn.prop(i, "hash", () => {
    if (e.output)
      return e.output.slice(2, 22);
    if (e.address)
      return r().data;
    if (e.pubkey || i.pubkey)
      return Jf.hash160(e.pubkey || i.pubkey);
  }), sn.prop(i, "output", () => {
    if (i.hash)
      return Xs.compile([wp.OP_0, i.hash]);
  }), sn.prop(i, "pubkey", () => {
    if (e.pubkey)
      return e.pubkey;
    if (e.witness)
      return e.witness[1];
  }), sn.prop(i, "signature", () => {
    if (e.witness)
      return e.witness[0];
  }), sn.prop(i, "input", () => {
    if (i.witness)
      return Q2;
  }), sn.prop(i, "witness", () => {
    if (e.pubkey && e.signature)
      return [e.signature, e.pubkey];
  }), t.validate) {
    let o = N.Buffer.from([]);
    if (e.address) {
      if (n && n.bech32 !== r().prefix)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== 0)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 20)
        throw new TypeError("Invalid address data");
      o = r().data;
    }
    if (e.hash) {
      if (o.length > 0 && !o.equals(e.hash))
        throw new TypeError("Hash mismatch");
      o = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 22 || e.output[0] !== wp.OP_0 || e.output[1] !== 20)
        throw new TypeError("Output is invalid");
      if (o.length > 0 && !o.equals(e.output.slice(2)))
        throw new TypeError("Hash mismatch");
      o = e.output.slice(2);
    }
    if (e.pubkey) {
      const s = Jf.hash160(e.pubkey);
      if (o.length > 0 && !o.equals(s))
        throw new TypeError("Hash mismatch");
      if (o = s, !(0, rt.isPoint)(e.pubkey) || e.pubkey.length !== 33)
        throw new TypeError("Invalid pubkey for p2wpkh");
    }
    if (e.witness) {
      if (e.witness.length !== 2)
        throw new TypeError("Witness is invalid");
      if (!Xs.isCanonicalScriptSignature(e.witness[0]))
        throw new TypeError("Witness has invalid signature");
      if (!(0, rt.isPoint)(e.witness[1]) || e.witness[1].length !== 33)
        throw new TypeError("Witness has invalid pubkey");
      if (e.signature && !e.signature.equals(e.witness[0]))
        throw new TypeError("Signature mismatch");
      if (e.pubkey && !e.pubkey.equals(e.witness[1]))
        throw new TypeError("Pubkey mismatch");
      const s = Jf.hash160(e.witness[1]);
      if (o.length > 0 && !o.equals(s))
        throw new TypeError("Hash mismatch");
    }
  }
  return Object.assign(i, e);
}
za.p2wpkh = eE;
var Xa = {};
Object.defineProperty(Xa, "__esModule", { value: !0 });
Xa.p2wsh = void 0;
const mp = Ir, tE = pt, Cr = Ht, qe = wt, Nr = qt, ks = Vr, Ep = Cr.OPS, Qf = N.Buffer.alloc(0);
function rE(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => r.equals(t[n]));
}
function Rs(e) {
  return !!(N.Buffer.isBuffer(e) && e.length === 65 && e[0] === 4 && (0, qe.isPoint)(e));
}
function nE(e, t) {
  if (!e.address && !e.hash && !e.output && !e.redeem && !e.witness)
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, qe.typeforce)(
    {
      network: qe.typeforce.maybe(qe.typeforce.Object),
      address: qe.typeforce.maybe(qe.typeforce.String),
      hash: qe.typeforce.maybe(qe.typeforce.BufferN(32)),
      output: qe.typeforce.maybe(qe.typeforce.BufferN(34)),
      redeem: qe.typeforce.maybe({
        input: qe.typeforce.maybe(qe.typeforce.Buffer),
        network: qe.typeforce.maybe(qe.typeforce.Object),
        output: qe.typeforce.maybe(qe.typeforce.Buffer),
        witness: qe.typeforce.maybe(
          qe.typeforce.arrayOf(qe.typeforce.Buffer)
        )
      }),
      input: qe.typeforce.maybe(qe.typeforce.BufferN(0)),
      witness: qe.typeforce.maybe(
        qe.typeforce.arrayOf(qe.typeforce.Buffer)
      )
    },
    e
  );
  const r = Nr.value(() => {
    const s = ks.bech32.decode(e.address), a = s.words.shift(), f = ks.bech32.fromWords(s.words);
    return {
      version: a,
      prefix: s.prefix,
      data: N.Buffer.from(f)
    };
  }), n = Nr.value(() => Cr.decompile(e.redeem.input));
  let i = e.network;
  i || (i = e.redeem && e.redeem.network || tE.bitcoin);
  const o = { network: i };
  if (Nr.prop(o, "address", () => {
    if (!o.hash)
      return;
    const s = ks.bech32.toWords(o.hash);
    return s.unshift(0), ks.bech32.encode(i.bech32, s);
  }), Nr.prop(o, "hash", () => {
    if (e.output)
      return e.output.slice(2);
    if (e.address)
      return r().data;
    if (o.redeem && o.redeem.output)
      return mp.sha256(o.redeem.output);
  }), Nr.prop(o, "output", () => {
    if (o.hash)
      return Cr.compile([Ep.OP_0, o.hash]);
  }), Nr.prop(o, "redeem", () => {
    if (e.witness)
      return {
        output: e.witness[e.witness.length - 1],
        input: Qf,
        witness: e.witness.slice(0, -1)
      };
  }), Nr.prop(o, "input", () => {
    if (o.witness)
      return Qf;
  }), Nr.prop(o, "witness", () => {
    if (e.redeem && e.redeem.input && e.redeem.input.length > 0 && e.redeem.output && e.redeem.output.length > 0) {
      const s = Cr.toStack(n());
      return o.redeem = Object.assign({ witness: s }, e.redeem), o.redeem.input = Qf, [].concat(s, e.redeem.output);
    }
    if (e.redeem && e.redeem.output && e.redeem.witness)
      return [].concat(e.redeem.witness, e.redeem.output);
  }), Nr.prop(o, "name", () => {
    const s = ["p2wsh"];
    return o.redeem !== void 0 && o.redeem.name !== void 0 && s.push(o.redeem.name), s.join("-");
  }), t.validate) {
    let s = N.Buffer.from([]);
    if (e.address) {
      if (r().prefix !== i.bech32)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== 0)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 32)
        throw new TypeError("Invalid address data");
      s = r().data;
    }
    if (e.hash) {
      if (s.length > 0 && !s.equals(e.hash))
        throw new TypeError("Hash mismatch");
      s = e.hash;
    }
    if (e.output) {
      if (e.output.length !== 34 || e.output[0] !== Ep.OP_0 || e.output[1] !== 32)
        throw new TypeError("Output is invalid");
      const a = e.output.slice(2);
      if (s.length > 0 && !s.equals(a))
        throw new TypeError("Hash mismatch");
      s = a;
    }
    if (e.redeem) {
      if (e.redeem.network && e.redeem.network !== i)
        throw new TypeError("Network mismatch");
      if (e.redeem.input && e.redeem.input.length > 0 && e.redeem.witness && e.redeem.witness.length > 0)
        throw new TypeError("Ambiguous witness source");
      if (e.redeem.output) {
        const a = Cr.decompile(e.redeem.output);
        if (!a || a.length < 1)
          throw new TypeError("Redeem.output is invalid");
        if (e.redeem.output.byteLength > 3600)
          throw new TypeError(
            "Redeem.output unspendable if larger than 3600 bytes"
          );
        if (Cr.countNonPushOnlyOPs(a) > 201)
          throw new TypeError(
            "Redeem.output unspendable with more than 201 non-push ops"
          );
        const f = mp.sha256(e.redeem.output);
        if (s.length > 0 && !s.equals(f))
          throw new TypeError("Hash mismatch");
        s = f;
      }
      if (e.redeem.input && !Cr.isPushOnly(n()))
        throw new TypeError("Non push-only scriptSig");
      if (e.witness && e.redeem.witness && !rE(e.witness, e.redeem.witness))
        throw new TypeError("Witness and redeem.witness mismatch");
      if (e.redeem.input && n().some(Rs) || e.redeem.output && (Cr.decompile(e.redeem.output) || []).some(
        Rs
      ))
        throw new TypeError(
          "redeem.input or redeem.output contains uncompressed pubkey"
        );
    }
    if (e.witness && e.witness.length > 0) {
      const a = e.witness[e.witness.length - 1];
      if (e.redeem && e.redeem.output && !e.redeem.output.equals(a))
        throw new TypeError("Witness and redeem.output mismatch");
      if (e.witness.some(Rs) || (Cr.decompile(a) || []).some(Rs))
        throw new TypeError("Witness contains uncompressed pubkey");
    }
  }
  return Object.assign(o, e);
}
Xa.p2wsh = nE;
var Ya = {}, wn = {};
Object.defineProperty(wn, "__esModule", { value: !0 });
wn.getEccLib = wn.initEccLib = void 0;
const ko = {};
function iE(e) {
  e ? e !== ko.eccLib && (sE(e), ko.eccLib = e) : ko.eccLib = e;
}
wn.initEccLib = iE;
function oE() {
  if (!ko.eccLib)
    throw new Error(
      "No ECC Library provided. You must call initEccLib() with a valid TinySecp256k1Interface instance"
    );
  return ko.eccLib;
}
wn.getEccLib = oE;
const Ur = (e) => N.Buffer.from(e, "hex");
function sE(e) {
  Vt(typeof e.isXOnlyPoint == "function"), Vt(
    e.isXOnlyPoint(
      Ur("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), Vt(
    e.isXOnlyPoint(
      Ur("fffffffffffffffffffffffffffffffffffffffffffffffffffffffeeffffc2e")
    )
  ), Vt(
    e.isXOnlyPoint(
      Ur("f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9")
    )
  ), Vt(
    e.isXOnlyPoint(
      Ur("0000000000000000000000000000000000000000000000000000000000000001")
    )
  ), Vt(
    !e.isXOnlyPoint(
      Ur("0000000000000000000000000000000000000000000000000000000000000000")
    )
  ), Vt(
    !e.isXOnlyPoint(
      Ur("fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f")
    )
  ), Vt(typeof e.xOnlyPointAddTweak == "function"), aE.forEach((t) => {
    const r = e.xOnlyPointAddTweak(Ur(t.pubkey), Ur(t.tweak));
    t.result === null ? Vt(r === null) : (Vt(r !== null), Vt(r.parity === t.parity), Vt(N.Buffer.from(r.xOnlyPubkey).equals(Ur(t.result))));
  });
}
function Vt(e) {
  if (!e)
    throw new Error("ecc library invalid");
}
const aE = [
  {
    pubkey: "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
    tweak: "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140",
    parity: -1,
    result: null
  },
  {
    pubkey: "1617d38ed8d8657da4d4761e8057bc396ea9e4b9d29776d4be096016dbd2509b",
    tweak: "a8397a935f0dfceba6ba9618f6451ef4d80637abf4e6af2669fbc9de6a8fd2ac",
    parity: 1,
    result: "e478f99dab91052ab39a33ea35fd5e6e4933f4d28023cd597c9a1f6760346adf"
  },
  {
    pubkey: "2c0b7cf95324a07d05398b240174dc0c2be444d96b159aa6c7f7b1e668680991",
    tweak: "823c3cd2142744b075a87eade7e1b8678ba308d566226a0056ca2b7a76f86b47",
    parity: 0,
    result: "9534f8dc8c6deda2dc007655981c78b49c5d96c778fbf363462a11ec9dfd948c"
  }
];
var Za = {}, nt = {}, du = { exports: {} };
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */
(function(e, t) {
  var r = ar, n = r.Buffer;
  function i(s, a) {
    for (var f in s)
      a[f] = s[f];
  }
  n.from && n.alloc && n.allocUnsafe && n.allocUnsafeSlow ? e.exports = r : (i(r, t), t.Buffer = o);
  function o(s, a, f) {
    return n(s, a, f);
  }
  o.prototype = Object.create(n.prototype), i(n, o), o.from = function(s, a, f) {
    if (typeof s == "number")
      throw new TypeError("Argument must not be a number");
    return n(s, a, f);
  }, o.alloc = function(s, a, f) {
    if (typeof s != "number")
      throw new TypeError("Argument must be a number");
    var l = n(s);
    return a !== void 0 ? typeof f == "string" ? l.fill(a, f) : l.fill(a) : l.fill(0), l;
  }, o.allocUnsafe = function(s) {
    if (typeof s != "number")
      throw new TypeError("Argument must be a number");
    return n(s);
  }, o.allocUnsafeSlow = function(s) {
    if (typeof s != "number")
      throw new TypeError("Argument must be a number");
    return r.SlowBuffer(s);
  };
})(du, du.exports);
var Re = du.exports, yu = Re.Buffer, fE = 9007199254740991;
function gl(e) {
  if (e < 0 || e > fE || e % 1 !== 0)
    throw new RangeError("value out of range");
}
function Ao(e, t, r) {
  if (gl(e), t || (t = yu.allocUnsafe(cy(e))), !yu.isBuffer(t))
    throw new TypeError("buffer must be a Buffer instance");
  return r || (r = 0), e < 253 ? (t.writeUInt8(e, r), Ao.bytes = 1) : e <= 65535 ? (t.writeUInt8(253, r), t.writeUInt16LE(e, r + 1), Ao.bytes = 3) : e <= 4294967295 ? (t.writeUInt8(254, r), t.writeUInt32LE(e, r + 1), Ao.bytes = 5) : (t.writeUInt8(255, r), t.writeUInt32LE(e >>> 0, r + 1), t.writeUInt32LE(e / 4294967296 | 0, r + 5), Ao.bytes = 9), t;
}
function To(e, t) {
  if (!yu.isBuffer(e))
    throw new TypeError("buffer must be a Buffer instance");
  t || (t = 0);
  var r = e.readUInt8(t);
  if (r < 253)
    return To.bytes = 1, r;
  if (r === 253)
    return To.bytes = 3, e.readUInt16LE(t + 1);
  if (r === 254)
    return To.bytes = 5, e.readUInt32LE(t + 1);
  To.bytes = 9;
  var n = e.readUInt32LE(t + 1), i = e.readUInt32LE(t + 5), o = i * 4294967296 + n;
  return gl(o), o;
}
function cy(e) {
  return gl(e), e < 253 ? 1 : e <= 65535 ? 3 : e <= 4294967295 ? 5 : 9;
}
var Ja = { encode: Ao, decode: To, encodingLength: cy };
Object.defineProperty(nt, "__esModule", { value: !0 });
nt.BufferReader = nt.BufferWriter = nt.cloneBuffer = nt.reverseBuffer = nt.writeUInt64LE = nt.readUInt64LE = nt.varuint = void 0;
const jn = wt, { typeforce: uy } = jn, Fo = Ja;
nt.varuint = Fo;
function ly(e, t) {
  if (typeof e != "number")
    throw new Error("cannot write a non-number as a number");
  if (e < 0)
    throw new Error("specified a negative value for writing an unsigned value");
  if (e > t)
    throw new Error("RangeError: value out of range");
  if (Math.floor(e) !== e)
    throw new Error("value has a fractional component");
}
function hy(e, t) {
  const r = e.readUInt32LE(t);
  let n = e.readUInt32LE(t + 4);
  return n *= 4294967296, ly(n + r, 9007199254740991), n + r;
}
nt.readUInt64LE = hy;
function py(e, t, r) {
  return ly(t, 9007199254740991), e.writeInt32LE(t & -1, r), e.writeUInt32LE(Math.floor(t / 4294967296), r + 4), r + 8;
}
nt.writeUInt64LE = py;
function cE(e) {
  if (e.length < 1)
    return e;
  let t = e.length - 1, r = 0;
  for (let n = 0; n < e.length / 2; n++)
    r = e[n], e[n] = e[t], e[t] = r, t--;
  return e;
}
nt.reverseBuffer = cE;
function uE(e) {
  const t = N.Buffer.allocUnsafe(e.length);
  return e.copy(t), t;
}
nt.cloneBuffer = uE;
class bl {
  static withCapacity(t) {
    return new bl(N.Buffer.alloc(t));
  }
  constructor(t, r = 0) {
    this.buffer = t, this.offset = r, uy(jn.tuple(jn.Buffer, jn.UInt32), [t, r]);
  }
  writeUInt8(t) {
    this.offset = this.buffer.writeUInt8(t, this.offset);
  }
  writeInt32(t) {
    this.offset = this.buffer.writeInt32LE(t, this.offset);
  }
  writeUInt32(t) {
    this.offset = this.buffer.writeUInt32LE(t, this.offset);
  }
  writeUInt64(t) {
    this.offset = py(this.buffer, t, this.offset);
  }
  writeVarInt(t) {
    Fo.encode(t, this.buffer, this.offset), this.offset += Fo.encode.bytes;
  }
  writeSlice(t) {
    if (this.buffer.length < this.offset + t.length)
      throw new Error("Cannot write slice out of bounds");
    this.offset += t.copy(this.buffer, this.offset);
  }
  writeVarSlice(t) {
    this.writeVarInt(t.length), this.writeSlice(t);
  }
  writeVector(t) {
    this.writeVarInt(t.length), t.forEach((r) => this.writeVarSlice(r));
  }
  end() {
    if (this.buffer.length === this.offset)
      return this.buffer;
    throw new Error(`buffer size ${this.buffer.length}, offset ${this.offset}`);
  }
}
nt.BufferWriter = bl;
class lE {
  constructor(t, r = 0) {
    this.buffer = t, this.offset = r, uy(jn.tuple(jn.Buffer, jn.UInt32), [t, r]);
  }
  readUInt8() {
    const t = this.buffer.readUInt8(this.offset);
    return this.offset++, t;
  }
  readInt32() {
    const t = this.buffer.readInt32LE(this.offset);
    return this.offset += 4, t;
  }
  readUInt32() {
    const t = this.buffer.readUInt32LE(this.offset);
    return this.offset += 4, t;
  }
  readUInt64() {
    const t = hy(this.buffer, this.offset);
    return this.offset += 8, t;
  }
  readVarInt() {
    const t = Fo.decode(this.buffer, this.offset);
    return this.offset += Fo.decode.bytes, t;
  }
  readSlice(t) {
    if (this.buffer.length < this.offset + t)
      throw new Error("Cannot read slice out of bounds");
    const r = this.buffer.slice(this.offset, this.offset + t);
    return this.offset += t, r;
  }
  readVarSlice() {
    return this.readSlice(this.readVarInt());
  }
  readVector() {
    const t = this.readVarInt(), r = [];
    for (let n = 0; n < t; n++)
      r.push(this.readVarSlice());
    return r;
  }
}
nt.BufferReader = lE;
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.tweakKey = e.tapTweakHash = e.tapleafHash = e.findScriptPath = e.toHashTree = e.rootHashFromPath = e.MAX_TAPTREE_DEPTH = e.LEAF_VERSION_TAPSCRIPT = void 0;
  const t = ar, r = wn, n = Ir, i = nt, o = wt;
  e.LEAF_VERSION_TAPSCRIPT = 192, e.MAX_TAPTREE_DEPTH = 128;
  const s = (E) => "left" in E && "right" in E;
  function a(E, O) {
    if (E.length < 33)
      throw new TypeError(
        `The control-block length is too small. Got ${E.length}, expected min 33.`
      );
    const x = (E.length - 33) / 32;
    let U = O;
    for (let H = 0; H < x; H++) {
      const M = E.slice(33 + 32 * H, 65 + 32 * H);
      U.compare(M) < 0 ? U = g(U, M) : U = g(M, U);
    }
    return U;
  }
  e.rootHashFromPath = a;
  function f(E) {
    if ((0, o.isTapleaf)(E))
      return { hash: h(E) };
    const O = [f(E[0]), f(E[1])];
    O.sort((H, M) => H.hash.compare(M.hash));
    const [x, U] = O;
    return {
      hash: g(x.hash, U.hash),
      left: x,
      right: U
    };
  }
  e.toHashTree = f;
  function l(E, O) {
    if (s(E)) {
      const x = l(E.left, O);
      if (x !== void 0)
        return [...x, E.right.hash];
      const U = l(E.right, O);
      if (U !== void 0)
        return [...U, E.left.hash];
    } else if (E.hash.equals(O))
      return [];
  }
  e.findScriptPath = l;
  function h(E) {
    const O = E.version || e.LEAF_VERSION_TAPSCRIPT;
    return n.taggedHash(
      "TapLeaf",
      t.Buffer.concat([
        t.Buffer.from([O]),
        m(E.output)
      ])
    );
  }
  e.tapleafHash = h;
  function y(E, O) {
    return n.taggedHash(
      "TapTweak",
      t.Buffer.concat(O ? [E, O] : [E])
    );
  }
  e.tapTweakHash = y;
  function v(E, O) {
    if (!t.Buffer.isBuffer(E) || E.length !== 32 || O && O.length !== 32)
      return null;
    const x = y(E, O), U = (0, r.getEccLib)().xOnlyPointAddTweak(E, x);
    return !U || U.xOnlyPubkey === null ? null : {
      parity: U.parity,
      x: t.Buffer.from(U.xOnlyPubkey)
    };
  }
  e.tweakKey = v;
  function g(E, O) {
    return n.taggedHash("TapBranch", t.Buffer.concat([E, O]));
  }
  function m(E) {
    const O = i.varuint.encodingLength(E.length), x = t.Buffer.allocUnsafe(O);
    return i.varuint.encode(E.length, x), t.Buffer.concat([x, E]);
  }
})(Za);
Object.defineProperty(Ya, "__esModule", { value: !0 });
Ya.p2tr = void 0;
const Ns = ar, hE = pt, gu = Ht, Ie = wt, _p = wn, Dt = Za, Wt = qt, Us = Vr, Sp = gu.OPS, Op = 1, pE = 80;
function dE(e, t) {
  if (!e.address && !e.output && !e.pubkey && !e.internalPubkey && !(e.witness && e.witness.length > 1))
    throw new TypeError("Not enough data");
  t = Object.assign({ validate: !0 }, t || {}), (0, Ie.typeforce)(
    {
      address: Ie.typeforce.maybe(Ie.typeforce.String),
      input: Ie.typeforce.maybe(Ie.typeforce.BufferN(0)),
      network: Ie.typeforce.maybe(Ie.typeforce.Object),
      output: Ie.typeforce.maybe(Ie.typeforce.BufferN(34)),
      internalPubkey: Ie.typeforce.maybe(Ie.typeforce.BufferN(32)),
      hash: Ie.typeforce.maybe(Ie.typeforce.BufferN(32)),
      pubkey: Ie.typeforce.maybe(Ie.typeforce.BufferN(32)),
      signature: Ie.typeforce.maybe(
        Ie.typeforce.anyOf(
          Ie.typeforce.BufferN(64),
          Ie.typeforce.BufferN(65)
        )
      ),
      witness: Ie.typeforce.maybe(
        Ie.typeforce.arrayOf(Ie.typeforce.Buffer)
      ),
      scriptTree: Ie.typeforce.maybe(Ie.isTaptree),
      redeem: Ie.typeforce.maybe({
        output: Ie.typeforce.maybe(Ie.typeforce.Buffer),
        redeemVersion: Ie.typeforce.maybe(Ie.typeforce.Number),
        witness: Ie.typeforce.maybe(
          Ie.typeforce.arrayOf(Ie.typeforce.Buffer)
        )
      }),
      redeemVersion: Ie.typeforce.maybe(Ie.typeforce.Number)
    },
    e
  );
  const r = Wt.value(() => {
    const a = Us.bech32m.decode(e.address), f = a.words.shift(), l = Us.bech32m.fromWords(a.words);
    return {
      version: f,
      prefix: a.prefix,
      data: Ns.Buffer.from(l)
    };
  }), n = Wt.value(() => {
    if (!(!e.witness || !e.witness.length))
      return e.witness.length >= 2 && e.witness[e.witness.length - 1][0] === pE ? e.witness.slice(0, -1) : e.witness.slice();
  }), i = Wt.value(() => {
    if (e.scriptTree)
      return (0, Dt.toHashTree)(e.scriptTree);
    if (e.hash)
      return { hash: e.hash };
  }), o = e.network || hE.bitcoin, s = { name: "p2tr", network: o };
  if (Wt.prop(s, "address", () => {
    if (!s.pubkey)
      return;
    const a = Us.bech32m.toWords(s.pubkey);
    return a.unshift(Op), Us.bech32m.encode(o.bech32, a);
  }), Wt.prop(s, "hash", () => {
    const a = i();
    if (a)
      return a.hash;
    const f = n();
    if (f && f.length > 1) {
      const l = f[f.length - 1], h = l[0] & Ie.TAPLEAF_VERSION_MASK, y = f[f.length - 2], v = (0, Dt.tapleafHash)({
        output: y,
        version: h
      });
      return (0, Dt.rootHashFromPath)(l, v);
    }
    return null;
  }), Wt.prop(s, "output", () => {
    if (s.pubkey)
      return gu.compile([Sp.OP_1, s.pubkey]);
  }), Wt.prop(s, "redeemVersion", () => e.redeemVersion ? e.redeemVersion : e.redeem && e.redeem.redeemVersion !== void 0 && e.redeem.redeemVersion !== null ? e.redeem.redeemVersion : Dt.LEAF_VERSION_TAPSCRIPT), Wt.prop(s, "redeem", () => {
    const a = n();
    if (!(!a || a.length < 2))
      return {
        output: a[a.length - 2],
        witness: a.slice(0, -2),
        redeemVersion: a[a.length - 1][0] & Ie.TAPLEAF_VERSION_MASK
      };
  }), Wt.prop(s, "pubkey", () => {
    if (e.pubkey)
      return e.pubkey;
    if (e.output)
      return e.output.slice(2);
    if (e.address)
      return r().data;
    if (s.internalPubkey) {
      const a = (0, Dt.tweakKey)(s.internalPubkey, s.hash);
      if (a)
        return a.x;
    }
  }), Wt.prop(s, "internalPubkey", () => {
    if (e.internalPubkey)
      return e.internalPubkey;
    const a = n();
    if (a && a.length > 1)
      return a[a.length - 1].slice(1, 33);
  }), Wt.prop(s, "signature", () => {
    if (e.signature)
      return e.signature;
    const a = n();
    if (!(!a || a.length !== 1))
      return a[0];
  }), Wt.prop(s, "witness", () => {
    if (e.witness)
      return e.witness;
    const a = i();
    if (a && e.redeem && e.redeem.output && e.internalPubkey) {
      const f = (0, Dt.tapleafHash)({
        output: e.redeem.output,
        version: s.redeemVersion
      }), l = (0, Dt.findScriptPath)(a, f);
      if (!l)
        return;
      const h = (0, Dt.tweakKey)(e.internalPubkey, a.hash);
      if (!h)
        return;
      const y = Ns.Buffer.concat(
        [
          Ns.Buffer.from([s.redeemVersion | h.parity]),
          e.internalPubkey
        ].concat(l)
      );
      return [e.redeem.output, y];
    }
    if (e.signature)
      return [e.signature];
  }), t.validate) {
    let a = Ns.Buffer.from([]);
    if (e.address) {
      if (o && o.bech32 !== r().prefix)
        throw new TypeError("Invalid prefix or Network mismatch");
      if (r().version !== Op)
        throw new TypeError("Invalid address version");
      if (r().data.length !== 32)
        throw new TypeError("Invalid address data");
      a = r().data;
    }
    if (e.pubkey) {
      if (a.length > 0 && !a.equals(e.pubkey))
        throw new TypeError("Pubkey mismatch");
      a = e.pubkey;
    }
    if (e.output) {
      if (e.output.length !== 34 || e.output[0] !== Sp.OP_1 || e.output[1] !== 32)
        throw new TypeError("Output is invalid");
      if (a.length > 0 && !a.equals(e.output.slice(2)))
        throw new TypeError("Pubkey mismatch");
      a = e.output.slice(2);
    }
    if (e.internalPubkey) {
      const h = (0, Dt.tweakKey)(e.internalPubkey, s.hash);
      if (a.length > 0 && !a.equals(h.x))
        throw new TypeError("Pubkey mismatch");
      a = h.x;
    }
    if (a && a.length && !(0, _p.getEccLib)().isXOnlyPoint(a))
      throw new TypeError("Invalid pubkey for p2tr");
    const f = i();
    if (e.hash && f && !e.hash.equals(f.hash))
      throw new TypeError("Hash mismatch");
    if (e.redeem && e.redeem.output && f) {
      const h = (0, Dt.tapleafHash)({
        output: e.redeem.output,
        version: s.redeemVersion
      });
      if (!(0, Dt.findScriptPath)(f, h))
        throw new TypeError("Redeem script not in tree");
    }
    const l = n();
    if (e.redeem && s.redeem) {
      if (e.redeem.redeemVersion && e.redeem.redeemVersion !== s.redeem.redeemVersion)
        throw new TypeError("Redeem.redeemVersion and witness mismatch");
      if (e.redeem.output) {
        if (gu.decompile(e.redeem.output).length === 0)
          throw new TypeError("Redeem.output is invalid");
        if (s.redeem.output && !e.redeem.output.equals(s.redeem.output))
          throw new TypeError("Redeem.output and witness mismatch");
      }
      if (e.redeem.witness && s.redeem.witness && !yE(e.redeem.witness, s.redeem.witness))
        throw new TypeError("Redeem.witness and witness mismatch");
    }
    if (l && l.length)
      if (l.length === 1) {
        if (e.signature && !e.signature.equals(l[0]))
          throw new TypeError("Signature mismatch");
      } else {
        const h = l[l.length - 1];
        if (h.length < 33)
          throw new TypeError(
            `The control-block length is too small. Got ${h.length}, expected min 33.`
          );
        if ((h.length - 33) % 32 !== 0)
          throw new TypeError(
            `The control-block length of ${h.length} is incorrect!`
          );
        const y = (h.length - 33) / 32;
        if (y > 128)
          throw new TypeError(
            `The script path is too long. Got ${y}, expected max 128.`
          );
        const v = h.slice(1, 33);
        if (e.internalPubkey && !e.internalPubkey.equals(v))
          throw new TypeError("Internal pubkey mismatch");
        if (!(0, _p.getEccLib)().isXOnlyPoint(v))
          throw new TypeError("Invalid internalPubkey for p2tr witness");
        const g = h[0] & Ie.TAPLEAF_VERSION_MASK, m = l[l.length - 2], E = (0, Dt.tapleafHash)({
          output: m,
          version: g
        }), O = (0, Dt.rootHashFromPath)(h, E), x = (0, Dt.tweakKey)(v, O);
        if (!x)
          throw new TypeError("Invalid outputKey for p2tr witness");
        if (a.length && !a.equals(x.x))
          throw new TypeError("Pubkey mismatch for p2tr witness");
        if (x.parity !== (h[0] & 1))
          throw new Error("Incorrect parity");
      }
  }
  return Object.assign(s, e);
}
Ya.p2tr = dE;
function yE(e, t) {
  return e.length !== t.length ? !1 : e.every((r, n) => r.equals(t[n]));
}
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.p2tr = e.p2wsh = e.p2wpkh = e.p2sh = e.p2pkh = e.p2pk = e.p2ms = e.embed = void 0;
  const t = ja;
  Object.defineProperty(e, "embed", {
    enumerable: !0,
    get: function() {
      return t.p2data;
    }
  });
  const r = Ka;
  Object.defineProperty(e, "p2ms", {
    enumerable: !0,
    get: function() {
      return r.p2ms;
    }
  });
  const n = qa;
  Object.defineProperty(e, "p2pk", {
    enumerable: !0,
    get: function() {
      return n.p2pk;
    }
  });
  const i = Ga;
  Object.defineProperty(e, "p2pkh", {
    enumerable: !0,
    get: function() {
      return i.p2pkh;
    }
  });
  const o = Wa;
  Object.defineProperty(e, "p2sh", {
    enumerable: !0,
    get: function() {
      return o.p2sh;
    }
  });
  const s = za;
  Object.defineProperty(e, "p2wpkh", {
    enumerable: !0,
    get: function() {
      return s.p2wpkh;
    }
  });
  const a = Xa;
  Object.defineProperty(e, "p2wsh", {
    enumerable: !0,
    get: function() {
      return a.p2wsh;
    }
  });
  const f = Ya;
  Object.defineProperty(e, "p2tr", {
    enumerable: !0,
    get: function() {
      return f.p2tr;
    }
  });
})(oo);
Object.defineProperty(Ut, "__esModule", { value: !0 });
Ut.toOutputScript = Ut.fromOutputScript = Ut.toBech32 = Ut.toBase58Check = Ut.fromBech32 = Ut.fromBase58Check = void 0;
const dy = pt, _r = oo, yy = Ht, Cs = wt, Mi = Vr, gy = dl, by = 40, vy = 2, wy = 16, my = 2, Ey = 80, _y = "WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.";
function gE(e, t) {
  const r = e.slice(2);
  if (r.length < vy || r.length > by)
    throw new TypeError("Invalid program length for segwit address");
  const n = e[0] - Ey;
  if (n < my || n > wy)
    throw new TypeError("Invalid version for segwit address");
  if (e[1] !== r.length)
    throw new TypeError("Invalid script for segwit address");
  return console.warn(_y), Ay(r, n, t.bech32);
}
function Sy(e) {
  const t = N.Buffer.from(gy.decode(e));
  if (t.length < 21)
    throw new TypeError(e + " is too short");
  if (t.length > 21)
    throw new TypeError(e + " is too long");
  const r = t.readUInt8(0), n = t.slice(1);
  return { version: r, hash: n };
}
Ut.fromBase58Check = Sy;
function Oy(e) {
  let t, r;
  try {
    t = Mi.bech32.decode(e);
  } catch {
  }
  if (t) {
    if (r = t.words[0], r !== 0)
      throw new TypeError(e + " uses wrong encoding");
  } else if (t = Mi.bech32m.decode(e), r = t.words[0], r === 0)
    throw new TypeError(e + " uses wrong encoding");
  const n = Mi.bech32.fromWords(t.words.slice(1));
  return {
    version: r,
    prefix: t.prefix,
    data: N.Buffer.from(n)
  };
}
Ut.fromBech32 = Oy;
function bE(e, t) {
  (0, Cs.typeforce)(
    (0, Cs.tuple)(Cs.Hash160bit, Cs.UInt8),
    arguments
  );
  const r = N.Buffer.allocUnsafe(21);
  return r.writeUInt8(t, 0), e.copy(r, 1), gy.encode(r);
}
Ut.toBase58Check = bE;
function Ay(e, t, r) {
  const n = Mi.bech32.toWords(e);
  return n.unshift(t), t === 0 ? Mi.bech32.encode(r, n) : Mi.bech32m.encode(r, n);
}
Ut.toBech32 = Ay;
function vE(e, t) {
  t = t || dy.bitcoin;
  try {
    return _r.p2pkh({ output: e, network: t }).address;
  } catch {
  }
  try {
    return _r.p2sh({ output: e, network: t }).address;
  } catch {
  }
  try {
    return _r.p2wpkh({ output: e, network: t }).address;
  } catch {
  }
  try {
    return _r.p2wsh({ output: e, network: t }).address;
  } catch {
  }
  try {
    return _r.p2tr({ output: e, network: t }).address;
  } catch {
  }
  try {
    return gE(e, t);
  } catch {
  }
  throw new Error(yy.toASM(e) + " has no matching Address");
}
Ut.fromOutputScript = vE;
function wE(e, t) {
  t = t || dy.bitcoin;
  let r, n;
  try {
    r = Sy(e);
  } catch {
  }
  if (r) {
    if (r.version === t.pubKeyHash)
      return _r.p2pkh({ hash: r.hash }).output;
    if (r.version === t.scriptHash)
      return _r.p2sh({ hash: r.hash }).output;
  } else {
    try {
      n = Oy(e);
    } catch {
    }
    if (n) {
      if (n.prefix !== t.bech32)
        throw new Error(e + " has an invalid prefix");
      if (n.version === 0) {
        if (n.data.length === 20)
          return _r.p2wpkh({ hash: n.data }).output;
        if (n.data.length === 32)
          return _r.p2wsh({ hash: n.data }).output;
      } else if (n.version === 1) {
        if (n.data.length === 32)
          return _r.p2tr({ pubkey: n.data }).output;
      } else if (n.version >= my && n.version <= wy && n.data.length >= vy && n.data.length <= by)
        return console.warn(_y), yy.compile([
          n.version + Ey,
          n.data
        ]);
    }
  }
  throw new Error(e + " has no matching Script");
}
Ut.toOutputScript = wE;
var Qa = {}, ef = {};
Object.defineProperty(ef, "__esModule", { value: !0 });
ef.fastMerkleRoot = void 0;
function mE(e, t) {
  if (!Array.isArray(e))
    throw TypeError("Expected values Array");
  if (typeof t != "function")
    throw TypeError("Expected digest Function");
  let r = e.length;
  const n = e.concat();
  for (; r > 1; ) {
    let i = 0;
    for (let o = 0; o < r; o += 2, ++i) {
      const s = n[o], a = o + 1 === r ? s : n[o + 1], f = N.Buffer.concat([s, a]);
      n[i] = t(f);
    }
    r = i;
  }
  return n[0];
}
ef.fastMerkleRoot = mE;
var Sn = {};
Object.defineProperty(Sn, "__esModule", { value: !0 });
Sn.Transaction = void 0;
const Je = nt, Pt = Ir, Ap = Ht, EE = Ht, Be = wt, { typeforce: pr } = Be;
function yr(e) {
  const t = e.length;
  return Je.varuint.encodingLength(t) + t;
}
function _E(e) {
  const t = e.length;
  return Je.varuint.encodingLength(t) + e.reduce((r, n) => r + yr(n), 0);
}
const an = N.Buffer.allocUnsafe(0), Tp = [], ec = N.Buffer.from(
  "0000000000000000000000000000000000000000000000000000000000000000",
  "hex"
), Ip = N.Buffer.from(
  "0000000000000000000000000000000000000000000000000000000000000001",
  "hex"
), SE = N.Buffer.from("ffffffffffffffff", "hex"), OE = {
  script: an,
  valueBuffer: SE
};
function AE(e) {
  return e.value !== void 0;
}
let fr = class Me {
  constructor() {
    this.version = 1, this.locktime = 0, this.ins = [], this.outs = [];
  }
  static fromBuffer(t, r) {
    const n = new Je.BufferReader(t), i = new Me();
    i.version = n.readInt32();
    const o = n.readUInt8(), s = n.readUInt8();
    let a = !1;
    o === Me.ADVANCED_TRANSACTION_MARKER && s === Me.ADVANCED_TRANSACTION_FLAG ? a = !0 : n.offset -= 2;
    const f = n.readVarInt();
    for (let h = 0; h < f; ++h)
      i.ins.push({
        hash: n.readSlice(32),
        index: n.readUInt32(),
        script: n.readVarSlice(),
        sequence: n.readUInt32(),
        witness: Tp
      });
    const l = n.readVarInt();
    for (let h = 0; h < l; ++h)
      i.outs.push({
        value: n.readUInt64(),
        script: n.readVarSlice()
      });
    if (a) {
      for (let h = 0; h < f; ++h)
        i.ins[h].witness = n.readVector();
      if (!i.hasWitnesses())
        throw new Error("Transaction has superfluous witness data");
    }
    if (i.locktime = n.readUInt32(), r)
      return i;
    if (n.offset !== t.length)
      throw new Error("Transaction has unexpected data");
    return i;
  }
  static fromHex(t) {
    return Me.fromBuffer(N.Buffer.from(t, "hex"), !1);
  }
  static isCoinbaseHash(t) {
    pr(Be.Hash256bit, t);
    for (let r = 0; r < 32; ++r)
      if (t[r] !== 0)
        return !1;
    return !0;
  }
  isCoinbase() {
    return this.ins.length === 1 && Me.isCoinbaseHash(this.ins[0].hash);
  }
  addInput(t, r, n, i) {
    return pr(
      Be.tuple(
        Be.Hash256bit,
        Be.UInt32,
        Be.maybe(Be.UInt32),
        Be.maybe(Be.Buffer)
      ),
      arguments
    ), Be.Null(n) && (n = Me.DEFAULT_SEQUENCE), this.ins.push({
      hash: t,
      index: r,
      script: i || an,
      sequence: n,
      witness: Tp
    }) - 1;
  }
  addOutput(t, r) {
    return pr(Be.tuple(Be.Buffer, Be.Satoshi), arguments), this.outs.push({
      script: t,
      value: r
    }) - 1;
  }
  hasWitnesses() {
    return this.ins.some((t) => t.witness.length !== 0);
  }
  weight() {
    const t = this.byteLength(!1), r = this.byteLength(!0);
    return t * 3 + r;
  }
  virtualSize() {
    return Math.ceil(this.weight() / 4);
  }
  byteLength(t = !0) {
    const r = t && this.hasWitnesses();
    return (r ? 10 : 8) + Je.varuint.encodingLength(this.ins.length) + Je.varuint.encodingLength(this.outs.length) + this.ins.reduce((n, i) => n + 40 + yr(i.script), 0) + this.outs.reduce((n, i) => n + 8 + yr(i.script), 0) + (r ? this.ins.reduce((n, i) => n + _E(i.witness), 0) : 0);
  }
  clone() {
    const t = new Me();
    return t.version = this.version, t.locktime = this.locktime, t.ins = this.ins.map((r) => ({
      hash: r.hash,
      index: r.index,
      script: r.script,
      sequence: r.sequence,
      witness: r.witness
    })), t.outs = this.outs.map((r) => ({
      script: r.script,
      value: r.value
    })), t;
  }
  /**
   * Hash transaction for signing a specific input.
   *
   * Bitcoin uses a different hash for each signed transaction input.
   * This method copies the transaction, makes the necessary changes based on the
   * hashType, and then hashes the result.
   * This hash can then be used to sign the provided transaction input.
   */
  hashForSignature(t, r, n) {
    if (pr(
      Be.tuple(
        Be.UInt32,
        Be.Buffer,
        /* types.UInt8 */
        Be.Number
      ),
      arguments
    ), t >= this.ins.length)
      return Ip;
    const i = Ap.compile(
      Ap.decompile(r).filter((a) => a !== EE.OPS.OP_CODESEPARATOR)
    ), o = this.clone();
    if ((n & 31) === Me.SIGHASH_NONE)
      o.outs = [], o.ins.forEach((a, f) => {
        f !== t && (a.sequence = 0);
      });
    else if ((n & 31) === Me.SIGHASH_SINGLE) {
      if (t >= this.outs.length)
        return Ip;
      o.outs.length = t + 1;
      for (let a = 0; a < t; a++)
        o.outs[a] = OE;
      o.ins.forEach((a, f) => {
        f !== t && (a.sequence = 0);
      });
    }
    n & Me.SIGHASH_ANYONECANPAY ? (o.ins = [o.ins[t]], o.ins[0].script = i) : (o.ins.forEach((a) => {
      a.script = an;
    }), o.ins[t].script = i);
    const s = N.Buffer.allocUnsafe(o.byteLength(!1) + 4);
    return s.writeInt32LE(n, s.length - 4), o.__toBuffer(s, 0, !1), Pt.hash256(s);
  }
  hashForWitnessV1(t, r, n, i, o, s) {
    if (pr(
      Be.tuple(
        Be.UInt32,
        pr.arrayOf(Be.Buffer),
        pr.arrayOf(Be.Satoshi),
        Be.UInt32
      ),
      arguments
    ), n.length !== this.ins.length || r.length !== this.ins.length)
      throw new Error("Must supply prevout script and value for all inputs");
    const a = i === Me.SIGHASH_DEFAULT ? Me.SIGHASH_ALL : i & Me.SIGHASH_OUTPUT_MASK, l = (i & Me.SIGHASH_INPUT_MASK) === Me.SIGHASH_ANYONECANPAY, h = a === Me.SIGHASH_NONE, y = a === Me.SIGHASH_SINGLE;
    let v = an, g = an, m = an, E = an, O = an;
    if (!l) {
      let M = Je.BufferWriter.withCapacity(
        36 * this.ins.length
      );
      this.ins.forEach((k) => {
        M.writeSlice(k.hash), M.writeUInt32(k.index);
      }), v = Pt.sha256(M.end()), M = Je.BufferWriter.withCapacity(
        8 * this.ins.length
      ), n.forEach((k) => M.writeUInt64(k)), g = Pt.sha256(M.end()), M = Je.BufferWriter.withCapacity(
        r.map(yr).reduce((k, _) => k + _)
      ), r.forEach(
        (k) => M.writeVarSlice(k)
      ), m = Pt.sha256(M.end()), M = Je.BufferWriter.withCapacity(
        4 * this.ins.length
      ), this.ins.forEach((k) => M.writeUInt32(k.sequence)), E = Pt.sha256(M.end());
    }
    if (h || y) {
      if (y && t < this.outs.length) {
        const M = this.outs[t], k = Je.BufferWriter.withCapacity(
          8 + yr(M.script)
        );
        k.writeUInt64(M.value), k.writeVarSlice(M.script), O = Pt.sha256(k.end());
      }
    } else {
      const M = this.outs.map((_) => 8 + yr(_.script)).reduce((_, L) => _ + L), k = Je.BufferWriter.withCapacity(M);
      this.outs.forEach((_) => {
        k.writeUInt64(_.value), k.writeVarSlice(_.script);
      }), O = Pt.sha256(k.end());
    }
    const x = (o ? 2 : 0) + (s ? 1 : 0), U = 174 - (l ? 49 : 0) - (h ? 32 : 0) + (s ? 32 : 0) + (o ? 37 : 0), H = Je.BufferWriter.withCapacity(U);
    if (H.writeUInt8(i), H.writeInt32(this.version), H.writeUInt32(this.locktime), H.writeSlice(v), H.writeSlice(g), H.writeSlice(m), H.writeSlice(E), h || y || H.writeSlice(O), H.writeUInt8(x), l) {
      const M = this.ins[t];
      H.writeSlice(M.hash), H.writeUInt32(M.index), H.writeUInt64(n[t]), H.writeVarSlice(r[t]), H.writeUInt32(M.sequence);
    } else
      H.writeUInt32(t);
    if (s) {
      const M = Je.BufferWriter.withCapacity(
        yr(s)
      );
      M.writeVarSlice(s), H.writeSlice(Pt.sha256(M.end()));
    }
    return y && H.writeSlice(O), o && (H.writeSlice(o), H.writeUInt8(0), H.writeUInt32(4294967295)), Pt.taggedHash(
      "TapSighash",
      N.Buffer.concat([N.Buffer.from([0]), H.end()])
    );
  }
  hashForWitnessV0(t, r, n, i) {
    pr(
      Be.tuple(Be.UInt32, Be.Buffer, Be.Satoshi, Be.UInt32),
      arguments
    );
    let o = N.Buffer.from([]), s, a = ec, f = ec, l = ec;
    if (i & Me.SIGHASH_ANYONECANPAY || (o = N.Buffer.allocUnsafe(36 * this.ins.length), s = new Je.BufferWriter(o, 0), this.ins.forEach((y) => {
      s.writeSlice(y.hash), s.writeUInt32(y.index);
    }), f = Pt.hash256(o)), !(i & Me.SIGHASH_ANYONECANPAY) && (i & 31) !== Me.SIGHASH_SINGLE && (i & 31) !== Me.SIGHASH_NONE && (o = N.Buffer.allocUnsafe(4 * this.ins.length), s = new Je.BufferWriter(o, 0), this.ins.forEach((y) => {
      s.writeUInt32(y.sequence);
    }), l = Pt.hash256(o)), (i & 31) !== Me.SIGHASH_SINGLE && (i & 31) !== Me.SIGHASH_NONE) {
      const y = this.outs.reduce((v, g) => v + 8 + yr(g.script), 0);
      o = N.Buffer.allocUnsafe(y), s = new Je.BufferWriter(o, 0), this.outs.forEach((v) => {
        s.writeUInt64(v.value), s.writeVarSlice(v.script);
      }), a = Pt.hash256(o);
    } else if ((i & 31) === Me.SIGHASH_SINGLE && t < this.outs.length) {
      const y = this.outs[t];
      o = N.Buffer.allocUnsafe(8 + yr(y.script)), s = new Je.BufferWriter(o, 0), s.writeUInt64(y.value), s.writeVarSlice(y.script), a = Pt.hash256(o);
    }
    o = N.Buffer.allocUnsafe(156 + yr(r)), s = new Je.BufferWriter(o, 0);
    const h = this.ins[t];
    return s.writeInt32(this.version), s.writeSlice(f), s.writeSlice(l), s.writeSlice(h.hash), s.writeUInt32(h.index), s.writeVarSlice(r), s.writeUInt64(n), s.writeUInt32(h.sequence), s.writeSlice(a), s.writeUInt32(this.locktime), s.writeUInt32(i), Pt.hash256(o);
  }
  getHash(t) {
    return t && this.isCoinbase() ? N.Buffer.alloc(32, 0) : Pt.hash256(this.__toBuffer(void 0, void 0, t));
  }
  getId() {
    return (0, Je.reverseBuffer)(this.getHash(!1)).toString(
      "hex"
    );
  }
  toBuffer(t, r) {
    return this.__toBuffer(t, r, !0);
  }
  toHex() {
    return this.toBuffer(void 0, void 0).toString("hex");
  }
  setInputScript(t, r) {
    pr(Be.tuple(Be.Number, Be.Buffer), arguments), this.ins[t].script = r;
  }
  setWitness(t, r) {
    pr(Be.tuple(Be.Number, [Be.Buffer]), arguments), this.ins[t].witness = r;
  }
  __toBuffer(t, r, n = !1) {
    t || (t = N.Buffer.allocUnsafe(this.byteLength(n)));
    const i = new Je.BufferWriter(
      t,
      r || 0
    );
    i.writeInt32(this.version);
    const o = n && this.hasWitnesses();
    return o && (i.writeUInt8(Me.ADVANCED_TRANSACTION_MARKER), i.writeUInt8(Me.ADVANCED_TRANSACTION_FLAG)), i.writeVarInt(this.ins.length), this.ins.forEach((s) => {
      i.writeSlice(s.hash), i.writeUInt32(s.index), i.writeVarSlice(s.script), i.writeUInt32(s.sequence);
    }), i.writeVarInt(this.outs.length), this.outs.forEach((s) => {
      AE(s) ? i.writeUInt64(s.value) : i.writeSlice(s.valueBuffer), i.writeVarSlice(s.script);
    }), o && this.ins.forEach((s) => {
      i.writeVector(s.witness);
    }), i.writeUInt32(this.locktime), r !== void 0 ? t.slice(r, i.offset) : t;
  }
};
Sn.Transaction = fr;
fr.DEFAULT_SEQUENCE = 4294967295;
fr.SIGHASH_DEFAULT = 0;
fr.SIGHASH_ALL = 1;
fr.SIGHASH_NONE = 2;
fr.SIGHASH_SINGLE = 3;
fr.SIGHASH_ANYONECANPAY = 128;
fr.SIGHASH_OUTPUT_MASK = 3;
fr.SIGHASH_INPUT_MASK = 128;
fr.ADVANCED_TRANSACTION_MARKER = 0;
fr.ADVANCED_TRANSACTION_FLAG = 1;
Object.defineProperty(Qa, "__esModule", { value: !0 });
Qa.Block = void 0;
const Tn = nt, tc = Ir, TE = ef, IE = Sn, Ty = wt, { typeforce: PE } = Ty, rc = new TypeError(
  "Cannot compute merkle root for zero transactions"
), Pp = new TypeError(
  "Cannot compute witness commit for non-segwit block"
);
let xE = class Bi {
  constructor() {
    this.version = 1, this.prevHash = void 0, this.merkleRoot = void 0, this.timestamp = 0, this.witnessCommit = void 0, this.bits = 0, this.nonce = 0, this.transactions = void 0;
  }
  static fromBuffer(t) {
    if (t.length < 80)
      throw new Error("Buffer too small (< 80 bytes)");
    const r = new Tn.BufferReader(t), n = new Bi();
    if (n.version = r.readInt32(), n.prevHash = r.readSlice(32), n.merkleRoot = r.readSlice(32), n.timestamp = r.readUInt32(), n.bits = r.readUInt32(), n.nonce = r.readUInt32(), t.length === 80)
      return n;
    const i = () => {
      const a = IE.Transaction.fromBuffer(
        r.buffer.slice(r.offset),
        !0
      );
      return r.offset += a.byteLength(), a;
    }, o = r.readVarInt();
    n.transactions = [];
    for (let a = 0; a < o; ++a) {
      const f = i();
      n.transactions.push(f);
    }
    const s = n.getWitnessCommit();
    return s && (n.witnessCommit = s), n;
  }
  static fromHex(t) {
    return Bi.fromBuffer(N.Buffer.from(t, "hex"));
  }
  static calculateTarget(t) {
    const r = ((t & 4278190080) >> 24) - 3, n = t & 8388607, i = N.Buffer.alloc(32, 0);
    return i.writeUIntBE(n, 29 - r, 3), i;
  }
  static calculateMerkleRoot(t, r) {
    if (PE([{ getHash: Ty.Function }], t), t.length === 0)
      throw rc;
    if (r && !xp(t))
      throw Pp;
    const n = t.map(
      (o) => o.getHash(r)
    ), i = (0, TE.fastMerkleRoot)(n, tc.hash256);
    return r ? tc.hash256(
      N.Buffer.concat([i, t[0].ins[0].witness[0]])
    ) : i;
  }
  getWitnessCommit() {
    if (!xp(this.transactions))
      return null;
    const t = this.transactions[0].outs.filter(
      (n) => n.script.slice(0, 6).equals(N.Buffer.from("6a24aa21a9ed", "hex"))
    ).map((n) => n.script.slice(6, 38));
    if (t.length === 0)
      return null;
    const r = t[t.length - 1];
    return r instanceof N.Buffer && r.length === 32 ? r : null;
  }
  hasWitnessCommit() {
    return this.witnessCommit instanceof N.Buffer && this.witnessCommit.length === 32 || this.getWitnessCommit() !== null;
  }
  hasWitness() {
    return BE(this.transactions);
  }
  weight() {
    const t = this.byteLength(!1, !1), r = this.byteLength(!1, !0);
    return t * 3 + r;
  }
  byteLength(t, r = !0) {
    return t || !this.transactions ? 80 : 80 + Tn.varuint.encodingLength(this.transactions.length) + this.transactions.reduce((n, i) => n + i.byteLength(r), 0);
  }
  getHash() {
    return tc.hash256(this.toBuffer(!0));
  }
  getId() {
    return (0, Tn.reverseBuffer)(this.getHash()).toString("hex");
  }
  getUTCDate() {
    const t = /* @__PURE__ */ new Date(0);
    return t.setUTCSeconds(this.timestamp), t;
  }
  // TODO: buffer, offset compatibility
  toBuffer(t) {
    const r = N.Buffer.allocUnsafe(this.byteLength(t)), n = new Tn.BufferWriter(r);
    return n.writeInt32(this.version), n.writeSlice(this.prevHash), n.writeSlice(this.merkleRoot), n.writeUInt32(this.timestamp), n.writeUInt32(this.bits), n.writeUInt32(this.nonce), t || !this.transactions || (Tn.varuint.encode(
      this.transactions.length,
      r,
      n.offset
    ), n.offset += Tn.varuint.encode.bytes, this.transactions.forEach((i) => {
      const o = i.byteLength();
      i.toBuffer(r, n.offset), n.offset += o;
    })), r;
  }
  toHex(t) {
    return this.toBuffer(t).toString("hex");
  }
  checkTxRoots() {
    const t = this.hasWitnessCommit();
    return !t && this.hasWitness() ? !1 : this.__checkMerkleRoot() && (t ? this.__checkWitnessCommit() : !0);
  }
  checkProofOfWork() {
    const t = (0, Tn.reverseBuffer)(this.getHash()), r = Bi.calculateTarget(this.bits);
    return t.compare(r) <= 0;
  }
  __checkMerkleRoot() {
    if (!this.transactions)
      throw rc;
    const t = Bi.calculateMerkleRoot(this.transactions);
    return this.merkleRoot.compare(t) === 0;
  }
  __checkWitnessCommit() {
    if (!this.transactions)
      throw rc;
    if (!this.hasWitnessCommit())
      throw Pp;
    const t = Bi.calculateMerkleRoot(
      this.transactions,
      !0
    );
    return this.witnessCommit.compare(t) === 0;
  }
};
Qa.Block = xE;
function xp(e) {
  return e instanceof Array && e[0] && e[0].ins && e[0].ins instanceof Array && e[0].ins[0] && e[0].ins[0].witness && e[0].ins[0].witness instanceof Array && e[0].ins[0].witness.length > 0;
}
function BE(e) {
  return e instanceof Array && e.some(
    (t) => typeof t == "object" && t.ins instanceof Array && t.ins.some(
      (r) => typeof r == "object" && r.witness instanceof Array && r.witness.length > 0
    )
  );
}
var tf = {}, vl = {}, wl = {}, ml = {}, ts = {}, Jn = {}, dt = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), function(t) {
    t[t.UNSIGNED_TX = 0] = "UNSIGNED_TX", t[t.GLOBAL_XPUB = 1] = "GLOBAL_XPUB";
  }(e.GlobalTypes || (e.GlobalTypes = {})), e.GLOBAL_TYPE_NAMES = ["unsignedTx", "globalXpub"], function(t) {
    t[t.NON_WITNESS_UTXO = 0] = "NON_WITNESS_UTXO", t[t.WITNESS_UTXO = 1] = "WITNESS_UTXO", t[t.PARTIAL_SIG = 2] = "PARTIAL_SIG", t[t.SIGHASH_TYPE = 3] = "SIGHASH_TYPE", t[t.REDEEM_SCRIPT = 4] = "REDEEM_SCRIPT", t[t.WITNESS_SCRIPT = 5] = "WITNESS_SCRIPT", t[t.BIP32_DERIVATION = 6] = "BIP32_DERIVATION", t[t.FINAL_SCRIPTSIG = 7] = "FINAL_SCRIPTSIG", t[t.FINAL_SCRIPTWITNESS = 8] = "FINAL_SCRIPTWITNESS", t[t.POR_COMMITMENT = 9] = "POR_COMMITMENT", t[t.TAP_KEY_SIG = 19] = "TAP_KEY_SIG", t[t.TAP_SCRIPT_SIG = 20] = "TAP_SCRIPT_SIG", t[t.TAP_LEAF_SCRIPT = 21] = "TAP_LEAF_SCRIPT", t[t.TAP_BIP32_DERIVATION = 22] = "TAP_BIP32_DERIVATION", t[t.TAP_INTERNAL_KEY = 23] = "TAP_INTERNAL_KEY", t[t.TAP_MERKLE_ROOT = 24] = "TAP_MERKLE_ROOT";
  }(e.InputTypes || (e.InputTypes = {})), e.INPUT_TYPE_NAMES = [
    "nonWitnessUtxo",
    "witnessUtxo",
    "partialSig",
    "sighashType",
    "redeemScript",
    "witnessScript",
    "bip32Derivation",
    "finalScriptSig",
    "finalScriptWitness",
    "porCommitment",
    "tapKeySig",
    "tapScriptSig",
    "tapLeafScript",
    "tapBip32Derivation",
    "tapInternalKey",
    "tapMerkleRoot"
  ], function(t) {
    t[t.REDEEM_SCRIPT = 0] = "REDEEM_SCRIPT", t[t.WITNESS_SCRIPT = 1] = "WITNESS_SCRIPT", t[t.BIP32_DERIVATION = 2] = "BIP32_DERIVATION", t[t.TAP_INTERNAL_KEY = 5] = "TAP_INTERNAL_KEY", t[t.TAP_TREE = 6] = "TAP_TREE", t[t.TAP_BIP32_DERIVATION = 7] = "TAP_BIP32_DERIVATION";
  }(e.OutputTypes || (e.OutputTypes = {})), e.OUTPUT_TYPE_NAMES = [
    "redeemScript",
    "witnessScript",
    "bip32Derivation",
    "tapInternalKey",
    "tapTree",
    "tapBip32Derivation"
  ];
})(dt);
var Qn = {};
Object.defineProperty(Qn, "__esModule", { value: !0 });
const Iy = dt, kE = (e) => [...Array(e).keys()];
function RE(e) {
  if (e.key[0] !== Iy.GlobalTypes.GLOBAL_XPUB)
    throw new Error(
      "Decode Error: could not decode globalXpub with key 0x" + e.key.toString("hex")
    );
  if (e.key.length !== 79 || ![2, 3].includes(e.key[46]))
    throw new Error(
      "Decode Error: globalXpub has invalid extended pubkey in key 0x" + e.key.toString("hex")
    );
  if (e.value.length / 4 % 1 !== 0)
    throw new Error(
      "Decode Error: Global GLOBAL_XPUB value length should be multiple of 4"
    );
  const t = e.key.slice(1), r = {
    masterFingerprint: e.value.slice(0, 4),
    extendedPubkey: t,
    path: "m"
  };
  for (const n of kE(e.value.length / 4 - 1)) {
    const i = e.value.readUInt32LE(n * 4 + 4), o = !!(i & 2147483648), s = i & 2147483647;
    r.path += "/" + s.toString(10) + (o ? "'" : "");
  }
  return r;
}
Qn.decode = RE;
function NE(e) {
  const t = N.Buffer.from([Iy.GlobalTypes.GLOBAL_XPUB]), r = N.Buffer.concat([t, e.extendedPubkey]), n = e.path.split("/"), i = N.Buffer.allocUnsafe(n.length * 4);
  e.masterFingerprint.copy(i, 0);
  let o = 4;
  return n.slice(1).forEach((s) => {
    const a = s.slice(-1) === "'";
    let f = 2147483647 & parseInt(a ? s.slice(0, -1) : s, 10);
    a && (f += 2147483648), i.writeUInt32LE(f, o), o += 4;
  }), {
    key: r,
    value: i
  };
}
Qn.encode = NE;
Qn.expected = "{ masterFingerprint: Buffer; extendedPubkey: Buffer; path: string; }";
function UE(e) {
  const t = e.extendedPubkey, r = e.masterFingerprint, n = e.path;
  return N.Buffer.isBuffer(t) && t.length === 78 && [2, 3].indexOf(t[45]) > -1 && N.Buffer.isBuffer(r) && r.length === 4 && typeof n == "string" && !!n.match(/^m(\/\d+'?)*$/);
}
Qn.check = UE;
function CE(e, t, r) {
  const n = t.extendedPubkey.toString("hex");
  return r.has(n) ? !1 : (r.add(n), e.filter((i) => i.extendedPubkey.equals(t.extendedPubkey)).length === 0);
}
Qn.canAddToArray = CE;
var El = {};
Object.defineProperty(El, "__esModule", { value: !0 });
const $E = dt;
function HE(e) {
  return {
    key: N.Buffer.from([$E.GlobalTypes.UNSIGNED_TX]),
    value: e.toBuffer()
  };
}
El.encode = HE;
var ei = {};
Object.defineProperty(ei, "__esModule", { value: !0 });
const Py = dt;
function LE(e) {
  if (e.key[0] !== Py.InputTypes.FINAL_SCRIPTSIG)
    throw new Error(
      "Decode Error: could not decode finalScriptSig with key 0x" + e.key.toString("hex")
    );
  return e.value;
}
ei.decode = LE;
function DE(e) {
  return {
    key: N.Buffer.from([Py.InputTypes.FINAL_SCRIPTSIG]),
    value: e
  };
}
ei.encode = DE;
ei.expected = "Buffer";
function ME(e) {
  return N.Buffer.isBuffer(e);
}
ei.check = ME;
function FE(e, t) {
  return !!e && !!t && e.finalScriptSig === void 0;
}
ei.canAdd = FE;
var ti = {};
Object.defineProperty(ti, "__esModule", { value: !0 });
const xy = dt;
function jE(e) {
  if (e.key[0] !== xy.InputTypes.FINAL_SCRIPTWITNESS)
    throw new Error(
      "Decode Error: could not decode finalScriptWitness with key 0x" + e.key.toString("hex")
    );
  return e.value;
}
ti.decode = jE;
function KE(e) {
  return {
    key: N.Buffer.from([xy.InputTypes.FINAL_SCRIPTWITNESS]),
    value: e
  };
}
ti.encode = KE;
ti.expected = "Buffer";
function qE(e) {
  return N.Buffer.isBuffer(e);
}
ti.check = qE;
function GE(e, t) {
  return !!e && !!t && e.finalScriptWitness === void 0;
}
ti.canAdd = GE;
var ri = {};
Object.defineProperty(ri, "__esModule", { value: !0 });
const By = dt;
function VE(e) {
  if (e.key[0] !== By.InputTypes.NON_WITNESS_UTXO)
    throw new Error(
      "Decode Error: could not decode nonWitnessUtxo with key 0x" + e.key.toString("hex")
    );
  return e.value;
}
ri.decode = VE;
function WE(e) {
  return {
    key: N.Buffer.from([By.InputTypes.NON_WITNESS_UTXO]),
    value: e
  };
}
ri.encode = WE;
ri.expected = "Buffer";
function zE(e) {
  return N.Buffer.isBuffer(e);
}
ri.check = zE;
function XE(e, t) {
  return !!e && !!t && e.nonWitnessUtxo === void 0;
}
ri.canAdd = XE;
var ni = {};
Object.defineProperty(ni, "__esModule", { value: !0 });
const ky = dt;
function YE(e) {
  if (e.key[0] !== ky.InputTypes.PARTIAL_SIG)
    throw new Error(
      "Decode Error: could not decode partialSig with key 0x" + e.key.toString("hex")
    );
  if (!(e.key.length === 34 || e.key.length === 66) || ![2, 3, 4].includes(e.key[1]))
    throw new Error(
      "Decode Error: partialSig has invalid pubkey in key 0x" + e.key.toString("hex")
    );
  return {
    pubkey: e.key.slice(1),
    signature: e.value
  };
}
ni.decode = YE;
function ZE(e) {
  const t = N.Buffer.from([ky.InputTypes.PARTIAL_SIG]);
  return {
    key: N.Buffer.concat([t, e.pubkey]),
    value: e.signature
  };
}
ni.encode = ZE;
ni.expected = "{ pubkey: Buffer; signature: Buffer; }";
function JE(e) {
  return N.Buffer.isBuffer(e.pubkey) && N.Buffer.isBuffer(e.signature) && [33, 65].includes(e.pubkey.length) && [2, 3, 4].includes(e.pubkey[0]) && QE(e.signature);
}
ni.check = JE;
function QE(e) {
  if (!N.Buffer.isBuffer(e) || e.length < 9 || e[0] !== 48 || e.length !== e[1] + 3 || e[2] !== 2)
    return !1;
  const t = e[3];
  if (t > 33 || t < 1 || e[3 + t + 1] !== 2)
    return !1;
  const r = e[3 + t + 2];
  return !(r > 33 || r < 1 || e.length !== 3 + t + 2 + r + 2);
}
function e_(e, t, r) {
  const n = t.pubkey.toString("hex");
  return r.has(n) ? !1 : (r.add(n), e.filter((i) => i.pubkey.equals(t.pubkey)).length === 0);
}
ni.canAddToArray = e_;
var ii = {};
Object.defineProperty(ii, "__esModule", { value: !0 });
const Ry = dt;
function t_(e) {
  if (e.key[0] !== Ry.InputTypes.POR_COMMITMENT)
    throw new Error(
      "Decode Error: could not decode porCommitment with key 0x" + e.key.toString("hex")
    );
  return e.value.toString("utf8");
}
ii.decode = t_;
function r_(e) {
  return {
    key: N.Buffer.from([Ry.InputTypes.POR_COMMITMENT]),
    value: N.Buffer.from(e, "utf8")
  };
}
ii.encode = r_;
ii.expected = "string";
function n_(e) {
  return typeof e == "string";
}
ii.check = n_;
function i_(e, t) {
  return !!e && !!t && e.porCommitment === void 0;
}
ii.canAdd = i_;
var oi = {};
Object.defineProperty(oi, "__esModule", { value: !0 });
const Ny = dt;
function o_(e) {
  if (e.key[0] !== Ny.InputTypes.SIGHASH_TYPE)
    throw new Error(
      "Decode Error: could not decode sighashType with key 0x" + e.key.toString("hex")
    );
  return e.value.readUInt32LE(0);
}
oi.decode = o_;
function s_(e) {
  const t = N.Buffer.from([Ny.InputTypes.SIGHASH_TYPE]), r = N.Buffer.allocUnsafe(4);
  return r.writeUInt32LE(e, 0), {
    key: t,
    value: r
  };
}
oi.encode = s_;
oi.expected = "number";
function a_(e) {
  return typeof e == "number";
}
oi.check = a_;
function f_(e, t) {
  return !!e && !!t && e.sighashType === void 0;
}
oi.canAdd = f_;
var si = {};
Object.defineProperty(si, "__esModule", { value: !0 });
const Uy = dt;
function c_(e) {
  if (e.key[0] !== Uy.InputTypes.TAP_KEY_SIG || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapKeySig with key 0x" + e.key.toString("hex")
    );
  if (!Cy(e.value))
    throw new Error(
      "Decode Error: tapKeySig not a valid 64-65-byte BIP340 signature"
    );
  return e.value;
}
si.decode = c_;
function u_(e) {
  return { key: N.Buffer.from([Uy.InputTypes.TAP_KEY_SIG]), value: e };
}
si.encode = u_;
si.expected = "Buffer";
function Cy(e) {
  return N.Buffer.isBuffer(e) && (e.length === 64 || e.length === 65);
}
si.check = Cy;
function l_(e, t) {
  return !!e && !!t && e.tapKeySig === void 0;
}
si.canAdd = l_;
var ai = {};
Object.defineProperty(ai, "__esModule", { value: !0 });
const $y = dt;
function h_(e) {
  if (e.key[0] !== $y.InputTypes.TAP_LEAF_SCRIPT)
    throw new Error(
      "Decode Error: could not decode tapLeafScript with key 0x" + e.key.toString("hex")
    );
  if ((e.key.length - 2) % 32 !== 0)
    throw new Error(
      "Decode Error: tapLeafScript has invalid control block in key 0x" + e.key.toString("hex")
    );
  const t = e.value[e.value.length - 1];
  if ((e.key[1] & 254) !== t)
    throw new Error(
      "Decode Error: tapLeafScript bad leaf version in key 0x" + e.key.toString("hex")
    );
  const r = e.value.slice(0, -1);
  return { controlBlock: e.key.slice(1), script: r, leafVersion: t };
}
ai.decode = h_;
function p_(e) {
  const t = N.Buffer.from([$y.InputTypes.TAP_LEAF_SCRIPT]), r = N.Buffer.from([e.leafVersion]);
  return {
    key: N.Buffer.concat([t, e.controlBlock]),
    value: N.Buffer.concat([e.script, r])
  };
}
ai.encode = p_;
ai.expected = "{ controlBlock: Buffer; leafVersion: number, script: Buffer; }";
function d_(e) {
  return N.Buffer.isBuffer(e.controlBlock) && (e.controlBlock.length - 1) % 32 === 0 && (e.controlBlock[0] & 254) === e.leafVersion && N.Buffer.isBuffer(e.script);
}
ai.check = d_;
function y_(e, t, r) {
  const n = t.controlBlock.toString("hex");
  return r.has(n) ? !1 : (r.add(n), e.filter((i) => i.controlBlock.equals(t.controlBlock)).length === 0);
}
ai.canAddToArray = y_;
var fi = {};
Object.defineProperty(fi, "__esModule", { value: !0 });
const Hy = dt;
function g_(e) {
  if (e.key[0] !== Hy.InputTypes.TAP_MERKLE_ROOT || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapMerkleRoot with key 0x" + e.key.toString("hex")
    );
  if (!Ly(e.value))
    throw new Error("Decode Error: tapMerkleRoot not a 32-byte hash");
  return e.value;
}
fi.decode = g_;
function b_(e) {
  return { key: N.Buffer.from([Hy.InputTypes.TAP_MERKLE_ROOT]), value: e };
}
fi.encode = b_;
fi.expected = "Buffer";
function Ly(e) {
  return N.Buffer.isBuffer(e) && e.length === 32;
}
fi.check = Ly;
function v_(e, t) {
  return !!e && !!t && e.tapMerkleRoot === void 0;
}
fi.canAdd = v_;
var ci = {};
Object.defineProperty(ci, "__esModule", { value: !0 });
const Dy = dt;
function w_(e) {
  if (e.key[0] !== Dy.InputTypes.TAP_SCRIPT_SIG)
    throw new Error(
      "Decode Error: could not decode tapScriptSig with key 0x" + e.key.toString("hex")
    );
  if (e.key.length !== 65)
    throw new Error(
      "Decode Error: tapScriptSig has invalid key 0x" + e.key.toString("hex")
    );
  if (e.value.length !== 64 && e.value.length !== 65)
    throw new Error(
      "Decode Error: tapScriptSig has invalid signature in key 0x" + e.key.toString("hex")
    );
  const t = e.key.slice(1, 33), r = e.key.slice(33);
  return {
    pubkey: t,
    leafHash: r,
    signature: e.value
  };
}
ci.decode = w_;
function m_(e) {
  const t = N.Buffer.from([Dy.InputTypes.TAP_SCRIPT_SIG]);
  return {
    key: N.Buffer.concat([t, e.pubkey, e.leafHash]),
    value: e.signature
  };
}
ci.encode = m_;
ci.expected = "{ pubkey: Buffer; leafHash: Buffer; signature: Buffer; }";
function E_(e) {
  return N.Buffer.isBuffer(e.pubkey) && N.Buffer.isBuffer(e.leafHash) && N.Buffer.isBuffer(e.signature) && e.pubkey.length === 32 && e.leafHash.length === 32 && (e.signature.length === 64 || e.signature.length === 65);
}
ci.check = E_;
function __(e, t, r) {
  const n = t.pubkey.toString("hex") + t.leafHash.toString("hex");
  return r.has(n) ? !1 : (r.add(n), e.filter(
    (i) => i.pubkey.equals(t.pubkey) && i.leafHash.equals(t.leafHash)
  ).length === 0);
}
ci.canAddToArray = __;
var ui = {}, Pr = {}, cr = {};
Object.defineProperty(cr, "__esModule", { value: !0 });
const S_ = 9007199254740991;
function _l(e) {
  if (e < 0 || e > S_ || e % 1 !== 0)
    throw new RangeError("value out of range");
}
function Io(e, t, r) {
  if (_l(e), t || (t = N.Buffer.allocUnsafe(My(e))), !N.Buffer.isBuffer(t))
    throw new TypeError("buffer must be a Buffer instance");
  return r || (r = 0), e < 253 ? (t.writeUInt8(e, r), Object.assign(Io, { bytes: 1 })) : e <= 65535 ? (t.writeUInt8(253, r), t.writeUInt16LE(e, r + 1), Object.assign(Io, { bytes: 3 })) : e <= 4294967295 ? (t.writeUInt8(254, r), t.writeUInt32LE(e, r + 1), Object.assign(Io, { bytes: 5 })) : (t.writeUInt8(255, r), t.writeUInt32LE(e >>> 0, r + 1), t.writeUInt32LE(e / 4294967296 | 0, r + 5), Object.assign(Io, { bytes: 9 })), t;
}
cr.encode = Io;
function Po(e, t) {
  if (!N.Buffer.isBuffer(e))
    throw new TypeError("buffer must be a Buffer instance");
  t || (t = 0);
  const r = e.readUInt8(t);
  if (r < 253)
    return Object.assign(Po, { bytes: 1 }), r;
  if (r === 253)
    return Object.assign(Po, { bytes: 3 }), e.readUInt16LE(t + 1);
  if (r === 254)
    return Object.assign(Po, { bytes: 5 }), e.readUInt32LE(t + 1);
  {
    Object.assign(Po, { bytes: 9 });
    const n = e.readUInt32LE(t + 1), o = e.readUInt32LE(t + 5) * 4294967296 + n;
    return _l(o), o;
  }
}
cr.decode = Po;
function My(e) {
  return _l(e), e < 253 ? 1 : e <= 65535 ? 3 : e <= 4294967295 ? 5 : 9;
}
cr.encodingLength = My;
Object.defineProperty(Pr, "__esModule", { value: !0 });
const $s = cr;
Pr.range = (e) => [...Array(e).keys()];
function O_(e) {
  if (e.length < 1)
    return e;
  let t = e.length - 1, r = 0;
  for (let n = 0; n < e.length / 2; n++)
    r = e[n], e[n] = e[t], e[t] = r, t--;
  return e;
}
Pr.reverseBuffer = O_;
function A_(e) {
  const t = e.map(Fy);
  return t.push(N.Buffer.from([0])), N.Buffer.concat(t);
}
Pr.keyValsToBuffer = A_;
function Fy(e) {
  const t = e.key.length, r = e.value.length, n = $s.encodingLength(t), i = $s.encodingLength(r), o = N.Buffer.allocUnsafe(
    n + t + i + r
  );
  return $s.encode(t, o, 0), e.key.copy(o, n), $s.encode(r, o, n + t), e.value.copy(o, n + t + i), o;
}
Pr.keyValToBuffer = Fy;
function jy(e, t) {
  if (typeof e != "number")
    throw new Error("cannot write a non-number as a number");
  if (e < 0)
    throw new Error("specified a negative value for writing an unsigned value");
  if (e > t)
    throw new Error("RangeError: value out of range");
  if (Math.floor(e) !== e)
    throw new Error("value has a fractional component");
}
function T_(e, t) {
  const r = e.readUInt32LE(t);
  let n = e.readUInt32LE(t + 4);
  return n *= 4294967296, jy(n + r, 9007199254740991), n + r;
}
Pr.readUInt64LE = T_;
function I_(e, t, r) {
  return jy(t, 9007199254740991), e.writeInt32LE(t & -1, r), e.writeUInt32LE(Math.floor(t / 4294967296), r + 4), r + 8;
}
Pr.writeUInt64LE = I_;
Object.defineProperty(ui, "__esModule", { value: !0 });
const Ky = dt, qy = Pr, da = cr;
function P_(e) {
  if (e.key[0] !== Ky.InputTypes.WITNESS_UTXO)
    throw new Error(
      "Decode Error: could not decode witnessUtxo with key 0x" + e.key.toString("hex")
    );
  const t = qy.readUInt64LE(e.value, 0);
  let r = 8;
  const n = da.decode(e.value, r);
  r += da.encodingLength(n);
  const i = e.value.slice(r);
  if (i.length !== n)
    throw new Error("Decode Error: WITNESS_UTXO script is not proper length");
  return {
    script: i,
    value: t
  };
}
ui.decode = P_;
function x_(e) {
  const { script: t, value: r } = e, n = da.encodingLength(t.length), i = N.Buffer.allocUnsafe(8 + n + t.length);
  return qy.writeUInt64LE(i, r, 0), da.encode(t.length, i, 8), t.copy(i, 8 + n), {
    key: N.Buffer.from([Ky.InputTypes.WITNESS_UTXO]),
    value: i
  };
}
ui.encode = x_;
ui.expected = "{ script: Buffer; value: number; }";
function B_(e) {
  return N.Buffer.isBuffer(e.script) && typeof e.value == "number";
}
ui.check = B_;
function k_(e, t) {
  return !!e && !!t && e.witnessUtxo === void 0;
}
ui.canAdd = k_;
var li = {};
Object.defineProperty(li, "__esModule", { value: !0 });
const Gy = dt, bu = cr;
function R_(e) {
  if (e.key[0] !== Gy.OutputTypes.TAP_TREE || e.key.length !== 1)
    throw new Error(
      "Decode Error: could not decode tapTree with key 0x" + e.key.toString("hex")
    );
  let t = 0;
  const r = [];
  for (; t < e.value.length; ) {
    const n = e.value[t++], i = e.value[t++], o = bu.decode(e.value, t);
    t += bu.encodingLength(o), r.push({
      depth: n,
      leafVersion: i,
      script: e.value.slice(t, t + o)
    }), t += o;
  }
  return { leaves: r };
}
li.decode = R_;
function N_(e) {
  const t = N.Buffer.from([Gy.OutputTypes.TAP_TREE]), r = [].concat(
    ...e.leaves.map((n) => [
      N.Buffer.of(n.depth, n.leafVersion),
      bu.encode(n.script.length),
      n.script
    ])
  );
  return {
    key: t,
    value: N.Buffer.concat(r)
  };
}
li.encode = N_;
li.expected = "{ leaves: [{ depth: number; leafVersion: number, script: Buffer; }] }";
function U_(e) {
  return Array.isArray(e.leaves) && e.leaves.every(
    (t) => t.depth >= 0 && t.depth <= 128 && (t.leafVersion & 254) === t.leafVersion && N.Buffer.isBuffer(t.script)
  );
}
li.check = U_;
function C_(e, t) {
  return !!e && !!t && e.tapTree === void 0;
}
li.canAdd = C_;
var rf = {};
Object.defineProperty(rf, "__esModule", { value: !0 });
const $_ = (e) => [...Array(e).keys()], H_ = (e) => e.length === 33 && [2, 3].includes(e[0]) || e.length === 65 && e[0] === 4;
function L_(e, t = H_) {
  function r(a) {
    if (a.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode bip32Derivation with key 0x" + a.key.toString("hex")
      );
    const f = a.key.slice(1);
    if (!t(f))
      throw new Error(
        "Decode Error: bip32Derivation has invalid pubkey in key 0x" + a.key.toString("hex")
      );
    if (a.value.length / 4 % 1 !== 0)
      throw new Error(
        "Decode Error: Input BIP32_DERIVATION value length should be multiple of 4"
      );
    const l = {
      masterFingerprint: a.value.slice(0, 4),
      pubkey: f,
      path: "m"
    };
    for (const h of $_(a.value.length / 4 - 1)) {
      const y = a.value.readUInt32LE(h * 4 + 4), v = !!(y & 2147483648), g = y & 2147483647;
      l.path += "/" + g.toString(10) + (v ? "'" : "");
    }
    return l;
  }
  function n(a) {
    const f = N.Buffer.from([e]), l = N.Buffer.concat([f, a.pubkey]), h = a.path.split("/"), y = N.Buffer.allocUnsafe(h.length * 4);
    a.masterFingerprint.copy(y, 0);
    let v = 4;
    return h.slice(1).forEach((g) => {
      const m = g.slice(-1) === "'";
      let E = 2147483647 & parseInt(m ? g.slice(0, -1) : g, 10);
      m && (E += 2147483648), y.writeUInt32LE(E, v), v += 4;
    }), {
      key: l,
      value: y
    };
  }
  const i = "{ masterFingerprint: Buffer; pubkey: Buffer; path: string; }";
  function o(a) {
    return N.Buffer.isBuffer(a.pubkey) && N.Buffer.isBuffer(a.masterFingerprint) && typeof a.path == "string" && t(a.pubkey) && a.masterFingerprint.length === 4;
  }
  function s(a, f, l) {
    const h = f.pubkey.toString("hex");
    return l.has(h) ? !1 : (l.add(h), a.filter((y) => y.pubkey.equals(f.pubkey)).length === 0);
  }
  return {
    decode: r,
    encode: n,
    check: o,
    expected: i,
    canAddToArray: s
  };
}
rf.makeConverter = L_;
var Sl = {};
Object.defineProperty(Sl, "__esModule", { value: !0 });
function D_(e) {
  return t;
  function t(r) {
    let n;
    if (e.includes(r.key[0]) && (n = r.key.slice(1), !(n.length === 33 || n.length === 65) || ![2, 3, 4].includes(n[0])))
      throw new Error(
        "Format Error: invalid pubkey in key 0x" + r.key.toString("hex")
      );
    return n;
  }
}
Sl.makeChecker = D_;
var Ol = {};
Object.defineProperty(Ol, "__esModule", { value: !0 });
function M_(e) {
  function t(s) {
    if (s.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode redeemScript with key 0x" + s.key.toString("hex")
      );
    return s.value;
  }
  function r(s) {
    return {
      key: N.Buffer.from([e]),
      value: s
    };
  }
  const n = "Buffer";
  function i(s) {
    return N.Buffer.isBuffer(s);
  }
  function o(s, a) {
    return !!s && !!a && s.redeemScript === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: i,
    expected: n,
    canAdd: o
  };
}
Ol.makeConverter = M_;
var Al = {};
Object.defineProperty(Al, "__esModule", { value: !0 });
const Hs = cr, F_ = rf, j_ = (e) => e.length === 32;
function K_(e) {
  const t = F_.makeConverter(e, j_);
  function r(s) {
    const a = Hs.decode(s.value), f = Hs.encodingLength(a), l = t.decode({
      key: s.key,
      value: s.value.slice(f + a * 32)
    }), h = new Array(a);
    for (let y = 0, v = f; y < a; y++, v += 32)
      h[y] = s.value.slice(v, v + 32);
    return Object.assign({}, l, { leafHashes: h });
  }
  function n(s) {
    const a = t.encode(s), f = Hs.encodingLength(s.leafHashes.length), l = N.Buffer.allocUnsafe(f);
    Hs.encode(s.leafHashes.length, l);
    const h = N.Buffer.concat([l, ...s.leafHashes, a.value]);
    return Object.assign({}, a, { value: h });
  }
  const i = "{ masterFingerprint: Buffer; pubkey: Buffer; path: string; leafHashes: Buffer[]; }";
  function o(s) {
    return Array.isArray(s.leafHashes) && s.leafHashes.every(
      (a) => N.Buffer.isBuffer(a) && a.length === 32
    ) && t.check(s);
  }
  return {
    decode: r,
    encode: n,
    check: o,
    expected: i,
    canAddToArray: t.canAddToArray
  };
}
Al.makeConverter = K_;
var Tl = {};
Object.defineProperty(Tl, "__esModule", { value: !0 });
function q_(e) {
  function t(s) {
    if (s.key[0] !== e || s.key.length !== 1)
      throw new Error(
        "Decode Error: could not decode tapInternalKey with key 0x" + s.key.toString("hex")
      );
    if (s.value.length !== 32)
      throw new Error(
        "Decode Error: tapInternalKey not a 32-byte x-only pubkey"
      );
    return s.value;
  }
  function r(s) {
    return { key: N.Buffer.from([e]), value: s };
  }
  const n = "Buffer";
  function i(s) {
    return N.Buffer.isBuffer(s) && s.length === 32;
  }
  function o(s, a) {
    return !!s && !!a && s.tapInternalKey === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: i,
    expected: n,
    canAdd: o
  };
}
Tl.makeConverter = q_;
var Il = {};
Object.defineProperty(Il, "__esModule", { value: !0 });
function G_(e) {
  function t(s) {
    if (s.key[0] !== e)
      throw new Error(
        "Decode Error: could not decode witnessScript with key 0x" + s.key.toString("hex")
      );
    return s.value;
  }
  function r(s) {
    return {
      key: N.Buffer.from([e]),
      value: s
    };
  }
  const n = "Buffer";
  function i(s) {
    return N.Buffer.isBuffer(s);
  }
  function o(s, a) {
    return !!s && !!a && s.witnessScript === void 0;
  }
  return {
    decode: t,
    encode: r,
    check: i,
    expected: n,
    canAdd: o
  };
}
Il.makeConverter = G_;
Object.defineProperty(Jn, "__esModule", { value: !0 });
const Kt = dt, V_ = Qn, W_ = El, z_ = ei, X_ = ti, Y_ = ri, Z_ = ni, J_ = ii, Q_ = oi, eS = si, tS = ai, rS = fi, nS = ci, iS = ui, oS = li, Vy = rf, Pl = Sl, Wy = Ol, zy = Al, Xy = Tl, Yy = Il, sS = {
  unsignedTx: W_,
  globalXpub: V_,
  // pass an Array of key bytes that require pubkey beside the key
  checkPubkey: Pl.makeChecker([])
};
Jn.globals = sS;
const aS = {
  nonWitnessUtxo: Y_,
  partialSig: Z_,
  sighashType: Q_,
  finalScriptSig: z_,
  finalScriptWitness: X_,
  porCommitment: J_,
  witnessUtxo: iS,
  bip32Derivation: Vy.makeConverter(
    Kt.InputTypes.BIP32_DERIVATION
  ),
  redeemScript: Wy.makeConverter(
    Kt.InputTypes.REDEEM_SCRIPT
  ),
  witnessScript: Yy.makeConverter(
    Kt.InputTypes.WITNESS_SCRIPT
  ),
  checkPubkey: Pl.makeChecker([
    Kt.InputTypes.PARTIAL_SIG,
    Kt.InputTypes.BIP32_DERIVATION
  ]),
  tapKeySig: eS,
  tapScriptSig: nS,
  tapLeafScript: tS,
  tapBip32Derivation: zy.makeConverter(
    Kt.InputTypes.TAP_BIP32_DERIVATION
  ),
  tapInternalKey: Xy.makeConverter(
    Kt.InputTypes.TAP_INTERNAL_KEY
  ),
  tapMerkleRoot: rS
};
Jn.inputs = aS;
const fS = {
  bip32Derivation: Vy.makeConverter(
    Kt.OutputTypes.BIP32_DERIVATION
  ),
  redeemScript: Wy.makeConverter(
    Kt.OutputTypes.REDEEM_SCRIPT
  ),
  witnessScript: Yy.makeConverter(
    Kt.OutputTypes.WITNESS_SCRIPT
  ),
  checkPubkey: Pl.makeChecker([
    Kt.OutputTypes.BIP32_DERIVATION
  ]),
  tapBip32Derivation: zy.makeConverter(
    Kt.OutputTypes.TAP_BIP32_DERIVATION
  ),
  tapTree: oS,
  tapInternalKey: Xy.makeConverter(
    Kt.OutputTypes.TAP_INTERNAL_KEY
  )
};
Jn.outputs = fS;
Object.defineProperty(ts, "__esModule", { value: !0 });
const Ke = Jn, ya = Pr, Bp = cr, Se = dt;
function cS(e, t) {
  let r = 0;
  function n() {
    const O = Bp.decode(e, r);
    r += Bp.encodingLength(O);
    const x = e.slice(r, r + O);
    return r += O, x;
  }
  function i() {
    const O = e.readUInt32BE(r);
    return r += 4, O;
  }
  function o() {
    const O = e.readUInt8(r);
    return r += 1, O;
  }
  function s() {
    const O = n(), x = n();
    return {
      key: O,
      value: x
    };
  }
  function a() {
    if (r >= e.length)
      throw new Error("Format Error: Unexpected End of PSBT");
    const O = e.readUInt8(r) === 0;
    return O && r++, O;
  }
  if (i() !== 1886610036)
    throw new Error("Format Error: Invalid Magic Number");
  if (o() !== 255)
    throw new Error(
      "Format Error: Magic Number must be followed by 0xff separator"
    );
  const f = [], l = {};
  for (; !a(); ) {
    const O = s(), x = O.key.toString("hex");
    if (l[x])
      throw new Error(
        "Format Error: Keys must be unique for global keymap: key " + x
      );
    l[x] = 1, f.push(O);
  }
  const h = f.filter(
    (O) => O.key[0] === Se.GlobalTypes.UNSIGNED_TX
  );
  if (h.length !== 1)
    throw new Error("Format Error: Only one UNSIGNED_TX allowed");
  const y = t(h[0].value), { inputCount: v, outputCount: g } = y.getInputOutputCounts(), m = [], E = [];
  for (const O of ya.range(v)) {
    const x = {}, U = [];
    for (; !a(); ) {
      const H = s(), M = H.key.toString("hex");
      if (x[M])
        throw new Error(
          "Format Error: Keys must be unique for each input: input index " + O + " key " + M
        );
      x[M] = 1, U.push(H);
    }
    m.push(U);
  }
  for (const O of ya.range(g)) {
    const x = {}, U = [];
    for (; !a(); ) {
      const H = s(), M = H.key.toString("hex");
      if (x[M])
        throw new Error(
          "Format Error: Keys must be unique for each output: output index " + O + " key " + M
        );
      x[M] = 1, U.push(H);
    }
    E.push(U);
  }
  return Zy(y, {
    globalMapKeyVals: f,
    inputKeyVals: m,
    outputKeyVals: E
  });
}
ts.psbtFromBuffer = cS;
function gt(e, t, r) {
  if (!t.equals(N.Buffer.from([r])))
    throw new Error(
      `Format Error: Invalid ${e} key: ${t.toString("hex")}`
    );
}
ts.checkKeyBuffer = gt;
function Zy(e, { globalMapKeyVals: t, inputKeyVals: r, outputKeyVals: n }) {
  const i = {
    unsignedTx: e
  };
  let o = 0;
  for (const h of t)
    switch (h.key[0]) {
      case Se.GlobalTypes.UNSIGNED_TX:
        if (gt(
          "global",
          h.key,
          Se.GlobalTypes.UNSIGNED_TX
        ), o > 0)
          throw new Error("Format Error: GlobalMap has multiple UNSIGNED_TX");
        o++;
        break;
      case Se.GlobalTypes.GLOBAL_XPUB:
        i.globalXpub === void 0 && (i.globalXpub = []), i.globalXpub.push(Ke.globals.globalXpub.decode(h));
        break;
      default:
        i.unknownKeyVals || (i.unknownKeyVals = []), i.unknownKeyVals.push(h);
    }
  const s = r.length, a = n.length, f = [], l = [];
  for (const h of ya.range(s)) {
    const y = {};
    for (const v of r[h])
      switch (Ke.inputs.checkPubkey(v), v.key[0]) {
        case Se.InputTypes.NON_WITNESS_UTXO:
          if (gt(
            "input",
            v.key,
            Se.InputTypes.NON_WITNESS_UTXO
          ), y.nonWitnessUtxo !== void 0)
            throw new Error(
              "Format Error: Input has multiple NON_WITNESS_UTXO"
            );
          y.nonWitnessUtxo = Ke.inputs.nonWitnessUtxo.decode(v);
          break;
        case Se.InputTypes.WITNESS_UTXO:
          if (gt(
            "input",
            v.key,
            Se.InputTypes.WITNESS_UTXO
          ), y.witnessUtxo !== void 0)
            throw new Error("Format Error: Input has multiple WITNESS_UTXO");
          y.witnessUtxo = Ke.inputs.witnessUtxo.decode(v);
          break;
        case Se.InputTypes.PARTIAL_SIG:
          y.partialSig === void 0 && (y.partialSig = []), y.partialSig.push(Ke.inputs.partialSig.decode(v));
          break;
        case Se.InputTypes.SIGHASH_TYPE:
          if (gt(
            "input",
            v.key,
            Se.InputTypes.SIGHASH_TYPE
          ), y.sighashType !== void 0)
            throw new Error("Format Error: Input has multiple SIGHASH_TYPE");
          y.sighashType = Ke.inputs.sighashType.decode(v);
          break;
        case Se.InputTypes.REDEEM_SCRIPT:
          if (gt(
            "input",
            v.key,
            Se.InputTypes.REDEEM_SCRIPT
          ), y.redeemScript !== void 0)
            throw new Error("Format Error: Input has multiple REDEEM_SCRIPT");
          y.redeemScript = Ke.inputs.redeemScript.decode(v);
          break;
        case Se.InputTypes.WITNESS_SCRIPT:
          if (gt(
            "input",
            v.key,
            Se.InputTypes.WITNESS_SCRIPT
          ), y.witnessScript !== void 0)
            throw new Error("Format Error: Input has multiple WITNESS_SCRIPT");
          y.witnessScript = Ke.inputs.witnessScript.decode(v);
          break;
        case Se.InputTypes.BIP32_DERIVATION:
          y.bip32Derivation === void 0 && (y.bip32Derivation = []), y.bip32Derivation.push(
            Ke.inputs.bip32Derivation.decode(v)
          );
          break;
        case Se.InputTypes.FINAL_SCRIPTSIG:
          gt(
            "input",
            v.key,
            Se.InputTypes.FINAL_SCRIPTSIG
          ), y.finalScriptSig = Ke.inputs.finalScriptSig.decode(v);
          break;
        case Se.InputTypes.FINAL_SCRIPTWITNESS:
          gt(
            "input",
            v.key,
            Se.InputTypes.FINAL_SCRIPTWITNESS
          ), y.finalScriptWitness = Ke.inputs.finalScriptWitness.decode(
            v
          );
          break;
        case Se.InputTypes.POR_COMMITMENT:
          gt(
            "input",
            v.key,
            Se.InputTypes.POR_COMMITMENT
          ), y.porCommitment = Ke.inputs.porCommitment.decode(v);
          break;
        case Se.InputTypes.TAP_KEY_SIG:
          gt(
            "input",
            v.key,
            Se.InputTypes.TAP_KEY_SIG
          ), y.tapKeySig = Ke.inputs.tapKeySig.decode(v);
          break;
        case Se.InputTypes.TAP_SCRIPT_SIG:
          y.tapScriptSig === void 0 && (y.tapScriptSig = []), y.tapScriptSig.push(Ke.inputs.tapScriptSig.decode(v));
          break;
        case Se.InputTypes.TAP_LEAF_SCRIPT:
          y.tapLeafScript === void 0 && (y.tapLeafScript = []), y.tapLeafScript.push(Ke.inputs.tapLeafScript.decode(v));
          break;
        case Se.InputTypes.TAP_BIP32_DERIVATION:
          y.tapBip32Derivation === void 0 && (y.tapBip32Derivation = []), y.tapBip32Derivation.push(
            Ke.inputs.tapBip32Derivation.decode(v)
          );
          break;
        case Se.InputTypes.TAP_INTERNAL_KEY:
          gt(
            "input",
            v.key,
            Se.InputTypes.TAP_INTERNAL_KEY
          ), y.tapInternalKey = Ke.inputs.tapInternalKey.decode(v);
          break;
        case Se.InputTypes.TAP_MERKLE_ROOT:
          gt(
            "input",
            v.key,
            Se.InputTypes.TAP_MERKLE_ROOT
          ), y.tapMerkleRoot = Ke.inputs.tapMerkleRoot.decode(v);
          break;
        default:
          y.unknownKeyVals || (y.unknownKeyVals = []), y.unknownKeyVals.push(v);
      }
    f.push(y);
  }
  for (const h of ya.range(a)) {
    const y = {};
    for (const v of n[h])
      switch (Ke.outputs.checkPubkey(v), v.key[0]) {
        case Se.OutputTypes.REDEEM_SCRIPT:
          if (gt(
            "output",
            v.key,
            Se.OutputTypes.REDEEM_SCRIPT
          ), y.redeemScript !== void 0)
            throw new Error("Format Error: Output has multiple REDEEM_SCRIPT");
          y.redeemScript = Ke.outputs.redeemScript.decode(v);
          break;
        case Se.OutputTypes.WITNESS_SCRIPT:
          if (gt(
            "output",
            v.key,
            Se.OutputTypes.WITNESS_SCRIPT
          ), y.witnessScript !== void 0)
            throw new Error("Format Error: Output has multiple WITNESS_SCRIPT");
          y.witnessScript = Ke.outputs.witnessScript.decode(v);
          break;
        case Se.OutputTypes.BIP32_DERIVATION:
          y.bip32Derivation === void 0 && (y.bip32Derivation = []), y.bip32Derivation.push(
            Ke.outputs.bip32Derivation.decode(v)
          );
          break;
        case Se.OutputTypes.TAP_INTERNAL_KEY:
          gt(
            "output",
            v.key,
            Se.OutputTypes.TAP_INTERNAL_KEY
          ), y.tapInternalKey = Ke.outputs.tapInternalKey.decode(v);
          break;
        case Se.OutputTypes.TAP_TREE:
          gt(
            "output",
            v.key,
            Se.OutputTypes.TAP_TREE
          ), y.tapTree = Ke.outputs.tapTree.decode(v);
          break;
        case Se.OutputTypes.TAP_BIP32_DERIVATION:
          y.tapBip32Derivation === void 0 && (y.tapBip32Derivation = []), y.tapBip32Derivation.push(
            Ke.outputs.tapBip32Derivation.decode(v)
          );
          break;
        default:
          y.unknownKeyVals || (y.unknownKeyVals = []), y.unknownKeyVals.push(v);
      }
    l.push(y);
  }
  return { globalMap: i, inputs: f, outputs: l };
}
ts.psbtFromKeyVals = Zy;
var nf = {};
Object.defineProperty(nf, "__esModule", { value: !0 });
const nc = Jn, kp = Pr;
function uS({ globalMap: e, inputs: t, outputs: r }) {
  const { globalKeyVals: n, inputKeyVals: i, outputKeyVals: o } = Jy({
    globalMap: e,
    inputs: t,
    outputs: r
  }), s = kp.keyValsToBuffer(n), a = (y) => y.length === 0 ? [N.Buffer.from([0])] : y.map(kp.keyValsToBuffer), f = a(i), l = a(o), h = N.Buffer.allocUnsafe(5);
  return h.writeUIntBE(482972169471, 0, 5), N.Buffer.concat(
    [h, s].concat(f, l)
  );
}
nf.psbtToBuffer = uS;
const lS = (e, t) => e.key.compare(t.key);
function ic(e, t) {
  const r = /* @__PURE__ */ new Set(), n = Object.entries(e).reduce((o, [s, a]) => {
    if (s === "unknownKeyVals")
      return o;
    const f = t[s];
    if (f === void 0)
      return o;
    const l = (Array.isArray(a) ? a : [a]).map(
      f.encode
    );
    return l.map((y) => y.key.toString("hex")).forEach((y) => {
      if (r.has(y))
        throw new Error("Serialize Error: Duplicate key: " + y);
      r.add(y);
    }), o.concat(l);
  }, []), i = e.unknownKeyVals ? e.unknownKeyVals.filter((o) => !r.has(o.key.toString("hex"))) : [];
  return n.concat(i).sort(lS);
}
function Jy({ globalMap: e, inputs: t, outputs: r }) {
  return {
    globalKeyVals: ic(e, nc.globals),
    inputKeyVals: t.map((n) => ic(n, nc.inputs)),
    outputKeyVals: r.map((n) => ic(n, nc.outputs))
  };
}
nf.psbtToKeyVals = Jy;
(function(e) {
  function t(r) {
    for (var n in r)
      e.hasOwnProperty(n) || (e[n] = r[n]);
  }
  Object.defineProperty(e, "__esModule", { value: !0 }), t(ts), t(nf);
})(ml);
Object.defineProperty(wl, "__esModule", { value: !0 });
const oc = ml;
function hS(e) {
  const t = e[0], r = oc.psbtToKeyVals(t), n = e.slice(1);
  if (n.length === 0)
    throw new Error("Combine: Nothing to combine");
  const i = Rp(t);
  if (i === void 0)
    throw new Error("Combine: Self missing transaction");
  const o = Si(r.globalKeyVals), s = r.inputKeyVals.map(Si), a = r.outputKeyVals.map(Si);
  for (const f of n) {
    const l = Rp(f);
    if (l === void 0 || !l.toBuffer().equals(i.toBuffer()))
      throw new Error(
        "Combine: One of the Psbts does not have the same transaction."
      );
    const h = oc.psbtToKeyVals(f);
    Si(h.globalKeyVals).forEach(
      sc(
        o,
        r.globalKeyVals,
        h.globalKeyVals
      )
    ), h.inputKeyVals.map(Si).forEach(
      (m, E) => m.forEach(
        sc(
          s[E],
          r.inputKeyVals[E],
          h.inputKeyVals[E]
        )
      )
    ), h.outputKeyVals.map(Si).forEach(
      (m, E) => m.forEach(
        sc(
          a[E],
          r.outputKeyVals[E],
          h.outputKeyVals[E]
        )
      )
    );
  }
  return oc.psbtFromKeyVals(i, {
    globalMapKeyVals: r.globalKeyVals,
    inputKeyVals: r.inputKeyVals,
    outputKeyVals: r.outputKeyVals
  });
}
wl.combine = hS;
function sc(e, t, r) {
  return (n) => {
    if (e.has(n))
      return;
    const i = r.filter((o) => o.key.toString("hex") === n)[0];
    t.push(i), e.add(n);
  };
}
function Rp(e) {
  return e.globalMap.unsignedTx;
}
function Si(e) {
  const t = /* @__PURE__ */ new Set();
  return e.forEach((r) => {
    const n = r.key.toString("hex");
    if (t.has(n))
      throw new Error("Combine: KeyValue Map keys should be unique");
    t.add(n);
  }), t;
}
var xl = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 });
  const t = Jn;
  function r(g, m) {
    const E = g[m];
    if (E === void 0)
      throw new Error(`No input #${m}`);
    return E;
  }
  e.checkForInput = r;
  function n(g, m) {
    const E = g[m];
    if (E === void 0)
      throw new Error(`No output #${m}`);
    return E;
  }
  e.checkForOutput = n;
  function i(g, m, E) {
    if (g.key[0] < E)
      throw new Error(
        "Use the method for your specific key instead of addUnknownKeyVal*"
      );
    if (m && m.filter((O) => O.key.equals(g.key)).length !== 0)
      throw new Error(`Duplicate Key: ${g.key.toString("hex")}`);
  }
  e.checkHasKey = i;
  function o(g) {
    let m = 0;
    return Object.keys(g).forEach((E) => {
      Number(isNaN(Number(E))) && m++;
    }), m;
  }
  e.getEnumLength = o;
  function s(g, m) {
    let E = !1;
    if (m.nonWitnessUtxo || m.witnessUtxo) {
      const O = !!m.redeemScript, x = !!m.witnessScript, U = !O || !!m.finalScriptSig, H = !x || !!m.finalScriptWitness, M = !!m.finalScriptSig || !!m.finalScriptWitness;
      E = U && H && M;
    }
    if (E === !1)
      throw new Error(
        `Input #${g} has too much or too little data to clean`
      );
  }
  e.inputCheckUncleanFinalized = s;
  function a(g, m, E, O) {
    throw new Error(
      `Data for ${g} key ${m} is incorrect: Expected ${E} and got ${JSON.stringify(O)}`
    );
  }
  function f(g) {
    return (m, E) => {
      for (const O of Object.keys(m)) {
        const x = m[O], { canAdd: U, canAddToArray: H, check: M, expected: k } = (
          // @ts-ignore
          t[g + "s"][O] || {}
        ), _ = !!H;
        if (M)
          if (_) {
            if (!Array.isArray(x) || // @ts-ignore
            E[O] && !Array.isArray(E[O]))
              throw new Error(`Key type ${O} must be an array`);
            x.every(M) || a(g, O, k, x);
            const L = E[O] || [], j = /* @__PURE__ */ new Set();
            if (!x.every((F) => H(L, F, j)))
              throw new Error("Can not add duplicate data to array");
            E[O] = L.concat(x);
          } else {
            if (M(x) || a(g, O, k, x), !U(E, x))
              throw new Error(`Can not add duplicate data to ${g}`);
            E[O] = x;
          }
      }
    };
  }
  e.updateGlobal = f("global"), e.updateInput = f("input"), e.updateOutput = f("output");
  function l(g, m) {
    const E = g.length - 1, O = r(g, E);
    e.updateInput(m, O);
  }
  e.addInputAttributes = l;
  function h(g, m) {
    const E = g.length - 1, O = n(g, E);
    e.updateOutput(m, O);
  }
  e.addOutputAttributes = h;
  function y(g, m) {
    if (!N.Buffer.isBuffer(m) || m.length < 4)
      throw new Error("Set Version: Invalid Transaction");
    return m.writeUInt32LE(g, 0), m;
  }
  e.defaultVersionSetter = y;
  function v(g, m) {
    if (!N.Buffer.isBuffer(m) || m.length < 4)
      throw new Error("Set Locktime: Invalid Transaction");
    return m.writeUInt32LE(g, m.length - 4), m;
  }
  e.defaultLocktimeSetter = v;
})(xl);
Object.defineProperty(vl, "__esModule", { value: !0 });
const pS = wl, Np = ml, ac = dt, yt = xl;
let dS = class {
  constructor(t) {
    this.inputs = [], this.outputs = [], this.globalMap = {
      unsignedTx: t
    };
  }
  static fromBase64(t, r) {
    const n = N.Buffer.from(t, "base64");
    return this.fromBuffer(n, r);
  }
  static fromHex(t, r) {
    const n = N.Buffer.from(t, "hex");
    return this.fromBuffer(n, r);
  }
  static fromBuffer(t, r) {
    const n = Np.psbtFromBuffer(t, r), i = new this(n.globalMap.unsignedTx);
    return Object.assign(i, n), i;
  }
  toBase64() {
    return this.toBuffer().toString("base64");
  }
  toHex() {
    return this.toBuffer().toString("hex");
  }
  toBuffer() {
    return Np.psbtToBuffer(this);
  }
  updateGlobal(t) {
    return yt.updateGlobal(t, this.globalMap), this;
  }
  updateInput(t, r) {
    const n = yt.checkForInput(this.inputs, t);
    return yt.updateInput(r, n), this;
  }
  updateOutput(t, r) {
    const n = yt.checkForOutput(this.outputs, t);
    return yt.updateOutput(r, n), this;
  }
  addUnknownKeyValToGlobal(t) {
    return yt.checkHasKey(
      t,
      this.globalMap.unknownKeyVals,
      yt.getEnumLength(ac.GlobalTypes)
    ), this.globalMap.unknownKeyVals || (this.globalMap.unknownKeyVals = []), this.globalMap.unknownKeyVals.push(t), this;
  }
  addUnknownKeyValToInput(t, r) {
    const n = yt.checkForInput(this.inputs, t);
    return yt.checkHasKey(
      r,
      n.unknownKeyVals,
      yt.getEnumLength(ac.InputTypes)
    ), n.unknownKeyVals || (n.unknownKeyVals = []), n.unknownKeyVals.push(r), this;
  }
  addUnknownKeyValToOutput(t, r) {
    const n = yt.checkForOutput(this.outputs, t);
    return yt.checkHasKey(
      r,
      n.unknownKeyVals,
      yt.getEnumLength(ac.OutputTypes)
    ), n.unknownKeyVals || (n.unknownKeyVals = []), n.unknownKeyVals.push(r), this;
  }
  addInput(t) {
    this.globalMap.unsignedTx.addInput(t), this.inputs.push({
      unknownKeyVals: []
    });
    const r = t.unknownKeyVals || [], n = this.inputs.length - 1;
    if (!Array.isArray(r))
      throw new Error("unknownKeyVals must be an Array");
    return r.forEach(
      (i) => this.addUnknownKeyValToInput(n, i)
    ), yt.addInputAttributes(this.inputs, t), this;
  }
  addOutput(t) {
    this.globalMap.unsignedTx.addOutput(t), this.outputs.push({
      unknownKeyVals: []
    });
    const r = t.unknownKeyVals || [], n = this.outputs.length - 1;
    if (!Array.isArray(r))
      throw new Error("unknownKeyVals must be an Array");
    return r.forEach(
      (i) => this.addUnknownKeyValToOutput(n, i)
    ), yt.addOutputAttributes(this.outputs, t), this;
  }
  clearFinalizedInput(t) {
    const r = yt.checkForInput(this.inputs, t);
    yt.inputCheckUncleanFinalized(t, r);
    for (const n of Object.keys(r))
      [
        "witnessUtxo",
        "nonWitnessUtxo",
        "finalScriptSig",
        "finalScriptWitness",
        "unknownKeyVals"
      ].includes(n) || delete r[n];
    return this;
  }
  combine(...t) {
    const r = pS.combine([this].concat(t));
    return Object.assign(this, r), this;
  }
  getTransaction() {
    return this.globalMap.unsignedTx.toBuffer();
  }
};
vl.Psbt = dS;
var Ve = {}, Ce = {};
Object.defineProperty(Ce, "__esModule", { value: !0 });
Ce.signatureBlocksAction = Ce.checkInputForSig = Ce.pubkeyInScript = Ce.pubkeyPositionInScript = Ce.witnessStackToScriptWitness = Ce.isP2TR = Ce.isP2SHScript = Ce.isP2WSHScript = Ce.isP2WPKH = Ce.isP2PKH = Ce.isP2PK = Ce.isP2MS = void 0;
const Up = cr, Ro = Ht, Ls = Sn, yS = Ir, hi = oo;
function pi(e) {
  return (t) => {
    try {
      return e({ output: t }), !0;
    } catch {
      return !1;
    }
  };
}
Ce.isP2MS = pi(hi.p2ms);
Ce.isP2PK = pi(hi.p2pk);
Ce.isP2PKH = pi(hi.p2pkh);
Ce.isP2WPKH = pi(hi.p2wpkh);
Ce.isP2WSHScript = pi(hi.p2wsh);
Ce.isP2SHScript = pi(hi.p2sh);
Ce.isP2TR = pi(hi.p2tr);
function gS(e) {
  let t = N.Buffer.allocUnsafe(0);
  function r(s) {
    t = N.Buffer.concat([t, N.Buffer.from(s)]);
  }
  function n(s) {
    const a = t.length, f = Up.encodingLength(s);
    t = N.Buffer.concat([t, N.Buffer.allocUnsafe(f)]), Up.encode(s, t, a);
  }
  function i(s) {
    n(s.length), r(s);
  }
  function o(s) {
    n(s.length), s.forEach(i);
  }
  return o(e), t;
}
Ce.witnessStackToScriptWitness = gS;
function Qy(e, t) {
  const r = (0, yS.hash160)(e), n = e.slice(1, 33), i = Ro.decompile(t);
  if (i === null)
    throw new Error("Unknown script error");
  return i.findIndex((o) => typeof o == "number" ? !1 : o.equals(e) || o.equals(r) || o.equals(n));
}
Ce.pubkeyPositionInScript = Qy;
function bS(e, t) {
  return Qy(e, t) !== -1;
}
Ce.pubkeyInScript = bS;
function vS(e, t) {
  return wS(e).some(
    (n) => eg(n, Ro.signature.decode, t)
  );
}
Ce.checkInputForSig = vS;
function eg(e, t, r) {
  const { hashType: n } = t(e), i = [];
  switch (n & Ls.Transaction.SIGHASH_ANYONECANPAY && i.push("addInput"), n & 31) {
    case Ls.Transaction.SIGHASH_ALL:
      break;
    case Ls.Transaction.SIGHASH_SINGLE:
    case Ls.Transaction.SIGHASH_NONE:
      i.push("addOutput"), i.push("setInputSequence");
      break;
  }
  return i.indexOf(r) === -1;
}
Ce.signatureBlocksAction = eg;
function wS(e) {
  let t = [];
  if ((e.partialSig || []).length === 0) {
    if (!e.finalScriptSig && !e.finalScriptWitness)
      return [];
    t = mS(e);
  } else
    t = e.partialSig;
  return t.map((r) => r.signature);
}
function mS(e) {
  const t = e.finalScriptSig ? Ro.decompile(e.finalScriptSig) || [] : [], r = e.finalScriptWitness ? Ro.decompile(e.finalScriptWitness) || [] : [];
  return t.concat(r).filter((n) => N.Buffer.isBuffer(n) && Ro.isCanonicalScriptSignature(n)).map((n) => ({ signature: n }));
}
Object.defineProperty(Ve, "__esModule", { value: !0 });
Ve.checkTaprootInputForSigs = Ve.tapTreeFromList = Ve.tapTreeToList = Ve.tweakInternalPubKey = Ve.checkTaprootOutputFields = Ve.checkTaprootInputFields = Ve.isTaprootOutput = Ve.isTaprootInput = Ve.serializeTaprootSignature = Ve.tapScriptFinalizer = Ve.toXOnly = void 0;
const Bl = wt, ES = Sn, of = Ce, mn = Za, _S = oo, SS = Ce, OS = (e) => e.length === 32 ? e : e.slice(1, 33);
Ve.toXOnly = OS;
function AS(e, t, r) {
  const n = KS(
    t,
    e,
    r
  );
  try {
    const o = FS(t, n).concat(n.script).concat(n.controlBlock);
    return {
      finalScriptWitness: (0, of.witnessStackToScriptWitness)(o)
    };
  } catch (i) {
    throw new Error(`Can not finalize taproot input #${e}: ${i}`);
  }
}
Ve.tapScriptFinalizer = AS;
function TS(e, t) {
  const r = t ? N.Buffer.from([t]) : N.Buffer.from([]);
  return N.Buffer.concat([e, r]);
}
Ve.serializeTaprootSignature = TS;
function Ys(e) {
  return e && !!(e.tapInternalKey || e.tapMerkleRoot || e.tapLeafScript && e.tapLeafScript.length || e.tapBip32Derivation && e.tapBip32Derivation.length || e.witnessUtxo && (0, of.isP2TR)(e.witnessUtxo.script));
}
Ve.isTaprootInput = Ys;
function Zs(e, t) {
  return e && !!(e.tapInternalKey || e.tapTree || e.tapBip32Derivation && e.tapBip32Derivation.length || t && (0, of.isP2TR)(t));
}
Ve.isTaprootOutput = Zs;
function IS(e, t, r) {
  LS(e, t, r), MS(e, t, r);
}
Ve.checkTaprootInputFields = IS;
function PS(e, t, r) {
  DS(e, t, r), xS(e, t);
}
Ve.checkTaprootOutputFields = PS;
function xS(e, t) {
  if (!t.tapTree && !t.tapInternalKey)
    return;
  const r = t.tapInternalKey || e.tapInternalKey, n = t.tapTree || e.tapTree;
  if (r) {
    const { script: i } = e, o = BS(r, n);
    if (i && !i.equals(o))
      throw new Error("Error adding output. Script or address missmatch.");
  }
}
function BS(e, t) {
  const r = t && tg(t.leaves), { output: n } = (0, _S.p2tr)({
    internalPubkey: e,
    scriptTree: r
  });
  return n;
}
function kS(e, t) {
  const r = t.tapInternalKey, n = r && (0, mn.tweakKey)(r, t.tapMerkleRoot);
  if (!n)
    throw new Error(
      `Cannot tweak tap internal key for input #${e}. Public key: ${r && r.toString("hex")}`
    );
  return n.x;
}
Ve.tweakInternalPubKey = kS;
function RS(e) {
  if (!(0, Bl.isTaptree)(e))
    throw new Error(
      "Cannot convert taptree to tapleaf list. Expecting a tapree structure."
    );
  return vu(e);
}
Ve.tapTreeToList = RS;
function tg(e = []) {
  return e.length === 1 && e[0].depth === 0 ? {
    output: e[0].script,
    version: e[0].leafVersion
  } : HS(e);
}
Ve.tapTreeFromList = tg;
function NS(e, t) {
  return CS(e).some(
    (n) => (0, SS.signatureBlocksAction)(n, US, t)
  );
}
Ve.checkTaprootInputForSigs = NS;
function US(e) {
  return {
    signature: e.slice(0, 64),
    hashType: e.slice(64)[0] || ES.Transaction.SIGHASH_DEFAULT
  };
}
function CS(e) {
  const t = [];
  if (e.tapKeySig && t.push(e.tapKeySig), e.tapScriptSig && t.push(...e.tapScriptSig.map((r) => r.signature)), !t.length) {
    const r = $S(e.finalScriptWitness);
    r && t.push(r);
  }
  return t;
}
function $S(e) {
  if (!e)
    return;
  const t = e.slice(2);
  if (t.length === 64 || t.length === 65)
    return t;
}
function vu(e, t = [], r = 0) {
  if (r > mn.MAX_TAPTREE_DEPTH)
    throw new Error("Max taptree depth exceeded.");
  return e ? (0, Bl.isTapleaf)(e) ? (t.push({
    depth: r,
    leafVersion: e.version || mn.LEAF_VERSION_TAPSCRIPT,
    script: e.output
  }), t) : (e[0] && vu(e[0], t, r + 1), e[1] && vu(e[1], t, r + 1), t) : [];
}
function HS(e) {
  let t;
  for (const r of e)
    if (t = wu(r, t), !t)
      throw new Error("No room left to insert tapleaf in tree");
  return t;
}
function wu(e, t, r = 0) {
  if (r > mn.MAX_TAPTREE_DEPTH)
    throw new Error("Max taptree depth exceeded.");
  if (e.depth === r)
    return t ? void 0 : {
      output: e.script,
      version: e.leafVersion
    };
  if ((0, Bl.isTapleaf)(t))
    return;
  const n = wu(e, t && t[0], r + 1);
  if (n)
    return [n, t && t[1]];
  const i = wu(e, t && t[1], r + 1);
  if (i)
    return [t && t[0], i];
}
function LS(e, t, r) {
  const n = Ys(e) && Fi(t), i = Fi(e) && Ys(t), o = e === t && Ys(t) && Fi(t);
  if (n || i || o)
    throw new Error(
      `Invalid arguments for Psbt.${r}. Cannot use both taproot and non-taproot fields.`
    );
}
function DS(e, t, r) {
  const n = Zs(e) && Fi(t), i = Fi(e) && Zs(t), o = e === t && Zs(t) && Fi(t);
  if (n || i || o)
    throw new Error(
      `Invalid arguments for Psbt.${r}. Cannot use both taproot and non-taproot fields.`
    );
}
function MS(e, t, r) {
  if (t.tapMerkleRoot) {
    const n = (t.tapLeafScript || []).every(
      (o) => fc(o, t.tapMerkleRoot)
    ), i = (e.tapLeafScript || []).every(
      (o) => fc(o, t.tapMerkleRoot)
    );
    if (!n || !i)
      throw new Error(
        `Invalid arguments for Psbt.${r}. Tapleaf not part of taptree.`
      );
  } else if (e.tapMerkleRoot && !(t.tapLeafScript || []).every(
    (i) => fc(i, e.tapMerkleRoot)
  ))
    throw new Error(
      `Invalid arguments for Psbt.${r}. Tapleaf not part of taptree.`
    );
}
function fc(e, t) {
  if (!t)
    return !0;
  const r = (0, mn.tapleafHash)({
    output: e.script,
    version: e.leafVersion
  });
  return (0, mn.rootHashFromPath)(
    e.controlBlock,
    r
  ).equals(t);
}
function FS(e, t) {
  const r = (0, mn.tapleafHash)({
    output: t.script,
    version: t.leafVersion
  });
  return (e.tapScriptSig || []).filter((n) => n.leafHash.equals(r)).map((n) => jS(t.script, n)).sort((n, i) => i.positionInScript - n.positionInScript).map((n) => n.signature);
}
function jS(e, t) {
  return Object.assign(
    {
      positionInScript: (0, of.pubkeyPositionInScript)(
        t.pubkey,
        e
      )
    },
    t
  );
}
function KS(e, t, r) {
  if (!e.tapScriptSig || !e.tapScriptSig.length)
    throw new Error(
      `Can not finalize taproot input #${t}. No tapleaf script signature provided.`
    );
  const n = (e.tapLeafScript || []).sort((i, o) => i.controlBlock.length - o.controlBlock.length).find(
    (i) => qS(i, e.tapScriptSig, r)
  );
  if (!n)
    throw new Error(
      `Can not finalize taproot input #${t}. Signature for tapleaf script not found.`
    );
  return n;
}
function qS(e, t, r) {
  const n = (0, mn.tapleafHash)({
    output: e.script,
    version: e.leafVersion
  });
  return (!r || r.equals(n)) && t.find((o) => o.leafHash.equals(n)) !== void 0;
}
function Fi(e) {
  return e && !!(e.redeemScript || e.witnessScript || e.bip32Derivation && e.bip32Derivation.length);
}
Object.defineProperty(tf, "__esModule", { value: !0 });
tf.Psbt = void 0;
const Cp = vl, $p = cr, xt = xl, Hp = Ut, ga = nt, GS = pt, Qt = oo, VS = Za, Fr = Ht, bt = Sn, We = Ve, et = Ce, WS = {
  /**
   * A bitcoinjs Network object. This is only used if you pass an `address`
   * parameter to addOutput. Otherwise it is not needed and can be left default.
   */
  network: GS.bitcoin,
  /**
   * When extractTransaction is called, the fee rate is checked.
   * THIS IS NOT TO BE RELIED ON.
   * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.
   */
  maximumFeeRate: 5e3
  // satoshi per byte
};
class ba {
  static fromBase64(t, r = {}) {
    const n = N.Buffer.from(t, "base64");
    return this.fromBuffer(n, r);
  }
  static fromHex(t, r = {}) {
    const n = N.Buffer.from(t, "hex");
    return this.fromBuffer(n, r);
  }
  static fromBuffer(t, r = {}) {
    const n = Cp.Psbt.fromBuffer(t, zS), i = new ba(r, n);
    return QS(i.__CACHE.__TX, i.__CACHE), i;
  }
  constructor(t = {}, r = new Cp.Psbt(new rg())) {
    this.data = r, this.opts = Object.assign({}, WS, t), this.__CACHE = {
      __NON_WITNESS_UTXO_TX_CACHE: [],
      __NON_WITNESS_UTXO_BUF_CACHE: [],
      __TX_IN_CACHE: {},
      __TX: this.data.globalMap.unsignedTx.tx,
      // Psbt's predecesor (TransactionBuilder - now removed) behavior
      // was to not confirm input values  before signing.
      // Even though we highly encourage people to get
      // the full parent transaction to verify values, the ability to
      // sign non-segwit inputs without the full transaction was often
      // requested. So the only way to activate is to use @ts-ignore.
      // We will disable exporting the Psbt when unsafe sign is active.
      // because it is not BIP174 compliant.
      __UNSAFE_SIGN_NONSEGWIT: !1
    }, this.data.inputs.length === 0 && this.setVersion(2);
    const n = (i, o, s, a) => Object.defineProperty(i, o, {
      enumerable: s,
      writable: a
    });
    n(this, "__CACHE", !1, !0), n(this, "opts", !1, !0);
  }
  get inputCount() {
    return this.data.inputs.length;
  }
  get version() {
    return this.__CACHE.__TX.version;
  }
  set version(t) {
    this.setVersion(t);
  }
  get locktime() {
    return this.__CACHE.__TX.locktime;
  }
  set locktime(t) {
    this.setLocktime(t);
  }
  get txInputs() {
    return this.__CACHE.__TX.ins.map((t) => ({
      hash: (0, ga.cloneBuffer)(t.hash),
      index: t.index,
      sequence: t.sequence
    }));
  }
  get txOutputs() {
    return this.__CACHE.__TX.outs.map((t) => {
      let r;
      try {
        r = (0, Hp.fromOutputScript)(
          t.script,
          this.opts.network
        );
      } catch {
      }
      return {
        script: (0, ga.cloneBuffer)(t.script),
        value: t.value,
        address: r
      };
    });
  }
  combine(...t) {
    return this.data.combine(...t.map((r) => r.data)), this;
  }
  clone() {
    const t = ba.fromBuffer(this.data.toBuffer());
    return t.opts = JSON.parse(JSON.stringify(this.opts)), t;
  }
  setMaximumFeeRate(t) {
    Ds(t), this.opts.maximumFeeRate = t;
  }
  setVersion(t) {
    Ds(t), yo(this.data.inputs, "setVersion");
    const r = this.__CACHE;
    return r.__TX.version = t, r.__EXTRACTED_TX = void 0, this;
  }
  setLocktime(t) {
    Ds(t), yo(this.data.inputs, "setLocktime");
    const r = this.__CACHE;
    return r.__TX.locktime = t, r.__EXTRACTED_TX = void 0, this;
  }
  setInputSequence(t, r) {
    Ds(r), yo(this.data.inputs, "setInputSequence");
    const n = this.__CACHE;
    if (n.__TX.ins.length <= t)
      throw new Error("Input index too high");
    return n.__TX.ins[t].sequence = r, n.__EXTRACTED_TX = void 0, this;
  }
  addInputs(t) {
    return t.forEach((r) => this.addInput(r)), this;
  }
  addInput(t) {
    if (arguments.length > 1 || !t || t.hash === void 0 || t.index === void 0)
      throw new Error(
        "Invalid arguments for Psbt.addInput. Requires single object with at least [hash] and [index]"
      );
    (0, We.checkTaprootInputFields)(t, t, "addInput"), yo(this.data.inputs, "addInput"), t.witnessScript && va(t.witnessScript);
    const r = this.__CACHE;
    this.data.addInput(t);
    const n = r.__TX.ins[r.__TX.ins.length - 1];
    og(r, n);
    const i = this.data.inputs.length - 1, o = this.data.inputs[i];
    return o.nonWitnessUtxo && Eu(this.__CACHE, o, i), r.__FEE = void 0, r.__FEE_RATE = void 0, r.__EXTRACTED_TX = void 0, this;
  }
  addOutputs(t) {
    return t.forEach((r) => this.addOutput(r)), this;
  }
  addOutput(t) {
    if (arguments.length > 1 || !t || t.value === void 0 || t.address === void 0 && t.script === void 0)
      throw new Error(
        "Invalid arguments for Psbt.addOutput. Requires single object with at least [script or address] and [value]"
      );
    yo(this.data.inputs, "addOutput");
    const { address: r } = t;
    if (typeof r == "string") {
      const { network: i } = this.opts, o = (0, Hp.toOutputScript)(r, i);
      t = Object.assign(t, { script: o });
    }
    (0, We.checkTaprootOutputFields)(t, t, "addOutput");
    const n = this.__CACHE;
    return this.data.addOutput(t), n.__FEE = void 0, n.__FEE_RATE = void 0, n.__EXTRACTED_TX = void 0, this;
  }
  extractTransaction(t) {
    if (!this.data.inputs.every(ng))
      throw new Error("Not finalized");
    const r = this.__CACHE;
    if (t || YS(this, r, this.opts), r.__EXTRACTED_TX)
      return r.__EXTRACTED_TX;
    const n = r.__TX.clone();
    return lg(this.data.inputs, n, r, !0), n;
  }
  getFeeRate() {
    return jp(
      "__FEE_RATE",
      "fee rate",
      this.data.inputs,
      this.__CACHE
    );
  }
  getFee() {
    return jp("__FEE", "fee", this.data.inputs, this.__CACHE);
  }
  finalizeAllInputs() {
    return (0, xt.checkForInput)(this.data.inputs, 0), go(this.data.inputs.length).forEach((t) => this.finalizeInput(t)), this;
  }
  finalizeInput(t, r) {
    const n = (0, xt.checkForInput)(this.data.inputs, t);
    return (0, We.isTaprootInput)(n) ? this._finalizeTaprootInput(
      t,
      n,
      void 0,
      r
    ) : this._finalizeInput(t, n, r);
  }
  finalizeTaprootInput(t, r, n = We.tapScriptFinalizer) {
    const i = (0, xt.checkForInput)(this.data.inputs, t);
    if ((0, We.isTaprootInput)(i))
      return this._finalizeTaprootInput(
        t,
        i,
        r,
        n
      );
    throw new Error(`Cannot finalize input #${t}. Not Taproot.`);
  }
  _finalizeInput(t, r, n = e3) {
    const { script: i, isP2SH: o, isP2WSH: s, isSegwit: a } = i3(
      t,
      r,
      this.__CACHE
    );
    if (!i)
      throw new Error(`No script found for input #${t}`);
    ZS(r);
    const { finalScriptSig: f, finalScriptWitness: l } = n(
      t,
      r,
      i,
      a,
      o,
      s
    );
    if (f && this.data.updateInput(t, { finalScriptSig: f }), l && this.data.updateInput(t, { finalScriptWitness: l }), !f && !l)
      throw new Error(`Unknown error finalizing input #${t}`);
    return this.data.clearFinalizedInput(t), this;
  }
  _finalizeTaprootInput(t, r, n, i = We.tapScriptFinalizer) {
    if (!r.witnessUtxo)
      throw new Error(
        `Cannot finalize input #${t}. Missing withness utxo.`
      );
    if (r.tapKeySig) {
      const o = Qt.p2tr({
        output: r.witnessUtxo.script,
        signature: r.tapKeySig
      }), s = (0, et.witnessStackToScriptWitness)(
        o.witness
      );
      this.data.updateInput(t, { finalScriptWitness: s });
    } else {
      const { finalScriptWitness: o } = i(
        t,
        r,
        n
      );
      this.data.updateInput(t, { finalScriptWitness: o });
    }
    return this.data.clearFinalizedInput(t), this;
  }
  getInputType(t) {
    const r = (0, xt.checkForInput)(this.data.inputs, t), n = hg(t, r, this.__CACHE), i = af(
      n,
      t,
      "input",
      r.redeemScript || c3(r.finalScriptSig),
      r.witnessScript || u3(r.finalScriptWitness)
    ), o = i.type === "raw" ? "" : i.type + "-", s = dg(i.meaningfulScript);
    return o + s;
  }
  inputHasPubkey(t, r) {
    const n = (0, xt.checkForInput)(this.data.inputs, t);
    return a3(r, n, t, this.__CACHE);
  }
  inputHasHDKey(t, r) {
    const n = (0, xt.checkForInput)(this.data.inputs, t), i = Dp(r);
    return !!n.bip32Derivation && n.bip32Derivation.some(i);
  }
  outputHasPubkey(t, r) {
    const n = (0, xt.checkForOutput)(this.data.outputs, t);
    return f3(r, n, t, this.__CACHE);
  }
  outputHasHDKey(t, r) {
    const n = (0, xt.checkForOutput)(this.data.outputs, t), i = Dp(r);
    return !!n.bip32Derivation && n.bip32Derivation.some(i);
  }
  validateSignaturesOfAllInputs(t) {
    return (0, xt.checkForInput)(this.data.inputs, 0), go(this.data.inputs.length).map(
      (n) => this.validateSignaturesOfInput(n, t)
    ).reduce((n, i) => i === !0 && n, !0);
  }
  validateSignaturesOfInput(t, r, n) {
    const i = this.data.inputs[t];
    return (0, We.isTaprootInput)(i) ? this.validateSignaturesOfTaprootInput(
      t,
      r,
      n
    ) : this._validateSignaturesOfInput(t, r, n);
  }
  _validateSignaturesOfInput(t, r, n) {
    const i = this.data.inputs[t], o = (i || {}).partialSig;
    if (!i || !o || o.length < 1)
      throw new Error("No signatures to validate");
    if (typeof r != "function")
      throw new Error("Need validator function to validate signatures");
    const s = n ? o.filter((y) => y.pubkey.equals(n)) : o;
    if (s.length < 1)
      throw new Error("No signatures for this pubkey");
    const a = [];
    let f, l, h;
    for (const y of s) {
      const v = Fr.signature.decode(y.signature), { hash: g, script: m } = h !== v.hashType ? ag(
        t,
        Object.assign({}, i, { sighashType: v.hashType }),
        this.__CACHE,
        !0
      ) : { hash: f, script: l };
      h = v.hashType, f = g, l = m, ig(y.pubkey, m, "verify"), a.push(r(y.pubkey, g, v.signature));
    }
    return a.every((y) => y === !0);
  }
  validateSignaturesOfTaprootInput(t, r, n) {
    const i = this.data.inputs[t], o = (i || {}).tapKeySig, s = (i || {}).tapScriptSig;
    if (!i && !o && !(s && !s.length))
      throw new Error("No signatures to validate");
    if (typeof r != "function")
      throw new Error("Need validator function to validate signatures");
    n = n && (0, We.toXOnly)(n);
    const a = n ? mu(
      t,
      i,
      this.data.inputs,
      n,
      this.__CACHE
    ) : r3(
      t,
      i,
      this.data.inputs,
      this.__CACHE
    );
    if (!a.length)
      throw new Error("No signatures for this pubkey");
    const f = a.find((h) => !h.leafHash);
    let l = 0;
    if (o && f) {
      if (!r(
        f.pubkey,
        f.hash,
        qp(o)
      ))
        return !1;
      l++;
    }
    if (s)
      for (const h of s) {
        const y = a.find((v) => h.pubkey.equals(v.pubkey));
        if (y) {
          if (!r(
            h.pubkey,
            y.hash,
            qp(h.signature)
          ))
            return !1;
          l++;
        }
      }
    return l > 0;
  }
  signAllInputsHD(t, r = [bt.Transaction.SIGHASH_ALL]) {
    if (!t || !t.publicKey || !t.fingerprint)
      throw new Error("Need HDSigner to sign input");
    const n = [];
    for (const i of go(this.data.inputs.length))
      try {
        this.signInputHD(i, t, r), n.push(!0);
      } catch {
        n.push(!1);
      }
    if (n.every((i) => i === !1))
      throw new Error("No inputs were signed");
    return this;
  }
  signAllInputsHDAsync(t, r = [bt.Transaction.SIGHASH_ALL]) {
    return new Promise((n, i) => {
      if (!t || !t.publicKey || !t.fingerprint)
        return i(new Error("Need HDSigner to sign input"));
      const o = [], s = [];
      for (const a of go(this.data.inputs.length))
        s.push(
          this.signInputHDAsync(a, t, r).then(
            () => {
              o.push(!0);
            },
            () => {
              o.push(!1);
            }
          )
        );
      return Promise.all(s).then(() => {
        if (o.every((a) => a === !1))
          return i(new Error("No inputs were signed"));
        n();
      });
    });
  }
  signInputHD(t, r, n = [bt.Transaction.SIGHASH_ALL]) {
    if (!r || !r.publicKey || !r.fingerprint)
      throw new Error("Need HDSigner to sign input");
    return Gp(t, this.data.inputs, r).forEach((o) => this.signInput(t, o, n)), this;
  }
  signInputHDAsync(t, r, n = [bt.Transaction.SIGHASH_ALL]) {
    return new Promise((i, o) => {
      if (!r || !r.publicKey || !r.fingerprint)
        return o(new Error("Need HDSigner to sign input"));
      const a = Gp(t, this.data.inputs, r).map(
        (f) => this.signInputAsync(t, f, n)
      );
      return Promise.all(a).then(() => {
        i();
      }).catch(o);
    });
  }
  signAllInputs(t, r) {
    if (!t || !t.publicKey)
      throw new Error("Need Signer to sign input");
    const n = [];
    for (const i of go(this.data.inputs.length))
      try {
        this.signInput(i, t, r), n.push(!0);
      } catch {
        n.push(!1);
      }
    if (n.every((i) => i === !1))
      throw new Error("No inputs were signed");
    return this;
  }
  signAllInputsAsync(t, r) {
    return new Promise((n, i) => {
      if (!t || !t.publicKey)
        return i(new Error("Need Signer to sign input"));
      const o = [], s = [];
      for (const [a] of this.data.inputs.entries())
        s.push(
          this.signInputAsync(a, t, r).then(
            () => {
              o.push(!0);
            },
            () => {
              o.push(!1);
            }
          )
        );
      return Promise.all(s).then(() => {
        if (o.every((a) => a === !1))
          return i(new Error("No inputs were signed"));
        n();
      });
    });
  }
  signInput(t, r, n) {
    if (!r || !r.publicKey)
      throw new Error("Need Signer to sign input");
    const i = (0, xt.checkForInput)(this.data.inputs, t);
    return (0, We.isTaprootInput)(i) ? this._signTaprootInput(
      t,
      i,
      r,
      void 0,
      n
    ) : this._signInput(t, r, n);
  }
  signTaprootInput(t, r, n, i) {
    if (!r || !r.publicKey)
      throw new Error("Need Signer to sign input");
    const o = (0, xt.checkForInput)(this.data.inputs, t);
    if ((0, We.isTaprootInput)(o))
      return this._signTaprootInput(
        t,
        o,
        r,
        n,
        i
      );
    throw new Error(`Input #${t} is not of type Taproot.`);
  }
  _signInput(t, r, n = [bt.Transaction.SIGHASH_ALL]) {
    const { hash: i, sighashType: o } = Kp(
      this.data.inputs,
      t,
      r.publicKey,
      this.__CACHE,
      n
    ), s = [
      {
        pubkey: r.publicKey,
        signature: Fr.signature.encode(r.sign(i), o)
      }
    ];
    return this.data.updateInput(t, { partialSig: s }), this;
  }
  _signTaprootInput(t, r, n, i, o = [bt.Transaction.SIGHASH_DEFAULT]) {
    const s = this.checkTaprootHashesForSig(
      t,
      r,
      n,
      i,
      o
    ), a = s.filter((l) => !l.leafHash).map(
      (l) => (0, We.serializeTaprootSignature)(
        n.signSchnorr(l.hash),
        r.sighashType
      )
    )[0], f = s.filter((l) => !!l.leafHash).map((l) => ({
      pubkey: (0, We.toXOnly)(n.publicKey),
      signature: (0, We.serializeTaprootSignature)(
        n.signSchnorr(l.hash),
        r.sighashType
      ),
      leafHash: l.leafHash
    }));
    return a && this.data.updateInput(t, { tapKeySig: a }), f.length && this.data.updateInput(t, { tapScriptSig: f }), this;
  }
  signInputAsync(t, r, n) {
    return Promise.resolve().then(() => {
      if (!r || !r.publicKey)
        throw new Error("Need Signer to sign input");
      const i = (0, xt.checkForInput)(this.data.inputs, t);
      return (0, We.isTaprootInput)(i) ? this._signTaprootInputAsync(
        t,
        i,
        r,
        void 0,
        n
      ) : this._signInputAsync(t, r, n);
    });
  }
  signTaprootInputAsync(t, r, n, i) {
    return Promise.resolve().then(() => {
      if (!r || !r.publicKey)
        throw new Error("Need Signer to sign input");
      const o = (0, xt.checkForInput)(this.data.inputs, t);
      if ((0, We.isTaprootInput)(o))
        return this._signTaprootInputAsync(
          t,
          o,
          r,
          n,
          i
        );
      throw new Error(`Input #${t} is not of type Taproot.`);
    });
  }
  _signInputAsync(t, r, n = [bt.Transaction.SIGHASH_ALL]) {
    const { hash: i, sighashType: o } = Kp(
      this.data.inputs,
      t,
      r.publicKey,
      this.__CACHE,
      n
    );
    return Promise.resolve(r.sign(i)).then((s) => {
      const a = [
        {
          pubkey: r.publicKey,
          signature: Fr.signature.encode(s, o)
        }
      ];
      this.data.updateInput(t, { partialSig: a });
    });
  }
  async _signTaprootInputAsync(t, r, n, i, o = [bt.Transaction.SIGHASH_DEFAULT]) {
    const s = this.checkTaprootHashesForSig(
      t,
      r,
      n,
      i,
      o
    ), a = [], f = s.filter((h) => !h.leafHash)[0];
    if (f) {
      const h = Promise.resolve(
        n.signSchnorr(f.hash)
      ).then((y) => ({
        tapKeySig: (0, We.serializeTaprootSignature)(
          y,
          r.sighashType
        )
      }));
      a.push(h);
    }
    const l = s.filter((h) => !!h.leafHash);
    if (l.length) {
      const h = l.map((y) => Promise.resolve(n.signSchnorr(y.hash)).then(
        (v) => ({ tapScriptSig: [
          {
            pubkey: (0, We.toXOnly)(n.publicKey),
            signature: (0, We.serializeTaprootSignature)(
              v,
              r.sighashType
            ),
            leafHash: y.leafHash
          }
        ] })
      ));
      a.push(...h);
    }
    return Promise.all(a).then((h) => {
      h.forEach((y) => this.data.updateInput(t, y));
    });
  }
  checkTaprootHashesForSig(t, r, n, i, o) {
    if (typeof n.signSchnorr != "function")
      throw new Error(
        `Need Schnorr Signer to sign taproot input #${t}.`
      );
    const s = mu(
      t,
      r,
      this.data.inputs,
      n.publicKey,
      this.__CACHE,
      i,
      o
    );
    if (!s || !s.length)
      throw new Error(
        `Can not sign for input #${t} with the key ${n.publicKey.toString(
          "hex"
        )}`
      );
    return s;
  }
  toBuffer() {
    return cc(this.__CACHE), this.data.toBuffer();
  }
  toHex() {
    return cc(this.__CACHE), this.data.toHex();
  }
  toBase64() {
    return cc(this.__CACHE), this.data.toBase64();
  }
  updateGlobal(t) {
    return this.data.updateGlobal(t), this;
  }
  updateInput(t, r) {
    return r.witnessScript && va(r.witnessScript), (0, We.checkTaprootInputFields)(
      this.data.inputs[t],
      r,
      "updateInput"
    ), this.data.updateInput(t, r), r.nonWitnessUtxo && Eu(
      this.__CACHE,
      this.data.inputs[t],
      t
    ), this;
  }
  updateOutput(t, r) {
    const n = this.data.outputs[t];
    return (0, We.checkTaprootOutputFields)(
      n,
      r,
      "updateOutput"
    ), this.data.updateOutput(t, r), this;
  }
  addUnknownKeyValToGlobal(t) {
    return this.data.addUnknownKeyValToGlobal(t), this;
  }
  addUnknownKeyValToInput(t, r) {
    return this.data.addUnknownKeyValToInput(t, r), this;
  }
  addUnknownKeyValToOutput(t, r) {
    return this.data.addUnknownKeyValToOutput(t, r), this;
  }
  clearFinalizedInput(t) {
    return this.data.clearFinalizedInput(t), this;
  }
}
tf.Psbt = ba;
const zS = (e) => new rg(e);
class rg {
  constructor(t = N.Buffer.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0])) {
    this.tx = bt.Transaction.fromBuffer(t), JS(this.tx), Object.defineProperty(this, "tx", {
      enumerable: !1,
      writable: !0
    });
  }
  getInputOutputCounts() {
    return {
      inputCount: this.tx.ins.length,
      outputCount: this.tx.outs.length
    };
  }
  addInput(t) {
    if (t.hash === void 0 || t.index === void 0 || !N.Buffer.isBuffer(t.hash) && typeof t.hash != "string" || typeof t.index != "number")
      throw new Error("Error adding input.");
    const r = typeof t.hash == "string" ? (0, ga.reverseBuffer)(N.Buffer.from(t.hash, "hex")) : t.hash;
    this.tx.addInput(r, t.index, t.sequence);
  }
  addOutput(t) {
    if (t.script === void 0 || t.value === void 0 || !N.Buffer.isBuffer(t.script) || typeof t.value != "number")
      throw new Error("Error adding output.");
    this.tx.addOutput(t.script, t.value);
  }
  toBuffer() {
    return this.tx.toBuffer();
  }
}
function XS(e, t, r) {
  switch (r) {
    case "pubkey":
    case "pubkeyhash":
    case "witnesspubkeyhash":
      return Lp(1, e.partialSig);
    case "multisig":
      const n = Qt.p2ms({ output: t });
      return Lp(n.m, e.partialSig, n.pubkeys);
    default:
      return !1;
  }
}
function cc(e) {
  if (e.__UNSAFE_SIGN_NONSEGWIT !== !1)
    throw new Error("Not BIP174 compliant, can not export");
}
function Lp(e, t, r) {
  if (!t)
    return !1;
  let n;
  if (r ? n = r.map((i) => {
    const o = l3(i);
    return t.find((s) => s.pubkey.equals(o));
  }).filter((i) => !!i) : n = t, n.length > e)
    throw new Error("Too many signatures");
  return n.length === e;
}
function ng(e) {
  return !!e.finalScriptSig || !!e.finalScriptWitness;
}
function Dp(e) {
  return (t) => !(!t.masterFingerprint.equals(e.fingerprint) || !e.derivePath(t.path).publicKey.equals(t.pubkey));
}
function Ds(e) {
  if (typeof e != "number" || e !== Math.floor(e) || e > 4294967295 || e < 0)
    throw new Error("Invalid 32 bit integer");
}
function YS(e, t, r) {
  const n = t.__FEE_RATE || e.getFeeRate(), i = t.__EXTRACTED_TX.virtualSize(), o = n * i;
  if (n >= r.maximumFeeRate)
    throw new Error(
      `Warning: You are paying around ${(o / 1e8).toFixed(8)} in fees, which is ${n} satoshi per byte for a transaction with a VSize of ${i} bytes (segwit counted as 0.25 byte per byte). Use setMaximumFeeRate method to raise your threshold, or pass true to the first arg of extractTransaction.`
    );
}
function yo(e, t) {
  e.forEach((r) => {
    if ((0, We.isTaprootInput)(r) ? (0, We.checkTaprootInputForSigs)(r, t) : (0, et.checkInputForSig)(r, t))
      throw new Error("Can not modify transaction, signatures exist.");
  });
}
function ZS(e) {
  if (!e.sighashType || !e.partialSig)
    return;
  const { partialSig: t, sighashType: r } = e;
  t.forEach((n) => {
    const { hashType: i } = Fr.signature.decode(n.signature);
    if (r !== i)
      throw new Error("Signature sighash does not match input sighash type");
  });
}
function ig(e, t, r) {
  if (!(0, et.pubkeyInScript)(e, t))
    throw new Error(
      `Can not ${r} for this input with the key ${e.toString("hex")}`
    );
}
function JS(e) {
  if (!e.ins.every(
    (r) => r.script && r.script.length === 0 && r.witness && r.witness.length === 0
  ))
    throw new Error("Format Error: Transaction ScriptSigs are not empty");
}
function QS(e, t) {
  e.ins.forEach((r) => {
    og(t, r);
  });
}
function og(e, t) {
  const r = (0, ga.reverseBuffer)(N.Buffer.from(t.hash)).toString("hex") + ":" + t.index;
  if (e.__TX_IN_CACHE[r])
    throw new Error("Duplicate input detected.");
  e.__TX_IN_CACHE[r] = 1;
}
function sg(e, t) {
  return (r, n, i, o) => {
    const s = e({
      redeem: { output: i }
    }).output;
    if (!n.equals(s))
      throw new Error(
        `${t} for ${o} #${r} doesn't match the scriptPubKey in the prevout`
      );
  };
}
const Mp = sg(Qt.p2sh, "Redeem script"), Fp = sg(
  Qt.p2wsh,
  "Witness script"
);
function jp(e, t, r, n) {
  if (!r.every(ng))
    throw new Error(`PSBT must be finalized to calculate ${t}`);
  if (e === "__FEE_RATE" && n.__FEE_RATE)
    return n.__FEE_RATE;
  if (e === "__FEE" && n.__FEE)
    return n.__FEE;
  let i, o = !0;
  if (n.__EXTRACTED_TX ? (i = n.__EXTRACTED_TX, o = !1) : i = n.__TX.clone(), lg(r, i, n, o), e === "__FEE_RATE")
    return n.__FEE_RATE;
  if (e === "__FEE")
    return n.__FEE;
}
function e3(e, t, r, n, i, o) {
  const s = dg(r);
  if (!XS(t, r, s))
    throw new Error(`Can not finalize input #${e}`);
  return t3(
    r,
    s,
    t.partialSig,
    n,
    i,
    o
  );
}
function t3(e, t, r, n, i, o) {
  let s, a;
  const f = n3(e, t, r), l = o ? Qt.p2wsh({ redeem: f }) : null, h = i ? Qt.p2sh({ redeem: l || f }) : null;
  return n ? (l ? a = (0, et.witnessStackToScriptWitness)(
    l.witness
  ) : a = (0, et.witnessStackToScriptWitness)(
    f.witness
  ), h && (s = h.input)) : h ? s = h.input : s = f.input, {
    finalScriptSig: s,
    finalScriptWitness: a
  };
}
function Kp(e, t, r, n, i) {
  const o = (0, xt.checkForInput)(e, t), { hash: s, sighashType: a, script: f } = ag(
    t,
    o,
    n,
    !1,
    i
  );
  return ig(r, f, "sign"), {
    hash: s,
    sighashType: a
  };
}
function ag(e, t, r, n, i) {
  const o = r.__TX, s = t.sighashType || bt.Transaction.SIGHASH_ALL;
  cg(s, i);
  let a, f;
  if (t.nonWitnessUtxo) {
    const y = sf(
      r,
      t,
      e
    ), v = o.ins[e].hash, g = y.getHash();
    if (!v.equals(g))
      throw new Error(
        `Non-witness UTXO hash for input #${e} doesn't match the hash specified in the prevout`
      );
    const m = o.ins[e].index;
    f = y.outs[m];
  } else if (t.witnessUtxo)
    f = t.witnessUtxo;
  else
    throw new Error("Need a Utxo input item for signing");
  const { meaningfulScript: l, type: h } = af(
    f.script,
    e,
    "input",
    t.redeemScript,
    t.witnessScript
  );
  if (["p2sh-p2wsh", "p2wsh"].indexOf(h) >= 0)
    a = o.hashForWitnessV0(
      e,
      l,
      f.value,
      s
    );
  else if ((0, et.isP2WPKH)(l)) {
    const y = Qt.p2pkh({
      hash: l.slice(2)
    }).output;
    a = o.hashForWitnessV0(
      e,
      y,
      f.value,
      s
    );
  } else {
    if (t.nonWitnessUtxo === void 0 && r.__UNSAFE_SIGN_NONSEGWIT === !1)
      throw new Error(
        `Input #${e} has witnessUtxo but non-segwit script: ${l.toString("hex")}`
      );
    !n && r.__UNSAFE_SIGN_NONSEGWIT !== !1 && console.warn(
      `Warning: Signing non-segwit inputs without the full parent transaction means there is a chance that a miner could feed you incorrect information to trick you into paying large fees. This behavior is the same as Psbt's predecesor (TransactionBuilder - now removed) when signing non-segwit scripts. You are not able to export this Psbt with toBuffer|toBase64|toHex since it is not BIP174 compliant.
*********************
PROCEED WITH CAUTION!
*********************`
    ), a = o.hashForSignature(
      e,
      l,
      s
    );
  }
  return {
    script: l,
    sighashType: s,
    hash: a
  };
}
function r3(e, t, r, n) {
  const i = [];
  if (t.tapInternalKey) {
    const s = fg(e, t, n);
    s && i.push(s);
  }
  if (t.tapScriptSig) {
    const s = t.tapScriptSig.map((a) => a.pubkey);
    i.push(...s);
  }
  return i.map(
    (s) => mu(e, t, r, s, n)
  ).flat();
}
function fg(e, t, r) {
  const { script: n } = kl(e, t, r);
  return (0, et.isP2TR)(n) ? n.subarray(2, 34) : null;
}
function qp(e) {
  return e.length === 64 ? e : e.subarray(0, 64);
}
function mu(e, t, r, n, i, o, s) {
  const a = i.__TX, f = t.sighashType || bt.Transaction.SIGHASH_DEFAULT;
  cg(f, s);
  const l = r.map(
    (m, E) => kl(E, m, i)
  ), h = l.map((m) => m.script), y = l.map((m) => m.value), v = [];
  if (t.tapInternalKey && !o) {
    const m = fg(e, t, i) || N.Buffer.from([]);
    if ((0, We.toXOnly)(n).equals(m)) {
      const E = a.hashForWitnessV1(
        e,
        h,
        y,
        f
      );
      v.push({ pubkey: n, hash: E });
    }
  }
  const g = (t.tapLeafScript || []).filter((m) => (0, et.pubkeyInScript)(n, m.script)).map((m) => {
    const E = (0, VS.tapleafHash)({
      output: m.script,
      version: m.leafVersion
    });
    return Object.assign({ hash: E }, m);
  }).filter(
    (m) => !o || o.equals(m.hash)
  ).map((m) => {
    const E = a.hashForWitnessV1(
      e,
      h,
      y,
      bt.Transaction.SIGHASH_DEFAULT,
      m.hash
    );
    return {
      pubkey: n,
      hash: E,
      leafHash: m.hash
    };
  });
  return v.concat(g);
}
function cg(e, t) {
  if (t && t.indexOf(e) < 0) {
    const r = s3(e);
    throw new Error(
      `Sighash type is not allowed. Retry the sign method passing the sighashTypes array of whitelisted types. Sighash type: ${r}`
    );
  }
}
function n3(e, t, r) {
  let n;
  switch (t) {
    case "multisig":
      const i = o3(e, r);
      n = Qt.p2ms({
        output: e,
        signatures: i
      });
      break;
    case "pubkey":
      n = Qt.p2pk({
        output: e,
        signature: r[0].signature
      });
      break;
    case "pubkeyhash":
      n = Qt.p2pkh({
        output: e,
        pubkey: r[0].pubkey,
        signature: r[0].signature
      });
      break;
    case "witnesspubkeyhash":
      n = Qt.p2wpkh({
        output: e,
        pubkey: r[0].pubkey,
        signature: r[0].signature
      });
      break;
  }
  return n;
}
function i3(e, t, r) {
  const n = r.__TX, i = {
    script: null,
    isSegwit: !1,
    isP2SH: !1,
    isP2WSH: !1
  };
  if (i.isP2SH = !!t.redeemScript, i.isP2WSH = !!t.witnessScript, t.witnessScript)
    i.script = t.witnessScript;
  else if (t.redeemScript)
    i.script = t.redeemScript;
  else if (t.nonWitnessUtxo) {
    const o = sf(
      r,
      t,
      e
    ), s = n.ins[e].index;
    i.script = o.outs[s].script;
  } else
    t.witnessUtxo && (i.script = t.witnessUtxo.script);
  return (t.witnessScript || (0, et.isP2WPKH)(i.script)) && (i.isSegwit = !0), i;
}
function Gp(e, t, r) {
  const n = (0, xt.checkForInput)(t, e);
  if (!n.bip32Derivation || n.bip32Derivation.length === 0)
    throw new Error("Need bip32Derivation to sign with HD");
  const i = n.bip32Derivation.map((s) => {
    if (s.masterFingerprint.equals(r.fingerprint))
      return s;
  }).filter((s) => !!s);
  if (i.length === 0)
    throw new Error(
      "Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint"
    );
  return i.map((s) => {
    const a = r.derivePath(s.path);
    if (!s.pubkey.equals(a.publicKey))
      throw new Error("pubkey did not match bip32Derivation");
    return a;
  });
}
function o3(e, t) {
  return Qt.p2ms({ output: e }).pubkeys.map((n) => (t.filter((i) => i.pubkey.equals(n))[0] || {}).signature).filter((n) => !!n);
}
function ug(e) {
  let t = 0;
  function r(s) {
    return t += s, e.slice(t - s, t);
  }
  function n() {
    const s = $p.decode(e, t);
    return t += $p.decode.bytes, s;
  }
  function i() {
    return r(n());
  }
  function o() {
    const s = n(), a = [];
    for (let f = 0; f < s; f++)
      a.push(i());
    return a;
  }
  return o();
}
function s3(e) {
  let t = e & bt.Transaction.SIGHASH_ANYONECANPAY ? "SIGHASH_ANYONECANPAY | " : "";
  switch (e & 31) {
    case bt.Transaction.SIGHASH_ALL:
      t += "SIGHASH_ALL";
      break;
    case bt.Transaction.SIGHASH_SINGLE:
      t += "SIGHASH_SINGLE";
      break;
    case bt.Transaction.SIGHASH_NONE:
      t += "SIGHASH_NONE";
      break;
  }
  return t;
}
function Eu(e, t, r) {
  e.__NON_WITNESS_UTXO_BUF_CACHE[r] = t.nonWitnessUtxo;
  const n = bt.Transaction.fromBuffer(t.nonWitnessUtxo);
  e.__NON_WITNESS_UTXO_TX_CACHE[r] = n;
  const i = e, o = r;
  delete t.nonWitnessUtxo, Object.defineProperty(t, "nonWitnessUtxo", {
    enumerable: !0,
    get() {
      const s = i.__NON_WITNESS_UTXO_BUF_CACHE[o], a = i.__NON_WITNESS_UTXO_TX_CACHE[o];
      if (s !== void 0)
        return s;
      {
        const f = a.toBuffer();
        return i.__NON_WITNESS_UTXO_BUF_CACHE[o] = f, f;
      }
    },
    set(s) {
      i.__NON_WITNESS_UTXO_BUF_CACHE[o] = s;
    }
  });
}
function lg(e, t, r, n) {
  let i = 0;
  e.forEach((f, l) => {
    if (n && f.finalScriptSig && (t.ins[l].script = f.finalScriptSig), n && f.finalScriptWitness && (t.ins[l].witness = ug(
      f.finalScriptWitness
    )), f.witnessUtxo)
      i += f.witnessUtxo.value;
    else if (f.nonWitnessUtxo) {
      const h = sf(r, f, l), y = t.ins[l].index, v = h.outs[y];
      i += v.value;
    }
  });
  const o = t.outs.reduce((f, l) => f + l.value, 0), s = i - o;
  if (s < 0)
    throw new Error("Outputs are spending more than Inputs");
  const a = t.virtualSize();
  r.__FEE = s, r.__EXTRACTED_TX = t, r.__FEE_RATE = Math.floor(s / a);
}
function sf(e, t, r) {
  const n = e.__NON_WITNESS_UTXO_TX_CACHE;
  return n[r] || Eu(e, t, r), n[r];
}
function hg(e, t, r) {
  const { script: n } = kl(e, t, r);
  return n;
}
function kl(e, t, r) {
  if (t.witnessUtxo !== void 0)
    return {
      script: t.witnessUtxo.script,
      value: t.witnessUtxo.value
    };
  if (t.nonWitnessUtxo !== void 0) {
    const i = sf(
      r,
      t,
      e
    ).outs[r.__TX.ins[e].index];
    return { script: i.script, value: i.value };
  } else
    throw new Error("Can't find pubkey in input without Utxo data");
}
function a3(e, t, r, n) {
  const i = hg(r, t, n), { meaningfulScript: o } = af(
    i,
    r,
    "input",
    t.redeemScript,
    t.witnessScript
  );
  return (0, et.pubkeyInScript)(e, o);
}
function f3(e, t, r, n) {
  const i = n.__TX.outs[r].script, { meaningfulScript: o } = af(
    i,
    r,
    "output",
    t.redeemScript,
    t.witnessScript
  );
  return (0, et.pubkeyInScript)(e, o);
}
function c3(e) {
  if (!e)
    return;
  const t = Fr.decompile(e);
  if (!t)
    return;
  const r = t[t.length - 1];
  if (!(!N.Buffer.isBuffer(r) || pg(r) || h3(r) || !Fr.decompile(r)))
    return r;
}
function u3(e) {
  if (!e)
    return;
  const t = ug(e), r = t[t.length - 1];
  if (!(pg(r) || !Fr.decompile(r)))
    return r;
}
function l3(e) {
  if (e.length === 65) {
    const t = e[64] & 1, r = e.slice(0, 33);
    return r[0] = 2 | t, r;
  }
  return e.slice();
}
function pg(e) {
  return e.length === 33 && Fr.isCanonicalPubKey(e);
}
function h3(e) {
  return Fr.isCanonicalScriptSignature(e);
}
function af(e, t, r, n, i) {
  const o = (0, et.isP2SHScript)(e), s = o && n && (0, et.isP2WSHScript)(n), a = (0, et.isP2WSHScript)(e);
  if (o && n === void 0)
    throw new Error("scriptPubkey is P2SH but redeemScript missing");
  if ((a || s) && i === void 0)
    throw new Error(
      "scriptPubkey or redeemScript is P2WSH but witnessScript missing"
    );
  let f;
  return s ? (f = i, Mp(t, e, n, r), Fp(t, n, i, r), va(f)) : a ? (f = i, Fp(t, e, i, r), va(f)) : o ? (f = n, Mp(t, e, n, r)) : f = e, {
    meaningfulScript: f,
    type: s ? "p2sh-p2wsh" : o ? "p2sh" : a ? "p2wsh" : "raw"
  };
}
function va(e) {
  if ((0, et.isP2WPKH)(e) || (0, et.isP2SHScript)(e))
    throw new Error("P2WPKH or P2SH can not be contained within P2WSH");
}
function dg(e) {
  return (0, et.isP2WPKH)(e) ? "witnesspubkeyhash" : (0, et.isP2PKH)(e) ? "pubkeyhash" : (0, et.isP2MS)(e) ? "multisig" : (0, et.isP2PK)(e) ? "pubkey" : "nonstandard";
}
function go(e) {
  return [...Array(e).keys()];
}
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.initEccLib = e.Transaction = e.opcodes = e.Psbt = e.Block = e.script = e.payments = e.networks = e.crypto = e.address = void 0;
  const t = Ut;
  e.address = t;
  const r = Ir;
  e.crypto = r;
  const n = pt;
  e.networks = n;
  const i = oo;
  e.payments = i;
  const o = Ht;
  e.script = o;
  var s = Qa;
  Object.defineProperty(e, "Block", {
    enumerable: !0,
    get: function() {
      return s.Block;
    }
  });
  var a = tf;
  Object.defineProperty(e, "Psbt", {
    enumerable: !0,
    get: function() {
      return a.Psbt;
    }
  });
  var f = vn;
  Object.defineProperty(e, "opcodes", {
    enumerable: !0,
    get: function() {
      return f.OPS;
    }
  });
  var l = Sn;
  Object.defineProperty(e, "Transaction", {
    enumerable: !0,
    get: function() {
      return l.Transaction;
    }
  });
  var h = wn;
  Object.defineProperty(e, "initEccLib", {
    enumerable: !0,
    get: function() {
      return h.initEccLib;
    }
  });
})(qr);
var Rl = {}, Qi = {}, eo = {};
Object.defineProperty(eo, "__esModule", { value: !0 });
eo.testnet = eo.bitcoin = void 0;
eo.bitcoin = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "bc",
  bip32: {
    public: 76067358,
    private: 76066276
  },
  pubKeyHash: 0,
  scriptHash: 5,
  wif: 128
};
eo.testnet = {
  messagePrefix: `Bitcoin Signed Message:
`,
  bech32: "tb",
  bip32: {
    public: 70617039,
    private: 70615956
  },
  pubKeyHash: 111,
  scriptHash: 196,
  wif: 239
};
var yg = {};
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.maybe = e.Boolean = e.Array = e.Buffer256bit = e.Network = e.typeforce = void 0, e.typeforce = De, e.Network = e.typeforce.compile({
    messagePrefix: e.typeforce.oneOf(
      e.typeforce.Buffer,
      e.typeforce.String
    ),
    bip32: {
      public: e.typeforce.UInt32,
      private: e.typeforce.UInt32
    },
    pubKeyHash: e.typeforce.UInt8,
    scriptHash: e.typeforce.UInt8,
    wif: e.typeforce.UInt8
  }), e.Buffer256bit = e.typeforce.BufferN(32), e.Array = e.typeforce.Array, e.Boolean = e.typeforce.Boolean, e.maybe = e.typeforce.maybe;
})(yg);
var _u = { exports: {} }, uc = 65536, p3 = 4294967295;
function d3() {
  throw new Error(`Secure random number generation is not supported by this browser.
Use Chrome, Firefox or Internet Explorer 11`);
}
var y3 = Re.Buffer, wa = Ar.crypto || Ar.msCrypto;
wa && wa.getRandomValues ? _u.exports = g3 : _u.exports = d3;
function g3(e, t) {
  if (e > p3)
    throw new RangeError("requested too many random bytes");
  var r = y3.allocUnsafe(e);
  if (e > 0)
    if (e > uc)
      for (var n = 0; n < e; n += uc)
        wa.getRandomValues(r.slice(n, n + uc));
    else
      wa.getRandomValues(r);
  return typeof t == "function" ? N.process.nextTick(function() {
    t(null, r);
  }) : r;
}
var gg = _u.exports, Su = { exports: {} };
typeof Object.create == "function" ? Su.exports = function(t, r) {
  r && (t.super_ = r, t.prototype = Object.create(r.prototype, {
    constructor: {
      value: t,
      enumerable: !1,
      writable: !0,
      configurable: !0
    }
  }));
} : Su.exports = function(t, r) {
  if (r) {
    t.super_ = r;
    var n = function() {
    };
    n.prototype = r.prototype, t.prototype = new n(), t.prototype.constructor = t;
  }
};
var ot = Su.exports, Ou = { exports: {} }, Nl = { exports: {} }, ji = typeof Reflect == "object" ? Reflect : null, Vp = ji && typeof ji.apply == "function" ? ji.apply : function(t, r, n) {
  return Function.prototype.apply.call(t, r, n);
}, Js;
ji && typeof ji.ownKeys == "function" ? Js = ji.ownKeys : Object.getOwnPropertySymbols ? Js = function(t) {
  return Object.getOwnPropertyNames(t).concat(Object.getOwnPropertySymbols(t));
} : Js = function(t) {
  return Object.getOwnPropertyNames(t);
};
function b3(e) {
  console && console.warn && console.warn(e);
}
var bg = Number.isNaN || function(t) {
  return t !== t;
};
function Le() {
  Le.init.call(this);
}
Nl.exports = Le;
Nl.exports.once = E3;
Le.EventEmitter = Le;
Le.prototype._events = void 0;
Le.prototype._eventsCount = 0;
Le.prototype._maxListeners = void 0;
var Wp = 10;
function ff(e) {
  if (typeof e != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof e);
}
Object.defineProperty(Le, "defaultMaxListeners", {
  enumerable: !0,
  get: function() {
    return Wp;
  },
  set: function(e) {
    if (typeof e != "number" || e < 0 || bg(e))
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + e + ".");
    Wp = e;
  }
});
Le.init = function() {
  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
Le.prototype.setMaxListeners = function(t) {
  if (typeof t != "number" || t < 0 || bg(t))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + t + ".");
  return this._maxListeners = t, this;
};
function vg(e) {
  return e._maxListeners === void 0 ? Le.defaultMaxListeners : e._maxListeners;
}
Le.prototype.getMaxListeners = function() {
  return vg(this);
};
Le.prototype.emit = function(t) {
  for (var r = [], n = 1; n < arguments.length; n++)
    r.push(arguments[n]);
  var i = t === "error", o = this._events;
  if (o !== void 0)
    i = i && o.error === void 0;
  else if (!i)
    return !1;
  if (i) {
    var s;
    if (r.length > 0 && (s = r[0]), s instanceof Error)
      throw s;
    var a = new Error("Unhandled error." + (s ? " (" + s.message + ")" : ""));
    throw a.context = s, a;
  }
  var f = o[t];
  if (f === void 0)
    return !1;
  if (typeof f == "function")
    Vp(f, this, r);
  else
    for (var l = f.length, h = Sg(f, l), n = 0; n < l; ++n)
      Vp(h[n], this, r);
  return !0;
};
function wg(e, t, r, n) {
  var i, o, s;
  if (ff(r), o = e._events, o === void 0 ? (o = e._events = /* @__PURE__ */ Object.create(null), e._eventsCount = 0) : (o.newListener !== void 0 && (e.emit(
    "newListener",
    t,
    r.listener ? r.listener : r
  ), o = e._events), s = o[t]), s === void 0)
    s = o[t] = r, ++e._eventsCount;
  else if (typeof s == "function" ? s = o[t] = n ? [r, s] : [s, r] : n ? s.unshift(r) : s.push(r), i = vg(e), i > 0 && s.length > i && !s.warned) {
    s.warned = !0;
    var a = new Error("Possible EventEmitter memory leak detected. " + s.length + " " + String(t) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    a.name = "MaxListenersExceededWarning", a.emitter = e, a.type = t, a.count = s.length, b3(a);
  }
  return e;
}
Le.prototype.addListener = function(t, r) {
  return wg(this, t, r, !1);
};
Le.prototype.on = Le.prototype.addListener;
Le.prototype.prependListener = function(t, r) {
  return wg(this, t, r, !0);
};
function v3() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function mg(e, t, r) {
  var n = { fired: !1, wrapFn: void 0, target: e, type: t, listener: r }, i = v3.bind(n);
  return i.listener = r, n.wrapFn = i, i;
}
Le.prototype.once = function(t, r) {
  return ff(r), this.on(t, mg(this, t, r)), this;
};
Le.prototype.prependOnceListener = function(t, r) {
  return ff(r), this.prependListener(t, mg(this, t, r)), this;
};
Le.prototype.removeListener = function(t, r) {
  var n, i, o, s, a;
  if (ff(r), i = this._events, i === void 0)
    return this;
  if (n = i[t], n === void 0)
    return this;
  if (n === r || n.listener === r)
    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete i[t], i.removeListener && this.emit("removeListener", t, n.listener || r));
  else if (typeof n != "function") {
    for (o = -1, s = n.length - 1; s >= 0; s--)
      if (n[s] === r || n[s].listener === r) {
        a = n[s].listener, o = s;
        break;
      }
    if (o < 0)
      return this;
    o === 0 ? n.shift() : w3(n, o), n.length === 1 && (i[t] = n[0]), i.removeListener !== void 0 && this.emit("removeListener", t, a || r);
  }
  return this;
};
Le.prototype.off = Le.prototype.removeListener;
Le.prototype.removeAllListeners = function(t) {
  var r, n, i;
  if (n = this._events, n === void 0)
    return this;
  if (n.removeListener === void 0)
    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : n[t] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete n[t]), this;
  if (arguments.length === 0) {
    var o = Object.keys(n), s;
    for (i = 0; i < o.length; ++i)
      s = o[i], s !== "removeListener" && this.removeAllListeners(s);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (r = n[t], typeof r == "function")
    this.removeListener(t, r);
  else if (r !== void 0)
    for (i = r.length - 1; i >= 0; i--)
      this.removeListener(t, r[i]);
  return this;
};
function Eg(e, t, r) {
  var n = e._events;
  if (n === void 0)
    return [];
  var i = n[t];
  return i === void 0 ? [] : typeof i == "function" ? r ? [i.listener || i] : [i] : r ? m3(i) : Sg(i, i.length);
}
Le.prototype.listeners = function(t) {
  return Eg(this, t, !0);
};
Le.prototype.rawListeners = function(t) {
  return Eg(this, t, !1);
};
Le.listenerCount = function(e, t) {
  return typeof e.listenerCount == "function" ? e.listenerCount(t) : _g.call(e, t);
};
Le.prototype.listenerCount = _g;
function _g(e) {
  var t = this._events;
  if (t !== void 0) {
    var r = t[e];
    if (typeof r == "function")
      return 1;
    if (r !== void 0)
      return r.length;
  }
  return 0;
}
Le.prototype.eventNames = function() {
  return this._eventsCount > 0 ? Js(this._events) : [];
};
function Sg(e, t) {
  for (var r = new Array(t), n = 0; n < t; ++n)
    r[n] = e[n];
  return r;
}
function w3(e, t) {
  for (; t + 1 < e.length; t++)
    e[t] = e[t + 1];
  e.pop();
}
function m3(e) {
  for (var t = new Array(e.length), r = 0; r < t.length; ++r)
    t[r] = e[r].listener || e[r];
  return t;
}
function E3(e, t) {
  return new Promise(function(r, n) {
    function i(s) {
      e.removeListener(t, o), n(s);
    }
    function o() {
      typeof e.removeListener == "function" && e.removeListener("error", i), r([].slice.call(arguments));
    }
    Og(e, t, o, { once: !0 }), t !== "error" && _3(e, i, { once: !0 });
  });
}
function _3(e, t, r) {
  typeof e.on == "function" && Og(e, "error", t, r);
}
function Og(e, t, r, n) {
  if (typeof e.on == "function")
    n.once ? e.once(t, r) : e.on(t, r);
  else if (typeof e.addEventListener == "function")
    e.addEventListener(t, function i(o) {
      n.once && e.removeEventListener(t, i), r(o);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof e);
}
var Ag = Nl.exports, Tg = Ag.EventEmitter, En = {}, Ig = {}, Ul = function() {
  if (typeof Symbol != "function" || typeof Object.getOwnPropertySymbols != "function")
    return !1;
  if (typeof Symbol.iterator == "symbol")
    return !0;
  var t = {}, r = Symbol("test"), n = Object(r);
  if (typeof r == "string" || Object.prototype.toString.call(r) !== "[object Symbol]" || Object.prototype.toString.call(n) !== "[object Symbol]")
    return !1;
  var i = 42;
  t[r] = i;
  for (r in t)
    return !1;
  if (typeof Object.keys == "function" && Object.keys(t).length !== 0 || typeof Object.getOwnPropertyNames == "function" && Object.getOwnPropertyNames(t).length !== 0)
    return !1;
  var o = Object.getOwnPropertySymbols(t);
  if (o.length !== 1 || o[0] !== r || !Object.prototype.propertyIsEnumerable.call(t, r))
    return !1;
  if (typeof Object.getOwnPropertyDescriptor == "function") {
    var s = Object.getOwnPropertyDescriptor(t, r);
    if (s.value !== i || s.enumerable !== !0)
      return !1;
  }
  return !0;
}, S3 = Ul, Cl = function() {
  return S3() && !!Symbol.toStringTag;
}, zp = typeof Symbol < "u" && Symbol, O3 = Ul, A3 = function() {
  return typeof zp != "function" || typeof Symbol != "function" || typeof zp("foo") != "symbol" || typeof Symbol("bar") != "symbol" ? !1 : O3();
}, Xp = {
  foo: {}
}, T3 = Object, I3 = function() {
  return { __proto__: Xp }.foo === Xp.foo && !({ __proto__: null } instanceof T3);
}, P3 = "Function.prototype.bind called on incompatible ", lc = Array.prototype.slice, x3 = Object.prototype.toString, B3 = "[object Function]", k3 = function(t) {
  var r = this;
  if (typeof r != "function" || x3.call(r) !== B3)
    throw new TypeError(P3 + r);
  for (var n = lc.call(arguments, 1), i, o = function() {
    if (this instanceof i) {
      var h = r.apply(
        this,
        n.concat(lc.call(arguments))
      );
      return Object(h) === h ? h : this;
    } else
      return r.apply(
        t,
        n.concat(lc.call(arguments))
      );
  }, s = Math.max(0, r.length - n.length), a = [], f = 0; f < s; f++)
    a.push("$" + f);
  if (i = Function("binder", "return function (" + a.join(",") + "){ return binder.apply(this,arguments); }")(o), r.prototype) {
    var l = function() {
    };
    l.prototype = r.prototype, i.prototype = new l(), l.prototype = null;
  }
  return i;
}, R3 = k3, $l = Function.prototype.bind || R3, N3 = $l, U3 = N3.call(Function.call, Object.prototype.hasOwnProperty), Pe, to = SyntaxError, Pg = Function, Ki = TypeError, hc = function(e) {
  try {
    return Pg('"use strict"; return (' + e + ").constructor;")();
  } catch {
  }
}, Kn = Object.getOwnPropertyDescriptor;
if (Kn)
  try {
    Kn({}, "");
  } catch {
    Kn = null;
  }
var pc = function() {
  throw new Ki();
}, C3 = Kn ? function() {
  try {
    return arguments.callee, pc;
  } catch {
    try {
      return Kn(arguments, "callee").get;
    } catch {
      return pc;
    }
  }
}() : pc, Oi = A3(), $3 = I3(), ct = Object.getPrototypeOf || ($3 ? function(e) {
  return e.__proto__;
} : null), ki = {}, H3 = typeof Uint8Array > "u" || !ct ? Pe : ct(Uint8Array), qn = {
  "%AggregateError%": typeof AggregateError > "u" ? Pe : AggregateError,
  "%Array%": Array,
  "%ArrayBuffer%": typeof ArrayBuffer > "u" ? Pe : ArrayBuffer,
  "%ArrayIteratorPrototype%": Oi && ct ? ct([][Symbol.iterator]()) : Pe,
  "%AsyncFromSyncIteratorPrototype%": Pe,
  "%AsyncFunction%": ki,
  "%AsyncGenerator%": ki,
  "%AsyncGeneratorFunction%": ki,
  "%AsyncIteratorPrototype%": ki,
  "%Atomics%": typeof Atomics > "u" ? Pe : Atomics,
  "%BigInt%": typeof BigInt > "u" ? Pe : BigInt,
  "%BigInt64Array%": typeof BigInt64Array > "u" ? Pe : BigInt64Array,
  "%BigUint64Array%": typeof BigUint64Array > "u" ? Pe : BigUint64Array,
  "%Boolean%": Boolean,
  "%DataView%": typeof DataView > "u" ? Pe : DataView,
  "%Date%": Date,
  "%decodeURI%": decodeURI,
  "%decodeURIComponent%": decodeURIComponent,
  "%encodeURI%": encodeURI,
  "%encodeURIComponent%": encodeURIComponent,
  "%Error%": Error,
  "%eval%": eval,
  // eslint-disable-line no-eval
  "%EvalError%": EvalError,
  "%Float32Array%": typeof Float32Array > "u" ? Pe : Float32Array,
  "%Float64Array%": typeof Float64Array > "u" ? Pe : Float64Array,
  "%FinalizationRegistry%": typeof FinalizationRegistry > "u" ? Pe : FinalizationRegistry,
  "%Function%": Pg,
  "%GeneratorFunction%": ki,
  "%Int8Array%": typeof Int8Array > "u" ? Pe : Int8Array,
  "%Int16Array%": typeof Int16Array > "u" ? Pe : Int16Array,
  "%Int32Array%": typeof Int32Array > "u" ? Pe : Int32Array,
  "%isFinite%": isFinite,
  "%isNaN%": isNaN,
  "%IteratorPrototype%": Oi && ct ? ct(ct([][Symbol.iterator]())) : Pe,
  "%JSON%": typeof JSON == "object" ? JSON : Pe,
  "%Map%": typeof Map > "u" ? Pe : Map,
  "%MapIteratorPrototype%": typeof Map > "u" || !Oi || !ct ? Pe : ct((/* @__PURE__ */ new Map())[Symbol.iterator]()),
  "%Math%": Math,
  "%Number%": Number,
  "%Object%": Object,
  "%parseFloat%": parseFloat,
  "%parseInt%": parseInt,
  "%Promise%": typeof Promise > "u" ? Pe : Promise,
  "%Proxy%": typeof Proxy > "u" ? Pe : Proxy,
  "%RangeError%": RangeError,
  "%ReferenceError%": ReferenceError,
  "%Reflect%": typeof Reflect > "u" ? Pe : Reflect,
  "%RegExp%": RegExp,
  "%Set%": typeof Set > "u" ? Pe : Set,
  "%SetIteratorPrototype%": typeof Set > "u" || !Oi || !ct ? Pe : ct((/* @__PURE__ */ new Set())[Symbol.iterator]()),
  "%SharedArrayBuffer%": typeof SharedArrayBuffer > "u" ? Pe : SharedArrayBuffer,
  "%String%": String,
  "%StringIteratorPrototype%": Oi && ct ? ct(""[Symbol.iterator]()) : Pe,
  "%Symbol%": Oi ? Symbol : Pe,
  "%SyntaxError%": to,
  "%ThrowTypeError%": C3,
  "%TypedArray%": H3,
  "%TypeError%": Ki,
  "%Uint8Array%": typeof Uint8Array > "u" ? Pe : Uint8Array,
  "%Uint8ClampedArray%": typeof Uint8ClampedArray > "u" ? Pe : Uint8ClampedArray,
  "%Uint16Array%": typeof Uint16Array > "u" ? Pe : Uint16Array,
  "%Uint32Array%": typeof Uint32Array > "u" ? Pe : Uint32Array,
  "%URIError%": URIError,
  "%WeakMap%": typeof WeakMap > "u" ? Pe : WeakMap,
  "%WeakRef%": typeof WeakRef > "u" ? Pe : WeakRef,
  "%WeakSet%": typeof WeakSet > "u" ? Pe : WeakSet
};
if (ct)
  try {
    null.error;
  } catch (e) {
    var L3 = ct(ct(e));
    qn["%Error.prototype%"] = L3;
  }
var D3 = function e(t) {
  var r;
  if (t === "%AsyncFunction%")
    r = hc("async function () {}");
  else if (t === "%GeneratorFunction%")
    r = hc("function* () {}");
  else if (t === "%AsyncGeneratorFunction%")
    r = hc("async function* () {}");
  else if (t === "%AsyncGenerator%") {
    var n = e("%AsyncGeneratorFunction%");
    n && (r = n.prototype);
  } else if (t === "%AsyncIteratorPrototype%") {
    var i = e("%AsyncGenerator%");
    i && ct && (r = ct(i.prototype));
  }
  return qn[t] = r, r;
}, Yp = {
  "%ArrayBufferPrototype%": ["ArrayBuffer", "prototype"],
  "%ArrayPrototype%": ["Array", "prototype"],
  "%ArrayProto_entries%": ["Array", "prototype", "entries"],
  "%ArrayProto_forEach%": ["Array", "prototype", "forEach"],
  "%ArrayProto_keys%": ["Array", "prototype", "keys"],
  "%ArrayProto_values%": ["Array", "prototype", "values"],
  "%AsyncFunctionPrototype%": ["AsyncFunction", "prototype"],
  "%AsyncGenerator%": ["AsyncGeneratorFunction", "prototype"],
  "%AsyncGeneratorPrototype%": ["AsyncGeneratorFunction", "prototype", "prototype"],
  "%BooleanPrototype%": ["Boolean", "prototype"],
  "%DataViewPrototype%": ["DataView", "prototype"],
  "%DatePrototype%": ["Date", "prototype"],
  "%ErrorPrototype%": ["Error", "prototype"],
  "%EvalErrorPrototype%": ["EvalError", "prototype"],
  "%Float32ArrayPrototype%": ["Float32Array", "prototype"],
  "%Float64ArrayPrototype%": ["Float64Array", "prototype"],
  "%FunctionPrototype%": ["Function", "prototype"],
  "%Generator%": ["GeneratorFunction", "prototype"],
  "%GeneratorPrototype%": ["GeneratorFunction", "prototype", "prototype"],
  "%Int8ArrayPrototype%": ["Int8Array", "prototype"],
  "%Int16ArrayPrototype%": ["Int16Array", "prototype"],
  "%Int32ArrayPrototype%": ["Int32Array", "prototype"],
  "%JSONParse%": ["JSON", "parse"],
  "%JSONStringify%": ["JSON", "stringify"],
  "%MapPrototype%": ["Map", "prototype"],
  "%NumberPrototype%": ["Number", "prototype"],
  "%ObjectPrototype%": ["Object", "prototype"],
  "%ObjProto_toString%": ["Object", "prototype", "toString"],
  "%ObjProto_valueOf%": ["Object", "prototype", "valueOf"],
  "%PromisePrototype%": ["Promise", "prototype"],
  "%PromiseProto_then%": ["Promise", "prototype", "then"],
  "%Promise_all%": ["Promise", "all"],
  "%Promise_reject%": ["Promise", "reject"],
  "%Promise_resolve%": ["Promise", "resolve"],
  "%RangeErrorPrototype%": ["RangeError", "prototype"],
  "%ReferenceErrorPrototype%": ["ReferenceError", "prototype"],
  "%RegExpPrototype%": ["RegExp", "prototype"],
  "%SetPrototype%": ["Set", "prototype"],
  "%SharedArrayBufferPrototype%": ["SharedArrayBuffer", "prototype"],
  "%StringPrototype%": ["String", "prototype"],
  "%SymbolPrototype%": ["Symbol", "prototype"],
  "%SyntaxErrorPrototype%": ["SyntaxError", "prototype"],
  "%TypedArrayPrototype%": ["TypedArray", "prototype"],
  "%TypeErrorPrototype%": ["TypeError", "prototype"],
  "%Uint8ArrayPrototype%": ["Uint8Array", "prototype"],
  "%Uint8ClampedArrayPrototype%": ["Uint8ClampedArray", "prototype"],
  "%Uint16ArrayPrototype%": ["Uint16Array", "prototype"],
  "%Uint32ArrayPrototype%": ["Uint32Array", "prototype"],
  "%URIErrorPrototype%": ["URIError", "prototype"],
  "%WeakMapPrototype%": ["WeakMap", "prototype"],
  "%WeakSetPrototype%": ["WeakSet", "prototype"]
}, rs = $l, ma = U3, M3 = rs.call(Function.call, Array.prototype.concat), F3 = rs.call(Function.apply, Array.prototype.splice), Zp = rs.call(Function.call, String.prototype.replace), Ea = rs.call(Function.call, String.prototype.slice), j3 = rs.call(Function.call, RegExp.prototype.exec), K3 = /[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g, q3 = /\\(\\)?/g, G3 = function(t) {
  var r = Ea(t, 0, 1), n = Ea(t, -1);
  if (r === "%" && n !== "%")
    throw new to("invalid intrinsic syntax, expected closing `%`");
  if (n === "%" && r !== "%")
    throw new to("invalid intrinsic syntax, expected opening `%`");
  var i = [];
  return Zp(t, K3, function(o, s, a, f) {
    i[i.length] = a ? Zp(f, q3, "$1") : s || o;
  }), i;
}, V3 = function(t, r) {
  var n = t, i;
  if (ma(Yp, n) && (i = Yp[n], n = "%" + i[0] + "%"), ma(qn, n)) {
    var o = qn[n];
    if (o === ki && (o = D3(n)), typeof o > "u" && !r)
      throw new Ki("intrinsic " + t + " exists, but is not available. Please file an issue!");
    return {
      alias: i,
      name: n,
      value: o
    };
  }
  throw new to("intrinsic " + t + " does not exist!");
}, ns = function(t, r) {
  if (typeof t != "string" || t.length === 0)
    throw new Ki("intrinsic name must be a non-empty string");
  if (arguments.length > 1 && typeof r != "boolean")
    throw new Ki('"allowMissing" argument must be a boolean');
  if (j3(/^%?[^%]*%?$/, t) === null)
    throw new to("`%` may not be present anywhere but at the beginning and end of the intrinsic name");
  var n = G3(t), i = n.length > 0 ? n[0] : "", o = V3("%" + i + "%", r), s = o.name, a = o.value, f = !1, l = o.alias;
  l && (i = l[0], F3(n, M3([0, 1], l)));
  for (var h = 1, y = !0; h < n.length; h += 1) {
    var v = n[h], g = Ea(v, 0, 1), m = Ea(v, -1);
    if ((g === '"' || g === "'" || g === "`" || m === '"' || m === "'" || m === "`") && g !== m)
      throw new to("property names with quotes must have matching quotes");
    if ((v === "constructor" || !y) && (f = !0), i += "." + v, s = "%" + i + "%", ma(qn, s))
      a = qn[s];
    else if (a != null) {
      if (!(v in a)) {
        if (!r)
          throw new Ki("base intrinsic for " + t + " exists, but the property is not available.");
        return;
      }
      if (Kn && h + 1 >= n.length) {
        var E = Kn(a, v);
        y = !!E, y && "get" in E && !("originalValue" in E.get) ? a = E.get : a = a[v];
      } else
        y = ma(a, v), a = a[v];
      y && !f && (qn[s] = a);
    }
  }
  return a;
}, xg = { exports: {} };
(function(e) {
  var t = $l, r = ns, n = r("%Function.prototype.apply%"), i = r("%Function.prototype.call%"), o = r("%Reflect.apply%", !0) || t.call(i, n), s = r("%Object.getOwnPropertyDescriptor%", !0), a = r("%Object.defineProperty%", !0), f = r("%Math.max%");
  if (a)
    try {
      a({}, "a", { value: 1 });
    } catch {
      a = null;
    }
  e.exports = function(y) {
    var v = o(t, i, arguments);
    if (s && a) {
      var g = s(v, "length");
      g.configurable && a(
        v,
        "length",
        { value: 1 + f(0, y.length - (arguments.length - 1)) }
      );
    }
    return v;
  };
  var l = function() {
    return o(t, n, arguments);
  };
  a ? a(e.exports, "apply", { value: l }) : e.exports.apply = l;
})(xg);
var cf = xg.exports, Bg = ns, kg = cf, W3 = kg(Bg("String.prototype.indexOf")), uf = function(t, r) {
  var n = Bg(t, !!r);
  return typeof n == "function" && W3(t, ".prototype.") > -1 ? kg(n) : n;
}, z3 = Cl(), X3 = uf, Au = X3("Object.prototype.toString"), lf = function(t) {
  return z3 && t && typeof t == "object" && Symbol.toStringTag in t ? !1 : Au(t) === "[object Arguments]";
}, Rg = function(t) {
  return lf(t) ? !0 : t !== null && typeof t == "object" && typeof t.length == "number" && t.length >= 0 && Au(t) !== "[object Array]" && Au(t.callee) === "[object Function]";
}, Y3 = function() {
  return lf(arguments);
}();
lf.isLegacyArguments = Rg;
var Z3 = Y3 ? lf : Rg, J3 = Object.prototype.toString, Q3 = Function.prototype.toString, eO = /^\s*(?:function)?\*/, Ng = Cl(), dc = Object.getPrototypeOf, tO = function() {
  if (!Ng)
    return !1;
  try {
    return Function("return function*() {}")();
  } catch {
  }
}, yc, rO = function(t) {
  if (typeof t != "function")
    return !1;
  if (eO.test(Q3.call(t)))
    return !0;
  if (!Ng) {
    var r = J3.call(t);
    return r === "[object GeneratorFunction]";
  }
  if (!dc)
    return !1;
  if (typeof yc > "u") {
    var n = tO();
    yc = n ? dc(n) : !1;
  }
  return dc(t) === yc;
}, Ug = Function.prototype.toString, Ni = typeof Reflect == "object" && Reflect !== null && Reflect.apply, Tu, Qs;
if (typeof Ni == "function" && typeof Object.defineProperty == "function")
  try {
    Tu = Object.defineProperty({}, "length", {
      get: function() {
        throw Qs;
      }
    }), Qs = {}, Ni(function() {
      throw 42;
    }, null, Tu);
  } catch (e) {
    e !== Qs && (Ni = null);
  }
else
  Ni = null;
var nO = /^\s*class\b/, Iu = function(t) {
  try {
    var r = Ug.call(t);
    return nO.test(r);
  } catch {
    return !1;
  }
}, gc = function(t) {
  try {
    return Iu(t) ? !1 : (Ug.call(t), !0);
  } catch {
    return !1;
  }
}, ea = Object.prototype.toString, iO = "[object Object]", oO = "[object Function]", sO = "[object GeneratorFunction]", aO = "[object HTMLAllCollection]", fO = "[object HTML document.all class]", cO = "[object HTMLCollection]", uO = typeof Symbol == "function" && !!Symbol.toStringTag, lO = !(0 in [,]), Pu = function() {
  return !1;
};
if (typeof document == "object") {
  var hO = document.all;
  ea.call(hO) === ea.call(document.all) && (Pu = function(t) {
    if ((lO || !t) && (typeof t > "u" || typeof t == "object"))
      try {
        var r = ea.call(t);
        return (r === aO || r === fO || r === cO || r === iO) && t("") == null;
      } catch {
      }
    return !1;
  });
}
var pO = Ni ? function(t) {
  if (Pu(t))
    return !0;
  if (!t || typeof t != "function" && typeof t != "object")
    return !1;
  try {
    Ni(t, null, Tu);
  } catch (r) {
    if (r !== Qs)
      return !1;
  }
  return !Iu(t) && gc(t);
} : function(t) {
  if (Pu(t))
    return !0;
  if (!t || typeof t != "function" && typeof t != "object")
    return !1;
  if (uO)
    return gc(t);
  if (Iu(t))
    return !1;
  var r = ea.call(t);
  return r !== oO && r !== sO && !/^\[object HTML/.test(r) ? !1 : gc(t);
}, dO = pO, yO = Object.prototype.toString, Cg = Object.prototype.hasOwnProperty, gO = function(t, r, n) {
  for (var i = 0, o = t.length; i < o; i++)
    Cg.call(t, i) && (n == null ? r(t[i], i, t) : r.call(n, t[i], i, t));
}, bO = function(t, r, n) {
  for (var i = 0, o = t.length; i < o; i++)
    n == null ? r(t.charAt(i), i, t) : r.call(n, t.charAt(i), i, t);
}, vO = function(t, r, n) {
  for (var i in t)
    Cg.call(t, i) && (n == null ? r(t[i], i, t) : r.call(n, t[i], i, t));
}, wO = function(t, r, n) {
  if (!dO(r))
    throw new TypeError("iterator must be a function");
  var i;
  arguments.length >= 3 && (i = n), yO.call(t) === "[object Array]" ? gO(t, r, i) : typeof t == "string" ? bO(t, r, i) : vO(t, r, i);
}, mO = wO, bc = [
  "BigInt64Array",
  "BigUint64Array",
  "Float32Array",
  "Float64Array",
  "Int16Array",
  "Int32Array",
  "Int8Array",
  "Uint16Array",
  "Uint32Array",
  "Uint8Array",
  "Uint8ClampedArray"
], EO = typeof globalThis > "u" ? Ar : globalThis, _O = function() {
  for (var t = [], r = 0; r < bc.length; r++)
    typeof EO[bc[r]] == "function" && (t[t.length] = bc[r]);
  return t;
}, SO = ns, ta = SO("%Object.getOwnPropertyDescriptor%", !0);
if (ta)
  try {
    ta([], "length");
  } catch {
    ta = null;
  }
var $g = ta, _a = mO, OO = _O, Jp = cf, Hl = uf, ra = $g, AO = Hl("Object.prototype.toString"), Hg = Cl(), Qp = typeof globalThis > "u" ? Ar : globalThis, xu = OO(), Ll = Hl("String.prototype.slice"), vc = Object.getPrototypeOf, TO = Hl("Array.prototype.indexOf", !0) || function(t, r) {
  for (var n = 0; n < t.length; n += 1)
    if (t[n] === r)
      return n;
  return -1;
}, Sa = { __proto__: null };
Hg && ra && vc ? _a(xu, function(e) {
  var t = new Qp[e]();
  if (Symbol.toStringTag in t) {
    var r = vc(t), n = ra(r, Symbol.toStringTag);
    if (!n) {
      var i = vc(r);
      n = ra(i, Symbol.toStringTag);
    }
    Sa["$" + e] = Jp(n.get);
  }
}) : _a(xu, function(e) {
  var t = new Qp[e]();
  Sa["$" + e] = Jp(t.slice);
});
var IO = function(t) {
  var r = !1;
  return _a(Sa, function(n, i) {
    if (!r)
      try {
        "$" + n(t) === i && (r = Ll(i, 1));
      } catch {
      }
  }), r;
}, PO = function(t) {
  var r = !1;
  return _a(Sa, function(n, i) {
    if (!r)
      try {
        n(t), r = Ll(i, 1);
      } catch {
      }
  }), r;
}, Lg = function(t) {
  if (!t || typeof t != "object")
    return !1;
  if (!Hg) {
    var r = Ll(AO(t), 8, -1);
    return TO(xu, r) > -1 ? r : r !== "Object" ? !1 : PO(t);
  }
  return ra ? IO(t) : null;
}, xO = Lg, BO = function(t) {
  return !!xO(t);
};
(function(e) {
  var t = Z3, r = rO, n = Lg, i = BO;
  function o(Z) {
    return Z.call.bind(Z);
  }
  var s = typeof BigInt < "u", a = typeof Symbol < "u", f = o(Object.prototype.toString), l = o(Number.prototype.valueOf), h = o(String.prototype.valueOf), y = o(Boolean.prototype.valueOf);
  if (s)
    var v = o(BigInt.prototype.valueOf);
  if (a)
    var g = o(Symbol.prototype.valueOf);
  function m(Z, Tt) {
    if (typeof Z != "object")
      return !1;
    try {
      return Tt(Z), !0;
    } catch {
      return !1;
    }
  }
  e.isArgumentsObject = t, e.isGeneratorFunction = r, e.isTypedArray = i;
  function E(Z) {
    return typeof Promise < "u" && Z instanceof Promise || Z !== null && typeof Z == "object" && typeof Z.then == "function" && typeof Z.catch == "function";
  }
  e.isPromise = E;
  function O(Z) {
    return typeof ArrayBuffer < "u" && ArrayBuffer.isView ? ArrayBuffer.isView(Z) : i(Z) || q(Z);
  }
  e.isArrayBufferView = O;
  function x(Z) {
    return n(Z) === "Uint8Array";
  }
  e.isUint8Array = x;
  function U(Z) {
    return n(Z) === "Uint8ClampedArray";
  }
  e.isUint8ClampedArray = U;
  function H(Z) {
    return n(Z) === "Uint16Array";
  }
  e.isUint16Array = H;
  function M(Z) {
    return n(Z) === "Uint32Array";
  }
  e.isUint32Array = M;
  function k(Z) {
    return n(Z) === "Int8Array";
  }
  e.isInt8Array = k;
  function _(Z) {
    return n(Z) === "Int16Array";
  }
  e.isInt16Array = _;
  function L(Z) {
    return n(Z) === "Int32Array";
  }
  e.isInt32Array = L;
  function j(Z) {
    return n(Z) === "Float32Array";
  }
  e.isFloat32Array = j;
  function F(Z) {
    return n(Z) === "Float64Array";
  }
  e.isFloat64Array = F;
  function W(Z) {
    return n(Z) === "BigInt64Array";
  }
  e.isBigInt64Array = W;
  function te(Z) {
    return n(Z) === "BigUint64Array";
  }
  e.isBigUint64Array = te;
  function re(Z) {
    return f(Z) === "[object Map]";
  }
  re.working = typeof Map < "u" && re(/* @__PURE__ */ new Map());
  function ae(Z) {
    return typeof Map > "u" ? !1 : re.working ? re(Z) : Z instanceof Map;
  }
  e.isMap = ae;
  function de(Z) {
    return f(Z) === "[object Set]";
  }
  de.working = typeof Set < "u" && de(/* @__PURE__ */ new Set());
  function J(Z) {
    return typeof Set > "u" ? !1 : de.working ? de(Z) : Z instanceof Set;
  }
  e.isSet = J;
  function ne(Z) {
    return f(Z) === "[object WeakMap]";
  }
  ne.working = typeof WeakMap < "u" && ne(/* @__PURE__ */ new WeakMap());
  function ue(Z) {
    return typeof WeakMap > "u" ? !1 : ne.working ? ne(Z) : Z instanceof WeakMap;
  }
  e.isWeakMap = ue;
  function pe(Z) {
    return f(Z) === "[object WeakSet]";
  }
  pe.working = typeof WeakSet < "u" && pe(/* @__PURE__ */ new WeakSet());
  function z(Z) {
    return pe(Z);
  }
  e.isWeakSet = z;
  function Y(Z) {
    return f(Z) === "[object ArrayBuffer]";
  }
  Y.working = typeof ArrayBuffer < "u" && Y(new ArrayBuffer());
  function ee(Z) {
    return typeof ArrayBuffer > "u" ? !1 : Y.working ? Y(Z) : Z instanceof ArrayBuffer;
  }
  e.isArrayBuffer = ee;
  function $(Z) {
    return f(Z) === "[object DataView]";
  }
  $.working = typeof ArrayBuffer < "u" && typeof DataView < "u" && $(new DataView(new ArrayBuffer(1), 0, 1));
  function q(Z) {
    return typeof DataView > "u" ? !1 : $.working ? $(Z) : Z instanceof DataView;
  }
  e.isDataView = q;
  var X = typeof SharedArrayBuffer < "u" ? SharedArrayBuffer : void 0;
  function ie(Z) {
    return f(Z) === "[object SharedArrayBuffer]";
  }
  function D(Z) {
    return typeof X > "u" ? !1 : (typeof ie.working > "u" && (ie.working = ie(new X())), ie.working ? ie(Z) : Z instanceof X);
  }
  e.isSharedArrayBuffer = D;
  function A(Z) {
    return f(Z) === "[object AsyncFunction]";
  }
  e.isAsyncFunction = A;
  function P(Z) {
    return f(Z) === "[object Map Iterator]";
  }
  e.isMapIterator = P;
  function C(Z) {
    return f(Z) === "[object Set Iterator]";
  }
  e.isSetIterator = C;
  function K(Z) {
    return f(Z) === "[object Generator]";
  }
  e.isGeneratorObject = K;
  function S(Z) {
    return f(Z) === "[object WebAssembly.Module]";
  }
  e.isWebAssemblyCompiledModule = S;
  function T(Z) {
    return m(Z, l);
  }
  e.isNumberObject = T;
  function V(Z) {
    return m(Z, h);
  }
  e.isStringObject = V;
  function Q(Z) {
    return m(Z, y);
  }
  e.isBooleanObject = Q;
  function be(Z) {
    return s && m(Z, v);
  }
  e.isBigIntObject = be;
  function ye(Z) {
    return a && m(Z, g);
  }
  e.isSymbolObject = ye;
  function Ee(Z) {
    return T(Z) || V(Z) || Q(Z) || be(Z) || ye(Z);
  }
  e.isBoxedPrimitive = Ee;
  function Ue(Z) {
    return typeof Uint8Array < "u" && (ee(Z) || D(Z));
  }
  e.isAnyArrayBuffer = Ue, ["isProxy", "isExternal", "isModuleNamespaceObject"].forEach(function(Z) {
    Object.defineProperty(e, Z, {
      enumerable: !1,
      value: function() {
        throw new Error(Z + " is not supported in userland");
      }
    });
  });
})(Ig);
var kO = function(t) {
  return t && typeof t == "object" && typeof t.copy == "function" && typeof t.fill == "function" && typeof t.readUInt8 == "function";
};
(function(e) {
  var t = Object.getOwnPropertyDescriptors || function(q) {
    for (var X = Object.keys(q), ie = {}, D = 0; D < X.length; D++)
      ie[X[D]] = Object.getOwnPropertyDescriptor(q, X[D]);
    return ie;
  }, r = /%[sdj%]/g;
  e.format = function($) {
    if (!k($)) {
      for (var q = [], X = 0; X < arguments.length; X++)
        q.push(s(arguments[X]));
      return q.join(" ");
    }
    for (var X = 1, ie = arguments, D = ie.length, A = String($).replace(r, function(C) {
      if (C === "%%")
        return "%";
      if (X >= D)
        return C;
      switch (C) {
        case "%s":
          return String(ie[X++]);
        case "%d":
          return Number(ie[X++]);
        case "%j":
          try {
            return JSON.stringify(ie[X++]);
          } catch {
            return "[Circular]";
          }
        default:
          return C;
      }
    }), P = ie[X]; X < D; P = ie[++X])
      U(P) || !F(P) ? A += " " + P : A += " " + s(P);
    return A;
  }, e.deprecate = function($, q) {
    if (typeof N.process < "u" && N.process.noDeprecation === !0)
      return $;
    if (typeof N.process > "u")
      return function() {
        return e.deprecate($, q).apply(this, arguments);
      };
    var X = !1;
    function ie() {
      if (!X) {
        if (N.process.throwDeprecation)
          throw new Error(q);
        N.process.traceDeprecation ? console.trace(q) : console.error(q), X = !0;
      }
      return $.apply(this, arguments);
    }
    return ie;
  };
  var n = {}, i = /^$/;
  if (N.process.env.NODE_DEBUG) {
    var o = N.process.env.NODE_DEBUG;
    o = o.replace(/[|\\{}()[\]^$+?.]/g, "\\$&").replace(/\*/g, ".*").replace(/,/g, "$|^").toUpperCase(), i = new RegExp("^" + o + "$", "i");
  }
  e.debuglog = function($) {
    if ($ = $.toUpperCase(), !n[$])
      if (i.test($)) {
        var q = N.process.pid;
        n[$] = function() {
          var X = e.format.apply(e, arguments);
          console.error("%s %d: %s", $, q, X);
        };
      } else
        n[$] = function() {
        };
    return n[$];
  };
  function s($, q) {
    var X = {
      seen: [],
      stylize: f
    };
    return arguments.length >= 3 && (X.depth = arguments[2]), arguments.length >= 4 && (X.colors = arguments[3]), x(q) ? X.showHidden = q : q && e._extend(X, q), L(X.showHidden) && (X.showHidden = !1), L(X.depth) && (X.depth = 2), L(X.colors) && (X.colors = !1), L(X.customInspect) && (X.customInspect = !0), X.colors && (X.stylize = a), h(X, $, X.depth);
  }
  e.inspect = s, s.colors = {
    bold: [1, 22],
    italic: [3, 23],
    underline: [4, 24],
    inverse: [7, 27],
    white: [37, 39],
    grey: [90, 39],
    black: [30, 39],
    blue: [34, 39],
    cyan: [36, 39],
    green: [32, 39],
    magenta: [35, 39],
    red: [31, 39],
    yellow: [33, 39]
  }, s.styles = {
    special: "cyan",
    number: "yellow",
    boolean: "yellow",
    undefined: "grey",
    null: "bold",
    string: "green",
    date: "magenta",
    // "name": intentionally not styling
    regexp: "red"
  };
  function a($, q) {
    var X = s.styles[q];
    return X ? "\x1B[" + s.colors[X][0] + "m" + $ + "\x1B[" + s.colors[X][1] + "m" : $;
  }
  function f($, q) {
    return $;
  }
  function l($) {
    var q = {};
    return $.forEach(function(X, ie) {
      q[X] = !0;
    }), q;
  }
  function h($, q, X) {
    if ($.customInspect && q && re(q.inspect) && // Filter out the util module, it's inspect function is special
    q.inspect !== e.inspect && // Also filter out any prototype objects using the circular check.
    !(q.constructor && q.constructor.prototype === q)) {
      var ie = q.inspect(X, $);
      return k(ie) || (ie = h($, ie, X)), ie;
    }
    var D = y($, q);
    if (D)
      return D;
    var A = Object.keys(q), P = l(A);
    if ($.showHidden && (A = Object.getOwnPropertyNames(q)), te(q) && (A.indexOf("message") >= 0 || A.indexOf("description") >= 0))
      return v(q);
    if (A.length === 0) {
      if (re(q)) {
        var C = q.name ? ": " + q.name : "";
        return $.stylize("[Function" + C + "]", "special");
      }
      if (j(q))
        return $.stylize(RegExp.prototype.toString.call(q), "regexp");
      if (W(q))
        return $.stylize(Date.prototype.toString.call(q), "date");
      if (te(q))
        return v(q);
    }
    var K = "", S = !1, T = ["{", "}"];
    if (O(q) && (S = !0, T = ["[", "]"]), re(q)) {
      var V = q.name ? ": " + q.name : "";
      K = " [Function" + V + "]";
    }
    if (j(q) && (K = " " + RegExp.prototype.toString.call(q)), W(q) && (K = " " + Date.prototype.toUTCString.call(q)), te(q) && (K = " " + v(q)), A.length === 0 && (!S || q.length == 0))
      return T[0] + K + T[1];
    if (X < 0)
      return j(q) ? $.stylize(RegExp.prototype.toString.call(q), "regexp") : $.stylize("[Object]", "special");
    $.seen.push(q);
    var Q;
    return S ? Q = g($, q, X, P, A) : Q = A.map(function(be) {
      return m($, q, X, P, be, S);
    }), $.seen.pop(), E(Q, K, T);
  }
  function y($, q) {
    if (L(q))
      return $.stylize("undefined", "undefined");
    if (k(q)) {
      var X = "'" + JSON.stringify(q).replace(/^"|"$/g, "").replace(/'/g, "\\'").replace(/\\"/g, '"') + "'";
      return $.stylize(X, "string");
    }
    if (M(q))
      return $.stylize("" + q, "number");
    if (x(q))
      return $.stylize("" + q, "boolean");
    if (U(q))
      return $.stylize("null", "null");
  }
  function v($) {
    return "[" + Error.prototype.toString.call($) + "]";
  }
  function g($, q, X, ie, D) {
    for (var A = [], P = 0, C = q.length; P < C; ++P)
      pe(q, String(P)) ? A.push(m(
        $,
        q,
        X,
        ie,
        String(P),
        !0
      )) : A.push("");
    return D.forEach(function(K) {
      K.match(/^\d+$/) || A.push(m(
        $,
        q,
        X,
        ie,
        K,
        !0
      ));
    }), A;
  }
  function m($, q, X, ie, D, A) {
    var P, C, K;
    if (K = Object.getOwnPropertyDescriptor(q, D) || { value: q[D] }, K.get ? K.set ? C = $.stylize("[Getter/Setter]", "special") : C = $.stylize("[Getter]", "special") : K.set && (C = $.stylize("[Setter]", "special")), pe(ie, D) || (P = "[" + D + "]"), C || ($.seen.indexOf(K.value) < 0 ? (U(X) ? C = h($, K.value, null) : C = h($, K.value, X - 1), C.indexOf(`
`) > -1 && (A ? C = C.split(`
`).map(function(S) {
      return "  " + S;
    }).join(`
`).slice(2) : C = `
` + C.split(`
`).map(function(S) {
      return "   " + S;
    }).join(`
`))) : C = $.stylize("[Circular]", "special")), L(P)) {
      if (A && D.match(/^\d+$/))
        return C;
      P = JSON.stringify("" + D), P.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/) ? (P = P.slice(1, -1), P = $.stylize(P, "name")) : (P = P.replace(/'/g, "\\'").replace(/\\"/g, '"').replace(/(^"|"$)/g, "'"), P = $.stylize(P, "string"));
    }
    return P + ": " + C;
  }
  function E($, q, X) {
    var ie = $.reduce(function(D, A) {
      return A.indexOf(`
`) >= 0, D + A.replace(/\u001b\[\d\d?m/g, "").length + 1;
    }, 0);
    return ie > 60 ? X[0] + (q === "" ? "" : q + `
 `) + " " + $.join(`,
  `) + " " + X[1] : X[0] + q + " " + $.join(", ") + " " + X[1];
  }
  e.types = Ig;
  function O($) {
    return Array.isArray($);
  }
  e.isArray = O;
  function x($) {
    return typeof $ == "boolean";
  }
  e.isBoolean = x;
  function U($) {
    return $ === null;
  }
  e.isNull = U;
  function H($) {
    return $ == null;
  }
  e.isNullOrUndefined = H;
  function M($) {
    return typeof $ == "number";
  }
  e.isNumber = M;
  function k($) {
    return typeof $ == "string";
  }
  e.isString = k;
  function _($) {
    return typeof $ == "symbol";
  }
  e.isSymbol = _;
  function L($) {
    return $ === void 0;
  }
  e.isUndefined = L;
  function j($) {
    return F($) && de($) === "[object RegExp]";
  }
  e.isRegExp = j, e.types.isRegExp = j;
  function F($) {
    return typeof $ == "object" && $ !== null;
  }
  e.isObject = F;
  function W($) {
    return F($) && de($) === "[object Date]";
  }
  e.isDate = W, e.types.isDate = W;
  function te($) {
    return F($) && (de($) === "[object Error]" || $ instanceof Error);
  }
  e.isError = te, e.types.isNativeError = te;
  function re($) {
    return typeof $ == "function";
  }
  e.isFunction = re;
  function ae($) {
    return $ === null || typeof $ == "boolean" || typeof $ == "number" || typeof $ == "string" || typeof $ == "symbol" || // ES6 symbol
    typeof $ > "u";
  }
  e.isPrimitive = ae, e.isBuffer = kO;
  function de($) {
    return Object.prototype.toString.call($);
  }
  function J($) {
    return $ < 10 ? "0" + $.toString(10) : $.toString(10);
  }
  var ne = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
  ];
  function ue() {
    var $ = /* @__PURE__ */ new Date(), q = [
      J($.getHours()),
      J($.getMinutes()),
      J($.getSeconds())
    ].join(":");
    return [$.getDate(), ne[$.getMonth()], q].join(" ");
  }
  e.log = function() {
    console.log("%s - %s", ue(), e.format.apply(e, arguments));
  }, e.inherits = ot, e._extend = function($, q) {
    if (!q || !F(q))
      return $;
    for (var X = Object.keys(q), ie = X.length; ie--; )
      $[X[ie]] = q[X[ie]];
    return $;
  };
  function pe($, q) {
    return Object.prototype.hasOwnProperty.call($, q);
  }
  var z = typeof Symbol < "u" ? Symbol("util.promisify.custom") : void 0;
  e.promisify = function(q) {
    if (typeof q != "function")
      throw new TypeError('The "original" argument must be of type Function');
    if (z && q[z]) {
      var X = q[z];
      if (typeof X != "function")
        throw new TypeError('The "util.promisify.custom" argument must be of type Function');
      return Object.defineProperty(X, z, {
        value: X,
        enumerable: !1,
        writable: !1,
        configurable: !0
      }), X;
    }
    function X() {
      for (var ie, D, A = new Promise(function(K, S) {
        ie = K, D = S;
      }), P = [], C = 0; C < arguments.length; C++)
        P.push(arguments[C]);
      P.push(function(K, S) {
        K ? D(K) : ie(S);
      });
      try {
        q.apply(this, P);
      } catch (K) {
        D(K);
      }
      return A;
    }
    return Object.setPrototypeOf(X, Object.getPrototypeOf(q)), z && Object.defineProperty(X, z, {
      value: X,
      enumerable: !1,
      writable: !1,
      configurable: !0
    }), Object.defineProperties(
      X,
      t(q)
    );
  }, e.promisify.custom = z;
  function Y($, q) {
    if (!$) {
      var X = new Error("Promise was rejected with a falsy value");
      X.reason = $, $ = X;
    }
    return q($);
  }
  function ee($) {
    if (typeof $ != "function")
      throw new TypeError('The "original" argument must be of type Function');
    function q() {
      for (var X = [], ie = 0; ie < arguments.length; ie++)
        X.push(arguments[ie]);
      var D = X.pop();
      if (typeof D != "function")
        throw new TypeError("The last argument must be of type Function");
      var A = this, P = function() {
        return D.apply(A, arguments);
      };
      $.apply(this, X).then(
        function(C) {
          N.process.nextTick(P.bind(null, null, C));
        },
        function(C) {
          N.process.nextTick(Y.bind(null, C, P));
        }
      );
    }
    return Object.setPrototypeOf(q, Object.getPrototypeOf($)), Object.defineProperties(
      q,
      t($)
    ), q;
  }
  e.callbackify = ee;
})(En);
var wc, ed;
function RO() {
  if (ed)
    return wc;
  ed = 1;
  function e(m, E) {
    var O = Object.keys(m);
    if (Object.getOwnPropertySymbols) {
      var x = Object.getOwnPropertySymbols(m);
      E && (x = x.filter(function(U) {
        return Object.getOwnPropertyDescriptor(m, U).enumerable;
      })), O.push.apply(O, x);
    }
    return O;
  }
  function t(m) {
    for (var E = 1; E < arguments.length; E++) {
      var O = arguments[E] != null ? arguments[E] : {};
      E % 2 ? e(Object(O), !0).forEach(function(x) {
        r(m, x, O[x]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(m, Object.getOwnPropertyDescriptors(O)) : e(Object(O)).forEach(function(x) {
        Object.defineProperty(m, x, Object.getOwnPropertyDescriptor(O, x));
      });
    }
    return m;
  }
  function r(m, E, O) {
    return E = s(E), E in m ? Object.defineProperty(m, E, { value: O, enumerable: !0, configurable: !0, writable: !0 }) : m[E] = O, m;
  }
  function n(m, E) {
    if (!(m instanceof E))
      throw new TypeError("Cannot call a class as a function");
  }
  function i(m, E) {
    for (var O = 0; O < E.length; O++) {
      var x = E[O];
      x.enumerable = x.enumerable || !1, x.configurable = !0, "value" in x && (x.writable = !0), Object.defineProperty(m, s(x.key), x);
    }
  }
  function o(m, E, O) {
    return E && i(m.prototype, E), O && i(m, O), Object.defineProperty(m, "prototype", { writable: !1 }), m;
  }
  function s(m) {
    var E = a(m, "string");
    return typeof E == "symbol" ? E : String(E);
  }
  function a(m, E) {
    if (typeof m != "object" || m === null)
      return m;
    var O = m[Symbol.toPrimitive];
    if (O !== void 0) {
      var x = O.call(m, E || "default");
      if (typeof x != "object")
        return x;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (E === "string" ? String : Number)(m);
  }
  var f = ar, l = f.Buffer, h = En, y = h.inspect, v = y && y.custom || "inspect";
  function g(m, E, O) {
    l.prototype.copy.call(m, E, O);
  }
  return wc = /* @__PURE__ */ function() {
    function m() {
      n(this, m), this.head = null, this.tail = null, this.length = 0;
    }
    return o(m, [{
      key: "push",
      value: function(O) {
        var x = {
          data: O,
          next: null
        };
        this.length > 0 ? this.tail.next = x : this.head = x, this.tail = x, ++this.length;
      }
    }, {
      key: "unshift",
      value: function(O) {
        var x = {
          data: O,
          next: this.head
        };
        this.length === 0 && (this.tail = x), this.head = x, ++this.length;
      }
    }, {
      key: "shift",
      value: function() {
        if (this.length !== 0) {
          var O = this.head.data;
          return this.length === 1 ? this.head = this.tail = null : this.head = this.head.next, --this.length, O;
        }
      }
    }, {
      key: "clear",
      value: function() {
        this.head = this.tail = null, this.length = 0;
      }
    }, {
      key: "join",
      value: function(O) {
        if (this.length === 0)
          return "";
        for (var x = this.head, U = "" + x.data; x = x.next; )
          U += O + x.data;
        return U;
      }
    }, {
      key: "concat",
      value: function(O) {
        if (this.length === 0)
          return l.alloc(0);
        for (var x = l.allocUnsafe(O >>> 0), U = this.head, H = 0; U; )
          g(U.data, x, H), H += U.data.length, U = U.next;
        return x;
      }
      // Consumes a specified amount of bytes or characters from the buffered data.
    }, {
      key: "consume",
      value: function(O, x) {
        var U;
        return O < this.head.data.length ? (U = this.head.data.slice(0, O), this.head.data = this.head.data.slice(O)) : O === this.head.data.length ? U = this.shift() : U = x ? this._getString(O) : this._getBuffer(O), U;
      }
    }, {
      key: "first",
      value: function() {
        return this.head.data;
      }
      // Consumes a specified amount of characters from the buffered data.
    }, {
      key: "_getString",
      value: function(O) {
        var x = this.head, U = 1, H = x.data;
        for (O -= H.length; x = x.next; ) {
          var M = x.data, k = O > M.length ? M.length : O;
          if (k === M.length ? H += M : H += M.slice(0, O), O -= k, O === 0) {
            k === M.length ? (++U, x.next ? this.head = x.next : this.head = this.tail = null) : (this.head = x, x.data = M.slice(k));
            break;
          }
          ++U;
        }
        return this.length -= U, H;
      }
      // Consumes a specified amount of bytes from the buffered data.
    }, {
      key: "_getBuffer",
      value: function(O) {
        var x = l.allocUnsafe(O), U = this.head, H = 1;
        for (U.data.copy(x), O -= U.data.length; U = U.next; ) {
          var M = U.data, k = O > M.length ? M.length : O;
          if (M.copy(x, x.length - O, 0, k), O -= k, O === 0) {
            k === M.length ? (++H, U.next ? this.head = U.next : this.head = this.tail = null) : (this.head = U, U.data = M.slice(k));
            break;
          }
          ++H;
        }
        return this.length -= H, x;
      }
      // Make sure the linked list only shows the minimal necessary information.
    }, {
      key: v,
      value: function(O, x) {
        return y(this, t(t({}, x), {}, {
          // Only inspect one level.
          depth: 0,
          // It should not recurse.
          customInspect: !1
        }));
      }
    }]), m;
  }(), wc;
}
function NO(e, t) {
  var r = this, n = this._readableState && this._readableState.destroyed, i = this._writableState && this._writableState.destroyed;
  return n || i ? (t ? t(e) : e && (this._writableState ? this._writableState.errorEmitted || (this._writableState.errorEmitted = !0, N.process.nextTick(Bu, this, e)) : N.process.nextTick(Bu, this, e)), this) : (this._readableState && (this._readableState.destroyed = !0), this._writableState && (this._writableState.destroyed = !0), this._destroy(e || null, function(o) {
    !t && o ? r._writableState ? r._writableState.errorEmitted ? N.process.nextTick(na, r) : (r._writableState.errorEmitted = !0, N.process.nextTick(td, r, o)) : N.process.nextTick(td, r, o) : t ? (N.process.nextTick(na, r), t(o)) : N.process.nextTick(na, r);
  }), this);
}
function td(e, t) {
  Bu(e, t), na(e);
}
function na(e) {
  e._writableState && !e._writableState.emitClose || e._readableState && !e._readableState.emitClose || e.emit("close");
}
function UO() {
  this._readableState && (this._readableState.destroyed = !1, this._readableState.reading = !1, this._readableState.ended = !1, this._readableState.endEmitted = !1), this._writableState && (this._writableState.destroyed = !1, this._writableState.ended = !1, this._writableState.ending = !1, this._writableState.finalCalled = !1, this._writableState.prefinished = !1, this._writableState.finished = !1, this._writableState.errorEmitted = !1);
}
function Bu(e, t) {
  e.emit("error", t);
}
function CO(e, t) {
  var r = e._readableState, n = e._writableState;
  r && r.autoDestroy || n && n.autoDestroy ? e.destroy(t) : e.emit("error", t);
}
var Dg = {
  destroy: NO,
  undestroy: UO,
  errorOrDestroy: CO
}, di = {};
function $O(e, t) {
  e.prototype = Object.create(t.prototype), e.prototype.constructor = e, e.__proto__ = t;
}
var Mg = {};
function rr(e, t, r) {
  r || (r = Error);
  function n(o, s, a) {
    return typeof t == "string" ? t : t(o, s, a);
  }
  var i = /* @__PURE__ */ function(o) {
    $O(s, o);
    function s(a, f, l) {
      return o.call(this, n(a, f, l)) || this;
    }
    return s;
  }(r);
  i.prototype.name = r.name, i.prototype.code = e, Mg[e] = i;
}
function rd(e, t) {
  if (Array.isArray(e)) {
    var r = e.length;
    return e = e.map(function(n) {
      return String(n);
    }), r > 2 ? "one of ".concat(t, " ").concat(e.slice(0, r - 1).join(", "), ", or ") + e[r - 1] : r === 2 ? "one of ".concat(t, " ").concat(e[0], " or ").concat(e[1]) : "of ".concat(t, " ").concat(e[0]);
  } else
    return "of ".concat(t, " ").concat(String(e));
}
function HO(e, t, r) {
  return e.substr(!r || r < 0 ? 0 : +r, t.length) === t;
}
function LO(e, t, r) {
  return (r === void 0 || r > e.length) && (r = e.length), e.substring(r - t.length, r) === t;
}
function DO(e, t, r) {
  return typeof r != "number" && (r = 0), r + t.length > e.length ? !1 : e.indexOf(t, r) !== -1;
}
rr("ERR_INVALID_OPT_VALUE", function(e, t) {
  return 'The value "' + t + '" is invalid for option "' + e + '"';
}, TypeError);
rr("ERR_INVALID_ARG_TYPE", function(e, t, r) {
  var n;
  typeof t == "string" && HO(t, "not ") ? (n = "must not be", t = t.replace(/^not /, "")) : n = "must be";
  var i;
  if (LO(e, " argument"))
    i = "The ".concat(e, " ").concat(n, " ").concat(rd(t, "type"));
  else {
    var o = DO(e, ".") ? "property" : "argument";
    i = 'The "'.concat(e, '" ').concat(o, " ").concat(n, " ").concat(rd(t, "type"));
  }
  return i += ". Received type ".concat(typeof r), i;
}, TypeError);
rr("ERR_STREAM_PUSH_AFTER_EOF", "stream.push() after EOF");
rr("ERR_METHOD_NOT_IMPLEMENTED", function(e) {
  return "The " + e + " method is not implemented";
});
rr("ERR_STREAM_PREMATURE_CLOSE", "Premature close");
rr("ERR_STREAM_DESTROYED", function(e) {
  return "Cannot call " + e + " after a stream was destroyed";
});
rr("ERR_MULTIPLE_CALLBACK", "Callback called multiple times");
rr("ERR_STREAM_CANNOT_PIPE", "Cannot pipe, not readable");
rr("ERR_STREAM_WRITE_AFTER_END", "write after end");
rr("ERR_STREAM_NULL_VALUES", "May not write null values to stream", TypeError);
rr("ERR_UNKNOWN_ENCODING", function(e) {
  return "Unknown encoding: " + e;
}, TypeError);
rr("ERR_STREAM_UNSHIFT_AFTER_END_EVENT", "stream.unshift() after end event");
di.codes = Mg;
var MO = di.codes.ERR_INVALID_OPT_VALUE;
function FO(e, t, r) {
  return e.highWaterMark != null ? e.highWaterMark : t ? e[r] : null;
}
function jO(e, t, r, n) {
  var i = FO(t, n, r);
  if (i != null) {
    if (!(isFinite(i) && Math.floor(i) === i) || i < 0) {
      var o = n ? r : "highWaterMark";
      throw new MO(o, i);
    }
    return Math.floor(i);
  }
  return e.objectMode ? 16 : 16 * 1024;
}
var Fg = {
  getHighWaterMark: jO
}, KO = qO;
function qO(e, t) {
  if (mc("noDeprecation"))
    return e;
  var r = !1;
  function n() {
    if (!r) {
      if (mc("throwDeprecation"))
        throw new Error(t);
      mc("traceDeprecation") ? console.trace(t) : console.warn(t), r = !0;
    }
    return e.apply(this, arguments);
  }
  return n;
}
function mc(e) {
  try {
    if (!Ar.localStorage)
      return !1;
  } catch {
    return !1;
  }
  var t = Ar.localStorage[e];
  return t == null ? !1 : String(t).toLowerCase() === "true";
}
var Ec, nd;
function jg() {
  if (nd)
    return Ec;
  nd = 1, Ec = j;
  function e(D) {
    var A = this;
    this.next = null, this.entry = null, this.finish = function() {
      ie(A, D);
    };
  }
  var t;
  j.WritableState = _;
  var r = {
    deprecate: KO
  }, n = Tg, i = ar.Buffer, o = (typeof Ar < "u" ? Ar : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function s(D) {
    return i.from(D);
  }
  function a(D) {
    return i.isBuffer(D) || D instanceof o;
  }
  var f = Dg, l = Fg, h = l.getHighWaterMark, y = di.codes, v = y.ERR_INVALID_ARG_TYPE, g = y.ERR_METHOD_NOT_IMPLEMENTED, m = y.ERR_MULTIPLE_CALLBACK, E = y.ERR_STREAM_CANNOT_PIPE, O = y.ERR_STREAM_DESTROYED, x = y.ERR_STREAM_NULL_VALUES, U = y.ERR_STREAM_WRITE_AFTER_END, H = y.ERR_UNKNOWN_ENCODING, M = f.errorOrDestroy;
  ot(j, n);
  function k() {
  }
  function _(D, A, P) {
    t = t || ro(), D = D || {}, typeof P != "boolean" && (P = A instanceof t), this.objectMode = !!D.objectMode, P && (this.objectMode = this.objectMode || !!D.writableObjectMode), this.highWaterMark = h(this, D, "writableHighWaterMark", P), this.finalCalled = !1, this.needDrain = !1, this.ending = !1, this.ended = !1, this.finished = !1, this.destroyed = !1;
    var C = D.decodeStrings === !1;
    this.decodeStrings = !C, this.defaultEncoding = D.defaultEncoding || "utf8", this.length = 0, this.writing = !1, this.corked = 0, this.sync = !0, this.bufferProcessing = !1, this.onwrite = function(K) {
      ne(A, K);
    }, this.writecb = null, this.writelen = 0, this.bufferedRequest = null, this.lastBufferedRequest = null, this.pendingcb = 0, this.prefinished = !1, this.errorEmitted = !1, this.emitClose = D.emitClose !== !1, this.autoDestroy = !!D.autoDestroy, this.bufferedRequestCount = 0, this.corkedRequestsFree = new e(this);
  }
  _.prototype.getBuffer = function() {
    for (var A = this.bufferedRequest, P = []; A; )
      P.push(A), A = A.next;
    return P;
  }, function() {
    try {
      Object.defineProperty(_.prototype, "buffer", {
        get: r.deprecate(function() {
          return this.getBuffer();
        }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", "DEP0003")
      });
    } catch {
    }
  }();
  var L;
  typeof Symbol == "function" && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] == "function" ? (L = Function.prototype[Symbol.hasInstance], Object.defineProperty(j, Symbol.hasInstance, {
    value: function(A) {
      return L.call(this, A) ? !0 : this !== j ? !1 : A && A._writableState instanceof _;
    }
  })) : L = function(A) {
    return A instanceof this;
  };
  function j(D) {
    t = t || ro();
    var A = this instanceof t;
    if (!A && !L.call(j, this))
      return new j(D);
    this._writableState = new _(D, this, A), this.writable = !0, D && (typeof D.write == "function" && (this._write = D.write), typeof D.writev == "function" && (this._writev = D.writev), typeof D.destroy == "function" && (this._destroy = D.destroy), typeof D.final == "function" && (this._final = D.final)), n.call(this);
  }
  j.prototype.pipe = function() {
    M(this, new E());
  };
  function F(D, A) {
    var P = new U();
    M(D, P), N.process.nextTick(A, P);
  }
  function W(D, A, P, C) {
    var K;
    return P === null ? K = new x() : typeof P != "string" && !A.objectMode && (K = new v("chunk", ["string", "Buffer"], P)), K ? (M(D, K), N.process.nextTick(C, K), !1) : !0;
  }
  j.prototype.write = function(D, A, P) {
    var C = this._writableState, K = !1, S = !C.objectMode && a(D);
    return S && !i.isBuffer(D) && (D = s(D)), typeof A == "function" && (P = A, A = null), S ? A = "buffer" : A || (A = C.defaultEncoding), typeof P != "function" && (P = k), C.ending ? F(this, P) : (S || W(this, C, D, P)) && (C.pendingcb++, K = re(this, C, S, D, A, P)), K;
  }, j.prototype.cork = function() {
    this._writableState.corked++;
  }, j.prototype.uncork = function() {
    var D = this._writableState;
    D.corked && (D.corked--, !D.writing && !D.corked && !D.bufferProcessing && D.bufferedRequest && z(this, D));
  }, j.prototype.setDefaultEncoding = function(A) {
    if (typeof A == "string" && (A = A.toLowerCase()), !(["hex", "utf8", "utf-8", "ascii", "binary", "base64", "ucs2", "ucs-2", "utf16le", "utf-16le", "raw"].indexOf((A + "").toLowerCase()) > -1))
      throw new H(A);
    return this._writableState.defaultEncoding = A, this;
  }, Object.defineProperty(j.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  });
  function te(D, A, P) {
    return !D.objectMode && D.decodeStrings !== !1 && typeof A == "string" && (A = i.from(A, P)), A;
  }
  Object.defineProperty(j.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  });
  function re(D, A, P, C, K, S) {
    if (!P) {
      var T = te(A, C, K);
      C !== T && (P = !0, K = "buffer", C = T);
    }
    var V = A.objectMode ? 1 : C.length;
    A.length += V;
    var Q = A.length < A.highWaterMark;
    if (Q || (A.needDrain = !0), A.writing || A.corked) {
      var be = A.lastBufferedRequest;
      A.lastBufferedRequest = {
        chunk: C,
        encoding: K,
        isBuf: P,
        callback: S,
        next: null
      }, be ? be.next = A.lastBufferedRequest : A.bufferedRequest = A.lastBufferedRequest, A.bufferedRequestCount += 1;
    } else
      ae(D, A, !1, V, C, K, S);
    return Q;
  }
  function ae(D, A, P, C, K, S, T) {
    A.writelen = C, A.writecb = T, A.writing = !0, A.sync = !0, A.destroyed ? A.onwrite(new O("write")) : P ? D._writev(K, A.onwrite) : D._write(K, S, A.onwrite), A.sync = !1;
  }
  function de(D, A, P, C, K) {
    --A.pendingcb, P ? (N.process.nextTick(K, C), N.process.nextTick(q, D, A), D._writableState.errorEmitted = !0, M(D, C)) : (K(C), D._writableState.errorEmitted = !0, M(D, C), q(D, A));
  }
  function J(D) {
    D.writing = !1, D.writecb = null, D.length -= D.writelen, D.writelen = 0;
  }
  function ne(D, A) {
    var P = D._writableState, C = P.sync, K = P.writecb;
    if (typeof K != "function")
      throw new m();
    if (J(P), A)
      de(D, P, C, A, K);
    else {
      var S = Y(P) || D.destroyed;
      !S && !P.corked && !P.bufferProcessing && P.bufferedRequest && z(D, P), C ? N.process.nextTick(ue, D, P, S, K) : ue(D, P, S, K);
    }
  }
  function ue(D, A, P, C) {
    P || pe(D, A), A.pendingcb--, C(), q(D, A);
  }
  function pe(D, A) {
    A.length === 0 && A.needDrain && (A.needDrain = !1, D.emit("drain"));
  }
  function z(D, A) {
    A.bufferProcessing = !0;
    var P = A.bufferedRequest;
    if (D._writev && P && P.next) {
      var C = A.bufferedRequestCount, K = new Array(C), S = A.corkedRequestsFree;
      S.entry = P;
      for (var T = 0, V = !0; P; )
        K[T] = P, P.isBuf || (V = !1), P = P.next, T += 1;
      K.allBuffers = V, ae(D, A, !0, A.length, K, "", S.finish), A.pendingcb++, A.lastBufferedRequest = null, S.next ? (A.corkedRequestsFree = S.next, S.next = null) : A.corkedRequestsFree = new e(A), A.bufferedRequestCount = 0;
    } else {
      for (; P; ) {
        var Q = P.chunk, be = P.encoding, ye = P.callback, Ee = A.objectMode ? 1 : Q.length;
        if (ae(D, A, !1, Ee, Q, be, ye), P = P.next, A.bufferedRequestCount--, A.writing)
          break;
      }
      P === null && (A.lastBufferedRequest = null);
    }
    A.bufferedRequest = P, A.bufferProcessing = !1;
  }
  j.prototype._write = function(D, A, P) {
    P(new g("_write()"));
  }, j.prototype._writev = null, j.prototype.end = function(D, A, P) {
    var C = this._writableState;
    return typeof D == "function" ? (P = D, D = null, A = null) : typeof A == "function" && (P = A, A = null), D != null && this.write(D, A), C.corked && (C.corked = 1, this.uncork()), C.ending || X(this, C, P), this;
  }, Object.defineProperty(j.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.length;
    }
  });
  function Y(D) {
    return D.ending && D.length === 0 && D.bufferedRequest === null && !D.finished && !D.writing;
  }
  function ee(D, A) {
    D._final(function(P) {
      A.pendingcb--, P && M(D, P), A.prefinished = !0, D.emit("prefinish"), q(D, A);
    });
  }
  function $(D, A) {
    !A.prefinished && !A.finalCalled && (typeof D._final == "function" && !A.destroyed ? (A.pendingcb++, A.finalCalled = !0, N.process.nextTick(ee, D, A)) : (A.prefinished = !0, D.emit("prefinish")));
  }
  function q(D, A) {
    var P = Y(A);
    if (P && ($(D, A), A.pendingcb === 0 && (A.finished = !0, D.emit("finish"), A.autoDestroy))) {
      var C = D._readableState;
      (!C || C.autoDestroy && C.endEmitted) && D.destroy();
    }
    return P;
  }
  function X(D, A, P) {
    A.ending = !0, q(D, A), P && (A.finished ? N.process.nextTick(P) : D.once("finish", P)), A.ended = !0, D.writable = !1;
  }
  function ie(D, A, P) {
    var C = D.entry;
    for (D.entry = null; C; ) {
      var K = C.callback;
      A.pendingcb--, K(P), C = C.next;
    }
    A.corkedRequestsFree.next = D;
  }
  return Object.defineProperty(j.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState === void 0 ? !1 : this._writableState.destroyed;
    },
    set: function(A) {
      this._writableState && (this._writableState.destroyed = A);
    }
  }), j.prototype.destroy = f.destroy, j.prototype._undestroy = f.undestroy, j.prototype._destroy = function(D, A) {
    A(D);
  }, Ec;
}
var _c, id;
function ro() {
  if (id)
    return _c;
  id = 1;
  var e = Object.keys || function(l) {
    var h = [];
    for (var y in l)
      h.push(y);
    return h;
  };
  _c = s;
  var t = qg(), r = jg();
  ot(s, t);
  for (var n = e(r.prototype), i = 0; i < n.length; i++) {
    var o = n[i];
    s.prototype[o] || (s.prototype[o] = r.prototype[o]);
  }
  function s(l) {
    if (!(this instanceof s))
      return new s(l);
    t.call(this, l), r.call(this, l), this.allowHalfOpen = !0, l && (l.readable === !1 && (this.readable = !1), l.writable === !1 && (this.writable = !1), l.allowHalfOpen === !1 && (this.allowHalfOpen = !1, this.once("end", a)));
  }
  Object.defineProperty(s.prototype, "writableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.highWaterMark;
    }
  }), Object.defineProperty(s.prototype, "writableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState && this._writableState.getBuffer();
    }
  }), Object.defineProperty(s.prototype, "writableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._writableState.length;
    }
  });
  function a() {
    this._writableState.ended || N.process.nextTick(f, this);
  }
  function f(l) {
    l.end();
  }
  return Object.defineProperty(s.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState === void 0 || this._writableState === void 0 ? !1 : this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function(h) {
      this._readableState === void 0 || this._writableState === void 0 || (this._readableState.destroyed = h, this._writableState.destroyed = h);
    }
  }), _c;
}
var Oa = {}, Dl = Re.Buffer, od = Dl.isEncoding || function(e) {
  switch (e = "" + e, e && e.toLowerCase()) {
    case "hex":
    case "utf8":
    case "utf-8":
    case "ascii":
    case "binary":
    case "base64":
    case "ucs2":
    case "ucs-2":
    case "utf16le":
    case "utf-16le":
    case "raw":
      return !0;
    default:
      return !1;
  }
};
function GO(e) {
  if (!e)
    return "utf8";
  for (var t; ; )
    switch (e) {
      case "utf8":
      case "utf-8":
        return "utf8";
      case "ucs2":
      case "ucs-2":
      case "utf16le":
      case "utf-16le":
        return "utf16le";
      case "latin1":
      case "binary":
        return "latin1";
      case "base64":
      case "ascii":
      case "hex":
        return e;
      default:
        if (t)
          return;
        e = ("" + e).toLowerCase(), t = !0;
    }
}
function VO(e) {
  var t = GO(e);
  if (typeof t != "string" && (Dl.isEncoding === od || !od(e)))
    throw new Error("Unknown encoding: " + e);
  return t || e;
}
Oa.StringDecoder = is;
function is(e) {
  this.encoding = VO(e);
  var t;
  switch (this.encoding) {
    case "utf16le":
      this.text = JO, this.end = QO, t = 4;
      break;
    case "utf8":
      this.fillLast = XO, t = 4;
      break;
    case "base64":
      this.text = eA, this.end = tA, t = 3;
      break;
    default:
      this.write = rA, this.end = nA;
      return;
  }
  this.lastNeed = 0, this.lastTotal = 0, this.lastChar = Dl.allocUnsafe(t);
}
is.prototype.write = function(e) {
  if (e.length === 0)
    return "";
  var t, r;
  if (this.lastNeed) {
    if (t = this.fillLast(e), t === void 0)
      return "";
    r = this.lastNeed, this.lastNeed = 0;
  } else
    r = 0;
  return r < e.length ? t ? t + this.text(e, r) : this.text(e, r) : t || "";
};
is.prototype.end = ZO;
is.prototype.text = YO;
is.prototype.fillLast = function(e) {
  if (this.lastNeed <= e.length)
    return e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
  e.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, e.length), this.lastNeed -= e.length;
};
function Sc(e) {
  return e <= 127 ? 0 : e >> 5 === 6 ? 2 : e >> 4 === 14 ? 3 : e >> 3 === 30 ? 4 : e >> 6 === 2 ? -1 : -2;
}
function WO(e, t, r) {
  var n = t.length - 1;
  if (n < r)
    return 0;
  var i = Sc(t[n]);
  return i >= 0 ? (i > 0 && (e.lastNeed = i - 1), i) : --n < r || i === -2 ? 0 : (i = Sc(t[n]), i >= 0 ? (i > 0 && (e.lastNeed = i - 2), i) : --n < r || i === -2 ? 0 : (i = Sc(t[n]), i >= 0 ? (i > 0 && (i === 2 ? i = 0 : e.lastNeed = i - 3), i) : 0));
}
function zO(e, t, r) {
  if ((t[0] & 192) !== 128)
    return e.lastNeed = 0, "�";
  if (e.lastNeed > 1 && t.length > 1) {
    if ((t[1] & 192) !== 128)
      return e.lastNeed = 1, "�";
    if (e.lastNeed > 2 && t.length > 2 && (t[2] & 192) !== 128)
      return e.lastNeed = 2, "�";
  }
}
function XO(e) {
  var t = this.lastTotal - this.lastNeed, r = zO(this, e);
  if (r !== void 0)
    return r;
  if (this.lastNeed <= e.length)
    return e.copy(this.lastChar, t, 0, this.lastNeed), this.lastChar.toString(this.encoding, 0, this.lastTotal);
  e.copy(this.lastChar, t, 0, e.length), this.lastNeed -= e.length;
}
function YO(e, t) {
  var r = WO(this, e, t);
  if (!this.lastNeed)
    return e.toString("utf8", t);
  this.lastTotal = r;
  var n = e.length - (r - this.lastNeed);
  return e.copy(this.lastChar, 0, n), e.toString("utf8", t, n);
}
function ZO(e) {
  var t = e && e.length ? this.write(e) : "";
  return this.lastNeed ? t + "�" : t;
}
function JO(e, t) {
  if ((e.length - t) % 2 === 0) {
    var r = e.toString("utf16le", t);
    if (r) {
      var n = r.charCodeAt(r.length - 1);
      if (n >= 55296 && n <= 56319)
        return this.lastNeed = 2, this.lastTotal = 4, this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1], r.slice(0, -1);
    }
    return r;
  }
  return this.lastNeed = 1, this.lastTotal = 2, this.lastChar[0] = e[e.length - 1], e.toString("utf16le", t, e.length - 1);
}
function QO(e) {
  var t = e && e.length ? this.write(e) : "";
  if (this.lastNeed) {
    var r = this.lastTotal - this.lastNeed;
    return t + this.lastChar.toString("utf16le", 0, r);
  }
  return t;
}
function eA(e, t) {
  var r = (e.length - t) % 3;
  return r === 0 ? e.toString("base64", t) : (this.lastNeed = 3 - r, this.lastTotal = 3, r === 1 ? this.lastChar[0] = e[e.length - 1] : (this.lastChar[0] = e[e.length - 2], this.lastChar[1] = e[e.length - 1]), e.toString("base64", t, e.length - r));
}
function tA(e) {
  var t = e && e.length ? this.write(e) : "";
  return this.lastNeed ? t + this.lastChar.toString("base64", 0, 3 - this.lastNeed) : t;
}
function rA(e) {
  return e.toString(this.encoding);
}
function nA(e) {
  return e && e.length ? this.write(e) : "";
}
var sd = di.codes.ERR_STREAM_PREMATURE_CLOSE;
function iA(e) {
  var t = !1;
  return function() {
    if (!t) {
      t = !0;
      for (var r = arguments.length, n = new Array(r), i = 0; i < r; i++)
        n[i] = arguments[i];
      e.apply(this, n);
    }
  };
}
function oA() {
}
function sA(e) {
  return e.setHeader && typeof e.abort == "function";
}
function Kg(e, t, r) {
  if (typeof t == "function")
    return Kg(e, null, t);
  t || (t = {}), r = iA(r || oA);
  var n = t.readable || t.readable !== !1 && e.readable, i = t.writable || t.writable !== !1 && e.writable, o = function() {
    e.writable || a();
  }, s = e._writableState && e._writableState.finished, a = function() {
    i = !1, s = !0, n || r.call(e);
  }, f = e._readableState && e._readableState.endEmitted, l = function() {
    n = !1, f = !0, i || r.call(e);
  }, h = function(m) {
    r.call(e, m);
  }, y = function() {
    var m;
    if (n && !f)
      return (!e._readableState || !e._readableState.ended) && (m = new sd()), r.call(e, m);
    if (i && !s)
      return (!e._writableState || !e._writableState.ended) && (m = new sd()), r.call(e, m);
  }, v = function() {
    e.req.on("finish", a);
  };
  return sA(e) ? (e.on("complete", a), e.on("abort", y), e.req ? v() : e.on("request", v)) : i && !e._writableState && (e.on("end", o), e.on("close", o)), e.on("end", l), e.on("finish", a), t.error !== !1 && e.on("error", h), e.on("close", y), function() {
    e.removeListener("complete", a), e.removeListener("abort", y), e.removeListener("request", v), e.req && e.req.removeListener("finish", a), e.removeListener("end", o), e.removeListener("close", o), e.removeListener("finish", a), e.removeListener("end", l), e.removeListener("error", h), e.removeListener("close", y);
  };
}
var Ml = Kg, Oc, ad;
function aA() {
  if (ad)
    return Oc;
  ad = 1;
  var e;
  function t(H, M, k) {
    return M = r(M), M in H ? Object.defineProperty(H, M, { value: k, enumerable: !0, configurable: !0, writable: !0 }) : H[M] = k, H;
  }
  function r(H) {
    var M = n(H, "string");
    return typeof M == "symbol" ? M : String(M);
  }
  function n(H, M) {
    if (typeof H != "object" || H === null)
      return H;
    var k = H[Symbol.toPrimitive];
    if (k !== void 0) {
      var _ = k.call(H, M || "default");
      if (typeof _ != "object")
        return _;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (M === "string" ? String : Number)(H);
  }
  var i = Ml, o = Symbol("lastResolve"), s = Symbol("lastReject"), a = Symbol("error"), f = Symbol("ended"), l = Symbol("lastPromise"), h = Symbol("handlePromise"), y = Symbol("stream");
  function v(H, M) {
    return {
      value: H,
      done: M
    };
  }
  function g(H) {
    var M = H[o];
    if (M !== null) {
      var k = H[y].read();
      k !== null && (H[l] = null, H[o] = null, H[s] = null, M(v(k, !1)));
    }
  }
  function m(H) {
    N.process.nextTick(g, H);
  }
  function E(H, M) {
    return function(k, _) {
      H.then(function() {
        if (M[f]) {
          k(v(void 0, !0));
          return;
        }
        M[h](k, _);
      }, _);
    };
  }
  var O = Object.getPrototypeOf(function() {
  }), x = Object.setPrototypeOf((e = {
    get stream() {
      return this[y];
    },
    next: function() {
      var M = this, k = this[a];
      if (k !== null)
        return Promise.reject(k);
      if (this[f])
        return Promise.resolve(v(void 0, !0));
      if (this[y].destroyed)
        return new Promise(function(F, W) {
          N.process.nextTick(function() {
            M[a] ? W(M[a]) : F(v(void 0, !0));
          });
        });
      var _ = this[l], L;
      if (_)
        L = new Promise(E(_, this));
      else {
        var j = this[y].read();
        if (j !== null)
          return Promise.resolve(v(j, !1));
        L = new Promise(this[h]);
      }
      return this[l] = L, L;
    }
  }, t(e, Symbol.asyncIterator, function() {
    return this;
  }), t(e, "return", function() {
    var M = this;
    return new Promise(function(k, _) {
      M[y].destroy(null, function(L) {
        if (L) {
          _(L);
          return;
        }
        k(v(void 0, !0));
      });
    });
  }), e), O), U = function(M) {
    var k, _ = Object.create(x, (k = {}, t(k, y, {
      value: M,
      writable: !0
    }), t(k, o, {
      value: null,
      writable: !0
    }), t(k, s, {
      value: null,
      writable: !0
    }), t(k, a, {
      value: null,
      writable: !0
    }), t(k, f, {
      value: M._readableState.endEmitted,
      writable: !0
    }), t(k, h, {
      value: function(j, F) {
        var W = _[y].read();
        W ? (_[l] = null, _[o] = null, _[s] = null, j(v(W, !1))) : (_[o] = j, _[s] = F);
      },
      writable: !0
    }), k));
    return _[l] = null, i(M, function(L) {
      if (L && L.code !== "ERR_STREAM_PREMATURE_CLOSE") {
        var j = _[s];
        j !== null && (_[l] = null, _[o] = null, _[s] = null, j(L)), _[a] = L;
        return;
      }
      var F = _[o];
      F !== null && (_[l] = null, _[o] = null, _[s] = null, F(v(void 0, !0))), _[f] = !0;
    }), M.on("readable", m.bind(null, _)), _;
  };
  return Oc = U, Oc;
}
var Ac, fd;
function fA() {
  return fd || (fd = 1, Ac = function() {
    throw new Error("Readable.from is not available in the browser");
  }), Ac;
}
var Tc, cd;
function qg() {
  if (cd)
    return Tc;
  cd = 1, Tc = F;
  var e;
  F.ReadableState = j, Ag.EventEmitter;
  var t = function(T, V) {
    return T.listeners(V).length;
  }, r = Tg, n = ar.Buffer, i = (typeof Ar < "u" ? Ar : typeof window < "u" ? window : typeof self < "u" ? self : {}).Uint8Array || function() {
  };
  function o(S) {
    return n.from(S);
  }
  function s(S) {
    return n.isBuffer(S) || S instanceof i;
  }
  var a = En, f;
  a && a.debuglog ? f = a.debuglog("stream") : f = function() {
  };
  var l = RO(), h = Dg, y = Fg, v = y.getHighWaterMark, g = di.codes, m = g.ERR_INVALID_ARG_TYPE, E = g.ERR_STREAM_PUSH_AFTER_EOF, O = g.ERR_METHOD_NOT_IMPLEMENTED, x = g.ERR_STREAM_UNSHIFT_AFTER_END_EVENT, U, H, M;
  ot(F, r);
  var k = h.errorOrDestroy, _ = ["error", "close", "destroy", "pause", "resume"];
  function L(S, T, V) {
    if (typeof S.prependListener == "function")
      return S.prependListener(T, V);
    !S._events || !S._events[T] ? S.on(T, V) : Array.isArray(S._events[T]) ? S._events[T].unshift(V) : S._events[T] = [V, S._events[T]];
  }
  function j(S, T, V) {
    e = e || ro(), S = S || {}, typeof V != "boolean" && (V = T instanceof e), this.objectMode = !!S.objectMode, V && (this.objectMode = this.objectMode || !!S.readableObjectMode), this.highWaterMark = v(this, S, "readableHighWaterMark", V), this.buffer = new l(), this.length = 0, this.pipes = null, this.pipesCount = 0, this.flowing = null, this.ended = !1, this.endEmitted = !1, this.reading = !1, this.sync = !0, this.needReadable = !1, this.emittedReadable = !1, this.readableListening = !1, this.resumeScheduled = !1, this.paused = !0, this.emitClose = S.emitClose !== !1, this.autoDestroy = !!S.autoDestroy, this.destroyed = !1, this.defaultEncoding = S.defaultEncoding || "utf8", this.awaitDrain = 0, this.readingMore = !1, this.decoder = null, this.encoding = null, S.encoding && (U || (U = Oa.StringDecoder), this.decoder = new U(S.encoding), this.encoding = S.encoding);
  }
  function F(S) {
    if (e = e || ro(), !(this instanceof F))
      return new F(S);
    var T = this instanceof e;
    this._readableState = new j(S, this, T), this.readable = !0, S && (typeof S.read == "function" && (this._read = S.read), typeof S.destroy == "function" && (this._destroy = S.destroy)), r.call(this);
  }
  Object.defineProperty(F.prototype, "destroyed", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState === void 0 ? !1 : this._readableState.destroyed;
    },
    set: function(T) {
      this._readableState && (this._readableState.destroyed = T);
    }
  }), F.prototype.destroy = h.destroy, F.prototype._undestroy = h.undestroy, F.prototype._destroy = function(S, T) {
    T(S);
  }, F.prototype.push = function(S, T) {
    var V = this._readableState, Q;
    return V.objectMode ? Q = !0 : typeof S == "string" && (T = T || V.defaultEncoding, T !== V.encoding && (S = n.from(S, T), T = ""), Q = !0), W(this, S, T, !1, Q);
  }, F.prototype.unshift = function(S) {
    return W(this, S, null, !0, !1);
  };
  function W(S, T, V, Q, be) {
    f("readableAddChunk", T);
    var ye = S._readableState;
    if (T === null)
      ye.reading = !1, ne(S, ye);
    else {
      var Ee;
      if (be || (Ee = re(ye, T)), Ee)
        k(S, Ee);
      else if (ye.objectMode || T && T.length > 0)
        if (typeof T != "string" && !ye.objectMode && Object.getPrototypeOf(T) !== n.prototype && (T = o(T)), Q)
          ye.endEmitted ? k(S, new x()) : te(S, ye, T, !0);
        else if (ye.ended)
          k(S, new E());
        else {
          if (ye.destroyed)
            return !1;
          ye.reading = !1, ye.decoder && !V ? (T = ye.decoder.write(T), ye.objectMode || T.length !== 0 ? te(S, ye, T, !1) : z(S, ye)) : te(S, ye, T, !1);
        }
      else
        Q || (ye.reading = !1, z(S, ye));
    }
    return !ye.ended && (ye.length < ye.highWaterMark || ye.length === 0);
  }
  function te(S, T, V, Q) {
    T.flowing && T.length === 0 && !T.sync ? (T.awaitDrain = 0, S.emit("data", V)) : (T.length += T.objectMode ? 1 : V.length, Q ? T.buffer.unshift(V) : T.buffer.push(V), T.needReadable && ue(S)), z(S, T);
  }
  function re(S, T) {
    var V;
    return !s(T) && typeof T != "string" && T !== void 0 && !S.objectMode && (V = new m("chunk", ["string", "Buffer", "Uint8Array"], T)), V;
  }
  F.prototype.isPaused = function() {
    return this._readableState.flowing === !1;
  }, F.prototype.setEncoding = function(S) {
    U || (U = Oa.StringDecoder);
    var T = new U(S);
    this._readableState.decoder = T, this._readableState.encoding = this._readableState.decoder.encoding;
    for (var V = this._readableState.buffer.head, Q = ""; V !== null; )
      Q += T.write(V.data), V = V.next;
    return this._readableState.buffer.clear(), Q !== "" && this._readableState.buffer.push(Q), this._readableState.length = Q.length, this;
  };
  var ae = 1073741824;
  function de(S) {
    return S >= ae ? S = ae : (S--, S |= S >>> 1, S |= S >>> 2, S |= S >>> 4, S |= S >>> 8, S |= S >>> 16, S++), S;
  }
  function J(S, T) {
    return S <= 0 || T.length === 0 && T.ended ? 0 : T.objectMode ? 1 : S !== S ? T.flowing && T.length ? T.buffer.head.data.length : T.length : (S > T.highWaterMark && (T.highWaterMark = de(S)), S <= T.length ? S : T.ended ? T.length : (T.needReadable = !0, 0));
  }
  F.prototype.read = function(S) {
    f("read", S), S = parseInt(S, 10);
    var T = this._readableState, V = S;
    if (S !== 0 && (T.emittedReadable = !1), S === 0 && T.needReadable && ((T.highWaterMark !== 0 ? T.length >= T.highWaterMark : T.length > 0) || T.ended))
      return f("read: emitReadable", T.length, T.ended), T.length === 0 && T.ended ? P(this) : ue(this), null;
    if (S = J(S, T), S === 0 && T.ended)
      return T.length === 0 && P(this), null;
    var Q = T.needReadable;
    f("need readable", Q), (T.length === 0 || T.length - S < T.highWaterMark) && (Q = !0, f("length less than watermark", Q)), T.ended || T.reading ? (Q = !1, f("reading or ended", Q)) : Q && (f("do read"), T.reading = !0, T.sync = !0, T.length === 0 && (T.needReadable = !0), this._read(T.highWaterMark), T.sync = !1, T.reading || (S = J(V, T)));
    var be;
    return S > 0 ? be = A(S, T) : be = null, be === null ? (T.needReadable = T.length <= T.highWaterMark, S = 0) : (T.length -= S, T.awaitDrain = 0), T.length === 0 && (T.ended || (T.needReadable = !0), V !== S && T.ended && P(this)), be !== null && this.emit("data", be), be;
  };
  function ne(S, T) {
    if (f("onEofChunk"), !T.ended) {
      if (T.decoder) {
        var V = T.decoder.end();
        V && V.length && (T.buffer.push(V), T.length += T.objectMode ? 1 : V.length);
      }
      T.ended = !0, T.sync ? ue(S) : (T.needReadable = !1, T.emittedReadable || (T.emittedReadable = !0, pe(S)));
    }
  }
  function ue(S) {
    var T = S._readableState;
    f("emitReadable", T.needReadable, T.emittedReadable), T.needReadable = !1, T.emittedReadable || (f("emitReadable", T.flowing), T.emittedReadable = !0, N.process.nextTick(pe, S));
  }
  function pe(S) {
    var T = S._readableState;
    f("emitReadable_", T.destroyed, T.length, T.ended), !T.destroyed && (T.length || T.ended) && (S.emit("readable"), T.emittedReadable = !1), T.needReadable = !T.flowing && !T.ended && T.length <= T.highWaterMark, D(S);
  }
  function z(S, T) {
    T.readingMore || (T.readingMore = !0, N.process.nextTick(Y, S, T));
  }
  function Y(S, T) {
    for (; !T.reading && !T.ended && (T.length < T.highWaterMark || T.flowing && T.length === 0); ) {
      var V = T.length;
      if (f("maybeReadMore read 0"), S.read(0), V === T.length)
        break;
    }
    T.readingMore = !1;
  }
  F.prototype._read = function(S) {
    k(this, new O("_read()"));
  }, F.prototype.pipe = function(S, T) {
    var V = this, Q = this._readableState;
    switch (Q.pipesCount) {
      case 0:
        Q.pipes = S;
        break;
      case 1:
        Q.pipes = [Q.pipes, S];
        break;
      default:
        Q.pipes.push(S);
        break;
    }
    Q.pipesCount += 1, f("pipe count=%d opts=%j", Q.pipesCount, T);
    var be = (!T || T.end !== !1) && S !== N.process.stdout && S !== N.process.stderr, ye = be ? Ue : B;
    Q.endEmitted ? N.process.nextTick(ye) : V.once("end", ye), S.on("unpipe", Ee);
    function Ee(p, c) {
      f("onunpipe"), p === V && c && c.hasUnpiped === !1 && (c.hasUnpiped = !0, ze());
    }
    function Ue() {
      f("onend"), S.end();
    }
    var Z = ee(V);
    S.on("drain", Z);
    var Tt = !1;
    function ze() {
      f("cleanup"), S.removeListener("close", d), S.removeListener("finish", b), S.removeListener("drain", Z), S.removeListener("error", je), S.removeListener("unpipe", Ee), V.removeListener("end", Ue), V.removeListener("end", B), V.removeListener("data", ge), Tt = !0, Q.awaitDrain && (!S._writableState || S._writableState.needDrain) && Z();
    }
    V.on("data", ge);
    function ge(p) {
      f("ondata");
      var c = S.write(p);
      f("dest.write", c), c === !1 && ((Q.pipesCount === 1 && Q.pipes === S || Q.pipesCount > 1 && K(Q.pipes, S) !== -1) && !Tt && (f("false write response, pause", Q.awaitDrain), Q.awaitDrain++), V.pause());
    }
    function je(p) {
      f("onerror", p), B(), S.removeListener("error", je), t(S, "error") === 0 && k(S, p);
    }
    L(S, "error", je);
    function d() {
      S.removeListener("finish", b), B();
    }
    S.once("close", d);
    function b() {
      f("onfinish"), S.removeListener("close", d), B();
    }
    S.once("finish", b);
    function B() {
      f("unpipe"), V.unpipe(S);
    }
    return S.emit("pipe", V), Q.flowing || (f("pipe resume"), V.resume()), S;
  };
  function ee(S) {
    return function() {
      var V = S._readableState;
      f("pipeOnDrain", V.awaitDrain), V.awaitDrain && V.awaitDrain--, V.awaitDrain === 0 && t(S, "data") && (V.flowing = !0, D(S));
    };
  }
  F.prototype.unpipe = function(S) {
    var T = this._readableState, V = {
      hasUnpiped: !1
    };
    if (T.pipesCount === 0)
      return this;
    if (T.pipesCount === 1)
      return S && S !== T.pipes ? this : (S || (S = T.pipes), T.pipes = null, T.pipesCount = 0, T.flowing = !1, S && S.emit("unpipe", this, V), this);
    if (!S) {
      var Q = T.pipes, be = T.pipesCount;
      T.pipes = null, T.pipesCount = 0, T.flowing = !1;
      for (var ye = 0; ye < be; ye++)
        Q[ye].emit("unpipe", this, {
          hasUnpiped: !1
        });
      return this;
    }
    var Ee = K(T.pipes, S);
    return Ee === -1 ? this : (T.pipes.splice(Ee, 1), T.pipesCount -= 1, T.pipesCount === 1 && (T.pipes = T.pipes[0]), S.emit("unpipe", this, V), this);
  }, F.prototype.on = function(S, T) {
    var V = r.prototype.on.call(this, S, T), Q = this._readableState;
    return S === "data" ? (Q.readableListening = this.listenerCount("readable") > 0, Q.flowing !== !1 && this.resume()) : S === "readable" && !Q.endEmitted && !Q.readableListening && (Q.readableListening = Q.needReadable = !0, Q.flowing = !1, Q.emittedReadable = !1, f("on readable", Q.length, Q.reading), Q.length ? ue(this) : Q.reading || N.process.nextTick(q, this)), V;
  }, F.prototype.addListener = F.prototype.on, F.prototype.removeListener = function(S, T) {
    var V = r.prototype.removeListener.call(this, S, T);
    return S === "readable" && N.process.nextTick($, this), V;
  }, F.prototype.removeAllListeners = function(S) {
    var T = r.prototype.removeAllListeners.apply(this, arguments);
    return (S === "readable" || S === void 0) && N.process.nextTick($, this), T;
  };
  function $(S) {
    var T = S._readableState;
    T.readableListening = S.listenerCount("readable") > 0, T.resumeScheduled && !T.paused ? T.flowing = !0 : S.listenerCount("data") > 0 && S.resume();
  }
  function q(S) {
    f("readable nexttick read 0"), S.read(0);
  }
  F.prototype.resume = function() {
    var S = this._readableState;
    return S.flowing || (f("resume"), S.flowing = !S.readableListening, X(this, S)), S.paused = !1, this;
  };
  function X(S, T) {
    T.resumeScheduled || (T.resumeScheduled = !0, N.process.nextTick(ie, S, T));
  }
  function ie(S, T) {
    f("resume", T.reading), T.reading || S.read(0), T.resumeScheduled = !1, S.emit("resume"), D(S), T.flowing && !T.reading && S.read(0);
  }
  F.prototype.pause = function() {
    return f("call pause flowing=%j", this._readableState.flowing), this._readableState.flowing !== !1 && (f("pause"), this._readableState.flowing = !1, this.emit("pause")), this._readableState.paused = !0, this;
  };
  function D(S) {
    var T = S._readableState;
    for (f("flow", T.flowing); T.flowing && S.read() !== null; )
      ;
  }
  F.prototype.wrap = function(S) {
    var T = this, V = this._readableState, Q = !1;
    S.on("end", function() {
      if (f("wrapped end"), V.decoder && !V.ended) {
        var Ee = V.decoder.end();
        Ee && Ee.length && T.push(Ee);
      }
      T.push(null);
    }), S.on("data", function(Ee) {
      if (f("wrapped data"), V.decoder && (Ee = V.decoder.write(Ee)), !(V.objectMode && Ee == null) && !(!V.objectMode && (!Ee || !Ee.length))) {
        var Ue = T.push(Ee);
        Ue || (Q = !0, S.pause());
      }
    });
    for (var be in S)
      this[be] === void 0 && typeof S[be] == "function" && (this[be] = function(Ue) {
        return function() {
          return S[Ue].apply(S, arguments);
        };
      }(be));
    for (var ye = 0; ye < _.length; ye++)
      S.on(_[ye], this.emit.bind(this, _[ye]));
    return this._read = function(Ee) {
      f("wrapped _read", Ee), Q && (Q = !1, S.resume());
    }, this;
  }, typeof Symbol == "function" && (F.prototype[Symbol.asyncIterator] = function() {
    return H === void 0 && (H = aA()), H(this);
  }), Object.defineProperty(F.prototype, "readableHighWaterMark", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.highWaterMark;
    }
  }), Object.defineProperty(F.prototype, "readableBuffer", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState && this._readableState.buffer;
    }
  }), Object.defineProperty(F.prototype, "readableFlowing", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.flowing;
    },
    set: function(T) {
      this._readableState && (this._readableState.flowing = T);
    }
  }), F._fromList = A, Object.defineProperty(F.prototype, "readableLength", {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: !1,
    get: function() {
      return this._readableState.length;
    }
  });
  function A(S, T) {
    if (T.length === 0)
      return null;
    var V;
    return T.objectMode ? V = T.buffer.shift() : !S || S >= T.length ? (T.decoder ? V = T.buffer.join("") : T.buffer.length === 1 ? V = T.buffer.first() : V = T.buffer.concat(T.length), T.buffer.clear()) : V = T.buffer.consume(S, T.decoder), V;
  }
  function P(S) {
    var T = S._readableState;
    f("endReadable", T.endEmitted), T.endEmitted || (T.ended = !0, N.process.nextTick(C, T, S));
  }
  function C(S, T) {
    if (f("endReadableNT", S.endEmitted, S.length), !S.endEmitted && S.length === 0 && (S.endEmitted = !0, T.readable = !1, T.emit("end"), S.autoDestroy)) {
      var V = T._writableState;
      (!V || V.autoDestroy && V.finished) && T.destroy();
    }
  }
  typeof Symbol == "function" && (F.from = function(S, T) {
    return M === void 0 && (M = fA()), M(F, S, T);
  });
  function K(S, T) {
    for (var V = 0, Q = S.length; V < Q; V++)
      if (S[V] === T)
        return V;
    return -1;
  }
  return Tc;
}
var Gg = Wr, hf = di.codes, cA = hf.ERR_METHOD_NOT_IMPLEMENTED, uA = hf.ERR_MULTIPLE_CALLBACK, lA = hf.ERR_TRANSFORM_ALREADY_TRANSFORMING, hA = hf.ERR_TRANSFORM_WITH_LENGTH_0, pf = ro();
ot(Wr, pf);
function pA(e, t) {
  var r = this._transformState;
  r.transforming = !1;
  var n = r.writecb;
  if (n === null)
    return this.emit("error", new uA());
  r.writechunk = null, r.writecb = null, t != null && this.push(t), n(e);
  var i = this._readableState;
  i.reading = !1, (i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
}
function Wr(e) {
  if (!(this instanceof Wr))
    return new Wr(e);
  pf.call(this, e), this._transformState = {
    afterTransform: pA.bind(this),
    needTransform: !1,
    transforming: !1,
    writecb: null,
    writechunk: null,
    writeencoding: null
  }, this._readableState.needReadable = !0, this._readableState.sync = !1, e && (typeof e.transform == "function" && (this._transform = e.transform), typeof e.flush == "function" && (this._flush = e.flush)), this.on("prefinish", dA);
}
function dA() {
  var e = this;
  typeof this._flush == "function" && !this._readableState.destroyed ? this._flush(function(t, r) {
    ud(e, t, r);
  }) : ud(this, null, null);
}
Wr.prototype.push = function(e, t) {
  return this._transformState.needTransform = !1, pf.prototype.push.call(this, e, t);
};
Wr.prototype._transform = function(e, t, r) {
  r(new cA("_transform()"));
};
Wr.prototype._write = function(e, t, r) {
  var n = this._transformState;
  if (n.writecb = r, n.writechunk = e, n.writeencoding = t, !n.transforming) {
    var i = this._readableState;
    (n.needTransform || i.needReadable || i.length < i.highWaterMark) && this._read(i.highWaterMark);
  }
};
Wr.prototype._read = function(e) {
  var t = this._transformState;
  t.writechunk !== null && !t.transforming ? (t.transforming = !0, this._transform(t.writechunk, t.writeencoding, t.afterTransform)) : t.needTransform = !0;
};
Wr.prototype._destroy = function(e, t) {
  pf.prototype._destroy.call(this, e, function(r) {
    t(r);
  });
};
function ud(e, t, r) {
  if (t)
    return e.emit("error", t);
  if (r != null && e.push(r), e._writableState.length)
    throw new hA();
  if (e._transformState.transforming)
    throw new lA();
  return e.push(null);
}
var yA = jo, Vg = Gg;
ot(jo, Vg);
function jo(e) {
  if (!(this instanceof jo))
    return new jo(e);
  Vg.call(this, e);
}
jo.prototype._transform = function(e, t, r) {
  r(null, e);
};
var Ic;
function gA(e) {
  var t = !1;
  return function() {
    t || (t = !0, e.apply(void 0, arguments));
  };
}
var Wg = di.codes, bA = Wg.ERR_MISSING_ARGS, vA = Wg.ERR_STREAM_DESTROYED;
function ld(e) {
  if (e)
    throw e;
}
function wA(e) {
  return e.setHeader && typeof e.abort == "function";
}
function mA(e, t, r, n) {
  n = gA(n);
  var i = !1;
  e.on("close", function() {
    i = !0;
  }), Ic === void 0 && (Ic = Ml), Ic(e, {
    readable: t,
    writable: r
  }, function(s) {
    if (s)
      return n(s);
    i = !0, n();
  });
  var o = !1;
  return function(s) {
    if (!i && !o) {
      if (o = !0, wA(e))
        return e.abort();
      if (typeof e.destroy == "function")
        return e.destroy();
      n(s || new vA("pipe"));
    }
  };
}
function hd(e) {
  e();
}
function EA(e, t) {
  return e.pipe(t);
}
function _A(e) {
  return !e.length || typeof e[e.length - 1] != "function" ? ld : e.pop();
}
function SA() {
  for (var e = arguments.length, t = new Array(e), r = 0; r < e; r++)
    t[r] = arguments[r];
  var n = _A(t);
  if (Array.isArray(t[0]) && (t = t[0]), t.length < 2)
    throw new bA("streams");
  var i, o = t.map(function(s, a) {
    var f = a < t.length - 1, l = a > 0;
    return mA(s, f, l, function(h) {
      i || (i = h), h && o.forEach(hd), !f && (o.forEach(hd), n(i));
    });
  });
  return t.reduce(EA);
}
var OA = SA;
(function(e, t) {
  t = e.exports = qg(), t.Stream = t, t.Readable = t, t.Writable = jg(), t.Duplex = ro(), t.Transform = Gg, t.PassThrough = yA, t.finished = Ml, t.pipeline = OA;
})(Ou, Ou.exports);
var zg = Ou.exports, Aa = Re.Buffer, Xg = zg.Transform, AA = ot;
function TA(e, t) {
  if (!Aa.isBuffer(e) && typeof e != "string")
    throw new TypeError(t + " must be a string or a buffer");
}
function On(e) {
  Xg.call(this), this._block = Aa.allocUnsafe(e), this._blockSize = e, this._blockOffset = 0, this._length = [0, 0, 0, 0], this._finalized = !1;
}
AA(On, Xg);
On.prototype._transform = function(e, t, r) {
  var n = null;
  try {
    this.update(e, t);
  } catch (i) {
    n = i;
  }
  r(n);
};
On.prototype._flush = function(e) {
  var t = null;
  try {
    this.push(this.digest());
  } catch (r) {
    t = r;
  }
  e(t);
};
On.prototype.update = function(e, t) {
  if (TA(e, "Data"), this._finalized)
    throw new Error("Digest already called");
  Aa.isBuffer(e) || (e = Aa.from(e, t));
  for (var r = this._block, n = 0; this._blockOffset + e.length - n >= this._blockSize; ) {
    for (var i = this._blockOffset; i < this._blockSize; )
      r[i++] = e[n++];
    this._update(), this._blockOffset = 0;
  }
  for (; n < e.length; )
    r[this._blockOffset++] = e[n++];
  for (var o = 0, s = e.length * 8; s > 0; ++o)
    this._length[o] += s, s = this._length[o] / 4294967296 | 0, s > 0 && (this._length[o] -= 4294967296 * s);
  return this;
};
On.prototype._update = function() {
  throw new Error("_update is not implemented");
};
On.prototype.digest = function(e) {
  if (this._finalized)
    throw new Error("Digest already called");
  this._finalized = !0;
  var t = this._digest();
  e !== void 0 && (t = t.toString(e)), this._block.fill(0), this._blockOffset = 0;
  for (var r = 0; r < 4; ++r)
    this._length[r] = 0;
  return t;
};
On.prototype._digest = function() {
  throw new Error("_digest is not implemented");
};
var Yg = On, IA = ot, Zg = Yg, PA = Re.Buffer, xA = new Array(16);
function df() {
  Zg.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878;
}
IA(df, Zg);
df.prototype._update = function() {
  for (var e = xA, t = 0; t < 16; ++t)
    e[t] = this._block.readInt32LE(t * 4);
  var r = this._a, n = this._b, i = this._c, o = this._d;
  r = mt(r, n, i, o, e[0], 3614090360, 7), o = mt(o, r, n, i, e[1], 3905402710, 12), i = mt(i, o, r, n, e[2], 606105819, 17), n = mt(n, i, o, r, e[3], 3250441966, 22), r = mt(r, n, i, o, e[4], 4118548399, 7), o = mt(o, r, n, i, e[5], 1200080426, 12), i = mt(i, o, r, n, e[6], 2821735955, 17), n = mt(n, i, o, r, e[7], 4249261313, 22), r = mt(r, n, i, o, e[8], 1770035416, 7), o = mt(o, r, n, i, e[9], 2336552879, 12), i = mt(i, o, r, n, e[10], 4294925233, 17), n = mt(n, i, o, r, e[11], 2304563134, 22), r = mt(r, n, i, o, e[12], 1804603682, 7), o = mt(o, r, n, i, e[13], 4254626195, 12), i = mt(i, o, r, n, e[14], 2792965006, 17), n = mt(n, i, o, r, e[15], 1236535329, 22), r = Et(r, n, i, o, e[1], 4129170786, 5), o = Et(o, r, n, i, e[6], 3225465664, 9), i = Et(i, o, r, n, e[11], 643717713, 14), n = Et(n, i, o, r, e[0], 3921069994, 20), r = Et(r, n, i, o, e[5], 3593408605, 5), o = Et(o, r, n, i, e[10], 38016083, 9), i = Et(i, o, r, n, e[15], 3634488961, 14), n = Et(n, i, o, r, e[4], 3889429448, 20), r = Et(r, n, i, o, e[9], 568446438, 5), o = Et(o, r, n, i, e[14], 3275163606, 9), i = Et(i, o, r, n, e[3], 4107603335, 14), n = Et(n, i, o, r, e[8], 1163531501, 20), r = Et(r, n, i, o, e[13], 2850285829, 5), o = Et(o, r, n, i, e[2], 4243563512, 9), i = Et(i, o, r, n, e[7], 1735328473, 14), n = Et(n, i, o, r, e[12], 2368359562, 20), r = _t(r, n, i, o, e[5], 4294588738, 4), o = _t(o, r, n, i, e[8], 2272392833, 11), i = _t(i, o, r, n, e[11], 1839030562, 16), n = _t(n, i, o, r, e[14], 4259657740, 23), r = _t(r, n, i, o, e[1], 2763975236, 4), o = _t(o, r, n, i, e[4], 1272893353, 11), i = _t(i, o, r, n, e[7], 4139469664, 16), n = _t(n, i, o, r, e[10], 3200236656, 23), r = _t(r, n, i, o, e[13], 681279174, 4), o = _t(o, r, n, i, e[0], 3936430074, 11), i = _t(i, o, r, n, e[3], 3572445317, 16), n = _t(n, i, o, r, e[6], 76029189, 23), r = _t(r, n, i, o, e[9], 3654602809, 4), o = _t(o, r, n, i, e[12], 3873151461, 11), i = _t(i, o, r, n, e[15], 530742520, 16), n = _t(n, i, o, r, e[2], 3299628645, 23), r = St(r, n, i, o, e[0], 4096336452, 6), o = St(o, r, n, i, e[7], 1126891415, 10), i = St(i, o, r, n, e[14], 2878612391, 15), n = St(n, i, o, r, e[5], 4237533241, 21), r = St(r, n, i, o, e[12], 1700485571, 6), o = St(o, r, n, i, e[3], 2399980690, 10), i = St(i, o, r, n, e[10], 4293915773, 15), n = St(n, i, o, r, e[1], 2240044497, 21), r = St(r, n, i, o, e[8], 1873313359, 6), o = St(o, r, n, i, e[15], 4264355552, 10), i = St(i, o, r, n, e[6], 2734768916, 15), n = St(n, i, o, r, e[13], 1309151649, 21), r = St(r, n, i, o, e[4], 4149444226, 6), o = St(o, r, n, i, e[11], 3174756917, 10), i = St(i, o, r, n, e[2], 718787259, 15), n = St(n, i, o, r, e[9], 3951481745, 21), this._a = this._a + r | 0, this._b = this._b + n | 0, this._c = this._c + i | 0, this._d = this._d + o | 0;
};
df.prototype._digest = function() {
  this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
  var e = PA.allocUnsafe(16);
  return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), e;
};
function yf(e, t) {
  return e << t | e >>> 32 - t;
}
function mt(e, t, r, n, i, o, s) {
  return yf(e + (t & r | ~t & n) + i + o | 0, s) + t | 0;
}
function Et(e, t, r, n, i, o, s) {
  return yf(e + (t & n | r & ~n) + i + o | 0, s) + t | 0;
}
function _t(e, t, r, n, i, o, s) {
  return yf(e + (t ^ r ^ n) + i + o | 0, s) + t | 0;
}
function St(e, t, r, n, i, o, s) {
  return yf(e + (r ^ (t | ~n)) + i + o | 0, s) + t | 0;
}
var Jg = df, Pc = ar.Buffer, BA = ot, Qg = Yg, kA = new Array(16), bo = [
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  7,
  4,
  13,
  1,
  10,
  6,
  15,
  3,
  12,
  0,
  9,
  5,
  2,
  14,
  11,
  8,
  3,
  10,
  14,
  4,
  9,
  15,
  8,
  1,
  2,
  7,
  0,
  6,
  13,
  11,
  5,
  12,
  1,
  9,
  11,
  10,
  0,
  8,
  12,
  4,
  13,
  3,
  7,
  15,
  14,
  5,
  6,
  2,
  4,
  0,
  5,
  9,
  7,
  12,
  2,
  10,
  14,
  1,
  3,
  8,
  11,
  6,
  15,
  13
], vo = [
  5,
  14,
  7,
  0,
  9,
  2,
  11,
  4,
  13,
  6,
  15,
  8,
  1,
  10,
  3,
  12,
  6,
  11,
  3,
  7,
  0,
  13,
  5,
  10,
  14,
  15,
  8,
  12,
  4,
  9,
  1,
  2,
  15,
  5,
  1,
  3,
  7,
  14,
  6,
  9,
  11,
  8,
  12,
  2,
  10,
  0,
  4,
  13,
  8,
  6,
  4,
  1,
  3,
  11,
  15,
  0,
  5,
  12,
  2,
  13,
  9,
  7,
  10,
  14,
  12,
  15,
  10,
  4,
  1,
  5,
  8,
  7,
  6,
  2,
  13,
  14,
  0,
  3,
  9,
  11
], wo = [
  11,
  14,
  15,
  12,
  5,
  8,
  7,
  9,
  11,
  13,
  14,
  15,
  6,
  7,
  9,
  8,
  7,
  6,
  8,
  13,
  11,
  9,
  7,
  15,
  7,
  12,
  15,
  9,
  11,
  7,
  13,
  12,
  11,
  13,
  6,
  7,
  14,
  9,
  13,
  15,
  14,
  8,
  13,
  6,
  5,
  12,
  7,
  5,
  11,
  12,
  14,
  15,
  14,
  15,
  9,
  8,
  9,
  14,
  5,
  6,
  8,
  6,
  5,
  12,
  9,
  15,
  5,
  11,
  6,
  8,
  13,
  12,
  5,
  12,
  13,
  14,
  11,
  8,
  5,
  6
], mo = [
  8,
  9,
  9,
  11,
  13,
  15,
  15,
  5,
  7,
  7,
  8,
  11,
  14,
  14,
  12,
  6,
  9,
  13,
  15,
  7,
  12,
  8,
  9,
  11,
  7,
  7,
  12,
  7,
  6,
  15,
  13,
  11,
  9,
  7,
  15,
  11,
  8,
  6,
  6,
  14,
  12,
  13,
  5,
  14,
  13,
  13,
  7,
  5,
  15,
  5,
  8,
  11,
  14,
  14,
  6,
  14,
  6,
  9,
  12,
  9,
  12,
  5,
  15,
  8,
  8,
  5,
  12,
  9,
  12,
  5,
  14,
  6,
  8,
  13,
  6,
  5,
  15,
  13,
  11,
  11
], Eo = [0, 1518500249, 1859775393, 2400959708, 2840853838], _o = [1352829926, 1548603684, 1836072691, 2053994217, 0];
function gf() {
  Qg.call(this, 64), this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520;
}
BA(gf, Qg);
gf.prototype._update = function() {
  for (var e = kA, t = 0; t < 16; ++t)
    e[t] = this._block.readInt32LE(t * 4);
  for (var r = this._a | 0, n = this._b | 0, i = this._c | 0, o = this._d | 0, s = this._e | 0, a = this._a | 0, f = this._b | 0, l = this._c | 0, h = this._d | 0, y = this._e | 0, v = 0; v < 80; v += 1) {
    var g, m;
    v < 16 ? (g = pd(r, n, i, o, s, e[bo[v]], Eo[0], wo[v]), m = bd(a, f, l, h, y, e[vo[v]], _o[0], mo[v])) : v < 32 ? (g = dd(r, n, i, o, s, e[bo[v]], Eo[1], wo[v]), m = gd(a, f, l, h, y, e[vo[v]], _o[1], mo[v])) : v < 48 ? (g = yd(r, n, i, o, s, e[bo[v]], Eo[2], wo[v]), m = yd(a, f, l, h, y, e[vo[v]], _o[2], mo[v])) : v < 64 ? (g = gd(r, n, i, o, s, e[bo[v]], Eo[3], wo[v]), m = dd(a, f, l, h, y, e[vo[v]], _o[3], mo[v])) : (g = bd(r, n, i, o, s, e[bo[v]], Eo[4], wo[v]), m = pd(a, f, l, h, y, e[vo[v]], _o[4], mo[v])), r = s, s = o, o = zn(i, 10), i = n, n = g, a = y, y = h, h = zn(l, 10), l = f, f = m;
  }
  var E = this._b + i + h | 0;
  this._b = this._c + o + y | 0, this._c = this._d + s + a | 0, this._d = this._e + r + f | 0, this._e = this._a + n + l | 0, this._a = E;
};
gf.prototype._digest = function() {
  this._block[this._blockOffset++] = 128, this._blockOffset > 56 && (this._block.fill(0, this._blockOffset, 64), this._update(), this._blockOffset = 0), this._block.fill(0, this._blockOffset, 56), this._block.writeUInt32LE(this._length[0], 56), this._block.writeUInt32LE(this._length[1], 60), this._update();
  var e = Pc.alloc ? Pc.alloc(20) : new Pc(20);
  return e.writeInt32LE(this._a, 0), e.writeInt32LE(this._b, 4), e.writeInt32LE(this._c, 8), e.writeInt32LE(this._d, 12), e.writeInt32LE(this._e, 16), e;
};
function zn(e, t) {
  return e << t | e >>> 32 - t;
}
function pd(e, t, r, n, i, o, s, a) {
  return zn(e + (t ^ r ^ n) + o + s | 0, a) + i | 0;
}
function dd(e, t, r, n, i, o, s, a) {
  return zn(e + (t & r | ~t & n) + o + s | 0, a) + i | 0;
}
function yd(e, t, r, n, i, o, s, a) {
  return zn(e + ((t | ~r) ^ n) + o + s | 0, a) + i | 0;
}
function gd(e, t, r, n, i, o, s, a) {
  return zn(e + (t & n | r & ~n) + o + s | 0, a) + i | 0;
}
function bd(e, t, r, n, i, o, s, a) {
  return zn(e + (t ^ (r | ~n)) + o + s | 0, a) + i | 0;
}
var eb = gf, tb = { exports: {} }, rb = Re.Buffer;
function bf(e, t) {
  this._block = rb.alloc(e), this._finalSize = t, this._blockSize = e, this._len = 0;
}
bf.prototype.update = function(e, t) {
  typeof e == "string" && (t = t || "utf8", e = rb.from(e, t));
  for (var r = this._block, n = this._blockSize, i = e.length, o = this._len, s = 0; s < i; ) {
    for (var a = o % n, f = Math.min(i - s, n - a), l = 0; l < f; l++)
      r[a + l] = e[s + l];
    o += f, s += f, o % n === 0 && this._update(r);
  }
  return this._len += i, this;
};
bf.prototype.digest = function(e) {
  var t = this._len % this._blockSize;
  this._block[t] = 128, this._block.fill(0, t + 1), t >= this._finalSize && (this._update(this._block), this._block.fill(0));
  var r = this._len * 8;
  if (r <= 4294967295)
    this._block.writeUInt32BE(r, this._blockSize - 4);
  else {
    var n = (r & 4294967295) >>> 0, i = (r - n) / 4294967296;
    this._block.writeUInt32BE(i, this._blockSize - 8), this._block.writeUInt32BE(n, this._blockSize - 4);
  }
  this._update(this._block);
  var o = this._hash();
  return e ? o.toString(e) : o;
};
bf.prototype._update = function() {
  throw new Error("_update must be implemented by subclass");
};
var ao = bf, RA = ot, nb = ao, NA = Re.Buffer, UA = [
  1518500249,
  1859775393,
  -1894007588,
  -899497514
], CA = new Array(80);
function os() {
  this.init(), this._w = CA, nb.call(this, 64, 56);
}
RA(os, nb);
os.prototype.init = function() {
  return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
};
function $A(e) {
  return e << 5 | e >>> 27;
}
function HA(e) {
  return e << 30 | e >>> 2;
}
function LA(e, t, r, n) {
  return e === 0 ? t & r | ~t & n : e === 2 ? t & r | t & n | r & n : t ^ r ^ n;
}
os.prototype._update = function(e) {
  for (var t = this._w, r = this._a | 0, n = this._b | 0, i = this._c | 0, o = this._d | 0, s = this._e | 0, a = 0; a < 16; ++a)
    t[a] = e.readInt32BE(a * 4);
  for (; a < 80; ++a)
    t[a] = t[a - 3] ^ t[a - 8] ^ t[a - 14] ^ t[a - 16];
  for (var f = 0; f < 80; ++f) {
    var l = ~~(f / 20), h = $A(r) + LA(l, n, i, o) + s + t[f] + UA[l] | 0;
    s = o, o = i, i = HA(n), n = r, r = h;
  }
  this._a = r + this._a | 0, this._b = n + this._b | 0, this._c = i + this._c | 0, this._d = o + this._d | 0, this._e = s + this._e | 0;
};
os.prototype._hash = function() {
  var e = NA.allocUnsafe(20);
  return e.writeInt32BE(this._a | 0, 0), e.writeInt32BE(this._b | 0, 4), e.writeInt32BE(this._c | 0, 8), e.writeInt32BE(this._d | 0, 12), e.writeInt32BE(this._e | 0, 16), e;
};
var DA = os, MA = ot, ib = ao, FA = Re.Buffer, jA = [
  1518500249,
  1859775393,
  -1894007588,
  -899497514
], KA = new Array(80);
function ss() {
  this.init(), this._w = KA, ib.call(this, 64, 56);
}
MA(ss, ib);
ss.prototype.init = function() {
  return this._a = 1732584193, this._b = 4023233417, this._c = 2562383102, this._d = 271733878, this._e = 3285377520, this;
};
function qA(e) {
  return e << 1 | e >>> 31;
}
function GA(e) {
  return e << 5 | e >>> 27;
}
function VA(e) {
  return e << 30 | e >>> 2;
}
function WA(e, t, r, n) {
  return e === 0 ? t & r | ~t & n : e === 2 ? t & r | t & n | r & n : t ^ r ^ n;
}
ss.prototype._update = function(e) {
  for (var t = this._w, r = this._a | 0, n = this._b | 0, i = this._c | 0, o = this._d | 0, s = this._e | 0, a = 0; a < 16; ++a)
    t[a] = e.readInt32BE(a * 4);
  for (; a < 80; ++a)
    t[a] = qA(t[a - 3] ^ t[a - 8] ^ t[a - 14] ^ t[a - 16]);
  for (var f = 0; f < 80; ++f) {
    var l = ~~(f / 20), h = GA(r) + WA(l, n, i, o) + s + t[f] + jA[l] | 0;
    s = o, o = i, i = VA(n), n = r, r = h;
  }
  this._a = r + this._a | 0, this._b = n + this._b | 0, this._c = i + this._c | 0, this._d = o + this._d | 0, this._e = s + this._e | 0;
};
ss.prototype._hash = function() {
  var e = FA.allocUnsafe(20);
  return e.writeInt32BE(this._a | 0, 0), e.writeInt32BE(this._b | 0, 4), e.writeInt32BE(this._c | 0, 8), e.writeInt32BE(this._d | 0, 12), e.writeInt32BE(this._e | 0, 16), e;
};
var zA = ss, XA = ot, ob = ao, YA = Re.Buffer, ZA = [
  1116352408,
  1899447441,
  3049323471,
  3921009573,
  961987163,
  1508970993,
  2453635748,
  2870763221,
  3624381080,
  310598401,
  607225278,
  1426881987,
  1925078388,
  2162078206,
  2614888103,
  3248222580,
  3835390401,
  4022224774,
  264347078,
  604807628,
  770255983,
  1249150122,
  1555081692,
  1996064986,
  2554220882,
  2821834349,
  2952996808,
  3210313671,
  3336571891,
  3584528711,
  113926993,
  338241895,
  666307205,
  773529912,
  1294757372,
  1396182291,
  1695183700,
  1986661051,
  2177026350,
  2456956037,
  2730485921,
  2820302411,
  3259730800,
  3345764771,
  3516065817,
  3600352804,
  4094571909,
  275423344,
  430227734,
  506948616,
  659060556,
  883997877,
  958139571,
  1322822218,
  1537002063,
  1747873779,
  1955562222,
  2024104815,
  2227730452,
  2361852424,
  2428436474,
  2756734187,
  3204031479,
  3329325298
], JA = new Array(64);
function as() {
  this.init(), this._w = JA, ob.call(this, 64, 56);
}
XA(as, ob);
as.prototype.init = function() {
  return this._a = 1779033703, this._b = 3144134277, this._c = 1013904242, this._d = 2773480762, this._e = 1359893119, this._f = 2600822924, this._g = 528734635, this._h = 1541459225, this;
};
function QA(e, t, r) {
  return r ^ e & (t ^ r);
}
function eT(e, t, r) {
  return e & t | r & (e | t);
}
function tT(e) {
  return (e >>> 2 | e << 30) ^ (e >>> 13 | e << 19) ^ (e >>> 22 | e << 10);
}
function rT(e) {
  return (e >>> 6 | e << 26) ^ (e >>> 11 | e << 21) ^ (e >>> 25 | e << 7);
}
function nT(e) {
  return (e >>> 7 | e << 25) ^ (e >>> 18 | e << 14) ^ e >>> 3;
}
function iT(e) {
  return (e >>> 17 | e << 15) ^ (e >>> 19 | e << 13) ^ e >>> 10;
}
as.prototype._update = function(e) {
  for (var t = this._w, r = this._a | 0, n = this._b | 0, i = this._c | 0, o = this._d | 0, s = this._e | 0, a = this._f | 0, f = this._g | 0, l = this._h | 0, h = 0; h < 16; ++h)
    t[h] = e.readInt32BE(h * 4);
  for (; h < 64; ++h)
    t[h] = iT(t[h - 2]) + t[h - 7] + nT(t[h - 15]) + t[h - 16] | 0;
  for (var y = 0; y < 64; ++y) {
    var v = l + rT(s) + QA(s, a, f) + ZA[y] + t[y] | 0, g = tT(r) + eT(r, n, i) | 0;
    l = f, f = a, a = s, s = o + v | 0, o = i, i = n, n = r, r = v + g | 0;
  }
  this._a = r + this._a | 0, this._b = n + this._b | 0, this._c = i + this._c | 0, this._d = o + this._d | 0, this._e = s + this._e | 0, this._f = a + this._f | 0, this._g = f + this._g | 0, this._h = l + this._h | 0;
};
as.prototype._hash = function() {
  var e = YA.allocUnsafe(32);
  return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e.writeInt32BE(this._h, 28), e;
};
var sb = as, oT = ot, sT = sb, aT = ao, fT = Re.Buffer, cT = new Array(64);
function vf() {
  this.init(), this._w = cT, aT.call(this, 64, 56);
}
oT(vf, sT);
vf.prototype.init = function() {
  return this._a = 3238371032, this._b = 914150663, this._c = 812702999, this._d = 4144912697, this._e = 4290775857, this._f = 1750603025, this._g = 1694076839, this._h = 3204075428, this;
};
vf.prototype._hash = function() {
  var e = fT.allocUnsafe(28);
  return e.writeInt32BE(this._a, 0), e.writeInt32BE(this._b, 4), e.writeInt32BE(this._c, 8), e.writeInt32BE(this._d, 12), e.writeInt32BE(this._e, 16), e.writeInt32BE(this._f, 20), e.writeInt32BE(this._g, 24), e;
};
var uT = vf, lT = ot, ab = ao, hT = Re.Buffer, vd = [
  1116352408,
  3609767458,
  1899447441,
  602891725,
  3049323471,
  3964484399,
  3921009573,
  2173295548,
  961987163,
  4081628472,
  1508970993,
  3053834265,
  2453635748,
  2937671579,
  2870763221,
  3664609560,
  3624381080,
  2734883394,
  310598401,
  1164996542,
  607225278,
  1323610764,
  1426881987,
  3590304994,
  1925078388,
  4068182383,
  2162078206,
  991336113,
  2614888103,
  633803317,
  3248222580,
  3479774868,
  3835390401,
  2666613458,
  4022224774,
  944711139,
  264347078,
  2341262773,
  604807628,
  2007800933,
  770255983,
  1495990901,
  1249150122,
  1856431235,
  1555081692,
  3175218132,
  1996064986,
  2198950837,
  2554220882,
  3999719339,
  2821834349,
  766784016,
  2952996808,
  2566594879,
  3210313671,
  3203337956,
  3336571891,
  1034457026,
  3584528711,
  2466948901,
  113926993,
  3758326383,
  338241895,
  168717936,
  666307205,
  1188179964,
  773529912,
  1546045734,
  1294757372,
  1522805485,
  1396182291,
  2643833823,
  1695183700,
  2343527390,
  1986661051,
  1014477480,
  2177026350,
  1206759142,
  2456956037,
  344077627,
  2730485921,
  1290863460,
  2820302411,
  3158454273,
  3259730800,
  3505952657,
  3345764771,
  106217008,
  3516065817,
  3606008344,
  3600352804,
  1432725776,
  4094571909,
  1467031594,
  275423344,
  851169720,
  430227734,
  3100823752,
  506948616,
  1363258195,
  659060556,
  3750685593,
  883997877,
  3785050280,
  958139571,
  3318307427,
  1322822218,
  3812723403,
  1537002063,
  2003034995,
  1747873779,
  3602036899,
  1955562222,
  1575990012,
  2024104815,
  1125592928,
  2227730452,
  2716904306,
  2361852424,
  442776044,
  2428436474,
  593698344,
  2756734187,
  3733110249,
  3204031479,
  2999351573,
  3329325298,
  3815920427,
  3391569614,
  3928383900,
  3515267271,
  566280711,
  3940187606,
  3454069534,
  4118630271,
  4000239992,
  116418474,
  1914138554,
  174292421,
  2731055270,
  289380356,
  3203993006,
  460393269,
  320620315,
  685471733,
  587496836,
  852142971,
  1086792851,
  1017036298,
  365543100,
  1126000580,
  2618297676,
  1288033470,
  3409855158,
  1501505948,
  4234509866,
  1607167915,
  987167468,
  1816402316,
  1246189591
], pT = new Array(160);
function fs() {
  this.init(), this._w = pT, ab.call(this, 128, 112);
}
lT(fs, ab);
fs.prototype.init = function() {
  return this._ah = 1779033703, this._bh = 3144134277, this._ch = 1013904242, this._dh = 2773480762, this._eh = 1359893119, this._fh = 2600822924, this._gh = 528734635, this._hh = 1541459225, this._al = 4089235720, this._bl = 2227873595, this._cl = 4271175723, this._dl = 1595750129, this._el = 2917565137, this._fl = 725511199, this._gl = 4215389547, this._hl = 327033209, this;
};
function wd(e, t, r) {
  return r ^ e & (t ^ r);
}
function md(e, t, r) {
  return e & t | r & (e | t);
}
function Ed(e, t) {
  return (e >>> 28 | t << 4) ^ (t >>> 2 | e << 30) ^ (t >>> 7 | e << 25);
}
function _d(e, t) {
  return (e >>> 14 | t << 18) ^ (e >>> 18 | t << 14) ^ (t >>> 9 | e << 23);
}
function dT(e, t) {
  return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ e >>> 7;
}
function yT(e, t) {
  return (e >>> 1 | t << 31) ^ (e >>> 8 | t << 24) ^ (e >>> 7 | t << 25);
}
function gT(e, t) {
  return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ e >>> 6;
}
function bT(e, t) {
  return (e >>> 19 | t << 13) ^ (t >>> 29 | e << 3) ^ (e >>> 6 | t << 26);
}
function ft(e, t) {
  return e >>> 0 < t >>> 0 ? 1 : 0;
}
fs.prototype._update = function(e) {
  for (var t = this._w, r = this._ah | 0, n = this._bh | 0, i = this._ch | 0, o = this._dh | 0, s = this._eh | 0, a = this._fh | 0, f = this._gh | 0, l = this._hh | 0, h = this._al | 0, y = this._bl | 0, v = this._cl | 0, g = this._dl | 0, m = this._el | 0, E = this._fl | 0, O = this._gl | 0, x = this._hl | 0, U = 0; U < 32; U += 2)
    t[U] = e.readInt32BE(U * 4), t[U + 1] = e.readInt32BE(U * 4 + 4);
  for (; U < 160; U += 2) {
    var H = t[U - 30], M = t[U - 15 * 2 + 1], k = dT(H, M), _ = yT(M, H);
    H = t[U - 2 * 2], M = t[U - 2 * 2 + 1];
    var L = gT(H, M), j = bT(M, H), F = t[U - 7 * 2], W = t[U - 7 * 2 + 1], te = t[U - 16 * 2], re = t[U - 16 * 2 + 1], ae = _ + W | 0, de = k + F + ft(ae, _) | 0;
    ae = ae + j | 0, de = de + L + ft(ae, j) | 0, ae = ae + re | 0, de = de + te + ft(ae, re) | 0, t[U] = de, t[U + 1] = ae;
  }
  for (var J = 0; J < 160; J += 2) {
    de = t[J], ae = t[J + 1];
    var ne = md(r, n, i), ue = md(h, y, v), pe = Ed(r, h), z = Ed(h, r), Y = _d(s, m), ee = _d(m, s), $ = vd[J], q = vd[J + 1], X = wd(s, a, f), ie = wd(m, E, O), D = x + ee | 0, A = l + Y + ft(D, x) | 0;
    D = D + ie | 0, A = A + X + ft(D, ie) | 0, D = D + q | 0, A = A + $ + ft(D, q) | 0, D = D + ae | 0, A = A + de + ft(D, ae) | 0;
    var P = z + ue | 0, C = pe + ne + ft(P, z) | 0;
    l = f, x = O, f = a, O = E, a = s, E = m, m = g + D | 0, s = o + A + ft(m, g) | 0, o = i, g = v, i = n, v = y, n = r, y = h, h = D + P | 0, r = A + C + ft(h, D) | 0;
  }
  this._al = this._al + h | 0, this._bl = this._bl + y | 0, this._cl = this._cl + v | 0, this._dl = this._dl + g | 0, this._el = this._el + m | 0, this._fl = this._fl + E | 0, this._gl = this._gl + O | 0, this._hl = this._hl + x | 0, this._ah = this._ah + r + ft(this._al, h) | 0, this._bh = this._bh + n + ft(this._bl, y) | 0, this._ch = this._ch + i + ft(this._cl, v) | 0, this._dh = this._dh + o + ft(this._dl, g) | 0, this._eh = this._eh + s + ft(this._el, m) | 0, this._fh = this._fh + a + ft(this._fl, E) | 0, this._gh = this._gh + f + ft(this._gl, O) | 0, this._hh = this._hh + l + ft(this._hl, x) | 0;
};
fs.prototype._hash = function() {
  var e = hT.allocUnsafe(64);
  function t(r, n, i) {
    e.writeInt32BE(r, i), e.writeInt32BE(n, i + 4);
  }
  return t(this._ah, this._al, 0), t(this._bh, this._bl, 8), t(this._ch, this._cl, 16), t(this._dh, this._dl, 24), t(this._eh, this._el, 32), t(this._fh, this._fl, 40), t(this._gh, this._gl, 48), t(this._hh, this._hl, 56), e;
};
var fb = fs, vT = ot, wT = fb, mT = ao, ET = Re.Buffer, _T = new Array(160);
function wf() {
  this.init(), this._w = _T, mT.call(this, 128, 112);
}
vT(wf, wT);
wf.prototype.init = function() {
  return this._ah = 3418070365, this._bh = 1654270250, this._ch = 2438529370, this._dh = 355462360, this._eh = 1731405415, this._fh = 2394180231, this._gh = 3675008525, this._hh = 1203062813, this._al = 3238371032, this._bl = 914150663, this._cl = 812702999, this._dl = 4144912697, this._el = 4290775857, this._fl = 1750603025, this._gl = 1694076839, this._hl = 3204075428, this;
};
wf.prototype._hash = function() {
  var e = ET.allocUnsafe(48);
  function t(r, n, i) {
    e.writeInt32BE(r, i), e.writeInt32BE(n, i + 4);
  }
  return t(this._ah, this._al, 0), t(this._bh, this._bl, 8), t(this._ch, this._cl, 16), t(this._dh, this._dl, 24), t(this._eh, this._el, 32), t(this._fh, this._fl, 40), e;
};
var ST = wf, yi = tb.exports = function(t) {
  t = t.toLowerCase();
  var r = yi[t];
  if (!r)
    throw new Error(t + " is not supported (we accept pull requests)");
  return new r();
};
yi.sha = DA;
yi.sha1 = zA;
yi.sha224 = uT;
yi.sha256 = sb;
yi.sha384 = ST;
yi.sha512 = fb;
var cb = tb.exports, ub = Re.Buffer, lb = zg.Transform, OT = Oa.StringDecoder, AT = ot;
function ur(e) {
  lb.call(this), this.hashMode = typeof e == "string", this.hashMode ? this[e] = this._finalOrDigest : this.final = this._finalOrDigest, this._final && (this.__final = this._final, this._final = null), this._decoder = null, this._encoding = null;
}
AT(ur, lb);
ur.prototype.update = function(e, t, r) {
  typeof e == "string" && (e = ub.from(e, t));
  var n = this._update(e);
  return this.hashMode ? this : (r && (n = this._toString(n, r)), n);
};
ur.prototype.setAutoPadding = function() {
};
ur.prototype.getAuthTag = function() {
  throw new Error("trying to get auth tag in unsupported state");
};
ur.prototype.setAuthTag = function() {
  throw new Error("trying to set auth tag in unsupported state");
};
ur.prototype.setAAD = function() {
  throw new Error("trying to set aad in unsupported state");
};
ur.prototype._transform = function(e, t, r) {
  var n;
  try {
    this.hashMode ? this._update(e) : this.push(this._update(e));
  } catch (i) {
    n = i;
  } finally {
    r(n);
  }
};
ur.prototype._flush = function(e) {
  var t;
  try {
    this.push(this.__final());
  } catch (r) {
    t = r;
  }
  e(t);
};
ur.prototype._finalOrDigest = function(e) {
  var t = this.__final() || ub.alloc(0);
  return e && (t = this._toString(t, e, !0)), t;
};
ur.prototype._toString = function(e, t, r) {
  if (this._decoder || (this._decoder = new OT(t), this._encoding = t), this._encoding !== t)
    throw new Error("can't switch encodings");
  var n = this._decoder.write(e);
  return r && (n += this._decoder.end()), n;
};
var Fl = ur, TT = ot, IT = Jg, PT = eb, xT = cb, hb = Fl;
function mf(e) {
  hb.call(this, "digest"), this._hash = e;
}
TT(mf, hb);
mf.prototype._update = function(e) {
  this._hash.update(e);
};
mf.prototype._final = function() {
  return this._hash.digest();
};
var pb = function(t) {
  return t = t.toLowerCase(), t === "md5" ? new IT() : t === "rmd160" || t === "ripemd160" ? new PT() : new mf(xT(t));
}, Ms = Re.Buffer;
function BT(e) {
  if (e.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), r = 0; r < t.length; r++)
    t[r] = 255;
  for (var n = 0; n < e.length; n++) {
    var i = e.charAt(n), o = i.charCodeAt(0);
    if (t[o] !== 255)
      throw new TypeError(i + " is ambiguous");
    t[o] = n;
  }
  var s = e.length, a = e.charAt(0), f = Math.log(s) / Math.log(256), l = Math.log(256) / Math.log(s);
  function h(g) {
    if ((Array.isArray(g) || g instanceof Uint8Array) && (g = Ms.from(g)), !Ms.isBuffer(g))
      throw new TypeError("Expected Buffer");
    if (g.length === 0)
      return "";
    for (var m = 0, E = 0, O = 0, x = g.length; O !== x && g[O] === 0; )
      O++, m++;
    for (var U = (x - O) * l + 1 >>> 0, H = new Uint8Array(U); O !== x; ) {
      for (var M = g[O], k = 0, _ = U - 1; (M !== 0 || k < E) && _ !== -1; _--, k++)
        M += 256 * H[_] >>> 0, H[_] = M % s >>> 0, M = M / s >>> 0;
      if (M !== 0)
        throw new Error("Non-zero carry");
      E = k, O++;
    }
    for (var L = U - E; L !== U && H[L] === 0; )
      L++;
    for (var j = a.repeat(m); L < U; ++L)
      j += e.charAt(H[L]);
    return j;
  }
  function y(g) {
    if (typeof g != "string")
      throw new TypeError("Expected String");
    if (g.length === 0)
      return Ms.alloc(0);
    for (var m = 0, E = 0, O = 0; g[m] === a; )
      E++, m++;
    for (var x = (g.length - m) * f + 1 >>> 0, U = new Uint8Array(x); g[m]; ) {
      var H = t[g.charCodeAt(m)];
      if (H === 255)
        return;
      for (var M = 0, k = x - 1; (H !== 0 || M < O) && k !== -1; k--, M++)
        H += s * U[k] >>> 0, U[k] = H % 256 >>> 0, H = H / 256 >>> 0;
      if (H !== 0)
        throw new Error("Non-zero carry");
      O = M, m++;
    }
    for (var _ = x - O; _ !== x && U[_] === 0; )
      _++;
    var L = Ms.allocUnsafe(E + (x - _));
    L.fill(0, 0, E);
    for (var j = E; _ !== x; )
      L[j++] = U[_++];
    return L;
  }
  function v(g) {
    var m = y(g);
    if (m)
      return m;
    throw new Error("Non-base" + s + " character");
  }
  return {
    encode: h,
    decodeUnsafe: y,
    decode: v
  };
}
var kT = BT, RT = kT, NT = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz", UT = RT(NT), xc = UT, CT = Re.Buffer, $T = function(e) {
  function t(o) {
    var s = e(o);
    return xc.encode(CT.concat([
      o,
      s
    ], o.length + 4));
  }
  function r(o) {
    var s = o.slice(0, -4), a = o.slice(-4), f = e(s);
    if (!(a[0] ^ f[0] | a[1] ^ f[1] | a[2] ^ f[2] | a[3] ^ f[3]))
      return s;
  }
  function n(o) {
    var s = xc.decodeUnsafe(o);
    if (s)
      return r(s);
  }
  function i(o) {
    var s = xc.decode(o), a = r(s);
    if (!a)
      throw new Error("Invalid checksum");
    return a;
  }
  return {
    encode: t,
    decode: i,
    decodeUnsafe: n
  };
}, Sd = pb, HT = $T;
function LT(e) {
  var t = Sd("sha256").update(e).digest();
  return Sd("sha256").update(t).digest();
}
var Ef = HT(LT), ku = Ef;
function db(e, t) {
  if (t !== void 0 && e[0] !== t)
    throw new Error("Invalid network version");
  if (e.length === 33)
    return {
      version: e[0],
      privateKey: e.slice(1, 33),
      compressed: !1
    };
  if (e.length !== 34)
    throw new Error("Invalid WIF length");
  if (e[33] !== 1)
    throw new Error("Invalid compression flag");
  return {
    version: e[0],
    privateKey: e.slice(1, 33),
    compressed: !0
  };
}
function Ru(e, t, r) {
  var n = new N.Buffer(r ? 34 : 33);
  return n.writeUInt8(e, 0), t.copy(n, 1), r && (n[33] = 1), n;
}
function DT(e, t) {
  return db(ku.decode(e), t);
}
function MT(e, t, r) {
  return typeof e == "number" ? ku.encode(Ru(e, t, r)) : ku.encode(
    Ru(
      e.version,
      e.privateKey,
      e.compressed
    )
  );
}
var yb = {
  decode: DT,
  decodeRaw: db,
  encode: MT,
  encodeRaw: Ru
}, _f = {};
Object.defineProperty(_f, "__esModule", { value: !0 });
_f.testEcc = void 0;
const Ne = (e) => N.Buffer.from(e, "hex");
function FT(e) {
  Ot(
    e.isPoint(
      Ne("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), Ot(
    !e.isPoint(
      Ne("030000000000000000000000000000000000000000000000000000000000000005")
    )
  ), Ot(
    e.isPrivate(
      Ne("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), Ot(
    e.isPrivate(
      Ne("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
    )
  ), Ot(
    !e.isPrivate(
      Ne("0000000000000000000000000000000000000000000000000000000000000000")
    )
  ), Ot(
    !e.isPrivate(
      Ne("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141")
    )
  ), Ot(
    !e.isPrivate(
      Ne("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364142")
    )
  ), Ot(
    N.Buffer.from(
      e.pointCompress(
        Ne(
          "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
        ),
        !0
      )
    ).equals(
      Ne("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), Ot(
    N.Buffer.from(
      e.pointCompress(
        Ne(
          "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
        ),
        !1
      )
    ).equals(
      Ne(
        "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
      )
    )
  ), Ot(
    N.Buffer.from(
      e.pointCompress(
        Ne("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
        !0
      )
    ).equals(
      Ne("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798")
    )
  ), Ot(
    N.Buffer.from(
      e.pointCompress(
        Ne("0279be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
        !1
      )
    ).equals(
      Ne(
        "0479be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
      )
    )
  ), Ot(
    N.Buffer.from(
      e.pointFromScalar(
        Ne("b1121e4088a66a28f5b6b0f5844943ecd9f610196d7bb83b25214b60452c09af")
      )
    ).equals(
      Ne("02b07ba9dca9523b7ef4bd97703d43d20399eb698e194704791a25ce77a400df99")
    )
  ), Ot(
    N.Buffer.from(
      e.sign(
        Ne("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"),
        Ne("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364140")
      )
    ).equals(
      Ne(
        "54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"
      )
    )
  ), Ot(
    e.verify(
      Ne("5e9f0a0d593efdcf78ac923bc3313e4e7d408d574354ee2b3288c0da9fbba6ed"),
      Ne("0379be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798"),
      Ne(
        "54c4a33c6423d689378f160a7ff8b61330444abb58fb470f96ea16d99d4a2fed07082304410efa6b2943111b6a4e0aaa7b7db55a07e9861d1fb3cb1f421044a5"
      )
    )
  ), e.signSchnorr && Ot(
    N.Buffer.from(
      e.signSchnorr(
        Ne("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"),
        Ne("c90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b14e5c9"),
        Ne("c87aa53824b4d7ae2eb035a2b5bbbccc080e76cdc6d1692c4b0b62d798e6d906")
      )
    ).equals(
      Ne(
        "5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7"
      )
    )
  ), e.verifySchnorr && Ot(
    e.verifySchnorr(
      Ne("7e2d58d8b3bcdf1abadec7829054f90dda9805aab56c77333024b9d0a508b75c"),
      Ne("dd308afec5777e13121fa72b9cc1b7cc0139715309b086c960e18fd969774eb8"),
      Ne(
        "5831aaeed7b44bb74e5eab94ba9d4294c49bcf2a60728d8b4c200f50dd313c1bab745879a5ad954a72c45a91c3a51d3c7adea98d82f8481e0e1e03674a6f3fb7"
      )
    )
  );
}
_f.testEcc = FT;
function Ot(e) {
  if (!e)
    throw new Error("ecc library invalid");
}
Object.defineProperty(Qi, "__esModule", { value: !0 });
Qi.ECPairFactory = Qi.networks = void 0;
const Nu = eo;
Qi.networks = Nu;
const Bt = yg, jT = gg, Od = yb, KT = _f, Bc = Bt.typeforce.maybe(
  Bt.typeforce.compile({
    compressed: Bt.maybe(Bt.Boolean),
    network: Bt.maybe(Bt.Network)
  })
);
function qT(e) {
  (0, KT.testEcc)(e);
  function t(a) {
    return e.isPoint(a);
  }
  function r(a, f) {
    if (Bt.typeforce(Bt.Buffer256bit, a), !e.isPrivate(a))
      throw new TypeError("Private key not in range [1, n)");
    return Bt.typeforce(Bc, f), new s(a, void 0, f);
  }
  function n(a, f) {
    return Bt.typeforce(e.isPoint, a), Bt.typeforce(Bc, f), new s(void 0, a, f);
  }
  function i(a, f) {
    const l = Od.decode(a), h = l.version;
    if (Bt.Array(f)) {
      if (f = f.filter((y) => h === y.wif).pop(), !f)
        throw new Error("Unknown network version");
    } else if (f = f || Nu.bitcoin, h !== f.wif)
      throw new Error("Invalid network version");
    return r(l.privateKey, {
      compressed: l.compressed,
      network: f
    });
  }
  function o(a) {
    Bt.typeforce(Bc, a), a === void 0 && (a = {});
    const f = a.rng || jT;
    let l;
    do
      l = f(32), Bt.typeforce(Bt.Buffer256bit, l);
    while (!e.isPrivate(l));
    return r(l, a);
  }
  class s {
    constructor(f, l, h) {
      mi(this, "__D");
      mi(this, "__Q");
      mi(this, "compressed");
      mi(this, "network");
      mi(this, "lowR");
      this.__D = f, this.__Q = l, this.lowR = !1, h === void 0 && (h = {}), this.compressed = h.compressed === void 0 ? !0 : h.compressed, this.network = h.network || Nu.bitcoin, l !== void 0 && (this.__Q = N.Buffer.from(e.pointCompress(l, this.compressed)));
    }
    get privateKey() {
      return this.__D;
    }
    get publicKey() {
      if (!this.__Q) {
        const f = e.pointFromScalar(this.__D, this.compressed);
        this.__Q = N.Buffer.from(f);
      }
      return this.__Q;
    }
    toWIF() {
      if (!this.__D)
        throw new Error("Missing private key");
      return Od.encode(this.network.wif, this.__D, this.compressed);
    }
    sign(f, l) {
      if (!this.__D)
        throw new Error("Missing private key");
      if (l === void 0 && (l = this.lowR), l === !1)
        return N.Buffer.from(e.sign(f, this.__D));
      {
        let h = e.sign(f, this.__D);
        const y = N.Buffer.alloc(32, 0);
        let v = 0;
        for (; h[0] > 127; )
          v++, y.writeUIntLE(v, 0, 6), h = e.sign(f, this.__D, y);
        return N.Buffer.from(h);
      }
    }
    signSchnorr(f) {
      if (!this.privateKey)
        throw new Error("Missing private key");
      if (!e.signSchnorr)
        throw new Error("signSchnorr not supported by ecc library");
      return N.Buffer.from(e.signSchnorr(f, this.privateKey));
    }
    verify(f, l) {
      return e.verify(f, this.publicKey, l);
    }
    verifySchnorr(f, l) {
      if (!e.verifySchnorr)
        throw new Error("verifySchnorr not supported by ecc library");
      return e.verifySchnorr(f, this.publicKey.subarray(1, 33), l);
    }
  }
  return {
    isPoint: t,
    fromPrivateKey: r,
    fromPublicKey: n,
    fromWIF: i,
    makeRandom: o
  };
}
Qi.ECPairFactory = qT;
(function(e) {
  Object.defineProperty(e, "__esModule", { value: !0 }), e.networks = e.ECPairFactory = e.default = void 0;
  var t = Qi;
  Object.defineProperty(e, "default", {
    enumerable: !0,
    get: function() {
      return t.ECPairFactory;
    }
  }), Object.defineProperty(e, "ECPairFactory", {
    enumerable: !0,
    get: function() {
      return t.ECPairFactory;
    }
  }), Object.defineProperty(e, "networks", {
    enumerable: !0,
    get: function() {
      return t.networks;
    }
  });
})(Rl);
const gb = (e) => {
  switch (e) {
    case se.Bitcoin:
      return 550;
    case se.BitcoinCash:
      return 1;
    case se.Litecoin:
      return 5500;
    case se.Dogecoin:
      return 1e5;
    default:
      throw new Error("Invalid Chain");
  }
}, cs = ({
  inputs: e,
  outputs: t,
  feeRate: r,
  chain: n = se.Bitcoin
}) => {
  r = Math.ceil(r);
  const i = e[0] && "address" in e[0] ? Kl(e[0].address) : jl.P2PKH;
  console.log("feeRate: ", r);
  const o = e.filter((y) => No(y) * r <= y.value), s = bb + t.reduce((y, v) => y + $u(v, i), 0), a = t.reduce((y, v) => y + v.value, 0);
  let f = s * r, l = 0, h = [];
  for (const y of o) {
    const v = No(y), g = r * v;
    f += g, l += y.value, h.push(y);
    const m = f + a;
    if (l < m)
      continue;
    const E = l - m, O = r * $u({ address: "", value: 0 }, i);
    if (E > O) {
      const x = O + f, U = l - (a + x);
      if (U > Math.max(No({}) * r, gb(n)))
        return {
          inputs: h,
          outputs: t.concat({ value: U, address: "" }),
          fee: x
        };
    }
    return {
      inputs: h,
      outputs: t,
      fee: f
    };
  }
  return { fee: r * ql({ inputs: e, outputs: t, feeRate: r }) };
}, CN = 1e3, bb = 4 + 1 + 1 + 4, GT = 1 + 8 + 1, VT = 32 + 4 + 1 + 4, WT = 107, us = (e) => {
  const t = N.Buffer.from(e, "utf8");
  return qr.script.compile([qr.opcodes.OP_RETURN, t]);
};
var jl = /* @__PURE__ */ ((e) => (e.P2PKH = "P2PKH", e.P2WPKH = "P2WPKH", e))(jl || {});
const Uu = {
  P2PKH: 148,
  //   [UTXOScriptType.P2SH]: 91,
  P2WPKH: 68
}, Cu = {
  P2PKH: 34,
  //   [UTXOScriptType.P2SH]: 91,
  P2WPKH: 31
}, Kl = (e) => {
  if (e.startsWith("bc1") || e.startsWith("ltc1"))
    return "P2WPKH";
  if (e.startsWith("1") || e.startsWith("L") || e.startsWith("D") || e.startsWith("bitcoincash:q") || e.startsWith("q"))
    return "P2PKH";
  throw new Error("Invalid address");
}, ql = ({ inputs: e, outputs: t, feeRate: r }) => {
  const n = e[0] && "address" in e[0] ? Kl(e[0].address) : "P2PKH", i = e.filter(
    (s) => s.value >= Uu[
      "type" in s ? s.type : "P2PKH"
      /* P2PKH */
    ] * Math.ceil(r)
  ).reduce((s, a) => s + No(a), 0), o = (t == null ? void 0 : t.reduce((s, a) => s + $u(a), 0)) || Cu[n];
  return bb + i + o;
}, No = (e) => "type" in e ? Uu[e.type] : "address" in e ? Uu[Kl(e.address)] : VT + WT, $u = (e, t) => e != null && e.script ? GT + e.script.length + (e.script.length >= 74 ? 2 : 1) : t ? Cu[t] : Cu.P2PKH;
function zT(e, t, r, n) {
  Zu(e);
  const i = gw({ dkLen: 32, asyncTick: 10 }, n), { c: o, dkLen: s, asyncTick: a } = i;
  if (Hi(o), Hi(s), Hi(a), o < 1)
    throw new Error("PBKDF2: iterations (c) should be >= 1");
  const f = Ho(t), l = Ho(r), h = new Uint8Array(s), y = Lo.create(e, f), v = y._cloneInto().update(l);
  return { c: o, dkLen: s, asyncTick: a, DK: h, PRF: y, PRFSalt: v };
}
function XT(e, t, r, n, i) {
  return e.destroy(), t.destroy(), n && n.destroy(), i.fill(0), r;
}
function YT(e, t, r, n) {
  const { c: i, dkLen: o, DK: s, PRF: a, PRFSalt: f } = zT(e, t, r, n);
  let l;
  const h = new Uint8Array(4), y = Dn(h), v = new Uint8Array(a.outputLen);
  for (let g = 1, m = 0; m < o; g++, m += a.outputLen) {
    const E = s.subarray(m, m + a.outputLen);
    y.setInt32(0, g, !1), (l = f._cloneInto(l)).update(h).digestInto(v), E.set(v.subarray(0, E.length));
    for (let O = 1; O < i; O++) {
      a._cloneInto(l).update(v).digestInto(v);
      for (let x = 0; x < E.length; x++)
        E[x] ^= v[x];
    }
  }
  return XT(a, f, s, l, v);
}
function vb(e) {
  if (typeof e != "string")
    throw new TypeError(`Invalid mnemonic type: ${typeof e}`);
  return e.normalize("NFKD");
}
function wb(e) {
  const t = vb(e), r = t.split(" ");
  if (![12, 15, 18, 21, 24].includes(r.length))
    throw new Error("Invalid mnemonic");
  return { nfkd: t, words: r };
}
function ZT(e) {
  cw.bytes(e, 16, 20, 24, 28, 32);
}
const JT = (e) => {
  const t = 8 - e.length / 4;
  return new Uint8Array([Da(e)[0] >> t << t]);
};
function QT(e) {
  if (!Array.isArray(e) || e.length !== 2048 || typeof e[0] != "string")
    throw new Error("Worlist: expected array of 2048 strings");
  return e.forEach((t) => {
    if (typeof t != "string")
      throw new Error(`Wordlist: non-string element: ${t}`);
  }), Ss.chain(Ss.checksum(1, JT), Ss.radix2(11, !0), Ss.alphabet(e));
}
function e8(e, t) {
  const { words: r } = wb(e), n = QT(t).decode(r);
  return ZT(n), n;
}
function t8(e, t) {
  try {
    e8(e, t);
  } catch {
    return !1;
  }
  return !0;
}
const r8 = (e) => vb(`mnemonic${e}`);
function n8(e, t = "") {
  return YT(au, wb(e).nfkd, r8(t), { c: 2048, dkLen: 64 });
}
const i8 = `abandon
ability
able
about
above
absent
absorb
abstract
absurd
abuse
access
accident
account
accuse
achieve
acid
acoustic
acquire
across
act
action
actor
actress
actual
adapt
add
addict
address
adjust
admit
adult
advance
advice
aerobic
affair
afford
afraid
again
age
agent
agree
ahead
aim
air
airport
aisle
alarm
album
alcohol
alert
alien
all
alley
allow
almost
alone
alpha
already
also
alter
always
amateur
amazing
among
amount
amused
analyst
anchor
ancient
anger
angle
angry
animal
ankle
announce
annual
another
answer
antenna
antique
anxiety
any
apart
apology
appear
apple
approve
april
arch
arctic
area
arena
argue
arm
armed
armor
army
around
arrange
arrest
arrive
arrow
art
artefact
artist
artwork
ask
aspect
assault
asset
assist
assume
asthma
athlete
atom
attack
attend
attitude
attract
auction
audit
august
aunt
author
auto
autumn
average
avocado
avoid
awake
aware
away
awesome
awful
awkward
axis
baby
bachelor
bacon
badge
bag
balance
balcony
ball
bamboo
banana
banner
bar
barely
bargain
barrel
base
basic
basket
battle
beach
bean
beauty
because
become
beef
before
begin
behave
behind
believe
below
belt
bench
benefit
best
betray
better
between
beyond
bicycle
bid
bike
bind
biology
bird
birth
bitter
black
blade
blame
blanket
blast
bleak
bless
blind
blood
blossom
blouse
blue
blur
blush
board
boat
body
boil
bomb
bone
bonus
book
boost
border
boring
borrow
boss
bottom
bounce
box
boy
bracket
brain
brand
brass
brave
bread
breeze
brick
bridge
brief
bright
bring
brisk
broccoli
broken
bronze
broom
brother
brown
brush
bubble
buddy
budget
buffalo
build
bulb
bulk
bullet
bundle
bunker
burden
burger
burst
bus
business
busy
butter
buyer
buzz
cabbage
cabin
cable
cactus
cage
cake
call
calm
camera
camp
can
canal
cancel
candy
cannon
canoe
canvas
canyon
capable
capital
captain
car
carbon
card
cargo
carpet
carry
cart
case
cash
casino
castle
casual
cat
catalog
catch
category
cattle
caught
cause
caution
cave
ceiling
celery
cement
census
century
cereal
certain
chair
chalk
champion
change
chaos
chapter
charge
chase
chat
cheap
check
cheese
chef
cherry
chest
chicken
chief
child
chimney
choice
choose
chronic
chuckle
chunk
churn
cigar
cinnamon
circle
citizen
city
civil
claim
clap
clarify
claw
clay
clean
clerk
clever
click
client
cliff
climb
clinic
clip
clock
clog
close
cloth
cloud
clown
club
clump
cluster
clutch
coach
coast
coconut
code
coffee
coil
coin
collect
color
column
combine
come
comfort
comic
common
company
concert
conduct
confirm
congress
connect
consider
control
convince
cook
cool
copper
copy
coral
core
corn
correct
cost
cotton
couch
country
couple
course
cousin
cover
coyote
crack
cradle
craft
cram
crane
crash
crater
crawl
crazy
cream
credit
creek
crew
cricket
crime
crisp
critic
crop
cross
crouch
crowd
crucial
cruel
cruise
crumble
crunch
crush
cry
crystal
cube
culture
cup
cupboard
curious
current
curtain
curve
cushion
custom
cute
cycle
dad
damage
damp
dance
danger
daring
dash
daughter
dawn
day
deal
debate
debris
decade
december
decide
decline
decorate
decrease
deer
defense
define
defy
degree
delay
deliver
demand
demise
denial
dentist
deny
depart
depend
deposit
depth
deputy
derive
describe
desert
design
desk
despair
destroy
detail
detect
develop
device
devote
diagram
dial
diamond
diary
dice
diesel
diet
differ
digital
dignity
dilemma
dinner
dinosaur
direct
dirt
disagree
discover
disease
dish
dismiss
disorder
display
distance
divert
divide
divorce
dizzy
doctor
document
dog
doll
dolphin
domain
donate
donkey
donor
door
dose
double
dove
draft
dragon
drama
drastic
draw
dream
dress
drift
drill
drink
drip
drive
drop
drum
dry
duck
dumb
dune
during
dust
dutch
duty
dwarf
dynamic
eager
eagle
early
earn
earth
easily
east
easy
echo
ecology
economy
edge
edit
educate
effort
egg
eight
either
elbow
elder
electric
elegant
element
elephant
elevator
elite
else
embark
embody
embrace
emerge
emotion
employ
empower
empty
enable
enact
end
endless
endorse
enemy
energy
enforce
engage
engine
enhance
enjoy
enlist
enough
enrich
enroll
ensure
enter
entire
entry
envelope
episode
equal
equip
era
erase
erode
erosion
error
erupt
escape
essay
essence
estate
eternal
ethics
evidence
evil
evoke
evolve
exact
example
excess
exchange
excite
exclude
excuse
execute
exercise
exhaust
exhibit
exile
exist
exit
exotic
expand
expect
expire
explain
expose
express
extend
extra
eye
eyebrow
fabric
face
faculty
fade
faint
faith
fall
false
fame
family
famous
fan
fancy
fantasy
farm
fashion
fat
fatal
father
fatigue
fault
favorite
feature
february
federal
fee
feed
feel
female
fence
festival
fetch
fever
few
fiber
fiction
field
figure
file
film
filter
final
find
fine
finger
finish
fire
firm
first
fiscal
fish
fit
fitness
fix
flag
flame
flash
flat
flavor
flee
flight
flip
float
flock
floor
flower
fluid
flush
fly
foam
focus
fog
foil
fold
follow
food
foot
force
forest
forget
fork
fortune
forum
forward
fossil
foster
found
fox
fragile
frame
frequent
fresh
friend
fringe
frog
front
frost
frown
frozen
fruit
fuel
fun
funny
furnace
fury
future
gadget
gain
galaxy
gallery
game
gap
garage
garbage
garden
garlic
garment
gas
gasp
gate
gather
gauge
gaze
general
genius
genre
gentle
genuine
gesture
ghost
giant
gift
giggle
ginger
giraffe
girl
give
glad
glance
glare
glass
glide
glimpse
globe
gloom
glory
glove
glow
glue
goat
goddess
gold
good
goose
gorilla
gospel
gossip
govern
gown
grab
grace
grain
grant
grape
grass
gravity
great
green
grid
grief
grit
grocery
group
grow
grunt
guard
guess
guide
guilt
guitar
gun
gym
habit
hair
half
hammer
hamster
hand
happy
harbor
hard
harsh
harvest
hat
have
hawk
hazard
head
health
heart
heavy
hedgehog
height
hello
helmet
help
hen
hero
hidden
high
hill
hint
hip
hire
history
hobby
hockey
hold
hole
holiday
hollow
home
honey
hood
hope
horn
horror
horse
hospital
host
hotel
hour
hover
hub
huge
human
humble
humor
hundred
hungry
hunt
hurdle
hurry
hurt
husband
hybrid
ice
icon
idea
identify
idle
ignore
ill
illegal
illness
image
imitate
immense
immune
impact
impose
improve
impulse
inch
include
income
increase
index
indicate
indoor
industry
infant
inflict
inform
inhale
inherit
initial
inject
injury
inmate
inner
innocent
input
inquiry
insane
insect
inside
inspire
install
intact
interest
into
invest
invite
involve
iron
island
isolate
issue
item
ivory
jacket
jaguar
jar
jazz
jealous
jeans
jelly
jewel
job
join
joke
journey
joy
judge
juice
jump
jungle
junior
junk
just
kangaroo
keen
keep
ketchup
key
kick
kid
kidney
kind
kingdom
kiss
kit
kitchen
kite
kitten
kiwi
knee
knife
knock
know
lab
label
labor
ladder
lady
lake
lamp
language
laptop
large
later
latin
laugh
laundry
lava
law
lawn
lawsuit
layer
lazy
leader
leaf
learn
leave
lecture
left
leg
legal
legend
leisure
lemon
lend
length
lens
leopard
lesson
letter
level
liar
liberty
library
license
life
lift
light
like
limb
limit
link
lion
liquid
list
little
live
lizard
load
loan
lobster
local
lock
logic
lonely
long
loop
lottery
loud
lounge
love
loyal
lucky
luggage
lumber
lunar
lunch
luxury
lyrics
machine
mad
magic
magnet
maid
mail
main
major
make
mammal
man
manage
mandate
mango
mansion
manual
maple
marble
march
margin
marine
market
marriage
mask
mass
master
match
material
math
matrix
matter
maximum
maze
meadow
mean
measure
meat
mechanic
medal
media
melody
melt
member
memory
mention
menu
mercy
merge
merit
merry
mesh
message
metal
method
middle
midnight
milk
million
mimic
mind
minimum
minor
minute
miracle
mirror
misery
miss
mistake
mix
mixed
mixture
mobile
model
modify
mom
moment
monitor
monkey
monster
month
moon
moral
more
morning
mosquito
mother
motion
motor
mountain
mouse
move
movie
much
muffin
mule
multiply
muscle
museum
mushroom
music
must
mutual
myself
mystery
myth
naive
name
napkin
narrow
nasty
nation
nature
near
neck
need
negative
neglect
neither
nephew
nerve
nest
net
network
neutral
never
news
next
nice
night
noble
noise
nominee
noodle
normal
north
nose
notable
note
nothing
notice
novel
now
nuclear
number
nurse
nut
oak
obey
object
oblige
obscure
observe
obtain
obvious
occur
ocean
october
odor
off
offer
office
often
oil
okay
old
olive
olympic
omit
once
one
onion
online
only
open
opera
opinion
oppose
option
orange
orbit
orchard
order
ordinary
organ
orient
original
orphan
ostrich
other
outdoor
outer
output
outside
oval
oven
over
own
owner
oxygen
oyster
ozone
pact
paddle
page
pair
palace
palm
panda
panel
panic
panther
paper
parade
parent
park
parrot
party
pass
patch
path
patient
patrol
pattern
pause
pave
payment
peace
peanut
pear
peasant
pelican
pen
penalty
pencil
people
pepper
perfect
permit
person
pet
phone
photo
phrase
physical
piano
picnic
picture
piece
pig
pigeon
pill
pilot
pink
pioneer
pipe
pistol
pitch
pizza
place
planet
plastic
plate
play
please
pledge
pluck
plug
plunge
poem
poet
point
polar
pole
police
pond
pony
pool
popular
portion
position
possible
post
potato
pottery
poverty
powder
power
practice
praise
predict
prefer
prepare
present
pretty
prevent
price
pride
primary
print
priority
prison
private
prize
problem
process
produce
profit
program
project
promote
proof
property
prosper
protect
proud
provide
public
pudding
pull
pulp
pulse
pumpkin
punch
pupil
puppy
purchase
purity
purpose
purse
push
put
puzzle
pyramid
quality
quantum
quarter
question
quick
quit
quiz
quote
rabbit
raccoon
race
rack
radar
radio
rail
rain
raise
rally
ramp
ranch
random
range
rapid
rare
rate
rather
raven
raw
razor
ready
real
reason
rebel
rebuild
recall
receive
recipe
record
recycle
reduce
reflect
reform
refuse
region
regret
regular
reject
relax
release
relief
rely
remain
remember
remind
remove
render
renew
rent
reopen
repair
repeat
replace
report
require
rescue
resemble
resist
resource
response
result
retire
retreat
return
reunion
reveal
review
reward
rhythm
rib
ribbon
rice
rich
ride
ridge
rifle
right
rigid
ring
riot
ripple
risk
ritual
rival
river
road
roast
robot
robust
rocket
romance
roof
rookie
room
rose
rotate
rough
round
route
royal
rubber
rude
rug
rule
run
runway
rural
sad
saddle
sadness
safe
sail
salad
salmon
salon
salt
salute
same
sample
sand
satisfy
satoshi
sauce
sausage
save
say
scale
scan
scare
scatter
scene
scheme
school
science
scissors
scorpion
scout
scrap
screen
script
scrub
sea
search
season
seat
second
secret
section
security
seed
seek
segment
select
sell
seminar
senior
sense
sentence
series
service
session
settle
setup
seven
shadow
shaft
shallow
share
shed
shell
sheriff
shield
shift
shine
ship
shiver
shock
shoe
shoot
shop
short
shoulder
shove
shrimp
shrug
shuffle
shy
sibling
sick
side
siege
sight
sign
silent
silk
silly
silver
similar
simple
since
sing
siren
sister
situate
six
size
skate
sketch
ski
skill
skin
skirt
skull
slab
slam
sleep
slender
slice
slide
slight
slim
slogan
slot
slow
slush
small
smart
smile
smoke
smooth
snack
snake
snap
sniff
snow
soap
soccer
social
sock
soda
soft
solar
soldier
solid
solution
solve
someone
song
soon
sorry
sort
soul
sound
soup
source
south
space
spare
spatial
spawn
speak
special
speed
spell
spend
sphere
spice
spider
spike
spin
spirit
split
spoil
sponsor
spoon
sport
spot
spray
spread
spring
spy
square
squeeze
squirrel
stable
stadium
staff
stage
stairs
stamp
stand
start
state
stay
steak
steel
stem
step
stereo
stick
still
sting
stock
stomach
stone
stool
story
stove
strategy
street
strike
strong
struggle
student
stuff
stumble
style
subject
submit
subway
success
such
sudden
suffer
sugar
suggest
suit
summer
sun
sunny
sunset
super
supply
supreme
sure
surface
surge
surprise
surround
survey
suspect
sustain
swallow
swamp
swap
swarm
swear
sweet
swift
swim
swing
switch
sword
symbol
symptom
syrup
system
table
tackle
tag
tail
talent
talk
tank
tape
target
task
taste
tattoo
taxi
teach
team
tell
ten
tenant
tennis
tent
term
test
text
thank
that
theme
then
theory
there
they
thing
this
thought
three
thrive
throw
thumb
thunder
ticket
tide
tiger
tilt
timber
time
tiny
tip
tired
tissue
title
toast
tobacco
today
toddler
toe
together
toilet
token
tomato
tomorrow
tone
tongue
tonight
tool
tooth
top
topic
topple
torch
tornado
tortoise
toss
total
tourist
toward
tower
town
toy
track
trade
traffic
tragic
train
transfer
trap
trash
travel
tray
treat
tree
trend
trial
tribe
trick
trigger
trim
trip
trophy
trouble
truck
true
truly
trumpet
trust
truth
try
tube
tuition
tumble
tuna
tunnel
turkey
turn
turtle
twelve
twenty
twice
twin
twist
two
type
typical
ugly
umbrella
unable
unaware
uncle
uncover
under
undo
unfair
unfold
unhappy
uniform
unique
unit
universe
unknown
unlock
until
unusual
unveil
update
upgrade
uphold
upon
upper
upset
urban
urge
usage
use
used
useful
useless
usual
utility
vacant
vacuum
vague
valid
valley
valve
van
vanish
vapor
various
vast
vault
vehicle
velvet
vendor
venture
venue
verb
verify
version
very
vessel
veteran
viable
vibrant
vicious
victory
video
view
village
vintage
violin
virtual
virus
visa
visit
visual
vital
vivid
vocal
voice
void
volcano
volume
vote
voyage
wage
wagon
wait
walk
wall
walnut
want
warfare
warm
warrior
wash
wasp
waste
water
wave
way
wealth
weapon
wear
weasel
weather
web
wedding
weekend
weird
welcome
west
wet
whale
what
wheat
wheel
when
where
whip
whisper
wide
width
wife
wild
will
win
window
wine
wing
wink
winner
winter
wire
wisdom
wise
wish
witness
wolf
woman
wonder
wood
wool
word
work
world
worry
worth
wrap
wreck
wrestle
wrist
write
wrong
yard
year
yellow
you
young
youth
zebra
zero
zone
zoo`.split(`
`);
var Gl = {
  name: "BitcoinCash",
  per1: 1e8,
  unit: "BCH"
}, o8 = Object.assign({}, {
  hashGenesisBlock: "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  // nDefaultPort
  port: 8333,
  portRpc: 8332,
  protocol: {
    // pchMessageStart
    magic: 3908297187
    // careful, sent over wire as little endian
  },
  // vSeeds
  seedsDns: [
    "seed.bitcoinabc.org",
    "seed-abc.bitcoinforks.org",
    "btccash-seeder.bitcoinunlimited.info",
    "seed.bitprim.org",
    "seed.deadalnix.me",
    "seeder.criptolayer.net"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 145,
    private: 128,
    public: 0,
    scripthash: 5
  }
}, Gl), s8 = Object.assign({}, {
  hashGenesisBlock: "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943",
  port: 18333,
  portRpc: 18332,
  protocol: {
    magic: 4109624820
  },
  seedsDns: [
    "testnet-seed.bitcoinabc.org",
    "testnet-seed-abc.bitcoinforks.org",
    "testnet-seed.bitprim.org",
    "testnet-seed.deadalnix.me",
    "testnet-seeder.criptolayer.net"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Gl), a8 = Object.assign({}, {
  hashGenesisBlock: "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206",
  port: 18444,
  portRpc: 18332,
  protocol: {
    magic: 4206867930
  },
  seedsDns: [],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Gl), f8 = {
  main: o8,
  test: s8,
  regtest: a8
}, c8 = {
  name: "BlackCoin",
  per1: 1e8,
  unit: "BLK"
}, u8 = Object.assign({}, {
  hashGenesisBlock: "000001faef25dec4fbcf906e6242621df2c183bf232f263d0ba5b101911e4563",
  port: 15714,
  portRpc: 15715,
  protocol: {
    magic: 86127984
    // careful, sent over wire as little endian
  },
  seedsDns: [
    "rat4.blackcoin.co",
    "seed.blackcoin.co",
    "archon.darkfox.id.au",
    "foxy.seeds.darkfox.id.au",
    "6.syllabear.us.to",
    "bcseed.syllabear.us.to"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 10,
    private: 153,
    public: 25,
    scripthash: 85
  }
}, c8), l8 = {
  main: u8,
  test: null
}, Sf = {
  name: "Bitcoin",
  per1: 1e8,
  unit: "BTC",
  messagePrefix: `Bitcoin Signed Message:
`
}, h8 = Object.assign({}, {
  hashGenesisBlock: "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  // nDefaultPort
  port: 8333,
  portRpc: 8332,
  protocol: {
    // pchMessageStart
    magic: 3652501241
    // careful, sent over wire as little endian
  },
  bech32: "bc",
  // vSeeds
  seedsDns: [
    "seed.bitcoin.sipa.be",
    "dnsseed.bluematt.me",
    "seed.bitcoinstats.com",
    "seed.bitcoin.jonasschnelli.ch",
    "seed.btc.petertodd.org",
    "seed.bitcoin.sprovoost.nl",
    "dnsseed.emzy.de"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 0,
    private: 128,
    public: 0,
    scripthash: 5
  }
}, Sf), p8 = Object.assign({}, {
  hashGenesisBlock: "000000000933ea01ad0ee984209779baaec3ced90fa3f408719526f8d77f4943",
  port: 18333,
  portRpc: 18332,
  protocol: {
    magic: 118034699
  },
  bech32: "tb",
  seedsDns: [
    "testnet-seed.alexykot.me",
    "testnet-seed.bitcoin.schildbach.de",
    "testnet-seed.bitcoin.petertodd.org",
    "testnet-seed.bluematt.me"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Sf), d8 = Object.assign({}, {
  hashGenesisBlock: "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206",
  port: 18444,
  portRpc: 18332,
  protocol: {
    magic: 3669344250
  },
  bech32: "bcrt",
  seedsDns: [],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Sf), y8 = Object.assign({}, {
  hashGenesisBlock: "f67ad7695d9b662a72ff3d8edbbb2de0bfa67b13974bb9910d116d5cbd863e68",
  port: 18555,
  portRpc: 18556,
  protocol: {
    magic: 303307798
  },
  bech32: "sb",
  seedsDns: [],
  versions: {
    bip32: {
      private: 69253376,
      public: 69254458
    },
    bip44: 115,
    private: 100,
    public: 63,
    scripthash: 123
  }
}, Sf), g8 = {
  main: h8,
  test: p8,
  regtest: d8,
  simnet: y8
}, mb = {
  name: "Bitcoin Gold",
  unit: "BTG"
}, b8 = Object.assign({}, {
  hashGenesisBlock: "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  // nDefaultPort
  port: 8338,
  protocol: {
    // pchMessageStart
    magic: 1148012513
    // careful, sent over wire as little endian
  },
  bech32: "btg",
  // vSeeds
  seedsDns: [
    "eu-dnsseed.bitcoingold-official.org",
    "dnsseed.bitcoingold.org",
    "dnsseed.btcgpu.org"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 156,
    private: 128,
    public: 38,
    scripthash: 23
  }
}, mb), v8 = Object.assign({}, {
  hashGenesisBlock: "0x00000000e0781ebe24b91eedc293adfea2f557b53ec379e78959de3853e6f9f6",
  port: 18338,
  portRpc: 18332,
  protocol: {
    magic: 1164855522
  },
  bech32: "tbtg",
  seedsDns: [
    "test-dnsseed.bitcoingold.org",
    "test-dnsseed.btcgpu.org",
    "eu-test-dnsseed.bitcoingold-official.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 156,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, mb), w8 = {
  main: b8,
  test: v8
}, Vl = {
  name: "c0ban",
  unit: "RYO"
}, m8 = Object.assign({}, {
  hashGenesisBlock: "000000005184ffce04351e687a3965b300ee011d26b2089232cd039273be4a67",
  // nDefaultPort
  port: 3881,
  portRpc: 3882,
  protocol: {
    magic: 1851928675
    // pchMessageStart
  },
  // vSeeds
  seedsDns: [
    "jp01.dnsseed.c0ban.com",
    "kr01.dnsseed.c0ban.com"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      // base58Prefixes[EXT_SECRET_KEY]
      public: 76067358
      // base58Prefixes[EXT_PUBLIC_KEY]
    },
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    bip44: 88888,
    // TODO: decide cbn bip44
    private: 136,
    // base58Prefixes[SECRET_KEY]
    public: 18,
    // base58Prefixes[PUBKEY_ADDRESS]
    scripthash: 28
    // base58Prefixes[SCRIPT_ADDRESS]
  }
}, Vl), E8 = Object.assign({}, {
  hashGenesisBlock: "000000005184ffce04351e687a3965b300ee011d26b2089232cd039273be4a67",
  port: 13881,
  portRpc: 13882,
  protocol: {
    magic: 2390917251
    // pchMessageStart
  },
  seedsDns: [],
  versions: {
    bip32: {
      private: 70812552,
      // base58Prefixes[EXT_SECRET_KEY]
      public: 72910728
      // base58Prefixes[EXT_PUBLIC_KEY]
    },
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    bip44: 1,
    private: 238,
    // base58Prefixes[SECRET_KEY]
    public: 118,
    // base58Prefixes[PUBKEY_ADDRESS]
    scripthash: 198
    // base58Prefixes[SCRIPT_ADDRESS]
  }
}, Vl), _8 = Object.assign({}, {
  hashGenesisBlock: "3249e44acac8fc67e6b94e882525cea6f5a9853e1ff7b4a1d5f470b23ff8ae11",
  port: 23881,
  portRpc: 23882,
  protocol: {
    magic: 3669344250
    // pchMessageStart
  },
  seedsDns: [],
  versions: {
    bip32: {
      private: 70617039,
      // base58Prefixes[EXT_SECRET_KEY]
      public: 70615956
      // base58Prefixes[EXT_PUBLIC_KEY]
    },
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    bip44: 1,
    private: 239,
    // base58Prefixes[SECRET_KEY]
    public: 111,
    // base58Prefixes[PUBKEY_ADDRESS]
    scripthash: 196
    // base58Prefixes[SCRIPT_ADDRESS]
  }
}, Vl), S8 = {
  main: m8,
  test: E8,
  regtest: _8
}, Eb = {
  name: "CityCoin",
  isProofOfStake: !0
}, O8 = Object.assign({}, {
  unit: "CITY",
  hashGenesisBlock: "00000b0517068e602ed5279c20168cfa1e69884ee4e784909652da34c361bff2",
  port: 4333,
  portRpc: 4334,
  protocol: {
    magic: 1129601281
  },
  seedsDns: [
    "seed.city-chain.org",
    "seed.city-coin.org",
    "seed.citychain.foundation",
    "seed.liberstad.com"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 1926,
    private: 237,
    public: 28,
    scripthash: 88
  }
}, Eb), A8 = Object.assign({}, {
  unit: "TCITY",
  hashGenesisBlock: "00077765f625cc2cb6266544ff7d5a462f25be14ea1116dc2bd2fec17e40a5e3",
  port: 24333,
  portRpc: 24334,
  protocol: {
    magic: 1129600001
  },
  seedsDns: [
    "testseed.city-chain.org",
    "testseed.city-coin.org",
    "testseed.citychain.foundation"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 1926,
    private: 194,
    public: 66,
    scripthash: 196
  }
}, Eb), T8 = {
  main: O8,
  test: A8
}, _b = {
  name: "Dash",
  unit: "DASH"
}, I8 = Object.assign({}, {
  hashGenesisBlock: "00000ffd590b1485b3caadc19b22e6379c733355108f107a430458cdf3407ab6",
  // nDefaultPort
  port: 9999,
  portRpc: 9998,
  protocol: {
    magic: 3177909439
    // careful, sent over wire as little endian
  },
  // vSeeds
  seedsDns: [
    "dash.org",
    "dnsseed.dash.org",
    "dashdot.io",
    "dnsseed.dashdot.io",
    "masternode.io",
    "dnsseed.masternode.io",
    "dashpay.io",
    "dnsseed.dashpay.io"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 5,
    private: 204,
    public: 76,
    scripthash: 16
  }
}, _b), P8 = Object.assign({}, {
  hashGenesisBlock: "00000bafbc94add76cb75e2ec92894837288a481e5c005f6563d91623bf8bc2c",
  port: 19999,
  portRpc: 19998,
  seedsDns: [
    "dashdot.io",
    "testnet-seed.dashdot.io",
    "masternode.io",
    "test.dnsseed.masternode.io"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 140,
    scripthash: 19
  }
}, _b), x8 = {
  main: I8,
  test: P8
}, Sb = {
  name: "Denarius",
  unit: "DNR"
}, B8 = Object.assign({}, {
  hashGenesisBlock: "00000d5dbbda01621cfc16bbc1f9bf3264d641a5dbf0de89fd0182c2c4828fcd",
  port: 33339,
  portRpc: 32339,
  protocol: {
    magic: 3035624186
  },
  seedsDns: [
    "denariusexplorer.org",
    "denarius.host",
    "denarius.tech",
    "denarius.network"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 116,
    private: 158,
    public: 30,
    scripthash: 90
  }
}, Sb), k8 = Object.assign({}, {
  hashGenesisBlock: "000086bfe8264d241f7f8e5393f747784b8ca2aa98bdd066278d590462a4fdb4",
  versions: {
    bip44: 1,
    private: 140,
    public: 18,
    scripthash: 116
  }
}, Sb), R8 = {
  main: B8,
  test: k8
}, Ob = {
  name: "Decred",
  unit: "DCR"
}, N8 = Object.assign({}, {
  hashGenesisBlock: "298e5cc3d985bfe7f81dc135f360abe089edd4396b86d2de66b0cef42b21d980",
  port: 9108,
  portRpc: 9109,
  protocol: {
    magic: 4177573081
  },
  seedsDns: [
    "mainnet-seed.decred.mindcry.org",
    "mainnet-seed.decred.netpurgatory.com",
    "mainnet.decredseed.org",
    "mainnet-seed.decred.org"
  ],
  versions: {
    bip32: {
      private: 50177256,
      public: 50178342
    },
    bip44: 42,
    private: 8926,
    public: 1855,
    scripthash: 1818
  }
}, Ob), U8 = Object.assign({}, {
  hashGenesisBlock: "5b7466edf6739adc9b32aaedc54e24bdc59a05f0ced855088835fe3cbe58375f",
  port: 19108,
  portRpc: 19109,
  protocol: {
    magic: 1223139429
  },
  seedsDns: [
    "testnet-seed.decred.mindcry.org",
    "testnet-seed.decred.netpurgatory.org",
    "testnet.decredseed.org",
    "testnet-seed.decred.org"
  ],
  versions: {
    bip32: {
      private: 70615959,
      public: 70617041
    },
    bip44: 42,
    private: 8974,
    public: 3873,
    scripthash: 3836
  }
}, Ob), C8 = {
  main: N8,
  test: U8
}, $8 = {
  name: "DigiByte",
  per1: 1e8,
  unit: "DGB"
}, H8 = Object.assign({}, {
  hashGenesisBlock: "000000000019d6689c085ae165831e934ff763ae46a2a6c172b3f1b60a8ce26f",
  // nDefaultPort
  port: 12024,
  portRpc: 14022,
  protocol: {
    // pchMessageStart
    magic: 4207130330
    // careful, sent over wire as little endian
  },
  bech32: "dgb",
  // vSeeds
  seedsDns: [
    "seed.digibyte.io",
    "digiexplorer.info",
    "digihash.co"
  ],
  // base58Prefixes
  versions: {
    bip44: 2147483668,
    private: 128,
    public: 30,
    scripthash: 63,
    // new 'S' prefix
    scripthash2: 5
    // old '3' prefix
  }
}, $8), L8 = { main: H8 }, Ab = {
  name: "Dogecoin",
  unit: "DOGE"
}, D8 = Object.assign({}, {
  hashGenesisBlock: "1a91e3dace36e2be3bf030a65679fe821aa1d6ef92e7c9902eb318182c355691",
  port: 22556,
  protocol: {
    magic: 3233857728
  },
  seedsDns: [
    "seed.multidoge.org",
    "seed2.multidoge.org"
  ],
  versions: {
    bip32: {
      private: 49988504,
      public: 49990397
    },
    bip44: 3,
    private: 158,
    public: 30,
    scripthash: 22
  }
}, Ab), M8 = Object.assign({}, {
  hashGenesisBlock: "bb0a78264637406b6360aad926284d544d7049f45189db5664f3c4d07350559e",
  port: 44556,
  protocol: {
    magic: 4240553948
  },
  seedsDns: [
    "testseed.jrn.me.uk"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 241,
    public: 113,
    scripthash: 196
  }
}, Ab), F8 = {
  main: D8,
  test: M8
}, Wl = {
  name: "Groestlcoin",
  per1: 1e8,
  unit: "GRS",
  messagePrefix: `GroestlCoin Signed Message:
`
}, j8 = Object.assign({}, {
  hashGenesisBlock: "00000ac5927c594d49cc0bdb81759d0da8297eb614683d3acb62f0703b639023",
  // nDefaultPort
  port: 1331,
  portRpc: 1441,
  protocol: {
    // pchMessageStart
    magic: 3568615161
    // careful, sent over wire as little endian
  },
  bech32: "grs",
  // vSeeds
  seedsDns: [
    "dnsseed1.groestlcoin.org",
    "dnsseed2.groestlcoin.org",
    "dnsseed3.groestlcoin.org",
    "dnsseed4.groestlcoin.org"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 17,
    private: 128,
    public: 36,
    scripthash: 5
  }
}, Wl), K8 = Object.assign({}, {
  hashGenesisBlock: "0x000000ffbb50fc9898cdd36ec163e6ba23230164c0052a28876255b7dcf2cd36",
  port: 17777,
  portRpc: 17766,
  protocol: {
    magic: 118034699
  },
  bech32: "tgrs",
  seedsDns: [
    "testnet-seed1.groestlcoin.org",
    "testnet-seed2.groestlcoin.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Wl), q8 = Object.assign({}, {
  hashGenesisBlock: "0x000000ffbb50fc9898cdd36ec163e6ba23230164c0052a28876255b7dcf2cd36",
  port: 18888,
  portRpc: 18443,
  protocol: {
    magic: 3669344250
  },
  bech32: "grsrt",
  seedsDns: [],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Wl), G8 = {
  main: j8,
  test: K8,
  regtest: q8
}, Tb = {
  name: "Litecoin",
  unit: "LTC"
}, V8 = Object.assign({}, {
  hashGenesisBlock: "12a765e31ffd4059bada1e25190f6e98c99d9714d334efa41a195a7e7e04bfe2",
  port: 9333,
  protocol: {
    magic: 3686187259
  },
  bech32: "ltc",
  seedsDns: [
    "dnsseed.litecointools.com",
    "dnsseed.litecoinpool.org",
    "dnsseed.ltc.xurious.com",
    "dnsseed.koin-project.com",
    "dnsseed.weminemnc.com"
  ],
  versions: {
    bip32: {
      private: 27106558,
      public: 27108450
    },
    bip44: 2,
    private: 176,
    public: 48,
    scripthash: 50,
    scripthash2: 5
    // old '3' prefix. available for backward compatibility.
  }
}, Tb), W8 = Object.assign({}, {
  hashGenesisBlock: "f5ae71e26c74beacc88382716aced69cddf3dffff24f384e1808905e0188f68f",
  bech32: "tltc",
  versions: {
    bip32: {
      private: 70709117,
      public: 70711009
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 58,
    scripthash2: 196
  }
}, Tb), z8 = {
  main: V8,
  test: W8
}, Ib = {
  name: "Viacoin",
  unit: "VIA"
}, X8 = Object.assign({}, {
  hashGenesisBlock: "4e9b54001f9976049830128ec0331515eaabe35a70970d79971da1539a400ba1",
  port: 5223,
  protocol: {
    magic: 3418777615
  },
  seedsDns: [
    "seed.viacoin.net",
    "viaseeder.barbatos.fr",
    "mainnet.viacoin.net"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 14,
    private: 199,
    public: 71,
    scripthash: 33
  }
}, Ib), Y8 = Object.assign({}, {
  hashGenesisBlock: "770aa712aa08fdcbdecc1c8df1b3e2d4e17a7cf6e63a28b785b32e74c96cb27d",
  port: 25223,
  protocol: {
    magic: 2465187241
  },
  seedsDns: [
    "testnet.viacoin.net",
    "seed-testnet.viacoin.net"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 255,
    public: 127,
    scripthash: 196
  }
}, Ib), Z8 = {
  main: X8,
  test: Y8
}, Pb = {
  name: "Monacoin",
  unit: "MONA"
}, J8 = Object.assign({}, {
  hashGenesisBlock: "ff9f1c0116d19de7c9963845e129f9ed1bfc0b376eb54fd7afa42e0d418c8bb6",
  port: 9401,
  portRpc: 9402,
  protocol: {
    magic: 3686187259
  },
  bech32: "mona",
  seedsDns: [
    "dnsseed.monacoin.org"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 22,
    private: 176,
    private2: 178,
    // old wif
    public: 50,
    scripthash: 55,
    scripthash2: 5
    // old '3' prefix. available for backward compatibility.
  }
}, Pb), Q8 = Object.assign({}, {
  hashGenesisBlock: "a2b106ceba3be0c6d097b2a6a6aacf9d638ba8258ae478158f449c321061e0b2",
  port: 19403,
  portRpc: 19402,
  protocol: {
    magic: 4056470269
  },
  bech32: "tmona",
  seedsDns: [
    "testnet-dnsseed.monacoin.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 117,
    scripthash2: 196
  }
}, Pb), eI = {
  main: J8,
  test: Q8
}, tI = {
  name: "NuBits",
  per1: 1e6,
  unit: "NBT"
}, rI = Object.assign({}, {
  hashGenesisBlock: "000003cc2da5a0a289ad0a590c20a8b975219ddc1204efd169e947dd4cbad73f",
  // nDefaultPort
  port: 7890,
  portRpc: 14002,
  protocol: {
    // pchMessageStart
    magic: 3652501241
    // careful, sent over wire as little endian
  },
  // vSeeds
  seedsDns: [],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 12,
    private: 150,
    public: 25,
    scripthash: 26
  }
}, tI), nI = {
  main: rI
}, iI = {
  name: "Namecoin",
  unit: "NMC"
}, oI = Object.assign({}, {
  hashGenesisBlock: "000000000062b72c5e2ceb45fbc8587e807c155b0da735e6483dfba2f0a9c770",
  versions: {
    bip44: 7,
    private: 180,
    public: 52,
    scripthash: 5
  }
}, iI), sI = {
  main: oI,
  test: null
}, xb = {
  name: "Peercoin",
  per1: 1e6,
  // util.h:40
  unit: "PPC",
  messagePrefix: `Peercoin Signed Message:
`
  // main.cpp:77
}, aI = Object.assign({}, {
  hashGenesisBlock: "0000000032fe677166d54963b62a4677d8957e87c508eaa4fd7eb1c880cd27e3",
  // main.h:84
  // nDefaultPort
  port: 9901,
  // protocol.h:18
  portRpc: 9902,
  // protocol.h:19
  protocol: {
    // pchMessageStart
    magic: 3857311974
    // careful, sent over wire as little endian protocol.cpp:31
  },
  // vSeeds
  seedsDns: [
    // net.cpp:1209
    "seed.peercoin.net",
    "seed2.peercoin.net",
    "seed.peercoin-library.org",
    "ppcseed.ns.7server.net"
  ],
  versions: {
    // not implemented in Peercoin <= v0.7.x nodes, only 3rd party wallets
    // https://github.com/jmacwhyte/recovery-phrase-recovery/blob/52073aba08e9d01032c0b5aff8c682911fe2e5fc/js/bitcoinjs-extensions.js#L58
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 6,
    // https://github.com/satoshilabs/slips/blob/master/slip-0044.md
    private: 183,
    // base58.h:402 ; 128 + PUBKEY_ADDRESS
    public: 55,
    // base58.h:276
    scripthash: 117
    // base58.h:277
  }
}, xb), fI = Object.assign({}, {
  hashGenesisBlock: "00000001f757bb737f6596503e17cd17b0658ce630cc727c0cca81aec47c9f06",
  port: 9903,
  portRpc: 9904,
  protocol: {
    magic: 4022399691
  },
  seedsDns: [
    "tseed.peercoin.net",
    "tseed2.peercoin.net",
    "tseed.peercoin-library.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, xb), cI = {
  main: aI,
  test: fI
}, uI = {
  name: "Qtum",
  unit: "QTUM"
}, lI = Object.assign({}, {
  hashGenesisBlock: "000075aef83cf2853580f8ae8ce6f8c3096cfa21d98334d6e3f95e5582ed986c",
  // nDefaultPort
  port: 3888,
  protocol: {
    // pchMessageStart
    magic: 3550924785
    // careful, sent over wire as little endian
  },
  bech32: "qc",
  // vSeeds
  seedsDns: [
    "qtum3.dynu.net"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 2301,
    private: 128,
    public: 58,
    scripthash: 50
  }
}, uI), hI = {
  main: lI
}, Bb = {
  name: "Ravencoin",
  unit: "RVN"
}, pI = Object.assign({}, {
  hashGenesisBlock: "0000006b444bc2f2ffe627be9d9e7e7a0730000870ef6eb6da46c8eae389df90",
  port: 8767,
  protocol: {
    magic: 1314275666
  },
  bech32: "rc",
  seedsDns: [
    "seed-raven.bitactivate.com",
    "seed-raven.ravencoin.com",
    "seed-raven.ravencoin.org"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 175,
    private: 128,
    public: 60,
    scripthash: 122
  }
}, Bb), dI = Object.assign({}, {
  hashGenesisBlock: "000000ecfc5e6324a079542221d00e10362bdc894d56500c414060eea8a3ad5a",
  port: 18770,
  protocol: {
    magic: 1414420050
  },
  bech32: "tr",
  seedsDns: [
    "seed-testnet-raven.bitactivate.com",
    "seed-testnet-raven.ravencoin.com",
    "seed-testnet-raven.ravencoin.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, Bb), yI = {
  main: pI,
  test: dI
}, kb = {
  name: "ReddCoin",
  unit: "RDD"
}, gI = Object.assign({}, {
  hashGenesisBlock: "b868e0d95a3c3c0e0dadc67ee587aaf9dc8acbf99e3b4b3110fad4eb74c1decc",
  versions: {
    bip44: 4,
    private: 189,
    public: 61,
    scripthash: 5
  }
}, kb), bI = Object.assign({}, {
  hashGenesisBlock: "a12ac9bd4cd26262c53a6277aafc61fe9dfe1e2b05eaa1ca148a5be8b394e35a",
  versions: {
    bip44: 1,
    private: 239,
    public: 111,
    scripthash: 196
  }
}, kb), vI = {
  main: gI,
  test: bI
}, zl = {
  name: "Vertcoin",
  unit: "VTC"
}, wI = Object.assign({}, {
  hashGenesisBlock: "4d96a915f49d40b1e5c2844d1ee2dccb90013a990ccea12c492d22110489f0c4",
  // nDefaultPort
  port: 5889,
  protocol: {
    // pchMessageStart
    magic: 3669344250
    // careful, sent over wire as little endian
  },
  bech32: "vtc",
  // vSeeds
  seedsDns: [
    "useast1.vtconline.org",
    "vtc.gertjaap.org",
    "seed.vtc.bryangoodson.org",
    "dnsseed.pknight.ca",
    "seed.orderofthetaco.org",
    "seed.alexturek.org",
    "vertcoin.mbl.cash"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 28,
    private: 128,
    public: 71,
    scripthash: 5
  }
}, zl), mI = Object.assign({}, {
  hashGenesisBlock: "cee8f24feb7a64c8f07916976aa4855decac79b6741a8ec2e32e2747497ad2c9",
  port: 15889,
  // portRpc: 18332,
  protocol: {
    magic: 1953654134
  },
  bech32: "tvtc",
  seedsDns: [
    "jlovejoy.mit.edu",
    "gertjaap.ddns.net",
    "fr1.vtconline.org",
    "tvtc.vertcoin.org"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    private: 239,
    public: 74,
    scripthash: 196
  }
}, zl), EI = Object.assign({}, {
  hashGenesisBlock: "0f9188f13cb7b2c71f2a335e3a4fc328bf5beb436012afca590b1a11466e2206",
  port: 18444,
  // portRpc: 18332,
  protocol: {
    magic: 3669344250
  },
  seedsDns: [],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    private: 239,
    public: 111,
    scripthash: 196
  }
}, zl), _I = {
  main: wI,
  test: mI,
  regtest: EI
}, Rb = {
  name: "x42",
  isProofOfStake: !0
}, SI = Object.assign({}, {
  unit: "x42",
  hashGenesisBlock: "04ffe583707a96c1c2eb54af33a4b1dc6d9d8e09fea8c9a7b097ba88f0cb64c4",
  port: 52342,
  portRpc: 52343,
  protocol: {
    magic: 55731778
  },
  seedsDns: [
    "mainnet1.x42seed.host",
    "mainnetnode1.x42seed.host",
    "tech.x42.cloud",
    "x42.seed.blockcore.net"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 424242,
    private: 203,
    public: 75,
    scripthash: 125
  }
}, Rb), OI = Object.assign({}, {
  unit: "Tx42",
  hashGenesisBlock: "a92bf124a1e6f237015440d5f1e1999bdef8e321f2d3fdc367eb2f7733b17854",
  port: 62342,
  portRpc: 62343,
  protocol: {
    magic: 72508994
  },
  seedsDns: [
    "testnet1.x42seed.host"
  ],
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 424242,
    private: 193,
    public: 65,
    scripthash: 196
  }
}, Rb), AI = {
  main: SI,
  test: OI
}, Nb = {
  name: "Zcash",
  unit: "ZEC"
}, TI = Object.assign({}, {
  hashGenesisBlock: "00040fe8ec8471911baa1db1266ea15dd06b4a8a5c453883c000b031973dce08",
  // nDefaultPort
  port: 8233,
  portRpc: 8232,
  protocol: {
    // pchMessageStart
    magic: 1680337188
    // careful, sent over wire as little endian
  },
  // vSeeds
  seedsDns: [
    "dnsseed.z.cash",
    "dnsseed.str4d.xyz",
    "dnsseed.znodes.org"
  ],
  // base58Prefixes
  versions: {
    bip32: {
      private: 76066276,
      public: 76067358
    },
    bip44: 133,
    private: 128,
    public: 7352,
    scripthash: 7357
  }
}, Nb), II = Object.assign({}, {
  hashGenesisBlock: "0x05a60a92d99d85997cce3b87616c089f6124d7342af37106edc76126334a2c38",
  port: 18233,
  portRpc: 18232,
  protocol: {
    magic: 3220773626
  },
  seedsDns: [
    "dnsseed.testnet.z.cash"
  ],
  versions: {
    bip32: {
      private: 70615956,
      public: 70617039
    },
    bip44: 133,
    private: 239,
    public: 7461,
    scripthash: 7354
  }
}, Nb), PI = {
  main: TI,
  test: II
}, xI = Re.Buffer, Ub = [
  f8,
  l8,
  g8,
  w8,
  S8,
  T8,
  x8,
  R8,
  C8,
  L8,
  F8,
  G8,
  z8,
  Z8,
  eI,
  nI,
  sI,
  cI,
  hI,
  yI,
  vI,
  _I,
  AI,
  PI
], vr = {};
Ub.forEach(function(e) {
  var t = e.main.unit.toLowerCase(), r = e.main.name.toLowerCase();
  e.main.testnet = !1, e.main.toBitcoinJS = Fs.bind(e.main), e.main.toBitcore = js.bind(e.main), vr[t] = e.main, vr[r] = e.main, e.test && (e.test.testnet = !0, e.test.toBitcoinJS = Fs.bind(e.test), e.test.toBitcore = js.bind(e.test), vr[t + "-test"] = e.test, vr[r + "-test"] = e.test), e.regtest && (e.regtest.testnet = !0, e.regtest.toBitcoinJS = Fs.bind(e.regtest), e.regtest.toBitcore = js.bind(e.regtest), vr[t + "-regtest"] = e.regtest, vr[r + "-regtest"] = e.regtest), e.simnet && (e.simnet.testnet = !0, e.simnet.toBitcoinJS = Fs.bind(e.simnet), e.simnet.toBitcore = js.bind(e.simnet), vr[t + "-simnet"] = e.simnet, vr[r + "-simnet"] = e.simnet);
});
function Cb(e) {
  var t = e.toLowerCase();
  return t in vr ? vr[t] : null;
}
Ub.forEach(function(e) {
  Cb[e.main.name.toLowerCase()] = e;
});
function Fs() {
  return Object.assign({}, this, {
    messagePrefix: this.messagePrefix || "" + this.name + ` Signed Message:
`,
    bech32: this.bech32,
    bip32: {
      public: (this.versions.bip32 || {}).public,
      private: (this.versions.bip32 || {}).private
    },
    pubKeyHash: this.versions.public,
    scriptHash: this.versions.scripthash,
    wif: this.versions.private,
    dustThreshold: null
    // TODO
  });
}
function js() {
  var e = xI.allocUnsafe(4);
  return e.writeUInt32BE(this.protocol ? this.protocol.magic : 0, 0), e = e.readUInt32LE(0), Object.assign({}, this, {
    name: this.testnet ? "testnet" : "livenet",
    alias: this.testnet ? "testnet" : "mainnet",
    pubkeyhash: this.versions.public,
    privatekey: this.versions.private,
    scripthash: this.versions.scripthash,
    xpubkey: (this.versions.bip32 || {}).public,
    xprivkey: (this.versions.bip32 || {}).private,
    networkMagic: e,
    port: this.port,
    dnsSeeds: this.seedsDns || []
  });
}
var BI = Cb;
const Ks = /* @__PURE__ */ Vv(BI), kI = typeof N.process < "u" && N.process.pid ? N.process.pid.toString(36) : "", jr = (e) => {
  switch (e) {
    case se.Bitcoin:
      return qr.networks.bitcoin;
    case se.BitcoinCash:
      return Ks.bitcoincash.main.toBitcoinJS();
    case se.Dogecoin:
      const t = {
        private: 70615956,
        public: 70617039
      }, r = Ks.dogecoin.test;
      return r.versions.bip32 = t, Ks.dogecoin.main.toBitcoinJS();
    case se.Litecoin:
      return Ks.litecoin.main.toBitcoinJS();
    default:
      throw new Error("Invalid chain");
  }
}, RI = (e) => ({
  [pn.Average]: Math.floor(e),
  [pn.Fast]: Math.floor(e * 1.5),
  [pn.Fastest]: Math.floor(e * 2)
}), NI = (e) => t8(e, i8), $b = (e) => {
  if (!NI(e))
    throw new Error("Invalid BIP39 phrase");
  return n8(e);
};
let kc = 0;
const UI = () => {
  const e = Date.now(), t = kc || e;
  return kc = t, e > kc ? e : t + 1;
}, CI = () => kI + UI().toString(36), Ad = async ({
  phrase: e,
  wif: t,
  derivationPath: r,
  chain: n
}) => {
  if (!t && !e)
    throw new Error("Either phrase or wif must be provided");
  const i = await import("./js-07bd359d.js").then((l) => l.j), o = Rl.ECPairFactory(i), s = jr(n);
  if (t)
    return o.fromWIF(t, s);
  const a = $b(e), f = xn.fromMasterSeed(a, s).derive(r);
  if (!f.privateKey)
    throw new Error("Could not get private key from phrase");
  return o.fromPrivateKey(N.Buffer.from(f.privateKey), { network: s });
}, Hb = ({ address: e, chain: t }) => {
  try {
    return qr.address.toOutputScript(e, jr(t)), !0;
  } catch {
    return !1;
  }
}, $I = ({ keys: e, chain: t }) => {
  if (!e)
    throw new Error("Keys must be provided");
  const r = se.Dogecoin === t ? qr.payments.p2pkh : qr.payments.p2wpkh, { address: n } = r({ pubkey: e.publicKey, network: jr(t) });
  if (!n)
    throw new Error("Address not defined");
  return n;
}, HI = async ({
  signTransaction: e,
  from: t,
  memo: r,
  recipient: n,
  chain: i,
  apiClient: o,
  feeOptionKey: s,
  broadcastTx: a,
  feeRate: f,
  assetValue: l
}) => {
  if (!t)
    throw new Error("From address must be provided");
  if (!n)
    throw new Error("Recipient address must be provided");
  const h = f || (await Of(o))[s || pn.Fast], { psbt: y } = await Db({
    recipient: n,
    feeRate: h,
    sender: t,
    fetchTxHex: i === se.Dogecoin,
    chain: i,
    apiClient: o,
    assetValue: l,
    memo: r
  }), v = await e(y);
  return v.finalizeAllInputs(), a(v.extractTransaction().toHex());
}, LI = async function(e, t, r) {
  try {
    switch (console.log("pubkey: ", e), console.log("type: ", t), t) {
      case "pubkey":
      case "zpub":
      case "xpub":
        return console.log("pubkey.pubkey: ", e.pubkey.xpub), await r.getBalanceXpub(e.pubkey.xpub || e.xpub);
      case "address":
        const i = e[t], o = await r.getBalance(i);
        return console.log("getPubkeyBalance: addressBalance: ", o), o;
      default:
        throw new Error("Invalid pubkey type");
    }
  } catch (n) {
    console.error(n);
  }
}, DI = async ({ pubkeys: e, chain: t, apiClient: r }) => {
  console.log("pubkeys: ", e), typeof e == "string" && (e = [{ address: e }]);
  let n = 0;
  for (let o = 0; o < e.length; o++) {
    let s = e[o], a = "";
    s.pubkey ? a = "pubkey" : a = "address", console.log("pubkey: ", s);
    const f = await LI(s, a, r);
    console.log("getPubkeyBalance balance: ", f), n = n + f;
  }
  return console.log(`CHAIN: ${t}.${t}`), console.log("totalBalance:", n.toString()), [await nu.fromIdentifier(`${t}.${t}`, n.toString())];
}, Of = async (e) => RI(await e.getSuggestedTxFee()), Lb = async ({
  assetValue: e,
  recipient: t,
  memo: r,
  pubkeys: n,
  sender: i,
  fetchTxHex: o = !1,
  apiClient: s,
  chain: a
}) => {
  console.log("pubkeys: ", n);
  for (let v = 0; v < n.length; v++) {
    let g = n[v];
    console.log("pubkey: ", g.pubkey), console.log("pubkey: ", g.pubkey.pubkey);
    let m = await s.getBalanceXpub(g.pubkey);
    console.log("balance: ", m), n[v].balance = m;
  }
  let f = -1 / 0, l = null;
  for (let v = 0; v < n.length; v++) {
    const g = n[v], m = parseFloat(g.balance);
    !isNaN(m) && m > f && (f = m, l = g);
  }
  console.log("The pubkey with the highest balance is:", l);
  let h = await s.listUnspent({
    pubkey: l == null ? void 0 : l.pubkey,
    chain: a,
    apiKey: s.apiKey
  });
  console.log("inputs total: ", h), console.log("inputs total: ", h.length);
  function y(v) {
    const {
      txid: g,
      vout: m,
      value: E,
      address: O,
      height: x,
      confirmations: U,
      path: H,
      hex: M,
      tx: k,
      coin: _,
      network: L
    } = v;
    return {
      address: O,
      hash: g,
      // Rename txid to hash
      index: m,
      value: parseInt(E),
      height: x,
      confirmations: U,
      path: H,
      txHex: M,
      tx: k,
      coin: _,
      network: L,
      witnessUtxo: {
        value: parseInt(v.tx.vout[0].value),
        script: N.Buffer.from(v.tx.vout[0].scriptPubKey.hex, "hex")
      }
    };
  }
  if (h = h.map(y), !Hb({ address: t, chain: a, apiClient: s }))
    throw new Error("Invalid address");
  return {
    inputs: h,
    outputs: [
      { address: t, value: Number(e.bigIntValue) },
      ...r ? [{ address: "", script: us(r), value: 0 }] : []
    ]
  };
}, Db = async ({
  assetValue: e,
  pubkeys: t,
  recipient: r,
  memo: n,
  feeRate: i,
  sender: o,
  fetchTxHex: s = !1,
  apiClient: a,
  chain: f
}) => {
  const l = n ? us(n) : null, h = await Lb({
    assetValue: e,
    pubkeys: t,
    recipient: r,
    memo: n,
    sender: o,
    fetchTxHex: s,
    apiClient: a,
    chain: f
  });
  f === se.Dogecoin && (i = 1e5), f === se.BitcoinCash && (i = 100);
  const { inputs: y, outputs: v } = cs({ ...h, feeRate: i, chain: f });
  if (!y || !v)
    throw new Error("Insufficient Balance for transaction");
  const g = new qr.Psbt({ network: jr(f) });
  return f === se.Dogecoin && g.setMaximumFeeRate(65e7), y.forEach(
    (m) => g.addInput({
      // FIXME: (@Towan, @Chillios) - Check on this as types says it's not defined
      // @ts-ignore
      hash: m.hash,
      index: m.index,
      ...!!m.witnessUtxo && f !== se.Dogecoin && { witnessUtxo: m.witnessUtxo },
      ...f === se.Dogecoin && {
        nonWitnessUtxo: m.txHex ? N.Buffer.from(m.txHex, "hex") : void 0
      }
    })
  ), v.forEach((m) => {
    m.address || (m.address = o), m.script ? l && g.addOutput({ script: l, value: 0 }) : g.addOutput(m);
  }), { psbt: g, utxos: h.inputs, inputs: y };
}, Td = async ({
  assetValue: e,
  apiClient: t,
  chain: r,
  feeOptionKey: n = pn.Fast,
  feeRate: i,
  fetchTxHex: o = !1,
  memo: s,
  recipient: a,
  sender: f
}) => {
  const l = await Lb({
    assetValue: e,
    recipient: a,
    memo: s,
    sender: f,
    fetchTxHex: o,
    apiClient: t,
    chain: r
  }), h = i ? Math.floor(i) : (await Of(t))[n];
  return cs({ ...l, feeRate: h, chain: r });
}, MI = async ({
  from: e,
  memo: t,
  feeRate: r,
  feeOptionKey: n = pn.Fast,
  recipients: i = 1,
  chain: o,
  apiClient: s
}) => {
  const a = await s.getAddressData(e), f = r ? Math.ceil(r) : (await Of(s))[n], l = a.utxo.map((m) => ({
    ...m,
    // type: utxo.witnessUtxo ? UTXOScriptType.P2WPKH : UTXOScriptType.P2PKH,
    type: jl.P2PKH,
    hash: ""
  })).filter(
    (m) => m.value > Math.max(gb(o), No(m) * f)
  ), h = nu.fromChainOrSignature(
    o,
    l.reduce((m, E) => m += E.value, 0)
  );
  let y = typeof i == "number" ? Array.from({ length: i }, () => ({ address: e, value: 0 })) : i;
  if (t) {
    const m = us(t);
    y.push({ address: e, script: m, value: 0 });
  }
  const g = ql({
    inputs: l,
    outputs: y,
    feeRate: f
  }) * f;
  return new nu({
    identifier: h.toString(),
    value: h.sub(g),
    decimal: h.decimal
  });
}, ls = (e) => ({
  accumulative: cs,
  apiClient: e.apiClient,
  broadcastTx: e.broadcastTx,
  calculateTxSize: ql,
  buildTx: (t) => Db({ ...t, ...e }),
  getAddressFromKeys: (t) => $I({ keys: t, ...e }),
  validateAddress: (t) => Hb({ address: t, ...e }),
  createKeysForPath: (t) => Ad({ ...t, ...e }),
  getPrivateKeyFromMnemonic: async ({
    phrase: t,
    derivationPath: r
  }) => (await Ad({ phrase: t, derivationPath: r, ...e })).toWIF(),
  getBalance: (t) => DI({ pubkeys: t, ...e }),
  getFeeRates: () => Of(e.apiClient),
  transfer: (t) => HI({ ...t, ...e }),
  getInputsOutputsFee: (t) => Td({ ...t, ...e }),
  getFeeForTransaction: async (t) => new Gv({
    value: (await Td({ ...t, ...e })).fee,
    decimal: 8
  }),
  estimateMaxSendableAmount: async (t) => MI({ ...t, ...e })
});
var FI = Re.Buffer;
function jI(e) {
  if (e.length < 8 || e.length > 72 || e[0] !== 48 || e[1] !== e.length - 2 || e[2] !== 2)
    return !1;
  var t = e[3];
  if (t === 0 || 5 + t >= e.length || e[4 + t] !== 2)
    return !1;
  var r = e[5 + t];
  return !(r === 0 || 6 + t + r !== e.length || e[4] & 128 || t > 1 && e[4] === 0 && !(e[5] & 128) || e[t + 6] & 128 || r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128));
}
function KI(e) {
  if (e.length < 8)
    throw new Error("DER sequence length is too short");
  if (e.length > 72)
    throw new Error("DER sequence length is too long");
  if (e[0] !== 48)
    throw new Error("Expected DER sequence");
  if (e[1] !== e.length - 2)
    throw new Error("DER sequence length is invalid");
  if (e[2] !== 2)
    throw new Error("Expected DER integer");
  var t = e[3];
  if (t === 0)
    throw new Error("R length is zero");
  if (5 + t >= e.length)
    throw new Error("R length is too long");
  if (e[4 + t] !== 2)
    throw new Error("Expected DER integer (2)");
  var r = e[5 + t];
  if (r === 0)
    throw new Error("S length is zero");
  if (6 + t + r !== e.length)
    throw new Error("S length is invalid");
  if (e[4] & 128)
    throw new Error("R value is negative");
  if (t > 1 && e[4] === 0 && !(e[5] & 128))
    throw new Error("R value excessively padded");
  if (e[t + 6] & 128)
    throw new Error("S value is negative");
  if (r > 1 && e[t + 6] === 0 && !(e[t + 7] & 128))
    throw new Error("S value excessively padded");
  return {
    r: e.slice(4, 4 + t),
    s: e.slice(6 + t)
  };
}
function qI(e, t) {
  var r = e.length, n = t.length;
  if (r === 0)
    throw new Error("R length is zero");
  if (n === 0)
    throw new Error("S length is zero");
  if (r > 33)
    throw new Error("R length is too long");
  if (n > 33)
    throw new Error("S length is too long");
  if (e[0] & 128)
    throw new Error("R value is negative");
  if (t[0] & 128)
    throw new Error("S value is negative");
  if (r > 1 && e[0] === 0 && !(e[1] & 128))
    throw new Error("R value excessively padded");
  if (n > 1 && t[0] === 0 && !(t[1] & 128))
    throw new Error("S value excessively padded");
  var i = FI.allocUnsafe(6 + r + n);
  return i[0] = 48, i[1] = i.length - 2, i[2] = 2, i[3] = e.length, e.copy(i, 4), i[4 + r] = 2, i[5 + r] = t.length, t.copy(i, 6 + r), i;
}
var Mb = {
  check: jI,
  decode: KI,
  encode: qI
};
const GI = 0, VI = 0, WI = 76, zI = 77, XI = 78, YI = 79, ZI = 80, JI = 81, QI = 81, e4 = 82, t4 = 83, r4 = 84, n4 = 85, i4 = 86, o4 = 87, s4 = 88, a4 = 89, f4 = 90, c4 = 91, u4 = 92, l4 = 93, h4 = 94, p4 = 95, d4 = 96, y4 = 97, g4 = 98, b4 = 99, v4 = 100, w4 = 101, m4 = 102, E4 = 103, _4 = 104, S4 = 105, O4 = 106, A4 = 107, T4 = 108, I4 = 109, P4 = 110, x4 = 111, B4 = 112, k4 = 113, R4 = 114, N4 = 115, U4 = 116, C4 = 117, $4 = 118, H4 = 119, L4 = 120, D4 = 121, M4 = 122, F4 = 123, j4 = 124, K4 = 125, q4 = 126, G4 = 127, V4 = 128, W4 = 129, z4 = 130, X4 = 131, Y4 = 132, Z4 = 133, J4 = 134, Q4 = 135, eP = 136, tP = 137, rP = 138, nP = 139, iP = 140, oP = 141, sP = 142, aP = 143, fP = 144, cP = 145, uP = 146, lP = 147, hP = 148, pP = 149, dP = 150, yP = 151, gP = 152, bP = 153, vP = 154, wP = 155, mP = 156, EP = 157, _P = 158, SP = 159, OP = 160, AP = 161, TP = 162, IP = 163, PP = 164, xP = 165, BP = 166, kP = 167, RP = 168, NP = 169, UP = 170, CP = 171, $P = 172, HP = 173, LP = 174, DP = 175, MP = 176, FP = 177, jP = 177, KP = 178, qP = 178, GP = 179, VP = 180, WP = 181, zP = 182, XP = 183, YP = 184, ZP = 185, JP = 186, QP = 187, ex = 188, tx = 253, rx = 254, nx = 255, Lt = {
  OP_FALSE: GI,
  OP_0: VI,
  OP_PUSHDATA1: WI,
  OP_PUSHDATA2: zI,
  OP_PUSHDATA4: XI,
  OP_1NEGATE: YI,
  OP_RESERVED: ZI,
  OP_TRUE: JI,
  OP_1: QI,
  OP_2: e4,
  OP_3: t4,
  OP_4: r4,
  OP_5: n4,
  OP_6: i4,
  OP_7: o4,
  OP_8: s4,
  OP_9: a4,
  OP_10: f4,
  OP_11: c4,
  OP_12: u4,
  OP_13: l4,
  OP_14: h4,
  OP_15: p4,
  OP_16: d4,
  OP_NOP: y4,
  OP_VER: g4,
  OP_IF: b4,
  OP_NOTIF: v4,
  OP_VERIF: w4,
  OP_VERNOTIF: m4,
  OP_ELSE: E4,
  OP_ENDIF: _4,
  OP_VERIFY: S4,
  OP_RETURN: O4,
  OP_TOALTSTACK: A4,
  OP_FROMALTSTACK: T4,
  OP_2DROP: I4,
  OP_2DUP: P4,
  OP_3DUP: x4,
  OP_2OVER: B4,
  OP_2ROT: k4,
  OP_2SWAP: R4,
  OP_IFDUP: N4,
  OP_DEPTH: U4,
  OP_DROP: C4,
  OP_DUP: $4,
  OP_NIP: H4,
  OP_OVER: L4,
  OP_PICK: D4,
  OP_ROLL: M4,
  OP_ROT: F4,
  OP_SWAP: j4,
  OP_TUCK: K4,
  OP_CAT: q4,
  OP_SPLIT: G4,
  OP_NUM2BIN: V4,
  OP_BIN2NUM: W4,
  OP_SIZE: z4,
  OP_INVERT: X4,
  OP_AND: Y4,
  OP_OR: Z4,
  OP_XOR: J4,
  OP_EQUAL: Q4,
  OP_EQUALVERIFY: eP,
  OP_RESERVED1: tP,
  OP_RESERVED2: rP,
  OP_1ADD: nP,
  OP_1SUB: iP,
  OP_2MUL: oP,
  OP_2DIV: sP,
  OP_NEGATE: aP,
  OP_ABS: fP,
  OP_NOT: cP,
  OP_0NOTEQUAL: uP,
  OP_ADD: lP,
  OP_SUB: hP,
  OP_MUL: pP,
  OP_DIV: dP,
  OP_MOD: yP,
  OP_LSHIFT: gP,
  OP_RSHIFT: bP,
  OP_BOOLAND: vP,
  OP_BOOLOR: wP,
  OP_NUMEQUAL: mP,
  OP_NUMEQUALVERIFY: EP,
  OP_NUMNOTEQUAL: _P,
  OP_LESSTHAN: SP,
  OP_GREATERTHAN: OP,
  OP_LESSTHANOREQUAL: AP,
  OP_GREATERTHANOREQUAL: TP,
  OP_MIN: IP,
  OP_MAX: PP,
  OP_WITHIN: xP,
  OP_RIPEMD160: BP,
  OP_SHA1: kP,
  OP_SHA256: RP,
  OP_HASH160: NP,
  OP_HASH256: UP,
  OP_CODESEPARATOR: CP,
  OP_CHECKSIG: $P,
  OP_CHECKSIGVERIFY: HP,
  OP_CHECKMULTISIG: LP,
  OP_CHECKMULTISIGVERIFY: DP,
  OP_NOP1: MP,
  OP_NOP2: FP,
  OP_CHECKLOCKTIMEVERIFY: jP,
  OP_NOP3: KP,
  OP_CHECKSEQUENCEVERIFY: qP,
  OP_NOP4: GP,
  OP_NOP5: VP,
  OP_NOP6: WP,
  OP_NOP7: zP,
  OP_NOP8: XP,
  OP_NOP9: YP,
  OP_NOP10: ZP,
  OP_CHECKDATASIG: JP,
  OP_CHECKDATASIGVERIFY: QP,
  OP_REVERSEBYTES: ex,
  OP_PUBKEYHASH: tx,
  OP_PUBKEY: rx,
  OP_INVALIDOPCODE: nx
};
var un = Lt;
function Fb(e) {
  return e < un.OP_PUSHDATA1 ? 1 : e <= 255 ? 2 : e <= 65535 ? 3 : 5;
}
function ix(e, t, r) {
  var n = Fb(t);
  return n === 1 ? e.writeUInt8(t, r) : n === 2 ? (e.writeUInt8(un.OP_PUSHDATA1, r), e.writeUInt8(t, r + 1)) : n === 3 ? (e.writeUInt8(un.OP_PUSHDATA2, r), e.writeUInt16LE(t, r + 1)) : (e.writeUInt8(un.OP_PUSHDATA4, r), e.writeUInt32LE(t, r + 1)), n;
}
function ox(e, t) {
  var r = e.readUInt8(t), n, i;
  if (r < un.OP_PUSHDATA1)
    n = r, i = 1;
  else if (r === un.OP_PUSHDATA1) {
    if (t + 2 > e.length)
      return null;
    n = e.readUInt8(t + 1), i = 2;
  } else if (r === un.OP_PUSHDATA2) {
    if (t + 3 > e.length)
      return null;
    n = e.readUInt16LE(t + 1), i = 3;
  } else {
    if (t + 5 > e.length)
      return null;
    if (r !== un.OP_PUSHDATA4)
      throw new Error("Unexpected opcode");
    n = e.readUInt32LE(t + 1), i = 5;
  }
  return {
    opcode: r,
    number: n,
    size: i
  };
}
var jb = {
  encodingLength: Fb,
  encode: ix,
  decode: ox
}, Qe = De, sx = Math.pow(2, 31) - 1;
function ax(e) {
  return Qe.UInt32(e) && e <= sx;
}
function Kb(e) {
  return Qe.String(e) && e.match(/^(m\/)?(\d+'?\/)*\d+'?$/);
}
Kb.toJSON = function() {
  return "BIP32 derivation path";
};
var fx = 21 * 1e14;
function cx(e) {
  return Qe.UInt53(e) && e <= fx;
}
var Hu = Qe.quacksLike("BigInteger"), ux = Qe.quacksLike("Point"), lx = Qe.compile({ r: Hu, s: Hu }), hx = Qe.compile({
  messagePrefix: Qe.oneOf(Qe.Buffer, Qe.String),
  bip32: {
    public: Qe.UInt32,
    private: Qe.UInt32
  },
  pubKeyHash: Qe.UInt8,
  scriptHash: Qe.UInt8,
  wif: Qe.UInt8
}), qb = {
  BigInt: Hu,
  BIP32Path: Kb,
  Buffer256bit: Qe.BufferN(32),
  ECPoint: ux,
  ECSignature: lx,
  Hash160bit: Qe.BufferN(20),
  Hash256bit: Qe.BufferN(32),
  Network: hx,
  Satoshi: cx,
  UInt31: ax
};
for (var Id in Qe)
  qb[Id] = Qe[Id];
var st = qb, px = Re.Buffer;
function dx(e, t, r) {
  t = t || 4, r = r === void 0 ? !0 : r;
  var n = e.length;
  if (n === 0)
    return 0;
  if (n > t)
    throw new TypeError("Script number overflow");
  if (r && !(e[n - 1] & 127) && (n <= 1 || !(e[n - 2] & 128)))
    throw new Error("Non-minimally encoded script number");
  if (n === 5) {
    var i = e.readUInt32LE(0), o = e.readUInt8(4);
    return o & 128 ? -((o & -129) * 4294967296 + i) : o * 4294967296 + i;
  }
  for (var s = 0, a = 0; a < n; ++a)
    s |= e[a] << 8 * a;
  return e[n - 1] & 128 ? -(s & ~(128 << 8 * (n - 1))) : s;
}
function yx(e) {
  return e > 2147483647 ? 5 : e > 8388607 ? 4 : e > 32767 ? 3 : e > 127 ? 2 : e > 0 ? 1 : 0;
}
function gx(e) {
  for (var t = Math.abs(e), r = yx(t), n = px.allocUnsafe(r), i = e < 0, o = 0; o < r; ++o)
    n.writeUInt8(t & 255, o), t >>= 8;
  return n[r - 1] & 128 ? n.writeUInt8(i ? 128 : 0, r - 1) : i && (n[r - 1] |= 128), n;
}
var Gb = {
  decode: dx,
  encode: gx
}, Pd = Lt, Vb = {};
for (var xd in Pd) {
  var bx = Pd[xd];
  Vb[bx] = xd;
}
var vx = Vb, $t = Re.Buffer, wx = Mb, Ko = jb, Af = De, Xn = st, mx = Gb, er = Lt, Ex = vx, Wb = er.OP_RESERVED;
function _x(e) {
  return Xn.Number(e) && (e === er.OP_0 || e >= er.OP_1 && e <= er.OP_16 || e === er.OP_1NEGATE);
}
function Sx(e) {
  return Xn.Buffer(e) || _x(e);
}
function zb(e) {
  return Xn.Array(e) && e.every(Sx);
}
function Ta(e) {
  if (e.length === 0)
    return er.OP_0;
  if (e.length === 1) {
    if (e[0] >= 1 && e[0] <= 16)
      return Wb + e[0];
    if (e[0] === 129)
      return er.OP_1NEGATE;
  }
}
function Xb(e) {
  if ($t.isBuffer(e))
    return e;
  Af(Xn.Array, e);
  var t = e.reduce(function(i, o) {
    return $t.isBuffer(o) ? o.length === 1 && Ta(o) !== void 0 ? i + 1 : i + Ko.encodingLength(o.length) + o.length : i + 1;
  }, 0), r = $t.allocUnsafe(t), n = 0;
  if (e.forEach(function(i) {
    if ($t.isBuffer(i)) {
      var o = Ta(i);
      if (o !== void 0) {
        r.writeUInt8(o, n), n += 1;
        return;
      }
      n += Ko.encode(r, i.length, n), i.copy(r, n), n += i.length;
    } else
      r.writeUInt8(i, n), n += 1;
  }), n !== r.length)
    throw new Error("Could not decode chunks");
  return r;
}
function Ox(e) {
  if ($t.isBuffer(e))
    return e;
  var t = e.reduce(function(i, o) {
    return $t.isBuffer(o) ? i + Ko.encodingLength(o.length) + o.length : i + 1;
  }, 0), r = $t.allocUnsafe(t), n = 0;
  if (e.forEach(function(i, o) {
    $t.isBuffer(i) ? (n += Ko.encode(r, i.length, n), i.copy(r, n), n += i.length) : (r.writeUInt8(i, n), n += 1);
  }), n !== r.length)
    throw new Error("Could not decode chunks");
  return r;
}
function Xl(e) {
  if (Xn.Array(e))
    return e;
  Af(Xn.Buffer, e);
  for (var t = [], r = 0; r < e.length; ) {
    var n = e[r];
    if (n > er.OP_0 && n <= er.OP_PUSHDATA4) {
      var i = Ko.decode(e, r);
      if (i === null)
        return [];
      r += i.size;
      var o = e.slice(r, r + i.number);
      r += i.number;
      var s = Ta(o);
      s !== void 0 ? t.push(s) : t.push(o);
    } else
      t.push(n), r += 1;
  }
  return t;
}
function Ax(e) {
  return $t.isBuffer(e) && (e = Xl(e)), e.map(function(t) {
    if ($t.isBuffer(t)) {
      var r = Ta(t);
      if (r === void 0)
        return t.toString("hex");
      t = r;
    }
    return Ex[t];
  }).join(" ");
}
function Tx(e) {
  return Af(Xn.String, e), Xb(
    e.split(" ").map(function(t) {
      return er[t] !== void 0 ? er[t] : $t.from(t, "hex");
    })
  );
}
function Ix(e) {
  return e = Xl(e), Af(zb, e), e.map(function(t) {
    return $t.isBuffer(t) ? t : t === er.OP_0 ? $t.allocUnsafe(0) : mx.encode(t - Wb);
  });
}
function Px(e) {
  if (!$t.isBuffer(e) || e.length < 33)
    return !1;
  switch (e[0]) {
    case 2:
    case 3:
      return e.length === 33;
    case 4:
      return e.length === 65;
  }
  return !1;
}
function Yb(e) {
  var t = e & -193;
  return t > 0 && t < 4;
}
function xx(e) {
  return !$t.isBuffer(e) || !Yb(e[e.length - 1]) ? !1 : e.length === 65 ? !0 : wx.check(e.slice(0, -1));
}
var at = {
  compile: Xb,
  compile2: Ox,
  decompile: Xl,
  fromASM: Tx,
  toASM: Ax,
  toStack: Ix,
  number: Gb,
  isCanonicalPubKey: Px,
  isCanonicalSignature: xx,
  isPushOnly: zb,
  isDefinedHashType: Yb
}, qo = at, Lu = st, Zb = De, Yl = Lt, Go = Yl.OP_RESERVED;
function Zl(e, t) {
  var r = qo.decompile(e);
  if (r.length < 4 || r[r.length - 1] !== Yl.OP_CHECKMULTISIG || !Lu.Number(r[0]) || !Lu.Number(r[r.length - 2]))
    return !1;
  var n = r[0] - Go, i = r[r.length - 2] - Go;
  if (n <= 0 || i > 16 || n > i || i !== r.length - 3)
    return !1;
  if (t)
    return !0;
  var o = r.slice(1, -2);
  return o.every(qo.isCanonicalPubKey);
}
Zl.toJSON = function() {
  return "multi-sig output";
};
function Bx(e, t) {
  Zb({
    m: Lu.Number,
    pubKeys: [qo.isCanonicalPubKey]
  }, {
    m: e,
    pubKeys: t
  });
  var r = t.length;
  if (r < e)
    throw new TypeError("Not enough pubKeys provided");
  return qo.compile([].concat(
    Go + e,
    t,
    Go + r,
    Yl.OP_CHECKMULTISIG
  ));
}
function kx(e, t) {
  var r = qo.decompile(e);
  return Zb(Zl, r, t), {
    m: r[0] - Go,
    pubKeys: r.slice(1, -2)
  };
}
var Jb = {
  check: Zl,
  decode: kx,
  encode: Bx
}, Rx = Re.Buffer, Vo = at, Nx = Jb, ia = De, Jl = Lt;
function Qb(e) {
  return e === Jl.OP_0 || Vo.isCanonicalSignature(e);
}
function Ql(e, t) {
  var r = Vo.decompile(e);
  return r.length < 2 || r[0] !== Jl.OP_0 ? !1 : t ? r.slice(1).every(Qb) : r.slice(1).every(Vo.isCanonicalSignature);
}
Ql.toJSON = function() {
  return "multisig input";
};
var Bd = Rx.allocUnsafe(0);
function e1(e, t) {
  if (ia([Qb], e), t) {
    var r = Nx.decode(t);
    if (e.length < r.m)
      throw new TypeError("Not enough signatures provided");
    if (e.length > r.pubKeys.length)
      throw new TypeError("Too many signatures provided");
  }
  return [].concat(Bd, e.map(function(n) {
    return n === Jl.OP_0 ? Bd : n;
  }));
}
function Ux(e, t) {
  return Vo.compile(e1(e, t));
}
function t1(e, t) {
  return ia(ia.Array, e), ia(Ql, e, t), e.slice(1);
}
function Cx(e, t) {
  var r = Vo.decompile(e);
  return t1(r, t);
}
var $x = {
  check: Ql,
  decode: Cx,
  decodeStack: t1,
  encode: Ux,
  encodeStack: e1
}, eh = {
  input: $x,
  output: Jb
}, r1 = at, Hx = st, n1 = De, i1 = Lt;
function th(e) {
  var t = r1.compile(e);
  return t.length > 1 && t[0] === i1.OP_RETURN;
}
th.toJSON = function() {
  return "null data output";
};
function Lx(e) {
  return n1(Hx.Buffer, e), r1.compile([i1.OP_RETURN, e]);
}
function Dx(e) {
  return n1(th, e), e.slice(2);
}
var Mx = {
  output: {
    check: th,
    decode: Dx,
    encode: Lx
  }
}, Wo = at, oa = De;
function rh(e) {
  var t = Wo.decompile(e);
  return t.length === 1 && Wo.isCanonicalSignature(t[0]);
}
rh.toJSON = function() {
  return "pubKey input";
};
function o1(e) {
  return oa(Wo.isCanonicalSignature, e), [e];
}
function Fx(e) {
  return Wo.compile(o1(e));
}
function s1(e) {
  return oa(oa.Array, e), oa(rh, e), e[0];
}
function jx(e) {
  var t = Wo.decompile(e);
  return s1(t);
}
var Kx = {
  check: rh,
  decode: jx,
  decodeStack: s1,
  encode: Fx,
  encodeStack: o1
}, zo = at, a1 = De, f1 = Lt;
function nh(e) {
  var t = zo.decompile(e);
  return t.length === 2 && zo.isCanonicalPubKey(t[0]) && t[1] === f1.OP_CHECKSIG;
}
nh.toJSON = function() {
  return "pubKey output";
};
function qx(e) {
  return a1(zo.isCanonicalPubKey, e), zo.compile([e, f1.OP_CHECKSIG]);
}
function Gx(e) {
  var t = zo.decompile(e);
  return a1(nh, t), t[0];
}
var Vx = {
  check: nh,
  decode: Gx,
  encode: qx
}, ih = {
  input: Kx,
  output: Vx
}, Gn = at, sa = De;
function oh(e) {
  var t = Gn.decompile(e);
  return t.length === 2 && Gn.isCanonicalSignature(t[0]) && Gn.isCanonicalPubKey(t[1]);
}
oh.toJSON = function() {
  return "pubKeyHash input";
};
function c1(e, t) {
  return sa({
    signature: Gn.isCanonicalSignature,
    pubKey: Gn.isCanonicalPubKey
  }, {
    signature: e,
    pubKey: t
  }), [e, t];
}
function Wx(e, t) {
  return Gn.compile(c1(e, t));
}
function u1(e) {
  return sa(sa.Array, e), sa(oh, e), {
    signature: e[0],
    pubKey: e[1]
  };
}
function zx(e) {
  var t = Gn.decompile(e);
  return u1(t);
}
var Xx = {
  check: oh,
  decode: zx,
  decodeStack: u1,
  encode: Wx,
  encodeStack: c1
}, l1 = at, Yx = st, h1 = De, ln = Lt;
function sh(e) {
  var t = l1.compile(e);
  return t.length === 25 && t[0] === ln.OP_DUP && t[1] === ln.OP_HASH160 && t[2] === 20 && t[23] === ln.OP_EQUALVERIFY && t[24] === ln.OP_CHECKSIG;
}
sh.toJSON = function() {
  return "pubKeyHash output";
};
function Zx(e) {
  return h1(Yx.Hash160bit, e), l1.compile([
    ln.OP_DUP,
    ln.OP_HASH160,
    e,
    ln.OP_EQUALVERIFY,
    ln.OP_CHECKSIG
  ]);
}
function Jx(e) {
  return h1(sh, e), e.slice(3, 23);
}
var Qx = {
  check: sh,
  decode: Jx,
  encode: Zx
}, ah = {
  input: Xx,
  output: Qx
}, p1 = at, eB = st, d1 = De, y1 = Lt;
function fh(e) {
  var t = p1.compile(e);
  return t.length === 22 && t[0] === y1.OP_0 && t[1] === 20;
}
fh.toJSON = function() {
  return "Witness pubKeyHash output";
};
function tB(e) {
  return d1(eB.Hash160bit, e), p1.compile([y1.OP_0, e]);
}
function rB(e) {
  return d1(fh, e), e.slice(2);
}
var g1 = {
  check: fh,
  decode: rB,
  encode: tB
}, b1 = at, nB = st, v1 = De, w1 = Lt;
function ch(e) {
  var t = b1.compile(e);
  return t.length === 34 && t[0] === w1.OP_0 && t[1] === 32;
}
ch.toJSON = function() {
  return "Witness scriptHash output";
};
function iB(e) {
  return v1(nB.Hash256bit, e), b1.compile([w1.OP_0, e]);
}
function oB(e) {
  return v1(ch, e), e.slice(2);
}
var m1 = {
  check: ch,
  decode: oB,
  encode: iB
}, sB = Re.Buffer, Sr = at, Rc = De, kd = eh, Rd = ih, Nd = ah, aB = g1, fB = m1;
function uh(e, t) {
  var r = Sr.decompile(e);
  if (r.length < 1)
    return !1;
  var n = r[r.length - 1];
  if (!sB.isBuffer(n))
    return !1;
  var i = Sr.decompile(Sr.compile(r.slice(0, -1))), o = Sr.decompile(n);
  return o.length === 0 || !Sr.isPushOnly(i) ? !1 : r.length === 1 ? fB.check(o) || aB.check(o) : !!(Nd.input.check(i) && Nd.output.check(o) || kd.input.check(i, t) && kd.output.check(o) || Rd.input.check(i) && Rd.output.check(o));
}
uh.toJSON = function() {
  return "scriptHash input";
};
function E1(e, t) {
  var r = Sr.compile(t);
  return [].concat(e, r);
}
function cB(e, t) {
  var r = Sr.decompile(e);
  return Sr.compile(E1(r, t));
}
function _1(e) {
  return Rc(Rc.Array, e), Rc(uh, e), {
    redeemScriptStack: e.slice(0, -1),
    redeemScript: e[e.length - 1]
  };
}
function uB(e) {
  var t = Sr.decompile(e), r = _1(t);
  return r.redeemScriptSig = Sr.compile(r.redeemScriptStack), delete r.redeemScriptStack, r;
}
var lB = {
  check: uh,
  decode: uB,
  decodeStack: _1,
  encode: cB,
  encodeStack: E1
}, S1 = at, hB = st, O1 = De, Ia = Lt;
function lh(e) {
  var t = S1.compile(e);
  return t.length === 23 && t[0] === Ia.OP_HASH160 && t[1] === 20 && t[22] === Ia.OP_EQUAL;
}
lh.toJSON = function() {
  return "scriptHash output";
};
function pB(e) {
  return O1(hB.Hash160bit, e), S1.compile([Ia.OP_HASH160, e, Ia.OP_EQUAL]);
}
function dB(e) {
  return O1(lh, e), e.slice(2, 22);
}
var yB = {
  check: lh,
  decode: dB,
  encode: pB
}, gB = {
  input: lB,
  output: yB
}, Pa = at, aa = De;
function A1(e) {
  return Pa.isCanonicalPubKey(e) && e.length === 33;
}
function hh(e) {
  var t = Pa.decompile(e);
  return t.length === 2 && Pa.isCanonicalSignature(t[0]) && A1(t[1]);
}
hh.toJSON = function() {
  return "witnessPubKeyHash input";
};
function bB(e, t) {
  return aa({
    signature: Pa.isCanonicalSignature,
    pubKey: A1
  }, {
    signature: e,
    pubKey: t
  }), [e, t];
}
function vB(e) {
  return aa(aa.Array, e), aa(hh, e), {
    signature: e[0],
    pubKey: e[1]
  };
}
var wB = {
  check: hh,
  decodeStack: vB,
  encodeStack: bB
}, mB = {
  input: wB,
  output: g1
}, Ud = at, Du = st, Uo = De, Cd = eh, $d = ih, Hd = ah;
function ph(e, t) {
  if (Uo(Du.Array, e), e.length < 1)
    return !1;
  var r = e[e.length - 1];
  if (!N.Buffer.isBuffer(r))
    return !1;
  var n = Ud.decompile(r);
  if (n.length === 0)
    return !1;
  var i = Ud.compile(e.slice(0, -1));
  return !!(Hd.input.check(i) && Hd.output.check(n) || Cd.input.check(i, t) && Cd.output.check(n) || $d.input.check(i) && $d.output.check(n));
}
ph.toJSON = function() {
  return "witnessScriptHash input";
};
function EB(e, t) {
  return Uo({
    witnessData: [Du.Buffer],
    witnessScript: Du.Buffer
  }, {
    witnessData: e,
    witnessScript: t
  }), [].concat(e, t);
}
function _B(e) {
  return Uo(Uo.Array, e), Uo(ph, e), {
    witnessData: e.slice(0, -1),
    witnessScript: e[e.length - 1]
  };
}
var SB = {
  check: ph,
  decodeStack: _B,
  encodeStack: EB
}, OB = {
  input: SB,
  output: m1
}, T1 = Re.Buffer, dh = at, AB = st, I1 = De, P1 = Lt, x1 = T1.from("aa21a9ed", "hex");
function yh(e) {
  var t = dh.compile(e);
  return t.length > 37 && t[0] === P1.OP_RETURN && t[1] === 36 && t.slice(2, 6).equals(x1);
}
yh.toJSON = function() {
  return "Witness commitment output";
};
function TB(e) {
  I1(AB.Hash256bit, e);
  var t = T1.allocUnsafe(36);
  return x1.copy(t, 0), e.copy(t, 4), dh.compile([P1.OP_RETURN, t]);
}
function IB(e) {
  return I1(yh, e), dh.decompile(e)[1].slice(4, 36);
}
var PB = {
  check: yh,
  decode: IB,
  encode: TB
}, xB = {
  output: PB
}, gh = at.decompile, bh = eh, B1 = Mx, vh = ih, wh = ah, mh = gB, Eh = mB, _h = OB, k1 = xB, ut = {
  MULTISIG: "multisig",
  NONSTANDARD: "nonstandard",
  NULLDATA: "nulldata",
  P2PK: "pubkey",
  P2PKH: "pubkeyhash",
  P2SH: "scripthash",
  P2WPKH: "witnesspubkeyhash",
  P2WSH: "witnessscripthash",
  WITNESS_COMMITMENT: "witnesscommitment"
};
function BB(e) {
  if (Eh.output.check(e))
    return ut.P2WPKH;
  if (_h.output.check(e))
    return ut.P2WSH;
  if (wh.output.check(e))
    return ut.P2PKH;
  if (mh.output.check(e))
    return ut.P2SH;
  var t = gh(e);
  return bh.output.check(t) ? ut.MULTISIG : vh.output.check(t) ? ut.P2PK : k1.output.check(t) ? ut.WITNESS_COMMITMENT : B1.output.check(t) ? ut.NULLDATA : ut.NONSTANDARD;
}
function kB(e, t) {
  var r = gh(e);
  return wh.input.check(r) ? ut.P2PKH : mh.input.check(r, t) ? ut.P2SH : bh.input.check(r, t) ? ut.MULTISIG : vh.input.check(r) ? ut.P2PK : ut.NONSTANDARD;
}
function RB(e, t) {
  var r = gh(e);
  return Eh.input.check(r) ? ut.P2WPKH : _h.input.check(r, t) ? ut.P2WSH : ut.NONSTANDARD;
}
var Sh = {
  classifyInput: kB,
  classifyOutput: BB,
  classifyWitness: RB,
  multisig: bh,
  nullData: B1,
  pubKey: vh,
  pubKeyHash: wh,
  scriptHash: mh,
  witnessPubKeyHash: Eh,
  witnessScriptHash: _h,
  witnessCommitment: k1,
  types: ut
}, Nc = jb, no = Ja;
function R1(e, t) {
  if (typeof e != "number")
    throw new Error("cannot write a non-number as a number");
  if (e < 0)
    throw new Error("specified a negative value for writing an unsigned value");
  if (e > t)
    throw new Error("RangeError: value out of range");
  if (Math.floor(e) !== e)
    throw new Error("value has a fractional component");
}
function NB(e, t) {
  var r = e.readUInt32LE(t), n = e.readUInt32LE(t + 4);
  return n *= 4294967296, R1(n + r, 9007199254740991), n + r;
}
function UB(e, t, r) {
  return R1(t, 9007199254740991), e.writeInt32LE(t & -1, r), e.writeUInt32LE(Math.floor(t / 4294967296), r + 4), r + 8;
}
function CB(e, t) {
  var r = no.decode(e, t);
  return {
    number: r,
    size: no.decode.bytes
  };
}
function $B(e, t, r) {
  return no.encode(t, e, r), no.encode.bytes;
}
var N1 = {
  pushDataSize: Nc.encodingLength,
  readPushDataInt: Nc.decode,
  readUInt64LE: NB,
  readVarInt: CB,
  varIntBuffer: no.encode,
  varIntSize: no.encodingLength,
  writePushDataInt: Nc.encode,
  writeUInt64LE: UB,
  writeVarInt: $B
}, Oh = pb;
function U1(e) {
  return Oh("ripemd160").update(e).digest();
}
function HB(e) {
  return Oh("sha1").update(e).digest();
}
function xa(e) {
  return Oh("sha256").update(e).digest();
}
function LB(e) {
  return U1(xa(e));
}
function DB(e) {
  return xa(xa(e));
}
var gi = {
  hash160: LB,
  hash256: DB,
  ripemd160: U1,
  sha1: HB,
  sha256: xa
}, MB = function(t, r) {
  if (!Array.isArray(t))
    throw TypeError("Expected values Array");
  if (typeof r != "function")
    throw TypeError("Expected digest Function");
  for (var n = t.length, i = t.concat(); n > 1; ) {
    for (var o = 0, s = 0; s < n; s += 2, ++o) {
      var a = i[s], f = s + 1 === n ? a : i[s + 1], l = N.Buffer.concat([a, f]);
      i[o] = r(l);
    }
    n = o;
  }
  return i[0];
}, Jt = Re.Buffer, Bn = gi, Ld = at, Ah = N1, FB = Lt, An = De, xe = st, Tr = Ja;
function qi(e) {
  var t = e.length;
  return Tr.encodingLength(t) + t;
}
function jB(e) {
  var t = e.length;
  return Tr.encodingLength(t) + e.reduce(function(r, n) {
    return r + qi(n);
  }, 0);
}
function me() {
  this.version = 2, this.locktime = 0, this.ins = [], this.outs = [];
}
me.DEFAULT_SEQUENCE = 4294967295;
me.SIGHASH_ALL = 1;
me.SIGHASH_NONE = 2;
me.SIGHASH_SINGLE = 3;
me.SIGHASH_ANYONECANPAY = 128;
me.SIGHASH_BITCOINCASHBIP143 = 64;
me.ADVANCED_TRANSACTION_MARKER = 0;
me.ADVANCED_TRANSACTION_FLAG = 1;
var Th = Jt.allocUnsafe(0), C1 = [], Uc = Jt.from("0000000000000000000000000000000000000000000000000000000000000000", "hex"), Dd = Jt.from("0000000000000000000000000000000000000000000000000000000000000001", "hex"), KB = Jt.from("ffffffffffffffff", "hex"), qB = {
  script: Th,
  valueBuffer: KB
};
me.fromBuffer = function(e, t) {
  var r = 0;
  function n(x) {
    return r += x, e.slice(r - x, r);
  }
  function i() {
    var x = e.readUInt32LE(r);
    return r += 4, x;
  }
  function o() {
    var x = e.readInt32LE(r);
    return r += 4, x;
  }
  function s() {
    var x = Ah.readUInt64LE(e, r);
    return r += 8, x;
  }
  function a() {
    var x = Tr.decode(e, r);
    return r += Tr.decode.bytes, x;
  }
  function f() {
    return n(a());
  }
  function l() {
    for (var x = a(), U = [], H = 0; H < x; H++)
      U.push(f());
    return U;
  }
  var h = new me();
  h.version = o();
  var y = e.readUInt8(r), v = e.readUInt8(r + 1), g = !1;
  y === me.ADVANCED_TRANSACTION_MARKER && v === me.ADVANCED_TRANSACTION_FLAG && (r += 2, g = !0);
  for (var m = a(), E = 0; E < m; ++E)
    h.ins.push({
      hash: n(32),
      index: i(),
      script: f(),
      sequence: i(),
      witness: C1
    });
  var O = a();
  for (E = 0; E < O; ++E)
    h.outs.push({
      value: s(),
      script: f()
    });
  if (g) {
    for (E = 0; E < m; ++E)
      h.ins[E].witness = l();
    if (!h.hasWitnesses())
      throw new Error("Transaction has superfluous witness data");
  }
  if (h.locktime = i(), t)
    return h;
  if (r !== e.length)
    throw new Error("Transaction has unexpected data");
  return h;
};
me.fromHex = function(e) {
  return me.fromBuffer(Jt.from(e, "hex"));
};
me.isCoinbaseHash = function(e) {
  An(xe.Hash256bit, e);
  for (var t = 0; t < 32; ++t)
    if (e[t] !== 0)
      return !1;
  return !0;
};
me.prototype.isCoinbase = function() {
  return this.ins.length === 1 && me.isCoinbaseHash(this.ins[0].hash);
};
me.prototype.addInput = function(e, t, r, n) {
  return An(xe.tuple(
    xe.Hash256bit,
    xe.UInt32,
    xe.maybe(xe.UInt32),
    xe.maybe(xe.Buffer)
  ), arguments), xe.Null(r) && (r = me.DEFAULT_SEQUENCE), this.ins.push({
    hash: e,
    index: t,
    script: n || Th,
    sequence: r,
    witness: C1
  }) - 1;
};
me.prototype.addOutput = function(e, t) {
  return An(xe.tuple(xe.Buffer, xe.Satoshi), arguments), this.outs.push({
    script: e,
    value: t
  }) - 1;
};
me.prototype.hasWitnesses = function() {
  return this.ins.some(function(e) {
    return e.witness.length !== 0;
  });
};
me.prototype.weight = function() {
  var e = this.__byteLength(!1), t = this.__byteLength(!0);
  return e * 3 + t;
};
me.prototype.virtualSize = function() {
  return Math.ceil(this.weight() / 4);
};
me.prototype.byteLength = function() {
  return this.__byteLength(!0);
};
me.prototype.__byteLength = function(e) {
  var t = e && this.hasWitnesses();
  return (t ? 10 : 8) + Tr.encodingLength(this.ins.length) + Tr.encodingLength(this.outs.length) + this.ins.reduce(function(r, n) {
    return r + 40 + qi(n.script);
  }, 0) + this.outs.reduce(function(r, n) {
    return r + 8 + qi(n.script);
  }, 0) + (t ? this.ins.reduce(function(r, n) {
    return r + jB(n.witness);
  }, 0) : 0);
};
me.prototype.clone = function() {
  var e = new me();
  return e.version = this.version, e.locktime = this.locktime, e.ins = this.ins.map(function(t) {
    return {
      hash: t.hash,
      index: t.index,
      script: t.script,
      sequence: t.sequence,
      witness: t.witness
    };
  }), e.outs = this.outs.map(function(t) {
    return {
      script: t.script,
      value: t.value
    };
  }), e;
};
me.prototype.hashForSignature = function(e, t, r) {
  if (An(xe.tuple(
    xe.UInt32,
    xe.Buffer,
    /* types.UInt8 */
    xe.Number
  ), arguments), e >= this.ins.length)
    return Dd;
  var n = Ld.compile(Ld.decompile(t).filter(function(a) {
    return a !== FB.OP_CODESEPARATOR;
  })), i = this.clone();
  if ((r & 31) === me.SIGHASH_NONE)
    i.outs = [], i.ins.forEach(function(a, f) {
      f !== e && (a.sequence = 0);
    });
  else if ((r & 31) === me.SIGHASH_SINGLE) {
    if (e >= this.outs.length)
      return Dd;
    i.outs.length = e + 1;
    for (var o = 0; o < e; o++)
      i.outs[o] = qB;
    i.ins.forEach(function(a, f) {
      f !== e && (a.sequence = 0);
    });
  }
  r & me.SIGHASH_ANYONECANPAY ? (i.ins = [i.ins[e]], i.ins[0].script = n) : (i.ins.forEach(function(a) {
    a.script = Th;
  }), i.ins[e].script = n);
  var s = Jt.allocUnsafe(i.__byteLength(!1) + 4);
  return s.writeInt32LE(r, s.length - 4), i.__toBuffer(s, 0, !1), Bn.hash256(s);
};
me.prototype.hashForWitnessV0 = function(e, t, r, n) {
  An(xe.tuple(xe.UInt32, xe.Buffer, xe.Satoshi, xe.UInt32), arguments);
  var i, o;
  function s(x) {
    o += x.copy(i, o);
  }
  function a(x) {
    o = i.writeUInt32LE(x, o);
  }
  function f(x) {
    o = Ah.writeUInt64LE(i, x, o);
  }
  function l(x) {
    Tr.encode(x, i, o), o += Tr.encode.bytes;
  }
  function h(x) {
    l(x.length), s(x);
  }
  var y = Uc, v = Uc, g = Uc;
  if (n & me.SIGHASH_ANYONECANPAY || (i = Jt.allocUnsafe(36 * this.ins.length), o = 0, this.ins.forEach(function(x) {
    s(x.hash), a(x.index);
  }), v = Bn.hash256(i)), !(n & me.SIGHASH_ANYONECANPAY) && (n & 31) !== me.SIGHASH_SINGLE && (n & 31) !== me.SIGHASH_NONE && (i = Jt.allocUnsafe(4 * this.ins.length), o = 0, this.ins.forEach(function(x) {
    a(x.sequence);
  }), g = Bn.hash256(i)), (n & 31) !== me.SIGHASH_SINGLE && (n & 31) !== me.SIGHASH_NONE) {
    var m = this.outs.reduce(function(x, U) {
      return x + 8 + qi(U.script);
    }, 0);
    i = Jt.allocUnsafe(m), o = 0, this.outs.forEach(function(x) {
      f(x.value), h(x.script);
    }), y = Bn.hash256(i);
  } else if ((n & 31) === me.SIGHASH_SINGLE && e < this.outs.length) {
    var E = this.outs[e];
    i = Jt.allocUnsafe(8 + qi(E.script)), o = 0, f(E.value), h(E.script), y = Bn.hash256(i);
  }
  i = Jt.allocUnsafe(156 + qi(t)), o = 0;
  var O = this.ins[e];
  return a(this.version), s(v), s(g), s(O.hash), a(O.index), h(t), f(r), a(O.sequence), s(y), a(this.locktime), a(n), Bn.hash256(i);
};
me.prototype.hashForCashSignature = function(e, t, r, n) {
  if (An(xe.tuple(
    xe.UInt32,
    xe.Buffer,
    /* types.UInt8 */
    xe.Number,
    xe.maybe(xe.UInt53)
  ), arguments), n & me.SIGHASH_BITCOINCASHBIP143) {
    if (xe.Null(r))
      throw new Error("Bitcoin Cash sighash requires value of input to be signed.");
    return this.hashForWitnessV0(e, t, r, n);
  } else
    return this.hashForSignature(e, t, n);
};
me.prototype.getHash = function() {
  return Bn.hash256(this.__toBuffer(void 0, void 0, !1));
};
me.prototype.getId = function() {
  return this.getHash().reverse().toString("hex");
};
me.prototype.toBuffer = function(e, t) {
  return this.__toBuffer(e, t, !0);
};
me.prototype.__toBuffer = function(e, t, r) {
  e || (e = Jt.allocUnsafe(this.__byteLength(r)));
  var n = t || 0;
  function i(g) {
    n += g.copy(e, n);
  }
  function o(g) {
    n = e.writeUInt8(g, n);
  }
  function s(g) {
    n = e.writeUInt32LE(g, n);
  }
  function a(g) {
    n = e.writeInt32LE(g, n);
  }
  function f(g) {
    n = Ah.writeUInt64LE(e, g, n);
  }
  function l(g) {
    Tr.encode(g, e, n), n += Tr.encode.bytes;
  }
  function h(g) {
    l(g.length), i(g);
  }
  function y(g) {
    l(g.length), g.forEach(h);
  }
  a(this.version);
  var v = r && this.hasWitnesses();
  return v && (o(me.ADVANCED_TRANSACTION_MARKER), o(me.ADVANCED_TRANSACTION_FLAG)), l(this.ins.length), this.ins.forEach(function(g) {
    i(g.hash), s(g.index), h(g.script), s(g.sequence);
  }), l(this.outs.length), this.outs.forEach(function(g) {
    g.valueBuffer ? i(g.valueBuffer) : f(g.value), h(g.script);
  }), v && this.ins.forEach(function(g) {
    y(g.witness);
  }), s(this.locktime), t !== void 0 ? e.slice(t, n) : e;
};
me.prototype.toHex = function() {
  return this.toBuffer().toString("hex");
};
me.prototype.setInputScript = function(e, t) {
  An(xe.tuple(xe.Number, xe.Buffer), arguments), this.ins[e].script = t;
};
me.prototype.setWitness = function(e, t) {
  An(xe.tuple(xe.Number, [xe.Buffer]), arguments), this.ins[e].witness = t;
};
var Ih = me, Ph = Re.Buffer, $1 = gi, GB = MB, VB = De, WB = st, Xo = Ja, zB = Ih;
function vt() {
  this.version = 1, this.prevHash = null, this.merkleRoot = null, this.timestamp = 0, this.bits = 0, this.nonce = 0;
}
vt.fromBuffer = function(e) {
  if (e.length < 80)
    throw new Error("Buffer too small (< 80 bytes)");
  var t = 0;
  function r(y) {
    return t += y, e.slice(t - y, t);
  }
  function n() {
    var y = e.readUInt32LE(t);
    return t += 4, y;
  }
  function i() {
    var y = e.readInt32LE(t);
    return t += 4, y;
  }
  var o = new vt();
  if (o.version = i(), o.prevHash = r(32), o.merkleRoot = r(32), o.timestamp = n(), o.bits = n(), o.nonce = n(), e.length === 80)
    return o;
  function s() {
    var y = Xo.decode(e, t);
    return t += Xo.decode.bytes, y;
  }
  function a() {
    var y = zB.fromBuffer(e.slice(t), !0);
    return t += y.byteLength(), y;
  }
  var f = s();
  o.transactions = [];
  for (var l = 0; l < f; ++l) {
    var h = a();
    o.transactions.push(h);
  }
  return o;
};
vt.prototype.byteLength = function(e) {
  return e || !this.transactions ? 80 : 80 + Xo.encodingLength(this.transactions.length) + this.transactions.reduce(function(t, r) {
    return t + r.byteLength();
  }, 0);
};
vt.fromHex = function(e) {
  return vt.fromBuffer(Ph.from(e, "hex"));
};
vt.prototype.getHash = function() {
  return $1.hash256(this.toBuffer(!0));
};
vt.prototype.getId = function() {
  return this.getHash().reverse().toString("hex");
};
vt.prototype.getUTCDate = function() {
  var e = /* @__PURE__ */ new Date(0);
  return e.setUTCSeconds(this.timestamp), e;
};
vt.prototype.toBuffer = function(e) {
  var t = Ph.allocUnsafe(this.byteLength(e)), r = 0;
  function n(s) {
    s.copy(t, r), r += s.length;
  }
  function i(s) {
    t.writeInt32LE(s, r), r += 4;
  }
  function o(s) {
    t.writeUInt32LE(s, r), r += 4;
  }
  return i(this.version), n(this.prevHash), n(this.merkleRoot), o(this.timestamp), o(this.bits), o(this.nonce), e || !this.transactions || (Xo.encode(this.transactions.length, t, r), r += Xo.encode.bytes, this.transactions.forEach(function(s) {
    var a = s.byteLength();
    s.toBuffer(t, r), r += a;
  })), t;
};
vt.prototype.toHex = function(e) {
  return this.toBuffer(e).toString("hex");
};
vt.calculateTarget = function(e) {
  var t = ((e & 4278190080) >> 24) - 3, r = e & 8388607, n = Ph.alloc(32, 0);
  return n.writeUInt32BE(r, 28 - t), n;
};
vt.calculateMerkleRoot = function(e) {
  if (VB([{ getHash: WB.Function }], e), e.length === 0)
    throw TypeError("Cannot compute merkle root for zero transactions");
  var t = e.map(function(r) {
    return r.getHash();
  });
  return GB(t, $1.hash256);
};
vt.prototype.checkMerkleRoot = function() {
  if (!this.transactions)
    return !1;
  var e = vt.calculateMerkleRoot(this.transactions);
  return this.merkleRoot.compare(e) === 0;
};
vt.prototype.checkProofOfWork = function() {
  var e = this.getHash().reverse(), t = vt.calculateTarget(this.bits);
  return e.compare(t) <= 0;
};
var XB = vt, Ba = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", Mu = {};
for (var qs = 0; qs < Ba.length; qs++) {
  var Cc = Ba.charAt(qs);
  if (Mu[Cc] !== void 0)
    throw new TypeError(Cc + " is ambiguous");
  Mu[Cc] = qs;
}
function Gi(e) {
  var t = e >> 25;
  return (e & 33554431) << 5 ^ -(t >> 0 & 1) & 996825010 ^ -(t >> 1 & 1) & 642813549 ^ -(t >> 2 & 1) & 513874426 ^ -(t >> 3 & 1) & 1027748829 ^ -(t >> 4 & 1) & 705979059;
}
function H1(e) {
  for (var t = 1, r = 0; r < e.length; ++r) {
    var n = e.charCodeAt(r);
    if (n < 33 || n > 126)
      return "Invalid prefix (" + e + ")";
    t = Gi(t) ^ n >> 5;
  }
  for (t = Gi(t), r = 0; r < e.length; ++r) {
    var i = e.charCodeAt(r);
    t = Gi(t) ^ i & 31;
  }
  return t;
}
function YB(e, t, r) {
  if (r = r || 90, e.length + 7 + t.length > r)
    throw new TypeError("Exceeds length limit");
  e = e.toLowerCase();
  var n = H1(e);
  if (typeof n == "string")
    throw new Error(n);
  for (var i = e + "1", o = 0; o < t.length; ++o) {
    var s = t[o];
    if (s >> 5)
      throw new Error("Non 5-bit word");
    n = Gi(n) ^ s, i += Ba.charAt(s);
  }
  for (o = 0; o < 6; ++o)
    n = Gi(n);
  for (n ^= 1, o = 0; o < 6; ++o) {
    var a = n >> (5 - o) * 5 & 31;
    i += Ba.charAt(a);
  }
  return i;
}
function L1(e, t) {
  if (t = t || 90, e.length < 8)
    return e + " too short";
  if (e.length > t)
    return "Exceeds length limit";
  var r = e.toLowerCase(), n = e.toUpperCase();
  if (e !== r && e !== n)
    return "Mixed-case string " + e;
  e = r;
  var i = e.lastIndexOf("1");
  if (i === -1)
    return "No separator character for " + e;
  if (i === 0)
    return "Missing prefix for " + e;
  var o = e.slice(0, i), s = e.slice(i + 1);
  if (s.length < 6)
    return "Data too short";
  var a = H1(o);
  if (typeof a == "string")
    return a;
  for (var f = [], l = 0; l < s.length; ++l) {
    var h = s.charAt(l), y = Mu[h];
    if (y === void 0)
      return "Unknown character " + h;
    a = Gi(a) ^ y, !(l + 6 >= s.length) && f.push(y);
  }
  return a !== 1 ? "Invalid checksum for " + e : { prefix: o, words: f };
}
function ZB() {
  var e = L1.apply(null, arguments);
  if (typeof e == "object")
    return e;
}
function JB(e) {
  var t = L1.apply(null, arguments);
  if (typeof t == "object")
    return t;
  throw new Error(t);
}
function Tf(e, t, r, n) {
  for (var i = 0, o = 0, s = (1 << r) - 1, a = [], f = 0; f < e.length; ++f)
    for (i = i << t | e[f], o += t; o >= r; )
      o -= r, a.push(i >> o & s);
  if (n)
    o > 0 && a.push(i << r - o & s);
  else {
    if (o >= t)
      return "Excess padding";
    if (i << r - o & s)
      return "Non-zero padding";
  }
  return a;
}
function QB(e) {
  var t = Tf(e, 8, 5, !0);
  if (Array.isArray(t))
    return t;
}
function e6(e) {
  var t = Tf(e, 8, 5, !0);
  if (Array.isArray(t))
    return t;
  throw new Error(t);
}
function t6(e) {
  var t = Tf(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
}
function r6(e) {
  var t = Tf(e, 5, 8, !1);
  if (Array.isArray(t))
    return t;
  throw new Error(t);
}
var n6 = {
  decodeUnsafe: ZB,
  decode: JB,
  encode: YB,
  toWordsUnsafe: QB,
  toWords: e6,
  fromWordsUnsafe: t6,
  fromWords: r6
}, hs = {
  bitcoin: {
    messagePrefix: `Bitcoin Signed Message:
`,
    bech32: "bc",
    bip32: {
      public: 76067358,
      private: 76066276
    },
    pubKeyHash: 0,
    scriptHash: 5,
    wif: 128
  },
  testnet: {
    messagePrefix: `Bitcoin Signed Message:
`,
    bech32: "tb",
    bip32: {
      public: 70617039,
      private: 70615956
    },
    pubKeyHash: 111,
    scriptHash: 196,
    wif: 239
  },
  litecoin: {
    messagePrefix: `Litecoin Signed Message:
`,
    bip32: {
      public: 27108450,
      private: 27106558
    },
    pubKeyHash: 48,
    scriptHash: 50,
    wif: 176
  }
}, D1 = Re.Buffer, ka = n6, M1 = Ef, So = at, hn = Sh, F1 = hs, i6 = De, $c = st;
function j1(e) {
  var t = M1.decode(e);
  if (t.length < 21)
    throw new TypeError(e + " is too short");
  if (t.length > 21)
    throw new TypeError(e + " is too long");
  var r = t.readUInt8(0), n = t.slice(1);
  return { version: r, hash: n };
}
function K1(e) {
  var t = ka.decode(e), r = ka.fromWords(t.words.slice(1));
  return {
    version: t.words[0],
    prefix: t.prefix,
    data: D1.from(r)
  };
}
function Fu(e, t) {
  i6($c.tuple($c.Hash160bit, $c.UInt8), arguments);
  var r = D1.allocUnsafe(21);
  return r.writeUInt8(t, 0), e.copy(r, 1), M1.encode(r);
}
function ju(e, t, r) {
  var n = ka.toWords(e);
  return n.unshift(t), ka.encode(r, n);
}
function o6(e, t) {
  if (t = t || F1.bitcoin, hn.pubKeyHash.output.check(e))
    return Fu(So.compile(e).slice(3, 23), t.pubKeyHash);
  if (hn.scriptHash.output.check(e))
    return Fu(So.compile(e).slice(2, 22), t.scriptHash);
  if (hn.witnessPubKeyHash.output.check(e))
    return ju(So.compile(e).slice(2, 22), 0, t.bech32);
  if (hn.witnessScriptHash.output.check(e))
    return ju(So.compile(e).slice(2, 34), 0, t.bech32);
  throw new Error(So.toASM(e) + " has no matching Address");
}
function s6(e, t) {
  t = t || F1.bitcoin;
  var r;
  try {
    r = j1(e);
  } catch {
  }
  if (r) {
    if (r.version === t.pubKeyHash)
      return hn.pubKeyHash.output.encode(r.hash);
    if (r.version === t.scriptHash)
      return hn.scriptHash.output.encode(r.hash);
  } else {
    try {
      r = K1(e);
    } catch {
    }
    if (r) {
      if (r.prefix !== t.bech32)
        throw new Error(e + " has an invalid prefix");
      if (r.version === 0) {
        if (r.data.length === 20)
          return hn.witnessPubKeyHash.output.encode(r.data);
        if (r.data.length === 32)
          return hn.witnessScriptHash.output.encode(r.data);
      }
    }
  }
  throw new Error(e + " has no matching Script");
}
var xh = {
  fromBase58Check: j1,
  fromBech32: K1,
  fromOutputScript: o6,
  toBase58Check: Fu,
  toBech32: ju,
  toOutputScript: s6
};
const a6 = "bigi", f6 = "1.4.2", c6 = "Big integers.", u6 = [
  "cryptography",
  "math",
  "bitcoin",
  "arbitrary",
  "precision",
  "arithmetic",
  "big",
  "integer",
  "int",
  "number",
  "biginteger",
  "bigint",
  "bignumber",
  "decimal",
  "float"
], l6 = {
  coveralls: "^2.11.2",
  istanbul: "^0.3.5",
  jshint: "^2.5.1",
  mocha: "^2.1.0",
  mochify: "^2.1.0"
}, h6 = {
  url: "https://github.com/cryptocoinjs/bigi",
  type: "git"
}, p6 = "./lib/index.js", d6 = {
  "browser-test": "./node_modules/.bin/mochify --wd -R spec",
  test: "./node_modules/.bin/_mocha -- test/*.js",
  jshint: "./node_modules/.bin/jshint --config jshint.json lib/*.js ; true",
  unit: "./node_modules/.bin/mocha",
  coverage: "./node_modules/.bin/istanbul cover ./node_modules/.bin/_mocha -- --reporter list test/*.js",
  coveralls: "npm run-script coverage && node ./node_modules/.bin/coveralls < coverage/lcov.info"
}, y6 = {}, g6 = {
  files: "test/*.js",
  harness: "mocha",
  browsers: [
    "ie/9..latest",
    "firefox/latest",
    "chrome/latest",
    "safari/6.0..latest",
    "iphone/6.0..latest",
    "android-browser/4.2..latest"
  ]
}, b6 = {
  name: a6,
  version: f6,
  description: c6,
  keywords: u6,
  devDependencies: l6,
  repository: h6,
  main: p6,
  scripts: d6,
  dependencies: y6,
  testling: g6
};
function ce(e, t, r) {
  if (!(this instanceof ce))
    return new ce(e, t, r);
  e != null && (typeof e == "number" ? this.fromNumber(e, t, r) : t == null && typeof e != "string" ? this.fromString(e, 256) : this.fromString(e, t));
}
var fe = ce.prototype;
fe.__bigi = b6.version;
ce.isBigInteger = function(e, t) {
  return e && e.__bigi && (!t || e.__bigi === fe.__bigi);
};
var fo;
function v6(e, t, r, n, i, o) {
  for (; --o >= 0; ) {
    var s = t * this[e++] + r[n] + i;
    i = Math.floor(s / 67108864), r[n++] = s & 67108863;
  }
  return i;
}
ce.prototype.am = v6;
fo = 26;
ce.prototype.DB = fo;
ce.prototype.DM = (1 << fo) - 1;
var w6 = ce.prototype.DV = 1 << fo, Bh = 52;
ce.prototype.FV = Math.pow(2, Bh);
ce.prototype.F1 = Bh - fo;
ce.prototype.F2 = 2 * fo - Bh;
var m6 = "0123456789abcdefghijklmnopqrstuvwxyz", If = new Array(), co, tr;
co = "0".charCodeAt(0);
for (tr = 0; tr <= 9; ++tr)
  If[co++] = tr;
co = "a".charCodeAt(0);
for (tr = 10; tr < 36; ++tr)
  If[co++] = tr;
co = "A".charCodeAt(0);
for (tr = 10; tr < 36; ++tr)
  If[co++] = tr;
function Md(e) {
  return m6.charAt(e);
}
function q1(e, t) {
  var r = If[e.charCodeAt(t)];
  return r ?? -1;
}
function E6(e) {
  for (var t = this.t - 1; t >= 0; --t)
    e[t] = this[t];
  e.t = this.t, e.s = this.s;
}
function _6(e) {
  this.t = 1, this.s = e < 0 ? -1 : 0, e > 0 ? this[0] = e : e < -1 ? this[0] = e + w6 : this.t = 0;
}
function Dr(e) {
  var t = new ce();
  return t.fromInt(e), t;
}
function S6(e, t) {
  var r = this, n;
  if (t == 16)
    n = 4;
  else if (t == 8)
    n = 3;
  else if (t == 256)
    n = 8;
  else if (t == 2)
    n = 1;
  else if (t == 32)
    n = 5;
  else if (t == 4)
    n = 2;
  else {
    r.fromRadix(e, t);
    return;
  }
  r.t = 0, r.s = 0;
  for (var i = e.length, o = !1, s = 0; --i >= 0; ) {
    var a = n == 8 ? e[i] & 255 : q1(e, i);
    if (a < 0) {
      e.charAt(i) == "-" && (o = !0);
      continue;
    }
    o = !1, s == 0 ? r[r.t++] = a : s + n > r.DB ? (r[r.t - 1] |= (a & (1 << r.DB - s) - 1) << s, r[r.t++] = a >> r.DB - s) : r[r.t - 1] |= a << s, s += n, s >= r.DB && (s -= r.DB);
  }
  n == 8 && e[0] & 128 && (r.s = -1, s > 0 && (r[r.t - 1] |= (1 << r.DB - s) - 1 << s)), r.clamp(), o && ce.ZERO.subTo(r, r);
}
function O6() {
  for (var e = this.s & this.DM; this.t > 0 && this[this.t - 1] == e; )
    --this.t;
}
function A6(e) {
  var t = this;
  if (t.s < 0)
    return "-" + t.negate().toString(e);
  var r;
  if (e == 16)
    r = 4;
  else if (e == 8)
    r = 3;
  else if (e == 2)
    r = 1;
  else if (e == 32)
    r = 5;
  else if (e == 4)
    r = 2;
  else
    return t.toRadix(e);
  var n = (1 << r) - 1, i, o = !1, s = "", a = t.t, f = t.DB - a * t.DB % r;
  if (a-- > 0)
    for (f < t.DB && (i = t[a] >> f) > 0 && (o = !0, s = Md(i)); a >= 0; )
      f < r ? (i = (t[a] & (1 << f) - 1) << r - f, i |= t[--a] >> (f += t.DB - r)) : (i = t[a] >> (f -= r) & n, f <= 0 && (f += t.DB, --a)), i > 0 && (o = !0), o && (s += Md(i));
  return o ? s : "0";
}
function T6() {
  var e = new ce();
  return ce.ZERO.subTo(this, e), e;
}
function I6() {
  return this.s < 0 ? this.negate() : this;
}
function P6(e) {
  var t = this.s - e.s;
  if (t != 0)
    return t;
  var r = this.t;
  if (t = r - e.t, t != 0)
    return this.s < 0 ? -t : t;
  for (; --r >= 0; )
    if ((t = this[r] - e[r]) != 0)
      return t;
  return 0;
}
function Pf(e) {
  var t = 1, r;
  return (r = e >>> 16) != 0 && (e = r, t += 16), (r = e >> 8) != 0 && (e = r, t += 8), (r = e >> 4) != 0 && (e = r, t += 4), (r = e >> 2) != 0 && (e = r, t += 2), (r = e >> 1) != 0 && (e = r, t += 1), t;
}
function x6() {
  return this.t <= 0 ? 0 : this.DB * (this.t - 1) + Pf(this[this.t - 1] ^ this.s & this.DM);
}
function B6() {
  return this.bitLength() >> 3;
}
function k6(e, t) {
  var r;
  for (r = this.t - 1; r >= 0; --r)
    t[r + e] = this[r];
  for (r = e - 1; r >= 0; --r)
    t[r] = 0;
  t.t = this.t + e, t.s = this.s;
}
function R6(e, t) {
  for (var r = e; r < this.t; ++r)
    t[r - e] = this[r];
  t.t = Math.max(this.t - e, 0), t.s = this.s;
}
function N6(e, t) {
  var r = this, n = e % r.DB, i = r.DB - n, o = (1 << i) - 1, s = Math.floor(e / r.DB), a = r.s << n & r.DM, f;
  for (f = r.t - 1; f >= 0; --f)
    t[f + s + 1] = r[f] >> i | a, a = (r[f] & o) << n;
  for (f = s - 1; f >= 0; --f)
    t[f] = 0;
  t[s] = a, t.t = r.t + s + 1, t.s = r.s, t.clamp();
}
function U6(e, t) {
  var r = this;
  t.s = r.s;
  var n = Math.floor(e / r.DB);
  if (n >= r.t) {
    t.t = 0;
    return;
  }
  var i = e % r.DB, o = r.DB - i, s = (1 << i) - 1;
  t[0] = r[n] >> i;
  for (var a = n + 1; a < r.t; ++a)
    t[a - n - 1] |= (r[a] & s) << o, t[a - n] = r[a] >> i;
  i > 0 && (t[r.t - n - 1] |= (r.s & s) << o), t.t = r.t - n, t.clamp();
}
function C6(e, t) {
  for (var r = this, n = 0, i = 0, o = Math.min(e.t, r.t); n < o; )
    i += r[n] - e[n], t[n++] = i & r.DM, i >>= r.DB;
  if (e.t < r.t) {
    for (i -= e.s; n < r.t; )
      i += r[n], t[n++] = i & r.DM, i >>= r.DB;
    i += r.s;
  } else {
    for (i += r.s; n < e.t; )
      i -= e[n], t[n++] = i & r.DM, i >>= r.DB;
    i -= e.s;
  }
  t.s = i < 0 ? -1 : 0, i < -1 ? t[n++] = r.DV + i : i > 0 && (t[n++] = i), t.t = n, t.clamp();
}
function $6(e, t) {
  var r = this.abs(), n = e.abs(), i = r.t;
  for (t.t = i + n.t; --i >= 0; )
    t[i] = 0;
  for (i = 0; i < n.t; ++i)
    t[i + r.t] = r.am(0, n[i], t, i, 0, r.t);
  t.s = 0, t.clamp(), this.s != e.s && ce.ZERO.subTo(t, t);
}
function H6(e) {
  for (var t = this.abs(), r = e.t = 2 * t.t; --r >= 0; )
    e[r] = 0;
  for (r = 0; r < t.t - 1; ++r) {
    var n = t.am(r, t[r], e, 2 * r, 0, 1);
    (e[r + t.t] += t.am(r + 1, 2 * t[r], e, 2 * r + 1, n, t.t - r - 1)) >= t.DV && (e[r + t.t] -= t.DV, e[r + t.t + 1] = 1);
  }
  e.t > 0 && (e[e.t - 1] += t.am(r, t[r], e, 2 * r, 0, 1)), e.s = 0, e.clamp();
}
function L6(e, t, r) {
  var n = this, i = e.abs();
  if (!(i.t <= 0)) {
    var o = n.abs();
    if (o.t < i.t) {
      t != null && t.fromInt(0), r != null && n.copyTo(r);
      return;
    }
    r == null && (r = new ce());
    var s = new ce(), a = n.s, f = e.s, l = n.DB - Pf(i[i.t - 1]);
    l > 0 ? (i.lShiftTo(l, s), o.lShiftTo(l, r)) : (i.copyTo(s), o.copyTo(r));
    var h = s.t, y = s[h - 1];
    if (y != 0) {
      var v = y * (1 << n.F1) + (h > 1 ? s[h - 2] >> n.F2 : 0), g = n.FV / v, m = (1 << n.F1) / v, E = 1 << n.F2, O = r.t, x = O - h, U = t ?? new ce();
      for (s.dlShiftTo(x, U), r.compareTo(U) >= 0 && (r[r.t++] = 1, r.subTo(U, r)), ce.ONE.dlShiftTo(h, U), U.subTo(s, s); s.t < h; )
        s[s.t++] = 0;
      for (; --x >= 0; ) {
        var H = r[--O] == y ? n.DM : Math.floor(r[O] * g + (r[O - 1] + E) * m);
        if ((r[O] += s.am(0, H, r, x, 0, h)) < H)
          for (s.dlShiftTo(x, U), r.subTo(U, r); r[O] < --H; )
            r.subTo(U, r);
      }
      t != null && (r.drShiftTo(h, t), a != f && ce.ZERO.subTo(t, t)), r.t = h, r.clamp(), l > 0 && r.rShiftTo(l, r), a < 0 && ce.ZERO.subTo(r, r);
    }
  }
}
function D6(e) {
  var t = new ce();
  return this.abs().divRemTo(e, null, t), this.s < 0 && t.compareTo(ce.ZERO) > 0 && e.subTo(t, t), t;
}
function bi(e) {
  this.m = e;
}
function M6(e) {
  return e.s < 0 || e.compareTo(this.m) >= 0 ? e.mod(this.m) : e;
}
function F6(e) {
  return e;
}
function j6(e) {
  e.divRemTo(this.m, null, e);
}
function K6(e, t, r) {
  e.multiplyTo(t, r), this.reduce(r);
}
function q6(e, t) {
  e.squareTo(t), this.reduce(t);
}
bi.prototype.convert = M6;
bi.prototype.revert = F6;
bi.prototype.reduce = j6;
bi.prototype.mulTo = K6;
bi.prototype.sqrTo = q6;
function G6() {
  if (this.t < 1)
    return 0;
  var e = this[0];
  if (!(e & 1))
    return 0;
  var t = e & 3;
  return t = t * (2 - (e & 15) * t) & 15, t = t * (2 - (e & 255) * t) & 255, t = t * (2 - ((e & 65535) * t & 65535)) & 65535, t = t * (2 - e * t % this.DV) % this.DV, t > 0 ? this.DV - t : -t;
}
function vi(e) {
  this.m = e, this.mp = e.invDigit(), this.mpl = this.mp & 32767, this.mph = this.mp >> 15, this.um = (1 << e.DB - 15) - 1, this.mt2 = 2 * e.t;
}
function V6(e) {
  var t = new ce();
  return e.abs().dlShiftTo(this.m.t, t), t.divRemTo(this.m, null, t), e.s < 0 && t.compareTo(ce.ZERO) > 0 && this.m.subTo(t, t), t;
}
function W6(e) {
  var t = new ce();
  return e.copyTo(t), this.reduce(t), t;
}
function z6(e) {
  for (; e.t <= this.mt2; )
    e[e.t++] = 0;
  for (var t = 0; t < this.m.t; ++t) {
    var r = e[t] & 32767, n = r * this.mpl + ((r * this.mph + (e[t] >> 15) * this.mpl & this.um) << 15) & e.DM;
    for (r = t + this.m.t, e[r] += this.m.am(0, n, e, t, 0, this.m.t); e[r] >= e.DV; )
      e[r] -= e.DV, e[++r]++;
  }
  e.clamp(), e.drShiftTo(this.m.t, e), e.compareTo(this.m) >= 0 && e.subTo(this.m, e);
}
function X6(e, t) {
  e.squareTo(t), this.reduce(t);
}
function Y6(e, t, r) {
  e.multiplyTo(t, r), this.reduce(r);
}
vi.prototype.convert = V6;
vi.prototype.revert = W6;
vi.prototype.reduce = z6;
vi.prototype.mulTo = Y6;
vi.prototype.sqrTo = X6;
function Z6() {
  return (this.t > 0 ? this[0] & 1 : this.s) == 0;
}
function J6(e, t) {
  if (e > 4294967295 || e < 1)
    return ce.ONE;
  var r = new ce(), n = new ce(), i = t.convert(this), o = Pf(e) - 1;
  for (i.copyTo(r); --o >= 0; )
    if (t.sqrTo(r, n), (e & 1 << o) > 0)
      t.mulTo(n, i, r);
    else {
      var s = r;
      r = n, n = s;
    }
  return t.revert(r);
}
function Q6(e, t) {
  var r;
  return e < 256 || t.isEven() ? r = new bi(t) : r = new vi(t), this.exp(e, r);
}
fe.copyTo = E6;
fe.fromInt = _6;
fe.fromString = S6;
fe.clamp = O6;
fe.dlShiftTo = k6;
fe.drShiftTo = R6;
fe.lShiftTo = N6;
fe.rShiftTo = U6;
fe.subTo = C6;
fe.multiplyTo = $6;
fe.squareTo = H6;
fe.divRemTo = L6;
fe.invDigit = G6;
fe.isEven = Z6;
fe.exp = J6;
fe.toString = A6;
fe.negate = T6;
fe.abs = I6;
fe.compareTo = P6;
fe.bitLength = x6;
fe.byteLength = B6;
fe.mod = D6;
fe.modPowInt = Q6;
function e5() {
  var e = new ce();
  return this.copyTo(e), e;
}
function t5() {
  if (this.s < 0) {
    if (this.t == 1)
      return this[0] - this.DV;
    if (this.t == 0)
      return -1;
  } else {
    if (this.t == 1)
      return this[0];
    if (this.t == 0)
      return 0;
  }
  return (this[1] & (1 << 32 - this.DB) - 1) << this.DB | this[0];
}
function r5() {
  return this.t == 0 ? this.s : this[0] << 24 >> 24;
}
function n5() {
  return this.t == 0 ? this.s : this[0] << 16 >> 16;
}
function i5(e) {
  return Math.floor(Math.LN2 * this.DB / Math.log(e));
}
function o5() {
  return this.s < 0 ? -1 : this.t <= 0 || this.t == 1 && this[0] <= 0 ? 0 : 1;
}
function s5(e) {
  if (e == null && (e = 10), this.signum() == 0 || e < 2 || e > 36)
    return "0";
  var t = this.chunkSize(e), r = Math.pow(e, t), n = Dr(r), i = new ce(), o = new ce(), s = "";
  for (this.divRemTo(n, i, o); i.signum() > 0; )
    s = (r + o.intValue()).toString(e).substr(1) + s, i.divRemTo(n, i, o);
  return o.intValue().toString(e) + s;
}
function a5(e, t) {
  var r = this;
  r.fromInt(0), t == null && (t = 10);
  for (var n = r.chunkSize(t), i = Math.pow(t, n), o = !1, s = 0, a = 0, f = 0; f < e.length; ++f) {
    var l = q1(e, f);
    if (l < 0) {
      e.charAt(f) == "-" && r.signum() == 0 && (o = !0);
      continue;
    }
    a = t * a + l, ++s >= n && (r.dMultiply(i), r.dAddOffset(a, 0), s = 0, a = 0);
  }
  s > 0 && (r.dMultiply(Math.pow(t, s)), r.dAddOffset(a, 0)), o && ce.ZERO.subTo(r, r);
}
function f5(e, t, r) {
  var n = this;
  if (typeof t == "number")
    if (e < 2)
      n.fromInt(1);
    else
      for (n.fromNumber(e, r), n.testBit(e - 1) || n.bitwiseTo(ce.ONE.shiftLeft(e - 1), kh, n), n.isEven() && n.dAddOffset(1, 0); !n.isProbablePrime(t); )
        n.dAddOffset(2, 0), n.bitLength() > e && n.subTo(ce.ONE.shiftLeft(e - 1), n);
  else {
    var i = new Array(), o = e & 7;
    i.length = (e >> 3) + 1, t.nextBytes(i), o > 0 ? i[0] &= (1 << o) - 1 : i[0] = 0, n.fromString(i, 256);
  }
}
function c5() {
  var e = this, t = e.t, r = new Array();
  r[0] = e.s;
  var n = e.DB - t * e.DB % 8, i, o = 0;
  if (t-- > 0)
    for (n < e.DB && (i = e[t] >> n) != (e.s & e.DM) >> n && (r[o++] = i | e.s << e.DB - n); t >= 0; )
      n < 8 ? (i = (e[t] & (1 << n) - 1) << 8 - n, i |= e[--t] >> (n += e.DB - 8)) : (i = e[t] >> (n -= 8) & 255, n <= 0 && (n += e.DB, --t)), i & 128 && (i |= -256), o === 0 && (e.s & 128) != (i & 128) && ++o, (o > 0 || i != e.s) && (r[o++] = i);
  return r;
}
function u5(e) {
  return this.compareTo(e) == 0;
}
function l5(e) {
  return this.compareTo(e) < 0 ? this : e;
}
function h5(e) {
  return this.compareTo(e) > 0 ? this : e;
}
function p5(e, t, r) {
  var n = this, i, o, s = Math.min(e.t, n.t);
  for (i = 0; i < s; ++i)
    r[i] = t(n[i], e[i]);
  if (e.t < n.t) {
    for (o = e.s & n.DM, i = s; i < n.t; ++i)
      r[i] = t(n[i], o);
    r.t = n.t;
  } else {
    for (o = n.s & n.DM, i = s; i < e.t; ++i)
      r[i] = t(o, e[i]);
    r.t = e.t;
  }
  r.s = t(n.s, e.s), r.clamp();
}
function d5(e, t) {
  return e & t;
}
function y5(e) {
  var t = new ce();
  return this.bitwiseTo(e, d5, t), t;
}
function kh(e, t) {
  return e | t;
}
function g5(e) {
  var t = new ce();
  return this.bitwiseTo(e, kh, t), t;
}
function G1(e, t) {
  return e ^ t;
}
function b5(e) {
  var t = new ce();
  return this.bitwiseTo(e, G1, t), t;
}
function V1(e, t) {
  return e & ~t;
}
function v5(e) {
  var t = new ce();
  return this.bitwiseTo(e, V1, t), t;
}
function w5() {
  for (var e = new ce(), t = 0; t < this.t; ++t)
    e[t] = this.DM & ~this[t];
  return e.t = this.t, e.s = ~this.s, e;
}
function m5(e) {
  var t = new ce();
  return e < 0 ? this.rShiftTo(-e, t) : this.lShiftTo(e, t), t;
}
function E5(e) {
  var t = new ce();
  return e < 0 ? this.lShiftTo(-e, t) : this.rShiftTo(e, t), t;
}
function _5(e) {
  if (e == 0)
    return -1;
  var t = 0;
  return e & 65535 || (e >>= 16, t += 16), e & 255 || (e >>= 8, t += 8), e & 15 || (e >>= 4, t += 4), e & 3 || (e >>= 2, t += 2), e & 1 || ++t, t;
}
function S5() {
  for (var e = 0; e < this.t; ++e)
    if (this[e] != 0)
      return e * this.DB + _5(this[e]);
  return this.s < 0 ? this.t * this.DB : -1;
}
function O5(e) {
  for (var t = 0; e != 0; )
    e &= e - 1, ++t;
  return t;
}
function A5() {
  for (var e = 0, t = this.s & this.DM, r = 0; r < this.t; ++r)
    e += O5(this[r] ^ t);
  return e;
}
function T5(e) {
  var t = Math.floor(e / this.DB);
  return t >= this.t ? this.s != 0 : (this[t] & 1 << e % this.DB) != 0;
}
function I5(e, t) {
  var r = ce.ONE.shiftLeft(e);
  return this.bitwiseTo(r, t, r), r;
}
function P5(e) {
  return this.changeBit(e, kh);
}
function x5(e) {
  return this.changeBit(e, V1);
}
function B5(e) {
  return this.changeBit(e, G1);
}
function k5(e, t) {
  for (var r = this, n = 0, i = 0, o = Math.min(e.t, r.t); n < o; )
    i += r[n] + e[n], t[n++] = i & r.DM, i >>= r.DB;
  if (e.t < r.t) {
    for (i += e.s; n < r.t; )
      i += r[n], t[n++] = i & r.DM, i >>= r.DB;
    i += r.s;
  } else {
    for (i += r.s; n < e.t; )
      i += e[n], t[n++] = i & r.DM, i >>= r.DB;
    i += e.s;
  }
  t.s = i < 0 ? -1 : 0, i > 0 ? t[n++] = i : i < -1 && (t[n++] = r.DV + i), t.t = n, t.clamp();
}
function R5(e) {
  var t = new ce();
  return this.addTo(e, t), t;
}
function N5(e) {
  var t = new ce();
  return this.subTo(e, t), t;
}
function U5(e) {
  var t = new ce();
  return this.multiplyTo(e, t), t;
}
function C5() {
  var e = new ce();
  return this.squareTo(e), e;
}
function $5(e) {
  var t = new ce();
  return this.divRemTo(e, t, null), t;
}
function H5(e) {
  var t = new ce();
  return this.divRemTo(e, null, t), t;
}
function L5(e) {
  var t = new ce(), r = new ce();
  return this.divRemTo(e, t, r), new Array(t, r);
}
function D5(e) {
  this[this.t] = this.am(0, e - 1, this, 0, 0, this.t), ++this.t, this.clamp();
}
function M5(e, t) {
  if (e != 0) {
    for (; this.t <= t; )
      this[this.t++] = 0;
    for (this[t] += e; this[t] >= this.DV; )
      this[t] -= this.DV, ++t >= this.t && (this[this.t++] = 0), ++this[t];
  }
}
function ps() {
}
function W1(e) {
  return e;
}
function F5(e, t, r) {
  e.multiplyTo(t, r);
}
function j5(e, t) {
  e.squareTo(t);
}
ps.prototype.convert = W1;
ps.prototype.revert = W1;
ps.prototype.mulTo = F5;
ps.prototype.sqrTo = j5;
function K5(e) {
  return this.exp(e, new ps());
}
function q5(e, t, r) {
  var n = Math.min(this.t + e.t, t);
  for (r.s = 0, r.t = n; n > 0; )
    r[--n] = 0;
  var i;
  for (i = r.t - this.t; n < i; ++n)
    r[n + this.t] = this.am(0, e[n], r, n, 0, this.t);
  for (i = Math.min(e.t, t); n < i; ++n)
    this.am(0, e[n], r, n, 0, t - n);
  r.clamp();
}
function G5(e, t, r) {
  --t;
  var n = r.t = this.t + e.t - t;
  for (r.s = 0; --n >= 0; )
    r[n] = 0;
  for (n = Math.max(t - this.t, 0); n < e.t; ++n)
    r[this.t + n - t] = this.am(t - n, e[n], r, 0, 0, this.t + n - t);
  r.clamp(), r.drShiftTo(1, r);
}
function uo(e) {
  this.r2 = new ce(), this.q3 = new ce(), ce.ONE.dlShiftTo(2 * e.t, this.r2), this.mu = this.r2.divide(e), this.m = e;
}
function V5(e) {
  if (e.s < 0 || e.t > 2 * this.m.t)
    return e.mod(this.m);
  if (e.compareTo(this.m) < 0)
    return e;
  var t = new ce();
  return e.copyTo(t), this.reduce(t), t;
}
function W5(e) {
  return e;
}
function z5(e) {
  var t = this;
  for (e.drShiftTo(t.m.t - 1, t.r2), e.t > t.m.t + 1 && (e.t = t.m.t + 1, e.clamp()), t.mu.multiplyUpperTo(t.r2, t.m.t + 1, t.q3), t.m.multiplyLowerTo(t.q3, t.m.t + 1, t.r2); e.compareTo(t.r2) < 0; )
    e.dAddOffset(1, t.m.t + 1);
  for (e.subTo(t.r2, e); e.compareTo(t.m) >= 0; )
    e.subTo(t.m, e);
}
function X5(e, t) {
  e.squareTo(t), this.reduce(t);
}
function Y5(e, t, r) {
  e.multiplyTo(t, r), this.reduce(r);
}
uo.prototype.convert = V5;
uo.prototype.revert = W5;
uo.prototype.reduce = z5;
uo.prototype.mulTo = Y5;
uo.prototype.sqrTo = X5;
function Z5(e, t) {
  var r = e.bitLength(), n, i = Dr(1), o;
  if (r <= 0)
    return i;
  r < 18 ? n = 1 : r < 48 ? n = 3 : r < 144 ? n = 4 : r < 768 ? n = 5 : n = 6, r < 8 ? o = new bi(t) : t.isEven() ? o = new uo(t) : o = new vi(t);
  var s = new Array(), a = 3, f = n - 1, l = (1 << n) - 1;
  if (s[1] = o.convert(this), n > 1) {
    var h = new ce();
    for (o.sqrTo(s[1], h); a <= l; )
      s[a] = new ce(), o.mulTo(h, s[a - 2], s[a]), a += 2;
  }
  var y = e.t - 1, v, g = !0, m = new ce(), E;
  for (r = Pf(e[y]) - 1; y >= 0; ) {
    for (r >= f ? v = e[y] >> r - f & l : (v = (e[y] & (1 << r + 1) - 1) << f - r, y > 0 && (v |= e[y - 1] >> this.DB + r - f)), a = n; !(v & 1); )
      v >>= 1, --a;
    if ((r -= a) < 0 && (r += this.DB, --y), g)
      s[v].copyTo(i), g = !1;
    else {
      for (; a > 1; )
        o.sqrTo(i, m), o.sqrTo(m, i), a -= 2;
      a > 0 ? o.sqrTo(i, m) : (E = i, i = m, m = E), o.mulTo(m, s[v], i);
    }
    for (; y >= 0 && !(e[y] & 1 << r); )
      o.sqrTo(i, m), E = i, i = m, m = E, --r < 0 && (r = this.DB - 1, --y);
  }
  return o.revert(i);
}
function J5(e) {
  var t = this.s < 0 ? this.negate() : this.clone(), r = e.s < 0 ? e.negate() : e.clone();
  if (t.compareTo(r) < 0) {
    var n = t;
    t = r, r = n;
  }
  var i = t.getLowestSetBit(), o = r.getLowestSetBit();
  if (o < 0)
    return t;
  for (i < o && (o = i), o > 0 && (t.rShiftTo(o, t), r.rShiftTo(o, r)); t.signum() > 0; )
    (i = t.getLowestSetBit()) > 0 && t.rShiftTo(i, t), (i = r.getLowestSetBit()) > 0 && r.rShiftTo(i, r), t.compareTo(r) >= 0 ? (t.subTo(r, t), t.rShiftTo(1, t)) : (r.subTo(t, r), r.rShiftTo(1, r));
  return o > 0 && r.lShiftTo(o, r), r;
}
function Q5(e) {
  if (e <= 0)
    return 0;
  var t = this.DV % e, r = this.s < 0 ? e - 1 : 0;
  if (this.t > 0)
    if (t == 0)
      r = this[0] % e;
    else
      for (var n = this.t - 1; n >= 0; --n)
        r = (t * r + this[n]) % e;
  return r;
}
function ek(e) {
  var t = e.isEven();
  if (this.signum() === 0)
    throw new Error("division by zero");
  if (this.isEven() && t || e.signum() == 0)
    return ce.ZERO;
  for (var r = e.clone(), n = this.clone(), i = Dr(1), o = Dr(0), s = Dr(0), a = Dr(1); r.signum() != 0; ) {
    for (; r.isEven(); )
      r.rShiftTo(1, r), t ? ((!i.isEven() || !o.isEven()) && (i.addTo(this, i), o.subTo(e, o)), i.rShiftTo(1, i)) : o.isEven() || o.subTo(e, o), o.rShiftTo(1, o);
    for (; n.isEven(); )
      n.rShiftTo(1, n), t ? ((!s.isEven() || !a.isEven()) && (s.addTo(this, s), a.subTo(e, a)), s.rShiftTo(1, s)) : a.isEven() || a.subTo(e, a), a.rShiftTo(1, a);
    r.compareTo(n) >= 0 ? (r.subTo(n, r), t && i.subTo(s, i), o.subTo(a, o)) : (n.subTo(r, n), t && s.subTo(i, s), a.subTo(o, a));
  }
  if (n.compareTo(ce.ONE) != 0)
    return ce.ZERO;
  for (; a.compareTo(e) >= 0; )
    a.subTo(e, a);
  for (; a.signum() < 0; )
    a.addTo(e, a);
  return a;
}
var kt = [
  2,
  3,
  5,
  7,
  11,
  13,
  17,
  19,
  23,
  29,
  31,
  37,
  41,
  43,
  47,
  53,
  59,
  61,
  67,
  71,
  73,
  79,
  83,
  89,
  97,
  101,
  103,
  107,
  109,
  113,
  127,
  131,
  137,
  139,
  149,
  151,
  157,
  163,
  167,
  173,
  179,
  181,
  191,
  193,
  197,
  199,
  211,
  223,
  227,
  229,
  233,
  239,
  241,
  251,
  257,
  263,
  269,
  271,
  277,
  281,
  283,
  293,
  307,
  311,
  313,
  317,
  331,
  337,
  347,
  349,
  353,
  359,
  367,
  373,
  379,
  383,
  389,
  397,
  401,
  409,
  419,
  421,
  431,
  433,
  439,
  443,
  449,
  457,
  461,
  463,
  467,
  479,
  487,
  491,
  499,
  503,
  509,
  521,
  523,
  541,
  547,
  557,
  563,
  569,
  571,
  577,
  587,
  593,
  599,
  601,
  607,
  613,
  617,
  619,
  631,
  641,
  643,
  647,
  653,
  659,
  661,
  673,
  677,
  683,
  691,
  701,
  709,
  719,
  727,
  733,
  739,
  743,
  751,
  757,
  761,
  769,
  773,
  787,
  797,
  809,
  811,
  821,
  823,
  827,
  829,
  839,
  853,
  857,
  859,
  863,
  877,
  881,
  883,
  887,
  907,
  911,
  919,
  929,
  937,
  941,
  947,
  953,
  967,
  971,
  977,
  983,
  991,
  997
], tk = (1 << 26) / kt[kt.length - 1];
function rk(e) {
  var t, r = this.abs();
  if (r.t == 1 && r[0] <= kt[kt.length - 1]) {
    for (t = 0; t < kt.length; ++t)
      if (r[0] == kt[t])
        return !0;
    return !1;
  }
  if (r.isEven())
    return !1;
  for (t = 1; t < kt.length; ) {
    for (var n = kt[t], i = t + 1; i < kt.length && n < tk; )
      n *= kt[i++];
    for (n = r.modInt(n); t < i; )
      if (n % kt[t++] == 0)
        return !1;
  }
  return r.millerRabin(e);
}
function nk(e) {
  var t = this.subtract(ce.ONE), r = t.getLowestSetBit();
  if (r <= 0)
    return !1;
  var n = t.shiftRight(r);
  e = e + 1 >> 1, e > kt.length && (e = kt.length);
  for (var i = new ce(null), o, s = [], a = 0; a < e; ++a) {
    for (; o = kt[Math.floor(Math.random() * kt.length)], s.indexOf(o) != -1; )
      ;
    s.push(o), i.fromInt(o);
    var f = i.modPow(n, this);
    if (f.compareTo(ce.ONE) != 0 && f.compareTo(t) != 0) {
      for (var o = 1; o++ < r && f.compareTo(t) != 0; )
        if (f = f.modPowInt(2, this), f.compareTo(ce.ONE) == 0)
          return !1;
      if (f.compareTo(t) != 0)
        return !1;
    }
  }
  return !0;
}
fe.chunkSize = i5;
fe.toRadix = s5;
fe.fromRadix = a5;
fe.fromNumber = f5;
fe.bitwiseTo = p5;
fe.changeBit = I5;
fe.addTo = k5;
fe.dMultiply = D5;
fe.dAddOffset = M5;
fe.multiplyLowerTo = q5;
fe.multiplyUpperTo = G5;
fe.modInt = Q5;
fe.millerRabin = nk;
fe.clone = e5;
fe.intValue = t5;
fe.byteValue = r5;
fe.shortValue = n5;
fe.signum = o5;
fe.toByteArray = c5;
fe.equals = u5;
fe.min = l5;
fe.max = h5;
fe.and = y5;
fe.or = g5;
fe.xor = b5;
fe.andNot = v5;
fe.not = w5;
fe.shiftLeft = m5;
fe.shiftRight = E5;
fe.getLowestSetBit = S5;
fe.bitCount = A5;
fe.testBit = T5;
fe.setBit = P5;
fe.clearBit = x5;
fe.flipBit = B5;
fe.add = R5;
fe.subtract = N5;
fe.multiply = U5;
fe.divide = $5;
fe.remainder = H5;
fe.divideAndRemainder = L5;
fe.modPow = Z5;
fe.modInverse = ek;
fe.pow = K5;
fe.gcd = J5;
fe.isProbablePrime = rk;
fe.square = C5;
ce.ZERO = Dr(0);
ce.ONE = Dr(1);
ce.valueOf = Dr;
var z1 = ce, Hc = { exports: {} }, Lc = {}, Fd;
function X1() {
  if (Fd)
    return Lc;
  Fd = 1;
  function e(k) {
    "@babel/helpers - typeof";
    return e = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(_) {
      return typeof _;
    } : function(_) {
      return _ && typeof Symbol == "function" && _.constructor === Symbol && _ !== Symbol.prototype ? "symbol" : typeof _;
    }, e(k);
  }
  function t(k, _) {
    for (var L = 0; L < _.length; L++) {
      var j = _[L];
      j.enumerable = j.enumerable || !1, j.configurable = !0, "value" in j && (j.writable = !0), Object.defineProperty(k, n(j.key), j);
    }
  }
  function r(k, _, L) {
    return _ && t(k.prototype, _), L && t(k, L), Object.defineProperty(k, "prototype", { writable: !1 }), k;
  }
  function n(k) {
    var _ = i(k, "string");
    return e(_) === "symbol" ? _ : String(_);
  }
  function i(k, _) {
    if (e(k) !== "object" || k === null)
      return k;
    var L = k[Symbol.toPrimitive];
    if (L !== void 0) {
      var j = L.call(k, _ || "default");
      if (e(j) !== "object")
        return j;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (_ === "string" ? String : Number)(k);
  }
  function o(k, _) {
    if (!(k instanceof _))
      throw new TypeError("Cannot call a class as a function");
  }
  function s(k, _) {
    if (typeof _ != "function" && _ !== null)
      throw new TypeError("Super expression must either be null or a function");
    k.prototype = Object.create(_ && _.prototype, { constructor: { value: k, writable: !0, configurable: !0 } }), Object.defineProperty(k, "prototype", { writable: !1 }), _ && a(k, _);
  }
  function a(k, _) {
    return a = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(j, F) {
      return j.__proto__ = F, j;
    }, a(k, _);
  }
  function f(k) {
    var _ = y();
    return function() {
      var j = v(k), F;
      if (_) {
        var W = v(this).constructor;
        F = Reflect.construct(j, arguments, W);
      } else
        F = j.apply(this, arguments);
      return l(this, F);
    };
  }
  function l(k, _) {
    if (_ && (e(_) === "object" || typeof _ == "function"))
      return _;
    if (_ !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return h(k);
  }
  function h(k) {
    if (k === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return k;
  }
  function y() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function v(k) {
    return v = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(L) {
      return L.__proto__ || Object.getPrototypeOf(L);
    }, v(k);
  }
  var g = {}, m, E;
  function O(k, _, L) {
    L || (L = Error);
    function j(W, te, re) {
      return typeof _ == "string" ? _ : _(W, te, re);
    }
    var F = /* @__PURE__ */ function(W) {
      s(re, W);
      var te = f(re);
      function re(ae, de, J) {
        var ne;
        return o(this, re), ne = te.call(this, j(ae, de, J)), ne.code = k, ne;
      }
      return r(re);
    }(L);
    g[k] = F;
  }
  function x(k, _) {
    if (Array.isArray(k)) {
      var L = k.length;
      return k = k.map(function(j) {
        return String(j);
      }), L > 2 ? "one of ".concat(_, " ").concat(k.slice(0, L - 1).join(", "), ", or ") + k[L - 1] : L === 2 ? "one of ".concat(_, " ").concat(k[0], " or ").concat(k[1]) : "of ".concat(_, " ").concat(k[0]);
    } else
      return "of ".concat(_, " ").concat(String(k));
  }
  function U(k, _, L) {
    return k.substr(!L || L < 0 ? 0 : +L, _.length) === _;
  }
  function H(k, _, L) {
    return (L === void 0 || L > k.length) && (L = k.length), k.substring(L - _.length, L) === _;
  }
  function M(k, _, L) {
    return typeof L != "number" && (L = 0), L + _.length > k.length ? !1 : k.indexOf(_, L) !== -1;
  }
  return O("ERR_AMBIGUOUS_ARGUMENT", 'The "%s" argument is ambiguous. %s', TypeError), O("ERR_INVALID_ARG_TYPE", function(k, _, L) {
    m === void 0 && (m = Yo()), m(typeof k == "string", "'name' must be a string");
    var j;
    typeof _ == "string" && U(_, "not ") ? (j = "must not be", _ = _.replace(/^not /, "")) : j = "must be";
    var F;
    if (H(k, " argument"))
      F = "The ".concat(k, " ").concat(j, " ").concat(x(_, "type"));
    else {
      var W = M(k, ".") ? "property" : "argument";
      F = 'The "'.concat(k, '" ').concat(W, " ").concat(j, " ").concat(x(_, "type"));
    }
    return F += ". Received type ".concat(e(L)), F;
  }, TypeError), O("ERR_INVALID_ARG_VALUE", function(k, _) {
    var L = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : "is invalid";
    E === void 0 && (E = En);
    var j = E.inspect(_);
    return j.length > 128 && (j = "".concat(j.slice(0, 128), "...")), "The argument '".concat(k, "' ").concat(L, ". Received ").concat(j);
  }, TypeError), O("ERR_INVALID_RETURN_VALUE", function(k, _, L) {
    var j;
    return L && L.constructor && L.constructor.name ? j = "instance of ".concat(L.constructor.name) : j = "type ".concat(e(L)), "Expected ".concat(k, ' to be returned from the "').concat(_, '"') + " function but got ".concat(j, ".");
  }, TypeError), O("ERR_MISSING_ARGS", function() {
    for (var k = arguments.length, _ = new Array(k), L = 0; L < k; L++)
      _[L] = arguments[L];
    m === void 0 && (m = Yo()), m(_.length > 0, "At least one arg needs to be specified");
    var j = "The ", F = _.length;
    switch (_ = _.map(function(W) {
      return '"'.concat(W, '"');
    }), F) {
      case 1:
        j += "".concat(_[0], " argument");
        break;
      case 2:
        j += "".concat(_[0], " and ").concat(_[1], " arguments");
        break;
      default:
        j += _.slice(0, F - 1).join(", "), j += ", and ".concat(_[F - 1], " arguments");
        break;
    }
    return "".concat(j, " must be specified");
  }, TypeError), Lc.codes = g, Lc;
}
var Dc, jd;
function ik() {
  if (jd)
    return Dc;
  jd = 1;
  function e(z, Y) {
    var ee = Object.keys(z);
    if (Object.getOwnPropertySymbols) {
      var $ = Object.getOwnPropertySymbols(z);
      Y && ($ = $.filter(function(q) {
        return Object.getOwnPropertyDescriptor(z, q).enumerable;
      })), ee.push.apply(ee, $);
    }
    return ee;
  }
  function t(z) {
    for (var Y = 1; Y < arguments.length; Y++) {
      var ee = arguments[Y] != null ? arguments[Y] : {};
      Y % 2 ? e(Object(ee), !0).forEach(function($) {
        r(z, $, ee[$]);
      }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(z, Object.getOwnPropertyDescriptors(ee)) : e(Object(ee)).forEach(function($) {
        Object.defineProperty(z, $, Object.getOwnPropertyDescriptor(ee, $));
      });
    }
    return z;
  }
  function r(z, Y, ee) {
    return Y = s(Y), Y in z ? Object.defineProperty(z, Y, { value: ee, enumerable: !0, configurable: !0, writable: !0 }) : z[Y] = ee, z;
  }
  function n(z, Y) {
    if (!(z instanceof Y))
      throw new TypeError("Cannot call a class as a function");
  }
  function i(z, Y) {
    for (var ee = 0; ee < Y.length; ee++) {
      var $ = Y[ee];
      $.enumerable = $.enumerable || !1, $.configurable = !0, "value" in $ && ($.writable = !0), Object.defineProperty(z, s($.key), $);
    }
  }
  function o(z, Y, ee) {
    return Y && i(z.prototype, Y), ee && i(z, ee), Object.defineProperty(z, "prototype", { writable: !1 }), z;
  }
  function s(z) {
    var Y = a(z, "string");
    return U(Y) === "symbol" ? Y : String(Y);
  }
  function a(z, Y) {
    if (U(z) !== "object" || z === null)
      return z;
    var ee = z[Symbol.toPrimitive];
    if (ee !== void 0) {
      var $ = ee.call(z, Y || "default");
      if (U($) !== "object")
        return $;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (Y === "string" ? String : Number)(z);
  }
  function f(z, Y) {
    if (typeof Y != "function" && Y !== null)
      throw new TypeError("Super expression must either be null or a function");
    z.prototype = Object.create(Y && Y.prototype, { constructor: { value: z, writable: !0, configurable: !0 } }), Object.defineProperty(z, "prototype", { writable: !1 }), Y && O(z, Y);
  }
  function l(z) {
    var Y = m();
    return function() {
      var $ = x(z), q;
      if (Y) {
        var X = x(this).constructor;
        q = Reflect.construct($, arguments, X);
      } else
        q = $.apply(this, arguments);
      return h(this, q);
    };
  }
  function h(z, Y) {
    if (Y && (U(Y) === "object" || typeof Y == "function"))
      return Y;
    if (Y !== void 0)
      throw new TypeError("Derived constructors may only return object or undefined");
    return y(z);
  }
  function y(z) {
    if (z === void 0)
      throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
    return z;
  }
  function v(z) {
    var Y = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
    return v = function($) {
      if ($ === null || !E($))
        return $;
      if (typeof $ != "function")
        throw new TypeError("Super expression must either be null or a function");
      if (typeof Y < "u") {
        if (Y.has($))
          return Y.get($);
        Y.set($, q);
      }
      function q() {
        return g($, arguments, x(this).constructor);
      }
      return q.prototype = Object.create($.prototype, { constructor: { value: q, enumerable: !1, writable: !0, configurable: !0 } }), O(q, $);
    }, v(z);
  }
  function g(z, Y, ee) {
    return m() ? g = Reflect.construct.bind() : g = function(q, X, ie) {
      var D = [null];
      D.push.apply(D, X);
      var A = Function.bind.apply(q, D), P = new A();
      return ie && O(P, ie.prototype), P;
    }, g.apply(null, arguments);
  }
  function m() {
    if (typeof Reflect > "u" || !Reflect.construct || Reflect.construct.sham)
      return !1;
    if (typeof Proxy == "function")
      return !0;
    try {
      return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
      })), !0;
    } catch {
      return !1;
    }
  }
  function E(z) {
    return Function.toString.call(z).indexOf("[native code]") !== -1;
  }
  function O(z, Y) {
    return O = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function($, q) {
      return $.__proto__ = q, $;
    }, O(z, Y);
  }
  function x(z) {
    return x = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(ee) {
      return ee.__proto__ || Object.getPrototypeOf(ee);
    }, x(z);
  }
  function U(z) {
    "@babel/helpers - typeof";
    return U = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(Y) {
      return typeof Y;
    } : function(Y) {
      return Y && typeof Symbol == "function" && Y.constructor === Symbol && Y !== Symbol.prototype ? "symbol" : typeof Y;
    }, U(z);
  }
  var H = En, M = H.inspect, k = X1(), _ = k.codes.ERR_INVALID_ARG_TYPE;
  function L(z, Y, ee) {
    return (ee === void 0 || ee > z.length) && (ee = z.length), z.substring(ee - Y.length, ee) === Y;
  }
  function j(z, Y) {
    if (Y = Math.floor(Y), z.length == 0 || Y == 0)
      return "";
    var ee = z.length * Y;
    for (Y = Math.floor(Math.log(Y) / Math.log(2)); Y; )
      z += z, Y--;
    return z += z.substring(0, ee - z.length), z;
  }
  var F = "", W = "", te = "", re = "", ae = {
    deepStrictEqual: "Expected values to be strictly deep-equal:",
    strictEqual: "Expected values to be strictly equal:",
    strictEqualObject: 'Expected "actual" to be reference-equal to "expected":',
    deepEqual: "Expected values to be loosely deep-equal:",
    equal: "Expected values to be loosely equal:",
    notDeepStrictEqual: 'Expected "actual" not to be strictly deep-equal to:',
    notStrictEqual: 'Expected "actual" to be strictly unequal to:',
    notStrictEqualObject: 'Expected "actual" not to be reference-equal to "expected":',
    notDeepEqual: 'Expected "actual" not to be loosely deep-equal to:',
    notEqual: 'Expected "actual" to be loosely unequal to:',
    notIdentical: "Values identical but not reference-equal:"
  }, de = 10;
  function J(z) {
    var Y = Object.keys(z), ee = Object.create(Object.getPrototypeOf(z));
    return Y.forEach(function($) {
      ee[$] = z[$];
    }), Object.defineProperty(ee, "message", {
      value: z.message
    }), ee;
  }
  function ne(z) {
    return M(z, {
      compact: !1,
      customInspect: !1,
      depth: 1e3,
      maxArrayLength: 1 / 0,
      // Assert compares only enumerable properties (with a few exceptions).
      showHidden: !1,
      // Having a long line as error is better than wrapping the line for
      // comparison for now.
      // TODO(BridgeAR): `breakLength` should be limited as soon as soon as we
      // have meta information about the inspected properties (i.e., know where
      // in what line the property starts and ends).
      breakLength: 1 / 0,
      // Assert does not detect proxies currently.
      showProxy: !1,
      sorted: !0,
      // Inspect getters as we also check them when comparing entries.
      getters: !0
    });
  }
  function ue(z, Y, ee) {
    var $ = "", q = "", X = 0, ie = "", D = !1, A = ne(z), P = A.split(`
`), C = ne(Y).split(`
`), K = 0, S = "";
    if (ee === "strictEqual" && U(z) === "object" && U(Y) === "object" && z !== null && Y !== null && (ee = "strictEqualObject"), P.length === 1 && C.length === 1 && P[0] !== C[0]) {
      var T = P[0].length + C[0].length;
      if (T <= de) {
        if ((U(z) !== "object" || z === null) && (U(Y) !== "object" || Y === null) && (z !== 0 || Y !== 0))
          return "".concat(ae[ee], `

`) + "".concat(P[0], " !== ").concat(C[0], `
`);
      } else if (ee !== "strictEqualObject") {
        var V = N.process.stderr && N.process.stderr.isTTY ? N.process.stderr.columns : 80;
        if (T < V) {
          for (; P[0][K] === C[0][K]; )
            K++;
          K > 2 && (S = `
  `.concat(j(" ", K), "^"), K = 0);
        }
      }
    }
    for (var Q = P[P.length - 1], be = C[C.length - 1]; Q === be && (K++ < 2 ? ie = `
  `.concat(Q).concat(ie) : $ = Q, P.pop(), C.pop(), !(P.length === 0 || C.length === 0)); )
      Q = P[P.length - 1], be = C[C.length - 1];
    var ye = Math.max(P.length, C.length);
    if (ye === 0) {
      var Ee = A.split(`
`);
      if (Ee.length > 30)
        for (Ee[26] = "".concat(F, "...").concat(re); Ee.length > 27; )
          Ee.pop();
      return "".concat(ae.notIdentical, `

`).concat(Ee.join(`
`), `
`);
    }
    K > 3 && (ie = `
`.concat(F, "...").concat(re).concat(ie), D = !0), $ !== "" && (ie = `
  `.concat($).concat(ie), $ = "");
    var Ue = 0, Z = ae[ee] + `
`.concat(W, "+ actual").concat(re, " ").concat(te, "- expected").concat(re), Tt = " ".concat(F, "...").concat(re, " Lines skipped");
    for (K = 0; K < ye; K++) {
      var ze = K - X;
      if (P.length < K + 1)
        ze > 1 && K > 2 && (ze > 4 ? (q += `
`.concat(F, "...").concat(re), D = !0) : ze > 3 && (q += `
  `.concat(C[K - 2]), Ue++), q += `
  `.concat(C[K - 1]), Ue++), X = K, $ += `
`.concat(te, "-").concat(re, " ").concat(C[K]), Ue++;
      else if (C.length < K + 1)
        ze > 1 && K > 2 && (ze > 4 ? (q += `
`.concat(F, "...").concat(re), D = !0) : ze > 3 && (q += `
  `.concat(P[K - 2]), Ue++), q += `
  `.concat(P[K - 1]), Ue++), X = K, q += `
`.concat(W, "+").concat(re, " ").concat(P[K]), Ue++;
      else {
        var ge = C[K], je = P[K], d = je !== ge && (!L(je, ",") || je.slice(0, -1) !== ge);
        d && L(ge, ",") && ge.slice(0, -1) === je && (d = !1, je += ","), d ? (ze > 1 && K > 2 && (ze > 4 ? (q += `
`.concat(F, "...").concat(re), D = !0) : ze > 3 && (q += `
  `.concat(P[K - 2]), Ue++), q += `
  `.concat(P[K - 1]), Ue++), X = K, q += `
`.concat(W, "+").concat(re, " ").concat(je), $ += `
`.concat(te, "-").concat(re, " ").concat(ge), Ue += 2) : (q += $, $ = "", (ze === 1 || K === 0) && (q += `
  `.concat(je), Ue++));
      }
      if (Ue > 20 && K < ye - 2)
        return "".concat(Z).concat(Tt, `
`).concat(q, `
`).concat(F, "...").concat(re).concat($, `
`) + "".concat(F, "...").concat(re);
    }
    return "".concat(Z).concat(D ? Tt : "", `
`).concat(q).concat($).concat(ie).concat(S);
  }
  var pe = /* @__PURE__ */ function(z, Y) {
    f($, z);
    var ee = l($);
    function $(q) {
      var X;
      if (n(this, $), U(q) !== "object" || q === null)
        throw new _("options", "Object", q);
      var ie = q.message, D = q.operator, A = q.stackStartFn, P = q.actual, C = q.expected, K = Error.stackTraceLimit;
      if (Error.stackTraceLimit = 0, ie != null)
        X = ee.call(this, String(ie));
      else if (N.process.stderr && N.process.stderr.isTTY && (N.process.stderr && N.process.stderr.getColorDepth && N.process.stderr.getColorDepth() !== 1 ? (F = "\x1B[34m", W = "\x1B[32m", re = "\x1B[39m", te = "\x1B[31m") : (F = "", W = "", re = "", te = "")), U(P) === "object" && P !== null && U(C) === "object" && C !== null && "stack" in P && P instanceof Error && "stack" in C && C instanceof Error && (P = J(P), C = J(C)), D === "deepStrictEqual" || D === "strictEqual")
        X = ee.call(this, ue(P, C, D));
      else if (D === "notDeepStrictEqual" || D === "notStrictEqual") {
        var S = ae[D], T = ne(P).split(`
`);
        if (D === "notStrictEqual" && U(P) === "object" && P !== null && (S = ae.notStrictEqualObject), T.length > 30)
          for (T[26] = "".concat(F, "...").concat(re); T.length > 27; )
            T.pop();
        T.length === 1 ? X = ee.call(this, "".concat(S, " ").concat(T[0])) : X = ee.call(this, "".concat(S, `

`).concat(T.join(`
`), `
`));
      } else {
        var V = ne(P), Q = "", be = ae[D];
        D === "notDeepEqual" || D === "notEqual" ? (V = "".concat(ae[D], `

`).concat(V), V.length > 1024 && (V = "".concat(V.slice(0, 1021), "..."))) : (Q = "".concat(ne(C)), V.length > 512 && (V = "".concat(V.slice(0, 509), "...")), Q.length > 512 && (Q = "".concat(Q.slice(0, 509), "...")), D === "deepEqual" || D === "equal" ? V = "".concat(be, `

`).concat(V, `

should equal

`) : Q = " ".concat(D, " ").concat(Q)), X = ee.call(this, "".concat(V).concat(Q));
      }
      return Error.stackTraceLimit = K, X.generatedMessage = !ie, Object.defineProperty(y(X), "name", {
        value: "AssertionError [ERR_ASSERTION]",
        enumerable: !1,
        writable: !0,
        configurable: !0
      }), X.code = "ERR_ASSERTION", X.actual = P, X.expected = C, X.operator = D, Error.captureStackTrace && Error.captureStackTrace(y(X), A), X.stack, X.name = "AssertionError", h(X);
    }
    return o($, [{
      key: "toString",
      value: function() {
        return "".concat(this.name, " [").concat(this.code, "]: ").concat(this.message);
      }
    }, {
      key: Y,
      value: function(X, ie) {
        return M(this, t(t({}, ie), {}, {
          customInspect: !1,
          depth: 0
        }));
      }
    }]), $;
  }(/* @__PURE__ */ v(Error), M.custom);
  return Dc = pe, Dc;
}
var Kd = Object.prototype.toString, Y1 = function(t) {
  var r = Kd.call(t), n = r === "[object Arguments]";
  return n || (n = r !== "[object Array]" && t !== null && typeof t == "object" && typeof t.length == "number" && t.length >= 0 && Kd.call(t.callee) === "[object Function]"), n;
}, Mc, qd;
function ok() {
  if (qd)
    return Mc;
  qd = 1;
  var e;
  if (!Object.keys) {
    var t = Object.prototype.hasOwnProperty, r = Object.prototype.toString, n = Y1, i = Object.prototype.propertyIsEnumerable, o = !i.call({ toString: null }, "toString"), s = i.call(function() {
    }, "prototype"), a = [
      "toString",
      "toLocaleString",
      "valueOf",
      "hasOwnProperty",
      "isPrototypeOf",
      "propertyIsEnumerable",
      "constructor"
    ], f = function(v) {
      var g = v.constructor;
      return g && g.prototype === v;
    }, l = {
      $applicationCache: !0,
      $console: !0,
      $external: !0,
      $frame: !0,
      $frameElement: !0,
      $frames: !0,
      $innerHeight: !0,
      $innerWidth: !0,
      $onmozfullscreenchange: !0,
      $onmozfullscreenerror: !0,
      $outerHeight: !0,
      $outerWidth: !0,
      $pageXOffset: !0,
      $pageYOffset: !0,
      $parent: !0,
      $scrollLeft: !0,
      $scrollTop: !0,
      $scrollX: !0,
      $scrollY: !0,
      $self: !0,
      $webkitIndexedDB: !0,
      $webkitStorageInfo: !0,
      $window: !0
    }, h = function() {
      if (typeof window > "u")
        return !1;
      for (var v in window)
        try {
          if (!l["$" + v] && t.call(window, v) && window[v] !== null && typeof window[v] == "object")
            try {
              f(window[v]);
            } catch {
              return !0;
            }
        } catch {
          return !0;
        }
      return !1;
    }(), y = function(v) {
      if (typeof window > "u" || !h)
        return f(v);
      try {
        return f(v);
      } catch {
        return !1;
      }
    };
    e = function(g) {
      var m = g !== null && typeof g == "object", E = r.call(g) === "[object Function]", O = n(g), x = m && r.call(g) === "[object String]", U = [];
      if (!m && !E && !O)
        throw new TypeError("Object.keys called on a non-object");
      var H = s && E;
      if (x && g.length > 0 && !t.call(g, 0))
        for (var M = 0; M < g.length; ++M)
          U.push(String(M));
      if (O && g.length > 0)
        for (var k = 0; k < g.length; ++k)
          U.push(String(k));
      else
        for (var _ in g)
          !(H && _ === "prototype") && t.call(g, _) && U.push(String(_));
      if (o)
        for (var L = y(g), j = 0; j < a.length; ++j)
          !(L && a[j] === "constructor") && t.call(g, a[j]) && U.push(a[j]);
      return U;
    };
  }
  return Mc = e, Mc;
}
var sk = Array.prototype.slice, ak = Y1, Gd = Object.keys, fa = Gd ? function(t) {
  return Gd(t);
} : ok(), Vd = Object.keys;
fa.shim = function() {
  if (Object.keys) {
    var t = function() {
      var r = Object.keys(arguments);
      return r && r.length === arguments.length;
    }(1, 2);
    t || (Object.keys = function(n) {
      return ak(n) ? Vd(sk.call(n)) : Vd(n);
    });
  } else
    Object.keys = fa;
  return Object.keys || fa;
};
var Z1 = fa, fk = Z1, J1 = Ul(), Q1 = uf, Wd = Object, ck = Q1("Array.prototype.push"), zd = Q1("Object.prototype.propertyIsEnumerable"), uk = J1 ? Object.getOwnPropertySymbols : null, lk = function(t, r) {
  if (t == null)
    throw new TypeError("target must be an object");
  var n = Wd(t);
  if (arguments.length === 1)
    return n;
  for (var i = 1; i < arguments.length; ++i) {
    var o = Wd(arguments[i]), s = fk(o), a = J1 && (Object.getOwnPropertySymbols || uk);
    if (a)
      for (var f = a(o), l = 0; l < f.length; ++l) {
        var h = f[l];
        zd(o, h) && ck(s, h);
      }
    for (var y = 0; y < s.length; ++y) {
      var v = s[y];
      if (zd(o, v)) {
        var g = o[v];
        n[v] = g;
      }
    }
  }
  return n;
}, Fc = lk, hk = function() {
  if (!Object.assign)
    return !1;
  for (var e = "abcdefghijklmnopqrst", t = e.split(""), r = {}, n = 0; n < t.length; ++n)
    r[t[n]] = t[n];
  var i = Object.assign({}, r), o = "";
  for (var s in i)
    o += s;
  return e !== o;
}, pk = function() {
  if (!Object.assign || !Object.preventExtensions)
    return !1;
  var e = Object.preventExtensions({ 1: 2 });
  try {
    Object.assign(e, "xy");
  } catch {
    return e[1] === "y";
  }
  return !1;
}, dk = function() {
  return !Object.assign || hk() || pk() ? Fc : Object.assign;
}, Xd = function(e) {
  return e !== e;
}, ev = function(t, r) {
  return t === 0 && r === 0 ? 1 / t === 1 / r : !!(t === r || Xd(t) && Xd(r));
}, yk = ev, Rh = function() {
  return typeof Object.is == "function" ? Object.is : yk;
}, jc, Yd;
function tv() {
  if (Yd)
    return jc;
  Yd = 1;
  var e = ns, t = e("%Object.defineProperty%", !0), r = function() {
    if (t)
      try {
        return t({}, "a", { value: 1 }), !0;
      } catch {
        return !1;
      }
    return !1;
  };
  return r.hasArrayLengthDefineBug = function() {
    if (!r())
      return null;
    try {
      return t([], "length", { value: 1 }).length !== 1;
    } catch {
      return !0;
    }
  }, jc = r, jc;
}
var Kc, Zd;
function gk() {
  if (Zd)
    return Kc;
  Zd = 1;
  var e = tv()(), t = ns, r = e && t("%Object.defineProperty%", !0);
  if (r)
    try {
      r({}, "a", { value: 1 });
    } catch {
      r = !1;
    }
  var n = t("%SyntaxError%"), i = t("%TypeError%"), o = $g;
  return Kc = function(a, f, l) {
    if (!a || typeof a != "object" && typeof a != "function")
      throw new i("`obj` must be an object or a function`");
    if (typeof f != "string" && typeof f != "symbol")
      throw new i("`property` must be a string or a symbol`");
    if (arguments.length > 3 && typeof arguments[3] != "boolean" && arguments[3] !== null)
      throw new i("`nonEnumerable`, if provided, must be a boolean or null");
    if (arguments.length > 4 && typeof arguments[4] != "boolean" && arguments[4] !== null)
      throw new i("`nonWritable`, if provided, must be a boolean or null");
    if (arguments.length > 5 && typeof arguments[5] != "boolean" && arguments[5] !== null)
      throw new i("`nonConfigurable`, if provided, must be a boolean or null");
    if (arguments.length > 6 && typeof arguments[6] != "boolean")
      throw new i("`loose`, if provided, must be a boolean");
    var h = arguments.length > 3 ? arguments[3] : null, y = arguments.length > 4 ? arguments[4] : null, v = arguments.length > 5 ? arguments[5] : null, g = arguments.length > 6 ? arguments[6] : !1, m = !!o && o(a, f);
    if (r)
      r(a, f, {
        configurable: v === null && m ? m.configurable : !v,
        enumerable: h === null && m ? m.enumerable : !h,
        value: l,
        writable: y === null && m ? m.writable : !y
      });
    else if (g || !h && !y && !v)
      a[f] = l;
    else
      throw new n("This environment does not support defining a property as non-configurable, non-writable, or non-enumerable.");
  }, Kc;
}
var qc, Jd;
function xf() {
  if (Jd)
    return qc;
  Jd = 1;
  var e = Z1, t = typeof Symbol == "function" && typeof Symbol("foo") == "symbol", r = Object.prototype.toString, n = Array.prototype.concat, i = gk(), o = function(l) {
    return typeof l == "function" && r.call(l) === "[object Function]";
  }, s = tv()(), a = function(l, h, y, v) {
    if (h in l) {
      if (v === !0) {
        if (l[h] === y)
          return;
      } else if (!o(v) || !v())
        return;
    }
    s ? i(l, h, y, !0) : i(l, h, y);
  }, f = function(l, h) {
    var y = arguments.length > 2 ? arguments[2] : {}, v = e(h);
    t && (v = n.call(v, Object.getOwnPropertySymbols(h)));
    for (var g = 0; g < v.length; g += 1)
      a(l, v[g], h[v[g]], y[v[g]]);
  };
  return f.supportsDescriptors = !!s, qc = f, qc;
}
var Gc, Qd;
function bk() {
  if (Qd)
    return Gc;
  Qd = 1;
  var e = Rh, t = xf();
  return Gc = function() {
    var n = e();
    return t(Object, { is: n }, {
      is: function() {
        return Object.is !== n;
      }
    }), n;
  }, Gc;
}
var Vc, e0;
function vk() {
  if (e0)
    return Vc;
  e0 = 1;
  var e = xf(), t = cf, r = ev, n = Rh, i = bk(), o = t(n(), Object);
  return e(o, {
    getPolyfill: n,
    implementation: r,
    shim: i
  }), Vc = o, Vc;
}
var Wc, t0;
function rv() {
  return t0 || (t0 = 1, Wc = function(t) {
    return t !== t;
  }), Wc;
}
var zc, r0;
function nv() {
  if (r0)
    return zc;
  r0 = 1;
  var e = rv();
  return zc = function() {
    return Number.isNaN && Number.isNaN(NaN) && !Number.isNaN("a") ? Number.isNaN : e;
  }, zc;
}
var Xc, n0;
function wk() {
  if (n0)
    return Xc;
  n0 = 1;
  var e = xf(), t = nv();
  return Xc = function() {
    var n = t();
    return e(Number, { isNaN: n }, {
      isNaN: function() {
        return Number.isNaN !== n;
      }
    }), n;
  }, Xc;
}
var Yc, i0;
function mk() {
  if (i0)
    return Yc;
  i0 = 1;
  var e = cf, t = xf(), r = rv(), n = nv(), i = wk(), o = e(n(), Number);
  return t(o, {
    getPolyfill: n,
    implementation: r,
    shim: i
  }), Yc = o, Yc;
}
var Zc, o0;
function Ek() {
  if (o0)
    return Zc;
  o0 = 1;
  function e(d, b) {
    return o(d) || i(d, b) || r(d, b) || t();
  }
  function t() {
    throw new TypeError(`Invalid attempt to destructure non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
  }
  function r(d, b) {
    if (d) {
      if (typeof d == "string")
        return n(d, b);
      var B = Object.prototype.toString.call(d).slice(8, -1);
      if (B === "Object" && d.constructor && (B = d.constructor.name), B === "Map" || B === "Set")
        return Array.from(d);
      if (B === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(B))
        return n(d, b);
    }
  }
  function n(d, b) {
    (b == null || b > d.length) && (b = d.length);
    for (var B = 0, p = new Array(b); B < b; B++)
      p[B] = d[B];
    return p;
  }
  function i(d, b) {
    var B = d == null ? null : typeof Symbol < "u" && d[Symbol.iterator] || d["@@iterator"];
    if (B != null) {
      var p, c, u, w, I = [], R = !0, G = !1;
      try {
        if (u = (B = B.call(d)).next, b === 0) {
          if (Object(B) !== B)
            return;
          R = !1;
        } else
          for (; !(R = (p = u.call(B)).done) && (I.push(p.value), I.length !== b); R = !0)
            ;
      } catch (oe) {
        G = !0, c = oe;
      } finally {
        try {
          if (!R && B.return != null && (w = B.return(), Object(w) !== w))
            return;
        } finally {
          if (G)
            throw c;
        }
      }
      return I;
    }
  }
  function o(d) {
    if (Array.isArray(d))
      return d;
  }
  function s(d) {
    "@babel/helpers - typeof";
    return s = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(b) {
      return typeof b;
    } : function(b) {
      return b && typeof Symbol == "function" && b.constructor === Symbol && b !== Symbol.prototype ? "symbol" : typeof b;
    }, s(d);
  }
  var a = /a/g.flags !== void 0, f = function(b) {
    var B = [];
    return b.forEach(function(p) {
      return B.push(p);
    }), B;
  }, l = function(b) {
    var B = [];
    return b.forEach(function(p, c) {
      return B.push([c, p]);
    }), B;
  }, h = Object.is ? Object.is : vk(), y = Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols : function() {
    return [];
  }, v = Number.isNaN ? Number.isNaN : mk();
  function g(d) {
    return d.call.bind(d);
  }
  var m = g(Object.prototype.hasOwnProperty), E = g(Object.prototype.propertyIsEnumerable), O = g(Object.prototype.toString), x = En.types, U = x.isAnyArrayBuffer, H = x.isArrayBufferView, M = x.isDate, k = x.isMap, _ = x.isRegExp, L = x.isSet, j = x.isNativeError, F = x.isBoxedPrimitive, W = x.isNumberObject, te = x.isStringObject, re = x.isBooleanObject, ae = x.isBigIntObject, de = x.isSymbolObject, J = x.isFloat32Array, ne = x.isFloat64Array;
  function ue(d) {
    if (d.length === 0 || d.length > 10)
      return !0;
    for (var b = 0; b < d.length; b++) {
      var B = d.charCodeAt(b);
      if (B < 48 || B > 57)
        return !0;
    }
    return d.length === 10 && d >= Math.pow(2, 32);
  }
  function pe(d) {
    return Object.keys(d).filter(ue).concat(y(d).filter(Object.prototype.propertyIsEnumerable.bind(d)));
  }
  /*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
   * @license  MIT
   */
  function z(d, b) {
    if (d === b)
      return 0;
    for (var B = d.length, p = b.length, c = 0, u = Math.min(B, p); c < u; ++c)
      if (d[c] !== b[c]) {
        B = d[c], p = b[c];
        break;
      }
    return B < p ? -1 : p < B ? 1 : 0;
  }
  var Y = !0, ee = !1, $ = 0, q = 1, X = 2, ie = 3;
  function D(d, b) {
    return a ? d.source === b.source && d.flags === b.flags : RegExp.prototype.toString.call(d) === RegExp.prototype.toString.call(b);
  }
  function A(d, b) {
    if (d.byteLength !== b.byteLength)
      return !1;
    for (var B = 0; B < d.byteLength; B++)
      if (d[B] !== b[B])
        return !1;
    return !0;
  }
  function P(d, b) {
    return d.byteLength !== b.byteLength ? !1 : z(new Uint8Array(d.buffer, d.byteOffset, d.byteLength), new Uint8Array(b.buffer, b.byteOffset, b.byteLength)) === 0;
  }
  function C(d, b) {
    return d.byteLength === b.byteLength && z(new Uint8Array(d), new Uint8Array(b)) === 0;
  }
  function K(d, b) {
    return W(d) ? W(b) && h(Number.prototype.valueOf.call(d), Number.prototype.valueOf.call(b)) : te(d) ? te(b) && String.prototype.valueOf.call(d) === String.prototype.valueOf.call(b) : re(d) ? re(b) && Boolean.prototype.valueOf.call(d) === Boolean.prototype.valueOf.call(b) : ae(d) ? ae(b) && BigInt.prototype.valueOf.call(d) === BigInt.prototype.valueOf.call(b) : de(b) && Symbol.prototype.valueOf.call(d) === Symbol.prototype.valueOf.call(b);
  }
  function S(d, b, B, p) {
    if (d === b)
      return d !== 0 ? !0 : B ? h(d, b) : !0;
    if (B) {
      if (s(d) !== "object")
        return typeof d == "number" && v(d) && v(b);
      if (s(b) !== "object" || d === null || b === null || Object.getPrototypeOf(d) !== Object.getPrototypeOf(b))
        return !1;
    } else {
      if (d === null || s(d) !== "object")
        return b === null || s(b) !== "object" ? d == b : !1;
      if (b === null || s(b) !== "object")
        return !1;
    }
    var c = O(d), u = O(b);
    if (c !== u)
      return !1;
    if (Array.isArray(d)) {
      if (d.length !== b.length)
        return !1;
      var w = pe(d), I = pe(b);
      return w.length !== I.length ? !1 : V(d, b, B, p, q, w);
    }
    if (c === "[object Object]" && (!k(d) && k(b) || !L(d) && L(b)))
      return !1;
    if (M(d)) {
      if (!M(b) || Date.prototype.getTime.call(d) !== Date.prototype.getTime.call(b))
        return !1;
    } else if (_(d)) {
      if (!_(b) || !D(d, b))
        return !1;
    } else if (j(d) || d instanceof Error) {
      if (d.message !== b.message || d.name !== b.name)
        return !1;
    } else if (H(d)) {
      if (!B && (J(d) || ne(d))) {
        if (!A(d, b))
          return !1;
      } else if (!P(d, b))
        return !1;
      var R = pe(d), G = pe(b);
      return R.length !== G.length ? !1 : V(d, b, B, p, $, R);
    } else {
      if (L(d))
        return !L(b) || d.size !== b.size ? !1 : V(d, b, B, p, X);
      if (k(d))
        return !k(b) || d.size !== b.size ? !1 : V(d, b, B, p, ie);
      if (U(d)) {
        if (!C(d, b))
          return !1;
      } else if (F(d) && !K(d, b))
        return !1;
    }
    return V(d, b, B, p, $);
  }
  function T(d, b) {
    return b.filter(function(B) {
      return E(d, B);
    });
  }
  function V(d, b, B, p, c, u) {
    if (arguments.length === 5) {
      u = Object.keys(d);
      var w = Object.keys(b);
      if (u.length !== w.length)
        return !1;
    }
    for (var I = 0; I < u.length; I++)
      if (!m(b, u[I]))
        return !1;
    if (B && arguments.length === 5) {
      var R = y(d);
      if (R.length !== 0) {
        var G = 0;
        for (I = 0; I < R.length; I++) {
          var oe = R[I];
          if (E(d, oe)) {
            if (!E(b, oe))
              return !1;
            u.push(oe), G++;
          } else if (E(b, oe))
            return !1;
        }
        var le = y(b);
        if (R.length !== le.length && T(b, le).length !== G)
          return !1;
      } else {
        var he = y(b);
        if (he.length !== 0 && T(b, he).length !== 0)
          return !1;
      }
    }
    if (u.length === 0 && (c === $ || c === q && d.length === 0 || d.size === 0))
      return !0;
    if (p === void 0)
      p = {
        val1: /* @__PURE__ */ new Map(),
        val2: /* @__PURE__ */ new Map(),
        position: 0
      };
    else {
      var _e = p.val1.get(d);
      if (_e !== void 0) {
        var ve = p.val2.get(b);
        if (ve !== void 0)
          return _e === ve;
      }
      p.position++;
    }
    p.val1.set(d, p.position), p.val2.set(b, p.position);
    var xr = ze(d, b, B, u, p, c);
    return p.val1.delete(d), p.val2.delete(b), xr;
  }
  function Q(d, b, B, p) {
    for (var c = f(d), u = 0; u < c.length; u++) {
      var w = c[u];
      if (S(b, w, B, p))
        return d.delete(w), !0;
    }
    return !1;
  }
  function be(d) {
    switch (s(d)) {
      case "undefined":
        return null;
      case "object":
        return;
      case "symbol":
        return !1;
      case "string":
        d = +d;
      case "number":
        if (v(d))
          return !1;
    }
    return !0;
  }
  function ye(d, b, B) {
    var p = be(B);
    return p ?? (b.has(p) && !d.has(p));
  }
  function Ee(d, b, B, p, c) {
    var u = be(B);
    if (u != null)
      return u;
    var w = b.get(u);
    return w === void 0 && !b.has(u) || !S(p, w, !1, c) ? !1 : !d.has(u) && S(p, w, !1, c);
  }
  function Ue(d, b, B, p) {
    for (var c = null, u = f(d), w = 0; w < u.length; w++) {
      var I = u[w];
      if (s(I) === "object" && I !== null)
        c === null && (c = /* @__PURE__ */ new Set()), c.add(I);
      else if (!b.has(I)) {
        if (B || !ye(d, b, I))
          return !1;
        c === null && (c = /* @__PURE__ */ new Set()), c.add(I);
      }
    }
    if (c !== null) {
      for (var R = f(b), G = 0; G < R.length; G++) {
        var oe = R[G];
        if (s(oe) === "object" && oe !== null) {
          if (!Q(c, oe, B, p))
            return !1;
        } else if (!B && !d.has(oe) && !Q(c, oe, B, p))
          return !1;
      }
      return c.size === 0;
    }
    return !0;
  }
  function Z(d, b, B, p, c, u) {
    for (var w = f(d), I = 0; I < w.length; I++) {
      var R = w[I];
      if (S(B, R, c, u) && S(p, b.get(R), c, u))
        return d.delete(R), !0;
    }
    return !1;
  }
  function Tt(d, b, B, p) {
    for (var c = null, u = l(d), w = 0; w < u.length; w++) {
      var I = e(u[w], 2), R = I[0], G = I[1];
      if (s(R) === "object" && R !== null)
        c === null && (c = /* @__PURE__ */ new Set()), c.add(R);
      else {
        var oe = b.get(R);
        if (oe === void 0 && !b.has(R) || !S(G, oe, B, p)) {
          if (B || !Ee(d, b, R, G, p))
            return !1;
          c === null && (c = /* @__PURE__ */ new Set()), c.add(R);
        }
      }
    }
    if (c !== null) {
      for (var le = l(b), he = 0; he < le.length; he++) {
        var _e = e(le[he], 2), ve = _e[0], xr = _e[1];
        if (s(ve) === "object" && ve !== null) {
          if (!Z(c, d, ve, xr, B, p))
            return !1;
        } else if (!B && (!d.has(ve) || !S(d.get(ve), xr, !1, p)) && !Z(c, d, ve, xr, !1, p))
          return !1;
      }
      return c.size === 0;
    }
    return !0;
  }
  function ze(d, b, B, p, c, u) {
    var w = 0;
    if (u === X) {
      if (!Ue(d, b, B, c))
        return !1;
    } else if (u === ie) {
      if (!Tt(d, b, B, c))
        return !1;
    } else if (u === q)
      for (; w < d.length; w++)
        if (m(d, w)) {
          if (!m(b, w) || !S(d[w], b[w], B, c))
            return !1;
        } else {
          if (m(b, w))
            return !1;
          for (var I = Object.keys(d); w < I.length; w++) {
            var R = I[w];
            if (!m(b, R) || !S(d[R], b[R], B, c))
              return !1;
          }
          return I.length === Object.keys(b).length;
        }
    for (w = 0; w < p.length; w++) {
      var G = p[w];
      if (!S(d[G], b[G], B, c))
        return !1;
    }
    return !0;
  }
  function ge(d, b) {
    return S(d, b, ee);
  }
  function je(d, b) {
    return S(d, b, Y);
  }
  return Zc = {
    isDeepEqual: ge,
    isDeepStrictEqual: je
  }, Zc;
}
var s0;
function Yo() {
  if (s0)
    return Hc.exports;
  s0 = 1;
  function e(A) {
    "@babel/helpers - typeof";
    return e = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(P) {
      return typeof P;
    } : function(P) {
      return P && typeof Symbol == "function" && P.constructor === Symbol && P !== Symbol.prototype ? "symbol" : typeof P;
    }, e(A);
  }
  function t(A, P) {
    for (var C = 0; C < P.length; C++) {
      var K = P[C];
      K.enumerable = K.enumerable || !1, K.configurable = !0, "value" in K && (K.writable = !0), Object.defineProperty(A, n(K.key), K);
    }
  }
  function r(A, P, C) {
    return P && t(A.prototype, P), C && t(A, C), Object.defineProperty(A, "prototype", { writable: !1 }), A;
  }
  function n(A) {
    var P = i(A, "string");
    return e(P) === "symbol" ? P : String(P);
  }
  function i(A, P) {
    if (e(A) !== "object" || A === null)
      return A;
    var C = A[Symbol.toPrimitive];
    if (C !== void 0) {
      var K = C.call(A, P || "default");
      if (e(K) !== "object")
        return K;
      throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (P === "string" ? String : Number)(A);
  }
  function o(A, P) {
    if (!(A instanceof P))
      throw new TypeError("Cannot call a class as a function");
  }
  var s = X1(), a = s.codes, f = a.ERR_AMBIGUOUS_ARGUMENT, l = a.ERR_INVALID_ARG_TYPE, h = a.ERR_INVALID_ARG_VALUE, y = a.ERR_INVALID_RETURN_VALUE, v = a.ERR_MISSING_ARGS, g = ik(), m = En, E = m.inspect, O = En.types, x = O.isPromise, U = O.isRegExp, H = dk(), M = Rh(), k = uf("RegExp.prototype.test"), _, L;
  function j() {
    var A = Ek();
    _ = A.isDeepEqual, L = A.isDeepStrictEqual;
  }
  var F = !1, W = Hc.exports = J, te = {};
  function re(A) {
    throw A.message instanceof Error ? A.message : new g(A);
  }
  function ae(A, P, C, K, S) {
    var T = arguments.length, V;
    if (T === 0)
      V = "Failed";
    else if (T === 1)
      C = A, A = void 0;
    else {
      if (F === !1) {
        F = !0;
        var Q = N.process.emitWarning ? N.process.emitWarning : console.warn.bind(console);
        Q("assert.fail() with more than one argument is deprecated. Please use assert.strictEqual() instead or only pass a message.", "DeprecationWarning", "DEP0094");
      }
      T === 2 && (K = "!=");
    }
    if (C instanceof Error)
      throw C;
    var be = {
      actual: A,
      expected: P,
      operator: K === void 0 ? "fail" : K,
      stackStartFn: S || ae
    };
    C !== void 0 && (be.message = C);
    var ye = new g(be);
    throw V && (ye.message = V, ye.generatedMessage = !0), ye;
  }
  W.fail = ae, W.AssertionError = g;
  function de(A, P, C, K) {
    if (!C) {
      var S = !1;
      if (P === 0)
        S = !0, K = "No value argument passed to `assert.ok()`";
      else if (K instanceof Error)
        throw K;
      var T = new g({
        actual: C,
        expected: !0,
        message: K,
        operator: "==",
        stackStartFn: A
      });
      throw T.generatedMessage = S, T;
    }
  }
  function J() {
    for (var A = arguments.length, P = new Array(A), C = 0; C < A; C++)
      P[C] = arguments[C];
    de.apply(void 0, [J, P.length].concat(P));
  }
  W.ok = J, W.equal = function A(P, C, K) {
    if (arguments.length < 2)
      throw new v("actual", "expected");
    P != C && re({
      actual: P,
      expected: C,
      message: K,
      operator: "==",
      stackStartFn: A
    });
  }, W.notEqual = function A(P, C, K) {
    if (arguments.length < 2)
      throw new v("actual", "expected");
    P == C && re({
      actual: P,
      expected: C,
      message: K,
      operator: "!=",
      stackStartFn: A
    });
  }, W.deepEqual = function A(P, C, K) {
    if (arguments.length < 2)
      throw new v("actual", "expected");
    _ === void 0 && j(), _(P, C) || re({
      actual: P,
      expected: C,
      message: K,
      operator: "deepEqual",
      stackStartFn: A
    });
  }, W.notDeepEqual = function A(P, C, K) {
    if (arguments.length < 2)
      throw new v("actual", "expected");
    _ === void 0 && j(), _(P, C) && re({
      actual: P,
      expected: C,
      message: K,
      operator: "notDeepEqual",
      stackStartFn: A
    });
  }, W.deepStrictEqual = function A(P, C, K) {
    if (arguments.length < 2)
      throw new v("actual", "expected");
    _ === void 0 && j(), L(P, C) || re({
      actual: P,
      expected: C,
      message: K,
      operator: "deepStrictEqual",
      stackStartFn: A
    });
  }, W.notDeepStrictEqual = ne;
  function ne(A, P, C) {
    if (arguments.length < 2)
      throw new v("actual", "expected");
    _ === void 0 && j(), L(A, P) && re({
      actual: A,
      expected: P,
      message: C,
      operator: "notDeepStrictEqual",
      stackStartFn: ne
    });
  }
  W.strictEqual = function A(P, C, K) {
    if (arguments.length < 2)
      throw new v("actual", "expected");
    M(P, C) || re({
      actual: P,
      expected: C,
      message: K,
      operator: "strictEqual",
      stackStartFn: A
    });
  }, W.notStrictEqual = function A(P, C, K) {
    if (arguments.length < 2)
      throw new v("actual", "expected");
    M(P, C) && re({
      actual: P,
      expected: C,
      message: K,
      operator: "notStrictEqual",
      stackStartFn: A
    });
  };
  var ue = /* @__PURE__ */ r(function A(P, C, K) {
    var S = this;
    o(this, A), C.forEach(function(T) {
      T in P && (K !== void 0 && typeof K[T] == "string" && U(P[T]) && k(P[T], K[T]) ? S[T] = K[T] : S[T] = P[T]);
    });
  });
  function pe(A, P, C, K, S, T) {
    if (!(C in A) || !L(A[C], P[C])) {
      if (!K) {
        var V = new ue(A, S), Q = new ue(P, S, A), be = new g({
          actual: V,
          expected: Q,
          operator: "deepStrictEqual",
          stackStartFn: T
        });
        throw be.actual = A, be.expected = P, be.operator = T.name, be;
      }
      re({
        actual: A,
        expected: P,
        message: K,
        operator: T.name,
        stackStartFn: T
      });
    }
  }
  function z(A, P, C, K) {
    if (typeof P != "function") {
      if (U(P))
        return k(P, A);
      if (arguments.length === 2)
        throw new l("expected", ["Function", "RegExp"], P);
      if (e(A) !== "object" || A === null) {
        var S = new g({
          actual: A,
          expected: P,
          message: C,
          operator: "deepStrictEqual",
          stackStartFn: K
        });
        throw S.operator = K.name, S;
      }
      var T = Object.keys(P);
      if (P instanceof Error)
        T.push("name", "message");
      else if (T.length === 0)
        throw new h("error", P, "may not be an empty object");
      return _ === void 0 && j(), T.forEach(function(V) {
        typeof A[V] == "string" && U(P[V]) && k(P[V], A[V]) || pe(A, P, V, C, T, K);
      }), !0;
    }
    return P.prototype !== void 0 && A instanceof P ? !0 : Error.isPrototypeOf(P) ? !1 : P.call({}, A) === !0;
  }
  function Y(A) {
    if (typeof A != "function")
      throw new l("fn", "Function", A);
    try {
      A();
    } catch (P) {
      return P;
    }
    return te;
  }
  function ee(A) {
    return x(A) || A !== null && e(A) === "object" && typeof A.then == "function" && typeof A.catch == "function";
  }
  function $(A) {
    return Promise.resolve().then(function() {
      var P;
      if (typeof A == "function") {
        if (P = A(), !ee(P))
          throw new y("instance of Promise", "promiseFn", P);
      } else if (ee(A))
        P = A;
      else
        throw new l("promiseFn", ["Function", "Promise"], A);
      return Promise.resolve().then(function() {
        return P;
      }).then(function() {
        return te;
      }).catch(function(C) {
        return C;
      });
    });
  }
  function q(A, P, C, K) {
    if (typeof C == "string") {
      if (arguments.length === 4)
        throw new l("error", ["Object", "Error", "Function", "RegExp"], C);
      if (e(P) === "object" && P !== null) {
        if (P.message === C)
          throw new f("error/message", 'The error message "'.concat(P.message, '" is identical to the message.'));
      } else if (P === C)
        throw new f("error/message", 'The error "'.concat(P, '" is identical to the message.'));
      K = C, C = void 0;
    } else if (C != null && e(C) !== "object" && typeof C != "function")
      throw new l("error", ["Object", "Error", "Function", "RegExp"], C);
    if (P === te) {
      var S = "";
      C && C.name && (S += " (".concat(C.name, ")")), S += K ? ": ".concat(K) : ".";
      var T = A.name === "rejects" ? "rejection" : "exception";
      re({
        actual: void 0,
        expected: C,
        operator: A.name,
        message: "Missing expected ".concat(T).concat(S),
        stackStartFn: A
      });
    }
    if (C && !z(P, C, K, A))
      throw P;
  }
  function X(A, P, C, K) {
    if (P !== te) {
      if (typeof C == "string" && (K = C, C = void 0), !C || z(P, C)) {
        var S = K ? ": ".concat(K) : ".", T = A.name === "doesNotReject" ? "rejection" : "exception";
        re({
          actual: P,
          expected: C,
          operator: A.name,
          message: "Got unwanted ".concat(T).concat(S, `
`) + 'Actual message: "'.concat(P && P.message, '"'),
          stackStartFn: A
        });
      }
      throw P;
    }
  }
  W.throws = function A(P) {
    for (var C = arguments.length, K = new Array(C > 1 ? C - 1 : 0), S = 1; S < C; S++)
      K[S - 1] = arguments[S];
    q.apply(void 0, [A, Y(P)].concat(K));
  }, W.rejects = function A(P) {
    for (var C = arguments.length, K = new Array(C > 1 ? C - 1 : 0), S = 1; S < C; S++)
      K[S - 1] = arguments[S];
    return $(P).then(function(T) {
      return q.apply(void 0, [A, T].concat(K));
    });
  }, W.doesNotThrow = function A(P) {
    for (var C = arguments.length, K = new Array(C > 1 ? C - 1 : 0), S = 1; S < C; S++)
      K[S - 1] = arguments[S];
    X.apply(void 0, [A, Y(P)].concat(K));
  }, W.doesNotReject = function A(P) {
    for (var C = arguments.length, K = new Array(C > 1 ? C - 1 : 0), S = 1; S < C; S++)
      K[S - 1] = arguments[S];
    return $(P).then(function(T) {
      return X.apply(void 0, [A, T].concat(K));
    });
  }, W.ifError = function A(P) {
    if (P != null) {
      var C = "ifError got unwanted exception: ";
      e(P) === "object" && typeof P.message == "string" ? P.message.length === 0 && P.constructor ? C += P.constructor.name : C += P.message : C += E(P);
      var K = new g({
        actual: P,
        expected: null,
        operator: "ifError",
        message: C,
        stackStartFn: A
      }), S = P.stack;
      if (typeof S == "string") {
        var T = S.split(`
`);
        T.shift();
        for (var V = K.stack.split(`
`), Q = 0; Q < T.length; Q++) {
          var be = V.indexOf(T[Q]);
          if (be !== -1) {
            V = V.slice(0, be);
            break;
          }
        }
        K.stack = "".concat(V.join(`
`), `
`).concat(T.join(`
`));
      }
      throw K;
    }
  };
  function ie(A, P, C, K, S) {
    if (!U(P))
      throw new l("regexp", "RegExp", P);
    var T = S === "match";
    if (typeof A != "string" || k(P, A) !== T) {
      if (C instanceof Error)
        throw C;
      var V = !C;
      C = C || (typeof A != "string" ? 'The "string" argument must be of type string. Received type ' + "".concat(e(A), " (").concat(E(A), ")") : (T ? "The input did not match the regular expression " : "The input was expected to not match the regular expression ") + "".concat(E(P), `. Input:

`).concat(E(A), `
`));
      var Q = new g({
        actual: A,
        expected: P,
        message: C,
        operator: S,
        stackStartFn: K
      });
      throw Q.generatedMessage = V, Q;
    }
  }
  W.match = function A(P, C, K) {
    ie(P, C, K, A, "match");
  }, W.doesNotMatch = function A(P, C, K) {
    ie(P, C, K, A, "doesNotMatch");
  };
  function D() {
    for (var A = arguments.length, P = new Array(A), C = 0; C < A; C++)
      P[C] = arguments[C];
    de.apply(void 0, [D, P.length].concat(P));
  }
  return W.strict = H(D, W, {
    equal: W.strictEqual,
    deepEqual: W.deepStrictEqual,
    notEqual: W.notStrictEqual,
    notDeepEqual: W.notDeepStrictEqual
  }), W.strict.strict = W.strict, Hc.exports;
}
var a0 = Yo(), At = z1;
At.fromByteArrayUnsigned = function(e) {
  return e[0] & 128 ? new At([0].concat(e)) : new At(e);
};
At.prototype.toByteArrayUnsigned = function() {
  var e = this.toByteArray();
  return e[0] === 0 ? e.slice(1) : e;
};
At.fromDERInteger = function(e) {
  return new At(e);
};
At.prototype.toDERInteger = At.prototype.toByteArray;
At.fromBuffer = function(e) {
  if (e[0] & 128) {
    var t = Array.prototype.slice.call(e);
    return new At([0].concat(t));
  }
  return new At(e);
};
At.fromHex = function(e) {
  return e === "" ? At.ZERO : (a0.equal(e, e.match(/^[A-Fa-f0-9]+/), "Invalid hex string"), a0.equal(e.length % 2, 0, "Incomplete hex"), new At(e, 16));
};
At.prototype.toBuffer = function(e) {
  for (var t = this.toByteArrayUnsigned(), r = [], n = e - t.length; r.length < n; )
    r.push(0);
  return new N.Buffer(r.concat(t));
};
At.prototype.toHex = function(e) {
  return this.toBuffer(e).toString("hex");
};
var _k = z1, Xr = _k, iv = Mb, Nh = De, Co = st, Ra = Xr;
function ht(e, t) {
  Nh(Co.tuple(Co.BigInt, Co.BigInt), arguments), this.r = e, this.s = t;
}
ht.ECDSA = 0;
ht.SCHNORR = 1;
ht.parseCompact = function(e) {
  Nh(Co.BufferN(65), e);
  var t = e.readUInt8(0) - 27;
  if (t !== (t & 7))
    throw new Error("Invalid signature parameter");
  var r = !!(t & 4), n = t & 3, i = ht.fromRSBuffer(e.slice(1));
  return {
    compressed: r,
    i: n,
    signature: i
  };
};
ht.fromRSBuffer = function(e) {
  Nh(Co.BufferN(64), e);
  var t = Ra.fromBuffer(e.slice(0, 32)), r = Ra.fromBuffer(e.slice(32, 64));
  return new ht(t, r);
};
ht.fromDER = function(e) {
  var t = iv.decode(e), r = Ra.fromDERInteger(t.r), n = Ra.fromDERInteger(t.s);
  return new ht(r, n);
};
ht.parseScriptSignature = function(e) {
  var t = e.readUInt8(e.length - 1), r = t & -193;
  if (r <= 0 || r >= 4)
    throw new Error("Invalid hashType " + t);
  return {
    signature: ht.fromDER(e.slice(0, -1)),
    hashType: t
  };
};
ht.prototype.toCompact = function(e, t) {
  t && (e += 4), e += 27;
  var r = N.Buffer.alloc(65);
  return r.writeUInt8(e, 0), this.toRSBuffer(r, 1), r;
};
ht.prototype.toDER = function() {
  var e = N.Buffer.from(this.r.toDERInteger()), t = N.Buffer.from(this.s.toDERInteger());
  return iv.encode(e, t);
};
ht.prototype.toRSBuffer = function(e, t) {
  return t || (t = 0), e = e || N.Buffer.alloc(64), this.r.toBuffer(32).copy(e, t), this.s.toBuffer(32).copy(e, t + 32), e;
};
ht.prototype.toScriptSignature = function(e, t) {
  t || (t = ht.ECDSA);
  var r = e & -193;
  if (r <= 0 || r >= 4)
    throw new Error("Invalid hashType " + e);
  var n = N.Buffer.alloc(1);
  if (n.writeUInt8(e, 0), t === ht.ECDSA)
    return N.Buffer.concat([this.toDER(), n]);
  if (t === ht.SCHNORR)
    return N.Buffer.concat([this.toRSBuffer(), n]);
  throw new Error("Invalid signature Algorithm");
};
var ds = ht, ca = Yo(), Jc = Re.Buffer, Na = Xr, Ua = Na.valueOf(3);
function it(e, t, r, n) {
  ca.notStrictEqual(n, void 0, "Missing Z coordinate"), this.curve = e, this.x = t, this.y = r, this.z = n, this._zInv = null, this.compressed = !0;
}
Object.defineProperty(it.prototype, "zInv", {
  get: function() {
    return this._zInv === null && (this._zInv = this.z.modInverse(this.curve.p)), this._zInv;
  }
});
Object.defineProperty(it.prototype, "affineX", {
  get: function() {
    return this.x.multiply(this.zInv).mod(this.curve.p);
  }
});
Object.defineProperty(it.prototype, "affineY", {
  get: function() {
    return this.y.multiply(this.zInv).mod(this.curve.p);
  }
});
it.fromAffine = function(e, t, r) {
  return new it(e, t, r, Na.ONE);
};
it.prototype.equals = function(e) {
  if (e === this)
    return !0;
  if (this.curve.isInfinity(this))
    return this.curve.isInfinity(e);
  if (this.curve.isInfinity(e))
    return this.curve.isInfinity(this);
  var t = e.y.multiply(this.z).subtract(this.y.multiply(e.z)).mod(this.curve.p);
  if (t.signum() !== 0)
    return !1;
  var r = e.x.multiply(this.z).subtract(this.x.multiply(e.z)).mod(this.curve.p);
  return r.signum() === 0;
};
it.prototype.negate = function() {
  var e = this.curve.p.subtract(this.y);
  return new it(this.curve, this.x, e, this.z);
};
it.prototype.add = function(e) {
  if (this.curve.isInfinity(this))
    return e;
  if (this.curve.isInfinity(e))
    return this;
  var t = this.x, r = this.y, n = e.x, i = e.y, o = i.multiply(this.z).subtract(r.multiply(e.z)).mod(this.curve.p), s = n.multiply(this.z).subtract(t.multiply(e.z)).mod(this.curve.p);
  if (s.signum() === 0)
    return o.signum() === 0 ? this.twice() : this.curve.infinity;
  var a = s.square(), f = a.multiply(s), l = t.multiply(a), h = o.square().multiply(this.z), y = h.subtract(l.shiftLeft(1)).multiply(e.z).subtract(f).multiply(s).mod(this.curve.p), v = l.multiply(Ua).multiply(o).subtract(r.multiply(f)).subtract(h.multiply(o)).multiply(e.z).add(o.multiply(f)).mod(this.curve.p), g = f.multiply(this.z).multiply(e.z).mod(this.curve.p);
  return new it(this.curve, y, v, g);
};
it.prototype.twice = function() {
  if (this.curve.isInfinity(this))
    return this;
  if (this.y.signum() === 0)
    return this.curve.infinity;
  var e = this.x, t = this.y, r = t.multiply(this.z).mod(this.curve.p), n = r.multiply(t).mod(this.curve.p), i = this.curve.a, o = e.square().multiply(Ua);
  i.signum() !== 0 && (o = o.add(this.z.square().multiply(i))), o = o.mod(this.curve.p);
  var s = o.square().subtract(e.shiftLeft(3).multiply(n)).shiftLeft(1).multiply(r).mod(this.curve.p), a = o.multiply(Ua).multiply(e).subtract(n.shiftLeft(1)).shiftLeft(2).multiply(n).subtract(o.pow(3)).mod(this.curve.p), f = r.pow(3).shiftLeft(3).mod(this.curve.p);
  return new it(this.curve, s, a, f);
};
it.prototype.multiply = function(e) {
  if (this.curve.isInfinity(this))
    return this;
  if (e.signum() === 0)
    return this.curve.infinity;
  for (var t = e, r = t.multiply(Ua), n = this.negate(), i = this, o = r.bitLength() - 2; o > 0; --o) {
    var s = r.testBit(o), a = t.testBit(o);
    i = i.twice(), s !== a && (i = i.add(s ? this : n));
  }
  return i;
};
it.prototype.multiplyTwo = function(e, t, r) {
  for (var n = Math.max(e.bitLength(), r.bitLength()) - 1, i = this.curve.infinity, o = this.add(t); n >= 0; ) {
    var s = e.testBit(n), a = r.testBit(n);
    i = i.twice(), s ? a ? i = i.add(o) : i = i.add(this) : a && (i = i.add(t)), --n;
  }
  return i;
};
it.prototype.getEncoded = function(e) {
  if (e == null && (e = this.compressed), this.curve.isInfinity(this))
    return Jc.alloc(1, 0);
  var t = this.affineX, r = this.affineY, n = this.curve.pLength, i;
  return e ? (i = Jc.allocUnsafe(1 + n), i.writeUInt8(r.isEven() ? 2 : 3, 0)) : (i = Jc.allocUnsafe(1 + n + n), i.writeUInt8(4, 0), r.toBuffer(n).copy(i, 1 + n)), t.toBuffer(n).copy(i, 1), i;
};
it.decodeFrom = function(e, t) {
  var r = t.readUInt8(0), n = r !== 4, i = Math.floor((e.p.bitLength() + 7) / 8), o = Na.fromBuffer(t.slice(1, 1 + i)), s;
  if (n) {
    ca.equal(t.length, i + 1, "Invalid sequence length"), ca(r === 2 || r === 3, "Invalid sequence tag");
    var a = r === 3;
    s = e.pointFromX(a, o);
  } else {
    ca.equal(t.length, 1 + i + i, "Invalid sequence length");
    var f = Na.fromBuffer(t.slice(1 + i));
    s = it.fromAffine(e, o, f);
  }
  return s.compressed = n, s;
};
it.prototype.toString = function() {
  return this.curve.isInfinity(this) ? "(INFINITY)" : "(" + this.affineX.toString() + "," + this.affineY.toString() + ")";
};
var ov = it, Qc = Yo(), f0 = Xr, Ku = ov;
function ys(e, t, r, n, i, o, s) {
  this.p = e, this.a = t, this.b = r, this.G = Ku.fromAffine(this, n, i), this.n = o, this.h = s, this.infinity = new Ku(this, null, null, f0.ZERO), this.pOverFour = e.add(f0.ONE).shiftRight(2), this.pLength = Math.floor((this.p.bitLength() + 7) / 8);
}
ys.prototype.pointFromX = function(e, t) {
  var r = t.pow(3).add(this.a.multiply(t)).add(this.b).mod(this.p), n = r.modPow(this.pOverFour, this.p), i = n;
  return n.isEven() ^ !e && (i = this.p.subtract(i)), Ku.fromAffine(this, t, i);
};
ys.prototype.isInfinity = function(e) {
  return e === this.infinity ? !0 : e.z.signum() === 0 && e.y.signum() !== 0;
};
ys.prototype.isOnCurve = function(e) {
  if (this.isInfinity(e))
    return !0;
  var t = e.affineX, r = e.affineY, n = this.a, i = this.b, o = this.p;
  if (t.signum() < 0 || t.compareTo(o) >= 0 || r.signum() < 0 || r.compareTo(o) >= 0)
    return !1;
  var s = r.square().mod(o), a = t.pow(3).add(n.multiply(t)).add(i).mod(o);
  return s.equals(a);
};
ys.prototype.validate = function(e) {
  Qc(!this.isInfinity(e), "Point is at infinity"), Qc(this.isOnCurve(e), "Point is not on the curve");
  var t = e.multiply(this.n);
  return Qc(this.isInfinity(t), "Point is not a scalar multiple of G"), !0;
};
var sv = ys;
const Sk = {
  p: "fffffffdffffffffffffffffffffffff",
  a: "fffffffdfffffffffffffffffffffffc",
  b: "e87579c11079f43dd824993c2cee5ed3",
  n: "fffffffe0000000075a30d1b9038a115",
  h: "01",
  Gx: "161ff7528b899b2d0c28607ca52c5b86",
  Gy: "cf5ac8395bafeb13c02da292dded7a83"
}, Ok = {
  p: "fffffffffffffffffffffffffffffffeffffac73",
  a: "00",
  b: "07",
  n: "0100000000000000000001b8fa16dfab9aca16b6b3",
  h: "01",
  Gx: "3b4c382ce37aa192a4019e763036f4f5dd4d7ebb",
  Gy: "938cf935318fdced6bc28286531733c3f03c4fee"
}, Ak = {
  p: "ffffffffffffffffffffffffffffffff7fffffff",
  a: "ffffffffffffffffffffffffffffffff7ffffffc",
  b: "1c97befc54bd7a8b65acf89f81d4d4adc565fa45",
  n: "0100000000000000000001f4c8f927aed3ca752257",
  h: "01",
  Gx: "4a96b5688ef573284664698968c38bb913cbfc82",
  Gy: "23a628553168947d59dcc912042351377ac5fb32"
}, Tk = {
  p: "fffffffffffffffffffffffffffffffffffffffeffffee37",
  a: "00",
  b: "03",
  n: "fffffffffffffffffffffffe26f2fc170f69466a74defd8d",
  h: "01",
  Gx: "db4ff10ec057e9ae26b07d0280b7f4341da5d1b1eae06c7d",
  Gy: "9b2f2f6d9c5628a7844163d015be86344082aa88d95e2f9d"
}, Ik = {
  p: "fffffffffffffffffffffffffffffffeffffffffffffffff",
  a: "fffffffffffffffffffffffffffffffefffffffffffffffc",
  b: "64210519e59c80e70fa7e9ab72243049feb8deecc146b9b1",
  n: "ffffffffffffffffffffffff99def836146bc9b1b4d22831",
  h: "01",
  Gx: "188da80eb03090f67cbf20eb43a18800f4ff0afd82ff1012",
  Gy: "07192b95ffc8da78631011ed6b24cdd573f977a11e794811"
}, Pk = {
  p: "fffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f",
  a: "00",
  b: "07",
  n: "fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141",
  h: "01",
  Gx: "79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798",
  Gy: "483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8"
}, xk = {
  p: "ffffffff00000001000000000000000000000000ffffffffffffffffffffffff",
  a: "ffffffff00000001000000000000000000000000fffffffffffffffffffffffc",
  b: "5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b",
  n: "ffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551",
  h: "01",
  Gx: "6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c296",
  Gy: "4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5"
}, Bk = {
  secp128r1: Sk,
  secp160k1: Ok,
  secp160r1: Ak,
  secp192k1: Tk,
  secp192r1: Ik,
  secp256k1: Pk,
  secp256r1: xk
};
var In = Xr, kk = Bk, Rk = sv;
function Nk(e) {
  var t = kk[e];
  if (!t)
    return null;
  var r = new In(t.p, 16), n = new In(t.a, 16), i = new In(t.b, 16), o = new In(t.n, 16), s = new In(t.h, 16), a = new In(t.Gx, 16), f = new In(t.Gy, 16);
  return new Rk(r, n, i, a, f, o, s);
}
var Uk = Nk, Ck = ov, $k = sv, Hk = Uk, gs = {
  Curve: $k,
  Point: Ck,
  getCurveByName: Hk
}, Lk = ot, Cn = Re.Buffer, av = Fl, Dk = Cn.alloc(128), Ai = 64;
function Bf(e, t) {
  av.call(this, "digest"), typeof t == "string" && (t = Cn.from(t)), this._alg = e, this._key = t, t.length > Ai ? t = e(t) : t.length < Ai && (t = Cn.concat([t, Dk], Ai));
  for (var r = this._ipad = Cn.allocUnsafe(Ai), n = this._opad = Cn.allocUnsafe(Ai), i = 0; i < Ai; i++)
    r[i] = t[i] ^ 54, n[i] = t[i] ^ 92;
  this._hash = [r];
}
Lk(Bf, av);
Bf.prototype._update = function(e) {
  this._hash.push(e);
};
Bf.prototype._final = function() {
  var e = this._alg(Cn.concat(this._hash));
  return this._alg(Cn.concat([this._opad, e]));
};
var Mk = Bf, Fk = Jg, jk = function(e) {
  return new Fk().update(e).digest();
}, Kk = ot, qk = Mk, fv = Fl, xo = Re.Buffer, Gk = jk, qu = eb, Gu = cb, Vk = xo.alloc(128);
function Zo(e, t) {
  fv.call(this, "digest"), typeof t == "string" && (t = xo.from(t));
  var r = e === "sha512" || e === "sha384" ? 128 : 64;
  if (this._alg = e, this._key = t, t.length > r) {
    var n = e === "rmd160" ? new qu() : Gu(e);
    t = n.update(t).digest();
  } else
    t.length < r && (t = xo.concat([t, Vk], r));
  for (var i = this._ipad = xo.allocUnsafe(r), o = this._opad = xo.allocUnsafe(r), s = 0; s < r; s++)
    i[s] = t[s] ^ 54, o[s] = t[s] ^ 92;
  this._hash = e === "rmd160" ? new qu() : Gu(e), this._hash.update(i);
}
Kk(Zo, fv);
Zo.prototype._update = function(e) {
  this._hash.update(e);
};
Zo.prototype._final = function() {
  var e = this._hash.digest(), t = this._alg === "rmd160" ? new qu() : Gu(this._alg);
  return t.update(this._opad).update(e).digest();
};
var cv = function(t, r) {
  return t = t.toLowerCase(), t === "rmd160" || t === "ripemd160" ? new Zo("rmd160", r) : t === "md5" ? new qk(Gk, r) : new Zo(t, r);
}, eu, c0;
function uv() {
  if (c0)
    return eu;
  c0 = 1;
  var e = Re.Buffer, t = cv, r = Xr, n = De, i = st, o = gs, s = o.getCurveByName("secp256k1"), a = e.alloc(1, 0), f = e.alloc(1, 1);
  function l(h, y, v, g) {
    n(i.tuple(
      i.Hash256bit,
      i.Buffer256bit,
      i.Function
    ), arguments);
    var m = e.alloc(32, 0), E = e.alloc(32, 1);
    m = t("sha256", m).update(E).update(a).update(y).update(h), g && (n(n.BufferN(16), g), m.update(g)), m = m.digest(), E = t("sha256", m).update(E).digest(), m = t("sha256", m).update(E).update(f).update(y).update(h).digest(), E = t("sha256", m).update(E).digest(), E = t("sha256", m).update(E).digest();
    for (var O = r.fromBuffer(E); O.signum() <= 0 || O.compareTo(s.n) >= 0 || !v(O); )
      m = t("sha256", m).update(E).update(a).digest(), E = t("sha256", m).update(E).digest(), E = t("sha256", m).update(E).digest(), O = r.fromBuffer(E);
    return O;
  }
  return eu = {
    deterministicGenerateK: l
  }, eu;
}
var lv = De, $n = st, hv = Xr, Wk = ds, zk = gs, gn = zk.getCurveByName("secp256k1"), pv = uv().deterministicGenerateK, Xk = gn.n.shiftRight(1);
function Yk(e, t) {
  lv($n.tuple($n.Hash256bit, $n.BigInt), arguments);
  var r = t.toBuffer(32), n = hv.fromBuffer(e), i = gn.n, o = gn.G, s, a;
  return pv(e, r, function(f) {
    var l = o.multiply(f);
    return !(gn.isInfinity(l) || (s = l.affineX.mod(i), s.signum() === 0) || (a = f.modInverse(i).multiply(n.add(t.multiply(s))).mod(i), a.signum() === 0));
  }), a.compareTo(Xk) > 0 && (a = i.subtract(a)), new Wk(s, a);
}
function Zk(e, t, r) {
  lv($n.tuple(
    $n.Hash256bit,
    $n.ECSignature,
    $n.ECPoint
  ), arguments);
  var n = gn.n, i = gn.G, o = t.r, s = t.s;
  if (o.signum() <= 0 || o.compareTo(n) >= 0 || s.signum() <= 0 || s.compareTo(n) >= 0)
    return !1;
  var a = hv.fromBuffer(e), f = s.modInverse(n), l = a.multiply(f).mod(n), h = o.multiply(f).mod(n), y = i.multiplyTwo(l, r, h);
  if (gn.isInfinity(y))
    return !1;
  var v = y.affineX, g = v.mod(n);
  return g.equals(o);
}
var Jk = {
  deterministicGenerateK: pv,
  sign: Yk,
  verify: Zk,
  // TODO: remove
  __curve: gn
}, kf = De, sr = st, Vn = Xr, Qk = ds, Vu = gi, eR = gs, Zt = eR.getCurveByName("secp256k1"), dv = uv().deterministicGenerateK, yv = !0;
function tR(e, t) {
  kf(sr.tuple(
    sr.BufferN(32),
    sr.BigInt
  ), arguments);
  var r = Zt.n, n = Zt.G;
  if (t.compareTo(Vn.ZERO) <= 0 || t.compareTo(r) >= 0)
    throw new Error("Private key x not in range");
  var i = n.multiply(t), o, s;
  function a(h) {
    var y = n.multiply(h);
    Uh(y.affineY, Zt.p) != 1 && (h = r.subtract(h), y = n.multiply(h)), o = y.affineX.mod(r);
    var v = Ch(i), g = o.toBuffer(32), m = Vu.sha256(N.Buffer.concat([g, v, e])), E = Vn.fromBuffer(m).mod(r);
    return s = h.add(E.multiply(t)).mod(r), !0;
  }
  if (yv)
    dv(e, t.toBuffer(32), a, N.Buffer.from("Schnorr+SHA256  ", "ascii"));
  else {
    var f = Vu.sha256(N.Buffer.concat([t.toBuffer(32), e])), l = Vn.fromBuffer(f).mod(r);
    a(l);
  }
  return new Qk(o, s);
}
function rR(l, t, r) {
  kf(sr.tuple(
    sr.BufferN(32),
    sr.ECSignature,
    sr.ECPoint
  ), arguments);
  var n = Zt.n, i = Zt.G, o = t.r, s = t.s;
  if (!Zt.isOnCurve(r) || Zt.isInfinity(r) || o.compareTo(Zt.p) >= 0 || s.compareTo(n) >= 0)
    return !1;
  var a = Ch(r), f = o.toBuffer(32), l = Vu.sha256(N.Buffer.concat([f, a, l])), h = Vn.fromBuffer(l).mod(n), y = i.multiply(s).add(r.multiply(n.subtract(h)));
  return !(Zt.isInfinity(y) || y.affineX.compareTo(o) != 0 || Uh(y.affineY, Zt.p) != 1);
}
function Uh(e, t) {
  return e.modPow(t.subtract(Vn.ONE).divide(Vn.valueOf(2)), t).intValue();
}
function Ch(e) {
  return kf(sr.tuple(
    sr.ECPoint
  ), arguments), N.Buffer.concat([N.Buffer.from([e.affineY.isEven() ? 2 : 3]), e.affineX.toBuffer(32)]);
}
function nR(e) {
  if (kf(sr.tuple(
    sr.BufferN(33)
  ), arguments), e.length !== 33)
    throw new Error("Invalid length of buffer");
  if (e[0] !== 2 && e[0] !== 3)
    throw new Error("Invalid signum byte");
  var t = e[0] === 3, r = Vn.fromBuffer(e.slice(1, 33));
  return Zt.pointFromX(t, r);
}
var iR = {
  deterministicGenerateK: dv,
  sign: tR,
  verify: rR,
  jacobi: Uh,
  toCompressedPoint: Ch,
  fromCompressedPoint: nR,
  // TODO: remove
  __curve: Zt,
  __useRFC6979: function(e) {
    yv = e;
  }
}, oR = xh, sR = gi, $h = Jk, aR = iR, fR = gg, Wu = De, kn = st, gv = yb, tu = ds, bv = hs, vv = Xr, cR = gs, Rf = $h.__curve;
function Ft(e, t, r) {
  if (r && Wu({
    compressed: kn.maybe(kn.Boolean),
    network: kn.maybe(kn.Network)
  }, r), r = r || {}, e) {
    if (e.signum() <= 0)
      throw new Error("Private key must be greater than 0");
    if (e.compareTo(Rf.n) >= 0)
      throw new Error("Private key must be less than the curve order");
    if (t)
      throw new TypeError("Unexpected publicKey parameter");
    this.d = e;
  } else
    Wu(kn.ECPoint, t), this.__Q = t;
  this.compressed = r.compressed === void 0 ? !0 : r.compressed, this.network = r.network || bv.bitcoin;
}
Object.defineProperty(Ft.prototype, "Q", {
  get: function() {
    return !this.__Q && this.d && (this.__Q = Rf.G.multiply(this.d)), this.__Q;
  }
});
Ft.fromPublicKeyBuffer = function(e, t) {
  var r = cR.Point.decodeFrom(Rf, e);
  return new Ft(null, r, {
    compressed: r.compressed,
    network: t
  });
};
Ft.fromWIF = function(e, t) {
  var r = gv.decode(e), n = r.version;
  if (kn.Array(t)) {
    if (t = t.filter(function(o) {
      return n === o.wif;
    }).pop(), !t)
      throw new Error("Unknown network version");
  } else if (t = t || bv.bitcoin, n !== t.wif)
    throw new Error("Invalid network version");
  var i = vv.fromBuffer(r.privateKey);
  return new Ft(i, null, {
    compressed: r.compressed,
    network: t
  });
};
Ft.makeRandom = function(e) {
  e = e || {};
  var t = e.rng || fR, r;
  do {
    var n = t(32);
    Wu(kn.Buffer256bit, n), r = vv.fromBuffer(n);
  } while (r.signum() <= 0 || r.compareTo(Rf.n) >= 0);
  return new Ft(r, null, e);
};
Ft.prototype.getAddress = function() {
  return oR.toBase58Check(sR.hash160(this.getPublicKeyBuffer()), this.getNetwork().pubKeyHash);
};
Ft.prototype.getNetwork = function() {
  return this.network;
};
Ft.prototype.getPublicKeyBuffer = function() {
  return this.Q.getEncoded(this.compressed);
};
Ft.prototype.sign = function(e, t) {
  if (!this.d)
    throw new Error("Missing private key");
  if (t || (t = tu.ECDSA), t === tu.ECDSA)
    return $h.sign(e, this.d);
  if (t === tu.SCHNORR)
    return aR.sign(e, this.d);
};
Ft.prototype.toWIF = function() {
  if (!this.d)
    throw new Error("Missing private key");
  return gv.encode(this.network.wif, this.d.toBuffer(32), this.compressed);
};
Ft.prototype.verify = function(e, t) {
  return $h.verify(e, t, this.Q);
};
var Hh = Ft, Nf = Re.Buffer, wv = Ef, uR = gi, mv = cv, Uf = De, Hn = st, lR = hs, Lh = Xr, io = Hh, Ev = gs, Ui = Ev.getCurveByName("secp256k1");
function He(e, t) {
  if (!e.compressed)
    throw new TypeError("BIP32 only allows compressed keyPairs");
  this.keyPair = e, this.chainCode = t, this.depth = 0, this.index = 0, this.parentFingerprint = 0;
}
He.HIGHEST_BIT = 2147483648;
He.LENGTH = 78;
He.MASTER_SECRET = Nf.from("Bitcoin seed", "utf8");
He.fromSeedBuffer = function(e, t) {
  if (Uf(Hn.tuple(Hn.Buffer, Hn.maybe(Hn.Network)), arguments), e.length < 16)
    throw new TypeError("Seed should be at least 128 bits");
  if (e.length > 64)
    throw new TypeError("Seed should be at most 512 bits");
  var r = mv("sha512", He.MASTER_SECRET).update(e).digest(), n = r.slice(0, 32), i = r.slice(32), o = Lh.fromBuffer(n), s = new io(o, null, {
    network: t
  });
  return new He(s, i);
};
He.fromSeedHex = function(e, t) {
  return He.fromSeedBuffer(Nf.from(e, "hex"), t);
};
He.fromBase58 = function(e, t) {
  var r = wv.decode(e);
  if (r.length !== 78)
    throw new Error("Invalid buffer length");
  var n = r.readUInt32BE(0), i;
  if (Array.isArray(t)) {
    if (i = t.filter(function(g) {
      return n === g.bip32.private || n === g.bip32.public;
    }).pop(), !i)
      throw new Error("Unknown network version");
  } else
    i = t || lR.bitcoin;
  if (n !== i.bip32.private && n !== i.bip32.public)
    throw new Error("Invalid network version");
  var o = r[4], s = r.readUInt32BE(5);
  if (o === 0 && s !== 0)
    throw new Error("Invalid parent fingerprint");
  var a = r.readUInt32BE(9);
  if (o === 0 && a !== 0)
    throw new Error("Invalid index");
  var f = r.slice(13, 45), l;
  if (n === i.bip32.private) {
    if (r.readUInt8(45) !== 0)
      throw new Error("Invalid private key");
    var h = Lh.fromBuffer(r.slice(46, 78));
    l = new io(h, null, { network: i });
  } else {
    var y = Ev.Point.decodeFrom(Ui, r.slice(45, 78));
    Ui.validate(y), l = new io(null, y, { network: i });
  }
  var v = new He(l, f);
  return v.depth = o, v.index = a, v.parentFingerprint = s, v;
};
He.prototype.getAddress = function() {
  return this.keyPair.getAddress();
};
He.prototype.getIdentifier = function() {
  return uR.hash160(this.keyPair.getPublicKeyBuffer());
};
He.prototype.getFingerprint = function() {
  return this.getIdentifier().slice(0, 4);
};
He.prototype.getNetwork = function() {
  return this.keyPair.getNetwork();
};
He.prototype.getPublicKeyBuffer = function() {
  return this.keyPair.getPublicKeyBuffer();
};
He.prototype.neutered = function() {
  var e = new io(null, this.keyPair.Q, {
    network: this.keyPair.network
  }), t = new He(e, this.chainCode);
  return t.depth = this.depth, t.index = this.index, t.parentFingerprint = this.parentFingerprint, t;
};
He.prototype.sign = function(e) {
  return this.keyPair.sign(e);
};
He.prototype.verify = function(e, t) {
  return this.keyPair.verify(e, t);
};
He.prototype.toBase58 = function(e) {
  if (e !== void 0)
    throw new TypeError("Unsupported argument in 2.0.0");
  var t = this.keyPair.network, r = this.isNeutered() ? t.bip32.public : t.bip32.private, n = Nf.allocUnsafe(78);
  return n.writeUInt32BE(r, 0), n.writeUInt8(this.depth, 4), n.writeUInt32BE(this.parentFingerprint, 5), n.writeUInt32BE(this.index, 9), this.chainCode.copy(n, 13), this.isNeutered() ? this.keyPair.getPublicKeyBuffer().copy(n, 45) : (n.writeUInt8(0, 45), this.keyPair.d.toBuffer(32).copy(n, 46)), wv.encode(n);
};
He.prototype.derive = function(e) {
  Uf(Hn.UInt32, e);
  var t = e >= He.HIGHEST_BIT, r = Nf.allocUnsafe(37);
  if (t) {
    if (this.isNeutered())
      throw new TypeError("Could not derive hardened child key");
    r[0] = 0, this.keyPair.d.toBuffer(32).copy(r, 1), r.writeUInt32BE(e, 33);
  } else
    this.keyPair.getPublicKeyBuffer().copy(r, 0), r.writeUInt32BE(e, 33);
  var n = mv("sha512", this.chainCode).update(r).digest(), i = n.slice(0, 32), o = n.slice(32), s = Lh.fromBuffer(i);
  if (s.compareTo(Ui.n) >= 0)
    return this.derive(e + 1);
  var a;
  if (this.isNeutered()) {
    var l = Ui.G.multiply(s).add(this.keyPair.Q);
    if (Ui.isInfinity(l))
      return this.derive(e + 1);
    a = new io(null, l, {
      network: this.keyPair.network
    });
  } else {
    var f = s.add(this.keyPair.d).mod(Ui.n);
    if (f.signum() === 0)
      return this.derive(e + 1);
    a = new io(f, null, {
      network: this.keyPair.network
    });
  }
  var h = new He(a, o);
  return h.depth = this.depth + 1, h.index = e, h.parentFingerprint = this.getFingerprint().readUInt32BE(0), h;
};
He.prototype.deriveHardened = function(e) {
  return Uf(Hn.UInt31, e), this.derive(e + He.HIGHEST_BIT);
};
He.prototype.isNeutered = function() {
  return !this.keyPair.d;
};
He.prototype.derivePath = function(e) {
  Uf(Hn.BIP32Path, e);
  var t = e.split("/");
  if (t[0] === "m") {
    if (this.parentFingerprint)
      throw new Error("Not a master node");
    t = t.slice(1);
  }
  return t.reduce(function(r, n) {
    var i;
    return n.slice(-1) === "'" ? (i = parseInt(n.slice(0, -1), 10), r.deriveHardened(i)) : (i = parseInt(n, 10), r.derive(i));
  }, this);
};
var hR = He, Ca = Re.Buffer, pR = xh, or = gi, bn = at, Oe = Sh, dR = hs, u0 = Lt, Dh = De, Mh = st, Fe = Oe.types, _v = [Oe.types.P2PKH, Oe.types.P2PK, Oe.types.MULTISIG], yR = _v.concat([Oe.types.P2WPKH, Oe.types.P2WSH]), gR = Hh, Sv = ds, _n = Ih;
function Ci(e) {
  return _v.indexOf(e) !== -1;
}
function Ov(e) {
  return yR.indexOf(e) !== -1;
}
function bR(e, t, r) {
  var n = [], i = [];
  switch (e) {
    case Fe.P2PKH:
      n = t.slice(1), i = t.slice(0, 1);
      break;
    case Fe.P2PK:
      n[0] = r ? Oe.pubKey.output.decode(r) : void 0, i = t.slice(0, 1);
      break;
    case Fe.MULTISIG:
      if (r) {
        var o = Oe.multisig.output.decode(r);
        n = o.pubKeys;
      }
      i = t.slice(1).map(function(s) {
        return s.length === 0 ? void 0 : s;
      });
      break;
  }
  return {
    pubKeys: n,
    signatures: i
  };
}
function vR(e, t) {
  if (e.length === 0 && t.length === 0)
    return {};
  var r, n, i, o, s, a, f, l, h = !1, y = !1, v = !1, g, m, E = bn.decompile(e), O = Oe.classifyInput(E, !0);
  O === Fe.P2SH && (v = !0, s = E[E.length - 1], l = Oe.classifyOutput(s), r = Oe.scriptHash.output.encode(or.hash160(s)), n = Fe.P2SH, o = s);
  var x = Oe.classifyWitness(t, !0);
  if (x === Fe.P2WSH) {
    if (a = t[t.length - 1], f = Oe.classifyOutput(a), y = !0, h = !0, e.length === 0) {
      if (r = Oe.witnessScriptHash.output.encode(or.sha256(a)), n = Fe.P2WSH, s !== void 0)
        throw new Error("Redeem script given when unnecessary");
    } else {
      if (!s)
        throw new Error("No redeemScript provided for P2WSH, but scriptSig non-empty");
      if (g = Oe.witnessScriptHash.output.encode(or.sha256(a)), !s.equals(g))
        throw new Error("Redeem script didn't match witnessScript");
    }
    if (!Ci(Oe.classifyOutput(a)))
      throw new Error("unsupported witness script");
    o = a, i = f, m = t.slice(0, -1);
  } else if (x === Fe.P2WPKH) {
    h = !0;
    var U = t[t.length - 1], H = or.hash160(U);
    if (e.length === 0) {
      if (r = Oe.witnessPubKeyHash.output.encode(H), n = Fe.P2WPKH, typeof s < "u")
        throw new Error("Redeem script given when unnecessary");
    } else {
      if (!s)
        throw new Error("No redeemScript provided for P2WPKH, but scriptSig wasn't empty");
      if (g = Oe.witnessPubKeyHash.output.encode(H), !s.equals(g))
        throw new Error("Redeem script did not have the right witness program");
    }
    i = Fe.P2PKH, m = t;
  } else if (s) {
    if (!Ov(l))
      throw new Error("Bad redeemscript!");
    o = s, i = l, m = E.slice(0, -1);
  } else
    n = i = Oe.classifyInput(e), m = E;
  var M = bR(i, m, o), k = {
    pubKeys: M.pubKeys,
    signatures: M.signatures,
    prevOutScript: r,
    prevOutType: n,
    signType: i,
    signScript: o,
    witness: !!h
  };
  return v && (k.redeemScript = s, k.redeemScriptType = l), y && (k.witnessScript = a, k.witnessScriptType = f), k;
}
function wR(e, t, r, n, i) {
  if (!(e.redeemScriptType !== Fe.MULTISIG || !e.redeemScript) && e.pubKeys.length !== e.signatures.length) {
    var o = e.signatures.concat();
    e.signatures = e.pubKeys.map(function(s) {
      var a = gR.fromPublicKeyBuffer(s), f;
      return o.some(function(l, h) {
        if (!l)
          return !1;
        var y = Sv.parseScriptSignature(l), v;
        return i ? v = t.hashForCashSignature(r, e.signScript, n, y.hashType) : e.witness ? v = t.hashForWitnessV0(r, e.signScript, n, y.hashType) : v = t.hashForSignature(r, e.signScript, y.hashType), a.verify(v, y.signature) ? (o[h] = void 0, f = l, !0) : !1;
      }), f;
    });
  }
}
function Ri(e, t, r) {
  Dh(Mh.Buffer, e);
  var n = bn.decompile(e);
  t || (t = Oe.classifyOutput(e));
  var i = [];
  switch (t) {
    case Fe.P2PKH:
      if (!r)
        break;
      var o = n[2], s = or.hash160(r);
      o.equals(s) && (i = [r]);
      break;
    case Fe.P2WPKH:
      if (!r)
        break;
      var a = n[1], f = or.hash160(r);
      a.equals(f) && (i = [r]);
      break;
    case Fe.P2PK:
      i = n.slice(0, 1);
      break;
    case Fe.MULTISIG:
      i = n.slice(1, -2);
      break;
    default:
      return { scriptType: t };
  }
  return {
    pubKeys: i,
    scriptType: t,
    signatures: i.map(function() {
    })
  };
}
function l0(e, t) {
  if (e.prevOutType) {
    if (e.prevOutType !== Fe.P2SH)
      throw new Error("PrevOutScript must be P2SH");
    var r = bn.decompile(e.prevOutScript)[1];
    if (!r.equals(t))
      throw new Error("Inconsistent hash160(RedeemScript)");
  }
}
function mR(e, t) {
  if (e.prevOutType) {
    if (e.prevOutType !== Fe.P2WSH)
      throw new Error("PrevOutScript must be P2WSH");
    var r = bn.decompile(e.prevOutScript)[1];
    if (!r.equals(t))
      throw new Error("Inconsistent sha25(WitnessScript)");
  }
}
function ER(e, t, r, n, i) {
  var o, s, a, f = !1, l, h, y = !1, v = !1, g, m, E, O;
  if (r && i) {
    if (h = or.hash160(r), m = or.sha256(i), l0(e, h), !r.equals(Oe.witnessScriptHash.output.encode(m)))
      throw new Error("Witness script inconsistent with redeem script");
    if (o = Ri(i, void 0, t), !o.pubKeys)
      throw new Error('WitnessScript not supported "' + bn.toASM(r) + '"');
    s = Oe.types.P2SH, a = Oe.scriptHash.output.encode(h), f = y = v = !0, l = Oe.types.P2WSH, E = g = o.scriptType, O = i;
  } else if (r) {
    if (h = or.hash160(r), l0(e, h), o = Ri(r, void 0, t), !o.pubKeys)
      throw new Error('RedeemScript not supported "' + bn.toASM(r) + '"');
    s = Oe.types.P2SH, a = Oe.scriptHash.output.encode(h), f = !0, E = l = o.scriptType, O = r, y = E === Oe.types.P2WPKH;
  } else if (i) {
    if (m = or.sha256(i), mR(e, m), o = Ri(i, void 0, t), !o.pubKeys)
      throw new Error('WitnessScript not supported "' + bn.toASM(r) + '"');
    s = Oe.types.P2WSH, a = Oe.witnessScriptHash.output.encode(m), y = v = !0, E = g = o.scriptType, O = i;
  } else if (e.prevOutType) {
    if (e.prevOutType === Fe.P2SH || e.prevOutType === Fe.P2WSH)
      throw new Error("PrevOutScript is " + e.prevOutType + ", requires redeemScript");
    if (s = e.prevOutType, a = e.prevOutScript, o = Ri(e.prevOutScript, e.prevOutType, t), !o.pubKeys)
      return;
    y = e.prevOutType === Fe.P2WPKH, E = s, O = a;
  } else
    a = Oe.pubKeyHash.output.encode(or.hash160(t)), o = Ri(a, Fe.P2PKH, t), s = Fe.P2PKH, y = !1, E = s, O = a;
  E === Fe.P2WPKH && (O = Oe.pubKeyHash.output.encode(Oe.witnessPubKeyHash.output.decode(O))), f && (e.redeemScript = r, e.redeemScriptType = l), v && (e.witnessScript = i, e.witnessScriptType = g), e.pubKeys = o.pubKeys, e.signatures = o.signatures, e.signScript = O, e.signType = E, e.prevOutScript = a, e.prevOutType = s, e.witness = y;
}
function Gs(e, t, r, n) {
  if (e === Fe.P2PKH) {
    if (t.length === 1 && Ca.isBuffer(t[0]) && r.length === 1)
      return Oe.pubKeyHash.input.encodeStack(t[0], r[0]);
  } else if (e === Fe.P2PK) {
    if (t.length === 1 && Ca.isBuffer(t[0]))
      return Oe.pubKey.input.encodeStack(t[0]);
  } else if (e === Fe.MULTISIG) {
    if (t.length > 0)
      return t = t.map(function(i) {
        return i || u0.OP_0;
      }), n || (t = t.filter(function(i) {
        return i !== u0.OP_0;
      })), Oe.multisig.input.encodeStack(t);
  } else
    throw new Error("Not yet supported");
  if (!n)
    throw new Error("Not enough signatures provided");
  return [];
}
function _R(e, t) {
  var r = e.prevOutType, n = [], i = [];
  Ci(r) && (n = Gs(r, e.signatures, e.pubKeys, t));
  var o = !1;
  if (r === Oe.types.P2SH) {
    if (!t && !Ov(e.redeemScriptType))
      throw new Error("Impossible to sign this type");
    Ci(e.redeemScriptType) && (n = Gs(e.redeemScriptType, e.signatures, e.pubKeys, t)), e.redeemScriptType && (o = !0, r = e.redeemScriptType);
  }
  switch (r) {
    case Oe.types.P2WPKH:
      i = Gs(Oe.types.P2PKH, e.signatures, e.pubKeys, t);
      break;
    case Oe.types.P2WSH:
      if (!t && !Ci(e.witnessScriptType))
        throw new Error("Impossible to sign this type");
      Ci(e.witnessScriptType) && (i = Gs(e.witnessScriptType, e.signatures, e.pubKeys, t), i.push(e.witnessScript), r = e.witnessScriptType);
      break;
  }
  return o && n.push(e.redeemScript), {
    type: r,
    script: bn.compile(n),
    witness: i
  };
}
function jt(e, t) {
  this.prevTxMap = {}, this.network = e || dR.bitcoin, this.maximumFeeRate = t || 2500, this.inputs = [], this.bitcoinCash = !0, this.tx = new _n();
}
jt.prototype.setLockTime = function(e) {
  if (Dh(Mh.UInt32, e), this.inputs.some(function(t) {
    return t.signatures ? t.signatures.some(function(r) {
      return r;
    }) : !1;
  }))
    throw new Error("No, this would invalidate signatures");
  this.tx.locktime = e;
};
jt.fromTransaction = function(e, t, r) {
  var n = new jt(t);
  return n.setLockTime(e.locktime), e.outs.forEach(function(i) {
    n.addOutput(i.script, i.value);
  }), e.ins.forEach(function(i) {
    n.__addInputUnsafe(i.hash, i.index, {
      sequence: i.sequence,
      script: i.script,
      witness: i.witness,
      value: i.value
    });
  }), n.inputs.forEach(function(i, o) {
    wR(i, e, o, i.value, r);
  }), n;
};
jt.prototype.addInput = function(e, t, r, n) {
  if (!this.__canModifyInputs())
    throw new Error("No, this would invalidate signatures");
  var i;
  if (typeof e == "string")
    e = Ca.from(e, "hex").reverse();
  else if (e instanceof _n) {
    var o = e.outs[t];
    n = o.script, i = o.value, e = e.getHash();
  }
  return this.__addInputUnsafe(e, t, {
    sequence: r,
    prevOutScript: n,
    value: i
  });
};
jt.prototype.__addInputUnsafe = function(e, t, r) {
  if (_n.isCoinbaseHash(e))
    throw new Error("coinbase inputs not supported");
  var n = e.toString("hex") + ":" + t;
  if (this.prevTxMap[n] !== void 0)
    throw new Error("Duplicate TxOut: " + n);
  var i = {};
  if (r.script !== void 0 && (i = vR(r.script, r.witness || [])), r.value !== void 0 && (i.value = r.value), !i.prevOutScript && r.prevOutScript) {
    var o;
    if (!i.pubKeys && !i.signatures) {
      var s = Ri(r.prevOutScript);
      s.pubKeys && (i.pubKeys = s.pubKeys, i.signatures = s.signatures), o = s.scriptType;
    }
    i.prevOutScript = r.prevOutScript, i.prevOutType = o || Oe.classifyOutput(r.prevOutScript);
  }
  var a = this.tx.addInput(e, t, r.sequence, r.scriptSig);
  return this.inputs[a] = i, this.prevTxMap[n] = a, a;
};
jt.prototype.addOutput = function(e, t) {
  if (!this.__canModifyOutputs())
    throw new Error("No, this would invalidate signatures");
  return typeof e == "string" && (e = pR.toOutputScript(e, this.network)), this.tx.addOutput(e, t);
};
jt.prototype.build = function() {
  return this.__build(!1);
};
jt.prototype.buildIncomplete = function() {
  return this.__build(!0);
};
jt.prototype.__build = function(e) {
  if (!e) {
    if (!this.tx.ins.length)
      throw new Error("Transaction has no inputs");
    if (!this.tx.outs.length)
      throw new Error("Transaction has no outputs");
  }
  var t = this.tx.clone();
  if (this.inputs.forEach(function(r, n) {
    var i = r.witnessScriptType || r.redeemScriptType || r.prevOutType;
    if (!i && !e)
      throw new Error("Transaction is not complete");
    var o = _R(r, e);
    if (!e && !Ci(o.type) && o.type !== Oe.types.P2WPKH)
      throw new Error(o.type + " not supported");
    t.setInputScript(n, o.script), t.setWitness(n, o.witness);
  }), !e && this.__overMaximumFees(t.virtualSize()))
    throw new Error("Transaction has absurd fees");
  return t;
};
function ru(e) {
  return e.prevOutScript !== void 0 && e.signScript !== void 0 && e.pubKeys !== void 0 && e.signatures !== void 0 && e.signatures.length === e.pubKeys.length && e.pubKeys.length > 0 && (e.witness === !1 || e.witness === !0 && e.value !== void 0);
}
jt.prototype.sign = function(e, t, r, n, i, o, s) {
  if (n = n | _n.SIGHASH_BITCOINCASHBIP143, !this.inputs[e])
    throw new Error("No input at index: " + e);
  n = n || _n.SIGHASH_ALL;
  var a = this.inputs[e];
  if (a.redeemScript !== void 0 && r && !a.redeemScript.equals(r))
    throw new Error("Inconsistent redeemScript");
  var f = t.publicKey || t.getPublicKeyBuffer();
  if (!ru(a)) {
    if (i !== void 0) {
      if (a.value !== void 0 && a.value !== i)
        throw new Error("Input didn't match witnessValue");
      Dh(Mh.Satoshi, i), a.value = i;
    }
    if (ru(a) || ER(a, f, r, i, o), !ru(a))
      throw Error(a.prevOutType + " not supported");
  }
  var l = this.tx.hashForCashSignature(e, a.signScript, i, n), h = a.pubKeys.some(function(y, v) {
    if (!f.equals(y))
      return !1;
    if (a.signatures[v])
      throw new Error("Signature already exists");
    if (f.length !== 33 && a.signType === Fe.P2WPKH)
      throw new Error("BIP143 rejects uncompressed public keys in P2WPKH or P2WSH");
    var g = t.sign(l, s);
    return Ca.isBuffer(g) && (g = Sv.fromRSBuffer(g)), a.signatures[v] = g.toScriptSignature(n, s), !0;
  });
  if (!h)
    throw new Error("Key pair cannot sign for this input");
};
function Av(e) {
  return e.readUInt8(e.length - 1);
}
jt.prototype.__canModifyInputs = function() {
  return this.inputs.every(function(e) {
    return e.signatures === void 0 ? !0 : e.signatures.every(function(t) {
      if (!t)
        return !0;
      var r = Av(t);
      return r & _n.SIGHASH_ANYONECANPAY;
    });
  });
};
jt.prototype.__canModifyOutputs = function() {
  var e = this.tx.ins.length, t = this.tx.outs.length;
  return this.inputs.every(function(r) {
    return r.signatures === void 0 ? !0 : r.signatures.every(function(n) {
      if (!n)
        return !0;
      var i = Av(n), o = i & 31;
      if (o === _n.SIGHASH_NONE)
        return !0;
      if (o === _n.SIGHASH_SINGLE)
        return e <= t;
    });
  });
};
jt.prototype.__overMaximumFees = function(e) {
  var t = this.inputs.reduce(function(o, s) {
    return o + (s.value >>> 0);
  }, 0), r = this.tx.outs.reduce(function(o, s) {
    return o + s.value;
  }, 0), n = t - r, i = n / e;
  return i > this.maximumFeeRate;
};
var SR = jt, Tv = at, h0 = Sh;
for (var p0 in h0)
  Tv[p0] = h0[p0];
var Bo = {
  bufferutils: N1,
  // TODO: remove in 4.0.0
  Block: XB,
  ECPair: Hh,
  ECSignature: ds,
  HDNode: hR,
  Transaction: Ih,
  TransactionBuilder: SR,
  address: xh,
  crypto: gi,
  networks: hs,
  opcodes: Lt,
  script: Tv
};
/**
 * @license
 * https://github.com/ealmansi/cashaddrjs
 * Copyright (c) 2017-2020 Emilio Almansi
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */
function Fh(e) {
  var t = new Error();
  this.name = t.name = "ValidationError", this.message = t.message = e, this.stack = t.stack;
}
Fh.prototype = Object.create(Error.prototype);
function OR(e, t) {
  if (!e)
    throw new Fh(t);
}
var jh = {
  ValidationError: Fh,
  validate: OR
};
/**
 * @license
 * https://github.com/ealmansi/cashaddrjs
 * Copyright (c) 2017-2020 Emilio Almansi
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */
var $a = jh.validate, AR = "qpzry9x8gf2tvdw0s3jn54khce6mua7l", d0 = {
  q: 0,
  p: 1,
  z: 2,
  r: 3,
  y: 4,
  9: 5,
  x: 6,
  8: 7,
  g: 8,
  f: 9,
  2: 10,
  t: 11,
  v: 12,
  d: 13,
  w: 14,
  0: 15,
  s: 16,
  3: 17,
  j: 18,
  n: 19,
  5: 20,
  4: 21,
  k: 22,
  h: 23,
  c: 24,
  e: 25,
  6: 26,
  m: 27,
  u: 28,
  a: 29,
  7: 30,
  l: 31
};
function TR(e) {
  $a(e instanceof Uint8Array, "Invalid data: " + e + ".");
  for (var t = "", r = 0; r < e.length; ++r) {
    var n = e[r];
    $a(0 <= n && n < 32, "Invalid value: " + n + "."), t += AR[n];
  }
  return t;
}
function IR(e) {
  $a(typeof e == "string", "Invalid base32-encoded string: " + e + ".");
  for (var t = new Uint8Array(e.length), r = 0; r < e.length; ++r) {
    var n = e[r];
    $a(n in d0, "Invalid value: " + n + "."), t[r] = d0[n];
  }
  return t;
}
var PR = {
  encode: TR,
  decode: IR
}, Iv = { exports: {} };
(function(e) {
  var t = function(r) {
    var n = 1e7, i = 7, o = 9007199254740992, s = v(o), a = Math.log(o);
    function f(d, b) {
      return typeof d > "u" ? f[0] : typeof b < "u" ? +b == 10 ? ge(d) : be(d, b) : ge(d);
    }
    function l(d, b) {
      this.value = d, this.sign = b, this.isSmall = !1;
    }
    l.prototype = Object.create(f.prototype);
    function h(d) {
      this.value = d, this.sign = d < 0, this.isSmall = !0;
    }
    h.prototype = Object.create(f.prototype);
    function y(d) {
      return -o < d && d < o;
    }
    function v(d) {
      return d < 1e7 ? [d] : d < 1e14 ? [d % 1e7, Math.floor(d / 1e7)] : [d % 1e7, Math.floor(d / 1e7) % 1e7, Math.floor(d / 1e14)];
    }
    function g(d) {
      m(d);
      var b = d.length;
      if (b < 4 && pe(d, s) < 0)
        switch (b) {
          case 0:
            return 0;
          case 1:
            return d[0];
          case 2:
            return d[0] + d[1] * n;
          default:
            return d[0] + (d[1] + d[2] * n) * n;
        }
      return d;
    }
    function m(d) {
      for (var b = d.length; d[--b] === 0; )
        ;
      d.length = b + 1;
    }
    function E(d) {
      for (var b = new Array(d), B = -1; ++B < d; )
        b[B] = 0;
      return b;
    }
    function O(d) {
      return d > 0 ? Math.floor(d) : Math.ceil(d);
    }
    function x(d, b) {
      var B = d.length, p = b.length, c = new Array(B), u = 0, w = n, I, R;
      for (R = 0; R < p; R++)
        I = d[R] + b[R] + u, u = I >= w ? 1 : 0, c[R] = I - u * w;
      for (; R < B; )
        I = d[R] + u, u = I === w ? 1 : 0, c[R++] = I - u * w;
      return u > 0 && c.push(u), c;
    }
    function U(d, b) {
      return d.length >= b.length ? x(d, b) : x(b, d);
    }
    function H(d, b) {
      var B = d.length, p = new Array(B), c = n, u, w;
      for (w = 0; w < B; w++)
        u = d[w] - c + b, b = Math.floor(u / c), p[w] = u - b * c, b += 1;
      for (; b > 0; )
        p[w++] = b % c, b = Math.floor(b / c);
      return p;
    }
    l.prototype.add = function(d) {
      var b = ge(d);
      if (this.sign !== b.sign)
        return this.subtract(b.negate());
      var B = this.value, p = b.value;
      return b.isSmall ? new l(H(B, Math.abs(p)), this.sign) : new l(U(B, p), this.sign);
    }, l.prototype.plus = l.prototype.add, h.prototype.add = function(d) {
      var b = ge(d), B = this.value;
      if (B < 0 !== b.sign)
        return this.subtract(b.negate());
      var p = b.value;
      if (b.isSmall) {
        if (y(B + p))
          return new h(B + p);
        p = v(Math.abs(p));
      }
      return new l(H(p, Math.abs(B)), B < 0);
    }, h.prototype.plus = h.prototype.add;
    function M(d, b) {
      var B = d.length, p = b.length, c = new Array(B), u = 0, w = n, I, R;
      for (I = 0; I < p; I++)
        R = d[I] - u - b[I], R < 0 ? (R += w, u = 1) : u = 0, c[I] = R;
      for (I = p; I < B; I++) {
        if (R = d[I] - u, R < 0)
          R += w;
        else {
          c[I++] = R;
          break;
        }
        c[I] = R;
      }
      for (; I < B; I++)
        c[I] = d[I];
      return m(c), c;
    }
    function k(d, b, B) {
      var p;
      return pe(d, b) >= 0 ? p = M(d, b) : (p = M(b, d), B = !B), p = g(p), typeof p == "number" ? (B && (p = -p), new h(p)) : new l(p, B);
    }
    function _(d, b, B) {
      var p = d.length, c = new Array(p), u = -b, w = n, I, R;
      for (I = 0; I < p; I++)
        R = d[I] + u, u = Math.floor(R / w), R %= w, c[I] = R < 0 ? R + w : R;
      return c = g(c), typeof c == "number" ? (B && (c = -c), new h(c)) : new l(c, B);
    }
    l.prototype.subtract = function(d) {
      var b = ge(d);
      if (this.sign !== b.sign)
        return this.add(b.negate());
      var B = this.value, p = b.value;
      return b.isSmall ? _(B, Math.abs(p), this.sign) : k(B, p, this.sign);
    }, l.prototype.minus = l.prototype.subtract, h.prototype.subtract = function(d) {
      var b = ge(d), B = this.value;
      if (B < 0 !== b.sign)
        return this.add(b.negate());
      var p = b.value;
      return b.isSmall ? new h(B - p) : _(p, Math.abs(B), B >= 0);
    }, h.prototype.minus = h.prototype.subtract, l.prototype.negate = function() {
      return new l(this.value, !this.sign);
    }, h.prototype.negate = function() {
      var d = this.sign, b = new h(-this.value);
      return b.sign = !d, b;
    }, l.prototype.abs = function() {
      return new l(this.value, !1);
    }, h.prototype.abs = function() {
      return new h(Math.abs(this.value));
    };
    function L(d, b) {
      var B = d.length, p = b.length, c = B + p, u = E(c), w = n, I, R, G, oe, le;
      for (G = 0; G < B; ++G) {
        oe = d[G];
        for (var he = 0; he < p; ++he)
          le = b[he], I = oe * le + u[G + he], R = Math.floor(I / w), u[G + he] = I - R * w, u[G + he + 1] += R;
      }
      return m(u), u;
    }
    function j(d, b) {
      var B = d.length, p = new Array(B), c = n, u = 0, w, I;
      for (I = 0; I < B; I++)
        w = d[I] * b + u, u = Math.floor(w / c), p[I] = w - u * c;
      for (; u > 0; )
        p[I++] = u % c, u = Math.floor(u / c);
      return p;
    }
    function F(d, b) {
      for (var B = []; b-- > 0; )
        B.push(0);
      return B.concat(d);
    }
    function W(d, b) {
      var B = Math.max(d.length, b.length);
      if (B <= 30)
        return L(d, b);
      B = Math.ceil(B / 2);
      var p = d.slice(B), c = d.slice(0, B), u = b.slice(B), w = b.slice(0, B), I = W(c, w), R = W(p, u), G = W(U(c, p), U(w, u)), oe = U(U(I, F(M(M(G, I), R), B)), F(R, 2 * B));
      return m(oe), oe;
    }
    function te(d, b) {
      return -0.012 * d - 0.012 * b + 15e-6 * d * b > 0;
    }
    l.prototype.multiply = function(d) {
      var b = ge(d), B = this.value, p = b.value, c = this.sign !== b.sign, u;
      if (b.isSmall) {
        if (p === 0)
          return f[0];
        if (p === 1)
          return this;
        if (p === -1)
          return this.negate();
        if (u = Math.abs(p), u < n)
          return new l(j(B, u), c);
        p = v(u);
      }
      return te(B.length, p.length) ? new l(W(B, p), c) : new l(L(B, p), c);
    }, l.prototype.times = l.prototype.multiply;
    function re(d, b, B) {
      return d < n ? new l(j(b, d), B) : new l(L(b, v(d)), B);
    }
    h.prototype._multiplyBySmall = function(d) {
      return y(d.value * this.value) ? new h(d.value * this.value) : re(Math.abs(d.value), v(Math.abs(this.value)), this.sign !== d.sign);
    }, l.prototype._multiplyBySmall = function(d) {
      return d.value === 0 ? f[0] : d.value === 1 ? this : d.value === -1 ? this.negate() : re(Math.abs(d.value), this.value, this.sign !== d.sign);
    }, h.prototype.multiply = function(d) {
      return ge(d)._multiplyBySmall(this);
    }, h.prototype.times = h.prototype.multiply;
    function ae(d) {
      var b = d.length, B = E(b + b), p = n, c, u, w, I, R;
      for (w = 0; w < b; w++) {
        I = d[w], u = 0 - I * I;
        for (var G = w; G < b; G++)
          R = d[G], c = 2 * (I * R) + B[w + G] + u, u = Math.floor(c / p), B[w + G] = c - u * p;
        B[w + b] = u;
      }
      return m(B), B;
    }
    l.prototype.square = function() {
      return new l(ae(this.value), !1);
    }, h.prototype.square = function() {
      var d = this.value * this.value;
      return y(d) ? new h(d) : new l(ae(v(Math.abs(this.value))), !1);
    };
    function de(d, b) {
      var B = d.length, p = b.length, c = n, u = E(b.length), w = b[p - 1], I = Math.ceil(c / (2 * w)), R = j(d, I), G = j(b, I), oe, le, he, _e, ve, xr, Df;
      for (R.length <= B && R.push(0), G.push(0), w = G[p - 1], le = B - p; le >= 0; le--) {
        for (oe = c - 1, R[le + p] !== w && (oe = Math.floor((R[le + p] * c + R[le + p - 1]) / w)), he = 0, _e = 0, xr = G.length, ve = 0; ve < xr; ve++)
          he += oe * G[ve], Df = Math.floor(he / c), _e += R[le + ve] - (he - Df * c), he = Df, _e < 0 ? (R[le + ve] = _e + c, _e = -1) : (R[le + ve] = _e, _e = 0);
        for (; _e !== 0; ) {
          for (oe -= 1, he = 0, ve = 0; ve < xr; ve++)
            he += R[le + ve] - c + G[ve], he < 0 ? (R[le + ve] = he + c, he = 0) : (R[le + ve] = he, he = 1);
          _e += he;
        }
        u[le] = oe;
      }
      return R = ne(R, I)[0], [g(u), g(R)];
    }
    function J(d, b) {
      for (var B = d.length, p = b.length, c = [], u = [], w = n, I, R, G, oe, le; B; ) {
        if (u.unshift(d[--B]), m(u), pe(u, b) < 0) {
          c.push(0);
          continue;
        }
        R = u.length, G = u[R - 1] * w + u[R - 2], oe = b[p - 1] * w + b[p - 2], R > p && (G = (G + 1) * w), I = Math.ceil(G / oe);
        do {
          if (le = j(b, I), pe(le, u) <= 0)
            break;
          I--;
        } while (I);
        c.push(I), u = M(u, le);
      }
      return c.reverse(), [g(c), g(u)];
    }
    function ne(d, b) {
      var B = d.length, p = E(B), c = n, u, w, I, R;
      for (I = 0, u = B - 1; u >= 0; --u)
        R = I * c + d[u], w = O(R / b), I = R - w * b, p[u] = w | 0;
      return [p, I | 0];
    }
    function ue(d, b) {
      var B, p = ge(b), c = d.value, u = p.value, w;
      if (u === 0)
        throw new Error("Cannot divide by zero");
      if (d.isSmall)
        return p.isSmall ? [new h(O(c / u)), new h(c % u)] : [f[0], d];
      if (p.isSmall) {
        if (u === 1)
          return [d, f[0]];
        if (u == -1)
          return [d.negate(), f[0]];
        var I = Math.abs(u);
        if (I < n) {
          B = ne(c, I), w = g(B[0]);
          var R = B[1];
          return d.sign && (R = -R), typeof w == "number" ? (d.sign !== p.sign && (w = -w), [new h(w), new h(R)]) : [new l(w, d.sign !== p.sign), new h(R)];
        }
        u = v(I);
      }
      var G = pe(c, u);
      if (G === -1)
        return [f[0], d];
      if (G === 0)
        return [f[d.sign === p.sign ? 1 : -1], f[0]];
      c.length + u.length <= 200 ? B = de(c, u) : B = J(c, u), w = B[0];
      var oe = d.sign !== p.sign, le = B[1], he = d.sign;
      return typeof w == "number" ? (oe && (w = -w), w = new h(w)) : w = new l(w, oe), typeof le == "number" ? (he && (le = -le), le = new h(le)) : le = new l(le, he), [w, le];
    }
    l.prototype.divmod = function(d) {
      var b = ue(this, d);
      return {
        quotient: b[0],
        remainder: b[1]
      };
    }, h.prototype.divmod = l.prototype.divmod, l.prototype.divide = function(d) {
      return ue(this, d)[0];
    }, h.prototype.over = h.prototype.divide = l.prototype.over = l.prototype.divide, l.prototype.mod = function(d) {
      return ue(this, d)[1];
    }, h.prototype.remainder = h.prototype.mod = l.prototype.remainder = l.prototype.mod, l.prototype.pow = function(d) {
      var b = ge(d), B = this.value, p = b.value, c, u, w;
      if (p === 0)
        return f[1];
      if (B === 0)
        return f[0];
      if (B === 1)
        return f[1];
      if (B === -1)
        return b.isEven() ? f[1] : f[-1];
      if (b.sign)
        return f[0];
      if (!b.isSmall)
        throw new Error("The exponent " + b.toString() + " is too large.");
      if (this.isSmall && y(c = Math.pow(B, p)))
        return new h(O(c));
      for (u = this, w = f[1]; p & !0 && (w = w.times(u), --p), p !== 0; )
        p /= 2, u = u.square();
      return w;
    }, h.prototype.pow = l.prototype.pow, l.prototype.modPow = function(d, b) {
      if (d = ge(d), b = ge(b), b.isZero())
        throw new Error("Cannot take modPow with modulus 0");
      for (var B = f[1], p = this.mod(b); d.isPositive(); ) {
        if (p.isZero())
          return f[0];
        d.isOdd() && (B = B.multiply(p).mod(b)), d = d.divide(2), p = p.square().mod(b);
      }
      return B;
    }, h.prototype.modPow = l.prototype.modPow;
    function pe(d, b) {
      if (d.length !== b.length)
        return d.length > b.length ? 1 : -1;
      for (var B = d.length - 1; B >= 0; B--)
        if (d[B] !== b[B])
          return d[B] > b[B] ? 1 : -1;
      return 0;
    }
    l.prototype.compareAbs = function(d) {
      var b = ge(d), B = this.value, p = b.value;
      return b.isSmall ? 1 : pe(B, p);
    }, h.prototype.compareAbs = function(d) {
      var b = ge(d), B = Math.abs(this.value), p = b.value;
      return b.isSmall ? (p = Math.abs(p), B === p ? 0 : B > p ? 1 : -1) : -1;
    }, l.prototype.compare = function(d) {
      if (d === 1 / 0)
        return -1;
      if (d === -1 / 0)
        return 1;
      var b = ge(d), B = this.value, p = b.value;
      return this.sign !== b.sign ? b.sign ? 1 : -1 : b.isSmall ? this.sign ? -1 : 1 : pe(B, p) * (this.sign ? -1 : 1);
    }, l.prototype.compareTo = l.prototype.compare, h.prototype.compare = function(d) {
      if (d === 1 / 0)
        return -1;
      if (d === -1 / 0)
        return 1;
      var b = ge(d), B = this.value, p = b.value;
      return b.isSmall ? B == p ? 0 : B > p ? 1 : -1 : B < 0 !== b.sign ? B < 0 ? -1 : 1 : B < 0 ? 1 : -1;
    }, h.prototype.compareTo = h.prototype.compare, l.prototype.equals = function(d) {
      return this.compare(d) === 0;
    }, h.prototype.eq = h.prototype.equals = l.prototype.eq = l.prototype.equals, l.prototype.notEquals = function(d) {
      return this.compare(d) !== 0;
    }, h.prototype.neq = h.prototype.notEquals = l.prototype.neq = l.prototype.notEquals, l.prototype.greater = function(d) {
      return this.compare(d) > 0;
    }, h.prototype.gt = h.prototype.greater = l.prototype.gt = l.prototype.greater, l.prototype.lesser = function(d) {
      return this.compare(d) < 0;
    }, h.prototype.lt = h.prototype.lesser = l.prototype.lt = l.prototype.lesser, l.prototype.greaterOrEquals = function(d) {
      return this.compare(d) >= 0;
    }, h.prototype.geq = h.prototype.greaterOrEquals = l.prototype.geq = l.prototype.greaterOrEquals, l.prototype.lesserOrEquals = function(d) {
      return this.compare(d) <= 0;
    }, h.prototype.leq = h.prototype.lesserOrEquals = l.prototype.leq = l.prototype.lesserOrEquals, l.prototype.isEven = function() {
      return (this.value[0] & 1) === 0;
    }, h.prototype.isEven = function() {
      return (this.value & 1) === 0;
    }, l.prototype.isOdd = function() {
      return (this.value[0] & 1) === 1;
    }, h.prototype.isOdd = function() {
      return (this.value & 1) === 1;
    }, l.prototype.isPositive = function() {
      return !this.sign;
    }, h.prototype.isPositive = function() {
      return this.value > 0;
    }, l.prototype.isNegative = function() {
      return this.sign;
    }, h.prototype.isNegative = function() {
      return this.value < 0;
    }, l.prototype.isUnit = function() {
      return !1;
    }, h.prototype.isUnit = function() {
      return Math.abs(this.value) === 1;
    }, l.prototype.isZero = function() {
      return !1;
    }, h.prototype.isZero = function() {
      return this.value === 0;
    }, l.prototype.isDivisibleBy = function(d) {
      var b = ge(d), B = b.value;
      return B === 0 ? !1 : B === 1 ? !0 : B === 2 ? this.isEven() : this.mod(b).equals(f[0]);
    }, h.prototype.isDivisibleBy = l.prototype.isDivisibleBy;
    function z(d) {
      var b = d.abs();
      if (b.isUnit())
        return !1;
      if (b.equals(2) || b.equals(3) || b.equals(5))
        return !0;
      if (b.isEven() || b.isDivisibleBy(3) || b.isDivisibleBy(5))
        return !1;
      if (b.lesser(49))
        return !0;
    }
    function Y(d, b) {
      for (var B = d.prev(), p = B, c = 0, u, w, I; p.isEven(); )
        p = p.divide(2), c++;
      e:
        for (w = 0; w < b.length; w++)
          if (!d.lesser(b[w]) && (I = t(b[w]).modPow(p, d), !(I.equals(f[1]) || I.equals(B)))) {
            for (u = c - 1; u != 0; u--) {
              if (I = I.square().mod(d), I.isUnit())
                return !1;
              if (I.equals(B))
                continue e;
            }
            return !1;
          }
      return !0;
    }
    l.prototype.isPrime = function(d) {
      var b = z(this);
      if (b !== r)
        return b;
      var B = this.abs(), p = B.bitLength();
      if (p <= 64)
        return Y(B, [2, 325, 9375, 28178, 450775, 9780504, 1795265022]);
      for (var c = Math.log(2) * p, u = Math.ceil(d === !0 ? 2 * Math.pow(c, 2) : c), w = [], I = 0; I < u; I++)
        w.push(t(I + 2));
      return Y(B, w);
    }, h.prototype.isPrime = l.prototype.isPrime, l.prototype.isProbablePrime = function(d) {
      var b = z(this);
      if (b !== r)
        return b;
      for (var B = this.abs(), p = d === r ? 5 : d, c = [], u = 0; u < p; u++)
        c.push(t.randBetween(2, B.minus(2)));
      return Y(B, c);
    }, h.prototype.isProbablePrime = l.prototype.isProbablePrime, l.prototype.modInv = function(d) {
      for (var b = t.zero, B = t.one, p = ge(d), c = this.abs(), u, w, I; !c.equals(t.zero); )
        u = p.divide(c), w = b, I = p, b = B, p = c, B = w.subtract(u.multiply(B)), c = I.subtract(u.multiply(c));
      if (!p.equals(1))
        throw new Error(this.toString() + " and " + d.toString() + " are not co-prime");
      return b.compare(0) === -1 && (b = b.add(d)), this.isNegative() ? b.negate() : b;
    }, h.prototype.modInv = l.prototype.modInv, l.prototype.next = function() {
      var d = this.value;
      return this.sign ? _(d, 1, this.sign) : new l(H(d, 1), this.sign);
    }, h.prototype.next = function() {
      var d = this.value;
      return d + 1 < o ? new h(d + 1) : new l(s, !1);
    }, l.prototype.prev = function() {
      var d = this.value;
      return this.sign ? new l(H(d, 1), !0) : _(d, 1, this.sign);
    }, h.prototype.prev = function() {
      var d = this.value;
      return d - 1 > -o ? new h(d - 1) : new l(s, !0);
    };
    for (var ee = [1]; 2 * ee[ee.length - 1] <= n; )
      ee.push(2 * ee[ee.length - 1]);
    var $ = ee.length, q = ee[$ - 1];
    function X(d) {
      return (typeof d == "number" || typeof d == "string") && +Math.abs(d) <= n || d instanceof l && d.value.length <= 1;
    }
    l.prototype.shiftLeft = function(d) {
      if (!X(d))
        throw new Error(String(d) + " is too large for shifting.");
      if (d = +d, d < 0)
        return this.shiftRight(-d);
      var b = this;
      if (b.isZero())
        return b;
      for (; d >= $; )
        b = b.multiply(q), d -= $ - 1;
      return b.multiply(ee[d]);
    }, h.prototype.shiftLeft = l.prototype.shiftLeft, l.prototype.shiftRight = function(d) {
      var b;
      if (!X(d))
        throw new Error(String(d) + " is too large for shifting.");
      if (d = +d, d < 0)
        return this.shiftLeft(-d);
      for (var B = this; d >= $; ) {
        if (B.isZero() || B.isNegative() && B.isUnit())
          return B;
        b = ue(B, q), B = b[1].isNegative() ? b[0].prev() : b[0], d -= $ - 1;
      }
      return b = ue(B, ee[d]), b[1].isNegative() ? b[0].prev() : b[0];
    }, h.prototype.shiftRight = l.prototype.shiftRight;
    function ie(d, b, B) {
      b = ge(b);
      for (var p = d.isNegative(), c = b.isNegative(), u = p ? d.not() : d, w = c ? b.not() : b, I = 0, R = 0, G = null, oe = null, le = []; !u.isZero() || !w.isZero(); )
        G = ue(u, q), I = G[1].toJSNumber(), p && (I = q - 1 - I), oe = ue(w, q), R = oe[1].toJSNumber(), c && (R = q - 1 - R), u = G[0], w = oe[0], le.push(B(I, R));
      for (var he = B(p ? 1 : 0, c ? 1 : 0) !== 0 ? t(-1) : t(0), _e = le.length - 1; _e >= 0; _e -= 1)
        he = he.multiply(q).add(t(le[_e]));
      return he;
    }
    l.prototype.not = function() {
      return this.negate().prev();
    }, h.prototype.not = l.prototype.not, l.prototype.and = function(d) {
      return ie(this, d, function(b, B) {
        return b & B;
      });
    }, h.prototype.and = l.prototype.and, l.prototype.or = function(d) {
      return ie(this, d, function(b, B) {
        return b | B;
      });
    }, h.prototype.or = l.prototype.or, l.prototype.xor = function(d) {
      return ie(this, d, function(b, B) {
        return b ^ B;
      });
    }, h.prototype.xor = l.prototype.xor;
    var D = 1 << 30, A = (n & -n) * (n & -n) | D;
    function P(d) {
      var b = d.value, B = typeof b == "number" ? b | D : b[0] + b[1] * n | A;
      return B & -B;
    }
    function C(d, b) {
      if (b.compareTo(d) <= 0) {
        var B = C(d, b.square(b)), p = B.p, c = B.e, u = p.multiply(b);
        return u.compareTo(d) <= 0 ? { p: u, e: c * 2 + 1 } : { p, e: c * 2 };
      }
      return { p: t(1), e: 0 };
    }
    l.prototype.bitLength = function() {
      var d = this;
      return d.compareTo(t(0)) < 0 && (d = d.negate().subtract(t(1))), d.compareTo(t(0)) === 0 ? t(0) : t(C(d, t(2)).e).add(t(1));
    }, h.prototype.bitLength = l.prototype.bitLength;
    function K(d, b) {
      return d = ge(d), b = ge(b), d.greater(b) ? d : b;
    }
    function S(d, b) {
      return d = ge(d), b = ge(b), d.lesser(b) ? d : b;
    }
    function T(d, b) {
      if (d = ge(d).abs(), b = ge(b).abs(), d.equals(b))
        return d;
      if (d.isZero())
        return b;
      if (b.isZero())
        return d;
      for (var B = f[1], p, c; d.isEven() && b.isEven(); )
        p = Math.min(P(d), P(b)), d = d.divide(p), b = b.divide(p), B = B.multiply(p);
      for (; d.isEven(); )
        d = d.divide(P(d));
      do {
        for (; b.isEven(); )
          b = b.divide(P(b));
        d.greater(b) && (c = b, b = d, d = c), b = b.subtract(d);
      } while (!b.isZero());
      return B.isUnit() ? d : d.multiply(B);
    }
    function V(d, b) {
      return d = ge(d).abs(), b = ge(b).abs(), d.divide(T(d, b)).multiply(b);
    }
    function Q(d, b) {
      d = ge(d), b = ge(b);
      var B = S(d, b), p = K(d, b), c = p.subtract(B).add(1);
      if (c.isSmall)
        return B.add(Math.floor(Math.random() * c));
      for (var u = c.value.length - 1, w = [], I = !0, R = u; R >= 0; R--) {
        var G = I ? c.value[R] : n, oe = O(Math.random() * G);
        w.unshift(oe), oe < G && (I = !1);
      }
      return w = g(w), B.add(typeof w == "number" ? new h(w) : new l(w, !1));
    }
    var be = function(d, b) {
      for (var B = d.length, p, c = Math.abs(b), p = 0; p < B; p++) {
        var u = d[p].toLowerCase();
        if (u !== "-" && /[a-z0-9]/.test(u)) {
          if (/[0-9]/.test(u) && +u >= c) {
            if (u === "1" && c === 1)
              continue;
            throw new Error(u + " is not a valid digit in base " + b + ".");
          } else if (u.charCodeAt(0) - 87 >= c)
            throw new Error(u + " is not a valid digit in base " + b + ".");
        }
      }
      if (2 <= b && b <= 36 && B <= a / Math.log(b)) {
        var w = parseInt(d, b);
        if (isNaN(w))
          throw new Error(u + " is not a valid digit in base " + b + ".");
        return new h(parseInt(d, b));
      }
      b = ge(b);
      var I = [], R = d[0] === "-";
      for (p = R ? 1 : 0; p < d.length; p++) {
        var u = d[p].toLowerCase(), G = u.charCodeAt(0);
        if (48 <= G && G <= 57)
          I.push(ge(u));
        else if (97 <= G && G <= 122)
          I.push(ge(u.charCodeAt(0) - 87));
        else if (u === "<") {
          var oe = p;
          do
            p++;
          while (d[p] !== ">");
          I.push(ge(d.slice(oe + 1, p)));
        } else
          throw new Error(u + " is not a valid character");
      }
      return ye(I, b, R);
    };
    function ye(d, b, B) {
      var p = f[0], c = f[1], u;
      for (u = d.length - 1; u >= 0; u--)
        p = p.add(d[u].times(c)), c = c.times(b);
      return B ? p.negate() : p;
    }
    function Ee(d) {
      return d <= 35 ? "0123456789abcdefghijklmnopqrstuvwxyz".charAt(d) : "<" + d + ">";
    }
    function Ue(d, b) {
      if (b = t(b), b.isZero()) {
        if (d.isZero())
          return { value: [0], isNegative: !1 };
        throw new Error("Cannot convert nonzero numbers to base 0.");
      }
      if (b.equals(-1)) {
        if (d.isZero())
          return { value: [0], isNegative: !1 };
        if (d.isNegative())
          return {
            value: [].concat.apply(
              [],
              Array.apply(null, Array(-d)).map(Array.prototype.valueOf, [1, 0])
            ),
            isNegative: !1
          };
        var B = Array.apply(null, Array(+d - 1)).map(Array.prototype.valueOf, [0, 1]);
        return B.unshift([1]), {
          value: [].concat.apply([], B),
          isNegative: !1
        };
      }
      var p = !1;
      if (d.isNegative() && b.isPositive() && (p = !0, d = d.abs()), b.equals(1))
        return d.isZero() ? { value: [0], isNegative: !1 } : {
          value: Array.apply(null, Array(+d)).map(Number.prototype.valueOf, 1),
          isNegative: p
        };
      for (var c = [], u = d, w; u.isNegative() || u.compareAbs(b) >= 0; ) {
        w = u.divmod(b), u = w.quotient;
        var I = w.remainder;
        I.isNegative() && (I = b.minus(I).abs(), u = u.next()), c.push(I.toJSNumber());
      }
      return c.push(u.toJSNumber()), { value: c.reverse(), isNegative: p };
    }
    function Z(d, b) {
      var B = Ue(d, b);
      return (B.isNegative ? "-" : "") + B.value.map(Ee).join("");
    }
    l.prototype.toArray = function(d) {
      return Ue(this, d);
    }, h.prototype.toArray = function(d) {
      return Ue(this, d);
    }, l.prototype.toString = function(d) {
      if (d === r && (d = 10), d !== 10)
        return Z(this, d);
      for (var b = this.value, B = b.length, p = String(b[--B]), c = "0000000", u; --B >= 0; )
        u = String(b[B]), p += c.slice(u.length) + u;
      var w = this.sign ? "-" : "";
      return w + p;
    }, h.prototype.toString = function(d) {
      return d === r && (d = 10), d != 10 ? Z(this, d) : String(this.value);
    }, l.prototype.toJSON = h.prototype.toJSON = function() {
      return this.toString();
    }, l.prototype.valueOf = function() {
      return parseInt(this.toString(), 10);
    }, l.prototype.toJSNumber = l.prototype.valueOf, h.prototype.valueOf = function() {
      return this.value;
    }, h.prototype.toJSNumber = h.prototype.valueOf;
    function Tt(d) {
      if (y(+d)) {
        var b = +d;
        if (b === O(b))
          return new h(b);
        throw new Error("Invalid integer: " + d);
      }
      var B = d[0] === "-";
      B && (d = d.slice(1));
      var p = d.split(/e/i);
      if (p.length > 2)
        throw new Error("Invalid integer: " + p.join("e"));
      if (p.length === 2) {
        var c = p[1];
        if (c[0] === "+" && (c = c.slice(1)), c = +c, c !== O(c) || !y(c))
          throw new Error("Invalid integer: " + c + " is not a valid exponent.");
        var u = p[0], w = u.indexOf(".");
        if (w >= 0 && (c -= u.length - w - 1, u = u.slice(0, w) + u.slice(w + 1)), c < 0)
          throw new Error("Cannot include negative exponent part for integers");
        u += new Array(c + 1).join("0"), d = u;
      }
      var I = /^([0-9][0-9]*)$/.test(d);
      if (!I)
        throw new Error("Invalid integer: " + d);
      for (var R = [], G = d.length, oe = i, le = G - oe; G > 0; )
        R.push(+d.slice(le, G)), le -= oe, le < 0 && (le = 0), G -= oe;
      return m(R), new l(R, B);
    }
    function ze(d) {
      if (y(d)) {
        if (d !== O(d))
          throw new Error(d + " is not an integer.");
        return new h(d);
      }
      return Tt(d.toString());
    }
    function ge(d) {
      return typeof d == "number" ? ze(d) : typeof d == "string" ? Tt(d) : d;
    }
    for (var je = 0; je < 1e3; je++)
      f[je] = new h(je), je > 0 && (f[-je] = new h(-je));
    return f.one = f[1], f.zero = f[0], f.minusOne = f[-1], f.max = K, f.min = S, f.gcd = T, f.lcm = V, f.isInstance = function(d) {
      return d instanceof l || d instanceof h;
    }, f.randBetween = Q, f.fromArray = function(d, b, B) {
      return ye(d.map(ge), ge(b || 10), B);
    }, f;
  }();
  e.hasOwnProperty("exports") && (e.exports = t);
})(Iv);
var xR = Iv.exports, y0 = jh.validate, BR = function(e, t, r, n) {
  for (var i = n ? Math.floor(e.length * t / r) : Math.ceil(e.length * t / r), o = (1 << r) - 1, s = new Uint8Array(i), a = 0, f = 0, l = 0, h = 0; h < e.length; ++h) {
    var y = e[h];
    for (y0(0 <= y && y >> t === 0, "Invalid value: " + y + "."), f = f << t | y, l += t; l >= r; )
      l -= r, s[a] = f >> l & o, ++a;
  }
  return n ? y0(
    l < t && (f << r - l & o) === 0,
    "Input cannot be converted to " + r + " bits without padding, but strict mode was used."
  ) : l > 0 && (s[a] = f << r - l & o, ++a), s;
};
/**
 * @license
 * https://github.com/ealmansi/cashaddrjs
 * Copyright (c) 2017-2020 Emilio Almansi
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */
var Pv = PR, kR = xR, xv = BR, Bv = jh, Ln = Bv.validate;
function RR(e, t, r) {
  Ln(typeof e == "string" && CR(e), "Invalid prefix: " + e + "."), Ln(typeof t == "string", "Invalid type: " + t + "."), Ln(r instanceof Uint8Array, "Invalid hash: " + r + ".");
  var n = Rn(kv(e), new Uint8Array(1)), i = HR(t) + DR(r), o = FR(Rn(new Uint8Array([i]), r)), s = Rn(Rn(n, o), new Uint8Array(8)), a = Rn(o, $R(Rv(s)));
  return e + ":" + Pv.encode(a);
}
function NR(e) {
  Ln(typeof e == "string" && Nv(e), "Invalid address: " + e + ".");
  var t = e.toLowerCase().split(":");
  Ln(t.length === 2, "Missing prefix: " + e + ".");
  var r = t[0], n = Pv.decode(t[1]);
  Ln(KR(r, n), "Invalid checksum: " + e + ".");
  var i = jR(n.subarray(0, -8)), o = i[0], s = i.subarray(1);
  Ln(MR(o) === s.length * 8, "Invalid hash size: " + e + ".");
  var a = LR(o);
  return {
    prefix: r,
    type: a,
    hash: s
  };
}
var Cf = Bv.ValidationError, UR = ["bitcoincash", "bchtest", "bchreg"];
function CR(e) {
  return Nv(e) && UR.indexOf(e.toLowerCase()) !== -1;
}
function kv(e) {
  for (var t = new Uint8Array(e.length), r = 0; r < e.length; ++r)
    t[r] = e[r].charCodeAt(0) & 31;
  return t;
}
function $R(e) {
  for (var t = new Uint8Array(8), r = 0; r < 8; ++r)
    t[7 - r] = e.and(31).toJSNumber(), e = e.shiftRight(5);
  return t;
}
function HR(e) {
  switch (e) {
    case "P2PKH":
      return 0;
    case "P2SH":
      return 8;
    default:
      throw new Cf("Invalid type: " + e + ".");
  }
}
function LR(e) {
  switch (e & 120) {
    case 0:
      return "P2PKH";
    case 8:
      return "P2SH";
    default:
      throw new Cf("Invalid address type in version byte: " + e + ".");
  }
}
function DR(e) {
  switch (e.length * 8) {
    case 160:
      return 0;
    case 192:
      return 1;
    case 224:
      return 2;
    case 256:
      return 3;
    case 320:
      return 4;
    case 384:
      return 5;
    case 448:
      return 6;
    case 512:
      return 7;
    default:
      throw new Cf("Invalid hash size: " + e.length + ".");
  }
}
function MR(e) {
  switch (e & 7) {
    case 0:
      return 160;
    case 1:
      return 192;
    case 2:
      return 224;
    case 3:
      return 256;
    case 4:
      return 320;
    case 5:
      return 384;
    case 6:
      return 448;
    case 7:
      return 512;
  }
}
function FR(e) {
  return xv(e, 8, 5);
}
function jR(e) {
  return xv(e, 5, 8, !0);
}
function Rn(e, t) {
  var r = new Uint8Array(e.length + t.length);
  return r.set(e), r.set(t, e.length), r;
}
function Rv(e) {
  for (var t = [656907472481, 522768456162, 1044723512260, 748107326120, 130178868336], r = kR(1), n = 0; n < e.length; ++n) {
    var i = e[n], o = r.shiftRight(35);
    r = r.and(34359738367).shiftLeft(5).xor(i);
    for (var s = 0; s < t.length; ++s)
      o.shiftRight(s).and(1).equals(1) && (r = r.xor(t[s]));
  }
  return r.xor(1);
}
function KR(e, t) {
  var r = Rn(kv(e), new Uint8Array(1)), n = Rn(r, t);
  return Rv(n).equals(0);
}
function Nv(e) {
  return e === e.toLowerCase() || e === e.toUpperCase();
}
var qR = {
  encode: RR,
  decode: NR,
  ValidationError: Cf
};
/***
 * @license
 * https://github.com/ealmansi/bchaddrjs
 * Copyright (c) 2018-2020 Emilio Almansi
 * Distributed under the MIT software license, see the accompanying
 * file LICENSE or http://www.opensource.org/licenses/mit-license.php.
 */
var Kh = Ef, Uv = qR, Cv = ar.Buffer, Te = {};
Te.Legacy = "legacy";
Te.Bitpay = "bitpay";
Te.Cashaddr = "cashaddr";
var ke = {};
ke.Mainnet = "mainnet";
ke.Testnet = "testnet";
var $e = {};
$e.P2PKH = "p2pkh";
$e.P2SH = "p2sh";
function GR(e) {
  try {
    return wi(e), !0;
  } catch {
    return !1;
  }
}
function $f(e) {
  return wi(e).format;
}
function qh(e) {
  return wi(e).network;
}
function Gh(e) {
  return wi(e).type;
}
function VR(e) {
  var t = wi(e);
  return t.format === Te.Legacy ? e : JR(t);
}
function WR(e) {
  var t = wi(e);
  return t.format === Te.Bitpay ? e : QR(t);
}
function zR(e) {
  var t = wi(e);
  return eN(t);
}
var Xe = {};
Xe[Te.Legacy] = {};
Xe[Te.Legacy][ke.Mainnet] = {};
Xe[Te.Legacy][ke.Mainnet][$e.P2PKH] = 0;
Xe[Te.Legacy][ke.Mainnet][$e.P2SH] = 5;
Xe[Te.Legacy][ke.Testnet] = {};
Xe[Te.Legacy][ke.Testnet][$e.P2PKH] = 111;
Xe[Te.Legacy][ke.Testnet][$e.P2SH] = 196;
Xe[Te.Bitpay] = {};
Xe[Te.Bitpay][ke.Mainnet] = {};
Xe[Te.Bitpay][ke.Mainnet][$e.P2PKH] = 28;
Xe[Te.Bitpay][ke.Mainnet][$e.P2SH] = 40;
Xe[Te.Bitpay][ke.Testnet] = {};
Xe[Te.Bitpay][ke.Testnet][$e.P2PKH] = 111;
Xe[Te.Bitpay][ke.Testnet][$e.P2SH] = 196;
function wi(e) {
  try {
    return YR(e);
  } catch {
  }
  try {
    return ZR(e);
  } catch {
  }
  throw new Yn();
}
var XR = 21;
function YR(e) {
  try {
    var t = Kh.decode(e);
    if (t.length !== XR)
      throw new Yn();
    var r = t[0], n = Array.prototype.slice.call(t, 1);
    switch (r) {
      case Xe[Te.Legacy][ke.Mainnet][$e.P2PKH]:
        return {
          hash: n,
          format: Te.Legacy,
          network: ke.Mainnet,
          type: $e.P2PKH
        };
      case Xe[Te.Legacy][ke.Mainnet][$e.P2SH]:
        return {
          hash: n,
          format: Te.Legacy,
          network: ke.Mainnet,
          type: $e.P2SH
        };
      case Xe[Te.Legacy][ke.Testnet][$e.P2PKH]:
        return {
          hash: n,
          format: Te.Legacy,
          network: ke.Testnet,
          type: $e.P2PKH
        };
      case Xe[Te.Legacy][ke.Testnet][$e.P2SH]:
        return {
          hash: n,
          format: Te.Legacy,
          network: ke.Testnet,
          type: $e.P2SH
        };
      case Xe[Te.Bitpay][ke.Mainnet][$e.P2PKH]:
        return {
          hash: n,
          format: Te.Bitpay,
          network: ke.Mainnet,
          type: $e.P2PKH
        };
      case Xe[Te.Bitpay][ke.Mainnet][$e.P2SH]:
        return {
          hash: n,
          format: Te.Bitpay,
          network: ke.Mainnet,
          type: $e.P2SH
        };
    }
  } catch {
  }
  throw new Yn();
}
function ZR(e) {
  if (e.indexOf(":") !== -1)
    try {
      return g0(e);
    } catch {
    }
  else
    for (var t = ["bitcoincash", "bchtest", "bchreg"], r = 0; r < t.length; ++r)
      try {
        var n = t[r];
        return g0(n + ":" + e);
      } catch {
      }
  throw new Yn();
}
function g0(e) {
  try {
    var t = Uv.decode(e), r = Array.prototype.slice.call(t.hash, 0), n = t.type === "P2PKH" ? $e.P2PKH : $e.P2SH;
    switch (t.prefix) {
      case "bitcoincash":
        return {
          hash: r,
          format: Te.Cashaddr,
          network: ke.Mainnet,
          type: n
        };
      case "bchtest":
      case "bchreg":
        return {
          hash: r,
          format: Te.Cashaddr,
          network: ke.Testnet,
          type: n
        };
    }
  } catch {
  }
  throw new Yn();
}
function JR(e) {
  var t = Xe[Te.Legacy][e.network][e.type], r = Cv.alloc(1 + e.hash.length);
  return r[0] = t, r.set(e.hash, 1), Kh.encode(r);
}
function QR(e) {
  var t = Xe[Te.Bitpay][e.network][e.type], r = Cv.alloc(1 + e.hash.length);
  return r[0] = t, r.set(e.hash, 1), Kh.encode(r);
}
function eN(e) {
  var t = e.network === ke.Mainnet ? "bitcoincash" : "bchtest", r = e.type === $e.P2PKH ? "P2PKH" : "P2SH", n = new Uint8Array(e.hash);
  return Uv.encode(t, r, n);
}
function tN(e) {
  return $f(e) === Te.Legacy;
}
function rN(e) {
  return $f(e) === Te.Bitpay;
}
function nN(e) {
  return $f(e) === Te.Cashaddr;
}
function iN(e) {
  return qh(e) === ke.Mainnet;
}
function oN(e) {
  return qh(e) === ke.Testnet;
}
function sN(e) {
  return Gh(e) === $e.P2PKH;
}
function aN(e) {
  return Gh(e) === $e.P2SH;
}
function Yn() {
  var e = new Error();
  this.name = e.name = "InvalidAddressError", this.message = e.message = "Received an invalid Bitcoin Cash address as input.", this.stack = e.stack;
}
Yn.prototype = Object.create(Error.prototype);
var Kr = {
  Format: Te,
  Network: ke,
  Type: $e,
  isValidAddress: GR,
  detectAddressFormat: $f,
  detectAddressNetwork: qh,
  detectAddressType: Gh,
  toLegacyAddress: VR,
  toBitpayAddress: WR,
  toCashAddress: zR,
  isLegacyAddress: tN,
  isBitpayAddress: rN,
  isCashAddress: nN,
  isMainnetAddress: iN,
  isTestnetAddress: oN,
  isP2PKHAddress: sN,
  isP2SHAddress: aN,
  InvalidAddressError: Yn
};
const Hf = (e) => `https://api.blockchair.com/${fN(e)}`, $v = () => "http://127.0.0.1:9001/api/v1", b0 = (e) => {
  switch (e) {
    case se.Bitcoin:
      return 5;
    case se.Dogecoin:
      return 1e4;
    case se.Litecoin:
      return 1;
    default:
      return 2;
  }
}, fN = (e) => {
  switch (e) {
    case se.BitcoinCash:
      return "bitcoin-cash";
    case se.Litecoin:
      return "litecoin";
    case se.Dogecoin:
      return "dogecoin";
    default:
      return "bitcoin";
  }
}, cN = async (e) => {
  try {
    const { feePerKb: t } = await Vi.get(`https://app.bitgo.com/api/v2/${e.toLowerCase()}/tx/fee`), r = t / 1e3;
    return Math.max(r, b0(e));
  } catch {
    return b0(e);
  }
}, Lf = async (e, t) => {
  try {
    console.log("blockchairRequest: url: ", e);
    const r = await Vi.get(e);
    if (console.log("blockchairRequest: response: ", r), !r || r.context.code !== 200)
      throw new Error(`failed to query ${e}`);
    return r.data;
  } catch (r) {
    if (!t)
      throw r;
    const n = await Vi.get(
      `${e}${t ? `&key=${t}` : ""}`
    );
    if (!n || n.context.code !== 200)
      throw new Error(`failed to query ${e}`);
    return n.data;
  }
}, uN = { utxo: [], address: { balance: 0, transaction_count: 0 } }, Hv = async ({
  address: e,
  chain: t,
  apiKey: r
}) => {
  if (!e)
    throw new Error("address is required");
  try {
    return (await Lf(
      `${Hf(t)}/dashboards/address/${e}?transaction_details=true`,
      r
    ))[e];
  } catch {
    return uN;
  }
}, lN = async ({
  address: e,
  chain: t,
  apiKey: r
}) => (console.log("getUnconfirmedBalance: address: ", e), (await Hv({ address: e, chain: t, apiKey: r })).address.balance), hN = async ({ pubkey: e, chain: t }) => {
  if (!e)
    throw new Error("pubkey is required");
  try {
    console.log("pubkey: ", e);
    const r = `/utxo/getBalance/${t}/${e}`;
    console.log("getXpubData URL: ", r);
    let n = await Vi.get(`${$v()}${r}`);
    return console.log("getXpubData: response: ", n), n || (n = 0), n;
  } catch {
    return {
      utxo: [],
      address: {
        balance: 0,
        transaction_count: 0
      }
    };
  }
}, pN = async ({ pubkey: e, chain: t }) => {
  if (!e)
    throw new Error("pubkey is required");
  try {
    console.log("pubkey: ", e);
    const r = `/listUnspent/${t}/${e}`;
    console.log("getXpubData URL: ", r);
    let n = await Vi.get(`${$v()}${r}`);
    return console.log("getXpubData: response: ", n), n;
  } catch {
    return {
      utxo: [],
      address: {
        balance: 0,
        transaction_count: 0
      }
    };
  }
}, dN = async ({
  pubkey: e,
  chain: t,
  apiKey: r
}) => (console.log("getUnconfirmedBalanceXpub; ", { pubkey: e, chain: t, apiKey: r }), await hN({ pubkey: e, chain: t, apiKey: r })), yN = async ({
  chain: e,
  address: t,
  apiKey: r
}) => {
  if (!t)
    throw new Error("address is required");
  try {
    return (await Lf(
      `${Hf(e)}/addresses/balances?addresses=${t}`,
      r
    ))[t] || 0;
  } catch {
    return 0;
  }
}, Lv = async ({ chain: e, apiKey: t, txHash: r }) => {
  if (!r)
    throw new Error("txHash is required");
  try {
    return (await Lf(
      `${Hf(e)}/raw/transaction/${r}`,
      t
    ))[r].raw_transaction;
  } catch (n) {
    return console.error(n), "";
  }
}, Dv = async ({
  chain: e,
  address: t,
  apiKey: r,
  offset: n = 0
}) => {
  if (!t)
    throw new Error("address is required");
  try {
    const i = await Lf(
      `${Hf(
        e
      )}/outputs?q=is_spent(false),recipient(${t})&limit=100&offset=${n}`,
      r
    ), o = i.filter(({ is_spent: a }) => !a).map(({ script_hex: a, block_id: f, transaction_hash: l, index: h, value: y, spending_signature_hex: v }) => ({
      hash: l,
      index: h,
      value: y,
      txHex: v,
      script_hex: a,
      is_confirmed: f !== -1
    }));
    if (i.length !== 100)
      return o;
    const s = await Dv({
      address: t,
      chain: e,
      apiKey: r,
      offset: i[99].transaction_id
    });
    return o.concat(s);
  } catch (i) {
    return console.error(i), [];
  }
}, gN = async ({
  address: e,
  chain: t,
  apiKey: r,
  fetchTxHex: n = !0
}) => {
  const i = await Dv({ chain: t, address: e, apiKey: r }), o = [];
  for (const { hash: s, index: a, script_hex: f, value: l } of i) {
    let h;
    n && (h = await Lv({ txHash: s, chain: t, apiKey: r })), o.push({
      address: e,
      hash: s,
      index: a,
      txHex: h,
      value: l,
      witnessUtxo: { value: l, script: N.Buffer.from(f, "hex") }
    });
  }
  return o;
}, bs = ({ apiKey: e, chain: t }) => ({
  getConfirmedBalance: (r) => yN({ chain: t, address: r, apiKey: e }),
  getRawTx: (r) => Lv({ txHash: r, chain: t, apiKey: e }),
  getSuggestedTxFee: () => cN(t),
  getBalance: (r) => lN({ address: r, chain: t, apiKey: e }),
  getBalanceXpub: (r) => dN({ pubkey: r, chain: t, apiKey: e }),
  getAddressData: (r) => Hv({ address: r, chain: t, apiKey: e }),
  scanUTXOs: (r) => gN({ ...r, chain: t, apiKey: e }),
  listUnspent: (r, n, i) => pN(r)
}), vs = async ({ txHash: e, rpcUrl: t }) => {
  const r = await Vi.post(
    t,
    {
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        jsonrpc: "2.0",
        method: "sendrawtransaction",
        params: [e],
        id: CI()
      })
    }
  );
  if (console.log("response: ", r), r.error)
    throw new Error(`failed to broadcast a transaction: ${r.error}`);
  if (r.result.includes('"code":-26'))
    throw new Error("Invalid transaction: the transaction amount was too low");
  return r.result;
}, Or = se.BitcoinCash, Mv = (e) => jv(Kr.toCashAddress(e)), Fv = async ({
  assetValue: e,
  recipient: t,
  memo: r,
  feeRate: n,
  sender: i,
  apiClient: o
}) => {
  if (!Vh(t))
    throw new Error("Invalid address");
  const s = await o.scanUTXOs({
    address: Mv(i),
    fetchTxHex: !0
  }), a = r ? us(r) : null, f = [];
  f.push({ address: t, value: e.getBaseValue("number") });
  const { inputs: l, outputs: h } = cs({
    inputs: s,
    outputs: f,
    feeRate: n,
    chain: Or
  });
  if (!l || !h)
    throw new Error("Balance insufficient for transaction");
  const y = new Bo.TransactionBuilder(jr(Or));
  return await Promise.all(
    l.map(async (v) => {
      const g = await o.getRawTx(v.hash);
      y.addInput(Bo.Transaction.fromBuffer(N.Buffer.from(g, "hex")), v.index);
    })
  ), h.forEach((v) => {
    let g;
    v.address ? v.address && (g = Bo.address.toOutputScript(Kr.toLegacyAddress(v.address), jr(Or))) : g = Bo.address.toOutputScript(Kr.toLegacyAddress(i), jr(Or)), y.addOutput(g, v.value);
  }), a && y.addOutput(a, 0), { builder: y, utxos: l };
}, bN = async ({
  signTransaction: e,
  from: t,
  recipient: r,
  assetValue: n,
  apiClient: i,
  broadcastTx: o,
  getFeeRates: s,
  ...a
}) => {
  if (!t)
    throw new Error("From address must be provided");
  if (!r)
    throw new Error("Recipient address must be provided");
  if (!e)
    throw new Error("signTransaction must be provided");
  const f = a.feeRate || (await s())[pn.Fast], { builder: l, utxos: h } = await Fv({
    ...a,
    assetValue: n,
    feeRate: f,
    recipient: r,
    sender: t,
    apiClient: i
  }), v = (await e({ builder: l, utxos: h })).toHex();
  return o(v);
}, vN = async ({
  assetValue: e,
  recipient: t,
  pubkeys: r,
  memo: n,
  feeRate: i,
  sender: o,
  apiClient: s
}) => {
  const a = Kr.toCashAddress(t);
  if (!Vh(a))
    throw new Error("Invalid address");
  console.log("pubkeys: ", r);
  let f = -1 / 0, l = null;
  for (let U = 0; U < r.length; U++) {
    const H = r[U], M = parseFloat(H.balance);
    !isNaN(M) && M > f && (f = M, l = H);
  }
  let h = await s.listUnspent({
    pubkey: l.xpub,
    chain: Or,
    apiKey: s.apiKey
  });
  console.log("inputs total: ", h), console.log("inputs total: ", h.length);
  function y(U) {
    const {
      txid: H,
      vout: M,
      value: k,
      address: _,
      height: L,
      confirmations: j,
      path: F,
      hex: W,
      tx: te,
      coin: re,
      network: ae
    } = U;
    return {
      address: _,
      hash: H,
      // Rename txid to hash
      index: M,
      value: parseInt(k),
      height: L,
      confirmations: j,
      path: F,
      txHex: W,
      tx: te,
      coin: re,
      network: ae,
      witnessUtxo: {
        value: parseInt(U.tx.vout[0].value),
        script: N.Buffer.from(U.tx.vout[0].scriptPubKey.hex, "hex")
      }
    };
  }
  h = h.map(y);
  const v = Number(i.toFixed(0)), g = n ? us(n) : null, m = [];
  m.push({
    address: Kr.toLegacyAddress(t),
    value: e.getBaseValue("number")
  }), g && m.push({ script: g, value: 0 });
  const { inputs: E, outputs: O } = cs({
    inputs: h,
    outputs: m,
    feeRate: v,
    chain: Or
  });
  if (!E || !O)
    throw new Error("Balance insufficient for transaction");
  const x = new qr.Psbt({ network: jr(Or) });
  return console.log("inputs: ", E), E.forEach(
    ({ hash: U, index: H, witnessUtxo: M }) => x.addInput({ hash: U, index: H, witnessUtxo: M })
  ), O.forEach((U) => {
    U.address = Kr.toLegacyAddress(U.address || o), U.script ? g && x.addOutput({ script: g, value: 0 }) : x.addOutput(U);
  }), { psbt: x, utxos: h, inputs: E };
}, jv = (e) => e.replace(/(bchtest:|bitcoincash:)/, ""), Vh = (e, t) => e.startsWith("bitcoincash:") ? !0 : Kr.isValidAddress(e) && Kr.detectAddressNetwork(e) === Kr.Network.Mainnet, wN = async ({
  phrase: e,
  derivationPath: t = `${O0.BCH}/0`,
  wif: r
}) => {
  const n = jr(Or);
  if (r) {
    const s = await import("./js-07bd359d.js").then((a) => a.j);
    return Rl.ECPairFactory(s).fromWIF(r, n);
  }
  if (!e)
    throw new Error("No phrase provided");
  return Bo.HDNode.fromSeedBuffer(N.Buffer.from($b(e)), n).derivePath(t).keyPair;
}, mN = (e) => {
  const t = e.getAddress(0);
  return Mv(t);
}, EN = ({
  apiKey: e,
  rpcUrl: t = Zn.BitcoinCash,
  apiClient: r
}) => {
  const n = r || bs({ apiKey: e, chain: Or }), { getBalance: i, ...o } = ls({
    chain: Or,
    apiClient: n,
    broadcastTx: (s) => vs({ txHash: s, rpcUrl: t })
  });
  return {
    ...o,
    stripPrefix: jv,
    validateAddress: Vh,
    createKeysForPath: wN,
    getAddressFromKeys: mN,
    buildBCHTx: (s) => Fv({ ...s, apiClient: n }),
    getBalance: (s) => i(s),
    buildTx: (s) => vN({ ...s, apiClient: n }),
    transfer: (s) => bN({
      ...s,
      getFeeRates: o.getFeeRates,
      broadcastTx: o.broadcastTx,
      apiClient: n
    })
  };
}, v0 = ({
  apiKey: e,
  rpcUrl: t = Zn.Bitcoin,
  apiClient: r
}) => ls({
  chain: se.Bitcoin,
  broadcastTx: (n) => vs({ txHash: n, rpcUrl: t }),
  apiClient: r || bs({ apiKey: e, chain: se.Bitcoin })
}), $N = ({
  apiKey: e,
  rpcUrl: t = Zn.Dash,
  apiClient: r
}) => ls({
  chain: se.Dash,
  broadcastTx: (n) => vs({ txHash: n, rpcUrl: t }),
  apiClient: r || bs({ apiKey: e, chain: se.Dash })
}), _N = ({
  apiKey: e,
  rpcUrl: t = Zn.Dogecoin,
  apiClient: r
}) => ls({
  chain: se.Dogecoin,
  broadcastTx: (n) => vs({ txHash: n, rpcUrl: t }),
  apiClient: r || bs({ apiKey: e, chain: se.Dogecoin })
}), SN = ({
  apiKey: e,
  rpcUrl: t = Zn.Litecoin,
  apiClient: r
}) => ls({
  chain: se.Litecoin,
  broadcastTx: (n) => vs({ txHash: n, rpcUrl: t }),
  apiClient: r || bs({ apiKey: e, chain: se.Litecoin })
}), HN = async (e) => {
  switch (e) {
    case se.BitcoinCash:
      return EN;
    case se.Bitcoin:
      return v0;
    case se.Dogecoin:
      return _N;
    case se.Litecoin:
      return SN;
    default:
      return v0;
  }
};
export {
  $u as A,
  ls as B,
  jr as C,
  $N as D,
  RI as E,
  NI as F,
  $b as G,
  CI as H,
  Uu as I,
  SN as L,
  CN as M,
  GT as O,
  bb as T,
  jl as U,
  cb as a,
  ar as b,
  Ar as c,
  N as d,
  Fl as e,
  Jg as f,
  gg as g,
  cv as h,
  ot as i,
  zg as j,
  pb as k,
  Vv as l,
  jk as m,
  EN as n,
  v0 as o,
  _N as p,
  HN as q,
  eb as r,
  Re as s,
  gb as t,
  cs as u,
  us as v,
  Cu as w,
  Kl as x,
  ql as y,
  No as z
};
