"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseConnectSettings = exports.getEnv = void 0;
const exports_1 = require("@trezor/connect/lib/exports");
const getEnv = () => {
    var _a;
    if (typeof chrome !== 'undefined' && typeof ((_a = chrome.runtime) === null || _a === void 0 ? void 0 : _a.onConnect) !== 'undefined') {
        return 'webextension';
    }
    if (typeof navigator !== 'undefined') {
        if (typeof navigator.product === 'string' &&
            navigator.product.toLowerCase() === 'reactnative') {
            return 'react-native';
        }
        const userAgent = navigator.userAgent.toLowerCase();
        if (userAgent.indexOf(' electron/') > -1) {
            return 'electron';
        }
    }
    return 'web';
};
exports.getEnv = getEnv;
const parseConnectSettings = (input = {}) => {
    var _a;
    const settings = Object.assign({ popup: true }, input);
    let globalSrc;
    if (typeof window !== 'undefined') {
        globalSrc = window.__TREZOR_CONNECT_SRC;
    }
    else if (typeof global !== 'undefined') {
        globalSrc = global.__TREZOR_CONNECT_SRC;
    }
    if (typeof globalSrc === 'string') {
        settings.connectSrc = globalSrc;
        settings.debug = true;
    }
    if (typeof window !== 'undefined' && typeof ((_a = window.location) === null || _a === void 0 ? void 0 : _a.search) === 'string') {
        const vars = window.location.search.split('&');
        const customUrl = vars.find(v => v.indexOf('trezor-connect-src') >= 0);
        if (customUrl) {
            const [, connectSrc] = customUrl.split('=');
            settings.connectSrc = decodeURIComponent(connectSrc);
            settings.debug = true;
        }
    }
    if (typeof input.env !== 'string') {
        settings.env = (0, exports.getEnv)();
    }
    return (0, exports_1.parseConnectSettings)(settings);
};
exports.parseConnectSettings = parseConnectSettings;
//# sourceMappingURL=connectSettings.js.map