"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PopupManager = void 0;
const tslib_1 = require("tslib");
const events_1 = tslib_1.__importDefault(require("events"));
const utils_1 = require("@trezor/utils");
const exports_1 = require("@trezor/connect/lib/exports");
const urlUtils_1 = require("@trezor/connect/lib/utils/urlUtils");
const showPopupRequest_1 = require("./showPopupRequest");
const POPUP_REQUEST_TIMEOUT = 850;
const POPUP_CLOSE_INTERVAL = 500;
const POPUP_OPEN_TIMEOUT = 3000;
class PopupManager extends events_1.default {
    constructor(settings) {
        super();
        this.locked = false;
        this.requestTimeout = 0;
        this.closeInterval = 0;
        this.extensionTabId = 0;
        this.settings = settings;
        this.origin = (0, urlUtils_1.getOrigin)(settings.popupSrc);
        this.handleMessage = this.handleMessage.bind(this);
        this.iframeHandshake = (0, utils_1.createDeferred)(exports_1.IFRAME.LOADED);
        if (this.settings.env === 'webextension') {
            this.handleExtensionConnect = this.handleExtensionConnect.bind(this);
            this.handleExtensionMessage = this.handleExtensionMessage.bind(this);
            chrome.runtime.onConnect.addListener(this.handleExtensionConnect);
        }
        window.addEventListener('message', this.handleMessage, false);
    }
    request() {
        if (this.locked) {
            if (this.popupWindow) {
                if (this.settings.env === 'webextension') {
                    chrome.tabs.update(this.popupWindow.id, { active: true });
                }
                else {
                    this.popupWindow.focus();
                }
            }
            return;
        }
        if (this.popupWindow && !this.locked) {
            this.close();
        }
        const openFn = this.open.bind(this);
        this.locked = true;
        const timeout = this.settings.env === 'webextension' ? 1 : POPUP_REQUEST_TIMEOUT;
        this.requestTimeout = window.setTimeout(() => {
            this.requestTimeout = 0;
            openFn();
        }, timeout);
    }
    unlock() {
        this.locked = false;
    }
    open() {
        const src = this.settings.popupSrc;
        this.popupPromise = (0, utils_1.createDeferred)(exports_1.POPUP.LOADED);
        this.openWrapper(src);
        this.closeInterval = window.setInterval(() => {
            if (!this.popupWindow)
                return;
            if (this.settings.env === 'webextension') {
                chrome.tabs.get(this.popupWindow.id, tab => {
                    if (!tab) {
                        this.emit(exports_1.POPUP.CLOSED);
                        this.clear();
                    }
                });
            }
            else if (this.popupWindow.closed) {
                this.clear();
                this.emit(exports_1.POPUP.CLOSED);
            }
        }, POPUP_CLOSE_INTERVAL);
        this.openTimeout = setTimeout(() => {
            this.clear();
            (0, showPopupRequest_1.showPopupRequest)(this.open.bind(this), () => {
                this.emit(exports_1.POPUP.CLOSED);
            });
        }, POPUP_OPEN_TIMEOUT);
    }
    openWrapper(url) {
        if (this.settings.env === 'webextension') {
            chrome.windows.getCurrent(currentWindow => {
                if (currentWindow.type !== 'normal') {
                    chrome.windows.create({ url }, newWindow => {
                        chrome.tabs.query({
                            windowId: newWindow === null || newWindow === void 0 ? void 0 : newWindow.id,
                            active: true,
                        }, tabs => {
                            this.popupWindow = tabs[0];
                        });
                    });
                }
                else {
                    chrome.tabs.query({
                        currentWindow: true,
                        active: true,
                    }, tabs => {
                        this.extensionTabId = tabs[0].id;
                        chrome.tabs.create({
                            url,
                            index: tabs[0].index + 1,
                        }, tab => {
                            this.popupWindow = tab;
                        });
                    });
                }
            });
        }
        else if (this.settings.env === 'electron') {
            this.popupWindow = window.open(url, 'modal');
        }
        else {
            this.popupWindow = window.open('', '_blank');
            if (this.popupWindow) {
                this.popupWindow.location.href = url;
            }
        }
    }
    handleExtensionConnect(port) {
        var _a, _b;
        if (port.name !== 'trezor-connect')
            return;
        if (!this.popupWindow || (this.popupWindow && this.popupWindow.id !== ((_b = (_a = port.sender) === null || _a === void 0 ? void 0 : _a.tab) === null || _b === void 0 ? void 0 : _b.id)))
            return;
        if (this.openTimeout)
            clearTimeout(this.openTimeout);
        this.extensionPort = port;
        this.extensionPort.onMessage.addListener(this.handleExtensionMessage);
    }
    handleExtensionMessage(message) {
        if (!this.extensionPort)
            return;
        const port = this.extensionPort;
        const { data } = message;
        if (!data || typeof data !== 'object')
            return;
        if (data.type === exports_1.POPUP.ERROR) {
            const errorMessage = data.payload && typeof data.payload.error === 'string' ? data.payload.error : null;
            this.emit(exports_1.POPUP.CLOSED, errorMessage ? `Popup error: ${errorMessage}` : null);
            this.clear();
        }
        else if (data.type === exports_1.POPUP.LOADED) {
            if (this.popupPromise) {
                this.popupPromise.resolve();
            }
            this.iframeHandshake.promise.then(payload => {
                port.postMessage({
                    type: exports_1.POPUP.INIT,
                    payload: Object.assign(Object.assign({}, payload), { settings: this.settings }),
                });
            });
        }
        else if (data.type === exports_1.POPUP.EXTENSION_USB_PERMISSIONS) {
            chrome.tabs.query({
                currentWindow: true,
                active: true,
            }, tabs => {
                chrome.tabs.create({
                    url: 'trezor-usb-permissions.html',
                    index: tabs[0].index + 1,
                }, _tab => {
                });
            });
        }
        else if (data.type === exports_1.POPUP.CLOSE_WINDOW) {
            this.clear();
        }
    }
    handleMessage(message) {
        const { data } = message;
        if ((0, urlUtils_1.getOrigin)(message.origin) !== this.origin || !data || typeof data !== 'object')
            return;
        if (data.type === exports_1.IFRAME.LOADED) {
            this.iframeHandshake.resolve(data.payload);
        }
        else if (data.type === exports_1.POPUP.BOOTSTRAP) {
            if (this.openTimeout)
                clearTimeout(this.openTimeout);
        }
        else if (data.type === exports_1.POPUP.ERROR && this.popupWindow) {
            const errorMessage = data.payload && typeof data.payload.error === 'string' ? data.payload.error : null;
            this.emit(exports_1.POPUP.CLOSED, errorMessage ? `Popup error: ${errorMessage}` : null);
            this.clear();
        }
        else if (data.type === exports_1.POPUP.LOADED) {
            if (this.popupPromise) {
                this.popupPromise.resolve();
            }
            this.iframeHandshake.promise.then(payload => {
                this.popupWindow.postMessage({
                    type: exports_1.POPUP.INIT,
                    payload: Object.assign(Object.assign({}, payload), { settings: this.settings }),
                }, this.origin);
            });
        }
        else if (data.type === exports_1.POPUP.CANCEL_POPUP_REQUEST || data.type === exports_1.UI.CLOSE_UI_WINDOW) {
            this.clear(false);
        }
    }
    clear(focus = true) {
        this.locked = false;
        this.popupPromise = undefined;
        if (this.requestTimeout) {
            window.clearTimeout(this.requestTimeout);
            this.requestTimeout = 0;
        }
        if (this.openTimeout) {
            clearTimeout(this.openTimeout);
            this.openTimeout = undefined;
        }
        if (this.closeInterval) {
            window.clearInterval(this.closeInterval);
            this.closeInterval = 0;
        }
        if (this.extensionPort) {
            this.extensionPort.disconnect();
            this.extensionPort = undefined;
        }
        if (focus && this.extensionTabId) {
            chrome.tabs.update(this.extensionTabId, { active: true });
            this.extensionTabId = 0;
        }
    }
    close() {
        if (!this.popupWindow)
            return;
        if (this.settings.env === 'webextension') {
            let _e = chrome.runtime.lastError;
            chrome.tabs.remove(this.popupWindow.id, () => {
                _e = chrome.runtime.lastError;
            });
            return;
        }
        this.popupWindow.close();
        this.popupWindow = null;
    }
    async postMessage(message) {
        if (!this.popupWindow && message.type !== exports_1.UI.REQUEST_UI_WINDOW && this.openTimeout) {
            this.clear();
            (0, showPopupRequest_1.showPopupRequest)(this.open.bind(this), () => {
                this.emit(exports_1.POPUP.CLOSED);
            });
            return;
        }
        if (this.popupPromise) {
            await this.popupPromise.promise;
        }
        if (this.popupWindow) {
            this.popupWindow.postMessage(message, this.origin);
        }
    }
}
exports.PopupManager = PopupManager;
//# sourceMappingURL=index.js.map