"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MixinNativeFioWallet = exports.MixinNativeFioWalletInfo = void 0;
const fio = __importStar(require("@shapeshiftoss/fiosdk"));
const core = __importStar(require("@bithighlander/hdwallet-core"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const Isolation = __importStar(require("./crypto/isolation"));
const fetchJson = (uri, opts) => __awaiter(void 0, void 0, void 0, function* () {
    return (0, node_fetch_1.default)(uri, opts);
});
function getKeyPair(seed, addressNList) {
    const out = addressNList.reduce((a, x) => a.derive(x), seed.toMasterKey());
    if (!Isolation.Core.BIP32.nodeSupportsECDH(out))
        throw new Error("fio requires keys that implement ECDH");
    return new Isolation.Adapters.FIO(out);
}
function MixinNativeFioWalletInfo(Base) {
    return class MixinNativeFioWalletInfo extends Base {
        constructor() {
            super(...arguments);
            this._supportsFioInfo = true;
        }
        fioSupportsNetwork() {
            return __awaiter(this, void 0, void 0, function* () {
                return true;
            });
        }
        fioSupportsSecureTransfer() {
            return __awaiter(this, void 0, void 0, function* () {
                return false;
            });
        }
        fioGetAccountPaths(msg) {
            return [
                {
                    addressNList: [0x80000000 + 44, 0x80000000 + 235, 0x80000000 + msg.accountIdx, 0, 0],
                },
            ];
        }
        fioNextAccountPath(msg) {
            // Only support one account for now (like portis).
            // the fioers library supports paths so it shouldnt be too hard if we decide multiple accounts are needed
            return undefined;
        }
    };
}
exports.MixinNativeFioWalletInfo = MixinNativeFioWalletInfo;
function MixinNativeFioWallet(Base) {
    var _MixinNativeFioWallet_seed, _a;
    return _a = class MixinNativeFioWallet extends Base {
            constructor() {
                super(...arguments);
                this._supportsFio = true;
                this.baseUrl = "https://fio.eu.eosamsterdam.net/v1/";
                _MixinNativeFioWallet_seed.set(this, void 0);
            }
            fioInitializeWallet(seed) {
                return __awaiter(this, void 0, void 0, function* () {
                    __classPrivateFieldSet(this, _MixinNativeFioWallet_seed, (seed instanceof Buffer ? new Isolation.Engines.Dummy.BIP32.Seed(seed) : seed), "f");
                });
            }
            fioWipe() {
                __classPrivateFieldSet(this, _MixinNativeFioWallet_seed, undefined, "f");
            }
            getFioSdk(addressNList) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.needsMnemonic(!!__classPrivateFieldGet(this, _MixinNativeFioWallet_seed, "f"), () => __awaiter(this, void 0, void 0, function* () {
                        const key = getKeyPair(__classPrivateFieldGet(this, _MixinNativeFioWallet_seed, "f"), addressNList);
                        const sdk = new fio.FIOSDK(key, key.publicKey, this.baseUrl, fetchJson);
                        sdk.setSignedTrxReturnOption(true);
                        return sdk;
                    }));
                });
            }
            fioGetAddress(msg) {
                var _a;
                return __awaiter(this, void 0, void 0, function* () {
                    const sdk = yield this.getFioSdk(msg.addressNList);
                    return (_a = sdk === null || sdk === void 0 ? void 0 : sdk.getFioPublicKey()) !== null && _a !== void 0 ? _a : null;
                });
            }
            fioSignTx(msg) {
                return __awaiter(this, void 0, void 0, function* () {
                    const sdk = yield this.getFioSdk(msg.addressNList);
                    if (!sdk)
                        return null;
                    const action = msg.actions[0];
                    if (!action.account || !action.name || !action.data)
                        throw new Error("account, name, and data required");
                    let genericAction = "";
                    let genericActionParams = {};
                    switch (action.name) {
                        case "addaddress": {
                            genericAction = "addPublicAddresses";
                            genericActionParams = {
                                fioAddress: action.data.fio_address,
                                publicAddresses: action.data.public_addresses,
                                maxFee: action.data.max_fee,
                                technologyProviderId: action.data.tpid,
                            };
                            break;
                        }
                        case "newfundsreq": {
                            genericAction = "requestFunds";
                            const payerPublicKey = (yield sdk.getFioPublicAddress(action.data.payer_fio_address)).public_address;
                            const decryptedContent = core.mustBeDefined(yield this.fioDecryptRequestContent({
                                contentType: core.Fio.ContentType.REQUEST,
                                content: action.data.content,
                                addressNList: msg.addressNList,
                                publicKey: payerPublicKey,
                            }));
                            genericActionParams = {
                                payerFioAddress: action.data.payer_fio_address,
                                payeeFioAddress: action.data.payee_fio_address,
                                payeeTokenPublicAddress: decryptedContent.payee_public_address,
                                amount: decryptedContent.amount,
                                chainCode: decryptedContent.chain_code,
                                tokenCode: decryptedContent.token_code,
                                memo: decryptedContent.memo,
                                maxFee: action.data.max_fee,
                                payerFioPublicKey: null,
                                technologyProviderId: action.data.tpid,
                                hash: decryptedContent.hash,
                                offlineUrl: decryptedContent.offline_url,
                            };
                            break;
                        }
                        case "recordobt": {
                            genericAction = "recordObtData";
                            const payeePublicKey = (yield sdk.getFioPublicAddress(action.data.payee_fio_address)).public_address;
                            const decryptedContent = core.mustBeDefined(yield this.fioDecryptRequestContent({
                                contentType: core.Fio.ContentType.OBT,
                                content: action.data.content,
                                addressNList: msg.addressNList,
                                publicKey: payeePublicKey,
                            }));
                            genericActionParams = {
                                fioRequestId: action.data.fio_request_id ? Number(action.data.fio_request_id) : null,
                                payerFioAddress: action.data.payer_fio_address,
                                payeeFioAddress: action.data.payee_fio_address,
                                payerTokenPublicAddress: decryptedContent.payer_public_address,
                                payeeTokenPublicAddress: decryptedContent.payee_public_address,
                                amount: decryptedContent.amount,
                                chainCode: decryptedContent.chain_code,
                                tokenCode: decryptedContent.token_code,
                                status: decryptedContent.status,
                                obtId: decryptedContent.obt_id,
                                maxFee: action.data.max_fee,
                                technologyProviderId: action.data.tpid,
                                payeeFioPublicKey: null,
                                memo: decryptedContent.memo,
                                hash: decryptedContent.hash,
                                offLineUrl: decryptedContent.offline_url,
                            };
                            break;
                        }
                        case "regaddress": {
                            genericAction = "registerOwnerFioAddress";
                            genericActionParams = {
                                fioAddress: action.data.fio_address,
                                ownerPublicKey: action.data.owner_fio_public_key,
                                maxFee: action.data.max_fee,
                                technologyProviderId: action.data.tpid,
                            };
                            break;
                        }
                        case "regdomain": {
                            genericAction = "registerOwnerFioDomain";
                            genericActionParams = {
                                fioDomain: action.data.fio_domain,
                                ownerPublicKey: action.data.owner_fio_public_key,
                                maxFee: action.data.max_fee,
                                technologyProviderId: action.data.tpid,
                            };
                            break;
                        }
                        case "rejectfndreq": {
                            genericAction = "rejectFundsRequest";
                            genericActionParams = {
                                fioRequestId: Number(action.data.fio_request_id),
                                maxFee: action.data.max_fee,
                                technologyProviderId: action.data.tpid,
                            };
                            break;
                        }
                        case "renewaddress": {
                            genericAction = "renewFioAddress";
                            genericActionParams = {
                                fioAddress: action.data.fio_address,
                                maxFee: action.data.max_fee,
                                technologyProviderId: action.data.tpid,
                            };
                            break;
                        }
                        case "renewdomain": {
                            genericAction = "renewFioDomain";
                            genericActionParams = {
                                fioDomain: action.data.fio_domain,
                                maxFee: action.data.max_fee,
                                technologyProviderId: action.data.tpid,
                            };
                            break;
                        }
                        case "setdomainpub": {
                            genericAction = "setFioDomainVisibility";
                            genericActionParams = {
                                fioDomain: action.data.fio_domain,
                                isPublic: action.data.is_public,
                                maxFee: action.data.max_fee,
                                technologyProviderId: action.data.tpid,
                            };
                            break;
                        }
                        case "trnsfiopubky": {
                            genericAction = "transferTokens";
                            genericActionParams = {
                                payeeFioPublicKey: action.data.payee_public_key,
                                amount: action.data.amount,
                                maxFee: action.data.max_fee,
                                technologyProviderId: action.data.tpid,
                            };
                            break;
                        }
                        default: throw new Error(`unsupported FIO action: ${JSON.stringify(action)}`);
                    }
                    const res = yield sdk.genericAction(genericAction, genericActionParams);
                    return {
                        serialized: res.packed_trx,
                        signature: res.signatures[0],
                    };
                });
            }
            fioEncryptRequestContent(msg) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.needsMnemonic(!!__classPrivateFieldGet(this, _MixinNativeFioWallet_seed, "f"), () => __awaiter(this, void 0, void 0, function* () {
                        const privateKey = getKeyPair(__classPrivateFieldGet(this, _MixinNativeFioWallet_seed, "f"), msg.addressNList);
                        const sdk = core.mustBeDefined(yield this.getFioSdk(msg.addressNList));
                        return yield sdk.transactions.getCipherContent(msg.contentType, msg.content, privateKey, msg.publicKey, msg.iv && Buffer.from(msg.iv));
                    }));
                });
            }
            fioDecryptRequestContent(msg) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.needsMnemonic(!!__classPrivateFieldGet(this, _MixinNativeFioWallet_seed, "f"), () => __awaiter(this, void 0, void 0, function* () {
                        const privateKey = getKeyPair(__classPrivateFieldGet(this, _MixinNativeFioWallet_seed, "f"), msg.addressNList);
                        const sdk = core.mustBeDefined(yield this.getFioSdk(msg.addressNList));
                        return yield sdk.transactions.getUnCipherContent(msg.contentType, JSON.stringify(msg.content), privateKey, msg.publicKey);
                    }));
                });
            }
        },
        _MixinNativeFioWallet_seed = new WeakMap(),
        _a;
}
exports.MixinNativeFioWallet = MixinNativeFioWallet;
//# sourceMappingURL=fio.js.map