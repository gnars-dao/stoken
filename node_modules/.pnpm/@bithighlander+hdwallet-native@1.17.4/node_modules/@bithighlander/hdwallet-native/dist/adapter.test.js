"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core = __importStar(require("@bithighlander/hdwallet-core"));
const adapter_1 = require("./adapter");
const native_1 = require("./native");
describe("NativeAdapter", () => {
    it("creates a unique wallet per deviceId", () => __awaiter(void 0, void 0, void 0, function* () {
        const keyring = new core.Keyring();
        const adapter = adapter_1.NativeAdapter.useKeyring(keyring);
        const wallet = yield adapter.pairDevice("foobar");
        expect(wallet).toBeInstanceOf(native_1.NativeHDWallet);
        expect(yield adapter.pairDevice("foobar")).toBe(wallet);
    }));
    it("won't pair if the deviceId isn't specified", () => __awaiter(void 0, void 0, void 0, function* () {
        const keyring = new core.Keyring();
        const adapter = adapter_1.NativeAdapter.useKeyring(keyring);
        expect(yield adapter.pairDevice(undefined)).toBe(null);
    }));
    it("won't pair if a non-native wallet with the same deviceId is present in the keyring", () => __awaiter(void 0, void 0, void 0, function* () {
        const keyring = new core.Keyring();
        const adapter = adapter_1.NativeAdapter.useKeyring(keyring);
        const dummyWallet = {
            getVendor() { return "dummy"; },
            getDeviceID() {
                return __awaiter(this, void 0, void 0, function* () { return "foobar"; });
            },
        };
        yield keyring.add(dummyWallet, "foobar");
        expect(yield adapter.pairDevice("foobar")).toBe(null);
    }));
});
//# sourceMappingURL=adapter.test.js.map