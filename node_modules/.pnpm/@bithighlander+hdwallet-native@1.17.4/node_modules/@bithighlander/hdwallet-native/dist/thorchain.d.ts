import * as core from "@bithighlander/hdwallet-core";
import { NativeHDWalletBase } from "./native";
import * as Isolation from "./crypto/isolation";
export declare function MixinNativeThorchainWalletInfo<TBase extends core.Constructor<core.HDWalletInfo>>(Base: TBase): {
    new (...args: any[]): {
        _supportsThorchainInfo: boolean;
        thorchainSupportsNetwork(): Promise<boolean>;
        thorchainSupportsSecureTransfer(): Promise<boolean>;
        thorchainGetAccountPaths(msg: core.ThorchainGetAccountPaths): Array<core.ThorchainAccountPath>;
        thorchainNextAccountPath(msg: core.ThorchainAccountPath): core.ThorchainAccountPath | undefined;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
export declare function MixinNativeThorchainWallet<TBase extends core.Constructor<NativeHDWalletBase>>(Base: TBase): {
    new (...args: any[]): {
        _supportsThorchain: boolean;
        "__#13@#seed": Isolation.Core.BIP32.Seed | undefined;
        thorchainInitializeWallet(seed: Isolation.Core.BIP32.Seed): Promise<void>;
        thorchainWipe(): void;
        thorchainBech32ify(address: ArrayLike<number>, prefix: string): string;
        createThorchainAddress(publicKey: string): string;
        thorchainGetAddress(msg: core.ThorchainGetAddress): Promise<string | null>;
        thorchainSignTx(msg: core.ThorchainSignTx): Promise<core.ThorchainSignedTx | null>;
        readonly "__#14@#events": import("eventemitter2").EventEmitter2;
        readonly events: import("eventemitter2").EventEmitter2;
        needsMnemonic<T>(hasMnemonic: boolean, callback: () => T): T | null;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
//# sourceMappingURL=thorchain.d.ts.map