import * as core from "@bithighlander/hdwallet-core";
import * as ethers from "ethers";
import { NativeHDWalletBase } from "./native";
import * as Isolation from "./crypto/isolation";
export declare function MixinNativeETHWalletInfo<TBase extends core.Constructor<core.HDWalletInfo>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsETHInfo: true;
        ethSupportsNetwork(): Promise<boolean>;
        ethSupportsSecureTransfer(): Promise<boolean>;
        ethSupportsEIP1559(): Promise<boolean>;
        ethGetAccountPaths(msg: core.ETHGetAccountPath): Array<core.ETHAccountPath>;
        ethNextAccountPath(msg: core.ETHAccountPath): core.ETHAccountPath | undefined;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
export declare function MixinNativeETHWallet<TBase extends core.Constructor<NativeHDWalletBase>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsETH: true;
        "__#8@#ethSigner": ethers.Signer | undefined;
        ethInitializeWallet(seed: Isolation.Core.BIP32.Seed): Promise<void>;
        ethWipe(): void;
        ethGetAddress(msg: core.ETHGetAddress): Promise<string | null>;
        ethSignTx(msg: core.ETHSignTx): Promise<core.ETHSignedTx | null>;
        ethSignMessage(msg: core.ETHSignMessage): Promise<core.ETHSignedMessage | null>;
        ethVerifyMessage(msg: core.ETHVerifyMessage): Promise<boolean>;
        readonly "__#14@#events": import("eventemitter2").EventEmitter2;
        readonly events: import("eventemitter2").EventEmitter2;
        needsMnemonic<T>(hasMnemonic: boolean, callback: () => T): T | null;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
//# sourceMappingURL=ethereum.d.ts.map