import * as core from "@bithighlander/hdwallet-core";
import { NativeHDWalletBase } from "./native";
import * as Isolation from "./crypto/isolation";
export declare function MixinNativeKavaWalletInfo<TBase extends core.Constructor<core.HDWalletInfo>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsKavaInfo: true;
        kavaSupportsNetwork(): Promise<boolean>;
        kavaSupportsSecureTransfer(): Promise<boolean>;
        kavaGetAccountPaths(msg: core.KavaGetAccountPaths): Array<core.KavaAccountPath>;
        kavaNextAccountPath(msg: core.KavaAccountPath): core.KavaAccountPath | undefined;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
export declare function MixinNativeKavaWallet<TBase extends core.Constructor<NativeHDWalletBase>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsKava: true;
        "__#10@#seed": Isolation.Core.BIP32.Seed | undefined;
        kavaInitializeWallet(seed: Isolation.Core.BIP32.Seed): Promise<void>;
        kavaWipe(): void;
        kavaBech32ify(address: ArrayLike<number>, prefix: string): string;
        createKavaAddress(publicKey: string): string;
        kavaGetAddress(msg: core.KavaGetAddress): Promise<string | null>;
        kavaSignTx(msg: core.KavaSignTx): Promise<core.KavaSignedTx | null>;
        readonly "__#14@#events": import("eventemitter2").EventEmitter2;
        readonly events: import("eventemitter2").EventEmitter2;
        needsMnemonic<T>(hasMnemonic: boolean, callback: () => T): T | null;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
//# sourceMappingURL=kava.d.ts.map