"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MixinNativeETHWallet = exports.MixinNativeETHWalletInfo = void 0;
const core = __importStar(require("@bithighlander/hdwallet-core"));
const ethers = __importStar(require("ethers"));
const lodash_1 = __importDefault(require("lodash"));
const Isolation = __importStar(require("./crypto/isolation"));
function MixinNativeETHWalletInfo(Base) {
    return class MixinNativeETHWalletInfo extends Base {
        constructor() {
            super(...arguments);
            this._supportsETHInfo = true;
        }
        ethSupportsNetwork() {
            return __awaiter(this, void 0, void 0, function* () {
                return true;
            });
        }
        ethSupportsSecureTransfer() {
            return __awaiter(this, void 0, void 0, function* () {
                return false;
            });
        }
        ethSupportsEIP1559() {
            return __awaiter(this, void 0, void 0, function* () {
                return true;
            });
        }
        ethGetAccountPaths(msg) {
            const slip44 = core.slip44ByCoin(msg.coin);
            if (slip44 === undefined)
                return [];
            return [
                {
                    addressNList: [0x80000000 + 44, 0x80000000 + slip44, 0x80000000 + msg.accountIdx, 0, 0],
                    hardenedPath: [0x80000000 + 44, 0x80000000 + slip44, 0x80000000 + msg.accountIdx],
                    relPath: [0, 0],
                    description: "Native",
                },
            ];
        }
        ethNextAccountPath(msg) {
            // Only support one account for now (like portis).
            // the ethers library supports paths so it shouldnt be too hard if we decide multiple accounts are needed
            return undefined;
        }
    };
}
exports.MixinNativeETHWalletInfo = MixinNativeETHWalletInfo;
function MixinNativeETHWallet(Base) {
    var _MixinNativeETHWallet_ethSigner, _a;
    return _a = class MixinNativeETHWallet extends Base {
            constructor() {
                super(...arguments);
                this._supportsETH = true;
                _MixinNativeETHWallet_ethSigner.set(this, void 0);
            }
            ethInitializeWallet(seed) {
                return __awaiter(this, void 0, void 0, function* () {
                    const isolatedSigner = new Isolation.Adapters.BIP32(seed.toMasterKey()).derivePath(ethers.utils.defaultPath);
                    __classPrivateFieldSet(this, _MixinNativeETHWallet_ethSigner, new Isolation.Adapters.Ethereum(isolatedSigner), "f");
                });
            }
            ethWipe() {
                __classPrivateFieldSet(this, _MixinNativeETHWallet_ethSigner, undefined, "f");
            }
            ethGetAddress(msg) {
                return __awaiter(this, void 0, void 0, function* () {
                    if (!lodash_1.default.isEqual(msg.addressNList, core.bip32ToAddressNList("m/44'/60'/0'/0/0"))) {
                        throw new Error("path not supported");
                    }
                    return this.needsMnemonic(!!__classPrivateFieldGet(this, _MixinNativeETHWallet_ethSigner, "f"), () => __classPrivateFieldGet(this, _MixinNativeETHWallet_ethSigner, "f").getAddress());
                });
            }
            ethSignTx(msg) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.needsMnemonic(!!__classPrivateFieldGet(this, _MixinNativeETHWallet_ethSigner, "f"), () => __awaiter(this, void 0, void 0, function* () {
                        const utx = {
                            to: msg.to,
                            from: yield __classPrivateFieldGet(this, _MixinNativeETHWallet_ethSigner, "f").getAddress(),
                            nonce: msg.nonce,
                            gasLimit: msg.gasLimit,
                            data: msg.data,
                            value: msg.value,
                            chainId: msg.chainId,
                        };
                        let result = msg.maxFeePerGas
                            ? yield __classPrivateFieldGet(this, _MixinNativeETHWallet_ethSigner, "f").signTransaction(Object.assign(Object.assign({}, utx), { maxFeePerGas: msg.maxFeePerGas, maxPriorityFeePerGas: msg.maxPriorityFeePerGas, type: core.ETHTransactionType.ETH_TX_TYPE_EIP_1559 }))
                            : yield __classPrivateFieldGet(this, _MixinNativeETHWallet_ethSigner, "f").signTransaction(Object.assign(Object.assign({}, utx), { gasPrice: msg.gasPrice, type: core.ETHTransactionType.ETH_TX_TYPE_LEGACY }));
                        const decoded = ethers.utils.parseTransaction(result);
                        return {
                            v: core.mustBeDefined(decoded.v),
                            r: core.mustBeDefined(decoded.r),
                            s: core.mustBeDefined(decoded.s),
                            serialized: result,
                        };
                    }));
                });
            }
            ethSignMessage(msg) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.needsMnemonic(!!__classPrivateFieldGet(this, _MixinNativeETHWallet_ethSigner, "f"), () => __awaiter(this, void 0, void 0, function* () {
                        const result = yield __classPrivateFieldGet(this, _MixinNativeETHWallet_ethSigner, "f").signMessage(msg.message);
                        return {
                            address: yield __classPrivateFieldGet(this, _MixinNativeETHWallet_ethSigner, "f").getAddress(),
                            signature: result,
                        };
                    }));
                });
            }
            ethVerifyMessage(msg) {
                return __awaiter(this, void 0, void 0, function* () {
                    if (!msg.signature.startsWith("0x"))
                        msg.signature = `0x${msg.signature}`;
                    const signingAddress = ethers.utils.verifyMessage(msg.message, msg.signature);
                    return signingAddress === msg.address;
                });
            }
        },
        _MixinNativeETHWallet_ethSigner = new WeakMap(),
        _a;
}
exports.MixinNativeETHWallet = MixinNativeETHWallet;
//# sourceMappingURL=ethereum.js.map