"use strict";
/// <reference types="bip32/types/crypto" />
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Mnemonic_mnemonic;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mnemonic = void 0;
const core = __importStar(require("@bithighlander/hdwallet-core"));
__exportStar(require("../../core/bip39"), exports);
const bip32crypto = __importStar(require("bip32/src/crypto"));
const web_encoding_1 = require("web-encoding");
const types_1 = require("../../types");
const BIP32 = __importStar(require("./bip32"));
// Poor man's single-block PBKDF2 implementation
//TODO: get something better
function pbkdf2_sha512_singleblock(password, salt, iterations) {
    function be32Buf(index) {
        const indexBE = Buffer.alloc(4);
        indexBE.writeUInt32BE(index);
        return indexBE;
    }
    const pwBuffer = (0, types_1.safeBufferFrom)(new web_encoding_1.TextEncoder().encode(password));
    let out = bip32crypto.hmacSHA512(pwBuffer, core.compatibleBufferConcat([salt, be32Buf(1)]));
    let lastU = out;
    for (let i = 2; i <= iterations; i++) {
        let newU = bip32crypto.hmacSHA512(pwBuffer, lastU);
        for (let j = 0; j < out.length; j++)
            out[j] ^= newU[j];
        lastU = newU;
    }
    return out;
}
class Mnemonic {
    constructor(mnemonic) {
        _Mnemonic_mnemonic.set(this, void 0);
        __classPrivateFieldSet(this, _Mnemonic_mnemonic, mnemonic.normalize("NFKD"), "f");
    }
    toSeed(passphrase) {
        if (passphrase !== undefined && typeof passphrase !== "string")
            throw new Error("bad passphrase type");
        const mnemonic = __classPrivateFieldGet(this, _Mnemonic_mnemonic, "f");
        const salt = new web_encoding_1.TextEncoder().encode(`mnemonic${passphrase !== null && passphrase !== void 0 ? passphrase : ""}`.normalize("NFKD"));
        return new BIP32.Seed(pbkdf2_sha512_singleblock(mnemonic, salt, 2048));
    }
}
exports.Mnemonic = Mnemonic;
_Mnemonic_mnemonic = new WeakMap();
//# sourceMappingURL=bip39.js.map