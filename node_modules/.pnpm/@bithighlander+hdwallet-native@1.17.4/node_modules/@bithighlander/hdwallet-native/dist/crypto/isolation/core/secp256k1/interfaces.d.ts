import { ByteArray, Uint32 } from "../../types";
import { CurvePoint, Message, RecoverableSignature, Signature } from "./types";
import * as Digest from "../digest";
export interface ECDSAKey {
    readonly publicKey: CurvePoint;
    ecdsaSign(message: Message): Promise<NonNullable<Signature>>;
    ecdsaSign(message: Message, counter: Uint32): Promise<NonNullable<Signature> | undefined>;
}
export interface ECDSARecoverableKey extends ECDSAKey {
    ecdsaSign(message: Message): Promise<NonNullable<RecoverableSignature>>;
    ecdsaSign(message: Message, counter: Uint32): Promise<NonNullable<RecoverableSignature> | undefined>;
}
export interface ECDHKey {
    readonly publicKey: CurvePoint;
    ecdh(publicKey: CurvePoint, digestAlgorithm?: Digest.AlgorithmName<32>): Promise<NonNullable<ByteArray<32>>>;
    ecdhRaw?(publicKey: CurvePoint): Promise<NonNullable<CurvePoint>>;
}
//# sourceMappingURL=interfaces.d.ts.map