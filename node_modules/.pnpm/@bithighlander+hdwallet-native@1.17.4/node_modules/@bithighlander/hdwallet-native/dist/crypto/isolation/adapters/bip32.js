"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BIP32Adapter = void 0;
const bip32 = __importStar(require("bip32"));
const bs58check_1 = __importDefault(require("bs58check"));
const bitcoin_cash_js_lib_1 = require("@bithighlander/bitcoin-cash-js-lib");
const core_1 = require("../core");
const bitcoin_1 = require("./bitcoin");
class BIP32Adapter extends bitcoin_1.ECPairAdapter {
    constructor(isolatedNode, networkOrParent, index) {
        super(isolatedNode, networkOrParent instanceof BIP32Adapter ? networkOrParent.network : networkOrParent);
        this._children = new Map();
        this._isolatedNode = isolatedNode;
        this.index = index !== null && index !== void 0 ? index : 0;
        if (networkOrParent instanceof BIP32Adapter)
            this._parent = networkOrParent;
    }
    get depth() {
        var _a, _b;
        return ((_b = (_a = this._parent) === null || _a === void 0 ? void 0 : _a.depth) !== null && _b !== void 0 ? _b : -1) + 1;
    }
    get chainCode() {
        return Buffer.from(this._isolatedNode.chainCode);
    }
    get identifier() {
        var _a;
        return (this._identifier =
            (_a = this._identifier) !== null && _a !== void 0 ? _a : bitcoin_cash_js_lib_1.crypto.hash160(Buffer.from(core_1.SecP256K1.CompressedPoint.from(this._isolatedKey.publicKey))));
    }
    get fingerprint() {
        return this.identifier.slice(0, 4);
    }
    get parentFingerprint() {
        return this._parent ? this._parent.fingerprint.readUInt32BE(0) : 0;
    }
    get path() {
        var _a;
        if (!this._parent)
            return "";
        let parentPath = (_a = this._parent.path) !== null && _a !== void 0 ? _a : "";
        if (parentPath === "")
            parentPath = "m";
        const hardened = this.index >= 0x80000000;
        const index = hardened ? this.index - 0x80000000 : this.index;
        return `${parentPath}/${index}${hardened ? "'" : ""}`;
    }
    get publicKey() {
        return Buffer.from(core_1.SecP256K1.CompressedPoint.from(this._isolatedNode.publicKey));
    }
    isNeutered() {
        return false;
    }
    neutered() {
        if (!this._base58) {
            const xpub = Buffer.alloc(78);
            xpub.writeUInt32BE(this.network.bip32.public, 0);
            xpub.writeUInt8(this.depth, 4);
            xpub.writeUInt32BE(this.parentFingerprint, 5);
            xpub.writeUInt32BE(this.index, 9);
            xpub.set(this.chainCode, 13);
            xpub.set(this.publicKey, 45);
            this._base58 = bs58check_1.default.encode(xpub);
        }
        return bip32.fromBase58(this._base58, this.network);
    }
    toBase58() {
        throw new core_1.IsolationError("xpriv");
    }
    derive(index) {
        let out = this._children.get(index);
        if (!out) {
            out = new BIP32Adapter(this._isolatedNode.derive(index), this, index);
            this._children.set(index, out);
        }
        return out;
    }
    deriveHardened(index) {
        return this.derive(index + 0x80000000);
    }
    derivePath(path) {
        const ownPath = this.path;
        if (path.startsWith(ownPath))
            path = path.slice(ownPath.length);
        if (/^m/.test(path) && this._parent)
            throw new Error("expected master, got child");
        return core_1.BIP32.derivePath(this, path);
    }
}
exports.BIP32Adapter = BIP32Adapter;
exports.default = BIP32Adapter;
//# sourceMappingURL=bip32.js.map