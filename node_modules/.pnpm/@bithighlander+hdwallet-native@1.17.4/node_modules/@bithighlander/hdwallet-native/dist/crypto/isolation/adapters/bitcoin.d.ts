/// <reference types="node" />
import { ECPairInterface, Network, SignerAsync } from "@bithighlander/bitcoin-cash-js-lib";
import { SecP256K1 } from "../core";
export declare type ECPairInterfaceAsync = Omit<ECPairInterface, "sign"> & Pick<SignerAsync, "sign">;
export declare class ECPairAdapter implements SecP256K1.ECDSAKey, SignerAsync, ECPairInterfaceAsync {
    protected _isolatedKey: SecP256K1.ECDSAKey;
    readonly _network: Network | undefined;
    compressed: boolean;
    lowR: boolean;
    constructor(isolatedKey: SecP256K1.ECDSAKey, network?: Network);
    get network(): Network;
    get ecdsaSign(): {
        (message: Uint8Array | (Uint8Array & {
            length: 32;
        } & {
            length: 32;
        } & {
            preimage: Uint8Array;
            algorithm: "sha256";
        }) | (Uint8Array & {
            length: 32;
        } & {
            length: 32;
        } & {
            preimage: Uint8Array;
            algorithm: "hash256";
        }) | (Uint8Array & {
            length: 32;
        } & {
            length: 32;
        } & {
            preimage: Uint8Array;
            algorithm: "keccak256";
        })): Promise<Uint8Array & {
            length: 64;
        } & {
            recoveryParam?: 0 | 2 | 3 | 1 | undefined;
        }>;
        (message: Uint8Array | (Uint8Array & {
            length: 32;
        } & {
            length: 32;
        } & {
            preimage: Uint8Array;
            algorithm: "sha256";
        }) | (Uint8Array & {
            length: 32;
        } & {
            length: 32;
        } & {
            preimage: Uint8Array;
            algorithm: "hash256";
        }) | (Uint8Array & {
            length: 32;
        } & {
            length: 32;
        } & {
            preimage: Uint8Array;
            algorithm: "keccak256";
        }), counter: number): Promise<(Uint8Array & {
            length: 64;
        } & {
            recoveryParam?: 0 | 2 | 3 | 1 | undefined;
        }) | undefined>;
    };
    get ecdh(): any;
    get ecdhRaw(): any;
    sign(hash: Uint8Array, lowR?: boolean): Promise<Buffer>;
    get publicKey(): Buffer & SecP256K1.CurvePoint;
    getPublicKey(): Buffer & SecP256K1.CurvePoint;
    toWIF(): never;
    verify(hash: Uint8Array, signature: Uint8Array): boolean;
}
export default ECPairAdapter;
//# sourceMappingURL=bitcoin.d.ts.map