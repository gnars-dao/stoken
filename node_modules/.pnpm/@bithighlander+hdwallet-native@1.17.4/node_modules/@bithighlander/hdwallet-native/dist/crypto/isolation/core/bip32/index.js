"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.derivePath = void 0;
__exportStar(require("./types"), exports);
__exportStar(require("./interfaces"), exports);
const types_1 = require("./types");
function derivePath(node, path) {
    // This logic is copied (almost) wholesale from the bip32 package.
    types_1.Path.assert(path);
    let splitPath = path.split('/');
    if (splitPath[0] === 'm') {
        splitPath = splitPath.slice(1);
    }
    const endIndex = splitPath.lastIndexOf("");
    if (endIndex >= 0)
        splitPath = splitPath.slice(0, endIndex);
    return splitPath.reduce((prevHd, indexStr) => {
        let index;
        if (indexStr.slice(-1) === `'`) {
            index = parseInt(indexStr.slice(0, -1), 10);
            return prevHd.derive(index + 0x80000000);
        }
        else {
            index = parseInt(indexStr, 10);
            return prevHd.derive(index);
        }
    }, node);
}
exports.derivePath = derivePath;
//# sourceMappingURL=index.js.map