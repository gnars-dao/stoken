/// <reference types="node" />
export * from "../../core/bip32";
import * as BIP32 from "../../core/bip32";
import { ByteArray, Uint32 } from "../../types";
import { Digest, SecP256K1 } from "../../core";
export declare class Seed implements BIP32.Seed {
    #private;
    constructor(seed: Uint8Array);
    toMasterKey(hmacKey?: string | Uint8Array): Node;
}
export declare class Node implements BIP32.Node, SecP256K1.ECDSARecoverableKey, SecP256K1.ECDHKey {
    #private;
    readonly chainCode: Buffer & BIP32.ChainCode;
    constructor(privateKey: Uint8Array, chainCode: Uint8Array);
    get publicKey(): Uint8Array & {
        length: 33;
    } & {
        0: 2 | 3;
    };
    ecdsaSign(msg: SecP256K1.Message, counter?: Uint32): Promise<SecP256K1.RecoverableSignature>;
    derive(index: Uint32): this;
    ecdh(publicKey: SecP256K1.CurvePoint, digestAlgorithm?: Digest.AlgorithmName<32>): Promise<ByteArray<32>>;
    ecdhRaw(publicKey: SecP256K1.CurvePoint): Promise<SecP256K1.UncompressedPoint>;
    private _ecdh;
}
//# sourceMappingURL=bip32.d.ts.map