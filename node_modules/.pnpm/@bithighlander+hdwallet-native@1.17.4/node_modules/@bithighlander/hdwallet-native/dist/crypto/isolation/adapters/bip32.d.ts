/// <reference types="node" />
import * as bip32 from "bip32";
import { Network, SignerAsync } from "@bithighlander/bitcoin-cash-js-lib";
import { BIP32 } from "../core";
import { ECPairAdapter } from "./bitcoin";
export declare type BIP32InterfaceAsync = Omit<bip32.BIP32Interface, "sign" | "derive" | "deriveHardened" | "derivePath"> & Pick<SignerAsync, "sign"> & {
    derive(index: number): BIP32InterfaceAsync;
    deriveHardened(index: number): BIP32InterfaceAsync;
    derivePath(path: string): BIP32InterfaceAsync;
};
export declare class BIP32Adapter extends ECPairAdapter implements BIP32.Node, BIP32InterfaceAsync {
    protected readonly _isolatedNode: BIP32.Node;
    readonly index: number;
    readonly _parent?: BIP32Adapter;
    readonly _children: Map<number, this>;
    _identifier?: Buffer;
    _base58?: string;
    constructor(isolatedNode: BIP32.Node, networkOrParent?: BIP32Adapter | Network, index?: number);
    get depth(): number;
    get chainCode(): Buffer & Uint8Array & {
        length: 32;
    };
    get identifier(): Buffer;
    get fingerprint(): Buffer;
    get parentFingerprint(): number;
    get path(): string;
    get publicKey(): Buffer & Uint8Array & {
        length: 33;
    } & {
        0: 2 | 3;
    };
    isNeutered(): boolean;
    neutered(): bip32.BIP32Interface;
    toBase58(): never;
    derive(index: number): this;
    deriveHardened(index: number): BIP32Adapter;
    derivePath(path: string): BIP32Adapter;
}
export default BIP32Adapter;
//# sourceMappingURL=bip32.d.ts.map