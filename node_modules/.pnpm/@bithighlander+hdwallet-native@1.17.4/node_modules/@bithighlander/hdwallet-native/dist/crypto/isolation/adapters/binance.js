"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.signingDelegate = void 0;
const bnb_javascript_sdk_nobroadcast_1 = require("bnb-javascript-sdk-nobroadcast");
const core_1 = require("../core");
function signingDelegate(keyPair) {
    return (tx, signMsg) => __awaiter(this, void 0, void 0, function* () {
        const signBytes = tx.getSignBytes(signMsg);
        const signHash = core_1.Digest.Algorithms["sha256"](signBytes);
        const pubKey = bnb_javascript_sdk_nobroadcast_1.crypto.getPublicKey(Buffer.from(keyPair.publicKey).toString("hex"));
        const sig = Buffer.from(yield core_1.SecP256K1.Signature.signCanonically(keyPair, signHash));
        tx.addSignature(pubKey, sig);
        return tx;
    });
}
exports.signingDelegate = signingDelegate;
exports.default = signingDelegate;
//# sourceMappingURL=binance.js.map