"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignerAdapter = void 0;
const core = __importStar(require("@bithighlander/hdwallet-core"));
const ethers = __importStar(require("ethers"));
const core_1 = require("../core");
class SignerAdapter extends ethers.Signer {
    constructor(isolatedKey, provider) {
        super();
        this._isolatedKey = isolatedKey;
        this.provider = provider;
    }
    connect(provider) {
        return new SignerAdapter(this._isolatedKey, provider);
    }
    getAddress() {
        return __awaiter(this, void 0, void 0, function* () {
            return ethers.utils.computeAddress(core_1.SecP256K1.UncompressedPoint.from(this._isolatedKey.publicKey));
        });
    }
    signDigest(digest) {
        return __awaiter(this, void 0, void 0, function* () {
            const rawSig = yield core_1.SecP256K1.RecoverableSignature.signCanonically(this._isolatedKey, digest instanceof Uint8Array ? digest : ethers.utils.arrayify(digest));
            return ethers.utils.splitSignature(core.compatibleBufferConcat([rawSig, Buffer.from([rawSig.recoveryParam])]));
        });
    }
    signTransaction(transaction) {
        return __awaiter(this, void 0, void 0, function* () {
            const tx = yield ethers.utils.resolveProperties(transaction);
            if (tx.from != null) {
                if (ethers.utils.getAddress(tx.from) !== (yield this.getAddress())) {
                    throw new Error("transaction from address mismatch");
                }
                delete tx.from;
            }
            const unsignedTx = Object.assign(Object.assign({}, tx), { nonce: tx.nonce !== undefined ? ethers.BigNumber.from(tx.nonce).toNumber() : undefined });
            const txBuf = ethers.utils.arrayify(ethers.utils.serializeTransaction(unsignedTx));
            const signature = yield this.signDigest(core_1.Digest.Algorithms["keccak256"](txBuf));
            return ethers.utils.serializeTransaction(unsignedTx, signature);
        });
    }
    signMessage(messageData) {
        return __awaiter(this, void 0, void 0, function* () {
            const messageDataBuf = typeof messageData === "string"
                ? Buffer.from(messageData.normalize("NFKD"), "utf8")
                : Buffer.from(ethers.utils.arrayify(messageData));
            const messageBuf = core.compatibleBufferConcat([Buffer.from(`\x19Ethereum Signed Message:\n${messageDataBuf.length}`, "utf8"), messageDataBuf]);
            const signature = yield this.signDigest(core_1.Digest.Algorithms["keccak256"](messageBuf));
            return ethers.utils.joinSignature(signature);
        });
    }
}
exports.SignerAdapter = SignerAdapter;
exports.default = SignerAdapter;
//# sourceMappingURL=ethereum.js.map