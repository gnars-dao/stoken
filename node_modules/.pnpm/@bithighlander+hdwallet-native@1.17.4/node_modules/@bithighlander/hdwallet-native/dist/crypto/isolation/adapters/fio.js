"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ExternalSignerAdapter = void 0;
const core = __importStar(require("@bithighlander/hdwallet-core"));
const bs58_1 = __importDefault(require("bs58"));
const core_1 = require("../core");
const Digest = __importStar(require("../core/digest"));
const types_1 = require("../types");
function bs58FioEncode(raw, keyType = "") {
    const typeBuf = Buffer.from(keyType, "utf8");
    const checksum = Digest.Algorithms["ripemd160"](core.compatibleBufferConcat([raw, typeBuf])).slice(0, 4);
    return bs58_1.default.encode(core.compatibleBufferConcat([raw, checksum]));
}
class ExternalSignerAdapter {
    constructor(isolatedKey) {
        this._isolatedKey = isolatedKey;
    }
    get publicKey() {
        const raw = core_1.SecP256K1.CompressedPoint.from(this._isolatedKey.publicKey);
        return `FIO${bs58FioEncode(raw)}`;
    }
    sign(signBuf) {
        return __awaiter(this, void 0, void 0, function* () {
            const signBufHash = Digest.Algorithms["sha256"](signBuf);
            const sig = yield core_1.SecP256K1.RecoverableSignature.signCanonically(this._isolatedKey, signBufHash);
            const fioSigBuf = core.compatibleBufferConcat([Buffer.from([sig.recoveryParam + 4 + 27]), core_1.SecP256K1.RecoverableSignature.r(sig), core_1.SecP256K1.RecoverableSignature.s(sig)]);
            return `SIG_K1_${bs58FioEncode(fioSigBuf, "K1")}`;
        });
    }
    getSharedSecret(publicKey) {
        return __awaiter(this, void 0, void 0, function* () {
            return Buffer.from(Digest.Algorithms["sha512"](yield this._isolatedKey.ecdh((0, types_1.checkType)(core_1.SecP256K1.CurvePoint, publicKey.toBuffer()))));
        });
    }
}
exports.ExternalSignerAdapter = ExternalSignerAdapter;
exports.default = ExternalSignerAdapter;
//# sourceMappingURL=fio.js.map