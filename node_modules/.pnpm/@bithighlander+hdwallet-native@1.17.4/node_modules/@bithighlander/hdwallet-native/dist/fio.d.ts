/// <reference types="node" />
import * as fio from "@shapeshiftoss/fiosdk";
import * as core from "@bithighlander/hdwallet-core";
import { NativeHDWalletBase } from "./native";
import * as Isolation from "./crypto/isolation";
export declare function MixinNativeFioWalletInfo<TBase extends core.Constructor<core.HDWalletInfo>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsFioInfo: true;
        fioSupportsNetwork(): Promise<boolean>;
        fioSupportsSecureTransfer(): Promise<boolean>;
        fioGetAccountPaths(msg: core.FioGetAccountPaths): Array<core.FioAccountPath>;
        fioNextAccountPath(msg: core.FioAccountPath): core.FioAccountPath | undefined;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
export declare function MixinNativeFioWallet<TBase extends core.Constructor<NativeHDWalletBase>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsFio: true;
        baseUrl: string;
        "__#9@#seed": Isolation.Core.BIP32.Seed | undefined;
        fioInitializeWallet(seed: Buffer | Isolation.Core.BIP32.Seed): Promise<void>;
        fioWipe(): void;
        getFioSdk(addressNList: core.BIP32Path): Promise<fio.FIOSDK | null>;
        fioGetAddress(msg: core.FioGetAddress): Promise<string | null>;
        fioSignTx(msg: core.FioSignTx): Promise<core.FioSignedTx | null>;
        fioEncryptRequestContent<T extends core.Fio.ContentType>(msg: core.FioEncryptRequestContentMsg<T>): Promise<string | null>;
        fioDecryptRequestContent<T_1 extends core.Fio.ContentType>(msg: core.FioDecryptRequestContentMsg<T_1>): Promise<core.Fio.Content<T_1> | null>;
        readonly "__#14@#events": import("eventemitter2").EventEmitter2;
        readonly events: import("eventemitter2").EventEmitter2;
        needsMnemonic<T_2>(hasMnemonic: boolean, callback: () => T_2): T_2 | null;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
//# sourceMappingURL=fio.d.ts.map