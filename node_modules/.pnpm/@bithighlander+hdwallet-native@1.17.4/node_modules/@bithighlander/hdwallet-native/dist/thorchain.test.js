"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core = __importStar(require("@bithighlander/hdwallet-core"));
const native = __importStar(require("./native"));
const MNEMONIC = "all all all all all all all all all all all all";
const mswMock = require("mswMock")().startServer();
afterEach(() => expect(mswMock).not.toHaveBeenCalled());
const untouchable = require("untouchableMock");
describe("NativeThorchainWalletInfo", () => {
    const info = native.info();
    it("should return some static metadata", () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(untouchable.call(info, "thorchainSupportsNetwork")).resolves.toBe(true);
        yield expect(untouchable.call(info, "thorchainSupportsSecureTransfer")).resolves.toBe(false);
    }));
    it("should return the correct account paths", () => __awaiter(void 0, void 0, void 0, function* () {
        const paths = info.thorchainGetAccountPaths({ accountIdx: 0 });
        expect(paths).toMatchObject([{ addressNList: core.bip32ToAddressNList("m/44'/931'/0'/0/0") }]);
    }));
    it("does not support getting the next account path", () => __awaiter(void 0, void 0, void 0, function* () {
        expect(untouchable.call(info, "thorchainNextAccountPath", {})).toBe(undefined);
    }));
});
describe("NativeThorchainWallet", () => {
    let wallet;
    beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
        wallet = native.create({ deviceId: "native" });
        yield wallet.loadDevice({ mnemonic: MNEMONIC });
        yield expect(wallet.initialize()).resolves.toBe(true);
    }));
    it("should generate a correct thorchain address", () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(wallet.thorchainGetAddress({ addressNList: core.bip32ToAddressNList("m/44'/931'/0'/0/0") })).resolves.toBe("thor1ujumx36gj3jv33gcw49dfafdddza3kdcd38paq");
    }));
    it("should generate another correct thorchain address", () => __awaiter(void 0, void 0, void 0, function* () {
        yield expect(wallet.thorchainGetAddress({ addressNList: core.bip32ToAddressNList("m/44'/931'/1337'/123/4") })).resolves.toBe("thor14hqwsy4qpwzsdk2l3h3q82eghg4ctaa38rx63g");
    }));
    it("should sign a transaction correctly", () => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c, _d;
        const signed = yield wallet.thorchainSignTx({
            addressNList: core.bip32ToAddressNList("m/44'/931'/0'/0/0"),
            tx: {
                msg: [{ type: "foo", value: "bar" }],
                fee: {
                    amount: [{ denom: "foo", amount: "bar" }],
                    gas: "baz",
                },
                signatures: null,
                memo: "foobar",
            },
            chain_id: "foobar",
            account_number: "foo",
            sequence: "bar",
        });
        expect((_a = signed === null || signed === void 0 ? void 0 : signed.signatures) === null || _a === void 0 ? void 0 : _a.length).toBe(1);
        expect((_c = (_b = signed === null || signed === void 0 ? void 0 : signed.signatures) === null || _b === void 0 ? void 0 : _b[0].pub_key) === null || _c === void 0 ? void 0 : _c.value).toMatchInlineSnapshot(`"A1DSQ2pqr8D5di36Uj6M/sbvkSi7nMf/07yMwcBXyJHL"`);
        expect((_d = signed === null || signed === void 0 ? void 0 : signed.signatures) === null || _d === void 0 ? void 0 : _d[0].signature).toMatchInlineSnapshot(`"3fYykzgna7MWg9VLhsYwHMEF55ZHQEmefq5KOH0jRtNDOYc2K0J9ss3sts54i5I52sg5dA4aGC/yJuSDGUlUJQ=="`);
    }));
});
//# sourceMappingURL=thorchain.test.js.map