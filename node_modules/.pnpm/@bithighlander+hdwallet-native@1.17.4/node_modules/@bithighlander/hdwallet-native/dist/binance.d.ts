import * as core from "@bithighlander/hdwallet-core";
import { NativeHDWalletBase } from "./native";
import { Seed as IsolatedBIP32Seed } from "./crypto/isolation/core/bip32/interfaces";
export declare function MixinNativeBinanceWalletInfo<TBase extends core.Constructor<core.HDWalletInfo>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsBinanceInfo: true;
        binanceSupportsNetwork(): Promise<boolean>;
        binanceSupportsSecureTransfer(): Promise<boolean>;
        binanceGetAccountPaths(msg: core.BinanceGetAccountPaths): Array<core.BinanceAccountPath>;
        binanceNextAccountPath(msg: core.BinanceAccountPath): core.BinanceAccountPath | undefined;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
export declare function MixinNativeBinanceWallet<TBase extends core.Constructor<NativeHDWalletBase>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsBinance: true;
        "__#4@#seed": IsolatedBIP32Seed | undefined;
        binanceInitializeWallet(seed: IsolatedBIP32Seed): Promise<void>;
        binanceWipe(): void;
        binanceBech32ify(address: ArrayLike<number>, prefix: string): string;
        createBinanceAddress(publicKey: string, testnet?: boolean | undefined): string;
        binanceGetAddress(msg: core.BinanceGetAddress & {
            testnet?: boolean;
        }): Promise<string | null>;
        binanceSignTx(msg: core.BinanceSignTx & {
            testnet?: boolean;
        }): Promise<core.BinanceSignedTx | null>;
        readonly "__#14@#events": import("eventemitter2").EventEmitter2;
        readonly events: import("eventemitter2").EventEmitter2;
        needsMnemonic<T>(hasMnemonic: boolean, callback: () => T): T | null;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
//# sourceMappingURL=binance.d.ts.map