import type { AccountLike, AccountLikeArray, GranularityId } from "./account";
import type { CryptoCurrency, TokenCurrency } from "@ledgerhq/types-cryptoassets";
/**
 *
 */
export type BalanceHistoryData = {
    date: Date;
    value: number;
};
/**
 *
 */
export type BalanceHistory = BalanceHistoryData[];
/**
 *
 */
export type BalanceHistoryRaw = Array<[string, string]>;
/**
 *
 */
export type BalanceHistoryWithCountervalue = (BalanceHistoryData & {
    countervalue: number | null | undefined;
})[];
/**
 *
 */
export type ValueChange = {
    percentage: number | null | undefined;
    value: number;
};
/**
 *
 */
export type AccountPortfolio = {
    history: BalanceHistoryWithCountervalue;
    countervalueAvailable: boolean;
    countervalueReceiveSum: number;
    countervalueSendSum: number;
    cryptoChange: ValueChange;
    countervalueChange: ValueChange;
};
/**
 *
 */
export type CurrencyPortfolio = {
    history: BalanceHistoryWithCountervalue;
    countervalueAvailable: boolean;
    histories: BalanceHistoryWithCountervalue[];
    accounts: AccountLikeArray;
    cryptoChange: ValueChange;
    range: PortfolioRange;
    countervalueChange: ValueChange;
};
/**
 *
 */
export type Portfolio = {
    balanceHistory: BalanceHistory;
    balanceAvailable: boolean;
    availableAccounts: AccountLike[];
    unavailableCurrencies: (CryptoCurrency | TokenCurrency)[];
    accounts: AccountLike[];
    range: PortfolioRange;
    histories: BalanceHistoryWithCountervalue[];
    countervalueReceiveSum: number;
    countervalueSendSum: number;
    countervalueChange: ValueChange;
};
/**
 *
 */
export type PortfolioRangeConfig = {
    count?: number;
    granularityId: GranularityId;
    startOf: (arg0: Date) => Date;
    increment: number;
};
/**
 *
 */
export type PortfolioRange = "all" | "year" | "month" | "week" | "day";
export type DistributionItem = {
    currency: CryptoCurrency | TokenCurrency;
    distribution: number;
    accounts: AccountLike[];
    amount: number;
    countervalue?: number;
};
/**
 *
 */
export type AssetsDistribution = {
    isAvailable: boolean;
    list: DistributionItem[];
    showFirst: number;
    sum: number;
};
//# sourceMappingURL=portfolio.d.ts.map