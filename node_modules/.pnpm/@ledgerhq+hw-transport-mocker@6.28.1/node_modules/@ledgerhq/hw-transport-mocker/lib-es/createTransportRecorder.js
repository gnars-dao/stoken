import Transport from "@ledgerhq/hw-transport";
/**
 * decorate a real transport and proxy it to record the APDUs.
 * @param {Transport} DecoratedTransport: an actual transport class. Like @ledgerhq/hw-transport-webusb
 * @param {RecordStore} recordStore: a record store to record the apdu in.
 */
const createTransportRecorder = (DecoratedTransport, recordStore) => {
    class TransportRecorder extends Transport {
        setScrambleKey() { }
        close() {
            return this.transport.close();
        }
        constructor(t) {
            super();
            this.transport = t;
        }
        exchange(apdu) {
            const output = this.transport.exchange(apdu);
            output.then(out => {
                recordStore.recordExchange(apdu, out);
            });
            return output;
        }
    }
    TransportRecorder.recordStore = recordStore;
    TransportRecorder.isSupported = DecoratedTransport.constructor.isSupported;
    TransportRecorder.list = DecoratedTransport.constructor.list;
    TransportRecorder.listen = DecoratedTransport.constructor.listen;
    TransportRecorder.open = (descriptor, ...args) => DecoratedTransport.constructor
        .open(descriptor, ...args)
        .then(t => new TransportRecorder(t));
    return TransportRecorder;
};
export default createTransportRecorder;
//# sourceMappingURL=createTransportRecorder.js.map