"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const hw_transport_1 = __importDefault(require("@ledgerhq/hw-transport"));
const logs_1 = require("@ledgerhq/logs");
/**
 * create a transport replayer with a record store.
 * @param recordStore
 */
const createTransportReplayer = (recordStore) => {
    console.warn("TO BE DEPRECATED: use openTransportReplayer instead");
    class TransportReplayer extends hw_transport_1.default {
        setScrambleKey() { }
        close() {
            return Promise.resolve();
        }
        exchange(apdu) {
            (0, logs_1.log)("apdu", apdu.toString("hex"));
            try {
                const buffer = recordStore.replayExchange(apdu);
                (0, logs_1.log)("apdu", buffer.toString("hex"));
                return Promise.resolve(buffer);
            }
            catch (e) {
                (0, logs_1.log)("apdu-error", String(e));
                return Promise.reject(e);
            }
        }
    }
    TransportReplayer.isSupported = () => Promise.resolve(true);
    TransportReplayer.list = () => Promise.resolve([null]);
    TransportReplayer.listen = o => {
        let unsubscribed;
        setTimeout(() => {
            if (unsubscribed)
                return;
            o.next({
                type: "add",
                descriptor: null,
            });
            o.complete();
        }, 0);
        return {
            unsubscribe: () => {
                unsubscribed = true;
            },
        };
    };
    TransportReplayer.open = () => Promise.resolve(new TransportReplayer());
    return TransportReplayer;
};
exports.default = createTransportReplayer;
//# sourceMappingURL=createTransportReplayer.js.map