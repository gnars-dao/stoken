{"version":3,"file":"request.js","sourceRoot":"","sources":["../src/request.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  PermissionSpecificationBuilder,\n  PermissionType,\n  RestrictedMethodOptions,\n} from '@metamask/permission-controller';\nimport { PermittedHandlerExport } from '@metamask/types';\nimport { JsonRpcParams } from '@metamask/utils';\n\nimport { methodHandlers } from './permitted';\nimport { restrictedMethodPermissionBuilders } from './restricted';\n\n/**\n * Get the method implementation from a {@link PermittedHandlerExport}.\n *\n * @template Handler - A permitted handler export.\n */\ntype PermittedMethodImplementation<Handler> =\n  Handler extends PermittedHandlerExport<any, infer Args, infer Result>\n    ? (args: Args) => Promise<Result>\n    : never;\n\n/**\n * Get a JSON-RPC method type from a {@link PermittedHandlerExport} and a method\n * name.\n *\n * @template MethodName - The name of the method.\n * @template Handler - A permitted handler export.\n */\ntype PermittedMethod<\n  MethodName extends string,\n  Handler,\n> = PermittedMethodImplementation<Handler> extends (\n  args: infer Args,\n) => infer Return\n  ? (args: { method: MethodName; params?: Args }) => Return\n  : never;\n\n/**\n * Get a restricted method implementation from a\n * {@link PermissionSpecificationBuilder}.\n *\n * @template Builder - A permission specification builder.\n */\ntype RestrictedMethodImplementation<Builder> = Builder extends {\n  specificationBuilder: PermissionSpecificationBuilder<\n    PermissionType.RestrictedMethod,\n    any,\n    infer Specification\n  >;\n}\n  ? Specification['methodImplementation']\n  : never;\n\n/**\n * Get a JSON-RPC method type from a {@link PermissionSpecificationBuilder}.\n *\n * @template Builder - A permission specification builder.\n */\ntype RestrictedMethod<Builder extends { targetName: string }> =\n  RestrictedMethodImplementation<Builder> extends (\n    args: infer Args,\n  ) => infer Return\n    ? Args extends RestrictedMethodOptions<infer Params>\n      ? (args: { method: Builder['targetName']; params?: Params }) => Return\n      : never\n    : never;\n\n/**\n * A type containing all permitted JSON-RPC methods as functions.\n */\ntype PermittedMethodFunction = {\n  [MethodName in keyof typeof methodHandlers]: PermittedMethod<\n    MethodName,\n    typeof methodHandlers[MethodName]\n  >;\n};\n\n/**\n * A type containing all restricted JSON-RPC methods as functions.\n */\ntype RestrictedMethodFunction = {\n  [Builder in keyof typeof restrictedMethodPermissionBuilders]: RestrictedMethod<\n    typeof restrictedMethodPermissionBuilders[Builder]\n  >;\n};\n\n/**\n * A type containing all supported JSON-RPC methods as functions.\n */\ntype MethodFunction = RestrictedMethodFunction & PermittedMethodFunction;\n\n/**\n * Fallback method name. `wallet_*` is supported by Snaps, but these functions\n * are not implemented in `@metamask/rpc-methods`, so we don't have a type for\n * them.\n */\ntype WalletMethodName = `wallet_${string}`;\n\n/**\n * Get a typed function if the method is defined in {@link MethodFunction}, or\n * a generic function if the method name extends {@link WalletMethodName}.\n * Otherwise, this returns `never`.\n */\ntype MethodFunctionFallback<MethodName> =\n  MethodName extends keyof MethodFunction\n    ? MethodFunction[MethodName]\n    : MethodName extends WalletMethodName\n    ? (args: { method: MethodName; params?: JsonRpcParams }) => Promise<unknown>\n    : never;\n\n/**\n * Get the JSON-RPC object from a method name.\n *\n * @template MethodName - The name of the method. In most cases this is inferred\n * from the args.\n */\nexport type ObjectFromMethodName<\n  MethodName extends keyof MethodFunction | WalletMethodName,\n> = {\n  method: MethodName;\n  params?: Parameters<MethodFunctionFallback<MethodName>>[0] extends {\n    params?: infer Params;\n  }\n    ? Params\n    : never;\n};\n\nexport type MethodReturnType<\n  MethodName extends keyof MethodFunction | WalletMethodName,\n> = ReturnType<MethodFunctionFallback<MethodName>>;\n\n/**\n * A function that takes a JSON-RPC request and returns a JSON-RPC response.\n *\n * @template MethodName - The name of the method. In most cases this is inferred\n * from the args.\n */\nexport type RequestFunction = <\n  MethodName extends keyof MethodFunction | WalletMethodName,\n>(\n  args: ObjectFromMethodName<MethodName>,\n) => MethodReturnType<MethodName>;\n\n/**\n * The global `snap` object. This is injected into the global scope of a snap.\n */\nexport type SnapsGlobalObject = {\n  request: RequestFunction;\n};\n"]}