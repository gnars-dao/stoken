"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBip32EntropyImplementation = exports.getBip32EntropyBuilder = void 0;
const key_tree_1 = require("@metamask/key-tree");
const permission_controller_1 = require("@metamask/permission-controller");
const snaps_utils_1 = require("@metamask/snaps-utils");
const utils_1 = require("@metamask/utils");
const eth_rpc_errors_1 = require("eth-rpc-errors");
const targetName = 'snap_getBip32Entropy';
/**
 * The specification builder for the `snap_getBip32Entropy` permission.
 * `snap_getBip32Entropy` lets the Snap control private keys for a particular
 * BIP-32 node.
 *
 * @param options - The specification builder options.
 * @param options.methodHooks - The RPC method hooks needed by the method implementation.
 * @returns The specification for the `snap_getBip32Entropy` permission.
 */
const specificationBuilder = ({ methodHooks }) => {
    return {
        permissionType: permission_controller_1.PermissionType.RestrictedMethod,
        targetName,
        allowedCaveats: [snaps_utils_1.SnapCaveatType.PermittedDerivationPaths],
        methodImplementation: getBip32EntropyImplementation(methodHooks),
        validator: ({ caveats }) => {
            if (caveats?.length !== 1 ||
                caveats[0].type !== snaps_utils_1.SnapCaveatType.PermittedDerivationPaths) {
                throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({
                    message: `Expected a single "${snaps_utils_1.SnapCaveatType.PermittedDerivationPaths}" caveat.`,
                });
            }
        },
        subjectTypes: [permission_controller_1.SubjectType.Snap],
    };
};
const methodHooks = {
    getMnemonic: true,
    getUnlockPromise: true,
};
exports.getBip32EntropyBuilder = Object.freeze({
    targetName,
    specificationBuilder,
    methodHooks,
});
/**
 * Builds the method implementation for `snap_getBip32Entropy`.
 *
 * @param hooks - The RPC method hooks.
 * @param hooks.getMnemonic - A function to retrieve the Secret Recovery Phrase of the user.
 * @param hooks.getUnlockPromise - A function that resolves once the MetaMask extension is unlocked
 * and prompts the user to unlock their MetaMask if it is locked.
 * @returns The method implementation which returns a `JsonSLIP10Node`.
 * @throws If the params are invalid.
 */
function getBip32EntropyImplementation({ getMnemonic, getUnlockPromise, }) {
    return async function getBip32Entropy(args) {
        await getUnlockPromise(true);
        const { params } = args;
        (0, utils_1.assert)(params);
        const prefix = params.curve === 'ed25519' ? 'slip10' : 'bip32';
        const node = await key_tree_1.SLIP10Node.fromDerivationPath({
            curve: params.curve,
            derivationPath: [
                await getMnemonic(),
                ...params.path.slice(1).map((index) => `${prefix}:${index}`),
            ],
        });
        return node.toJSON();
    };
}
exports.getBip32EntropyImplementation = getBip32EntropyImplementation;
//# sourceMappingURL=getBip32Entropy.js.map