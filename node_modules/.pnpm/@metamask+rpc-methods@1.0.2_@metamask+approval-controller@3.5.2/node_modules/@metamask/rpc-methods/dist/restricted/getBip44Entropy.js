"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBip44EntropyImplementation = exports.getBip44EntropyBuilder = void 0;
const key_tree_1 = require("@metamask/key-tree");
const permission_controller_1 = require("@metamask/permission-controller");
const snaps_utils_1 = require("@metamask/snaps-utils");
const eth_rpc_errors_1 = require("eth-rpc-errors");
const targetName = 'snap_getBip44Entropy';
/**
 * The specification builder for the `snap_getBip44Entropy` permission.
 * `snap_getBip44Entropy_*` lets the Snap control private keys for a particular
 * BIP-32 coin type.
 *
 * @param options - The specification builder options.
 * @param options.methodHooks - The RPC method hooks needed by the method
 * implementation.
 * @returns The specification for the `snap_getBip44Entropy` permission.
 */
const specificationBuilder = ({ methodHooks }) => {
    return {
        permissionType: permission_controller_1.PermissionType.RestrictedMethod,
        targetName,
        allowedCaveats: [snaps_utils_1.SnapCaveatType.PermittedCoinTypes],
        methodImplementation: getBip44EntropyImplementation(methodHooks),
        validator: ({ caveats }) => {
            if (caveats?.length !== 1 ||
                caveats[0].type !== snaps_utils_1.SnapCaveatType.PermittedCoinTypes) {
                throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({
                    message: `Expected a single "${snaps_utils_1.SnapCaveatType.PermittedCoinTypes}" caveat.`,
                });
            }
        },
        subjectTypes: [permission_controller_1.SubjectType.Snap],
    };
};
const methodHooks = {
    getMnemonic: true,
    getUnlockPromise: true,
};
exports.getBip44EntropyBuilder = Object.freeze({
    targetName,
    specificationBuilder,
    methodHooks,
});
/**
 * Builds the method implementation for `snap_getBip44Entropy`.
 *
 * @param hooks - The RPC method hooks.
 * @param hooks.getMnemonic - A function to retrieve the Secret Recovery Phrase
 * of the user.
 * @param hooks.getUnlockPromise - A function that resolves once the MetaMask
 * extension is unlocked and prompts the user to unlock their MetaMask if it is
 * locked.
 * @returns The method implementation which returns a `BIP44CoinTypeNode`.
 * @throws If the params are invalid.
 */
function getBip44EntropyImplementation({ getMnemonic, getUnlockPromise, }) {
    return async function getBip44Entropy(args) {
        await getUnlockPromise(true);
        // `args.params` is validated by the decorator, so it's safe to assert here.
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        const params = args.params;
        const node = await key_tree_1.BIP44CoinTypeNode.fromDerivationPath([
            await getMnemonic(),
            `bip32:44'`,
            `bip32:${params.coinType}'`,
        ]);
        return node.toJSON();
    };
}
exports.getBip44EntropyImplementation = getBip44EntropyImplementation;
//# sourceMappingURL=getBip44Entropy.js.map