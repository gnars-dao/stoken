{"version":3,"file":"permittedDerivationPaths.js","sourceRoot":"","sources":["../../../src/restricted/caveats/permittedDerivationPaths.ts"],"names":[],"mappings":";;;AAKA,uDAK+B;AAC/B,2CAAqD;AACrD,mDAA2C;AAC3C,6CAAgD;AAEhD;;;;;;;GAOG;AACH,SAAgB,oCAAoC,CAClD,KAAW;IAEX,OAAO;QACL,OAAO,EAAE;YACP;gBACE,IAAI,EAAE,4BAAc,CAAC,wBAAwB;gBAC7C,KAAK;aACN;SACF;KACF,CAAC;AACJ,CAAC;AAXD,oFAWC;AAED;;;;;;;;GAQG;AACH,SAAgB,iBAAiB,CAC/B,KAAc;IAEd,IAAA,oBAAY,EACV,KAAK,EACL,gCAAkB,EAClB,wCAAwC,EACxC,0BAAS,CAAC,GAAG,CAAC,aAAa,CAC5B,CAAC;AACJ,CAAC;AATD,8CASC;AAED;;;;;;GAMG;AACH,SAAgB,wBAAwB,CACtC,MAA2B;IAE3B,IAAA,oBAAY,EACV,MAAM,EACN,IAAA,kBAAI,EAAC,EAAE,KAAK,EAAE,IAAA,kBAAI,EAAC,IAAA,mBAAK,EAAC,gCAAkB,CAAC,EAAE,CAAC,EAAE,QAAQ,CAAC,EAAE,CAAC,EAC7D,+BAA+B,EAC/B,0BAAS,CAAC,GAAG,CAAC,QAAQ,CACvB,CAAC;AACJ,CAAC;AATD,4DASC;AAEY,QAAA,2CAA2C,GAGpD;IACF,CAAC,4BAAc,CAAC,wBAAwB,CAAC,EAAE,MAAM,CAAC,MAAM,CAAC;QACvD,IAAI,EAAE,4BAAc,CAAC,wBAAwB;QAC7C,SAAS,EAAE,CACT,MAAM,EACN,MAAuE,EACvE,EAAE;YACF,OAAO,KAAK,EAAE,IAAI,EAAE,EAAE;gBACpB,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC;gBACxB,iBAAiB,CAAC,MAAM,CAAC,CAAC;gBAE1B,MAAM,IAAI,GAAG,MAAM,CAAC,KAAK,CAAC,IAAI,CAC5B,CAAC,UAAU,EAAE,EAAE,CACb,IAAA,qBAAO,EACL,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,EAC5C,UAAU,CAAC,IAAI,CAChB,IAAI,UAAU,CAAC,KAAK,KAAK,MAAM,CAAC,KAAK,CACzC,CAAC;gBAEF,IAAI,CAAC,IAAI,EAAE;oBACT,MAAM,0BAAS,CAAC,QAAQ,CAAC,YAAY,CAAC;wBACpC,OAAO,EACL,4FAA4F;qBAC/F,CAAC,CAAC;iBACJ;gBAED,OAAO,MAAM,MAAM,CAAC,IAAI,CAAC,CAAC;YAC5B,CAAC,CAAC;QACJ,CAAC;QACD,SAAS,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,wBAAwB,CAAC,MAAM,CAAC;KACxD,CAAC;CACH,CAAC","sourcesContent":["import {\n  Caveat,\n  PermissionConstraint,\n  RestrictedMethodCaveatSpecificationConstraint,\n} from '@metamask/permission-controller';\nimport {\n  SnapCaveatType,\n  Bip32Entropy,\n  Bip32EntropyStruct,\n  isEqual,\n} from '@metamask/snaps-utils';\nimport { Json, assertStruct } from '@metamask/utils';\nimport { ethErrors } from 'eth-rpc-errors';\nimport { array, size, type } from 'superstruct';\n\n/**\n * Map a raw value from the `initialPermissions` to a caveat specification.\n * Note that this function does not do any validation, that's handled by the\n * PermissionsController when the permission is requested.\n *\n * @param value - The raw value from the `initialPermissions`.\n * @returns The caveat specification.\n */\nexport function permittedDerivationPathsCaveatMapper(\n  value: Json,\n): Pick<PermissionConstraint, 'caveats'> {\n  return {\n    caveats: [\n      {\n        type: SnapCaveatType.PermittedDerivationPaths,\n        value,\n      },\n    ],\n  };\n}\n\n/**\n * Validate a caveat path object. The object must consist of a `path` array and\n * a `curve` string. Paths must start with `m`, and must contain at\n * least two indices. If `ed25519` is used, this checks if all the path indices\n * are hardened.\n *\n * @param value - The value to validate.\n * @throws If the value is invalid.\n */\nexport function validateBIP32Path(\n  value: unknown,\n): asserts value is Bip32Entropy {\n  assertStruct(\n    value,\n    Bip32EntropyStruct,\n    'Invalid BIP-32 entropy path definition',\n    ethErrors.rpc.invalidParams,\n  );\n}\n\n/**\n * Validate the path values associated with a caveat. This validates that the\n * value is a non-empty array with valid derivation paths and curves.\n *\n * @param caveat - The caveat to validate.\n * @throws If the value is invalid.\n */\nexport function validateBIP32CaveatPaths(\n  caveat: Caveat<string, any>,\n): asserts caveat is Caveat<string, Bip32Entropy[]> {\n  assertStruct(\n    caveat,\n    type({ value: size(array(Bip32EntropyStruct), 1, Infinity) }),\n    'Invalid BIP-32 entropy caveat',\n    ethErrors.rpc.internal,\n  );\n}\n\nexport const PermittedDerivationPathsCaveatSpecification: Record<\n  SnapCaveatType.PermittedDerivationPaths,\n  RestrictedMethodCaveatSpecificationConstraint\n> = {\n  [SnapCaveatType.PermittedDerivationPaths]: Object.freeze({\n    type: SnapCaveatType.PermittedDerivationPaths,\n    decorator: (\n      method,\n      caveat: Caveat<SnapCaveatType.PermittedDerivationPaths, Bip32Entropy[]>,\n    ) => {\n      return async (args) => {\n        const { params } = args;\n        validateBIP32Path(params);\n\n        const path = caveat.value.find(\n          (caveatPath) =>\n            isEqual(\n              params.path.slice(0, caveatPath.path.length),\n              caveatPath.path,\n            ) && caveatPath.curve === params.curve,\n        );\n\n        if (!path) {\n          throw ethErrors.provider.unauthorized({\n            message:\n              'The requested path is not permitted. Allowed paths must be specified in the snap manifest.',\n          });\n        }\n\n        return await method(args);\n      };\n    },\n    validator: (caveat) => validateBIP32CaveatPaths(caveat),\n  }),\n};\n"]}