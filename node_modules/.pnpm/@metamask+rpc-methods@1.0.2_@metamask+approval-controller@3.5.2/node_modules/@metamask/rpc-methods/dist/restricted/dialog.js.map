{"version":3,"file":"dialog.js","sourceRoot":"","sources":["../../src/restricted/dialog.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  PermissionSpecificationBuilder,\n  PermissionType,\n  RestrictedMethodOptions,\n  ValidPermissionSpecification,\n  SubjectType,\n} from '@metamask/permission-controller';\nimport { Component, ComponentStruct } from '@metamask/snaps-ui';\nimport { NonEmptyArray } from '@metamask/utils';\nimport { ethErrors } from 'eth-rpc-errors';\nimport {\n  create,\n  enums,\n  Infer,\n  object,\n  optional,\n  size,\n  string,\n  Struct,\n  StructError,\n  type,\n  union,\n} from 'superstruct';\n\nimport { EnumToUnion, enumValue, MethodHooksObject } from '../utils';\n\nconst methodName = 'snap_dialog';\n\nexport enum DialogType {\n  Alert = 'alert',\n  Confirmation = 'confirmation',\n  Prompt = 'prompt',\n}\n\nconst PlaceholderStruct = optional(size(string(), 1, 40));\n\nexport type Placeholder = Infer<typeof PlaceholderStruct>;\n\ntype ShowDialog = (\n  snapId: string,\n  type: EnumToUnion<DialogType>,\n  content: Component,\n  placeholder?: Placeholder,\n) => Promise<null | boolean | string>;\n\nexport type DialogMethodHooks = {\n  /**\n   * @param snapId - The ID of the Snap that created the alert.\n   * @param type - The dialog type.\n   * @param content - The dialog custom UI.\n   * @param placeholder - The placeholder for the Prompt dialog input.\n   */\n  showDialog: ShowDialog;\n};\n\ntype DialogSpecificationBuilderOptions = {\n  allowedCaveats?: Readonly<NonEmptyArray<string>> | null;\n  methodHooks: DialogMethodHooks;\n};\n\ntype DialogSpecification = ValidPermissionSpecification<{\n  permissionType: PermissionType.RestrictedMethod;\n  targetName: typeof methodName;\n  methodImplementation: ReturnType<typeof getDialogImplementation>;\n  allowedCaveats: Readonly<NonEmptyArray<string>> | null;\n}>;\n\n/**\n * The specification builder for the `snap_dialog` permission. `snap_dialog`\n * lets the Snap display one of the following dialogs to the user:\n * - An alert, for displaying information.\n * - A confirmation, for accepting or rejecting some action.\n * - A prompt, for inputting some information.\n *\n * @param options - The specification builder options.\n * @param options.allowedCaveats - The optional allowed caveats for the\n * permission.\n * @param options.methodHooks - The RPC method hooks needed by the method\n * implementation.\n * @returns The specification for the `snap_dialog` permission.\n */\nconst specificationBuilder: PermissionSpecificationBuilder<\n  PermissionType.RestrictedMethod,\n  DialogSpecificationBuilderOptions,\n  DialogSpecification\n> = ({\n  allowedCaveats = null,\n  methodHooks,\n}: DialogSpecificationBuilderOptions) => {\n  return {\n    permissionType: PermissionType.RestrictedMethod,\n    targetName: methodName,\n    allowedCaveats,\n    methodImplementation: getDialogImplementation(methodHooks),\n    subjectTypes: [SubjectType.Snap],\n  };\n};\n\nconst methodHooks: MethodHooksObject<DialogMethodHooks> = {\n  showDialog: true,\n};\n\nexport const dialogBuilder = Object.freeze({\n  targetName: methodName,\n  specificationBuilder,\n  methodHooks,\n} as const);\n\n// Note: We use `type` here instead of `object` because `type` does not validate\n// the keys of the object, which is what we want.\nconst BaseParamsStruct = type({\n  type: enums([DialogType.Alert, DialogType.Confirmation, DialogType.Prompt]),\n});\n\nconst AlertParametersStruct = object({\n  type: enumValue(DialogType.Alert),\n  content: ComponentStruct,\n});\n\nconst ConfirmationParametersStruct = object({\n  type: enumValue(DialogType.Confirmation),\n  content: ComponentStruct,\n});\n\nconst PromptParametersStruct = object({\n  type: enumValue(DialogType.Prompt),\n  content: ComponentStruct,\n  placeholder: PlaceholderStruct,\n});\n\nconst DialogParametersStruct = union([\n  AlertParametersStruct,\n  ConfirmationParametersStruct,\n  PromptParametersStruct,\n]);\n\nexport type DialogParameters = Infer<typeof DialogParametersStruct>;\n\nconst structs = {\n  [DialogType.Alert]: AlertParametersStruct,\n  [DialogType.Confirmation]: ConfirmationParametersStruct,\n  [DialogType.Prompt]: PromptParametersStruct,\n};\n\n/**\n * Builds the method implementation for `snap_dialog`.\n *\n * @param hooks - The RPC method hooks.\n * @param hooks.showDialog - A function that shows the specified dialog in the\n * MetaMask UI and returns the appropriate value for the dialog type.\n * @returns The method implementation which return value depends on the dialog\n * type, valid return types are: string, boolean, null.\n */\nexport function getDialogImplementation({ showDialog }: DialogMethodHooks) {\n  return async function dialogImplementation(\n    args: RestrictedMethodOptions<DialogParameters>,\n  ): Promise<boolean | null | string> {\n    const {\n      params,\n      context: { origin },\n    } = args;\n\n    const validatedType = getValidatedType(params);\n    const validatedParams = getValidatedParams(params, structs[validatedType]);\n\n    const { content } = validatedParams;\n\n    const placeholder =\n      validatedParams.type === DialogType.Prompt\n        ? validatedParams.placeholder\n        : undefined;\n\n    return showDialog(origin, validatedType, content, placeholder);\n  };\n}\n\n/**\n * Get the validated type of the dialog parameters. Throws an error if the type\n * is invalid.\n *\n * @param params - The parameters to validate.\n * @returns The validated type of the dialog parameters.\n */\nfunction getValidatedType(params: unknown): DialogType {\n  try {\n    return create(params, BaseParamsStruct).type;\n  } catch (error) {\n    throw ethErrors.rpc.invalidParams({\n      message: `The \"type\" property must be one of: ${Object.values(\n        DialogType,\n      ).join(', ')}.`,\n    });\n  }\n}\n\n/**\n * Validates the confirm method `params` and returns them cast to the correct\n * type. Throws if validation fails.\n *\n * @param params - The unvalidated params object from the method request.\n * @param struct - The struct to validate the params against.\n * @returns The validated confirm method parameter object.\n */\nfunction getValidatedParams(\n  params: unknown,\n  struct: Struct<any>,\n): DialogParameters {\n  try {\n    return create(params, struct);\n  } catch (error) {\n    if (error instanceof StructError) {\n      const { key, type: errorType } = error;\n\n      if (key === 'placeholder' && errorType === 'never') {\n        throw ethErrors.rpc.invalidParams({\n          message:\n            'Invalid params: Alerts or confirmations may not specify a \"placeholder\" field.',\n        });\n      }\n\n      throw ethErrors.rpc.invalidParams({\n        message: `Invalid params: ${error.message}.`,\n      });\n    }\n\n    /* istanbul ignore next */\n    throw ethErrors.rpc.internal();\n  }\n}\n"]}