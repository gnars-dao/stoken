import { DialogMethodHooks } from './dialog';
import { GetBip32EntropyMethodHooks } from './getBip32Entropy';
import { GetBip32PublicKeyMethodHooks } from './getBip32PublicKey';
import { GetBip44EntropyMethodHooks } from './getBip44Entropy';
import { GetEntropyHooks } from './getEntropy';
import { InvokeSnapMethodHooks } from './invokeSnap';
import { ManageStateMethodHooks } from './manageState';
import { NotifyMethodHooks } from './notify';
export type { DialogParameters } from './dialog';
export { DialogType } from './dialog';
export { ManageStateOperation } from './manageState';
export { WALLET_SNAP_PERMISSION_KEY } from './invokeSnap';
export type { NotificationArgs, NotificationType } from './notify';
export declare type RestrictedMethodHooks = DialogMethodHooks & GetBip32EntropyMethodHooks & GetBip32PublicKeyMethodHooks & GetBip44EntropyMethodHooks & GetEntropyHooks & InvokeSnapMethodHooks & ManageStateMethodHooks & NotifyMethodHooks;
export declare const restrictedMethodPermissionBuilders: {
    readonly snap_dialog: Readonly<{
        readonly targetName: "snap_dialog";
        readonly specificationBuilder: import("@metamask/permission-controller").PermissionSpecificationBuilder<import("@metamask/permission-controller").PermissionType.RestrictedMethod, {
            allowedCaveats?: readonly [string, ...string[]] | null | undefined;
            methodHooks: DialogMethodHooks;
        }, {
            permissionType: import("@metamask/permission-controller").PermissionType.RestrictedMethod;
            targetName: "snap_dialog";
            methodImplementation: (args: import("@metamask/permission-controller").RestrictedMethodOptions<{
                type: "alert";
                content: import("@metamask/snaps-ui").Panel | {
                    value: string;
                    type: import("@metamask/snaps-ui").NodeType.Copyable;
                } | {
                    type: import("@metamask/snaps-ui").NodeType.Divider;
                } | {
                    value: string;
                    type: import("@metamask/snaps-ui").NodeType.Heading;
                } | {
                    type: import("@metamask/snaps-ui").NodeType.Spinner;
                } | {
                    value: string;
                    type: import("@metamask/snaps-ui").NodeType.Text;
                    markdown?: boolean | undefined;
                };
            } | {
                type: "confirmation";
                content: import("@metamask/snaps-ui").Panel | {
                    value: string;
                    type: import("@metamask/snaps-ui").NodeType.Copyable;
                } | {
                    type: import("@metamask/snaps-ui").NodeType.Divider;
                } | {
                    value: string;
                    type: import("@metamask/snaps-ui").NodeType.Heading;
                } | {
                    type: import("@metamask/snaps-ui").NodeType.Spinner;
                } | {
                    value: string;
                    type: import("@metamask/snaps-ui").NodeType.Text;
                    markdown?: boolean | undefined;
                };
            } | {
                type: "prompt";
                content: import("@metamask/snaps-ui").Panel | {
                    value: string;
                    type: import("@metamask/snaps-ui").NodeType.Copyable;
                } | {
                    type: import("@metamask/snaps-ui").NodeType.Divider;
                } | {
                    value: string;
                    type: import("@metamask/snaps-ui").NodeType.Heading;
                } | {
                    type: import("@metamask/snaps-ui").NodeType.Spinner;
                } | {
                    value: string;
                    type: import("@metamask/snaps-ui").NodeType.Text;
                    markdown?: boolean | undefined;
                };
                placeholder?: string | undefined;
            }>) => Promise<string | boolean | null>;
            allowedCaveats: readonly [string, ...string[]] | null;
        }>;
        readonly methodHooks: import("../utils").MethodHooksObject<DialogMethodHooks>;
    }>;
    readonly snap_getBip32Entropy: Readonly<{
        readonly targetName: "snap_getBip32Entropy";
        readonly specificationBuilder: import("@metamask/permission-controller").PermissionSpecificationBuilder<import("@metamask/permission-controller").PermissionType.RestrictedMethod, {
            methodHooks: GetBip32EntropyMethodHooks;
        }, {
            permissionType: import("@metamask/permission-controller").PermissionType.RestrictedMethod;
            targetName: "snap_getBip32Entropy";
            methodImplementation: (args: import("@metamask/permission-controller").RestrictedMethodOptions<{
                path: string[];
                curve: "ed25519" | "secp256k1";
            }>) => Promise<import("@metamask/key-tree").JsonSLIP10Node>;
            allowedCaveats: readonly [string, ...string[]] | null;
            validator: import("@metamask/permission-controller").PermissionValidatorConstraint;
        }>;
        readonly methodHooks: import("../utils").MethodHooksObject<GetBip32EntropyMethodHooks>;
    }>;
    readonly snap_getBip32PublicKey: Readonly<{
        readonly targetName: "snap_getBip32PublicKey";
        readonly specificationBuilder: import("@metamask/permission-controller").PermissionSpecificationBuilder<import("@metamask/permission-controller").PermissionType.RestrictedMethod, {
            methodHooks: GetBip32PublicKeyMethodHooks;
        }, {
            permissionType: import("@metamask/permission-controller").PermissionType.RestrictedMethod;
            targetName: "snap_getBip32PublicKey";
            methodImplementation: (args: import("@metamask/permission-controller").RestrictedMethodOptions<{
                path: ["m", ...(`${number}` | `${number}'`)[]];
                curve: "ed25519" | "secp256k1";
                compressed?: boolean | undefined;
            }>) => Promise<string>;
            allowedCaveats: readonly [string, ...string[]] | null;
            validator: import("@metamask/permission-controller").PermissionValidatorConstraint;
        }>;
        readonly methodHooks: import("../utils").MethodHooksObject<GetBip32PublicKeyMethodHooks>;
    }>;
    readonly snap_getBip44Entropy: Readonly<{
        readonly targetName: "snap_getBip44Entropy";
        readonly specificationBuilder: import("@metamask/permission-controller").PermissionSpecificationBuilder<import("@metamask/permission-controller").PermissionType.RestrictedMethod, {
            methodHooks: GetBip44EntropyMethodHooks;
        }, {
            permissionType: import("@metamask/permission-controller").PermissionType.RestrictedMethod;
            targetName: "snap_getBip44Entropy";
            methodImplementation: (args: import("@metamask/permission-controller").RestrictedMethodOptions<import("./getBip44Entropy").GetBip44EntropyParams>) => Promise<import("@metamask/key-tree").JsonBIP44CoinTypeNode>;
            allowedCaveats: readonly [string, ...string[]] | null;
            validator: import("@metamask/permission-controller").PermissionValidatorConstraint;
        }>;
        readonly methodHooks: import("../utils").MethodHooksObject<GetBip44EntropyMethodHooks>;
    }>;
    readonly snap_getEntropy: Readonly<{
        readonly targetName: "snap_getEntropy";
        readonly specificationBuilder: import("@metamask/permission-controller").PermissionSpecificationBuilder<import("@metamask/permission-controller").PermissionType.RestrictedMethod, {
            allowedCaveats?: readonly [string, ...string[]] | null | undefined;
            methodHooks: GetEntropyHooks;
        }, {
            permissionType: import("@metamask/permission-controller").PermissionType.RestrictedMethod;
            targetName: "snap_getEntropy";
            methodImplementation: (options: import("@metamask/permission-controller").RestrictedMethodOptions<{
                version: 1;
                salt?: string | undefined;
            }>) => Promise<`0x${string}`>;
            allowedCaveats: readonly [string, ...string[]] | null;
        }>;
        readonly methodHooks: import("../utils").MethodHooksObject<GetEntropyHooks>;
    }>;
    readonly wallet_snap: Readonly<{
        readonly targetName: "wallet_snap";
        readonly specificationBuilder: import("@metamask/permission-controller").PermissionSpecificationBuilder<import("@metamask/permission-controller").PermissionType.RestrictedMethod, {
            allowedCaveats?: readonly [string, ...string[]] | null | undefined;
            methodHooks: InvokeSnapMethodHooks;
        }, {
            permissionType: import("@metamask/permission-controller").PermissionType.RestrictedMethod;
            targetName: "wallet_snap";
            methodImplementation: (options: import("@metamask/permission-controller").RestrictedMethodOptions<Record<string, import("@metamask/utils").Json>>) => Promise<import("@metamask/utils").Json>;
            allowedCaveats: readonly [string, ...string[]] | null;
            validator: import("@metamask/permission-controller").PermissionValidatorConstraint;
            sideEffect: {
                onPermitted: import("@metamask/permission-controller").SideEffectHandler<import("./invokeSnap").InstallSnaps | import("./invokeSnap").GetPermittedSnaps, never>;
            };
        }>;
        readonly methodHooks: import("../utils").MethodHooksObject<InvokeSnapMethodHooks>;
    }>;
    readonly snap_manageState: Readonly<{
        readonly targetName: "snap_manageState";
        readonly specificationBuilder: import("@metamask/permission-controller").PermissionSpecificationBuilder<import("@metamask/permission-controller").PermissionType.RestrictedMethod, {
            allowedCaveats?: readonly [string, ...string[]] | null | undefined;
            methodHooks: ManageStateMethodHooks;
        }, {
            permissionType: import("@metamask/permission-controller").PermissionType.RestrictedMethod;
            targetName: "snap_manageState";
            methodImplementation: (options: import("@metamask/permission-controller").RestrictedMethodOptions<import("./manageState").ManageStateArgs>) => Promise<Record<string, import("@metamask/utils").Json> | null>;
            allowedCaveats: readonly [string, ...string[]] | null;
        }>;
        readonly methodHooks: import("../utils").MethodHooksObject<ManageStateMethodHooks>;
    }>;
    readonly snap_notify: Readonly<{
        readonly targetName: "snap_notify";
        readonly specificationBuilder: import("@metamask/permission-controller").PermissionSpecificationBuilder<import("@metamask/permission-controller").PermissionType.RestrictedMethod, {
            allowedCaveats?: readonly [string, ...string[]] | null | undefined;
            methodHooks: NotifyMethodHooks;
        }, {
            permissionType: import("@metamask/permission-controller").PermissionType.RestrictedMethod;
            targetName: "snap_notify";
            methodImplementation: (args: import("@metamask/permission-controller").RestrictedMethodOptions<import("./notify").NotificationArgs>) => Promise<null>;
            allowedCaveats: readonly [string, ...string[]] | null;
        }>;
        readonly methodHooks: import("../utils").MethodHooksObject<NotifyMethodHooks>;
    }>;
};
export * from './caveats';
