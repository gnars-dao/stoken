"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEntropyBuilder = exports.GetEntropyArgsStruct = void 0;
const permission_controller_1 = require("@metamask/permission-controller");
const snaps_utils_1 = require("@metamask/snaps-utils");
const utils_1 = require("@metamask/utils");
const eth_rpc_errors_1 = require("eth-rpc-errors");
const superstruct_1 = require("superstruct");
const utils_2 = require("../utils");
const targetName = 'snap_getEntropy';
exports.GetEntropyArgsStruct = (0, superstruct_1.object)({
    version: (0, superstruct_1.literal)(1),
    salt: (0, superstruct_1.optional)((0, superstruct_1.string)()),
});
const specificationBuilder = ({ allowedCaveats = null, methodHooks, }) => {
    return {
        permissionType: permission_controller_1.PermissionType.RestrictedMethod,
        targetName,
        allowedCaveats,
        methodImplementation: getEntropyImplementation(methodHooks),
        subjectTypes: [permission_controller_1.SubjectType.Snap],
    };
};
const methodHooks = {
    getMnemonic: true,
    getUnlockPromise: true,
};
exports.getEntropyBuilder = Object.freeze({
    targetName,
    specificationBuilder,
    methodHooks,
});
/**
 * Builds the method implementation for `snap_getEntropy`. The implementation
 * is based on the reference implementation of
 * [SIP-6](https://metamask.github.io/SIPs/SIPS/sip-6).
 *
 * @param hooks - The RPC method hooks.
 * @param hooks.getMnemonic - The method to get the mnemonic of the user's
 * primary keyring.
 * @param hooks.getUnlockPromise - The method to get a promise that resolves
 * once the extension is unlocked.
 * @returns The method implementation.
 */
function getEntropyImplementation({ getMnemonic, getUnlockPromise, }) {
    return async function getEntropy(options) {
        const { params, context: { origin }, } = options;
        (0, utils_1.assertStruct)(params, exports.GetEntropyArgsStruct, 'Invalid "snap_getEntropy" parameters', eth_rpc_errors_1.ethErrors.rpc.invalidParams);
        await getUnlockPromise(true);
        const mnemonicPhrase = await getMnemonic();
        return (0, utils_2.deriveEntropy)({
            input: origin,
            salt: params.salt,
            mnemonicPhrase,
            magic: snaps_utils_1.SIP_6_MAGIC_VALUE,
        });
    };
}
//# sourceMappingURL=getEntropy.js.map