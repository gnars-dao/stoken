"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SnapIdsCaveatSpecification = exports.validateSnapIdsCaveat = void 0;
const snaps_utils_1 = require("@metamask/snaps-utils");
const utils_1 = require("@metamask/utils");
const eth_rpc_errors_1 = require("eth-rpc-errors");
/**
 * Validates that the caveat value exists and is a non-empty object.
 *
 * @param caveat - The caveat to validate.
 * @throws If the caveat is invalid.
 */
function validateSnapIdsCaveat(caveat) {
    if (!(0, utils_1.isObject)(caveat.value) || Object.keys(caveat.value).length === 0) {
        throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({
            message: 'Expected caveat to have a value property of a non-empty object of snap IDs.',
        });
    }
    const snapIds = Object.keys(caveat.value);
    for (const snapId of snapIds) {
        (0, snaps_utils_1.assertIsValidSnapId)(snapId);
    }
}
exports.validateSnapIdsCaveat = validateSnapIdsCaveat;
exports.SnapIdsCaveatSpecification = {
    [snaps_utils_1.SnapCaveatType.SnapIds]: Object.freeze({
        type: snaps_utils_1.SnapCaveatType.SnapIds,
        validator: (caveat) => validateSnapIdsCaveat(caveat),
        decorator: (method, caveat) => {
            return async (args) => {
                const { params, context: { origin }, } = args;
                const snapIds = caveat.value;
                const { snapId } = params;
                if (!(0, utils_1.hasProperty)(snapIds, snapId)) {
                    throw new Error(`${origin} does not have permission to invoke ${snapId} snap.`);
                }
                return await method(args);
            };
        },
    }),
};
//# sourceMappingURL=snapIds.js.map