{"version":3,"file":"snapInstallation.js","sourceRoot":"","sources":["../../../src/permitted/common/snapInstallation.ts"],"names":[],"mappings":";;;AAEA,2CAA2C;AAC3C,mDAA2C;AAQ3C;;;;;;;;;;GAUG;AACI,KAAK,UAAU,kBAAkB,CACtC,cAAoC,EACpC,YAA8B;IAE9B,IAAI,CAAC,IAAA,gBAAQ,EAAC,cAAc,CAAC,EAAE;QAC7B,MAAM,0BAAS,CAAC,GAAG,CAAC,aAAa,CAAC;YAChC,OAAO,EAAE,mCAAmC;YAC5C,IAAI,EAAE,EAAE,cAAc,EAAE;SACzB,CAAC,CAAC;KACJ;SAAM,IAAI,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QACnD,MAAM,0BAAS,CAAC,GAAG,CAAC,aAAa,CAAC;YAChC,OAAO,EAAE,4CAA4C;YACrD,IAAI,EAAE,EAAE,cAAc,EAAE;SACzB,CAAC,CAAC;KACJ;IAED,sCAAsC;IACtC,OAAO,MAAM,YAAY,CAAC,cAAc,CAAC,CAAC;AAC5C,CAAC;AAlBD,gDAkBC","sourcesContent":["import { RequestedPermissions } from '@metamask/permission-controller';\nimport { InstallSnapsResult } from '@metamask/snaps-utils';\nimport { isObject } from '@metamask/utils';\nimport { ethErrors } from 'eth-rpc-errors';\n\nexport type { InstallSnapsResult } from '@metamask/snaps-utils';\n\nexport type InstallSnapsHook = (\n  requestedSnaps: RequestedPermissions,\n) => Promise<InstallSnapsResult>;\n\n/**\n * Typechecks the requested snaps and passes them to the permissions\n * controller for installation.\n *\n * @param requestedSnaps - An object containing the requested snaps to be installed. The key of the\n * object is the snap id and the value is potential extra data, i.e. version.\n * @param installSnaps - A function that tries to install a given snap, prompting the user if\n * necessary.\n * @returns An object containing the installed snaps.\n * @throws If the params are invalid or the snap installation fails.\n */\nexport async function handleInstallSnaps(\n  requestedSnaps: RequestedPermissions,\n  installSnaps: InstallSnapsHook,\n): Promise<InstallSnapsResult> {\n  if (!isObject(requestedSnaps)) {\n    throw ethErrors.rpc.invalidParams({\n      message: `Invalid snap installation params.`,\n      data: { requestedSnaps },\n    });\n  } else if (Object.keys(requestedSnaps).length === 0) {\n    throw ethErrors.rpc.invalidParams({\n      message: `Must specify at least one snap to install.`,\n      data: { requestedSnaps },\n    });\n  }\n\n  // installSnaps is bound to the origin\n  return await installSnaps(requestedSnaps);\n}\n"]}