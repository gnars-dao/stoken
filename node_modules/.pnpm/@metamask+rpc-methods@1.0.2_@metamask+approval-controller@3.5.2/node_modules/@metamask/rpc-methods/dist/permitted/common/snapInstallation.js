"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handleInstallSnaps = void 0;
const utils_1 = require("@metamask/utils");
const eth_rpc_errors_1 = require("eth-rpc-errors");
/**
 * Typechecks the requested snaps and passes them to the permissions
 * controller for installation.
 *
 * @param requestedSnaps - An object containing the requested snaps to be installed. The key of the
 * object is the snap id and the value is potential extra data, i.e. version.
 * @param installSnaps - A function that tries to install a given snap, prompting the user if
 * necessary.
 * @returns An object containing the installed snaps.
 * @throws If the params are invalid or the snap installation fails.
 */
async function handleInstallSnaps(requestedSnaps, installSnaps) {
    if (!(0, utils_1.isObject)(requestedSnaps)) {
        throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({
            message: `Invalid snap installation params.`,
            data: { requestedSnaps },
        });
    }
    else if (Object.keys(requestedSnaps).length === 0) {
        throw eth_rpc_errors_1.ethErrors.rpc.invalidParams({
            message: `Must specify at least one snap to install.`,
            data: { requestedSnaps },
        });
    }
    // installSnaps is bound to the origin
    return await installSnaps(requestedSnaps);
}
exports.handleInstallSnaps = handleInstallSnaps;
//# sourceMappingURL=snapInstallation.js.map