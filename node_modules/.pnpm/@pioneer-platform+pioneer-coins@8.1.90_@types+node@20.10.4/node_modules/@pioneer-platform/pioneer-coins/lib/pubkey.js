"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.classifyPubkey = void 0;
/*
    classifyPubkey
 */
var bitcoinRegex = require('bitcoin-regex');
var ethereumRegex = require('ethereum-regex');
var litecoinRegex = require('litecoin-regex');
var dogecoinRegex = require('dogecoin-regex');
var bitcoincashRegex = require('bitcoincash-regex');
var dashRegex = require('dash-regex');
var moneroRegex = require('monero-regex');
var rippleRegex = require('ripple-regex');
var neoRegex = require('neo-regex');
function classifyPubkey(address) {
    if (bitcoinRegex({ exact: true }).test(address))
        return 'BTC';
    else if (ethereumRegex({ exact: true }).test(address))
        return 'ETH';
    else if (litecoinRegex({ exact: true }).test(address))
        return 'LTC';
    else if (dogecoinRegex({ exact: true }).test(address))
        return 'DOGE';
    else if (dashRegex({ exact: true }).test(address))
        return 'DASH';
    else if (moneroRegex({ exact: true }).test(address))
        return 'XMR';
    else if (rippleRegex({ exact: true }).test(address))
        return 'XRP';
    else if (bitcoincashRegex.format('cashaddr', { exact: true }).test(address))
        return 'BCH';
    else if (neoRegex({ exact: true }).test(address))
        return 'NEO';
    //Hacky, hard coded
    switch (address[0]) {
        //Dash multi-sig p2sh
        case "S":
            return 'DASH';
            break;
        //Doge multi-sig p2sh
        case "A":
            return 'DOGE';
            break;
        //Doge multi-sig p2sh
        case "9":
            return 'DOGE';
            break;
    }
    return 'Cryptocurrency could not be detected';
}
exports.classifyPubkey = classifyPubkey;
