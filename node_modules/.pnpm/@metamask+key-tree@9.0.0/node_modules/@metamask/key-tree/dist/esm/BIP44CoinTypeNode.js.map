{"version":3,"sources":["../../src/BIP44CoinTypeNode.ts"],"sourcesContent":["import { assert } from '@metamask/utils';\n\nimport type { BIP44NodeInterface, JsonBIP44Node } from './BIP44Node';\nimport { BIP44Node } from './BIP44Node';\nimport type {\n  BIP39Node,\n  BIP44Depth,\n  BIP44PurposeNodeToken,\n  CoinTypeHDPathString,\n  HardenedBIP32Node,\n} from './constants';\nimport { BIP_32_HARDENED_OFFSET } from './constants';\nimport type { SupportedCurve } from './curves';\nimport { deriveChildNode } from './SLIP10Node';\nimport type { CoinTypeToAddressIndices } from './utils';\nimport {\n  getBIP32NodeToken,\n  getBIP44ChangePathString,\n  getBIP44CoinTypePathString,\n  getBIP44CoinTypeToAddressPathTuple,\n  getHardenedBIP32NodeToken,\n  getUnhardenedBIP32NodeToken,\n  hexStringToBytes,\n  nullableHexStringToBytes,\n} from './utils';\n\nexport type CoinTypeHDPathTuple = [\n  BIP39Node,\n  typeof BIP44PurposeNodeToken,\n  HardenedBIP32Node,\n];\n\nexport const BIP_44_COIN_TYPE_DEPTH = 2;\n\nexport type JsonBIP44CoinTypeNode = JsonBIP44Node & {\n  readonly coin_type: number;\n  readonly path: CoinTypeHDPathString;\n};\n\nexport type BIP44CoinTypeNodeInterface = BIP44NodeInterface & {\n  readonly coin_type: number;\n  readonly path: CoinTypeHDPathString;\n};\n\n/**\n * A wrapper object for BIP-44 `coin_type` keys. `coin_type` is the index\n * specifying the protocol for which deeper keys are intended. For the\n * authoritative list of coin types, please see\n * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n */\nexport class BIP44CoinTypeNode implements BIP44CoinTypeNodeInterface {\n  /**\n   * Constructs a BIP-44 `coin_type` node. `coin_type` is the index\n   * specifying the protocol for which deeper keys are intended. For the\n   * authoritative list of coin types, please see\n   * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param json - The {@link JsonBIP44Node} for the key of this node.\n   * @param coin_type - The coin_type index of this node. Must be a non-negative\n   * integer.\n   */\n  static async fromJSON(json: JsonBIP44Node, coin_type: number) {\n    validateCoinType(coin_type);\n    validateCoinTypeNodeDepth(json.depth);\n\n    const node = await BIP44Node.fromExtendedKey({\n      depth: json.depth,\n      index: json.index,\n      parentFingerprint: json.parentFingerprint,\n      chainCode: hexStringToBytes(json.chainCode),\n      privateKey: nullableHexStringToBytes(json.privateKey),\n      publicKey: hexStringToBytes(json.publicKey),\n    });\n\n    return new BIP44CoinTypeNode(node, coin_type);\n  }\n\n  /**\n   * Constructs a BIP-44 `coin_type` node. `coin_type` is the index\n   * specifying the protocol for which deeper keys are intended. For the\n   * authoritative list of coin types, please see\n   * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param derivationPath - The derivation path for the key of this node.\n   */\n  static async fromDerivationPath(derivationPath: CoinTypeHDPathTuple) {\n    validateCoinTypeNodeDepth(derivationPath.length - 1);\n\n    const node = await BIP44Node.fromDerivationPath({\n      derivationPath,\n    });\n\n    // Split the bip32 string token and extract the coin_type index.\n    const pathPart = derivationPath[BIP_44_COIN_TYPE_DEPTH].split(\n      ':',\n    )[1]?.replace(`'`, '');\n\n    assert(pathPart, 'Invalid derivation path.');\n    const coinType = Number.parseInt(pathPart, 10);\n\n    return new BIP44CoinTypeNode(node, coinType);\n  }\n\n  /**\n   * Constructs a BIP-44 `coin_type` node. `coin_type` is the index\n   * specifying the protocol for which deeper keys are intended. For the\n   * authoritative list of coin types, please see\n   * [SLIP-44](https://github.com/satoshilabs/slips/blob/master/slip-0044.md).\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param node - The {@link BIP44Node} for the key of this node.\n   * @param coin_type - The coin_type index of this node. Must be a non-negative\n   * integer.\n   */\n  static async fromNode(node: BIP44Node, coin_type: number) {\n    if (!(node instanceof BIP44Node)) {\n      throw new Error('Invalid node: Expected an instance of BIP44Node.');\n    }\n\n    validateCoinType(coin_type);\n    validateCoinTypeNodeDepth(node.depth);\n\n    // TODO: Make this function not async in a future version.\n    return Promise.resolve(new BIP44CoinTypeNode(node, coin_type));\n  }\n\n  readonly #node: BIP44Node;\n\n  public readonly path: CoinTypeHDPathString;\n\n  public readonly coin_type: number;\n\n  // Constructors cannot use hash names.\n  // eslint-disable-next-line no-restricted-syntax\n  private constructor(node: BIP44Node, coin_type: number) {\n    this.#node = node;\n    this.coin_type = coin_type;\n    this.path = getBIP44CoinTypePathString(coin_type);\n\n    Object.freeze(this);\n  }\n\n  public get depth(): BIP44Depth {\n    return this.#node.depth;\n  }\n\n  public get privateKeyBytes(): Uint8Array | undefined {\n    return this.#node.privateKeyBytes;\n  }\n\n  public get publicKeyBytes(): Uint8Array {\n    return this.#node.publicKeyBytes;\n  }\n\n  public get chainCodeBytes(): Uint8Array {\n    return this.#node.chainCodeBytes;\n  }\n\n  public get privateKey(): string | undefined {\n    return this.#node.privateKey;\n  }\n\n  public get publicKey(): string {\n    return this.#node.publicKey;\n  }\n\n  public get compressedPublicKey(): string {\n    return this.#node.compressedPublicKey;\n  }\n\n  public get compressedPublicKeyBytes(): Uint8Array {\n    return this.#node.compressedPublicKeyBytes;\n  }\n\n  public get chainCode(): string {\n    return this.#node.chainCode;\n  }\n\n  public get address(): string {\n    return this.#node.address;\n  }\n\n  public get masterFingerprint(): number | undefined {\n    return this.#node.masterFingerprint;\n  }\n\n  public get parentFingerprint(): number {\n    return this.#node.parentFingerprint;\n  }\n\n  public get fingerprint(): number {\n    return this.#node.fingerprint;\n  }\n\n  public get index(): number {\n    return this.#node.index;\n  }\n\n  public get curve(): SupportedCurve {\n    return this.#node.curve;\n  }\n\n  public get extendedKey(): string {\n    return this.#node.extendedKey;\n  }\n\n  /**\n   * Derives a BIP-44 `address_index` key corresponding to the path of this\n   * node and the specified `account`, `change`, and `address_index` values.\n   * `address_index` keys are normally the keys used to generate user account\n   * addresses.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param indices - The BIP-44 index values to use in key derivation.\n   * @param indices.account - The `account` index. Default: `0`\n   * @param indices.change - The `change` index. Default: `0`\n   * @param indices.address_index - The `address_index` index.\n   * @returns The derived BIP-44 `address_index` node.\n   */\n  async deriveBIP44AddressKey({\n    account = 0,\n    change = 0,\n    address_index,\n  }: CoinTypeToAddressIndices): Promise<BIP44Node> {\n    return await this.#node.derive(\n      getBIP44CoinTypeToAddressPathTuple({ account, change, address_index }),\n    );\n  }\n\n  toJSON(): JsonBIP44CoinTypeNode {\n    return {\n      ...this.#node.toJSON(),\n      coin_type: this.coin_type,\n      path: this.path,\n    };\n  }\n}\n\n/**\n * Validates the depth of a `coin_type` node. Simply, ensures that it is the\n * number `2`. An error is thrown if validation fails.\n *\n * @param depth - The depth to validate.\n */\nfunction validateCoinTypeNodeDepth(depth: number) {\n  if (depth !== BIP_44_COIN_TYPE_DEPTH) {\n    throw new Error(\n      `Invalid depth: Coin type nodes must be of depth ${BIP_44_COIN_TYPE_DEPTH}. Received: \"${depth}\"`,\n    );\n  }\n}\n\n/**\n * Validates that the coin type is a non-negative integer number. An error is\n * thrown if validation fails.\n *\n * @param coin_type - The coin type to validate.\n */\nfunction validateCoinType(coin_type: unknown): asserts coin_type is number {\n  if (\n    typeof coin_type !== 'number' ||\n    !Number.isInteger(coin_type) ||\n    coin_type < 0\n  ) {\n    throw new Error(\n      'Invalid coin type: The specified coin type must be a non-negative integer number.',\n    );\n  }\n}\n\n/**\n * Derives a BIP-44 address key corresponding to the specified derivation path,\n * given either by a {@link BIP44CoinTypeNode} or derivation path tuple.\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n * @param parentKeyOrNode - The `coin_type` parent key to derive from.\n * @param indices - The BIP-44 index values to use in key derivation.\n * @param indices.account - The `account` index. Default: `0`.\n * @param indices.change - The `change` index. Default: `0`.\n * @param indices.address_index - The `address_index` index.\n * @returns The derived `address_index` key for the specified derivation path.\n */\nexport async function deriveBIP44AddressKey(\n  parentKeyOrNode: BIP44CoinTypeNode | JsonBIP44CoinTypeNode | string,\n  { account = 0, change = 0, address_index }: CoinTypeToAddressIndices,\n): Promise<BIP44Node> {\n  const path = getBIP44CoinTypeToAddressPathTuple({\n    account,\n    change,\n    address_index,\n  });\n\n  const node = await getNode(parentKeyOrNode);\n  const childNode = await deriveChildNode({\n    path,\n    node,\n  });\n\n  return new BIP44Node(childNode);\n}\n\nexport type BIP44AddressKeyDeriver = {\n  /**\n   * @param address_index - The `address_index` value.\n   * @param isHardened - Whether the derived index is hardened.\n   * @returns The key corresponding to the path of this deriver and the\n   * specified `address_index` value.\n   */\n  (address_index: number, isHardened?: boolean): Promise<BIP44Node>;\n\n  /**\n   * A human-readable representation of the derivation path of this deriver\n   * function, excluding the `address_index`, which is parameterized.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   */\n  path: ReturnType<typeof getBIP44ChangePathString>;\n\n  /**\n   * The `coin_type` index of addresses derived by this deriver function.\n   */\n  coin_type: number;\n};\n\n/**\n * Creates a function that derives BIP-44 address keys corresponding to the\n * specified derivation path, given either by a {@link BIP44CoinTypeNode} or\n * derivation path tuple.\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n * @param node - The {@link BIP44CoinTypeNode} to derive address keys from.\n * This node contains a BIP-44 key of depth 2, `coin_type`.\n * @param accountAndChangeIndices - The `account` and `change` indices that\n * will be used to derive addresses.\n * @returns The deriver function for the derivation path specified by the\n * `coin_type` node, `account`, and `change` indices.\n */\nexport async function getBIP44AddressKeyDeriver(\n  node: BIP44CoinTypeNode | JsonBIP44CoinTypeNode | string,\n  accountAndChangeIndices?: Omit<CoinTypeToAddressIndices, 'address_index'>,\n) {\n  const { account = 0, change = 0 } = accountAndChangeIndices ?? {};\n\n  const actualNode = await getNode(node);\n\n  const accountNode = getHardenedBIP32NodeToken(account);\n  const changeNode = getBIP32NodeToken(change);\n\n  const bip44AddressKeyDeriver: BIP44AddressKeyDeriver = async (\n    address_index: number,\n    isHardened = false,\n  ): Promise<BIP44Node> => {\n    const slip10Node = await deriveChildNode({\n      path: [\n        accountNode,\n        changeNode,\n        isHardened\n          ? getHardenedBIP32NodeToken(address_index)\n          : getUnhardenedBIP32NodeToken(address_index),\n      ],\n      node: actualNode,\n    });\n\n    return new BIP44Node(slip10Node);\n  };\n\n  bip44AddressKeyDeriver.coin_type = actualNode.coin_type;\n  bip44AddressKeyDeriver.path = getBIP44ChangePathString(actualNode.path, {\n    account,\n    change,\n  });\n\n  Object.freeze(bip44AddressKeyDeriver);\n\n  return bip44AddressKeyDeriver;\n}\n\n/**\n * Get a BIP-44 coin type node from a JSON node or extended key string. If an existing coin type\n * node is provided, the same node is returned.\n *\n * The depth of the node is validated to be a valid coin type node.\n *\n * @param node - A BIP-44 coin type node, JSON node or extended key.\n */\nasync function getNode(\n  node: BIP44CoinTypeNode | JsonBIP44CoinTypeNode | string,\n): Promise<BIP44CoinTypeNode> {\n  if (node instanceof BIP44CoinTypeNode) {\n    validateCoinTypeNodeDepth(node.depth);\n\n    return node;\n  }\n\n  if (typeof node === 'string') {\n    const bip44Node = await BIP44Node.fromExtendedKey(node);\n    const coinTypeNode = await BIP44CoinTypeNode.fromNode(\n      bip44Node,\n      bip44Node.index - BIP_32_HARDENED_OFFSET,\n    );\n\n    validateCoinTypeNodeDepth(coinTypeNode.depth);\n\n    return coinTypeNode;\n  }\n\n  return BIP44CoinTypeNode.fromJSON(node, node.coin_type);\n}\n"],"names":["assert","BIP44Node","BIP_32_HARDENED_OFFSET","deriveChildNode","getBIP32NodeToken","getBIP44ChangePathString","getBIP44CoinTypePathString","getBIP44CoinTypeToAddressPathTuple","getHardenedBIP32NodeToken","getUnhardenedBIP32NodeToken","hexStringToBytes","nullableHexStringToBytes","BIP_44_COIN_TYPE_DEPTH","BIP44CoinTypeNode","fromJSON","json","coin_type","validateCoinType","validateCoinTypeNodeDepth","depth","node","fromExtendedKey","index","parentFingerprint","chainCode","privateKey","publicKey","fromDerivationPath","derivationPath","length","pathPart","split","replace","coinType","Number","parseInt","fromNode","Error","Promise","resolve","privateKeyBytes","publicKeyBytes","chainCodeBytes","compressedPublicKey","compressedPublicKeyBytes","address","masterFingerprint","fingerprint","curve","extendedKey","deriveBIP44AddressKey","account","change","address_index","derive","toJSON","path","Object","freeze","isInteger","parentKeyOrNode","getNode","childNode","getBIP44AddressKeyDeriver","accountAndChangeIndices","actualNode","accountNode","changeNode","bip44AddressKeyDeriver","isHardened","slip10Node","bip44Node","coinTypeNode"],"mappings":"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"}