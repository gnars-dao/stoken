{"version":3,"sources":["../../src/utils.ts"],"sourcesContent":["import { wordlist as englishWordlist } from '@metamask/scure-bip39/dist/wordlists/english';\nimport { assert, createDataView, hexToBytes } from '@metamask/utils';\nimport { ripemd160 } from '@noble/hashes/ripemd160';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { base58check as scureBase58check } from '@scure/base';\n\nimport type {\n  BIP32Node,\n  ChangeHDPathString,\n  CoinTypeHDPathString,\n  CoinTypeToAddressTuple,\n  HardenedBIP32Node,\n  UnhardenedBIP32Node,\n  UnprefixedNode,\n} from './constants';\nimport {\n  BIP44PurposeNodeToken,\n  MAX_BIP_32_INDEX,\n  MAX_UNHARDENED_BIP_32_INDEX,\n  UNPREFIXED_BIP_32_PATH_REGEX,\n} from './constants';\nimport type { SupportedCurve } from './curves';\nimport { curves } from './curves';\n\n/**\n * Gets a string representation of a BIP-44 path of depth 2, i.e.:\n * `m / 44' / coin_type'`\n *\n * For display purposes only.\n *\n * @param coin_type - The `coin_type` index to create a path visualization for.\n * @returns The visualization of the BIP-44 path for thte specified `coin_type`.\n */\nexport function getBIP44CoinTypePathString(\n  coin_type: number,\n): CoinTypeHDPathString {\n  return `m / ${BIP44PurposeNodeToken} / ${getHardenedBIP32NodeToken(\n    coin_type,\n  )}`;\n}\n\ntype BIP44PathIndex = number | { index: number; hardened: boolean };\n\ntype BIP44PathIndices = {\n  coin_type: number;\n  account?: number;\n  change?: BIP44PathIndex;\n  address_index: BIP44PathIndex;\n};\n\nexport type CoinTypeToAddressIndices = Pick<\n  BIP44PathIndices,\n  'account' | 'change' | 'address_index'\n>;\n\n/**\n * Gets a string representation of a BIP-44 path of depth 4, i.e.:\n * `m / 44' / coin_type' / account' / change`\n *\n * For display purposes only.\n *\n * @param coinTypePath - The parent `coin_type` path.\n * @param indices - The `account` and `change` index to create a path visualization for.\n * @returns The visualization of the BIP-44 path for the specified `coin_type`\n * and `change` indices.\n */\nexport function getBIP44ChangePathString(\n  coinTypePath: CoinTypeHDPathString,\n  indices: Omit<CoinTypeToAddressIndices, 'address_index'>,\n): ChangeHDPathString {\n  return `${coinTypePath} / ${getHardenedBIP32NodeToken(\n    indices.account ?? 0,\n  )} / ${getBIP32NodeToken(indices.change ?? 0)}`;\n}\n\n/**\n * Gets a BIP-44 path tuple of the form `account' / change / address_index`,\n * which can be used to derive address keys together with a `coin_type` key.\n *\n * @param indices - The BIP-44 derivation index values.\n * @param indices.account - The `account` index value.\n * @param indices.change - The `change` index value.\n * @param indices.address_index - The `address_index` index value.\n * @returns The `account' / change / address_index` path corresponding to the\n * specified indices.\n */\nexport function getBIP44CoinTypeToAddressPathTuple({\n  account = 0,\n  change = 0,\n  address_index,\n}: CoinTypeToAddressIndices): CoinTypeToAddressTuple {\n  return [\n    getHardenedBIP32NodeToken(account),\n    getBIP32NodeToken(change),\n    getBIP32NodeToken(address_index),\n  ] as const;\n}\n\n/**\n * A hardened BIP-32 node token, e.g. `bip32:0'`.\n * Validates that the index is a non-negative integer number, and throws an\n * error if validation fails.\n *\n * @param index - The index of the node.\n * @returns The hardened BIP-32 node token.\n */\nexport function getHardenedBIP32NodeToken(index: number): HardenedBIP32Node {\n  validateBIP32Index(index);\n  return `${getUnhardenedBIP32NodeToken(index)}'`;\n}\n\n/**\n * An unhardened BIP-32 node token, e.g. `bip32:0`.\n * Validates that the index is a non-negative integer number, and throws an\n * error if validation fails.\n *\n * @param index - The index of the node.\n * @returns The unhardened BIP-32 node token.\n */\nexport function getUnhardenedBIP32NodeToken(\n  index: number,\n): UnhardenedBIP32Node {\n  validateBIP32Index(index);\n  return `bip32:${index}`;\n}\n\n/**\n * A hardened or unhardened BIP-32 node token, e.g. `bip32:0` or `bip32:0'`.\n * Validates that the index is a non-negative integer number, and throws an\n * error if validation fails.\n *\n * @param index - The index of the node.\n * @returns The hardened or unhardened BIP-32 node token.\n */\nexport function getBIP32NodeToken(index: BIP44PathIndex): BIP32Node {\n  if (typeof index === 'number') {\n    return getUnhardenedBIP32NodeToken(index);\n  }\n\n  if (\n    !index ||\n    !Number.isInteger(index.index) ||\n    typeof index.hardened !== 'boolean'\n  ) {\n    throw new Error(\n      'Invalid BIP-32 index: Must be an object containing the index and whether it is hardened.',\n    );\n  }\n\n  if (index.hardened) {\n    return getHardenedBIP32NodeToken(index.index);\n  }\n\n  return getUnhardenedBIP32NodeToken(index.index);\n}\n\n/**\n * Validates that the index is a non-negative integer number. Throws an\n * error if validation fails.\n *\n * @param addressIndex - The index to validate.\n */\nexport function validateBIP32Index(addressIndex: number) {\n  if (!isValidBIP32Index(addressIndex)) {\n    throw new Error(`Invalid BIP-32 index: Must be a non-negative integer.`);\n  }\n}\n\n/**\n * Check if the index is a valid BIP-32 index.\n *\n * @param index - The BIP-32 index to test.\n * @returns Whether the index is a non-negative integer number.\n */\nexport function isValidBIP32Index(index: number): boolean {\n  return isValidInteger(index) && index <= MAX_BIP_32_INDEX;\n}\n\n/**\n * Check if the value is a valid BIP-32 path segment, i.e., a string of the form\n * `0'`.\n *\n * @param segment - The BIP-32 path segment to test.\n * @returns Whether the path segment is a valid BIP-32 path segment.\n */\nexport function isValidBIP32PathSegment(\n  segment: string,\n): segment is UnprefixedNode {\n  if (typeof segment !== 'string') {\n    return false;\n  }\n\n  const match = segment.match(UNPREFIXED_BIP_32_PATH_REGEX);\n  if (typeof match?.groups?.index === 'undefined') {\n    return false;\n  }\n\n  const index = parseInt(match.groups.index, 10);\n  return isValidInteger(index) && index <= MAX_UNHARDENED_BIP_32_INDEX;\n}\n\n/**\n * Check if the value is a hardened BIP-32 index. This only checks if the value\n * ends with a `'` character, and does not validate that the index is a valid\n * BIP-32 index.\n *\n * @param bip32Token - The token to test.\n * @returns Whether the token is hardened, i.e. ends with `'`.\n */\nexport function isHardened(bip32Token: string): boolean {\n  return bip32Token.endsWith(`'`);\n}\n\n/**\n * Get a `Uint8Array` from a hexadecimal string or a `Uint8Array`. If the input\n * is a hexadecimal string, it is converted to a `Uint8Array`. If the input is\n * a `Uint8Array`, it is returned as-is.\n *\n * @param hexString - The hexadecimal string to convert.\n * @returns The `Uint8Array` corresponding to the hexadecimal string.\n */\nexport function hexStringToBytes(hexString: string | Uint8Array): Uint8Array {\n  if (hexString instanceof Uint8Array) {\n    return hexString;\n  }\n\n  return hexToBytes(hexString);\n}\n\n/**\n * The same as {@link hexStringToBytes}, but returns `undefined` if the input\n * is `undefined`.\n *\n * @param hexString - The hexadecimal string to convert.\n * @returns The `Uint8Array` corresponding to the hexadecimal string.\n */\nexport function nullableHexStringToBytes(\n  hexString?: string | Uint8Array,\n): Uint8Array | undefined {\n  if (hexString !== undefined) {\n    return hexStringToBytes(hexString);\n  }\n\n  return undefined;\n}\n\n/**\n * Tests whether the specified `Uint8Array` is a valid BIP-32 key.\n * A valid bytes key is 64 bytes long and has at least one non-zero byte.\n *\n * @param bytes - The `Uint8Array` to test.\n * @param expectedLength - The expected length of the Uint8Array.\n * @returns Whether the Uint8Array represents a valid BIP-32 key.\n */\nexport function isValidBytesKey(\n  bytes: Uint8Array,\n  expectedLength: number,\n): boolean {\n  if (bytes.length !== expectedLength) {\n    return false;\n  }\n\n  for (const byte of bytes) {\n    if (byte !== 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n/**\n * Tests whether the specified number is a valid integer equal to or greater than 0.\n *\n * @param value - The number to test.\n * @returns Whether the number is a valid integer.\n */\nexport function isValidInteger(value: unknown): value is number {\n  return typeof value === 'number' && Number.isInteger(value) && value >= 0;\n}\n\n/**\n * Get a `Uint8Array` from a hexadecimal string or `Uint8Array`. Validates that the\n * length of the `Uint8Array` matches the specified length, and that the `Uint8Array`\n * is not empty.\n *\n * @param value - The value to convert to a `Uint8Array`.\n * @param length - The length to validate the `Uint8Array` against.\n * @returns The `Uint8Array` corresponding to the hexadecimal string.\n */\nexport function getBytes(value: unknown, length: number): Uint8Array {\n  if (value instanceof Uint8Array) {\n    validateBytes(value, length);\n\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    const bytes = hexToBytes(value);\n    validateBytes(bytes, length);\n\n    return bytes;\n  }\n\n  throw new Error(\n    `Invalid value: Expected an instance of Uint8Array or hexadecimal string.`,\n  );\n}\n\n/**\n * Get a `Uint8Array` from a hexadecimal string or `Uint8Array`. Validates that\n * the length of the `Uint8Array` matches the specified length.\n *\n * This function is \"unsafe,\" in the sense that it does not validate that the\n * `Uint8Array` is not empty (i.e., all bytes are zero).\n *\n * @param value - The value to convert to a `Uint8Array`.\n * @param length - The length to validate the `Uint8Array` against.\n * @returns The `Uint8Array` corresponding to the hexadecimal string.\n */\nexport function getBytesUnsafe(value: unknown, length: number): Uint8Array {\n  if (value instanceof Uint8Array) {\n    assert(\n      value.length === length,\n      `Invalid value: Must be a ${length}-byte byte array.`,\n    );\n    return value;\n  }\n\n  if (typeof value === 'string') {\n    return getBytesUnsafe(hexToBytes(value), length);\n  }\n\n  throw new Error(\n    `Invalid value: Expected an instance of Uint8Array or hexadecimal string.`,\n  );\n}\n\n/**\n * Validate that the specified `Uint8Array` is not empty and has the specified\n * length.\n *\n * @param bytes - The `Uint8Array` to validate.\n * @param length - The length to validate the `Uint8Array` against.\n * @throws An error if the `Uint8Array` is empty or has the wrong length.\n */\nfunction validateBytes(\n  bytes: Uint8Array,\n  length: number,\n): asserts bytes is Uint8Array {\n  if (!isValidBytesKey(bytes, length)) {\n    throw new Error(\n      `Invalid value: Must be a non-zero ${length}-byte byte array.`,\n    );\n  }\n}\n\nexport const decodeBase58check = (value: string): Uint8Array => {\n  const base58Check = scureBase58check(sha256);\n\n  try {\n    return base58Check.decode(value);\n  } catch {\n    throw new Error(\n      `Invalid extended key: Value is not base58-encoded, or the checksum is invalid.`,\n    );\n  }\n};\n\nexport const encodeBase58check = (value: Uint8Array): string => {\n  const base58Check = scureBase58check(sha256);\n\n  return base58Check.encode(value);\n};\n\n/**\n * Get the fingerprint of a compressed public key as number.\n *\n * @param publicKey - The compressed public key to get the fingerprint for.\n * @returns The fingerprint of the public key.\n */\nexport const getFingerprint = (publicKey: Uint8Array): number => {\n  if (!isValidBytesKey(publicKey, 33)) {\n    throw new Error(\n      `Invalid public key: The key must be a 33-byte, non-zero byte array.`,\n    );\n  }\n\n  const bytes = ripemd160(sha256(publicKey));\n  const view = createDataView(bytes);\n\n  return view.getUint32(0, false);\n};\n\n/**\n * Get a secret recovery phrase (or mnemonic phrase) in string form as a\n * `Uint8Array`. The secret recovery phrase is split into words, and each word\n * is converted to a number using the BIP-39 word list. The numbers are then\n * converted to bytes, and the bytes are concatenated into a single\n * `Uint8Array`.\n *\n * @param mnemonicPhrase - The secret recovery phrase to convert.\n * @returns The `Uint8Array` corresponding to the secret recovery phrase.\n */\nexport function mnemonicPhraseToBytes(mnemonicPhrase: string): Uint8Array {\n  const words = mnemonicPhrase.split(' ');\n  const indices = words.map((word) => {\n    const index = englishWordlist.indexOf(word);\n    assert(index !== -1, `Invalid mnemonic phrase: Unknown word \"${word}\".`);\n\n    return index;\n  });\n\n  return new Uint8Array(new Uint16Array(indices).buffer);\n}\n\n/**\n * Validates the curve name.\n *\n * @param curveName - The name of the curve to validate.\n */\nexport function validateCurve(\n  curveName: unknown,\n): asserts curveName is SupportedCurve {\n  if (!curveName || typeof curveName !== 'string') {\n    throw new Error('Invalid curve: Must specify a curve.');\n  }\n\n  if (!Object.keys(curves).includes(curveName)) {\n    throw new Error(\n      `Invalid curve: Only the following curves are supported: ${Object.keys(\n        curves,\n      ).join(', ')}.`,\n    );\n  }\n}\n\n/**\n * Get a 4-byte-long `Uint8Array` from a numeric value.\n *\n * @param value - The value to convert to a `Uint8Array`.\n * @returns The `Uint8Array` corresponding to the `bigint` value.\n */\nexport function numberToUint32(value: number) {\n  const bytes = new Uint8Array(4);\n  const view = createDataView(bytes);\n\n  view.setUint32(0, value, false);\n\n  return bytes;\n}\n"],"names":["wordlist","englishWordlist","assert","createDataView","hexToBytes","ripemd160","sha256","base58check","scureBase58check","BIP44PurposeNodeToken","MAX_BIP_32_INDEX","MAX_UNHARDENED_BIP_32_INDEX","UNPREFIXED_BIP_32_PATH_REGEX","curves","getBIP44CoinTypePathString","coin_type","getHardenedBIP32NodeToken","getBIP44ChangePathString","coinTypePath","indices","account","getBIP32NodeToken","change","getBIP44CoinTypeToAddressPathTuple","address_index","index","validateBIP32Index","getUnhardenedBIP32NodeToken","Number","isInteger","hardened","Error","addressIndex","isValidBIP32Index","isValidInteger","isValidBIP32PathSegment","segment","match","groups","parseInt","isHardened","bip32Token","endsWith","hexStringToBytes","hexString","Uint8Array","nullableHexStringToBytes","undefined","isValidBytesKey","bytes","expectedLength","length","byte","value","getBytes","validateBytes","getBytesUnsafe","decodeBase58check","base58Check","decode","encodeBase58check","encode","getFingerprint","publicKey","view","getUint32","mnemonicPhraseToBytes","mnemonicPhrase","words","split","map","word","indexOf","Uint16Array","buffer","validateCurve","curveName","Object","keys","includes","join","numberToUint32","setUint32"],"mappings":"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"}