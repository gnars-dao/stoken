{"version":3,"sources":["../../../src/derivers/slip10.ts"],"sourcesContent":["import { concatBytes } from '@metamask/utils';\n\nimport type { DeriveChildKeyArgs } from '.';\nimport { BIP_32_HARDENED_OFFSET } from '../constants';\nimport type { SLIP10Node } from '../SLIP10Node';\nimport { numberToUint32 } from '../utils';\nimport {\n  generateEntropy,\n  deriveChildKey as sharedDeriveChildKey,\n} from './shared';\nimport type { DeriveNodeArgs } from './shared';\n\n/**\n * Derive a SLIP-10 child key with a given path from a parent key.\n *\n * @param options - The options for deriving a child key.\n * @returns A tuple containing the derived private key, public key and chain\n * code.\n */\nexport async function deriveChildKey(\n  options: DeriveChildKeyArgs,\n): Promise<SLIP10Node> {\n  return await sharedDeriveChildKey(options, handleError);\n}\n\n/**\n * Handle an error that occurs during SLIP-10 derivation.\n *\n * @param error - The error that occurred.\n * @param options - The options that were used for derivation.\n * @returns The new options to use for derivation.\n */\nasync function handleError(\n  error: unknown,\n  options: DeriveNodeArgs,\n): Promise<DeriveNodeArgs> {\n  const { curve, isHardened, childIndex, entropy, chainCode } = options;\n\n  // `ed25519` keys are always valid, so this error should never be thrown. If\n  // it is, we re-throw it.\n  if (curve.name === 'ed25519') {\n    throw error;\n  }\n\n  const actualChildIndex = isHardened\n    ? childIndex + BIP_32_HARDENED_OFFSET\n    : childIndex;\n\n  // As per SLIP-10, if the resulting key is invalid, the new entropy is\n  // generated as follows:\n  // Key material (32 bytes), child chain code (32 bytes) =\n  //   HMAC-SHA512(parent chain code, 0x01 || chain code from invalid key || index).\n  const newEntropy = generateEntropy({\n    chainCode,\n    extension: concatBytes([\n      0x01,\n      entropy.slice(32, 64),\n      numberToUint32(actualChildIndex),\n    ]),\n  });\n\n  return {\n    ...options,\n    entropy: newEntropy,\n  };\n}\n"],"names":["concatBytes","BIP_32_HARDENED_OFFSET","numberToUint32","generateEntropy","deriveChildKey","sharedDeriveChildKey","options","handleError","error","curve","isHardened","childIndex","entropy","chainCode","name","actualChildIndex","newEntropy","extension","slice"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;AAG9C,SAASC,sBAAsB,QAAQ,eAAe;AAEtD,SAASC,cAAc,QAAQ,WAAW;AAC1C,SACEC,eAAe,EACfC,kBAAkBC,oBAAoB,QACjC,WAAW;AAGlB;;;;;;CAMC,GACD,OAAO,eAAeD,eACpBE,OAA2B;IAE3B,OAAO,MAAMD,qBAAqBC,SAASC;AAC7C;AAEA;;;;;;CAMC,GACD,eAAeA,YACbC,KAAc,EACdF,OAAuB;IAEvB,MAAM,EAAEG,KAAK,EAAEC,UAAU,EAAEC,UAAU,EAAEC,OAAO,EAAEC,SAAS,EAAE,GAAGP;IAE9D,4EAA4E;IAC5E,yBAAyB;IACzB,IAAIG,MAAMK,IAAI,KAAK,WAAW;QAC5B,MAAMN;IACR;IAEA,MAAMO,mBAAmBL,aACrBC,aAAaV,yBACbU;IAEJ,sEAAsE;IACtE,wBAAwB;IACxB,yDAAyD;IACzD,kFAAkF;IAClF,MAAMK,aAAab,gBAAgB;QACjCU;QACAI,WAAWjB,YAAY;YACrB;YACAY,QAAQM,KAAK,CAAC,IAAI;YAClBhB,eAAea;SAChB;IACH;IAEA,OAAO;QACL,GAAGT,OAAO;QACVM,SAASI;IACX;AACF"}