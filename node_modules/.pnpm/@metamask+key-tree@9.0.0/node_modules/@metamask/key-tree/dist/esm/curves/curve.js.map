{"version":3,"sources":["../../../src/curves/curve.ts"],"sourcesContent":["import { utils } from '@noble/secp256k1';\n\nimport * as ed25519 from './ed25519';\nimport * as secp256k1 from './secp256k1';\n\nexport type SupportedCurve = keyof typeof curves;\n\nexport const curves = {\n  secp256k1,\n  ed25519,\n};\n\nexport type Curve = {\n  name: SupportedCurve;\n  secret: Uint8Array;\n  deriveUnhardenedKeys: boolean;\n  publicKeyLength: number;\n  curve: {\n    n: bigint;\n  };\n  getPublicKey: (\n    privateKey: Uint8Array,\n    compressed?: boolean,\n  ) => Uint8Array | Promise<Uint8Array>;\n  isValidPrivateKey: (privateKey: Uint8Array) => boolean;\n  publicAdd: (publicKey: Uint8Array, tweak: Uint8Array) => Uint8Array;\n  compressPublicKey: (publicKey: Uint8Array) => Uint8Array;\n  decompressPublicKey: (publicKey: Uint8Array) => Uint8Array;\n};\n\n/**\n * Get a curve by name.\n *\n * @param curveName - The name of the curve to get.\n * @returns The curve.\n */\nexport function getCurveByName(curveName: SupportedCurve): Curve {\n  return curves[curveName];\n}\n\n// As long as both parameters are specified, this function is the same for all curves.\nexport const { mod } = utils;\n"],"names":["utils","ed25519","secp256k1","curves","getCurveByName","curveName","mod"],"mappings":"AAAA,SAASA,KAAK,QAAQ,mBAAmB;AAEzC,YAAYC,aAAa,YAAY;AACrC,YAAYC,eAAe,cAAc;AAIzC,OAAO,MAAMC,SAAS;IACpBD;IACAD;AACF,EAAE;AAoBF;;;;;CAKC,GACD,OAAO,SAASG,eAAeC,SAAyB;IACtD,OAAOF,MAAM,CAACE,UAAU;AAC1B;AAEA,sFAAsF;AACtF,OAAO,MAAM,EAAEC,GAAG,EAAE,GAAGN,MAAM"}