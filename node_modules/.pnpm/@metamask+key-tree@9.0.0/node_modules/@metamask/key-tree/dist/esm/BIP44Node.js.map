{"version":3,"sources":["../../src/BIP44Node.ts"],"sourcesContent":["import { assert } from '@metamask/utils';\n\nimport type {\n  BIP44Depth,\n  PartialHDPathTuple,\n  RootedSLIP10PathTuple,\n  SLIP10Path,\n} from './constants';\nimport {\n  BIP44PurposeNodeToken,\n  BIP_32_PATH_REGEX,\n  BIP_39_PATH_REGEX,\n  MAX_BIP_44_DEPTH,\n  MIN_BIP_44_DEPTH,\n} from './constants';\nimport type { SupportedCurve } from './curves';\nimport {\n  decodeExtendedKey,\n  encodeExtendedKey,\n  PRIVATE_KEY_VERSION,\n  PUBLIC_KEY_VERSION,\n} from './extended-keys';\nimport { SLIP10Node, validateBIP32Depth } from './SLIP10Node';\nimport { isHardened } from './utils';\n\nexport type BIP44ExtendedKeyOptions = {\n  readonly depth: number;\n  readonly parentFingerprint: number;\n  readonly index: number;\n  readonly chainCode: Uint8Array | string;\n  readonly privateKey?: Uint8Array | string | undefined;\n  readonly publicKey?: Uint8Array | string | undefined;\n};\n\nexport type BIP44DerivationPathOptions = {\n  readonly derivationPath: RootedSLIP10PathTuple;\n};\n\n/**\n * A wrapper for BIP-44 Hierarchical Deterministic (HD) tree nodes, i.e.\n * cryptographic keys used to generate keypairs and addresses for cryptocurrency\n * protocols.\n */\nexport type JsonBIP44Node = {\n  /**\n   * The 0-indexed BIP-44 path depth of this node.\n   *\n   * A BIP-44 path is of the form:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   */\n  readonly depth: BIP44Depth;\n\n  /**\n   * The fingerprint of the master node, i.e., the node at depth 0. May be\n   * undefined if this node was created from an extended key.\n   */\n  readonly masterFingerprint?: number | undefined;\n\n  /**\n   * The fingerprint of the parent key, or 0 if this is a master node.\n   */\n  readonly parentFingerprint: number;\n\n  /**\n   * The index of the node, or 0 if this is a master node.\n   */\n  readonly index: number;\n\n  /**\n   * The hexadecimal string representation of the private key for this node.\n   * May be `undefined` if the node is a public node.\n   */\n  readonly privateKey?: string | undefined;\n\n  /**\n   * The hexadecimal string representation of the public key for this node.\n   */\n  readonly publicKey: string;\n\n  /**\n   * The hexadecimal string representation of the chain code for this node.\n   */\n  readonly chainCode: string;\n};\n\nexport type BIP44NodeInterface = JsonBIP44Node & {\n  /**\n   * @returns A JSON-compatible representation of this node's data fields.\n   */\n  toJSON(): JsonBIP44Node;\n};\n\n/**\n * A wrapper for BIP-44 Hierarchical Deterministic (HD) tree nodes, i.e.\n * cryptographic keys used to generate keypairs and addresses for cryptocurrency\n * protocols.\n *\n * This class contains methods and fields that may not serialize well. Use\n * {@link BIP44Node.toJSON} to get a JSON-compatible representation.\n */\nexport class BIP44Node implements BIP44NodeInterface {\n  /**\n   * Wrapper of the {@link fromExtendedKey} function. Refer to that function\n   * for documentation.\n   *\n   * @param json - The JSON representation of a SLIP-10 node.\n   */\n  static async fromJSON(json: JsonBIP44Node): Promise<BIP44Node> {\n    return BIP44Node.fromExtendedKey(json);\n  }\n\n  /**\n   * Create a new BIP-44 node from a key and chain code. You must specify\n   * either a private key or a public key. When specifying a private key,\n   * the public key will be derived from the private key.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * @param options - An object containing the extended key, or an extended\n   * public (xpub) or private (xprv) key.\n   * @param options.depth - The depth of the node.\n   * @param options.privateKey - The private key for the node.\n   * @param options.publicKey - The public key for the node. If a private key is\n   * specified, this parameter is ignored.\n   * @param options.chainCode - The chain code for the node.\n   */\n  static async fromExtendedKey(\n    options: BIP44ExtendedKeyOptions | string,\n  ): Promise<BIP44Node> {\n    if (typeof options === 'string') {\n      const extendedKey = decodeExtendedKey(options);\n\n      const { chainCode, depth, parentFingerprint, index } = extendedKey;\n\n      if (extendedKey.version === PRIVATE_KEY_VERSION) {\n        const { privateKey } = extendedKey;\n\n        return BIP44Node.fromExtendedKey({\n          depth,\n          parentFingerprint,\n          index,\n          privateKey,\n          chainCode,\n        });\n      }\n\n      const { publicKey } = extendedKey;\n\n      return BIP44Node.fromExtendedKey({\n        depth,\n        parentFingerprint,\n        index,\n        publicKey,\n        chainCode,\n      });\n    }\n\n    const {\n      privateKey,\n      publicKey,\n      chainCode,\n      depth,\n      parentFingerprint,\n      index,\n    } = options;\n\n    validateBIP44Depth(depth);\n\n    const node = await SLIP10Node.fromExtendedKey({\n      privateKey,\n      publicKey,\n      chainCode,\n      depth,\n      parentFingerprint,\n      index,\n      curve: 'secp256k1',\n    });\n\n    return new BIP44Node(node);\n  }\n\n  /**\n   * Create a new BIP-44 node from a derivation path. The derivation path\n   * must be rooted, i.e. it must begin with a BIP-39 node, given as a string of\n   * the form `bip39:MNEMONIC`, where `MNEMONIC` is a space-separated list of\n   * BIP-39 seed phrase words.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param options - An object containing the derivation path.\n   * @param options.derivationPath - The rooted HD tree path that will be used\n   * to derive the key of this node.\n   */\n  static async fromDerivationPath({\n    derivationPath,\n  }: BIP44DerivationPathOptions): Promise<BIP44Node> {\n    validateBIP44Depth(derivationPath.length - 1);\n    validateBIP44DerivationPath(derivationPath, MIN_BIP_44_DEPTH);\n\n    const node = await SLIP10Node.fromDerivationPath({\n      derivationPath,\n      curve: 'secp256k1',\n    });\n\n    return new BIP44Node(node);\n  }\n\n  #node: SLIP10Node;\n\n  public get depth(): BIP44Depth {\n    return this.#node.depth as BIP44Depth;\n  }\n\n  public get privateKeyBytes(): Uint8Array | undefined {\n    return this.#node.privateKeyBytes;\n  }\n\n  public get publicKeyBytes(): Uint8Array {\n    return this.#node.publicKeyBytes;\n  }\n\n  public get chainCodeBytes(): Uint8Array {\n    return this.#node.chainCodeBytes;\n  }\n\n  public get privateKey(): string | undefined {\n    return this.#node.privateKey;\n  }\n\n  public get publicKey(): string {\n    return this.#node.publicKey;\n  }\n\n  public get compressedPublicKey(): string {\n    return this.#node.compressedPublicKey;\n  }\n\n  public get compressedPublicKeyBytes(): Uint8Array {\n    return this.#node.compressedPublicKeyBytes;\n  }\n\n  public get chainCode(): string {\n    return this.#node.chainCode;\n  }\n\n  public get address(): string {\n    return this.#node.address;\n  }\n\n  public get masterFingerprint(): number | undefined {\n    return this.#node.masterFingerprint;\n  }\n\n  public get parentFingerprint(): number {\n    return this.#node.parentFingerprint;\n  }\n\n  public get fingerprint(): number {\n    return this.#node.fingerprint;\n  }\n\n  public get index(): number {\n    return this.#node.index;\n  }\n\n  public get extendedKey(): string {\n    const data = {\n      depth: this.depth,\n      parentFingerprint: this.parentFingerprint,\n      index: this.index,\n      chainCode: this.chainCodeBytes,\n    };\n\n    if (this.privateKeyBytes) {\n      return encodeExtendedKey({\n        ...data,\n        version: PRIVATE_KEY_VERSION,\n        privateKey: this.privateKeyBytes,\n      });\n    }\n\n    return encodeExtendedKey({\n      ...data,\n      version: PUBLIC_KEY_VERSION,\n      publicKey: this.publicKeyBytes,\n    });\n  }\n\n  public get curve(): SupportedCurve {\n    return this.#node.curve;\n  }\n\n  constructor(node: SLIP10Node) {\n    this.#node = node;\n\n    Object.freeze(this);\n  }\n\n  /**\n   * Get a neutered version of this node, i.e. a node without a private key.\n   *\n   * @returns A neutered version of this node.\n   */\n  public neuter(): BIP44Node {\n    const node = this.#node.neuter();\n    return new BIP44Node(node);\n  }\n\n  /**\n   * Derives a child of the key contains be this node and returns a new\n   * {@link BIP44Node} containing the child key.\n   *\n   * The specified path must be a valid HD path from this node, per BIP-44.\n   * At present, this means that the path must consist of no more than 5 BIP-32\n   * nodes, depending on the depth of this node.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param path - The partial (non-rooted) BIP-44 HD tree path will be used\n   * to derive a child key from the parent key contained within this node.\n   * @returns The {@link BIP44Node} corresponding to the derived child key.\n   */\n  public async derive(path: PartialHDPathTuple): Promise<BIP44Node> {\n    if (this.depth === MAX_BIP_44_DEPTH) {\n      throw new Error(\n        'Illegal operation: This HD tree node is already a leaf node.',\n      );\n    }\n\n    const newDepth = this.depth + path.length;\n\n    validateBIP44Depth(newDepth);\n    validateBIP44DerivationPath(path, (this.depth + 1) as BIP44Depth);\n\n    const node = await this.#node.derive(path);\n    return new BIP44Node(node);\n  }\n\n  // This is documented in the interface of this class.\n  public toJSON(): JsonBIP44Node {\n    return {\n      depth: this.depth,\n      masterFingerprint: this.masterFingerprint,\n      parentFingerprint: this.parentFingerprint,\n      index: this.index,\n      privateKey: this.privateKey,\n      publicKey: this.publicKey,\n      chainCode: this.chainCode,\n    };\n  }\n}\n\n/**\n * Validates a BIP-44 path depth. Effectively, asserts that the depth is an\n * integer `number` N such that 0 <= N <= 5. Throws an error if validation\n * fails.\n *\n * @param depth - The depth to validate.\n */\nexport function validateBIP44Depth(\n  depth: unknown,\n): asserts depth is BIP44Depth {\n  validateBIP32Depth(depth);\n\n  if (depth < MIN_BIP_44_DEPTH || depth > MAX_BIP_44_DEPTH) {\n    throw new Error(\n      `Invalid HD tree path depth: The depth must be a positive integer N such that 0 <= N <= 5. Received: \"${depth}\"`,\n    );\n  }\n}\n\n/**\n * Ensures that the given derivation is valid by BIP-44.\n *\n * Recall that a BIP-44 HD tree path consists of the following nodes:\n *\n * `m / 44' / coin_type' / account' / change / address_index`\n *\n * With the following depths:\n *\n * `0 / 1 / 2 / 3 / 4 / 5`\n *\n * @param path - The path to validate.\n * @param startingDepth - The depth of the first node of the derivation path.\n */\nfunction validateBIP44DerivationPath(\n  path: SLIP10Path,\n  startingDepth: BIP44Depth,\n) {\n  path.forEach((nodeToken, index) => {\n    const currentDepth = startingDepth + index;\n\n    if (currentDepth === MIN_BIP_44_DEPTH) {\n      if (\n        !(nodeToken instanceof Uint8Array) &&\n        !BIP_39_PATH_REGEX.test(nodeToken)\n      ) {\n        throw new Error(\n          'Invalid derivation path: The \"m\" / seed node (depth 0) must be a BIP-39 node.',\n        );\n      }\n\n      return;\n    }\n\n    assert(typeof nodeToken === 'string');\n\n    // eslint-disable-next-line default-case\n    switch (currentDepth) {\n      case 1:\n        if (nodeToken !== BIP44PurposeNodeToken) {\n          throw new Error(\n            `Invalid derivation path: The \"purpose\" node (depth 1) must be the string \"${BIP44PurposeNodeToken}\".`,\n          );\n        }\n        break;\n\n      case 2:\n        if (!BIP_32_PATH_REGEX.test(nodeToken) || !isHardened(nodeToken)) {\n          throw new Error(\n            'Invalid derivation path: The \"coin_type\" node (depth 2) must be a hardened BIP-32 node.',\n          );\n        }\n        break;\n\n      case 3:\n        if (!BIP_32_PATH_REGEX.test(nodeToken) || !isHardened(nodeToken)) {\n          throw new Error(\n            'Invalid derivation path: The \"account\" node (depth 3) must be a hardened BIP-32 node.',\n          );\n        }\n        break;\n\n      case 4:\n        if (!BIP_32_PATH_REGEX.test(nodeToken)) {\n          throw new Error(\n            'Invalid derivation path: The \"change\" node (depth 4) must be a BIP-32 node.',\n          );\n        }\n        break;\n\n      case MAX_BIP_44_DEPTH: // 5\n        if (!BIP_32_PATH_REGEX.test(nodeToken)) {\n          throw new Error(\n            'Invalid derivation path: The \"address_index\" node (depth 5) must be a BIP-32 node.',\n          );\n        }\n        break;\n    }\n  });\n}\n"],"names":["assert","BIP44PurposeNodeToken","BIP_32_PATH_REGEX","BIP_39_PATH_REGEX","MAX_BIP_44_DEPTH","MIN_BIP_44_DEPTH","decodeExtendedKey","encodeExtendedKey","PRIVATE_KEY_VERSION","PUBLIC_KEY_VERSION","SLIP10Node","validateBIP32Depth","isHardened","BIP44Node","fromJSON","json","fromExtendedKey","options","extendedKey","chainCode","depth","parentFingerprint","index","version","privateKey","publicKey","validateBIP44Depth","node","curve","fromDerivationPath","derivationPath","length","validateBIP44DerivationPath","privateKeyBytes","publicKeyBytes","chainCodeBytes","compressedPublicKey","compressedPublicKeyBytes","address","masterFingerprint","fingerprint","data","neuter","derive","path","Error","newDepth","toJSON","constructor","Object","freeze","startingDepth","forEach","nodeToken","currentDepth","Uint8Array","test"],"mappings":"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"}