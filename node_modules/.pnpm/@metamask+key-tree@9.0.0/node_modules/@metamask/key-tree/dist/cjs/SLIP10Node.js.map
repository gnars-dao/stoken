{"version":3,"sources":["../../src/SLIP10Node.ts"],"sourcesContent":["import { assert, bytesToHex } from '@metamask/utils';\n\nimport type { BIP44CoinTypeNode } from './BIP44CoinTypeNode';\nimport type { BIP44Node } from './BIP44Node';\nimport type { RootedSLIP10PathTuple, SLIP10PathTuple } from './constants';\nimport { BYTES_KEY_LENGTH } from './constants';\nimport type { SupportedCurve } from './curves';\nimport { getCurveByName } from './curves';\nimport { deriveKeyFromPath } from './derivation';\nimport { publicKeyToEthAddress } from './derivers/bip32';\nimport {\n  getBytes,\n  getBytesUnsafe,\n  getFingerprint,\n  isValidInteger,\n  validateBIP32Index,\n  validateCurve,\n} from './utils';\n\n/**\n * A wrapper for SLIP-10 Hierarchical Deterministic (HD) tree nodes, i.e.\n * cryptographic keys used to generate key pairs and addresses for cryptocurrency\n * protocols.\n */\nexport type JsonSLIP10Node = {\n  /**\n   * The 0-indexed path depth of this node.\n   */\n  readonly depth: number;\n\n  /**\n   * The fingerprint of the master node, i.e., the node at depth 0. May be\n   * undefined if this node was created from an extended key.\n   */\n  readonly masterFingerprint?: number | undefined;\n\n  /**\n   * The fingerprint of the parent key, or 0 if this is a master node.\n   */\n  readonly parentFingerprint: number;\n\n  /**\n   * The index of the node, or 0 if this is a master node.\n   */\n  readonly index: number;\n\n  /**\n   * The (optional) private key of this node.\n   */\n  readonly privateKey?: string | undefined;\n\n  /**\n   * The public key of this node.\n   */\n  readonly publicKey: string;\n\n  /**\n   * The chain code of this node.\n   */\n  readonly chainCode: string;\n\n  /**\n   * The name of the curve used by the node.\n   */\n  readonly curve: SupportedCurve;\n};\n\nexport type SLIP10NodeInterface = JsonSLIP10Node & {\n  chainCodeBytes: Uint8Array;\n\n  /**\n   * The private key for this node, as a {@link Uint8Array}.\n   * May be undefined if this node is a public key only node.\n   */\n  privateKeyBytes?: Uint8Array | undefined;\n\n  /**\n   * The public key for this node, as a {@link Uint8Array}.\n   */\n  publicKeyBytes: Uint8Array;\n\n  /**\n   * @returns A JSON-compatible representation of this node's data fields.\n   */\n  toJSON(): JsonSLIP10Node;\n};\n\nexport type SLIP10NodeConstructorOptions = {\n  readonly depth: number;\n  readonly masterFingerprint?: number | undefined;\n  readonly parentFingerprint: number;\n  readonly index: number;\n  readonly chainCode: Uint8Array;\n  readonly privateKey?: Uint8Array | undefined;\n  readonly publicKey: Uint8Array;\n  readonly curve: SupportedCurve;\n};\n\nexport type SLIP10ExtendedKeyOptions = {\n  readonly depth: number;\n  readonly masterFingerprint?: number | undefined;\n  readonly parentFingerprint: number;\n  readonly index: number;\n  readonly chainCode: string | Uint8Array;\n  readonly privateKey?: string | Uint8Array | undefined;\n  readonly publicKey?: string | Uint8Array | undefined;\n  readonly curve: SupportedCurve;\n};\n\nexport type SLIP10DerivationPathOptions = {\n  readonly derivationPath: RootedSLIP10PathTuple;\n  readonly curve: SupportedCurve;\n};\n\nexport class SLIP10Node implements SLIP10NodeInterface {\n  /**\n   * Wrapper of the {@link fromExtendedKey} function. Refer to that function\n   * for documentation.\n   *\n   * @param json - The JSON representation of a SLIP-10 node.\n   */\n  static async fromJSON(json: JsonSLIP10Node): Promise<SLIP10Node> {\n    return SLIP10Node.fromExtendedKey(json);\n  }\n\n  /**\n   * Create a new SLIP-10 node from a key and chain code. You must specify\n   * either a private key or a public key. When specifying a private key,\n   * the public key will be derived from the private key.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * @param options - The options for the new node.\n   * @param options.depth - The depth of the node.\n   * @param options.masterFingerprint - The fingerprint of the master node, i.e., the\n   * node at depth 0. May be undefined if this node was created from an extended\n   * key.\n   * @param options.parentFingerprint - The fingerprint of the parent key, or 0 if\n   * the node is a master node.\n   * @param options.index - The index of the node, or 0 if the node is a master node.\n   * @param options.privateKey - The private key for the node.\n   * @param options.publicKey - The public key for the node. If a private key is\n   * specified, this parameter is ignored.\n   * @param options.chainCode - The chain code for the node.\n   * @param options.curve - The curve used by the node.\n   */\n  static async fromExtendedKey({\n    depth,\n    masterFingerprint,\n    parentFingerprint,\n    index,\n    privateKey,\n    publicKey,\n    chainCode,\n    curve,\n  }: SLIP10ExtendedKeyOptions) {\n    const chainCodeBytes = getBytes(chainCode, BYTES_KEY_LENGTH);\n\n    validateCurve(curve);\n    validateBIP32Depth(depth);\n    validateBIP32Index(index);\n    validateRootIndex(index, depth);\n    validateParentFingerprint(parentFingerprint, depth);\n    validateMasterParentFingerprint(\n      masterFingerprint,\n      parentFingerprint,\n      depth,\n    );\n\n    const curveObject = getCurveByName(curve);\n\n    if (privateKey) {\n      const privateKeyBytes = getBytesUnsafe(privateKey, BYTES_KEY_LENGTH);\n      assert(\n        curveObject.isValidPrivateKey(privateKeyBytes),\n        `Invalid private key: Value is not a valid ${curve} private key.`,\n      );\n\n      return new SLIP10Node(\n        {\n          depth,\n          masterFingerprint,\n          parentFingerprint,\n          index,\n          chainCode: chainCodeBytes,\n          privateKey: privateKeyBytes,\n          publicKey: await curveObject.getPublicKey(privateKeyBytes),\n          curve,\n        },\n        this.#constructorGuard,\n      );\n    }\n\n    if (publicKey) {\n      const publicKeyBytes = getBytes(publicKey, curveObject.publicKeyLength);\n\n      return new SLIP10Node(\n        {\n          depth,\n          masterFingerprint,\n          parentFingerprint,\n          index,\n          chainCode: chainCodeBytes,\n          publicKey: publicKeyBytes,\n          curve,\n        },\n        this.#constructorGuard,\n      );\n    }\n\n    throw new Error(\n      'Invalid options: Must provide either a private key or a public key.',\n    );\n  }\n\n  /**\n   * Create a new SLIP-10 node from a derivation path. The derivation path\n   * must be rooted, i.e. it must begin with a BIP-39 node, given as a string of\n   * the form `bip39:MNEMONIC`, where `MNEMONIC` is a space-separated list of\n   * BIP-39 seed phrase words.\n   *\n   * All parameters are stringently validated, and an error is thrown if\n   * validation fails.\n   *\n   * Recall that a BIP-44 HD tree path consists of the following nodes:\n   *\n   * `m / 44' / coin_type' / account' / change / address_index`\n   *\n   * With the following depths:\n   *\n   * `0 / 1 / 2 / 3 / 4 / 5`\n   *\n   * @param options - The options for the new node.\n   * @param options.derivationPath - The rooted HD tree path that will be used\n   * to derive the key of this node.\n   * @param options.curve - The curve used by the node.\n   * @returns A new SLIP-10 node.\n   */\n  static async fromDerivationPath({\n    derivationPath,\n    curve,\n  }: SLIP10DerivationPathOptions) {\n    validateCurve(curve);\n\n    if (!derivationPath) {\n      throw new Error('Invalid options: Must provide a derivation path.');\n    }\n\n    if (derivationPath.length === 0) {\n      throw new Error(\n        'Invalid derivation path: May not specify an empty derivation path.',\n      );\n    }\n\n    return await deriveKeyFromPath({\n      path: derivationPath,\n      depth: derivationPath.length - 1,\n      curve,\n    });\n  }\n\n  static #constructorGuard = Symbol('SLIP10Node.constructor');\n\n  public readonly curve: SupportedCurve;\n\n  public readonly depth: number;\n\n  public readonly masterFingerprint?: number | undefined;\n\n  public readonly parentFingerprint: number;\n\n  public readonly index: number;\n\n  public readonly chainCodeBytes: Uint8Array;\n\n  public readonly privateKeyBytes?: Uint8Array | undefined;\n\n  public readonly publicKeyBytes: Uint8Array;\n\n  // eslint-disable-next-line no-restricted-syntax\n  private constructor(\n    {\n      depth,\n      masterFingerprint,\n      parentFingerprint,\n      index,\n      chainCode,\n      privateKey,\n      publicKey,\n      curve,\n    }: SLIP10NodeConstructorOptions,\n    constructorGuard?: symbol,\n  ) {\n    assert(\n      constructorGuard === SLIP10Node.#constructorGuard,\n      'SLIP10Node can only be constructed using `SLIP10Node.fromJSON`, `SLIP10Node.fromExtendedKey`, or `SLIP10Node.fromDerivationPath`.',\n    );\n\n    this.depth = depth;\n    this.masterFingerprint = masterFingerprint;\n    this.parentFingerprint = parentFingerprint;\n    this.index = index;\n    this.chainCodeBytes = chainCode;\n    this.privateKeyBytes = privateKey;\n    this.publicKeyBytes = publicKey;\n    this.curve = curve;\n\n    Object.freeze(this);\n  }\n\n  public get chainCode() {\n    return bytesToHex(this.chainCodeBytes);\n  }\n\n  public get privateKey(): string | undefined {\n    if (this.privateKeyBytes) {\n      return bytesToHex(this.privateKeyBytes);\n    }\n\n    return undefined;\n  }\n\n  public get publicKey(): string {\n    return bytesToHex(this.publicKeyBytes);\n  }\n\n  public get compressedPublicKeyBytes(): Uint8Array {\n    return getCurveByName(this.curve).compressPublicKey(this.publicKeyBytes);\n  }\n\n  public get compressedPublicKey(): string {\n    return bytesToHex(this.compressedPublicKeyBytes);\n  }\n\n  public get address(): string {\n    if (this.curve !== 'secp256k1') {\n      throw new Error(\n        'Unable to get address for this node: Only secp256k1 is supported.',\n      );\n    }\n\n    return bytesToHex(publicKeyToEthAddress(this.publicKeyBytes));\n  }\n\n  public get fingerprint(): number {\n    return getFingerprint(this.compressedPublicKeyBytes);\n  }\n\n  /**\n   * Get a neutered version of this node, i.e. a node without a private key.\n   *\n   * @returns A neutered version of this node.\n   */\n  public neuter(): SLIP10Node {\n    return new SLIP10Node(\n      {\n        depth: this.depth,\n        masterFingerprint: this.masterFingerprint,\n        parentFingerprint: this.parentFingerprint,\n        index: this.index,\n        chainCode: this.chainCodeBytes,\n        publicKey: this.publicKeyBytes,\n        curve: this.curve,\n      },\n      SLIP10Node.#constructorGuard,\n    );\n  }\n\n  /**\n   * Derives a child of the key contains be this node and returns a new\n   * {@link SLIP10Node} containing the child key.\n   *\n   * The specified path must be a valid HD path from this node, per SLIP-10.\n   *\n   * @param path - The partial (non-rooted) SLIP-10 HD tree path will be used\n   * to derive a child key from the parent key contained within this node.\n   * @returns The {@link SLIP10Node} corresponding to the derived child key.\n   */\n  public async derive(path: SLIP10PathTuple): Promise<SLIP10Node> {\n    return await deriveChildNode({\n      path,\n      node: this,\n    });\n  }\n\n  // This is documented in the interface of this class.\n  public toJSON(): JsonSLIP10Node {\n    return {\n      depth: this.depth,\n      masterFingerprint: this.masterFingerprint,\n      parentFingerprint: this.parentFingerprint,\n      index: this.index,\n      curve: this.curve,\n      privateKey: this.privateKey,\n      publicKey: this.publicKey,\n      chainCode: this.chainCode,\n    };\n  }\n}\n\n/**\n * Validates a BIP-32 path depth. Effectively, asserts that the depth is an\n * integer `number`. Throws an error if validation fails.\n *\n * @param depth - The depth to validate.\n */\nexport function validateBIP32Depth(depth: unknown): asserts depth is number {\n  if (!isValidInteger(depth)) {\n    throw new Error(\n      `Invalid HD tree path depth: The depth must be a positive integer. Received: \"${String(\n        depth,\n      )}\".`,\n    );\n  }\n}\n\n/**\n * Validates a BIP-32 parent fingerprint. Effectively, asserts that the fingerprint is an\n * integer `number`. Throws an error if validation fails.\n *\n * @param parentFingerprint - The parent fingerprint to validate.\n * @param depth - The depth of the node to validate.\n * @throws If the parent fingerprint is not a positive integer, or invalid for\n * the current depth.\n */\nexport function validateParentFingerprint(\n  parentFingerprint: unknown,\n  depth: number,\n): asserts parentFingerprint is number {\n  if (!isValidInteger(parentFingerprint)) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint must be a positive integer. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n\n  if (depth === 0 && parentFingerprint !== 0) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint of the root node must be 0. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n\n  if (depth > 0 && parentFingerprint === 0) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint of a child node must not be 0. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n}\n\n/**\n * Validate that a given combination of master fingerprint and parent\n * fingerprint is valid for the given depth.\n *\n * @param masterFingerprint - The master fingerprint to validate.\n * @param parentFingerprint - The parent fingerprint to validate.\n * @param depth - The depth of the node to validate.\n * @throws If the combination of master fingerprint and parent fingerprint is\n * invalid for the given depth.\n */\nexport function validateMasterParentFingerprint(\n  masterFingerprint: number | undefined,\n  parentFingerprint: number,\n  depth: number,\n) {\n  // The master fingerprint is optional.\n  if (!masterFingerprint) {\n    return;\n  }\n\n  if (depth >= 2 && masterFingerprint === parentFingerprint) {\n    throw new Error(\n      `Invalid parent fingerprint: The fingerprint of a child node cannot be equal to the master fingerprint. Received: \"${String(\n        parentFingerprint,\n      )}\".`,\n    );\n  }\n}\n\n/**\n * Validate that the index is zero for the root node.\n *\n * @param index - The index to validate.\n * @param depth - The depth of the node to validate.\n * @throws If the index is not zero for the root node.\n */\nexport function validateRootIndex(index: number, depth: number) {\n  if (depth === 0 && index !== 0) {\n    throw new Error(\n      `Invalid index: The index of the root node must be 0. Received: \"${String(\n        index,\n      )}\".`,\n    );\n  }\n}\n\ntype DeriveChildNodeArgs = {\n  path: SLIP10PathTuple;\n  node: SLIP10Node | BIP44Node | BIP44CoinTypeNode;\n};\n\n/**\n * Derives a child key from the given parent key.\n *\n * @param options - The options to use when deriving the child key.\n * @param options.node - The node to derive from.\n * @param options.path - The path to the child node / key.\n * @returns The derived key and depth.\n */\nexport async function deriveChildNode({\n  path,\n  node,\n}: DeriveChildNodeArgs): Promise<SLIP10Node> {\n  if (path.length === 0) {\n    throw new Error(\n      'Invalid HD tree derivation path: Deriving a path of length 0 is not defined.',\n    );\n  }\n\n  // Note that we do not subtract 1 from the length of the path to the child,\n  // unlike when we calculate the depth of a rooted path.\n  const newDepth = node.depth + path.length;\n  validateBIP32Depth(newDepth);\n\n  return await deriveKeyFromPath({\n    path,\n    node,\n    depth: newDepth,\n  });\n}\n"],"names":["SLIP10Node","validateBIP32Depth","validateParentFingerprint","validateMasterParentFingerprint","validateRootIndex","deriveChildNode","fromJSON","json","fromExtendedKey","depth","masterFingerprint","parentFingerprint","index","privateKey","publicKey","chainCode","curve","chainCodeBytes","getBytes","BYTES_KEY_LENGTH","validateCurve","validateBIP32Index","curveObject","getCurveByName","privateKeyBytes","getBytesUnsafe","assert","isValidPrivateKey","getPublicKey","constructorGuard","publicKeyBytes","publicKeyLength","Error","fromDerivationPath","derivationPath","length","deriveKeyFromPath","path","bytesToHex","undefined","compressedPublicKeyBytes","compressPublicKey","compressedPublicKey","address","publicKeyToEthAddress","fingerprint","getFingerprint","neuter","derive","node","toJSON","Object","freeze","Symbol","isValidInteger","String","newDepth"],"mappings":"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"}