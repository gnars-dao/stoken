{"version":3,"sources":["../../src/extended-keys.ts"],"sourcesContent":["import { createDataView } from '@metamask/utils';\n\nimport { validateBIP44Depth } from './BIP44Node';\nimport { compressPublicKey, decompressPublicKey } from './curves/secp256k1';\nimport { decodeBase58check, encodeBase58check, isValidBytesKey } from './utils';\n\n// https://github.com/bitcoin/bips/blob/274fa400d630ba757bec0c03b35ebe2345197108/bip-0032.mediawiki#Serialization_format\nexport const PUBLIC_KEY_VERSION = 0x0488b21e;\nexport const PRIVATE_KEY_VERSION = 0x0488ade4;\n\nexport type ExtendedKeyVersion =\n  | typeof PUBLIC_KEY_VERSION\n  | typeof PRIVATE_KEY_VERSION;\n\n/**\n * An extended public or private key. Contains either a public or private key,\n * depending on the version.\n */\ntype ExtendedKeyLike = {\n  version: ExtendedKeyVersion;\n  depth: number;\n  parentFingerprint: number;\n  index: number;\n  chainCode: Uint8Array;\n};\n\ntype ExtendedPublicKey = ExtendedKeyLike & {\n  version: typeof PUBLIC_KEY_VERSION;\n  publicKey: Uint8Array;\n};\n\ntype ExtendedPrivateKey = ExtendedKeyLike & {\n  version: typeof PRIVATE_KEY_VERSION;\n  privateKey: Uint8Array;\n};\n\nexport type ExtendedKey = ExtendedPublicKey | ExtendedPrivateKey;\n\n/**\n * Decodes an extended public or private key. In the case of an extended public key, the public key\n * is returned in the uncompressed form.\n *\n * Throws an error if the extended key is invalid.\n *\n * @param extendedKey - The extended key string to attempt to decode.\n * @returns The decoded extended key.\n */\nexport const decodeExtendedKey = (extendedKey: string): ExtendedKey => {\n  const bytes = decodeBase58check(extendedKey);\n\n  if (bytes.length !== 78) {\n    throw new Error(\n      `Invalid extended key: Expected a length of 78, got ${bytes.length}.`,\n    );\n  }\n\n  const view = createDataView(bytes);\n\n  const version = view.getUint32(0, false);\n  const depth = view.getUint8(4);\n  validateBIP44Depth(depth);\n\n  const parentFingerprint = view.getUint32(5, false);\n  const index = view.getUint32(9, false);\n\n  const chainCode = bytes.slice(13, 45);\n  if (!isValidBytesKey(chainCode, 32)) {\n    throw new Error(\n      `Invalid extended key: Chain code must be a 32-byte non-zero byte array.`,\n    );\n  }\n\n  const key = bytes.slice(45, 78);\n  if (!isValidBytesKey(key, 33)) {\n    throw new Error(\n      `Invalid extended key: Key must be a 33-byte non-zero byte array.`,\n    );\n  }\n\n  const keyView = createDataView(key);\n\n  if (version === PUBLIC_KEY_VERSION) {\n    if (keyView.getUint8(0) !== 0x02 && keyView.getUint8(0) !== 0x03) {\n      throw new Error(\n        `Invalid extended key: Public key must start with 0x02 or 0x03.`,\n      );\n    }\n\n    return {\n      version,\n      depth,\n      parentFingerprint,\n      index,\n      chainCode,\n      publicKey: decompressPublicKey(key),\n    };\n  }\n\n  if (version === PRIVATE_KEY_VERSION) {\n    if (keyView.getUint8(0) !== 0x00) {\n      throw new Error(\n        `Invalid extended key: Private key must start with 0x00.`,\n      );\n    }\n\n    return {\n      version,\n      depth,\n      parentFingerprint,\n      index,\n      chainCode,\n      privateKey: key.slice(1),\n    };\n  }\n\n  throw new Error(\n    `Invalid extended key: Expected a public (xpub) or private key (xprv) version.`,\n  );\n};\n\n/**\n * Encodes an extended public or private key. Assumes that all the inputs are verified beforehand.\n *\n * @param extendedKey - The extended key data to encode.\n * @returns The encoded extended key.\n */\nexport const encodeExtendedKey = (extendedKey: ExtendedKey): string => {\n  const { version, depth, parentFingerprint, index, chainCode } = extendedKey;\n\n  const bytes = new Uint8Array(78);\n\n  const view = createDataView(bytes);\n\n  view.setUint32(0, version, false);\n  view.setUint8(4, depth);\n  view.setUint32(5, parentFingerprint, false);\n  view.setUint32(9, index, false);\n\n  bytes.set(chainCode, 13);\n\n  if (extendedKey.version === PUBLIC_KEY_VERSION) {\n    const { publicKey } = extendedKey;\n    const compressedPublicKey = compressPublicKey(publicKey);\n\n    bytes.set(compressedPublicKey, 45);\n  }\n\n  if (extendedKey.version === PRIVATE_KEY_VERSION) {\n    const { privateKey } = extendedKey;\n    bytes.set(privateKey, 46);\n  }\n\n  return encodeBase58check(bytes);\n};\n"],"names":["PUBLIC_KEY_VERSION","PRIVATE_KEY_VERSION","decodeExtendedKey","encodeExtendedKey","extendedKey","bytes","decodeBase58check","length","Error","view","createDataView","version","getUint32","depth","getUint8","validateBIP44Depth","parentFingerprint","index","chainCode","slice","isValidBytesKey","key","keyView","publicKey","decompressPublicKey","privateKey","Uint8Array","setUint32","setUint8","set","compressedPublicKey","compressPublicKey","encodeBase58check"],"mappings":";;;;;;;;;;;IAOaA,kBAAkB;eAAlBA;;IACAC,mBAAmB;eAAnBA;;IAuCAC,iBAAiB;eAAjBA;;IA+EAC,iBAAiB;eAAjBA;;;uBA9HkB;2BAEI;2BACoB;wBACe;AAG/D,MAAMH,qBAAqB;AAC3B,MAAMC,sBAAsB;AAuC5B,MAAMC,oBAAoB,CAACE;IAChC,MAAMC,QAAQC,IAAAA,yBAAiB,EAACF;IAEhC,IAAIC,MAAME,MAAM,KAAK,IAAI;QACvB,MAAM,IAAIC,MACR,CAAC,mDAAmD,EAAEH,MAAME,MAAM,CAAC,CAAC,CAAC;IAEzE;IAEA,MAAME,OAAOC,IAAAA,qBAAc,EAACL;IAE5B,MAAMM,UAAUF,KAAKG,SAAS,CAAC,GAAG;IAClC,MAAMC,QAAQJ,KAAKK,QAAQ,CAAC;IAC5BC,IAAAA,6BAAkB,EAACF;IAEnB,MAAMG,oBAAoBP,KAAKG,SAAS,CAAC,GAAG;IAC5C,MAAMK,QAAQR,KAAKG,SAAS,CAAC,GAAG;IAEhC,MAAMM,YAAYb,MAAMc,KAAK,CAAC,IAAI;IAClC,IAAI,CAACC,IAAAA,uBAAe,EAACF,WAAW,KAAK;QACnC,MAAM,IAAIV,MACR,CAAC,uEAAuE,CAAC;IAE7E;IAEA,MAAMa,MAAMhB,MAAMc,KAAK,CAAC,IAAI;IAC5B,IAAI,CAACC,IAAAA,uBAAe,EAACC,KAAK,KAAK;QAC7B,MAAM,IAAIb,MACR,CAAC,gEAAgE,CAAC;IAEtE;IAEA,MAAMc,UAAUZ,IAAAA,qBAAc,EAACW;IAE/B,IAAIV,YAAYX,oBAAoB;QAClC,IAAIsB,QAAQR,QAAQ,CAAC,OAAO,QAAQQ,QAAQR,QAAQ,CAAC,OAAO,MAAM;YAChE,MAAM,IAAIN,MACR,CAAC,8DAA8D,CAAC;QAEpE;QAEA,OAAO;YACLG;YACAE;YACAG;YACAC;YACAC;YACAK,WAAWC,IAAAA,8BAAmB,EAACH;QACjC;IACF;IAEA,IAAIV,YAAYV,qBAAqB;QACnC,IAAIqB,QAAQR,QAAQ,CAAC,OAAO,MAAM;YAChC,MAAM,IAAIN,MACR,CAAC,uDAAuD,CAAC;QAE7D;QAEA,OAAO;YACLG;YACAE;YACAG;YACAC;YACAC;YACAO,YAAYJ,IAAIF,KAAK,CAAC;QACxB;IACF;IAEA,MAAM,IAAIX,MACR,CAAC,6EAA6E,CAAC;AAEnF;AAQO,MAAML,oBAAoB,CAACC;IAChC,MAAM,EAAEO,OAAO,EAAEE,KAAK,EAAEG,iBAAiB,EAAEC,KAAK,EAAEC,SAAS,EAAE,GAAGd;IAEhE,MAAMC,QAAQ,IAAIqB,WAAW;IAE7B,MAAMjB,OAAOC,IAAAA,qBAAc,EAACL;IAE5BI,KAAKkB,SAAS,CAAC,GAAGhB,SAAS;IAC3BF,KAAKmB,QAAQ,CAAC,GAAGf;IACjBJ,KAAKkB,SAAS,CAAC,GAAGX,mBAAmB;IACrCP,KAAKkB,SAAS,CAAC,GAAGV,OAAO;IAEzBZ,MAAMwB,GAAG,CAACX,WAAW;IAErB,IAAId,YAAYO,OAAO,KAAKX,oBAAoB;QAC9C,MAAM,EAAEuB,SAAS,EAAE,GAAGnB;QACtB,MAAM0B,sBAAsBC,IAAAA,4BAAiB,EAACR;QAE9ClB,MAAMwB,GAAG,CAACC,qBAAqB;IACjC;IAEA,IAAI1B,YAAYO,OAAO,KAAKV,qBAAqB;QAC/C,MAAM,EAAEwB,UAAU,EAAE,GAAGrB;QACvBC,MAAMwB,GAAG,CAACJ,YAAY;IACxB;IAEA,OAAOO,IAAAA,yBAAiB,EAAC3B;AAC3B"}