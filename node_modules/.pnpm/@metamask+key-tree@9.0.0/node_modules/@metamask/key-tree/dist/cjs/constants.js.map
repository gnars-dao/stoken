{"version":3,"sources":["../../src/constants.ts"],"sourcesContent":["export const BYTES_KEY_LENGTH = 32;\n\nexport const MIN_BIP_44_DEPTH = 0;\nexport const MAX_BIP_44_DEPTH = 5;\n\nexport const MAX_UNHARDENED_BIP_32_INDEX = 0x7fffffff; // 2^31 - 1\nexport const MAX_BIP_32_INDEX = 0xffffffff; // 2^32 - 1\n\nexport type MinBIP44Depth = typeof MIN_BIP_44_DEPTH;\nexport type MaxBIP44Depth = typeof MAX_BIP_44_DEPTH;\nexport type BIP44Depth = MinBIP44Depth | 1 | 2 | 3 | 4 | MaxBIP44Depth;\n\n// BIP-44 derivation path:\n// m / purpose' / coin_type' / account' / change / address_index\n//\n// Per BIP-43 / BIP-44, \"purpose\" should always be \"44\":\n// m / 44' / coin_type' / account' / change / address_index\n//\n// The Ethereum \"coin_type\" is \"60\". Its \"account\" and \"change\" indices are\n// always \"0\". Here's an example Ethereum HD path for account \"0\":\n// m  / 44' / 60' / 0' / 0 / 0\n\nexport type UnprefixedNode = `${number}'`;\n\nexport type AnonymizedBIP39Node = 'm';\nexport type BIP39StringNode = `bip39:${string}`;\nexport type BIP39Node = BIP39StringNode | Uint8Array;\n\nexport type HardenedBIP32Node = `bip32:${number}'`;\nexport type UnhardenedBIP32Node = `bip32:${number}`;\nexport type BIP32Node = HardenedBIP32Node | UnhardenedBIP32Node;\n\nexport type HardenedSLIP10Node = `slip10:${number}'`;\nexport type UnhardenedSLIP10Node = `slip10:${number}`;\nexport type SLIP10PathNode = HardenedSLIP10Node | UnhardenedSLIP10Node;\n\nexport const BIP44PurposeNodeToken = `bip32:44'`;\n\nexport const UNPREFIXED_PATH_REGEX = /^\\d+$/u;\n\n/**\n * e.g.\n * -  0\n * -  0'\n */\nexport const UNPREFIXED_BIP_32_PATH_REGEX = /^(?<index>\\d+)'?$/u;\n\n/**\n * e.g.\n * -  bip32:0\n * -  bip32:0'\n */\nexport const BIP_32_PATH_REGEX = /^bip32:\\d+'?$/u;\n\n/**\n * e.g.\n * -  slip10:0\n * -  slip10:0'\n */\nexport const SLIP_10_PATH_REGEX = /^slip10:\\d+'?$/u;\n\n/**\n * bip39:<SPACE_DELMITED_SEED_PHRASE>\n *\n * The seed phrase must consist of 12 <= 24 words.\n */\nexport const BIP_39_PATH_REGEX = /^bip39:([a-z]+){1}( [a-z]+){11,23}$/u;\n\nexport const BIP_32_HARDENED_OFFSET = 0x80000000;\n\nexport type HDPathString0 = AnonymizedBIP39Node;\nexport type HDPathString1 = `${HDPathString0} / ${HardenedBIP32Node}`;\nexport type HDPathString2 = `${HDPathString1} / ${HardenedBIP32Node}`;\nexport type HDPathString3 = `${HDPathString2} / ${HardenedBIP32Node}`;\nexport type HDPathString4 = `${HDPathString3} / ${BIP32Node}`;\nexport type HDPathString5 = `${HDPathString4} / ${BIP32Node}`;\n\nexport type CoinTypeHDPathString = HDPathString2;\nexport type ChangeHDPathString = HDPathString4;\nexport type AddressHDPathString = HDPathString5;\n\nexport type HDPathString =\n  | HDPathString0\n  | HDPathString1\n  | HDPathString2\n  | HDPathString3\n  | HDPathString4\n  | HDPathString5;\n\nexport type RootedHDPathTuple0 = readonly [BIP39Node];\nexport type RootedHDPathTuple1 = readonly [\n  ...RootedHDPathTuple0,\n  HardenedBIP32Node,\n];\nexport type RootedHDPathTuple2 = readonly [\n  ...RootedHDPathTuple1,\n  HardenedBIP32Node,\n];\nexport type RootedHDPathTuple3 = readonly [\n  ...RootedHDPathTuple2,\n  HardenedBIP32Node,\n];\nexport type RootedHDPathTuple4 = readonly [...RootedHDPathTuple3, BIP32Node];\nexport type RootedHDPathTuple5 = readonly [...RootedHDPathTuple4, BIP32Node];\n\nexport type RootedHDPathTuple =\n  | RootedHDPathTuple0\n  | RootedHDPathTuple1\n  | RootedHDPathTuple2\n  | RootedHDPathTuple3\n  | RootedHDPathTuple4\n  | RootedHDPathTuple5;\n\nexport type PartialHDPathTuple1 = readonly [HardenedBIP32Node];\nexport type PartialHDPathTuple2 = readonly [\n  ...PartialHDPathTuple1,\n  HardenedBIP32Node,\n];\nexport type PartialHDPathTuple3 = readonly [\n  ...PartialHDPathTuple2,\n  HardenedBIP32Node,\n];\nexport type PartialHDPathTuple4 = readonly [...PartialHDPathTuple3, BIP32Node];\nexport type PartialHDPathTuple5 = readonly [...PartialHDPathTuple4, BIP32Node];\nexport type PartialHDPathTuple6 = readonly [BIP32Node];\nexport type PartialHDPathTuple7 = readonly [BIP32Node, BIP32Node];\nexport type PartialHDPathTuple8 = readonly [\n  HardenedBIP32Node,\n  BIP32Node,\n  BIP32Node,\n];\nexport type PartialHDPathTuple9 = readonly [HardenedBIP32Node, BIP32Node];\nexport type PartialHDPathTuple10 = readonly [\n  HardenedBIP32Node,\n  HardenedBIP32Node,\n  BIP32Node,\n];\nexport type PartialHDPathTuple11 = readonly [\n  HardenedBIP32Node,\n  HardenedBIP32Node,\n  BIP32Node,\n  BIP32Node,\n];\n\nexport type CoinTypeToAddressTuple = PartialHDPathTuple8;\n\nexport type PartialHDPathTuple =\n  | PartialHDPathTuple1\n  | PartialHDPathTuple2\n  | PartialHDPathTuple3\n  | PartialHDPathTuple4\n  | PartialHDPathTuple5\n  | PartialHDPathTuple6\n  | PartialHDPathTuple7\n  | PartialHDPathTuple8\n  | PartialHDPathTuple9\n  | PartialHDPathTuple10\n  | PartialHDPathTuple11;\n\n/**\n * Every ordered subset of a full HD path tuple.\n */\nexport type HDPathTuple = RootedHDPathTuple | PartialHDPathTuple;\n\nexport type RootedSLIP10PathTuple = readonly [\n  BIP39Node,\n  ...(BIP32Node[] | SLIP10PathNode[]),\n];\n\nexport type SLIP10PathTuple = readonly BIP32Node[] | readonly SLIP10PathNode[];\nexport type SLIP10Path = RootedSLIP10PathTuple | SLIP10PathTuple;\n\nexport type FullHDPathTuple = RootedHDPathTuple5;\n"],"names":["BYTES_KEY_LENGTH","MIN_BIP_44_DEPTH","MAX_BIP_44_DEPTH","MAX_UNHARDENED_BIP_32_INDEX","MAX_BIP_32_INDEX","BIP44PurposeNodeToken","UNPREFIXED_PATH_REGEX","UNPREFIXED_BIP_32_PATH_REGEX","BIP_32_PATH_REGEX","SLIP_10_PATH_REGEX","BIP_39_PATH_REGEX","BIP_32_HARDENED_OFFSET"],"mappings":";;;;;;;;;;;IAAaA,gBAAgB;eAAhBA;;IAEAC,gBAAgB;eAAhBA;;IACAC,gBAAgB;eAAhBA;;IAEAC,2BAA2B;eAA3BA;;IACAC,gBAAgB;eAAhBA;;IA8BAC,qBAAqB;eAArBA;;IAEAC,qBAAqB;eAArBA;;IAOAC,4BAA4B;eAA5BA;;IAOAC,iBAAiB;eAAjBA;;IAOAC,kBAAkB;eAAlBA;;IAOAC,iBAAiB;eAAjBA;;IAEAC,sBAAsB;eAAtBA;;;AApEN,MAAMX,mBAAmB;AAEzB,MAAMC,mBAAmB;AACzB,MAAMC,mBAAmB;AAEzB,MAAMC,8BAA8B,YAAY,WAAW;AAC3D,MAAMC,mBAAmB,YAAY,WAAW;AA8BhD,MAAMC,wBAAwB,CAAC,SAAS,CAAC;AAEzC,MAAMC,wBAAwB;AAO9B,MAAMC,+BAA+B;AAOrC,MAAMC,oBAAoB;AAO1B,MAAMC,qBAAqB;AAO3B,MAAMC,oBAAoB;AAE1B,MAAMC,yBAAyB"}