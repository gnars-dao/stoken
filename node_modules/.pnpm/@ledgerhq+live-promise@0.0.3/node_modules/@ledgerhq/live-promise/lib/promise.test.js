"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const promise_1 = require("./promise");
test("promiseAllBatched", () => __awaiter(void 0, void 0, void 0, function* () {
    const promisifyIdPlusOne = (a) => Promise.resolve(a + 1);
    const p = (0, promise_1.promiseAllBatched)(5, [], promisifyIdPlusOne);
    expect(typeof p.then).toBe("function");
    expect(yield p).toEqual([]);
    expect(yield (0, promise_1.promiseAllBatched)(5, [1, 2, 3, 4, 5, 6, 7, 8], promisifyIdPlusOne)).toEqual([
        2, 3, 4, 5, 6, 7, 8, 9,
    ]);
    expect(yield (0, promise_1.promiseAllBatched)(1, [1, 2, 3, 4, 5, 6, 7, 8], promisifyIdPlusOne)).toEqual([
        2, 3, 4, 5, 6, 7, 8, 9,
    ]);
    expect(yield (0, promise_1.promiseAllBatched)(10, [1, 2, 3, 4, 5, 6, 7, 8], promisifyIdPlusOne)).toEqual([
        2, 3, 4, 5, 6, 7, 8, 9,
    ]);
    expect(yield (0, promise_1.promiseAllBatched)(2, Array(6).fill(0), (_, i) => Promise.resolve(i))).toEqual([
        0, 1, 2, 3, 4, 5,
    ]);
}));
//# sourceMappingURL=promise.test.js.map