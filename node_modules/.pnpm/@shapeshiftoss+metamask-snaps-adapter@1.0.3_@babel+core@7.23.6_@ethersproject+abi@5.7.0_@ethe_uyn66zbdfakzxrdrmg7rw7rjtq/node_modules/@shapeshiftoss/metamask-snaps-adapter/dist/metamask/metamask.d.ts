/** Wrapper functions for MetaMask snap native calls
 * For reference, see documentation at https://docs.metamask.io/guide/snaps-rpc-api.html#table-of-contents
 */
/** Unrestricted Methods */
export declare const walletGetSnaps: () => Promise<any>;
export declare const walletRequestSnaps: (snapId: string, version?: string) => Promise<any>;
export declare const walletInvokeSnap: ({ method, params, }: {
    method: string;
    params?: unknown[] | Record<string, unknown>[] | undefined;
}) => Promise<any>;
/** Restricted Methods */
export declare const walletSnap: ({ method, paramMethod, }: {
    method: string;
    paramMethod: string;
}) => Promise<any>;
/**
 * TODO: This is a snap-native call - a handler must be added to the snap onRpcRequest() method to support this.
 */
export declare const snapDialog: ({ prompt, description, textAreaContent, }: {
    prompt: string;
    description: string;
    textAreaContent: string;
}) => Promise<boolean>;
/**
 * TODO: This is a snap-native call - a handler must be added to the snap onRpcRequest() method to support this.
 */
export declare const snapGetBIP44Entropy: (coinType: string) => Promise<any>;
/**
 * TODO: This is a snap-native call - a handler must be added to the snap onRpcRequest() method to support this.
 */
export declare const snapManageState: ({ operation, value, }: {
    operation: string;
    value?: Record<string, unknown> | undefined;
}) => Promise<any>;
/**
 * TODO: This is a snap-native call - a handler must be added to the snap onRpcRequest() method to support this.
 */
export declare const snapNotify: ({ type, message, }: {
    type: string;
    message: string;
}) => Promise<any>;
