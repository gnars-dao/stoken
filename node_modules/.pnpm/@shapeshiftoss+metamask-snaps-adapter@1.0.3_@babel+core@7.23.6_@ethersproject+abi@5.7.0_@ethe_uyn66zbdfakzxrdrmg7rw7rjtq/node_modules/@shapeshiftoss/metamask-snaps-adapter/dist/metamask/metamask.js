"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.snapNotify = exports.snapManageState = exports.snapGetBIP44Entropy = exports.snapDialog = exports.walletSnap = exports.walletInvokeSnap = exports.walletRequestSnaps = exports.walletGetSnaps = void 0;
const snaps_ui_1 = require("@metamask/snaps-ui");
const hdwallet_core_1 = require("@shapeshiftoss/hdwallet-core");
const logger_1 = require("../lib/logger");
const utils_1 = require("../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Metamask.ts'] });
/** Wrapper functions for MetaMask snap native calls
 * For reference, see documentation at https://docs.metamask.io/guide/snaps-rpc-api.html#table-of-contents
 */
/** Unrestricted Methods */
const walletGetSnaps = async () => {
    const provider = await (0, utils_1.getMetaMaskProvider)();
    if (provider === undefined) {
        throw new Error('Could not get MetaMask provider');
    }
    if (provider.request === undefined) {
        throw new Error('MetaMask provider does not define a .request() method');
    }
    try {
        const ret = await provider.request({
            method: 'wallet_getSnaps',
        });
        return ret;
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'walletGetSnaps' }, `wallet_getSnaps RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.walletGetSnaps = walletGetSnaps;
const walletRequestSnaps = async (snapId, version) => {
    const provider = await (0, utils_1.getMetaMaskProvider)();
    if (provider === undefined) {
        throw new Error('Could not get MetaMask provider');
    }
    if (provider.request === undefined) {
        throw new Error('MetaMask provider does not define a .request() method');
    }
    try {
        const ret = await provider.request({
            method: 'wallet_requestSnaps',
            params: {
                [snapId]: { version },
            },
        });
        return ret;
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'walletRequestSnaps' }, `wallet_requestSnaps RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.walletRequestSnaps = walletRequestSnaps;
const walletInvokeSnap = async ({ method, params, }) => {
    const provider = await (0, utils_1.getMetaMaskProvider)();
    if (provider === undefined) {
        throw new Error('Could not get MetaMask provider');
    }
    if (provider.request === undefined) {
        throw new Error('MetaMask provider does not define a .request() method');
    }
    try {
        const ret = await provider.request({
            method,
            params,
        });
        return ret;
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'walletInvokeSnap' }, `wallet_invokeSnap RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.walletInvokeSnap = walletInvokeSnap;
/** Restricted Methods */
const walletSnap = async ({ method, paramMethod, }) => {
    const provider = await (0, utils_1.getMetaMaskProvider)();
    if (provider === undefined) {
        throw new Error('Could not get MetaMask provider');
    }
    if (provider.request === undefined) {
        throw new Error('MetaMask provider does not define a .request() method');
    }
    try {
        const ret = await provider.request({
            method: `wallet_snap_${method}`,
            params: [
                {
                    method: paramMethod,
                },
            ],
        });
        return ret;
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'walletSnap' }, `wallet_snap_* RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.walletSnap = walletSnap;
/**
 * TODO: This is a snap-native call - a handler must be added to the snap onRpcRequest() method to support this.
 */
const snapDialog = async ({ prompt, description, textAreaContent, }) => {
    const provider = await (0, utils_1.getMetaMaskProvider)();
    if (provider === undefined) {
        throw new Error('Could not get MetaMask provider');
    }
    if (provider.request === undefined) {
        throw new Error('MetaMask provider does not define a .request() method');
    }
    try {
        const ret = await provider.request({
            method: 'snap_dialog',
            params: {
                type: 'confirmation',
                content: (0, snaps_ui_1.panel)([(0, snaps_ui_1.heading)(`${prompt}: ${description}`), (0, snaps_ui_1.text)(textAreaContent)]),
            },
        });
        return ret;
    }
    catch (error) {
        /** User did not confirm the action or an error was encountered */
        moduleLogger.error(error, { fn: 'snapDialog' }, `snap_dialog RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.snapDialog = snapDialog;
/**
 * TODO: This is a snap-native call - a handler must be added to the snap onRpcRequest() method to support this.
 */
const snapGetBIP44Entropy = async (coinType) => {
    const provider = await (0, utils_1.getMetaMaskProvider)();
    if (provider === undefined) {
        throw new Error('Could not get MetaMask provider');
    }
    if (provider.request === undefined) {
        throw new Error('MetaMask provider does not define a .request() method');
    }
    const chainCode = (0, hdwallet_core_1.slip44ByCoin)(coinType);
    if (chainCode === undefined) {
        throw new Error('Coin type {coinType} invalid or unsupported.');
    }
    try {
        const result = await provider.request({
            method: `snap_getBip44Entropy_${chainCode}`,
        });
        return result;
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'snapGetBIP44Entropy' }, `snap_getBip44Entropy_${chainCode} RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.snapGetBIP44Entropy = snapGetBIP44Entropy;
/**
 * TODO: This is a snap-native call - a handler must be added to the snap onRpcRequest() method to support this.
 */
const snapManageState = async ({ operation, value, }) => {
    const provider = await (0, utils_1.getMetaMaskProvider)();
    if (provider === undefined) {
        throw new Error('Could not get MetaMask provider');
    }
    if (provider.request === undefined) {
        throw new Error('MetaMask provider does not define a .request() method');
    }
    try {
        const ret = await provider.request({
            method: 'snap_manageState',
            params: [operation, value],
        });
        return ret;
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'snapManageState' }, `snap_manageState RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.snapManageState = snapManageState;
/**
 * TODO: This is a snap-native call - a handler must be added to the snap onRpcRequest() method to support this.
 */
const snapNotify = async ({ type, message, }) => {
    const provider = await (0, utils_1.getMetaMaskProvider)();
    if (provider === undefined) {
        throw new Error('Could not get MetaMask provider');
    }
    if (provider.request === undefined) {
        throw new Error('MetaMask provider does not define a .request() method');
    }
    try {
        const ret = await provider.request({
            method: 'snap_notify',
            params: [
                {
                    type,
                    message,
                },
            ],
        });
        return ret;
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'snapNotify' }, `snap_notify RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.snapNotify = snapNotify;
//# sourceMappingURL=metamask.js.map