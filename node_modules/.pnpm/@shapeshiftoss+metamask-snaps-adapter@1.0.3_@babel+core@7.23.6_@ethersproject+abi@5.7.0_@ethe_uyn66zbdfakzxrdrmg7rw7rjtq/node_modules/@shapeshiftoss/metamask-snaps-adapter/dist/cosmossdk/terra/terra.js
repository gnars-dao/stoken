"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.terraBroadcastTransaction = exports.terraSignTransaction = exports.terraGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Terra.ts'] });
const terraGetAddress = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'terra_getAddress',
            params: { addressParams },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'terraGetAddress' }, `terra_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.terraGetAddress = terraGetAddress;
const terraSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'terra_signTransaction',
            params: { transaction },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'terraSignTransaction' }, `terra_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.terraSignTransaction = terraSignTransaction;
const terraBroadcastTransaction = async (params) => {
    const { transaction, baseUrl, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'terra_broadcastTransaction',
            params: { transaction, baseUrl },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'terraBroadcastTransaction' }, `terra_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.terraBroadcastTransaction = terraBroadcastTransaction;
//# sourceMappingURL=terra.js.map