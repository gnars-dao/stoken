"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.cosmosBroadcastTransaction = exports.cosmosSignTransaction = exports.cosmosGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Cosmos.ts'] });
const cosmosGetAddress = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'cosmos_getAddress',
            params: { addressParams },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'cosmosGetAddress' }, `cosmos_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.cosmosGetAddress = cosmosGetAddress;
const cosmosSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'cosmos_signTransaction',
            params: { transaction },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'cosmosSignTransaction' }, `cosmos_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.cosmosSignTransaction = cosmosSignTransaction;
const cosmosBroadcastTransaction = async (params) => {
    const { transaction, baseUrl, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'cosmos_broadcastTransaction',
            params: { transaction, baseUrl },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'cosmosBroadcastTransaction' }, `cosmos_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.cosmosBroadcastTransaction = cosmosBroadcastTransaction;
//# sourceMappingURL=cosmos.js.map