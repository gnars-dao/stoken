"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.kavaBroadcastTransaction = exports.kavaSignTransaction = exports.kavaGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Kava.ts'] });
const kavaGetAddress = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'kava_getAddress',
            params: { addressParams },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'kavaGetAddress' }, `kava_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.kavaGetAddress = kavaGetAddress;
const kavaSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'kava_signTransaction',
            params: { transaction },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'kavaSignTransaction' }, `kava_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.kavaSignTransaction = kavaSignTransaction;
const kavaBroadcastTransaction = async (params) => {
    const { transaction, baseUrl, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'kava_broadcastTransaction',
            params: { transaction, baseUrl },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'kavaBroadcastTransaction' }, `kava_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.kavaBroadcastTransaction = kavaBroadcastTransaction;
//# sourceMappingURL=kava.js.map