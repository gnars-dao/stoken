"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.secretBroadcastTransaction = exports.secretSignTransaction = exports.secretGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Secret.ts'] });
const secretGetAddress = async (params) => {
    try {
        const { addressParams, snapId } = params;
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'secret_getAddress',
            params: { addressParams },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'secretGetAddress' }, `secret_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.secretGetAddress = secretGetAddress;
const secretSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'secret_signTransaction',
            params: { transaction },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'secretSignTransaction' }, `secret_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.secretSignTransaction = secretSignTransaction;
const secretBroadcastTransaction = async (params) => {
    const { transaction, baseUrl, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'secret_broadcastTransaction',
            params: { transaction, baseUrl },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'secretBroadcastTransaction' }, `secret_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.secretBroadcastTransaction = secretBroadcastTransaction;
//# sourceMappingURL=secret.js.map