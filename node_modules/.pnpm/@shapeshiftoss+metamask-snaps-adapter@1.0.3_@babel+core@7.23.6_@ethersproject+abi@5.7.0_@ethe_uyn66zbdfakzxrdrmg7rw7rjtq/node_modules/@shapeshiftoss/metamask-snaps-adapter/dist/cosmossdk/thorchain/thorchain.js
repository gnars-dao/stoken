"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.thorchainBroadcastTransaction = exports.thorchainSignTransaction = exports.thorchainGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Thorchain.ts'] });
const thorchainGetAddress = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'thorchain_getAddress',
            params: { addressParams },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'thorchainGetAddress' }, `thorchain_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.thorchainGetAddress = thorchainGetAddress;
const thorchainSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'thorchain_signTransaction',
            params: { transaction },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'thorchainSignTransaction' }, `thorchain_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.thorchainSignTransaction = thorchainSignTransaction;
const thorchainBroadcastTransaction = async (params) => {
    const { transaction, baseUrl, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'thorchain_broadcastTransaction',
            params: { transaction, baseUrl },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'ThorchainsBroadcastTransaction' }, `thorchain_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.thorchainBroadcastTransaction = thorchainBroadcastTransaction;
//# sourceMappingURL=thorchain.js.map