"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.osmosisBroadcastTransaction = exports.osmosisSignTransaction = exports.osmosisGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Osmosis.ts'] });
const osmosisGetAddress = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'osmosis_getAddress',
            params: { addressParams },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'osmosisGetAddress' }, `osmosis_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.osmosisGetAddress = osmosisGetAddress;
const osmosisSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'osmosis_signTransaction',
            params: { transaction },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'osmosisSignTransaction' }, `osmosis_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.osmosisSignTransaction = osmosisSignTransaction;
const osmosisBroadcastTransaction = async (params) => {
    const { transaction, baseUrl, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'osmosis_broadcastTransaction',
            params: { transaction, baseUrl },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'OsmosisBroadcastTransaction' }, `osmosis_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.osmosisBroadcastTransaction = osmosisBroadcastTransaction;
//# sourceMappingURL=osmosis.js.map