"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.binanceBroadcastTransaction = exports.binanceSignTransaction = exports.binanceGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Binance.ts'] });
const binanceGetAddress = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'binance_getAddress',
            params: { addressParams },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'binanceGetAddress' }, `binance_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.binanceGetAddress = binanceGetAddress;
const binanceSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'binance_signTransaction',
            params: { transaction },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'binanceSignTransaction' }, `binance_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.binanceSignTransaction = binanceSignTransaction;
const binanceBroadcastTransaction = async (params) => {
    try {
        const { transaction, baseUrl, snapId } = params;
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'binance_broadcastTransaction',
            params: { transaction, baseUrl },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'binanceBroadcastTransaction' }, `binance_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.binanceBroadcastTransaction = binanceBroadcastTransaction;
//# sourceMappingURL=binance.js.map