"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendFlaskRPCRequest = exports.enableShapeShiftSnap = exports.isLocked = exports.shapeShiftSnapInstalled = exports.getMetaMaskProvider = void 0;
const detect_provider_1 = __importDefault(require("@metamask/detect-provider"));
const assert_1 = __importDefault(require("assert"));
const p_queue_1 = __importDefault(require("p-queue"));
const logger_1 = require("./lib/logger");
const metamask_1 = require("./metamask/metamask");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Utils.ts'] });
const getMetaMaskProvider = async () => {
    try {
        const provider = await (0, detect_provider_1.default)({ mustBeMetaMask: true });
        if (provider === undefined) {
            throw new Error('Could not get MetaMask provider');
        }
        if (provider.request === undefined) {
            throw new Error('MetaMask provider does not define a .request() method');
        }
        return provider;
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'getMetaMaskProvider' }, 'Please install MetaMask browser extension.');
    }
    return undefined;
};
exports.getMetaMaskProvider = getMetaMaskProvider;
const shapeShiftSnapInstalled = async (snapId) => {
    try {
        const provider = await (0, exports.getMetaMaskProvider)();
        if (provider === undefined) {
            throw new Error('Could not get MetaMask provider');
        }
        if (provider.request === undefined) {
            throw new Error('MetaMask provider does not define a .request() method');
        }
        const ret = await provider.request({
            method: 'wallet_getSnaps',
        });
        /* Requested snap not found in registry */
        if (!ret[snapId]) {
            return false;
        }
        /* Errors occurred during the previous snap installation */
        if (ret[snapId].error) {
            return false;
        }
        return true;
    }
    catch (error) {
        moduleLogger.error({ fn: 'shapeshiftSnapInstalled' }, error);
        return false;
    }
};
exports.shapeShiftSnapInstalled = shapeShiftSnapInstalled;
const isLocked = async () => {
    try {
        const provider = (await (0, exports.getMetaMaskProvider)());
        return !provider._metamask.isUnlocked();
    }
    catch (error) {
        moduleLogger.error({ fn: 'isLocked' }, error);
        return false;
    }
};
exports.isLocked = isLocked;
// export const shapeShiftSnapDisabled = async (snapId: string): Promise<boolean> => {
//   try {
//     const ret = await sendFlaskRPCRequest({method: 'ping', params: null}, snapId )
//     if (ret instanceof JsonRpcError && ret.code && ret.code === -32603){
//     }
//   } catch (error) {
//   }
// }
/**
 * Prompt the user to allow the snap
 */
const enableShapeShiftSnap = async (snapId, version) => {
    var _a;
    const ret = {
        success: false,
        message: {
            accounts: [],
            permissions: [],
            snaps: null,
            errors: undefined,
        },
    };
    try {
        const snapIsInstalled = await (0, exports.shapeShiftSnapInstalled)(snapId);
        if (!snapIsInstalled) {
            const res = await (0, metamask_1.walletRequestSnaps)(snapId, version);
            (0, assert_1.default)(((_a = res.errors) === null || _a === void 0 ? void 0 : _a.length) === 0, JSON.stringify(res.errors, null, 2));
            ret.success = true;
            ret.message = res;
        }
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'enableShapeShiftSnap' }, 'walletRequestSnaps RPC call failed.');
    }
    return ret;
};
exports.enableShapeShiftSnap = enableShapeShiftSnap;
// Flask only supports a max. of 5 queued requests, so this ensures we're under that
// by limiting to 5 concurrent snap JSON-RPC request in a 40ms window
const flaskRpcRequestsQueue = new p_queue_1.default({ concurrency: 5, interval: 40 });
const sendFlaskRPCRequest = async (request, snapId) => {
    try {
        const provider = await (0, exports.getMetaMaskProvider)();
        if (provider === undefined) {
            throw new Error('Could not get MetaMask provider');
        }
        if (provider.request === undefined) {
            throw new Error('MetaMask provider does not define a .request() method');
        }
        const ret = await flaskRpcRequestsQueue.add(() => {
            var _a;
            return (_a = provider.request) === null || _a === void 0 ? void 0 : _a.call(provider, {
                method: 'wallet_invokeSnap',
                params: {
                    snapId,
                    request,
                },
            });
        });
        return ret;
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'sendFlaskRPCRequest' }, `${request.method} RPC call failed.`);
        return error;
    }
};
exports.sendFlaskRPCRequest = sendFlaskRPCRequest;
//# sourceMappingURL=utils.js.map