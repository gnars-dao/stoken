"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ETHSendTransaction = exports.ETHSignMessage = exports.ETHGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Ethereum.ts'] });
const ETHGetAddress = async (params) => {
    const { addressParams, chainId, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'eth_getAddress',
            params: { addressParams, chainId },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'ETHGetAddress' }, `eth_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.ETHGetAddress = ETHGetAddress;
const ETHSignMessage = async (params) => {
    const { message, chainId, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'eth_signMessage',
            params: { message, chainId },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'ETHSignMessage' }, `eth_signMessage RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.ETHSignMessage = ETHSignMessage;
const ETHSendTransaction = async (params) => {
    try {
        const { transaction, chainId, snapId } = params;
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'eth_sendTransaction',
            params: { transaction, chainId },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'ETHSendTransaction' }, `eth_sendTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.ETHSendTransaction = ETHSendTransaction;
//# sourceMappingURL=ethereum.js.map