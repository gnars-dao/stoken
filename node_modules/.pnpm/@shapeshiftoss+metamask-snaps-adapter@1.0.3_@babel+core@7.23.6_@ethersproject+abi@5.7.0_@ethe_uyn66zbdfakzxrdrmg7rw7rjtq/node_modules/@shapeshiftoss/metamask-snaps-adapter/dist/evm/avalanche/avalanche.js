"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.AVAXSendTransaction = exports.AVAXSignMessage = exports.AVAXGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Avalanche.ts'] });
const AVAXGetAddress = async (params) => {
    const { addressParams, chainId, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'avax_getAddress',
            params: { addressParams, chainId },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'AVAXGetAddress' }, `avax_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.AVAXGetAddress = AVAXGetAddress;
const AVAXSignMessage = async (params) => {
    const { message, chainId, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'avax_signMessage',
            params: { message, chainId },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'AVAXSignMessage' }, `avax_signMessage RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.AVAXSignMessage = AVAXSignMessage;
const AVAXSendTransaction = async (params) => {
    try {
        const { transaction, chainId, snapId } = params;
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'avax_sendTransaction',
            params: { transaction, chainId },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'AVAXSendTransaction' }, `avax_sendTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.AVAXSendTransaction = AVAXSendTransaction;
//# sourceMappingURL=avalanche.js.map