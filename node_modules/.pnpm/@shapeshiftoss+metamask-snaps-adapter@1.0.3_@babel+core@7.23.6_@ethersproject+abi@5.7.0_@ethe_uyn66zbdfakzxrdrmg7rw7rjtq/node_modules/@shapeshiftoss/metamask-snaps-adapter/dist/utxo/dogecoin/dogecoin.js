"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.dogecoinBroadcastTransaction = exports.dogecoinSignTransaction = exports.dogecoinGetPublicKeys = exports.dogecoinGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Dogecoin.ts'] });
const dogecoinGetAddress = async (params) => {
    try {
        const { addressParams, snapId } = params;
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'doge_getAddress',
            params: { addressParams },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'DogeGetAddress' }, `doge_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.dogecoinGetAddress = dogecoinGetAddress;
const dogecoinGetPublicKeys = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({ method: 'doge_getPublicKeys', params: { addressParams } }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'dogecoinGetPublicKeys' }, `doge_getPublicKeys RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.dogecoinGetPublicKeys = dogecoinGetPublicKeys;
const dogecoinSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'doge_signTransaction',
            params: { transaction },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'DogeSignTransaction' }, `doge_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.dogecoinSignTransaction = dogecoinSignTransaction;
const dogecoinBroadcastTransaction = async (params) => {
    const { transaction, baseUrl, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'doge_broadcastTransaction',
            params: { transaction, baseUrl },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'DogeBroadcastTransaction' }, `doge_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.dogecoinBroadcastTransaction = dogecoinBroadcastTransaction;
//# sourceMappingURL=dogecoin.js.map