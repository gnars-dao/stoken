"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BTCBroadcastTransaction = exports.BTCSignTransaction = exports.BTCGetPublicKeys = exports.BTCGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Bitcoin.ts'] });
const BTCGetAddress = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({ method: 'btc_getAddress', params: { addressParams } }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'BTCGetAddress' }, `btc_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.BTCGetAddress = BTCGetAddress;
const BTCGetPublicKeys = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({ method: 'btc_getPublicKeys', params: { addressParams } }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'BTCGetPublicKeys' }, `btc_getPublicKeys RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.BTCGetPublicKeys = BTCGetPublicKeys;
const BTCSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({ method: 'btc_signTransaction', params: { transaction } }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'BTCSignTransaction' }, `btc_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.BTCSignTransaction = BTCSignTransaction;
const BTCBroadcastTransaction = async (params) => {
    const { transaction, baseUrl, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({ method: 'btc_broadcastTransaction', params: { transaction, baseUrl } }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'BTCBroadcastTransaction' }, `bitcoin_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.BTCBroadcastTransaction = BTCBroadcastTransaction;
//# sourceMappingURL=bitcoin.js.map