"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BCHBroadcastTransaction = exports.BCHSignTransaction = exports.BCHGetPublicKeys = exports.BCHGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({
    namespace: ['Adapter', 'BitcoinCash.ts'],
});
const BCHGetAddress = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'bch_getAddress',
            params: { addressParams },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'BCHGetAddress' }, `bch_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.BCHGetAddress = BCHGetAddress;
const BCHGetPublicKeys = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({ method: 'bch_getPublicKeys', params: { addressParams } }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'BCHGetPublicKeys' }, `bch_getPublicKeys RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.BCHGetPublicKeys = BCHGetPublicKeys;
const BCHSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'bch_signTransaction',
            params: { transaction },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'BCHSignTransaction' }, `bch_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.BCHSignTransaction = BCHSignTransaction;
const BCHBroadcastTransaction = async (params) => {
    const { transaction, baseUrl, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'bch_broadcastTransaction',
            params: { transaction, baseUrl },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'BCHBroadcastTransaction' }, `bch_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.BCHBroadcastTransaction = BCHBroadcastTransaction;
//# sourceMappingURL=bitcoincash.js.map