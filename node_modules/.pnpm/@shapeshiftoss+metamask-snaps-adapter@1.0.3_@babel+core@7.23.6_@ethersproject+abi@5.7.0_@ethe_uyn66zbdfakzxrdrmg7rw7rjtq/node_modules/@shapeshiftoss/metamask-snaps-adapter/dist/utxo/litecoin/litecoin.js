"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LTCBroadcastTransaction = exports.LTCSignTransaction = exports.LTCGetPublicKeys = exports.LTCGetAddress = void 0;
const logger_1 = require("../../lib/logger");
const utils_1 = require("../../utils");
const moduleLogger = logger_1.logger.child({ namespace: ['Adapter', 'Litecoin.ts'] });
const LTCGetAddress = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'ltc_getAddress',
            params: { addressParams },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'LTCGetAddress' }, `ltc_getAddress RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.LTCGetAddress = LTCGetAddress;
const LTCGetPublicKeys = async (params) => {
    const { addressParams, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({ method: 'ltc_getPublicKeys', params: { addressParams } }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'LTCGetPublicKeys' }, `ltc_getPublicKeys RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.LTCGetPublicKeys = LTCGetPublicKeys;
const LTCSignTransaction = async (params) => {
    const { transaction, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'ltc_signTransaction',
            params: { transaction },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'LTCSignTransaction' }, `ltc_signTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.LTCSignTransaction = LTCSignTransaction;
const LTCBroadcastTransaction = async (params) => {
    const { transaction, baseUrl, snapId } = params;
    try {
        return await (0, utils_1.sendFlaskRPCRequest)({
            method: 'ltc_broadcastTransaction',
            params: { transaction, baseUrl },
        }, snapId);
    }
    catch (error) {
        moduleLogger.error(error, { fn: 'LTCBroadcastTransaction' }, `litecoin_broadcastTransaction RPC call failed.`);
        return Promise.reject(error);
    }
};
exports.LTCBroadcastTransaction = LTCBroadcastTransaction;
//# sourceMappingURL=litecoin.js.map