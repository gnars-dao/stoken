"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNumeric = exports.isOsmosisLpAsset = exports.parseData = exports.parseOsmosisData = exports.fetchData = exports.writeFiles = void 0;
const axios_1 = __importDefault(require("axios"));
const fs_1 = __importDefault(require("fs"));
const assetId_1 = require("../../assetId/assetId");
const chainId_1 = require("../../chainId/chainId");
const constants_1 = require("../../constants");
const writeFiles = async (data) => {
    const path = './src/adapters/osmosis/generated/';
    const file = '/adapter.json';
    const writeFile = async ([k, v]) => await fs_1.default.promises.writeFile(`${path}${k}${file}`.replace(':', '_'), JSON.stringify(v));
    await Promise.all(Object.entries(data).map(writeFile));
    console.info('Generated Osmosis AssetId adapter data.');
};
exports.writeFiles = writeFiles;
const fetchData = async ({ tokensUrl, lpTokensUrl, }) => {
    const tokens = (await axios_1.default.get(tokensUrl)).data;
    const lpTokenData = (await axios_1.default.get(lpTokensUrl)).data;
    const lpTokens = Object.entries(lpTokenData).reduce((acc, current) => {
        if (!current)
            return acc;
        const [poolId, tokenPair] = current;
        const coin = {
            price: 0,
            denom: `gamm/pool/${poolId}`,
            symbol: `gamm/pool/${poolId}`,
            liquidity: tokenPair[0].liquidity,
            liquidity_24h_change: tokenPair[0].liquidity_24h_change,
            volume_24h: tokenPair[0].volume_24h,
            volume_24h_change: tokenPair[0].volume_24h_change,
            name: `Osmosis ${tokenPair[0].symbol}/${tokenPair[1].symbol} LP Token`,
            price_24h_change: 0,
        };
        acc.push(coin);
        return acc;
    }, []);
    return [...lpTokens, ...tokens];
};
exports.fetchData = fetchData;
const parseOsmosisData = (data) => {
    const results = data.reduce((acc, { denom, symbol }) => {
        // denoms for non native assets are formatted like so: 'ibc/27394...'
        const isNativeAsset = !denom.split('/')[1];
        const isLpToken = denom.startsWith('gamm/pool/');
        const isOsmo = denom === 'uosmo';
        let assetNamespace;
        let assetReference;
        if (isNativeAsset) {
            assetReference = isOsmo ? constants_1.ASSET_REFERENCE.Osmosis : denom;
            assetNamespace = isOsmo ? 'slip44' : 'native';
        }
        else {
            assetReference = isLpToken ? denom : denom.split('/')[1];
            assetNamespace = 'ibc';
        }
        const chainNamespace = constants_1.CHAIN_NAMESPACE.CosmosSdk;
        const chainReference = constants_1.CHAIN_REFERENCE.OsmosisMainnet;
        const assetId = (0, assetId_1.toAssetId)({ chainNamespace, chainReference, assetNamespace, assetReference });
        acc[assetId] = symbol;
        return acc;
    }, {});
    return results;
};
exports.parseOsmosisData = parseOsmosisData;
const parseData = (d) => {
    const osmosisMainnet = (0, chainId_1.toChainId)({
        chainNamespace: constants_1.CHAIN_NAMESPACE.CosmosSdk,
        chainReference: constants_1.CHAIN_REFERENCE.OsmosisMainnet,
    });
    return {
        [osmosisMainnet]: (0, exports.parseOsmosisData)(d),
    };
};
exports.parseData = parseData;
const isOsmosisLpAsset = (assetReference) => {
    return assetReference.startsWith('gamm/pool/');
};
exports.isOsmosisLpAsset = isOsmosisLpAsset;
const isNumeric = (s) => {
    if (typeof s !== 'string')
        return false;
    if (s.trim() === '')
        return false;
    return !Number.isNaN(Number(s));
};
exports.isNumeric = isNumeric;
