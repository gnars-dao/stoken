"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.osmosisLpAssetIdToPoolId = exports.assetIdToOsmosis = exports.osmosisToAssetId = exports.osmosisGetLpTokensUrl = exports.osmosisGetTokensUrl = void 0;
const assetId_1 = require("../../assetId/assetId");
const adapters = __importStar(require("./generated"));
const utils_1 = require("./utils");
exports.osmosisGetTokensUrl = 'https://api-osmosis.imperator.co/tokens/v2/all';
exports.osmosisGetLpTokensUrl = 'https://api-osmosis.imperator.co/pools/v2/all?low_liquidity=true';
const generatedAssetIdToOsmosisMap = Object.values(adapters).reduce((acc, cur) => ({
    ...acc,
    ...cur,
}));
const invert = (data) => Object.entries(data).reduce((acc, [k, v]) => ((acc[v] = k), acc), {});
const generatedOsmosisToAssetIdMap = invert(generatedAssetIdToOsmosisMap);
const osmosisToAssetId = (id) => generatedOsmosisToAssetIdMap[id];
exports.osmosisToAssetId = osmosisToAssetId;
const assetIdToOsmosis = (assetId) => generatedAssetIdToOsmosisMap[assetId];
exports.assetIdToOsmosis = assetIdToOsmosis;
const osmosisLpAssetIdToPoolId = (lpAssetId) => {
    const { assetReference } = (0, assetId_1.fromAssetId)(lpAssetId);
    if (!(0, utils_1.isOsmosisLpAsset)(assetReference))
        return undefined;
    const segments = assetReference.split('/');
    if (segments.length !== 3)
        return undefined;
    const poolId = segments[2];
    if (!(0, utils_1.isNumeric)(poolId))
        return undefined;
    return poolId;
};
exports.osmosisLpAssetIdToPoolId = osmosisLpAssetIdToPoolId;
