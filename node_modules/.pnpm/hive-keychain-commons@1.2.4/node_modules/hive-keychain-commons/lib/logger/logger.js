"use strict";
/* eslint-disable */
/* istanbul ignore file */
Object.defineProperty(exports, "__esModule", { value: true });
const winston = require("winston");
const transports_1 = require("./transports");
let winstonLogger;
let environment;
const initLogger = (config, env) => {
    transports_1.LoggerTransports.initTransport(config);
    const transports = [transports_1.LoggerTransports.getConsoleTransport()];
    if (config.file && config.folder) {
        transports.push(transports_1.LoggerTransports.getFileRotationTransport());
    }
    environment = env;
    winstonLogger = winston.createLogger({
        levels: config.levels,
        level: 'DEBUG',
        transports,
    });
};
const info = (message) => {
    if (environment === 'TEST')
        return;
    winstonLogger.log('INFO', message);
};
const debug = (message) => {
    if (environment === 'TEST')
        return;
    if (environment === 'DEBUG') {
        winstonLogger.log('DEBUG', message);
    }
};
const operation = (message) => {
    if (environment === 'TEST')
        return;
    winstonLogger.log('OPERATION', message);
};
const warn = (message) => {
    if (environment === 'TEST')
        return;
    winstonLogger.log('WARN', message);
};
const technical = (message) => {
    if (environment === 'TEST')
        return;
    winstonLogger.log('TECHNICAL', message);
};
const error = (message, stacktrace) => {
    if (environment === 'TEST')
        return;
    winstonLogger.log('ERROR', `${message}`);
    if (stacktrace)
        winstonLogger.log('ERROR', stacktrace.message + '\r\n' + stacktrace.stack);
};
const Logger = { info, warn, error, technical, operation, debug, initLogger };
exports.default = Logger;
