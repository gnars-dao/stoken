export declare class SDK {
    events: any;
    masters: any;
    balances: any[];
    ibcChannels: any[];
    paymentStreams: any[];
    wallets: any[];
    wallet: any;
    nfts: any[];
    totalValueUsd: number;
    markets: any;
    availableInputs: any;
    availableOutputs: any;
    contexts: any;
    status: string;
    apiVersion: string;
    initialized: boolean;
    invocations: any;
    assetContext: any;
    blockchainContext: any;
    invoke: any;
    wss: any;
    username: any;
    queryKey: any;
    spec: any;
    paths: any;
    pubkeys: any;
    pioneer: any;
    blockchains: any;
    txBuilder: any;
    user: any;
    rango: any;
    rangoApiKey: string;
    isPaired: boolean;
    isConnected: boolean;
    context: string;
    init: () => Promise<any>;
    refresh: () => Promise<any>;
    pairWallet: (wallet: any) => Promise<any>;
    setBlockchainContext: (blockchain: string) => Promise<any>;
    setAssetContext: (blockchain: string) => Promise<any>;
    private setPubkeyContext;
    startSocket: () => Promise<any>;
    stopSocket: () => any;
    updateContext: () => Promise<any>;
    getPubkey: (asset: string, sync?: boolean) => Promise<any>;
    getPubkeys: (wallet: any) => Promise<any>;
    getAddress: (asset: string) => Promise<any>;
    getBalance: (asset: string, sync: boolean) => Promise<any[]>;
    sendToAddress: (tx: any) => Promise<any>;
    swapQuote: (tx: any) => Promise<any>;
    buildSwap: (invocationId: string, swap: any) => Promise<any>;
    lpQuote: (tx: any) => Promise<any>;
    buildLp: (tx: any) => Promise<any>;
    defi: (tx: any) => Promise<any>;
    build: (tx: any) => Promise<any>;
    sign: (tx: any, wallet: any) => Promise<any>;
    ethSignMessage: ((msg: any, path: any, wallet: any) => Promise<any>) | undefined;
    broadcast: (tx: any) => Promise<any>;
    updateInvocation: (tx: any) => Promise<any>;
    deleteInvocation: (invocationId: string) => Promise<any>;
    getInvocation: (invocationId: string) => Promise<any>;
    getInvocations: () => Promise<any>;
    isSynced: boolean;
    publicAddress: string;
    setContext: (wallet: any) => Promise<{
        success: boolean;
    } | {
        success: boolean;
        error: string;
    }>;
    private disconnectWallet;
    private pubkeyContext;
    private getContextStringForWallet;
    constructor(spec: string, config: any);
}
export default SDK;
