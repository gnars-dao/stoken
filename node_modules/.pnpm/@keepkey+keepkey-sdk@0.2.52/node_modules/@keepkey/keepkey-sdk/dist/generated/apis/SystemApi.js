"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * keepkey-sdk-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SystemApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class SystemApi extends runtime.BaseAPI {
    /**
     * Enable or disable certain device configuration values
     * Apply policies
     */
    async applyPoliciesRaw(requestParameters, initOverrides) {
        if (requestParameters.TypesPolicy === null || requestParameters.TypesPolicy === undefined) {
            throw new runtime.RequiredError('TypesPolicy', 'Required parameter requestParameters.TypesPolicy was null or undefined when calling applyPolicies.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/apply-policies`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.TypesPolicy.map(models_1.TypesPolicyToJSON),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Enable or disable certain device configuration values
     * Apply policies
     */
    async applyPolicies(TypesPolicy, initOverrides) {
        await this.applyPoliciesRaw({ TypesPolicy: TypesPolicy }, initOverrides);
    }
    /**
     * Change device configuration
     * Apply settings
     */
    async applySettingsRaw(requestParameters, initOverrides) {
        if (requestParameters.ApplySettingsRequest === null || requestParameters.ApplySettingsRequest === undefined) {
            throw new runtime.RequiredError('ApplySettingsRequest', 'Required parameter requestParameters.ApplySettingsRequest was null or undefined when calling applySettings.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/apply-settings`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ApplySettingsRequestToJSON)(requestParameters.ApplySettingsRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Change device configuration
     * Apply settings
     */
    async applySettings(ApplySettingsRequest, initOverrides) {
        await this.applySettingsRaw({ ApplySettingsRequest: ApplySettingsRequest }, initOverrides);
    }
    /**
     * Change or remove the device\'s PIN
     */
    async changePinRaw(requestParameters, initOverrides) {
        if (requestParameters.ChangePinRequest === null || requestParameters.ChangePinRequest === undefined) {
            throw new runtime.RequiredError('ChangePinRequest', 'Required parameter requestParameters.ChangePinRequest was null or undefined when calling changePin.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/change-pin`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangePinRequestToJSON)(requestParameters.ChangePinRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Change or remove the device\'s PIN
     */
    async changePin(ChangePinRequest, initOverrides) {
        await this.changePinRaw({ ChangePinRequest: ChangePinRequest }, initOverrides);
    }
    /**
     * Change or remove the device\'s wipe code
     */
    async changeWipeCodeRaw(requestParameters, initOverrides) {
        if (requestParameters.ChangePinRequest === null || requestParameters.ChangePinRequest === undefined) {
            throw new runtime.RequiredError('ChangePinRequest', 'Required parameter requestParameters.ChangePinRequest was null or undefined when calling changeWipeCode.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/change-wipe-code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.ChangePinRequestToJSON)(requestParameters.ChangePinRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Change or remove the device\'s wipe code
     */
    async changeWipeCode(ChangePinRequest, initOverrides) {
        await this.changeWipeCodeRaw({ ChangePinRequest: ChangePinRequest }, initOverrides);
    }
    /**
     * Encrypt or decrypt a key and associated block of data, possibly with an on-device verification step
     * Encrypt or decrypt a key/value pair
     */
    async cipherKeyValueRaw(requestParameters, initOverrides) {
        if (requestParameters.CipherKeyValueRequest === null || requestParameters.CipherKeyValueRequest === undefined) {
            throw new runtime.RequiredError('CipherKeyValueRequest', 'Required parameter requestParameters.CipherKeyValueRequest was null or undefined when calling cipherKeyValue.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/cipher-key-value`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CipherKeyValueRequestToJSON)(requestParameters.CipherKeyValueRequest),
        }, initOverrides);
        return new runtime.BlobApiResponse(response);
    }
    /**
     * Encrypt or decrypt a key and associated block of data, possibly with an on-device verification step
     * Encrypt or decrypt a key/value pair
     */
    async cipherKeyValue(CipherKeyValueRequest, initOverrides) {
        const response = await this.cipherKeyValueRaw({ CipherKeyValueRequest: CipherKeyValueRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Causes the device to forget any cached PIN or passphrase. (Does not end the API session.)
     * Lock the device
     */
    async clearSessionRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/clear-session`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Causes the device to forget any cached PIN or passphrase. (Does not end the API session.)
     * Lock the device
     */
    async clearSession(initOverrides) {
        await this.clearSessionRaw(initOverrides);
    }
    /**
     * Updates the device\'s firmware
     * Firmware update
     */
    async firmwareUpdateRaw(requestParameters, initOverrides) {
        if (requestParameters.body === null || requestParameters.body === undefined) {
            throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling firmwareUpdate.');
        }
        const queryParameters = {};
        if (requestParameters.skipErase !== undefined) {
            queryParameters['skipErase'] = requestParameters.skipErase;
        }
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/octet-stream';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/firmware-update`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Updates the device\'s firmware
     * Firmware update
     */
    async firmwareUpdate(body, skipErase, initOverrides) {
        await this.firmwareUpdateRaw({ body: body, skipErase: skipErase }, initOverrides);
    }
    /**
     * Sign an identity challenge
     */
    async signIdentityRaw(requestParameters, initOverrides) {
        if (requestParameters.SignIdentityRequest === null || requestParameters.SignIdentityRequest === undefined) {
            throw new runtime.RequiredError('SignIdentityRequest', 'Required parameter requestParameters.SignIdentityRequest was null or undefined when calling signIdentity.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/sign-identity`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.SignIdentityRequestToJSON)(requestParameters.SignIdentityRequest),
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Sign an identity challenge
     */
    async signIdentity(SignIdentityRequest, initOverrides) {
        await this.signIdentityRaw({ SignIdentityRequest: SignIdentityRequest }, initOverrides);
    }
    /**
     * Wipe keys and reset device
     */
    async wipeDeviceRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/wipe-device`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * Wipe keys and reset device
     */
    async wipeDevice(initOverrides) {
        await this.wipeDeviceRaw(initOverrides);
    }
}
exports.SystemApi = SystemApi;
