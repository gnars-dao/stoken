"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * keepkey-sdk-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManufacturingApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class ManufacturingApi extends runtime.BaseAPI {
    /**
     * On devices with manufacturing firmware, gets the Keccak-256 hash of a section of flash memory.
     * Hash flash memory
     */
    async flashHashRaw(requestParameters, initOverrides) {
        if (requestParameters.FlashHashRequest === null || requestParameters.FlashHashRequest === undefined) {
            throw new runtime.RequiredError('FlashHashRequest', 'Required parameter requestParameters.FlashHashRequest was null or undefined when calling flashHash.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/manufacturing/flash-hash`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.FlashHashRequestToJSON)(requestParameters.FlashHashRequest),
        }, initOverrides);
        return new runtime.TextApiResponse(response);
    }
    /**
     * On devices with manufacturing firmware, gets the Keccak-256 hash of a section of flash memory.
     * Hash flash memory
     */
    async flashHash(FlashHashRequest, initOverrides) {
        const response = await this.flashHashRaw({ FlashHashRequest: FlashHashRequest }, initOverrides);
        return await response.value();
    }
    /**
     * On devices with manufacturing firmware, writes a payload to flash memory and returns the resulting Keccak-256 hash.
     * Write flash memory
     */
    async flashWriteRaw(requestParameters, initOverrides) {
        if (requestParameters.FlashWriteRequest === null || requestParameters.FlashWriteRequest === undefined) {
            throw new runtime.RequiredError('FlashWriteRequest', 'Required parameter requestParameters.FlashWriteRequest was null or undefined when calling flashWrite.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/manufacturing/flash-write`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.FlashWriteRequestToJSON)(requestParameters.FlashWriteRequest),
        }, initOverrides);
        return new runtime.TextApiResponse(response);
    }
    /**
     * On devices with manufacturing firmware, writes a payload to flash memory and returns the resulting Keccak-256 hash.
     * Write flash memory
     */
    async flashWrite(FlashWriteRequest, initOverrides) {
        const response = await this.flashWriteRaw({ FlashWriteRequest: FlashWriteRequest }, initOverrides);
        return await response.value();
    }
    /**
     * On devices with manufacturing firmware, triggers a soft reset.
     * Soft reset
     */
    async softResetRaw(initOverrides) {
        const queryParameters = {};
        const headerParameters = {};
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/system/manufacturing/soft-reset`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);
        return new runtime.VoidApiResponse(response);
    }
    /**
     * On devices with manufacturing firmware, triggers a soft reset.
     * Soft reset
     */
    async softReset(initOverrides) {
        await this.softResetRaw(initOverrides);
    }
}
exports.ManufacturingApi = ManufacturingApi;
