"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * keepkey-sdk-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OsmosisApi = void 0;
const runtime = __importStar(require("../runtime"));
const models_1 = require("../models");
/**
 *
 */
class OsmosisApi extends runtime.BaseAPI {
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoDelegateRaw(requestParameters, initOverrides) {
        if (requestParameters.CosmosSignAminoDelegateRequest === null || requestParameters.CosmosSignAminoDelegateRequest === undefined) {
            throw new runtime.RequiredError('CosmosSignAminoDelegateRequest', 'Required parameter requestParameters.CosmosSignAminoDelegateRequest was null or undefined when calling osmoSignAminoDelegate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/osmosis/sign-amino-delegate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CosmosSignAminoDelegateRequestToJSON)(requestParameters.CosmosSignAminoDelegateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CosmosSignAminoDelegate200ResponseFromJSON)(jsonValue));
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoDelegate(CosmosSignAminoDelegateRequest, initOverrides) {
        const response = await this.osmoSignAminoDelegateRaw({ CosmosSignAminoDelegateRequest: CosmosSignAminoDelegateRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoIbcTransferRaw(requestParameters, initOverrides) {
        if (requestParameters.CosmosSignAminoIbcTransferRequest === null || requestParameters.CosmosSignAminoIbcTransferRequest === undefined) {
            throw new runtime.RequiredError('CosmosSignAminoIbcTransferRequest', 'Required parameter requestParameters.CosmosSignAminoIbcTransferRequest was null or undefined when calling osmoSignAminoIbcTransfer.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/osmosis/sign-amino-ibc-transfer`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CosmosSignAminoIbcTransferRequestToJSON)(requestParameters.CosmosSignAminoIbcTransferRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CosmosSignAminoIbcTransfer200ResponseFromJSON)(jsonValue));
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoIbcTransfer(CosmosSignAminoIbcTransferRequest, initOverrides) {
        const response = await this.osmoSignAminoIbcTransferRaw({ CosmosSignAminoIbcTransferRequest: CosmosSignAminoIbcTransferRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoLpAddRaw(requestParameters, initOverrides) {
        if (requestParameters.OsmoSignAminoLpAddRequest === null || requestParameters.OsmoSignAminoLpAddRequest === undefined) {
            throw new runtime.RequiredError('OsmoSignAminoLpAddRequest', 'Required parameter requestParameters.OsmoSignAminoLpAddRequest was null or undefined when calling osmoSignAminoLpAdd.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/osmosis/sign-amino-lp-add`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.OsmoSignAminoLpAddRequestToJSON)(requestParameters.OsmoSignAminoLpAddRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OsmoSignAminoLpAdd200ResponseFromJSON)(jsonValue));
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoLpAdd(OsmoSignAminoLpAddRequest, initOverrides) {
        const response = await this.osmoSignAminoLpAddRaw({ OsmoSignAminoLpAddRequest: OsmoSignAminoLpAddRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoLpRemoveRaw(requestParameters, initOverrides) {
        if (requestParameters.OsmoSignAminoLpRemoveRequest === null || requestParameters.OsmoSignAminoLpRemoveRequest === undefined) {
            throw new runtime.RequiredError('OsmoSignAminoLpRemoveRequest', 'Required parameter requestParameters.OsmoSignAminoLpRemoveRequest was null or undefined when calling osmoSignAminoLpRemove.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/osmosis/sign-amino-lp-remove`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.OsmoSignAminoLpRemoveRequestToJSON)(requestParameters.OsmoSignAminoLpRemoveRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OsmoSignAminoLpRemove200ResponseFromJSON)(jsonValue));
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoLpRemove(OsmoSignAminoLpRemoveRequest, initOverrides) {
        const response = await this.osmoSignAminoLpRemoveRaw({ OsmoSignAminoLpRemoveRequest: OsmoSignAminoLpRemoveRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoRedelegateRaw(requestParameters, initOverrides) {
        if (requestParameters.CosmosSignAminoRedelegateRequest === null || requestParameters.CosmosSignAminoRedelegateRequest === undefined) {
            throw new runtime.RequiredError('CosmosSignAminoRedelegateRequest', 'Required parameter requestParameters.CosmosSignAminoRedelegateRequest was null or undefined when calling osmoSignAminoRedelegate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/osmosis/sign-amino-redelegate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CosmosSignAminoRedelegateRequestToJSON)(requestParameters.CosmosSignAminoRedelegateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CosmosSignAminoRedelegate200ResponseFromJSON)(jsonValue));
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoRedelegate(CosmosSignAminoRedelegateRequest, initOverrides) {
        const response = await this.osmoSignAminoRedelegateRaw({ CosmosSignAminoRedelegateRequest: CosmosSignAminoRedelegateRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoSwapRaw(requestParameters, initOverrides) {
        if (requestParameters.OsmoSignAminoSwapRequest === null || requestParameters.OsmoSignAminoSwapRequest === undefined) {
            throw new runtime.RequiredError('OsmoSignAminoSwapRequest', 'Required parameter requestParameters.OsmoSignAminoSwapRequest was null or undefined when calling osmoSignAminoSwap.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/osmosis/sign-amino-swap`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.OsmoSignAminoSwapRequestToJSON)(requestParameters.OsmoSignAminoSwapRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.OsmoSignAminoSwap200ResponseFromJSON)(jsonValue));
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoSwap(OsmoSignAminoSwapRequest, initOverrides) {
        const response = await this.osmoSignAminoSwapRaw({ OsmoSignAminoSwapRequest: OsmoSignAminoSwapRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoUndelegateRaw(requestParameters, initOverrides) {
        if (requestParameters.CosmosSignAminoUndelegateRequest === null || requestParameters.CosmosSignAminoUndelegateRequest === undefined) {
            throw new runtime.RequiredError('CosmosSignAminoUndelegateRequest', 'Required parameter requestParameters.CosmosSignAminoUndelegateRequest was null or undefined when calling osmoSignAminoUndelegate.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/osmosis/sign-amino-undelegate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CosmosSignAminoUndelegateRequestToJSON)(requestParameters.CosmosSignAminoUndelegateRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CosmosSignAminoUndelegate200ResponseFromJSON)(jsonValue));
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoUndelegate(CosmosSignAminoUndelegateRequest, initOverrides) {
        const response = await this.osmoSignAminoUndelegateRaw({ CosmosSignAminoUndelegateRequest: CosmosSignAminoUndelegateRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoWithdrawDelegatorRewardsAllRaw(requestParameters, initOverrides) {
        if (requestParameters.CosmosSignAminoWithdrawDelegatorRewardsAllRequest === null || requestParameters.CosmosSignAminoWithdrawDelegatorRewardsAllRequest === undefined) {
            throw new runtime.RequiredError('CosmosSignAminoWithdrawDelegatorRewardsAllRequest', 'Required parameter requestParameters.CosmosSignAminoWithdrawDelegatorRewardsAllRequest was null or undefined when calling osmoSignAminoWithdrawDelegatorRewardsAll.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/osmosis/sign-amino-withdraw-delegator-rewards-all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CosmosSignAminoWithdrawDelegatorRewardsAllRequestToJSON)(requestParameters.CosmosSignAminoWithdrawDelegatorRewardsAllRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CosmosSignAminoWithdrawDelegatorRewardsAll200ResponseFromJSON)(jsonValue));
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmoSignAminoWithdrawDelegatorRewardsAll(CosmosSignAminoWithdrawDelegatorRewardsAllRequest, initOverrides) {
        const response = await this.osmoSignAminoWithdrawDelegatorRewardsAllRaw({ CosmosSignAminoWithdrawDelegatorRewardsAllRequest: CosmosSignAminoWithdrawDelegatorRewardsAllRequest }, initOverrides);
        return await response.value();
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmosisSignAminoRaw(requestParameters, initOverrides) {
        if (requestParameters.CosmosSignAminoRequest === null || requestParameters.CosmosSignAminoRequest === undefined) {
            throw new runtime.RequiredError('CosmosSignAminoRequest', 'Required parameter requestParameters.CosmosSignAminoRequest was null or undefined when calling osmosisSignAmino.');
        }
        const queryParameters = {};
        const headerParameters = {};
        headerParameters['Content-Type'] = 'application/json';
        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("apiKey", []);
            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/osmosis/sign-amino`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: (0, models_1.CosmosSignAminoRequestToJSON)(requestParameters.CosmosSignAminoRequest),
        }, initOverrides);
        return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CosmosSignAmino200ResponseFromJSON)(jsonValue));
    }
    /**
     * Sign a Cosmos SDK transaction using SIGN_MODE_AMINO_JSON
     */
    async osmosisSignAmino(CosmosSignAminoRequest, initOverrides) {
        const response = await this.osmosisSignAminoRaw({ CosmosSignAminoRequest: CosmosSignAminoRequest }, initOverrides);
        return await response.value();
    }
}
exports.OsmosisApi = OsmosisApi;
