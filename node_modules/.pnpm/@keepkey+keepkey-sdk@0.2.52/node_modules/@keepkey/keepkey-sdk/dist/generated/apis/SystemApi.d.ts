/**
 * keepkey-sdk-server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { ApplySettingsRequest, ChangePinRequest, CipherKeyValueRequest, SignIdentityRequest, TypesPolicy } from '../models';
export interface ApplyPoliciesRequest {
    TypesPolicy: Array<TypesPolicy>;
}
export interface ApplySettingsOperationRequest {
    ApplySettingsRequest: ApplySettingsRequest;
}
export interface ChangePinOperationRequest {
    ChangePinRequest: ChangePinRequest;
}
export interface ChangeWipeCodeRequest {
    ChangePinRequest: ChangePinRequest;
}
export interface CipherKeyValueOperationRequest {
    CipherKeyValueRequest: CipherKeyValueRequest;
}
export interface FirmwareUpdateRequest {
    body: Blob;
    skipErase?: boolean;
}
export interface SignIdentityOperationRequest {
    SignIdentityRequest: SignIdentityRequest;
}
/**
 *
 */
export declare class SystemApi extends runtime.BaseAPI {
    /**
     * Enable or disable certain device configuration values
     * Apply policies
     */
    applyPoliciesRaw(requestParameters: ApplyPoliciesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Enable or disable certain device configuration values
     * Apply policies
     */
    applyPolicies(TypesPolicy: Array<TypesPolicy>, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Change device configuration
     * Apply settings
     */
    applySettingsRaw(requestParameters: ApplySettingsOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Change device configuration
     * Apply settings
     */
    applySettings(ApplySettingsRequest: ApplySettingsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Change or remove the device\'s PIN
     */
    changePinRaw(requestParameters: ChangePinOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Change or remove the device\'s PIN
     */
    changePin(ChangePinRequest: ChangePinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Change or remove the device\'s wipe code
     */
    changeWipeCodeRaw(requestParameters: ChangeWipeCodeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Change or remove the device\'s wipe code
     */
    changeWipeCode(ChangePinRequest: ChangePinRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Encrypt or decrypt a key and associated block of data, possibly with an on-device verification step
     * Encrypt or decrypt a key/value pair
     */
    cipherKeyValueRaw(requestParameters: CipherKeyValueOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Blob>>;
    /**
     * Encrypt or decrypt a key and associated block of data, possibly with an on-device verification step
     * Encrypt or decrypt a key/value pair
     */
    cipherKeyValue(CipherKeyValueRequest: CipherKeyValueRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Blob>;
    /**
     * Causes the device to forget any cached PIN or passphrase. (Does not end the API session.)
     * Lock the device
     */
    clearSessionRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Causes the device to forget any cached PIN or passphrase. (Does not end the API session.)
     * Lock the device
     */
    clearSession(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Updates the device\'s firmware
     * Firmware update
     */
    firmwareUpdateRaw(requestParameters: FirmwareUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Updates the device\'s firmware
     * Firmware update
     */
    firmwareUpdate(body: Blob, skipErase?: boolean, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Sign an identity challenge
     */
    signIdentityRaw(requestParameters: SignIdentityOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Sign an identity challenge
     */
    signIdentity(SignIdentityRequest: SignIdentityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Wipe keys and reset device
     */
    wipeDeviceRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Wipe keys and reset device
     */
    wipeDevice(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
}
