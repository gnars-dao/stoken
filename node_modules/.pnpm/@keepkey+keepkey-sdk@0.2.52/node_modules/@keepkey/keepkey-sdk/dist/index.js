"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.KeepKeySdk = void 0;
const generated_1 = require("./generated");
const apis = __importStar(require("./generated/apis"));
__exportStar(require("./generated"), exports);
class KeepKeySdk {
    constructor(configuration) {
        this.address = new apis.AddressApi(configuration);
        this.auth = new apis.AuthApi(configuration);
        this.utxo = new apis.UTXOApi(configuration);
        this.bnb = new apis.BNBApi(configuration);
        this.cosmos = new apis.CosmosApi(configuration);
        this.osmosis = new apis.OsmosisApi(configuration);
        this.thorchain = new apis.ThorchainApi(configuration);
        this.eth = new apis.ETHApi(configuration);
        this.raw = new apis.RawApi(configuration);
        this.system = Object.freeze(Object.assign(Object.create(new apis.SystemApi(configuration), {}), {
            debug: new apis.DebugApi(configuration),
            info: new apis.InfoApi(configuration),
            initialize: new apis.InitializeApi(configuration),
            manufacturing: new apis.ManufacturingApi(configuration),
        }));
        this.xrp = new apis.XRPApi(configuration);
    }
    static async create(config) {
        const middleware = [
            {
                async post(context) {
                    if (context.response.status === 500) {
                        throw await context.response.json();
                    }
                },
            },
        ];
        const existingKey = config.apiKey;
        const sdkWithExistingKey = new KeepKeySdk(new generated_1.Configuration({
            basePath: config?.basePath,
            middleware,
            accessToken: existingKey,
        }));
        const keyOk = await sdkWithExistingKey.auth.verify().then(x => {
            console.log('verified', x);
            return true;
        }, e => {
            if (typeof window !== 'undefined' &&
                e.message ===
                    'The request failed and the interceptors did not return an alternative response') {
                //window.location.assign('keepkey://launch')
            }
            console.warn('verify failed', e);
            return false;
        });
        if (keyOk)
            return sdkWithExistingKey;
        if (!config.pairingInfo) {
            throw new Error('bad API key, and no pairingInfo provided');
        }
        const { apiKey: newKey } = await sdkWithExistingKey.auth.pair(config.pairingInfo);
        config.apiKey = newKey;
        return new KeepKeySdk(new generated_1.Configuration({
            basePath: config?.basePath,
            middleware,
            accessToken: newKey,
        }));
    }
}
exports.KeepKeySdk = KeepKeySdk;
