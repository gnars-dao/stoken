import { Deferred } from '@trezor/utils';
import { AbstractTransport, AcquireInput, ReleaseInput } from './abstract';
import { Descriptor } from '../types';
type BridgeConstructorParameters = ConstructorParameters<typeof AbstractTransport>[0] & {
    url?: string;
    latestVersion?: string;
};
export declare class BridgeTransport extends AbstractTransport {
    private latestVersion?;
    private url;
    protected acquirePromise?: Deferred<any>;
    name: "BridgeTransport";
    constructor({ url, latestVersion, ...args }: BridgeConstructorParameters);
    init(): {
        promise: Promise<{
            success: false;
            error: "unexpected error";
        } | import("../types").Success<undefined> | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "Wrong result type.";
        } | {
            success: false;
            error: "Network request failed";
        }>;
        abort: () => void;
    };
    listen(): import("../types").Success<undefined> | {
        success: false;
        error: "already listening";
        message: string | undefined;
    };
    private _listen;
    enumerate(): {
        promise: Promise<{
            success: false;
            error: "unexpected error";
        } | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | import("../types").Success<Descriptor[]> | {
            success: false;
            error: "Wrong result type.";
        } | {
            success: false;
            error: "Network request failed";
        }>;
        abort: () => void;
    };
    acquire({ input }: {
        input: AcquireInput;
    }): {
        promise: Promise<import("../types").ResultWithTypedError<string, "Unable to open device" | "device not found" | "wrong previous session" | "device disconnected during action" | "unexpected error" | "Aborted by signal" | "Aborted by timeout"> | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "Wrong result type.";
        } | {
            success: false;
            error: "Network request failed";
        }>;
        abort: () => void;
    };
    release({ path, session, onClose }: ReleaseInput): {
        promise: Promise<{
            success: false;
            error: "unexpected error";
        } | import("../types").Success<undefined> | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "Wrong result type.";
        } | {
            success: false;
            error: "Network request failed";
        } | {
            success: false;
            error: "session not found";
        }>;
        abort: () => void;
    };
    releaseDevice(): Promise<import("../types").Success<undefined>>;
    call({ session, name, data, }: {
        session: string;
        name: string;
        data: Record<string, unknown>;
    }): {
        promise: Promise<{
            success: false;
            error: "device disconnected during action";
        } | {
            success: false;
            error: "unexpected error";
        } | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "Wrong result type.";
        } | {
            success: false;
            error: "Network request failed";
        } | {
            success: false;
            error: "other call in progress";
        } | {
            success: false;
            error: "Malformed protocol format";
        } | import("../types").Success<{
            message: {
                [key: string]: any;
            };
            type: keyof import("../types/messages").MessageType;
        }>>;
        abort: () => void;
    };
    send({ session, name, data, }: {
        session: string;
        data: Record<string, unknown>;
        name: string;
    }): {
        promise: Promise<{
            success: false;
            error: "device disconnected during action";
        } | {
            success: false;
            error: "unexpected error";
        } | import("../types").Success<undefined> | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "Wrong result type.";
        } | {
            success: false;
            error: "Network request failed";
        } | {
            success: false;
            error: "other call in progress";
        } | {
            success: false;
            error: "Malformed protocol format";
        }>;
        abort: () => void;
    };
    receive({ session }: {
        session: string;
    }): {
        promise: Promise<{
            success: false;
            error: "device disconnected during action";
        } | {
            success: false;
            error: "unexpected error";
        } | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "Wrong result type.";
        } | {
            success: false;
            error: "Network request failed";
        } | {
            success: false;
            error: "other call in progress";
        } | {
            success: false;
            error: "Malformed protocol format";
        } | import("../types").Success<{
            message: {
                [key: string]: any;
            };
            type: keyof import("../types/messages").MessageType;
        }>>;
        abort: () => void;
    };
    stop(): void;
    private _post;
}
export {};
//# sourceMappingURL=bridge.d.ts.map