import { Deferred } from '@trezor/utils';
import { AbstractTransport, AcquireInput, ReleaseInput } from './abstract';
import { SessionsClient } from '../sessions/client';
import type { UsbInterface } from '../interfaces/usb';
export type UsbTransportConstructorParams = ConstructorParameters<typeof AbstractTransport>[0] & {
    usbInterface: UsbInterface;
    sessionsClient: (typeof SessionsClient)['prototype'];
};
export declare abstract class AbstractUsbTransport extends AbstractTransport {
    private sessionsClient;
    private transportInterface;
    protected acquirePromise?: Deferred<any>;
    constructor({ messages, usbInterface, sessionsClient, signal }: UsbTransportConstructorParams);
    init(): ReturnType<AbstractTransport['init']>;
    listen(): import("../types").Success<undefined> | {
        success: false;
        error: "already listening";
        message: string | undefined;
    };
    enumerate(): {
        promise: Promise<{
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | import("../types").Success<import("..").Descriptor[]> | {
            success: false;
            error: never;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        }>;
        abort: () => void;
    };
    acquire({ input }: {
        input: AcquireInput;
    }): {
        promise: Promise<import("../types").ResultWithTypedError<string, "Unable to open device" | "device not found" | "wrong previous session" | "device disconnected during action" | "unexpected error" | "Aborted by signal" | "Aborted by timeout"> | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        }>;
        abort: () => void;
    };
    release({ path, session, onClose }: ReleaseInput): {
        promise: Promise<import("../types").Success<undefined> | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "session not found";
            message: string | undefined;
        }>;
        abort: () => void;
    };
    call({ session, name, data, }: {
        session: string;
        name: string;
        data: Record<string, unknown>;
    }): {
        promise: Promise<{
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | import("../types").Success<{
            message: {
                [key: string]: any;
            };
            type: keyof import("../types/messages").MessageType;
        }> | {
            success: false;
            error: "unexpected error";
            message: string | undefined;
        } | {
            success: false;
            error: NonNullable<"Unable to open device" | "A transfer error has occurred." | "device not found" | "device disconnected during action">;
            message: string | undefined;
        }>;
        abort: () => void;
    };
    send({ data, session, name, }: {
        data: Record<string, unknown>;
        session: string;
        name: string;
    }): {
        promise: Promise<import("../types").Success<undefined> | {
            success: false;
            error: "device disconnected during action";
            message: string | undefined;
        } | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "session not found";
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        }>;
        abort: () => void;
    };
    receive({ session }: {
        session: string;
    }): {
        promise: Promise<{
            success: false;
            error: "device disconnected during action";
            message: string | undefined;
        } | {
            success: false;
            error: NonNullable<"Aborted by signal" | "Aborted by timeout">;
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | {
            success: false;
            error: "session not found";
            message: string | undefined;
        } | {
            success: false;
            error: "unexpected error";
            message: string;
        } | import("../types").Success<{
            message: {
                [key: string]: any;
            };
            type: keyof import("../types/messages").MessageType;
        }>>;
        abort: () => void;
    };
    releaseDevice(path: string): Promise<import("../types").Success<undefined> | {
        success: false;
        error: "device not found";
        message: string | undefined;
    } | {
        success: false;
        error: "Unable to close device";
        message: string | undefined;
    }>;
    stop(): void;
}
//# sourceMappingURL=abstractUsb.d.ts.map