import { AbstractTransport } from './abstract';
export declare class WebUsbTransport extends AbstractTransport {
    name: "WebUsbTransport";
    constructor(params: ConstructorParameters<typeof AbstractTransport>[0]);
    init: () => {
        promise: Promise<{
            success: false;
            error: "This transport can not be used in this environment";
            message: string | undefined;
        }>;
        abort: () => void;
    };
    acquire: () => {
        promise: Promise<{
            success: false;
            error: "This transport can not be used in this environment";
            message: string | undefined;
        }>;
        abort: () => void;
    };
    enumerate: () => {
        promise: Promise<{
            success: false;
            error: "This transport can not be used in this environment";
            message: string | undefined;
        }>;
        abort: () => void;
    };
    call: () => {
        promise: Promise<{
            success: false;
            error: "This transport can not be used in this environment";
            message: string | undefined;
        }>;
        abort: () => void;
    };
    receive: () => {
        promise: Promise<{
            success: false;
            error: "This transport can not be used in this environment";
            message: string | undefined;
        }>;
        abort: () => void;
    };
    send: () => {
        promise: Promise<{
            success: false;
            error: "This transport can not be used in this environment";
            message: string | undefined;
        }>;
        abort: () => void;
    };
    release: () => {
        promise: Promise<{
            success: false;
            error: "This transport can not be used in this environment";
            message: string | undefined;
        }>;
        abort: () => void;
    };
    stop: () => Promise<{
        success: false;
        error: "This transport can not be used in this environment";
        message: string | undefined;
    }>;
    releaseDevice: () => Promise<{
        success: false;
        error: "This transport can not be used in this environment";
        message: string | undefined;
    }>;
    listen: () => {
        success: false;
        error: "This transport can not be used in this environment";
        message: string | undefined;
    };
}
//# sourceMappingURL=webusb.d.ts.map