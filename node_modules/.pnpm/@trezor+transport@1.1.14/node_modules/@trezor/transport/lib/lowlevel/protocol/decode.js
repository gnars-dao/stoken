"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeChunked = exports.decode = void 0;
const bytebuffer_1 = __importDefault(require("bytebuffer"));
const constants_1 = require("../../constants");
const ERRORS = __importStar(require("../../errors"));
const readHeader = (buffer) => {
    const typeId = buffer.readUint16();
    const length = buffer.readUint32();
    return { typeId, length };
};
const readHeaderChunked = (buffer) => {
    const sharp1 = buffer.readByte();
    const sharp2 = buffer.readByte();
    const typeId = buffer.readUint16();
    const length = buffer.readUint32();
    return { sharp1, sharp2, typeId, length };
};
const decode = (byteBuffer) => {
    const { typeId } = readHeader(byteBuffer);
    return {
        typeId,
        buffer: byteBuffer,
    };
};
exports.decode = decode;
const decodeChunked = (bytes) => {
    const byteBuffer = bytebuffer_1.default.wrap(bytes, undefined, undefined, true);
    const { sharp1, sharp2, typeId, length } = readHeaderChunked(byteBuffer);
    if (sharp1 !== constants_1.MESSAGE_HEADER_BYTE || sharp2 !== constants_1.MESSAGE_HEADER_BYTE) {
        throw new Error(ERRORS.PROTOCOL_MALFORMED);
    }
    return { length, typeId, restBuffer: byteBuffer };
};
exports.decodeChunked = decodeChunked;
//# sourceMappingURL=decode.js.map