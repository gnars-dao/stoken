"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initBackgroundInBrowser = void 0;
const background_1 = require("./background");
const background_sharedworker_1 = __importDefault(require("./background-sharedworker"));
const initBackgroundInBrowser = () => {
    try {
        const background = new background_sharedworker_1.default();
        const requestFn = (params) => new Promise(resolve => {
            const onmessage = (message) => {
                if (params.id === message.data.id) {
                    resolve(message.data);
                    background.port.removeEventListener('message', onmessage);
                }
            };
            background.port.addEventListener('message', onmessage);
            background.port.onmessageerror = message => {
                console.error('background-browser onmessageerror,', message);
                background.port.removeEventListener('message', onmessage);
            };
            background.port.postMessage(params);
        });
        const registerBackgroundCallbacks = onDescriptorsCallback => {
            background.port.addEventListener('message', (e) => {
                if ('type' in (e === null || e === void 0 ? void 0 : e.data)) {
                    if (e.data.type === 'descriptors') {
                        onDescriptorsCallback(e.data.payload);
                    }
                }
            });
        };
        return { background, requestFn, registerBackgroundCallbacks };
    }
    catch (err) {
        console.warn('Unable to load background-sharedworker. Falling back to use local module. Say bye bye to tabs synchronization');
        const background = new background_1.SessionsBackground();
        const registerBackgroundCallbacks = onDescriptorsCallback => {
            background.on('descriptors', descriptors => {
                onDescriptorsCallback(descriptors);
            });
        };
        return {
            background,
            requestFn: background.handleMessage.bind(background),
            registerBackgroundCallbacks,
        };
    }
};
exports.initBackgroundInBrowser = initBackgroundInBrowser;
//# sourceMappingURL=background-browser.js.map