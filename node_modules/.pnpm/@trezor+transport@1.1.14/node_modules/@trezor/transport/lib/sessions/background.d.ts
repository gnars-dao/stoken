import { TypedEmitter } from '@trezor/utils/lib/typedEventEmitter';
import type { HandleMessageParams, HandleMessageResponse, Sessions } from './types';
import type { Descriptor, Success } from '../types';
export declare class SessionsBackground extends TypedEmitter<{
    descriptors: Descriptor[];
}> {
    private sessions;
    private locksQueue;
    private locksTimeoutQueue;
    private lastSession;
    handleMessage<M extends HandleMessageParams>(message: M): Promise<HandleMessageResponse<M>>;
    private handshake;
    enumerateIntent(): Promise<Success<{
        sessions: Sessions;
    }>>;
    private enumerateDone;
    private acquireIntent;
    private acquireDone;
    private releaseIntent;
    private releaseDone;
    private getSessions;
    private getPathBySession;
    private _getPathBySession;
    private startLock;
    private clearLock;
    private waitForUnlocked;
    private waitInQueue;
    private getNewSessionId;
    private sessionsToDescriptors;
    private filterDisconnectedDevices;
    private success;
    private error;
}
//# sourceMappingURL=background.d.ts.map