import { SessionsBackground } from './background';
import { RegisterBackgroundCallbacks } from './types';
export declare const initBackgroundInBrowser: () => {
    background: SharedWorker;
    requestFn: (params: Parameters<SessionsBackground['handleMessage']>[0]) => Promise<import("./types").HandshakeResponse | import("./types").EnumerateIntentResponse | import("./types").EnumerateDoneResponse | ({
        success: false;
        error: "wrong previous session";
    } & {
        id: number;
    }) | (import("../types").Success<{
        session: string;
    }> & {
        id: number;
    }) | import("./types").AcquireDoneResponse | ({
        success: false;
        error: "session not found";
    } & {
        id: number;
    }) | (import("../types").Success<{
        path: string;
    }> & {
        id: number;
    }) | import("./types").ReleaseDoneResponse | import("./types").GetSessionsResponse | (import("../types").Success<{
        path: string;
    }> & {
        id: number;
    })>;
    registerBackgroundCallbacks: RegisterBackgroundCallbacks;
} | {
    background: SessionsBackground;
    requestFn: <M extends import("./types").HandleMessageParams>(message: M) => Promise<import("./types").HandleMessageResponse<M>>;
    registerBackgroundCallbacks: RegisterBackgroundCallbacks;
};
//# sourceMappingURL=background-browser.d.ts.map