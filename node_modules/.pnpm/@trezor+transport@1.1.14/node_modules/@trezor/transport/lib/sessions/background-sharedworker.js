"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const background_1 = require("./background");
const background = new background_1.SessionsBackground();
const ports = [];
const handleMessage = (message, port) => __awaiter(void 0, void 0, void 0, function* () {
    const res = yield background.handleMessage(message);
    port.postMessage(res);
});
background.on('descriptors', descriptors => {
    ports.forEach(p => {
        p.postMessage({ type: 'descriptors', payload: descriptors });
    });
});
self.onconnect = function (e) {
    const port = e.ports[0];
    ports.push(port);
    port.addEventListener('message', e => {
        handleMessage(e.data, port);
    });
    port.start();
};
//# sourceMappingURL=background-sharedworker.js.map