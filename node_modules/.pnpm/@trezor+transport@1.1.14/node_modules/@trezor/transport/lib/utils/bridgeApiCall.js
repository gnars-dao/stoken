"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bridgeApiCall = void 0;
const cross_fetch_1 = __importDefault(require("cross-fetch"));
const result_1 = require("./result");
const ERRORS = __importStar(require("../errors"));
const _isNode = typeof process !== 'undefined' && typeof window === 'undefined';
function contentType(body) {
    if (typeof body === 'string') {
        if (body === '') {
            return 'text/plain';
        }
        return 'application/octet-stream';
    }
    return 'application/json';
}
function wrapBody(body) {
    if (typeof body === 'string') {
        return body;
    }
    return JSON.stringify(body);
}
function parseResult(text) {
    try {
        return JSON.parse(text);
    }
    catch (e) {
        return text;
    }
}
function bridgeApiCall(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const fetchOptions = {
            method: options.method,
            body: wrapBody(options.body),
            credentials: 'same-origin',
            headers: {},
            signal: options.signal,
            timeout: options.timeout,
        };
        if (options.skipContentTypeHeader == null || options.skipContentTypeHeader === false) {
            fetchOptions.headers = Object.assign(Object.assign({}, fetchOptions.headers), { 'Content-Type': contentType(options.body == null ? '' : options.body) });
        }
        if (_isNode) {
            fetchOptions.headers = Object.assign(Object.assign({}, fetchOptions.headers), { Origin: 'https://node.trezor.io' });
        }
        let res;
        try {
            res = yield (0, cross_fetch_1.default)(options.url, fetchOptions);
        }
        catch (err) {
            return (0, result_1.error)({ error: ERRORS.HTTP_ERROR, message: err.message });
        }
        let resParsed;
        try {
            resParsed = yield res.text();
            resParsed = parseResult(resParsed);
        }
        catch (err) {
            return (0, result_1.error)({ error: ERRORS.HTTP_ERROR, message: err.message });
        }
        const BRIDGE_ERROR_DEVICE_CLOSED = 'closed device';
        const BRIDGE_MALFORMED_PROTOBUF = 'malformed protobuf';
        const BRIDGE_MALFORMED_WIRE_FORMAT = 'malformed wire format';
        if (!res.ok) {
            const errStr = typeof resParsed !== 'string' && 'error' in resParsed
                ? resParsed.error
                : resParsed;
            if (errStr === BRIDGE_ERROR_DEVICE_CLOSED) {
                return (0, result_1.error)({ error: ERRORS.INTERFACE_UNABLE_TO_OPEN_DEVICE });
            }
            if (errStr === BRIDGE_MALFORMED_PROTOBUF) {
                return (0, result_1.error)({ error: ERRORS.PROTOCOL_MALFORMED });
            }
            if (errStr === BRIDGE_MALFORMED_WIRE_FORMAT) {
                return (0, result_1.error)({ error: ERRORS.PROTOCOL_MALFORMED });
            }
            return (0, result_1.unknownError)(new Error(errStr), [
                ERRORS.DEVICE_NOT_FOUND,
                ERRORS.HTTP_ERROR,
                ERRORS.DEVICE_DISCONNECTED_DURING_ACTION,
                ERRORS.OTHER_CALL_IN_PROGRESS,
                ERRORS.SESSION_NOT_FOUND,
                ERRORS.SESSION_WRONG_PREVIOUS,
            ]);
        }
        return (0, result_1.success)(resParsed);
    });
}
exports.bridgeApiCall = bridgeApiCall;
//# sourceMappingURL=bridgeApiCall.js.map