"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.empty = exports.call = exports.acquire = exports.devices = exports.version = exports.info = void 0;
const result_1 = require("./result");
const ERRORS = __importStar(require("../errors"));
function isString(payload) {
    return typeof payload === 'string';
}
function info(res) {
    if (isString(res)) {
        return (0, result_1.error)({ error: ERRORS.WRONG_RESULT_TYPE });
    }
    const { version } = res;
    if (typeof version !== 'string') {
        return (0, result_1.error)({ error: ERRORS.WRONG_RESULT_TYPE });
    }
    const configured = !!res.configured;
    return (0, result_1.success)({ version, configured });
}
exports.info = info;
function version(res) {
    if (!isString(res)) {
        return (0, result_1.error)({ error: ERRORS.WRONG_RESULT_TYPE });
    }
    return (0, result_1.success)(res.trim());
}
exports.version = version;
function devices(res) {
    if (isString(res)) {
        return (0, result_1.error)({ error: ERRORS.WRONG_RESULT_TYPE });
    }
    if (!(res instanceof Array)) {
        return (0, result_1.error)({ error: ERRORS.WRONG_RESULT_TYPE });
    }
    if (res.some(o => typeof o !== 'object' ||
        !o ||
        typeof o.path !== 'string' ||
        (typeof o.session !== 'string' && o.session !== null))) {
        return (0, result_1.error)({ error: ERRORS.WRONG_RESULT_TYPE });
    }
    return (0, result_1.success)(res.map((o) => ({
        path: o.path,
        session: o.session,
        product: o.product,
        vendor: o.vendor,
        debug: o.debug,
        debugSession: o.debugSession,
    })));
}
exports.devices = devices;
function acquire(res) {
    if (isString(res)) {
        return (0, result_1.error)({ error: ERRORS.WRONG_RESULT_TYPE });
    }
    const { session } = res;
    if (typeof session !== 'string') {
        return (0, result_1.error)({ error: ERRORS.WRONG_RESULT_TYPE });
    }
    return (0, result_1.success)(session);
}
exports.acquire = acquire;
function call(res) {
    if (!isString(res)) {
        return (0, result_1.error)({ error: ERRORS.WRONG_RESULT_TYPE });
    }
    return (0, result_1.success)(res);
}
exports.call = call;
function empty(res) {
    return res != null && JSON.stringify(res) === '{}'
        ? (0, result_1.error)({ error: ERRORS.WRONG_RESULT_TYPE })
        : (0, result_1.success)(undefined);
}
exports.empty = empty;
//# sourceMappingURL=bridgeApiResult.js.map