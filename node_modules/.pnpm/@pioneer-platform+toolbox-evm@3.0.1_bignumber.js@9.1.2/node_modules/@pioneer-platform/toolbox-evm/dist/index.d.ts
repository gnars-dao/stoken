import { AmountWithBaseDenom } from '@pioneer-platform/types';
import type { Asset } from '@pioneer-platform/types';
import { AssetEntity } from '@pioneer-platform/swapkit-entities';
import { Balance } from '@pioneer-platform/types';
import { BaseDecimal } from '@pioneer-platform/types';
import { BigNumber } from '@ethersproject/bignumber';
import type { BigNumberish } from '@ethersproject/bignumber';
import { Chain } from '@pioneer-platform/types';
import { ChainId } from '@pioneer-platform/types';
import { Contract } from '@ethersproject/contracts';
import type { ContractInterface } from '@ethersproject/contracts';
import { EIP1559TxParams } from '@pioneer-platform/types';
import type { EVMChain } from '@pioneer-platform/types';
import type { EVMTxParams } from '@pioneer-platform/types';
import type { ExternalProvider } from '@ethersproject/providers';
import { FeeOption } from '@pioneer-platform/types';
import { JsonRpcProvider } from '@ethersproject/providers';
import type { JsonRpcSigner } from '@ethersproject/providers';
import { PopulatedTransaction } from '@ethersproject/contracts';
import { Provider } from '@ethersproject/abstract-provider';
import { RPCUrl } from '@pioneer-platform/types';
import type { Signer } from '@ethersproject/abstract-signer';
import { TransactionRequest } from '@ethersproject/abstract-provider';
import { TransactionResponse } from '@ethersproject/abstract-provider';
import { WalletOption } from '@pioneer-platform/types';
import { WalletTxParams } from '@pioneer-platform/types';
import type { Web3Provider } from '@ethersproject/providers';

export declare const addAccountsChangedCallback: (callback: () => void) => void;

export declare const addEVMWalletNetwork: (provider: ExternalProvider, networkParams: NetworkParams) => Promise<any>;

export declare interface AddressInfo {
    address: string;
    ETH: {
        balance: number;
        totalIn?: number;
        totalOut?: number;
        price: PriceInfo;
    };
    contractInfo?: {
        creatorAddress: string;
        transactionHash: string;
        timestamp: string;
    };
    tokenInfo?: TokenInfo;
    tokens?: TokenBalance[];
    countTxs: number;
}

export declare type ApprovedParams = {
    assetAddress: string;
    spenderAddress: string;
    from: string;
};

export declare type ApproveParams = {
    assetAddress: string;
    spenderAddress: string;
    feeOptionKey?: FeeOption;
    amount?: BigNumberish;
    from: string;
    gasLimitFallback?: BigNumberish;
    nonce?: number;
};

export declare const ARBToolbox: ({ api, provider, signer, covalentApiKey, }: {
    api?: {
        getBalance: (address: string) => Promise<Balance[]>;
    } | undefined;
    covalentApiKey: string;
    signer: Signer;
    provider: JsonRpcProvider | Web3Provider;
}) => {
    getNetworkParams: () => {
        chainId: ChainId;
        chainName: string;
        nativeCurrency: {
            name: string;
            symbol: Chain;
            decimals: BaseDecimal;
        };
        rpcUrls: RPCUrl[];
        blockExplorerUrls: string[];
    };
    estimateGasPrices: () => Promise<{
        average: {
            gasPrice: BigNumber;
        };
        fast: {
            gasPrice: BigNumber;
        };
        fastest: {
            gasPrice: BigNumber;
        };
    }>;
    getBalance: (address: string) => Promise<(Balance | {
        asset: AssetEntity;
        amount: AmountWithBaseDenom;
    })[]>;
    approve: (params: ApproveParams) => Promise<string>;
    approvedAmount: (params: ApprovedParams) => Promise<string>;
    broadcastTransaction: ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>) | ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>);
    call: (params: CallParams) => Promise<unknown>;
    createContract: (address: string, abi: any, provider: Provider) => Contract;
    createContractTxObject: (params: CallParams) => Promise<PopulatedTransaction>;
    EIP1193SendTransaction: (tx: EIP1559TxParams) => Promise<string>;
    estimateCall: (params: EstimateCallParams) => Promise<BigNumber>;
    estimateGasLimit: ({ asset, recipient, amount, memo }: WalletTxParams) => Promise<BigNumber>;
    isApproved: (params: IsApprovedParams) => Promise<boolean>;
    sendTransaction: (params: EIP1559TxParams, feeOption: FeeOption) => Promise<string | TransactionResponse>;
    transfer: (params: TransferParams) => Promise<string | TransactionResponse>;
    validateAddress: (address: string) => boolean;
};

export declare const AVAXToolbox: ({ api, provider, signer, covalentApiKey, }: {
    api?: {
        getBalance: (address: string) => Promise<Balance[]>;
    } | undefined;
    covalentApiKey: string;
    signer: Signer;
    provider: JsonRpcProvider | Web3Provider;
}) => {
    getNetworkParams: () => {
        chainId: ChainId;
        chainName: string;
        nativeCurrency: {
            name: string;
            symbol: Chain;
            decimals: BaseDecimal;
        };
        rpcUrls: string[];
        blockExplorerUrls: string[];
    };
    getBalance: (address: string) => Promise<(Balance | {
        asset: AssetEntity;
        amount: AmountWithBaseDenom;
    })[]>;
    approve: (params: ApproveParams) => Promise<string>;
    approvedAmount: (params: ApprovedParams) => Promise<string>;
    broadcastTransaction: ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>) | ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>);
    call: (params: CallParams) => Promise<unknown>;
    createContract: (address: string, abi: any, provider: Provider) => Contract;
    createContractTxObject: (params: CallParams) => Promise<PopulatedTransaction>;
    EIP1193SendTransaction: (tx: EIP1559TxParams) => Promise<string>;
    estimateCall: (params: EstimateCallParams) => Promise<BigNumber>;
    estimateGasLimit: ({ asset, recipient, amount, memo }: WalletTxParams) => Promise<BigNumber>;
    estimateGasPrices: () => Promise<{
        average: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fast: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fastest: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
    } | {
        average: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fast: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fastest: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
    }>;
    isApproved: (params: IsApprovedParams) => Promise<boolean>;
    sendTransaction: (params: EIP1559TxParams, feeOption: FeeOption) => Promise<string | TransactionResponse>;
    transfer: (params: TransferParams) => Promise<string | TransactionResponse>;
    validateAddress: (address: string) => boolean;
};

export declare const BaseEVMToolbox: ({ provider, signer, isEIP1559Compatible, }: {
    signer?: Signer | JsonRpcSigner | undefined;
    provider: Provider | Web3Provider;
    isEIP1559Compatible?: boolean | undefined;
}) => {
    approve: (params: ApproveParams) => Promise<string>;
    approvedAmount: (params: ApprovedParams) => Promise<string>;
    broadcastTransaction: ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>) | ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>);
    call: (params: CallParams) => Promise<unknown>;
    createContract: (address: string, abi: any, provider: Provider) => Contract;
    createContractTxObject: (params: CallParams) => Promise<PopulatedTransaction>;
    EIP1193SendTransaction: (tx: EIP1559TxParams) => Promise<string>;
    estimateCall: (params: EstimateCallParams) => Promise<BigNumber>;
    estimateGasLimit: ({ asset, recipient, amount, memo }: WalletTxParams) => Promise<BigNumber>;
    estimateGasPrices: () => Promise<{
        average: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fast: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fastest: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
    } | {
        average: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fast: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fastest: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
    }>;
    isApproved: (params: IsApprovedParams) => Promise<boolean>;
    sendTransaction: (params: EIP1559TxParams, feeOption: FeeOption) => Promise<string | TransactionResponse>;
    transfer: (params: TransferParams) => Promise<string | TransactionResponse>;
    validateAddress: (address: string) => boolean;
};

export declare const BSCToolbox: ({ api, provider, signer, covalentApiKey, }: {
    api?: {
        getBalance: (address: string) => Promise<Balance[]>;
    } | undefined;
    covalentApiKey: string;
    signer: Signer;
    provider: JsonRpcProvider | Web3Provider;
}) => {
    call: (params: CallParams) => Promise<unknown>;
    getNetworkParams: () => {
        chainId: ChainId;
        chainName: string;
        nativeCurrency: {
            name: string;
            symbol: Chain;
            decimals: BaseDecimal;
        };
        rpcUrls: string[];
        blockExplorerUrls: string[];
    };
    getBalance: (address: string) => Promise<(Balance | {
        asset: AssetEntity;
        amount: AmountWithBaseDenom;
    })[]>;
    approve: (params: ApproveParams) => Promise<string>;
    approvedAmount: (params: ApprovedParams) => Promise<string>;
    broadcastTransaction: ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>) | ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>);
    createContract: (address: string, abi: any, provider: Provider) => Contract;
    createContractTxObject: (params: CallParams) => Promise<PopulatedTransaction>;
    EIP1193SendTransaction: (tx: EIP1559TxParams) => Promise<string>;
    estimateCall: (params: EstimateCallParams) => Promise<BigNumber>;
    estimateGasLimit: ({ asset, recipient, amount, memo }: WalletTxParams) => Promise<BigNumber>;
    estimateGasPrices: () => Promise<{
        average: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fast: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fastest: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
    } | {
        average: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fast: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fastest: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
    }>;
    isApproved: (params: IsApprovedParams) => Promise<boolean>;
    sendTransaction: (params: EIP1559TxParams, feeOption: FeeOption) => Promise<string | TransactionResponse>;
    transfer: (params: TransferParams) => Promise<string | TransactionResponse>;
    validateAddress: (address: string) => boolean;
};

export declare type CallParams = {
    callProvider?: ReturnType<typeof getProvider>;
    contractAddress: string;
    abi: ContractInterface;
    funcName: string;
    funcParams?: unknown[];
    txOverrides?: EVMTxParams;
};

export declare const covalentApi: ({ apiKey, chainId }: {
    apiKey: string;
    chainId: ChainId;
}) => {
    getBalance: (address: string) => Promise<Balance[]>;
};

export declare type CovalentApiType = ReturnType<typeof covalentApi>;

export declare const EIP1193SendTransaction: (provider: Provider | Web3Provider, { from, to, data, value }: EVMTxParams) => Promise<string>;

export declare type EstimateCallParams = Pick<CallParams, 'contractAddress' | 'abi' | 'funcName' | 'funcParams' | 'txOverrides'>;

export declare const estimateMaxSendableAmount: ({ toolbox, from, memo, feeOptionKey, asset, abi, funcName, funcParams, contractAddress, txOverrides, }: EVMMaxSendableAmountsParams) => Promise<AmountWithBaseDenom>;

export declare type EthereumWindowProvider = ExternalProvider & {
    isMetaMask?: boolean;
    on: (event: string, callback?: () => void) => void;
    isBraveWallet?: boolean;
    isCoinbaseWallet?: boolean;
    isOkxWallet?: boolean;
    overrideIsMetaMask?: boolean;
    selectedProvider?: EthereumWindowProvider;
    isTrust?: boolean;
    __XDEFI?: boolean;
};

export declare enum EthNetwork {
    Test = "goerli",
    Main = "homestead"
}

export declare const ethplorerApi: (apiKey?: string) => {
    getBalance: (address: string) => Promise<Balance[]>;
};

export declare type EthplorerApiType = ReturnType<typeof ethplorerApi>;

export declare const ETHToolbox: ({ api, ethplorerApiKey, signer, provider, }: {
    api?: {
        getBalance: (address: string) => Promise<Balance[]>;
    } | undefined;
    ethplorerApiKey: string;
    signer?: Signer | undefined;
    provider: JsonRpcProvider | Web3Provider;
}) => {
    getBalance: (address: string) => Promise<(Balance | {
        asset: AssetEntity;
        amount: AmountWithBaseDenom;
    })[]>;
    approve: (params: ApproveParams) => Promise<string>;
    approvedAmount: (params: ApprovedParams) => Promise<string>;
    broadcastTransaction: ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>) | ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>);
    call: (params: CallParams) => Promise<unknown>;
    createContract: (address: string, abi: any, provider: Provider) => Contract;
    createContractTxObject: (params: CallParams) => Promise<PopulatedTransaction>;
    EIP1193SendTransaction: (tx: EIP1559TxParams) => Promise<string>;
    estimateCall: (params: EstimateCallParams) => Promise<BigNumber>;
    estimateGasLimit: ({ asset, recipient, amount, memo }: WalletTxParams) => Promise<BigNumber>;
    estimateGasPrices: () => Promise<{
        average: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fast: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fastest: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
    } | {
        average: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fast: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fastest: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
    }>;
    isApproved: (params: IsApprovedParams) => Promise<boolean>;
    sendTransaction: (params: EIP1559TxParams, feeOption: FeeOption) => Promise<string | TransactionResponse>;
    transfer: (params: TransferParams) => Promise<string | TransactionResponse>;
    validateAddress: (address: string) => boolean;
};

export declare type EVMMaxSendableAmountsParams = {
    from: string;
    toolbox: EVMToolbox;
    asset?: AssetEntity | string;
    feeOptionKey?: FeeOption;
    memo?: string;
    abi?: ContractInterface;
    funcName?: string;
    contractAddress?: string;
    funcParams?: unknown[];
    txOverrides?: Partial<PopulatedTransaction>;
};

export declare type EVMToolbox = ReturnType<typeof AVAXToolbox | typeof ETHToolbox | typeof BSCToolbox | typeof OPToolbox | typeof ARBToolbox | typeof MATICToolbox>;

/**
 * Exported helper functions
 */
export declare const getBigNumberFrom: (value: string | number | BigNumber) => BigNumber;

export declare const getChecksumAddressFromAsset: (asset: Asset, chain: EVMChain) => string;

export declare const getETHDefaultWallet: () => WalletOption.METAMASK | WalletOption.COINBASE_WEB | WalletOption.TRUSTWALLET_WEB | WalletOption.BRAVE;

export declare const getProvider: (chain: EVMChain, customUrl?: string) => JsonRpcProvider;

export declare const getTokenAddress: ({ chain, symbol, ticker }: Asset, baseAssetChain: EVMChain) => string | null;

export declare const getWeb3WalletMethods: ({ ethereumWindowProvider, chain, covalentApiKey, ethplorerApiKey, }: {
    ethereumWindowProvider: EthereumWindowProvider | undefined;
    chain: Chain;
    covalentApiKey?: string | undefined;
    ethplorerApiKey?: string | undefined;
}) => Promise<{
    getBalance: (address: string) => Promise<(Balance | {
        asset: AssetEntity;
        amount: AmountWithBaseDenom;
    })[]>;
    approve: (params: ApproveParams) => Promise<string>;
    approvedAmount: (params: ApprovedParams) => Promise<string>;
    broadcastTransaction: ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>) | ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>);
    call: (params: CallParams) => Promise<unknown>;
    createContract: (address: string, abi: any, provider: Provider) => Contract;
    createContractTxObject: (params: CallParams) => Promise<PopulatedTransaction>;
    EIP1193SendTransaction: (tx: EIP1559TxParams) => Promise<string>;
    estimateCall: (params: EstimateCallParams) => Promise<BigNumber>;
    estimateGasLimit: ({ asset, recipient, amount, memo }: WalletTxParams) => Promise<BigNumber>;
    estimateGasPrices: () => Promise<{
        average: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fast: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fastest: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
    } | {
        average: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fast: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fastest: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
    }>;
    isApproved: (params: IsApprovedParams) => Promise<boolean>;
    sendTransaction: (params: EIP1559TxParams, feeOption: FeeOption) => Promise<string | TransactionResponse>;
    transfer: (params: TransferParams) => Promise<string | TransactionResponse>;
    validateAddress: (address: string) => boolean;
} & {}>;

export declare type IsApprovedParams = ApprovedParams & {
    amount?: BigNumberish;
};

export declare const isDetected: (walletOption: WalletOption) => boolean;

export declare const isWeb3Detected: () => boolean;

export declare interface JsonFragment {
    readonly name?: string;
    readonly type?: string;
    readonly anonymous?: boolean;
    readonly payable?: boolean;
    readonly constant?: boolean;
    readonly stateMutability?: string;
    readonly inputs?: readonly any[];
    readonly outputs?: readonly any[];
    readonly gas?: string;
}

export declare const MATICToolbox: ({ api, provider, signer, covalentApiKey, }: {
    api?: {
        getBalance: (address: string) => Promise<Balance[]>;
    } | undefined;
    covalentApiKey: string;
    signer: Signer;
    provider: JsonRpcProvider | Web3Provider;
}) => {
    getNetworkParams: () => {
        chainId: ChainId;
        chainName: string;
        nativeCurrency: {
            name: string;
            symbol: Chain;
            decimals: BaseDecimal;
        };
        rpcUrls: RPCUrl[];
        blockExplorerUrls: string[];
    };
    getBalance: (address: string) => Promise<(Balance | {
        asset: AssetEntity;
        amount: AmountWithBaseDenom;
    })[]>;
    approve: (params: ApproveParams) => Promise<string>;
    approvedAmount: (params: ApprovedParams) => Promise<string>;
    broadcastTransaction: ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>) | ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>);
    call: (params: CallParams) => Promise<unknown>;
    createContract: (address: string, abi: any, provider: Provider) => Contract;
    createContractTxObject: (params: CallParams) => Promise<PopulatedTransaction>;
    EIP1193SendTransaction: (tx: EIP1559TxParams) => Promise<string>;
    estimateCall: (params: EstimateCallParams) => Promise<BigNumber>;
    estimateGasLimit: ({ asset, recipient, amount, memo }: WalletTxParams) => Promise<BigNumber>;
    estimateGasPrices: () => Promise<{
        average: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fast: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
        fastest: {
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
            gasPrice?: undefined;
        };
    } | {
        average: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fast: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
        fastest: {
            gasPrice: BigNumber;
            maxFeePerGas?: undefined;
            maxPriorityFeePerGas?: undefined;
        };
    }>;
    isApproved: (params: IsApprovedParams) => Promise<boolean>;
    sendTransaction: (params: EIP1559TxParams, feeOption: FeeOption) => Promise<string | TransactionResponse>;
    transfer: (params: TransferParams) => Promise<string | TransactionResponse>;
    validateAddress: (address: string) => boolean;
};

export declare const MAX_APPROVAL: BigNumber;

declare type NetworkParams = {
    chainId: ChainId;
    chainName: string;
    nativeCurrency: {
        name: string;
        symbol: string;
        decimals: number;
    };
    rpcUrls: string[];
    blockExplorerUrls: string[];
};

export declare const OPToolbox: ({ api, provider, signer, covalentApiKey, }: {
    api?: {
        getBalance: (address: string) => Promise<Balance[]>;
    } | undefined;
    covalentApiKey: string;
    signer: Signer;
    provider: JsonRpcProvider | Web3Provider;
}) => {
    estimateTotalGasCost: (tx: TransactionRequest) => Promise<any>;
    estimateL1GasCost: (tx: TransactionRequest) => Promise<any>;
    estimateL2GasCost: (tx: TransactionRequest) => Promise<BigNumber>;
    getL1GasPrice: () => Promise<any>;
    estimateL1Gas: (tx: TransactionRequest) => Promise<any>;
    getNetworkParams: () => {
        chainId: ChainId;
        chainName: string;
        nativeCurrency: {
            name: string;
            symbol: Chain;
            decimals: BaseDecimal;
        };
        rpcUrls: RPCUrl[];
        blockExplorerUrls: string[];
    };
    estimateGasPrices: () => Promise<{
        average: {
            l1GasPrice: any;
            gasPrice: BigNumber | null;
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
        };
        fast: {
            l1GasPrice: any;
            gasPrice: BigNumber | undefined;
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
        };
        fastest: {
            l1GasPrice: any;
            gasPrice: BigNumber | undefined;
            maxFeePerGas: BigNumber;
            maxPriorityFeePerGas: BigNumber;
        };
    }>;
    getBalance: (address: string) => Promise<(Balance | {
        asset: AssetEntity;
        amount: AmountWithBaseDenom;
    })[]>;
    approve: (params: ApproveParams) => Promise<string>;
    approvedAmount: (params: ApprovedParams) => Promise<string>;
    broadcastTransaction: ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>) | ((signedTransaction: string | Promise<string>) => Promise<TransactionResponse>);
    call: (params: CallParams) => Promise<unknown>;
    createContract: (address: string, abi: any, provider: Provider) => Contract;
    createContractTxObject: (params: CallParams) => Promise<PopulatedTransaction>;
    EIP1193SendTransaction: (tx: EIP1559TxParams) => Promise<string>;
    estimateCall: (params: EstimateCallParams) => Promise<BigNumber>;
    estimateGasLimit: ({ asset, recipient, amount, memo }: WalletTxParams) => Promise<BigNumber>;
    isApproved: (params: IsApprovedParams) => Promise<boolean>;
    sendTransaction: (params: EIP1559TxParams, feeOption: FeeOption) => Promise<string | TransactionResponse>;
    transfer: (params: TransferParams) => Promise<string | TransactionResponse>;
    validateAddress: (address: string) => boolean;
};

export declare const prepareNetworkSwitch: <T extends {
    [key: string]: (...args: any[]) => any;
}>({ toolbox, chainId, provider, }: {
    toolbox: T;
    chainId: ChainId;
    provider?: ExternalProvider | undefined;
}) => T & {};

declare interface PriceInfo {
    rate: number;
    diff: number;
    diff7d?: number;
    ts: number;
    marketCapUsd?: number;
    availableSupply?: number;
    volume24h?: number;
    diff30d?: number;
    volDiff1?: number;
    volDiff7?: number;
    volDiff30?: number;
    currency?: string;
}

export declare const switchEVMWalletNetwork: (provider: ExternalProvider, chainId?: ChainId) => Promise<any>;

export declare const toChecksumAddress: (address: string) => string;

declare interface TokenBalance {
    tokenInfo: TokenInfo;
    balance: number;
    rawBalance: string;
    totalIn?: number;
    totalOut?: number;
}

declare interface TokenInfo {
    address: string;
    decimals: string;
    name: string;
    owner: string;
    symbol: string;
    totalSupply: string;
    lastUpdated: number;
    issuancesCount: number;
    holdersCount: number;
    image?: string;
    description?: string;
    website?: string;
    twitter?: string;
    facebook?: string;
    coingecko?: string;
    ethTransfersCount: number;
    price: boolean | PriceInfo | unknown;
    publicTags?: string[];
    txsCount?: number;
    transfersCount?: number;
}

export declare type TransferParams = WalletTxParams & {
    gasLimit?: BigNumber;
    gasPrice?: BigNumber;
    maxFeePerGas?: BigNumber;
    maxPriorityFeePerGas?: BigNumber;
    data?: string;
    from: string;
    nonce?: number;
};

export declare const wrapMethodWithNetworkSwitch: <T extends (...args: any[]) => any>(func: T, provider: ExternalProvider, chainId: ChainId) => T;

export { }
