import { CallOverrides } from "@ethersproject/contracts";
import { ChainId } from "../chain";
import { ContractService } from "../common";
import { Context } from "../context";
import { Address, GenericAsset, Position } from "../types";
import { IronBankAdapter } from "./adapters/ironbank";
import { IRegistryAdapter, RegistryV2Adapter } from "./adapters/registry";
export declare const LensAbi: string[];
export declare type Adapters<T extends ChainId> = {
    vaults: {
        v1: IRegistryAdapter;
        v2: RegistryV2Adapter<T>;
    };
    ironBank: IronBankAdapter<T>;
};
/**
 * [[LensService]] provides access to all yearn's assets and user positions.
 * It's implemented in the form of a contract that lives on all networks
 * supported by yearn.
 */
export declare class LensService<T extends ChainId> extends ContractService<T> {
    static abi: string[];
    constructor(chainId: T, ctx: Context);
    get adapters(): Adapters<T>;
    /**
     * Get most up-to-date address of the Lens contract for a particular chain id.
     * @param chainId
     * @returns address
     */
    static addressByChain(chainId: ChainId): string;
    /**
     * Get all the adapter addresses attached to Lens.
     * @param overrides
     * @returns list of registry addresses
     */
    getAdapters(overrides?: CallOverrides): Promise<string[]>;
    /**
     * Get all the assets from all the adapters attached to Lens.
     * @param overrides
     * @returns list of assets
     */
    getAssets(overrides?: CallOverrides): Promise<GenericAsset[]>;
    /**
     * Get all positions of a particular assets for all the assets in all the
     * adapters attached to lens.
     * @param address
     * @param overrides
     * @returns list of user positions
     */
    getPositions(address: string, overrides?: CallOverrides): Promise<Position[]>;
    /**
     * Get all the assets from a specific Lens adapter.
     * @param adapter
     * @param overrides
     * @returns list of assets
     */
    getAssetsFromAdapter(adapter: Address, overrides?: CallOverrides): Promise<GenericAsset[]>;
}
