import { CallOverrides } from "@ethersproject/contracts";
import { ChainId } from "../../chain";
import { ContractService } from "../../common";
import { Context } from "../../context";
import { Address, Position, VaultDynamic, VaultStatic } from "../../types";
export interface IRegistryAdapter {
    assetsStatic(addresses?: Address[], overrides?: CallOverrides): Promise<VaultStatic[]>;
    assetsDynamic(addresses?: Address[], overrides?: CallOverrides): Promise<VaultDynamic[]>;
    positionsOf(address: Address, addresses?: Address[], overrides?: CallOverrides): Promise<Position[]>;
    tokens(overrides?: CallOverrides): Promise<Address[]>;
}
export declare class RegistryV2Adapter<T extends ChainId> extends ContractService<T> implements IRegistryAdapter {
    static abi: string[];
    constructor(chainId: T, ctx: Context);
    /**
     * Get most up-to-date address of the Vault V2 adapter contract for a
     * particular chain id.
     * @param chainId
     * @returns address
     */
    static addressByChain(chainId: ChainId): string;
    /**
     * Get the static part of Vault assets.
     * @param addresses filter, if not provided all assets are returned
     * @param overrides
     * @returns static
     */
    assetsStatic(addresses?: Address[], overrides?: CallOverrides): Promise<VaultStatic[]>;
    /**
     * Get the dynamic part of Vault assets.
     * @param addresses filter, if not provided all assets are returned
     * @param overrides
     * @returns dynamic
     */
    assetsDynamic(addresses?: Address[], overrides?: CallOverrides): Promise<VaultDynamic[]>;
    /**
     * Get all Vault asset positions for a particular address.
     * @param address
     * @param addresses filter, if not provided all positions are returned
     * @param overrides
     * @returns
     */
    positionsOf(address: Address, addresses?: Address[], overrides?: CallOverrides): Promise<Position[]>;
    /**
     * Get all Vault underlying token addresses.
     * @param overrides
     * @returns
     */
    tokens(overrides?: CallOverrides): Promise<Address[]>;
}
