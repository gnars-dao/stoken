import { Contract, ContractInterface } from "@ethersproject/contracts";
import Emittery from "emittery";
import { ChainId } from "./chain";
import { Context } from "./context";
import { Address } from "./types";
import { Yearn } from "./yearn";
export declare class Service<E = {}> {
    ctx: Context;
    chainId: ChainId;
    events: Emittery<E>;
    constructor(chainId: ChainId, ctx: Context);
}
export declare class ServiceInterface<T extends ChainId, E = {}> extends Service<E> {
    protected yearn: Yearn<T>;
    constructor(yearn: Yearn<T>, chainId: T, ctx: Context);
}
/**
 * Contract that supports two different providers to differentiate read and
 * write operations.
 */
export declare class WrappedContract {
    address: Address;
    abi: ContractInterface;
    read: Contract;
    write: Contract;
    constructor(address: Address, abi: ContractInterface, ctx: Context);
}
/**
 * A service that has a contract representation on chain.
 */
export declare class ContractService<T extends ChainId, E = {}> extends Service<E> {
    static abi: string[];
    address: string;
    contract: WrappedContract;
    constructor(address: Address, chainId: T, ctx: Context);
}
