import { CallOverrides } from "@ethersproject/contracts";
import { TransactionResponse } from "@ethersproject/providers";
import { ChainId } from "../chain";
import { ServiceInterface } from "../common";
import { Address, Integer, TokenMetadata, TypedMap, Usdc, Vault } from "../types";
import { Balance, Icon, IconMap, Token } from "../types";
export declare class TokenInterface<C extends ChainId> extends ServiceInterface<C> {
    private cachedFetcherSupported;
    /**
     * Get exchange rate between two tokens.
     * @param from
     * @param to
     * @returns exchange rate
     */
    price(from: Address, to: Address): Promise<Integer>;
    /**
     * Get the suggested Usdc exchange rate for an token.
     * @param token
     * @param overrides
     * @returns Usdc exchange rate (6 decimals)
     */
    priceUsdc<T extends Address>(token: T, overrides?: CallOverrides): Promise<Usdc>;
    /**
     * Get the suggested Usdc exchange rate for list of tokens.
     * @param tokens
     * @param overrides
     * @returns Usdc exchange rate map (6 decimals)
     */
    priceUsdc<T extends Address>(tokens: T[], overrides?: CallOverrides): Promise<TypedMap<T, Usdc>>;
    /**
     * Fetch token balances from the {@link TokenInterface.supported} list
     * for a particular address.
     * @param address
     */
    balances(address: Address): Promise<Balance[]>;
    /**
     * Fetch all the tokens supported by the zapper protocol along with some basic
     * metadata.
     * @returns list of tokens supported by the zapper protocol.
     */
    supported(): Promise<Token[]>;
    /**
     * Approve vault to spend a token on zapIn
     * @param vault
     * @param token
     * @param amount
     * @param account
     * @returns transaction
     */
    approve(vault: Vault, token: Address, amount: Integer, account: Address): Promise<TransactionResponse | Boolean>;
    /**
     * Approve vault to spend a vault token on zapOut
     * @param vault
     * @param token
     * @param account
     * @returns transaction
     */
    approveZapOut(vault: Vault, token: Address, account: Address): Promise<TransactionResponse | Boolean>;
    /**
     * Get an icon url for a particular address.
     * @param address
     */
    icon<T extends Address>(address: T): Icon;
    /**
     * Get a map of icons for a list of addresses.
     * @param addresses
     */
    icon<T extends Address>(addresses: T[]): IconMap<T>;
    private cachedFetcher;
    metadata(addresses?: Address[]): Promise<TokenMetadata[]>;
}
