import { ChainId } from "../chain";
import { ServiceInterface } from "../common";
import { Address, Integer } from "../types";
import { SimulationOptions, TransactionOutcome } from "../types/custom/simulation";
/**
 * [[SimulationInterface]] allows the simulation of ethereum transactions using Tenderly's api.
 * This allows us to know information before executing a transaction on mainnet.
 * For example it can simulate how much slippage is likely to be experienced when withdrawing from a vault,
 * or how many underlying tokens the user will receive upon withdrawing share tokens.
 */
export declare class SimulationInterface<T extends ChainId> extends ServiceInterface<T> {
    private simulationExecutor;
    deposit(from: Address, sellToken: Address, amount: Integer, toVault: Address, options?: SimulationOptions): Promise<TransactionOutcome>;
    withdraw(from: Address, fromVault: Address, amount: Integer, toToken: Address, options?: SimulationOptions): Promise<TransactionOutcome>;
    private approve;
    private depositNeedsApproving;
    private directDeposit;
    private zapIn;
    private directWithdraw;
    private zapOut;
    private simulateZapApprovalTransaction;
}
