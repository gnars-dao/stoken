import * as core from "@shapeshiftoss/hdwallet-core";
import { AddEthereumChainParameter } from "@shapeshiftoss/hdwallet-core";
export declare function isMetaMask(wallet: core.HDWallet): wallet is MetaMaskHDWallet;
export declare class MetaMaskHDWalletInfo implements core.HDWalletInfo, core.ETHWalletInfo {
    readonly _supportsBTCInfo = false;
    readonly _supportsETHInfo = true;
    readonly _supportsCosmosInfo = false;
    readonly _supportsBinanceInfo = false;
    readonly _supportsRippleInfo = false;
    readonly _supportsEosInfo = false;
    readonly _supportsFioInfo = false;
    readonly _supportsThorchainInfo = false;
    readonly _supportsSecretInfo = false;
    readonly _supportsKavaInfo = false;
    readonly _supportsTerraInfo = false;
    getVendor(): string;
    hasOnDevicePinEntry(): boolean;
    hasOnDevicePassphrase(): boolean;
    hasOnDeviceDisplay(): boolean;
    hasOnDeviceRecovery(): boolean;
    hasNativeShapeShift(srcCoin: core.Coin, dstCoin: core.Coin): boolean;
    supportsBip44Accounts(): boolean;
    supportsOfflineSigning(): boolean;
    supportsBroadcast(): boolean;
    describePath(msg: core.DescribePath): core.PathDescription;
    ethNextAccountPath(msg: core.ETHAccountPath): core.ETHAccountPath | undefined;
    ethSupportsNetwork(chainId: number): Promise<boolean>;
    ethSupportsSecureTransfer(): Promise<boolean>;
    ethSupportsNativeShapeShift(): boolean;
    ethSupportsEIP1559(): Promise<boolean>;
    ethGetAccountPaths(msg: core.ETHGetAccountPath): Array<core.ETHAccountPath>;
}
export declare class MetaMaskHDWallet implements core.HDWallet, core.ETHWallet {
    readonly _supportsETH = true;
    readonly _supportsETHInfo = true;
    readonly _supportsBTCInfo = false;
    readonly _supportsBTC = false;
    readonly _supportsCosmosInfo = false;
    readonly _supportsCosmos = false;
    readonly _supportsEthSwitchChain = true;
    readonly _supportsAvalanche = true;
    readonly _supportsOptimism = true;
    readonly _supportsBSC = true;
    readonly _supportsPolygon = true;
    readonly _supportsGnosis = true;
    readonly _supportsArbitrum = true;
    readonly _supportsArbitrumNova = true;
    readonly _supportsOsmosisInfo = false;
    readonly _supportsOsmosis = false;
    readonly _supportsBinanceInfo = false;
    readonly _supportsBinance = false;
    readonly _supportsDebugLink = false;
    readonly _isPortis = false;
    readonly _isMetaMask = true;
    readonly _supportsRippleInfo = false;
    readonly _supportsRipple = false;
    readonly _supportsEosInfo = false;
    readonly _supportsEos = false;
    readonly _supportsFioInfo = false;
    readonly _supportsFio = false;
    readonly _supportsThorchainInfo = false;
    readonly _supportsThorchain = false;
    readonly _supportsSecretInfo = false;
    readonly _supportsSecret = false;
    readonly _supportsKava = false;
    readonly _supportsKavaInfo = false;
    readonly _supportsTerra = false;
    readonly _supportsTerraInfo = false;
    info: MetaMaskHDWalletInfo & core.HDWalletInfo;
    ethAddress?: string | null;
    provider: any;
    constructor(provider: unknown);
    getFeatures(): Promise<Record<string, any>>;
    isLocked(): Promise<boolean>;
    getVendor(): string;
    getModel(): Promise<string>;
    getLabel(): Promise<string>;
    initialize(): Promise<void>;
    hasOnDevicePinEntry(): boolean;
    hasOnDevicePassphrase(): boolean;
    hasOnDeviceDisplay(): boolean;
    hasOnDeviceRecovery(): boolean;
    hasNativeShapeShift(srcCoin: core.Coin, dstCoin: core.Coin): boolean;
    supportsBip44Accounts(): boolean;
    supportsOfflineSigning(): boolean;
    supportsBroadcast(): boolean;
    clearSession(): Promise<void>;
    ping(msg: core.Ping): Promise<core.Pong>;
    sendPin(pin: string): Promise<void>;
    sendPassphrase(passphrase: string): Promise<void>;
    sendCharacter(charater: string): Promise<void>;
    sendWord(word: string): Promise<void>;
    cancel(): Promise<void>;
    wipe(): Promise<void>;
    reset(msg: core.ResetDevice): Promise<void>;
    recover(msg: core.RecoverDevice): Promise<void>;
    loadDevice(msg: core.LoadDevice): Promise<void>;
    describePath(msg: core.DescribePath): core.PathDescription;
    getPublicKeys(msg: Array<core.GetPublicKey>): Promise<Array<core.PublicKey | null>>;
    isInitialized(): Promise<boolean>;
    disconnect(): Promise<void>;
    ethSupportsNetwork(chainId?: number): Promise<boolean>;
    ethGetChainId(): Promise<number | null>;
    ethAddChain(params: AddEthereumChainParameter): Promise<void>;
    ethSwitchChain(params: AddEthereumChainParameter): Promise<void>;
    ethSupportsSecureTransfer(): Promise<boolean>;
    ethSupportsNativeShapeShift(): boolean;
    ethSupportsEIP1559(): Promise<boolean>;
    ethGetAccountPaths(msg: core.ETHGetAccountPath): Array<core.ETHAccountPath>;
    ethNextAccountPath(msg: core.ETHAccountPath): core.ETHAccountPath | undefined;
    ethGetAddress(msg: core.ETHGetAddress): Promise<string | null>;
    ethSignTx(msg: core.ETHSignTx): Promise<core.ETHSignedTx | null>;
    ethSendTx(msg: core.ETHSignTx): Promise<core.ETHTxHash | null>;
    ethSignMessage(msg: core.ETHSignMessage): Promise<core.ETHSignedMessage | null>;
    ethVerifyMessage(msg: core.ETHVerifyMessage): Promise<boolean | null>;
    getDeviceID(): Promise<string>;
    getFirmwareVersion(): Promise<string>;
}
//# sourceMappingURL=metamask.d.ts.map