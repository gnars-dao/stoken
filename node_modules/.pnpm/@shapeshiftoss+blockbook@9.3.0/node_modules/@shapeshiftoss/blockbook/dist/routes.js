"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.RegisterRoutes = void 0;
/* tslint:disable */
/* eslint-disable */
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
const runtime_1 = require("@tsoa/runtime");
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
const controller_1 = require("./controller");
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
const models = {
    "BlockbookInfo": {
        "dataType": "refObject",
        "properties": {
            "coin": { "dataType": "string", "required": true },
            "host": { "dataType": "string", "required": true },
            "version": { "dataType": "string", "required": true },
            "gitCommit": { "dataType": "string", "required": true },
            "buildTime": { "dataType": "string", "required": true },
            "syncMode": { "dataType": "boolean", "required": true },
            "initialSync": { "dataType": "boolean", "required": true },
            "inSync": { "dataType": "boolean", "required": true },
            "bestHeight": { "dataType": "double", "required": true },
            "lastBlockTime": { "dataType": "string", "required": true },
            "inSyncMempool": { "dataType": "boolean", "required": true },
            "lastMempoolTime": { "dataType": "string", "required": true },
            "mempoolSize": { "dataType": "double", "required": true },
            "decimals": { "dataType": "double", "required": true },
            "dbSize": { "dataType": "double", "required": true },
            "dbSizeFromColumns": { "dataType": "double" },
            "dbColumns": { "dataType": "array", "array": { "dataType": "any" } },
            "about": { "dataType": "string", "required": true },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "BackendInfo": {
        "dataType": "refObject",
        "properties": {
            "error": { "dataType": "string" },
            "chain": { "dataType": "string" },
            "blocks": { "dataType": "double" },
            "headers": { "dataType": "double" },
            "bestBlockHash": { "dataType": "string" },
            "difficulty": { "dataType": "string" },
            "sizeOnDisk": { "dataType": "double" },
            "version": { "dataType": "string" },
            "subversion": { "dataType": "string" },
            "protocolVersion": { "dataType": "string" },
            "timeOffset": { "dataType": "double" },
            "warnings": { "dataType": "string" },
            "consensus": { "dataType": "any" },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "Info": {
        "dataType": "refObject",
        "properties": {
            "blockbook": { "ref": "BlockbookInfo", "required": true },
            "backend": { "ref": "BackendInfo", "required": true },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "BlockIndex": {
        "dataType": "refObject",
        "properties": {
            "hash": { "dataType": "string", "required": true },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "Vin": {
        "dataType": "refObject",
        "properties": {
            "txid": { "dataType": "string" },
            "vout": { "dataType": "double" },
            "sequence": { "dataType": "double" },
            "n": { "dataType": "double", "required": true },
            "addresses": { "dataType": "array", "array": { "dataType": "string" } },
            "isAddress": { "dataType": "boolean", "required": true },
            "value": { "dataType": "string" },
            "hex": { "dataType": "string" },
            "asm": { "dataType": "string" },
            "coinbase": { "dataType": "string" },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "Vout": {
        "dataType": "refObject",
        "properties": {
            "value": { "dataType": "string" },
            "n": { "dataType": "double", "required": true },
            "spent": { "dataType": "boolean" },
            "spentTxId": { "dataType": "string" },
            "spentIndex": { "dataType": "double" },
            "spentHeight": { "dataType": "double" },
            "hex": { "dataType": "string" },
            "asm": { "dataType": "string" },
            "addresses": { "dataType": "union", "subSchemas": [{ "dataType": "array", "array": { "dataType": "string" } }, { "dataType": "enum", "enums": [null] }], "required": true },
            "isAddress": { "dataType": "boolean", "required": true },
            "type": { "dataType": "string" },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "MultiTokenValue": {
        "dataType": "refObject",
        "properties": {
            "id": { "dataType": "string", "required": true },
            "value": { "dataType": "string", "required": true },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "TokenTransfer": {
        "dataType": "refObject",
        "properties": {
            "type": { "dataType": "string", "required": true },
            "from": { "dataType": "string", "required": true },
            "to": { "dataType": "string", "required": true },
            "contract": { "dataType": "string", "required": true },
            "name": { "dataType": "string", "required": true },
            "symbol": { "dataType": "string", "required": true },
            "decimals": { "dataType": "double", "required": true },
            "value": { "dataType": "string", "required": true },
            "multiTokenValues": { "dataType": "array", "array": { "dataType": "refObject", "ref": "MultiTokenValue" } },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "EthereumSpecific": {
        "dataType": "refObject",
        "properties": {
            "status": { "dataType": "double", "required": true },
            "nonce": { "dataType": "double", "required": true },
            "gasLimit": { "dataType": "double", "required": true },
            "gasUsed": { "dataType": "union", "subSchemas": [{ "dataType": "double" }, { "dataType": "enum", "enums": [null] }], "required": true },
            "gasPrice": { "dataType": "string", "required": true },
            "data": { "dataType": "string" },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "Tx": {
        "dataType": "refObject",
        "properties": {
            "txid": { "dataType": "string", "required": true },
            "version": { "dataType": "double" },
            "lockTime": { "dataType": "double" },
            "vin": { "dataType": "array", "array": { "dataType": "refObject", "ref": "Vin" }, "required": true },
            "vout": { "dataType": "array", "array": { "dataType": "refObject", "ref": "Vout" }, "required": true },
            "blockHash": { "dataType": "string" },
            "blockHeight": { "dataType": "double", "required": true },
            "confirmations": { "dataType": "double", "required": true },
            "blockTime": { "dataType": "double", "required": true },
            "size": { "dataType": "double" },
            "value": { "dataType": "string", "required": true },
            "valueIn": { "dataType": "string" },
            "fees": { "dataType": "string" },
            "hex": { "dataType": "string" },
            "rbf": { "dataType": "boolean" },
            "tokenTransfers": { "dataType": "array", "array": { "dataType": "refObject", "ref": "TokenTransfer" } },
            "coinSpecificData": { "dataType": "any" },
            "ethereumSpecific": { "ref": "EthereumSpecific" },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "Token": {
        "dataType": "refObject",
        "properties": {
            "type": { "dataType": "string", "required": true },
            "name": { "dataType": "string", "required": true },
            "path": { "dataType": "string" },
            "contract": { "dataType": "string" },
            "transfers": { "dataType": "double", "required": true },
            "symbol": { "dataType": "string" },
            "decimals": { "dataType": "double" },
            "balance": { "dataType": "string" },
            "totalReceived": { "dataType": "string" },
            "totalSent": { "dataType": "string" },
            "ids": { "dataType": "array", "array": { "dataType": "string" } },
            "multiTokenValues": { "dataType": "array", "array": { "dataType": "refObject", "ref": "MultiTokenValue" } },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "Erc20Contract": {
        "dataType": "refObject",
        "properties": {
            "contract": { "dataType": "string", "required": true },
            "name": { "dataType": "string", "required": true },
            "symbol": { "dataType": "string", "required": true },
            "decimals": { "dataType": "double", "required": true },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "Address": {
        "dataType": "refObject",
        "properties": {
            "page": { "dataType": "double" },
            "totalPages": { "dataType": "double" },
            "itemsOnPage": { "dataType": "double" },
            "address": { "dataType": "string", "required": true },
            "balance": { "dataType": "string", "required": true },
            "totalReceived": { "dataType": "string" },
            "totalSent": { "dataType": "string" },
            "unconfirmedBalance": { "dataType": "string", "required": true },
            "unconfirmedTxs": { "dataType": "double", "required": true },
            "txs": { "dataType": "double", "required": true },
            "nonTokenTxs": { "dataType": "double" },
            "transactions": { "dataType": "array", "array": { "dataType": "refObject", "ref": "Tx" } },
            "txids": { "dataType": "array", "array": { "dataType": "string" } },
            "nonce": { "dataType": "string" },
            "usedTokens": { "dataType": "double" },
            "tokens": { "dataType": "array", "array": { "dataType": "refObject", "ref": "Token" } },
            "erc20Contract": { "ref": "Erc20Contract" },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "Xpub": {
        "dataType": "refAlias",
        "type": { "ref": "Address", "validators": {} },
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "Utxo": {
        "dataType": "refObject",
        "properties": {
            "txid": { "dataType": "string", "required": true },
            "vout": { "dataType": "double", "required": true },
            "value": { "dataType": "string", "required": true },
            "height": { "dataType": "double" },
            "confirmations": { "dataType": "double", "required": true },
            "address": { "dataType": "string" },
            "path": { "dataType": "string" },
            "locktime": { "dataType": "double" },
            "coinbase": { "dataType": "boolean" },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "Block": {
        "dataType": "refObject",
        "properties": {
            "page": { "dataType": "double" },
            "totalPages": { "dataType": "double" },
            "itemsOnPage": { "dataType": "double" },
            "hash": { "dataType": "string", "required": true },
            "previousBlockHash": { "dataType": "string" },
            "nextBlockHash": { "dataType": "string" },
            "height": { "dataType": "double", "required": true },
            "confirmations": { "dataType": "double", "required": true },
            "size": { "dataType": "double", "required": true },
            "time": { "dataType": "double" },
            "version": { "dataType": "double", "required": true },
            "merkleRoot": { "dataType": "string", "required": true },
            "nonce": { "dataType": "string", "required": true },
            "bits": { "dataType": "string", "required": true },
            "difficulty": { "dataType": "string", "required": true },
            "txCount": { "dataType": "double", "required": true },
            "tx": { "dataType": "array", "array": { "dataType": "string" } },
            "txs": { "dataType": "array", "array": { "dataType": "refObject", "ref": "Tx" } },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "SendTx": {
        "dataType": "refObject",
        "properties": {
            "result": { "dataType": "string", "required": true },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "BalanceHistory": {
        "dataType": "refObject",
        "properties": {
            "time": { "dataType": "double", "required": true },
            "txs": { "dataType": "double", "required": true },
            "received": { "dataType": "string", "required": true },
            "sent": { "dataType": "string", "required": true },
            "sentToSelf": { "dataType": "string", "required": true },
            "rates": { "dataType": "nestedObjectLiteral", "nestedProperties": {}, "additionalProperties": { "dataType": "double" } },
            "txid": { "dataType": "string" },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    "NetworkFee": {
        "dataType": "refObject",
        "properties": {
            "feePerTx": { "dataType": "string" },
            "feePerUnit": { "dataType": "string" },
            "feeLimit": { "dataType": "string" },
        },
        "additionalProperties": false,
    },
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
};
const validationService = new runtime_1.ValidationService(models);
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
function RegisterRoutes(app) {
    // ###########################################################################################################
    //  NOTE: If you do not see routes for all of your controllers in this file, then you might not have informed tsoa of where to look
    //      Please look into the "controllerPathGlobs" config option described in the readme: https://github.com/lukeautry/tsoa
    // ###########################################################################################################
    app.get('/api/v2', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.getInfo)), function Blockbook_getInfo(request, response, next) {
        const args = {};
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.getInfo.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    app.get('/api/v2/block-index/:height', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.getBlockHash)), function Blockbook_getBlockHash(request, response, next) {
        const args = {
            height: { "in": "path", "name": "height", "required": true, "dataType": "double" },
        };
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.getBlockHash.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    app.get('/api/v2/tx/:txid', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.getTransaction)), function Blockbook_getTransaction(request, response, next) {
        const args = {
            txid: { "in": "path", "name": "txid", "required": true, "dataType": "string" },
        };
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.getTransaction.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    app.get('/api/v2/tx-specific/:txid', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.getTransactionSpecific)), function Blockbook_getTransactionSpecific(request, response, next) {
        const args = {
            txid: { "in": "path", "name": "txid", "required": true, "dataType": "string" },
        };
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.getTransactionSpecific.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    app.get('/api/v2/address/:address', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.getAddress)), function Blockbook_getAddress(request, response, next) {
        const args = {
            address: { "in": "path", "name": "address", "required": true, "dataType": "string" },
            page: { "in": "query", "name": "page", "dataType": "double" },
            pageSize: { "in": "query", "name": "pageSize", "dataType": "double" },
            from: { "in": "query", "name": "from", "dataType": "double" },
            to: { "in": "query", "name": "to", "dataType": "double" },
            details: { "in": "query", "name": "details", "dataType": "union", "subSchemas": [{ "dataType": "enum", "enums": ["basic"] }, { "dataType": "enum", "enums": ["tokens"] }, { "dataType": "enum", "enums": ["tokenBalances"] }, { "dataType": "enum", "enums": ["txids"] }, { "dataType": "enum", "enums": ["txslight"] }, { "dataType": "enum", "enums": ["txs"] }] },
            contract: { "in": "query", "name": "contract", "dataType": "string" },
        };
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.getAddress.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    app.get('/api/v2/xpub/:xpub', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.getXpub)), function Blockbook_getXpub(request, response, next) {
        const args = {
            xpub: { "in": "path", "name": "xpub", "required": true, "dataType": "string" },
            page: { "in": "query", "name": "page", "dataType": "double" },
            pageSize: { "in": "query", "name": "pageSize", "dataType": "double" },
            from: { "in": "query", "name": "from", "dataType": "double" },
            to: { "in": "query", "name": "to", "dataType": "double" },
            details: { "in": "query", "name": "details", "dataType": "union", "subSchemas": [{ "dataType": "enum", "enums": ["basic"] }, { "dataType": "enum", "enums": ["tokens"] }, { "dataType": "enum", "enums": ["tokenBalances"] }, { "dataType": "enum", "enums": ["txids"] }, { "dataType": "enum", "enums": ["txs"] }] },
            tokens: { "in": "query", "name": "tokens", "dataType": "union", "subSchemas": [{ "dataType": "enum", "enums": ["nonzero"] }, { "dataType": "enum", "enums": ["used"] }, { "dataType": "enum", "enums": ["derived"] }] },
        };
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.getXpub.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    app.get('/api/v2/utxo/:account', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.getUtxo)), function Blockbook_getUtxo(request, response, next) {
        const args = {
            account: { "in": "path", "name": "account", "required": true, "dataType": "string" },
            confirmed: { "in": "query", "name": "confirmed", "dataType": "boolean" },
        };
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.getUtxo.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    app.get('/api/v2/block/:block', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.getBlock)), function Blockbook_getBlock(request, response, next) {
        const args = {
            block: { "in": "path", "name": "block", "required": true, "dataType": "string" },
            page: { "in": "query", "name": "page", "dataType": "double" },
        };
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.getBlock.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    app.get('/api/v2/sendtx/:hex', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.sendTransaction)), function Blockbook_sendTransaction(request, response, next) {
        const args = {
            hex: { "in": "path", "name": "hex", "required": true, "dataType": "string" },
        };
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.sendTransaction.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    app.get('/api/v2/balancehistory/:account', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.balanceHistory)), function Blockbook_balanceHistory(request, response, next) {
        const args = {
            account: { "in": "path", "name": "account", "required": true, "dataType": "string" },
            from: { "in": "query", "name": "from", "dataType": "double" },
            to: { "in": "query", "name": "to", "dataType": "double" },
            fiatcurrency: { "in": "query", "name": "fiatcurrency", "dataType": "string" },
            groupBy: { "in": "query", "name": "groupBy", "dataType": "double" },
        };
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.balanceHistory.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    app.get('/api/v2/estimatefees', ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook)), ...((0, runtime_1.fetchMiddlewares)(controller_1.Blockbook.prototype.estimateFees)), function Blockbook_estimateFees(request, response, next) {
        const args = {
            blockTimes: { "in": "query", "name": "blockTimes", "required": true, "dataType": "array", "array": { "dataType": "double" } },
        };
        // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
        let validatedArgs = [];
        try {
            validatedArgs = getValidatedArgs(args, request, response);
            const controller = new controller_1.Blockbook();
            const promise = controller.estimateFees.apply(controller, validatedArgs);
            promiseHandler(controller, promise, response, undefined, next);
        }
        catch (err) {
            return next(err);
        }
    });
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    function isController(object) {
        return 'getHeaders' in object && 'getStatus' in object && 'setStatus' in object;
    }
    function promiseHandler(controllerObj, promise, response, successStatus, next) {
        return Promise.resolve(promise)
            .then((data) => {
            let statusCode = successStatus;
            let headers;
            if (isController(controllerObj)) {
                headers = controllerObj.getHeaders();
                statusCode = controllerObj.getStatus() || statusCode;
            }
            // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
            returnHandler(response, statusCode, data, headers);
        })
            .catch((error) => next(error));
    }
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    function returnHandler(response, statusCode, data, headers = {}) {
        if (response.headersSent) {
            return;
        }
        Object.keys(headers).forEach((name) => {
            response.set(name, headers[name]);
        });
        if (data && typeof data.pipe === 'function' && data.readable && typeof data._read === 'function') {
            data.pipe(response);
        }
        else if (data !== null && data !== undefined) {
            response.status(statusCode || 200).json(data);
        }
        else {
            response.status(statusCode || 204).end();
        }
    }
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    function responder(response) {
        return function (status, data, headers) {
            returnHandler(response, status, data, headers);
        };
    }
    ;
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
    function getValidatedArgs(args, request, response) {
        const fieldErrors = {};
        const values = Object.keys(args).map((key) => {
            const name = args[key].name;
            switch (args[key].in) {
                case 'request':
                    return request;
                case 'query':
                    return validationService.ValidateParam(args[key], request.query[name], name, fieldErrors, undefined, { "noImplicitAdditionalProperties": "throw-on-extras" });
                case 'path':
                    return validationService.ValidateParam(args[key], request.params[name], name, fieldErrors, undefined, { "noImplicitAdditionalProperties": "throw-on-extras" });
                case 'header':
                    return validationService.ValidateParam(args[key], request.header(name), name, fieldErrors, undefined, { "noImplicitAdditionalProperties": "throw-on-extras" });
                case 'body':
                    return validationService.ValidateParam(args[key], request.body, name, fieldErrors, undefined, { "noImplicitAdditionalProperties": "throw-on-extras" });
                case 'body-prop':
                    return validationService.ValidateParam(args[key], request.body[name], name, fieldErrors, 'body.', { "noImplicitAdditionalProperties": "throw-on-extras" });
                case 'formData':
                    if (args[key].dataType === 'file') {
                        return validationService.ValidateParam(args[key], request.file, name, fieldErrors, undefined, { "noImplicitAdditionalProperties": "throw-on-extras" });
                    }
                    else if (args[key].dataType === 'array' && args[key].array.dataType === 'file') {
                        return validationService.ValidateParam(args[key], request.files, name, fieldErrors, undefined, { "noImplicitAdditionalProperties": "throw-on-extras" });
                    }
                    else {
                        return validationService.ValidateParam(args[key], request.body[name], name, fieldErrors, undefined, { "noImplicitAdditionalProperties": "throw-on-extras" });
                    }
                case 'res':
                    return responder(response);
            }
        });
        if (Object.keys(fieldErrors).length > 0) {
            throw new runtime_1.ValidateError(fieldErrors, '');
        }
        return values;
    }
    // WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
}
exports.RegisterRoutes = RegisterRoutes;
// WARNING: This file was auto-generated with tsoa. Please do not modify it. Re-run tsoa to re-generate this file: https://github.com/lukeautry/tsoa
//# sourceMappingURL=routes.js.map