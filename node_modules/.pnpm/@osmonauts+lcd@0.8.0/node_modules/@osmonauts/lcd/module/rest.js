import _defineProperty from "@babel/runtime/helpers/esm/defineProperty";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

import axios from 'axios';
export class LCDClient {
  constructor({
    restEndpoint
  }) {
    _defineProperty(this, "restEndpoint", void 0);

    _defineProperty(this, "instance", void 0);

    this.restEndpoint = restEndpoint.endsWith('/') ? restEndpoint : `${restEndpoint}/`;
    this.instance = axios.create({
      baseURL: this.restEndpoint,
      timeout: 10000,
      headers: {}
    });
    this.get = this.get.bind(this);
    this.post = this.post.bind(this);
  }

  get(endpoint, opts = {}) {
    return new Promise(async (resolve, reject) => {
      try {
        const response = await this.instance.get(endpoint, _objectSpread({
          timeout: 10000
        }, opts));

        if (response && response.data) {
          resolve(response.data);
        } else {
          reject('no response data');
        }
      } catch (e) {
        return reject(e);
      }
    });
  }

  post(endpoint, body = {}, opts = {}) {
    return new Promise(async (resolve, reject) => {
      try {
        const response = await this.instance.post(endpoint, body, _objectSpread({
          timeout: 10000
        }, opts));

        if (response && response.data) {
          resolve(response.data);
        } else {
          reject('no response data');
        }
      } catch (e) {
        return reject(e);
      }
    });
  }

}