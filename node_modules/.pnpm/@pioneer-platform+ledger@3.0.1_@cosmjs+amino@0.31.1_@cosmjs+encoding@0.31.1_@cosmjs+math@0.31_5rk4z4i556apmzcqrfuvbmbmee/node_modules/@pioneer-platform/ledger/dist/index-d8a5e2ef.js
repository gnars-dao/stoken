const t = (e) => {
  class r extends Error {
    constructor(c, s, n) {
      if (super(c || e, n), Object.setPrototypeOf(this, r.prototype), this.name = e, s)
        for (const o in s)
          this[o] = s[o];
      if (n && O(n) && "cause" in n && !("cause" in this)) {
        const o = n.cause;
        this.cause = o, "stack" in o && (this.stack = this.stack + `
CAUSE: ` + o.stack);
      }
    }
  }
  return r;
};
function O(e) {
  return typeof e == "object";
}
const _ = t("LockedDeviceError"), x = t("DisconnectedDevice"), N = t("DisconnectedDeviceDuringOperation"), D = t("NetworkDown"), S = t("UserRefusedOnDevice"), C = t("TransportOpenUserCancelled"), A = t("TransportInterfaceNotAvailable"), d = t("TransportRaceCondition"), u = t("TransportWebUSBGestureRequired"), R = t("LedgerAPI4xx"), L = t("LedgerAPI5xx");
var i;
(function(e) {
  e.Unknown = "Unknown", e.LocationServicesDisabled = "LocationServicesDisabled", e.LocationServicesUnauthorized = "LocationServicesUnauthorized", e.BluetoothScanStartFailed = "BluetoothScanStartFailed";
})(i || (i = {}));
class U extends Error {
  constructor(r, a) {
    const c = "TransportError";
    super(r || c), this.name = c, this.message = r, this.stack = new Error(r).stack, this.id = a;
  }
}
const E = {
  ACCESS_CONDITION_NOT_FULFILLED: 38916,
  ALGORITHM_NOT_SUPPORTED: 38020,
  CLA_NOT_SUPPORTED: 28160,
  CODE_BLOCKED: 38976,
  CODE_NOT_INITIALIZED: 38914,
  COMMAND_INCOMPATIBLE_FILE_STRUCTURE: 27009,
  CONDITIONS_OF_USE_NOT_SATISFIED: 27013,
  CONTRADICTION_INVALIDATION: 38928,
  CONTRADICTION_SECRET_CODE_STATUS: 38920,
  CUSTOM_IMAGE_BOOTLOADER: 26159,
  CUSTOM_IMAGE_EMPTY: 26158,
  FILE_ALREADY_EXISTS: 27273,
  FILE_NOT_FOUND: 37892,
  GP_AUTH_FAILED: 25344,
  HALTED: 28586,
  INCONSISTENT_FILE: 37896,
  INCORRECT_DATA: 27264,
  INCORRECT_LENGTH: 26368,
  INCORRECT_P1_P2: 27392,
  INS_NOT_SUPPORTED: 27904,
  DEVICE_NOT_ONBOARDED: 27911,
  DEVICE_NOT_ONBOARDED_2: 26129,
  INVALID_KCV: 38021,
  INVALID_OFFSET: 37890,
  LICENSING: 28482,
  LOCKED_DEVICE: 21781,
  MAX_VALUE_REACHED: 38992,
  MEMORY_PROBLEM: 37440,
  MISSING_CRITICAL_PARAMETER: 26624,
  NO_EF_SELECTED: 37888,
  NOT_ENOUGH_MEMORY_SPACE: 27268,
  OK: 36864,
  PIN_REMAINING_ATTEMPTS: 25536,
  REFERENCED_DATA_NOT_FOUND: 27272,
  SECURITY_STATUS_NOT_SATISFIED: 27010,
  TECHNICAL_PROBLEM: 28416,
  UNKNOWN_APDU: 27906,
  USER_REFUSED_ON_DEVICE: 21761,
  NOT_ENOUGH_SPACE: 20738
};
function T(e) {
  switch (e) {
    case 26368:
      return "Incorrect length";
    case 26624:
      return "Missing critical parameter";
    case 27010:
      return "Security not satisfied (dongle locked or have invalid access rights)";
    case 27013:
      return "Condition of use not satisfied (denied by the user?)";
    case 27264:
      return "Invalid data received";
    case 27392:
      return "Invalid parameter received";
    case 21781:
      return "Locked device";
  }
  if (28416 <= e && e <= 28671)
    return "Internal error, please report";
}
function I(e) {
  const r = Object.keys(E).find((n) => E[n] === e) || "UNKNOWN_ERROR", a = T(e) || r, c = e.toString(16), s = `Ledger device: ${a} (0x${c})`;
  if (e === E.LOCKED_DEVICE)
    throw new _(s);
  this.name = "TransportStatusError", this.message = s, this.stack = new Error(s).stack, this.statusCode = e, this.statusText = r;
}
I.prototype = new Error();
export {
  x as DisconnectedDevice,
  N as DisconnectedDeviceDuringOperation,
  i as HwTransportErrorType,
  R as LedgerAPI4xx,
  L as LedgerAPI5xx,
  _ as LockedDeviceError,
  D as NetworkDown,
  E as StatusCodes,
  U as TransportError,
  A as TransportInterfaceNotAvailable,
  C as TransportOpenUserCancelled,
  d as TransportRaceCondition,
  I as TransportStatusError,
  u as TransportWebUSBGestureRequired,
  S as UserRefusedOnDevice,
  t as createCustomErrorClass,
  T as getAltStatusMessage
};
