import { Chain } from '@pioneer-platform/types';
import type { SignClientTypes } from '@walletconnect/types';

export declare const AVALACHE_MAINNET_ID = "eip155:43114";

export declare const BINANCE_MAINNET_ID = "cosmos:Binance-Chain-Tigris";

export declare const BSC_MAINNET_ID = "eip155:56";

export declare interface ClientMetadata {
    name: string;
    description: string;
    url: string;
    icons: string[];
}

export declare const DEFAULT_APP_METADATA: ClientMetadata;

export declare enum DEFAULT_COSMOS_EVENTS {
}

/**
 * COSMOS
 */
export declare enum DEFAULT_COSMOS_METHODS {
    COSMOS_SIGN_DIRECT = "cosmos_signDirect",
    COSMOS_SIGN_AMINO = "cosmos_signAmino",
    COSMOS_GET_ACCOUNTS = "cosmos_getAccounts"
}

/**
 * EIP155
 */
export declare enum DEFAULT_EIP155_METHODS {
    ETH_SEND_TRANSACTION = "eth_sendTransaction",
    ETH_SIGN = "eth_sign",
    PERSONAL_SIGN = "personal_sign",
    ETH_SIGN_TYPED_DATA = "eth_signTypedData"
}

export declare enum DEFAULT_EIP_155_EVENTS {
    ETH_CHAIN_CHANGED = "chainChanged",
    ETH_ACCOUNTS_CHANGED = "accountsChanged"
}

export declare const DEFAULT_LOGGER = "debug";

export declare enum DEFAULT_NEAR_EVENTS {
}

/**
 * NEAR
 */
export declare enum DEFAULT_NEAR_METHODS {
    NEAR_SIGN_IN = "near_signIn",
    NEAR_SIGN_OUT = "near_signOut",
    NEAR_GET_ACCOUNTS = "near_getAccounts",
    NEAR_SIGN_AND_SEND_TRANSACTION = "near_signAndSendTransaction",
    NEAR_SIGN_AND_SEND_TRANSACTIONS = "near_signAndSendTransactions"
}

export declare enum DEFAULT_POLKADOT_EVENTS {
}

/**
 * POLKADOT
 */
export declare enum DEFAULT_POLKADOT_METHODS {
    POLKADOT_SIGN_TRANSACTION = "polkadot_signTransaction",
    POLKADOT_SIGN_MESSAGE = "polkadot_signMessage"
}

export declare const DEFAULT_RELAY_URL = "wss://relay.walletconnect.com";

export declare enum DEFAULT_SOLANA_EVENTS {
}

/**
 * SOLANA
 */
export declare enum DEFAULT_SOLANA_METHODS {
    SOL_SIGN_TRANSACTION = "solana_signTransaction",
    SOL_SIGN_MESSAGE = "solana_signMessage"
}

export declare const ETHEREUM_MAINNET_ID = "eip155:1";

declare const getWalletconnect: (chains: Chain[], walletConnectProjectId?: string, walletconnectOptions?: SignClientTypes.Options) => Promise<{
    session: any;
    accounts: any[];
    client: any;
} | undefined>;

export declare const THORCHAIN_MAINNET_ID = "cosmos:thorchain";

export declare type Walletconnect = Awaited<ReturnType<typeof getWalletconnect>>;

export declare const walletconnectWallet: {
    connectMethodName: "connectWalletconnect";
    connect: ({ addChain, config: { ethplorerApiKey, walletConnectProjectId, covalentApiKey, stagenet }, }: {
        addChain: any;
        config: {
            covalentApiKey?: string | undefined;
            ethplorerApiKey?: string | undefined;
            walletConnectProjectId?: string | undefined;
            stagenet?: boolean | undefined;
        };
    }) => (chains: (typeof WC_SUPPORTED_CHAINS)[number][], walletconnectOptions?: SignClientTypes.Options) => Promise<boolean>;
};

export declare const WC_SUPPORTED_CHAINS: readonly [Chain.Binance, Chain.BinanceSmartChain, Chain.Ethereum, Chain.THORChain, Chain.Avalanche];

export { }
