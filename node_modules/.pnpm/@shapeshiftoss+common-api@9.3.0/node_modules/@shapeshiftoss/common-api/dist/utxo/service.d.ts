import { Blockbook, Tx as BlockbookTx } from '@shapeshiftoss/blockbook';
import { AddressFormatter, BaseAPI, SendTxBody } from '../';
import { Account, API, NetworkFees, RawTx, Tx, TxHistory, Utxo } from './models';
export interface ServiceArgs {
    blockbook: Blockbook;
    rpcUrl: string;
    isXpub: (pubkey: string) => boolean;
    addressFormatter?: AddressFormatter;
}
export declare class Service implements Omit<BaseAPI, 'getInfo'>, API {
    readonly isXpub: (pubkey: string) => boolean;
    private readonly blockbook;
    private readonly rpcUrl;
    private formatAddress;
    constructor(args: ServiceArgs);
    getAccount(pubkey: string): Promise<Account>;
    getTxHistory(pubkey: string, cursor?: string, pageSize?: number): Promise<TxHistory>;
    getTransaction(txid: string): Promise<Tx>;
    getRawTransaction(txid: string): Promise<RawTx>;
    getUtxos(pubkey: string): Promise<Array<Utxo>>;
    sendTx(body: SendTxBody): Promise<string>;
    getNetworkFees(): Promise<NetworkFees>;
    handleBlock(hash: string): Promise<Array<BlockbookTx>>;
    handleTransaction(tx: BlockbookTx): Tx;
}
//# sourceMappingURL=service.d.ts.map