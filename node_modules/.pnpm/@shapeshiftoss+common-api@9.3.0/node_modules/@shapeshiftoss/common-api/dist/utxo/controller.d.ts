import { Controller } from 'tsoa';
import { BaseAPI, BaseInfo, SendTxBody } from '../';
import { API, Account, Tx, RawTx, NetworkFees, Utxo, TxHistory } from './models';
import { Service } from './service';
export declare class UTXO extends Controller implements BaseAPI, API {
    static service: Service;
    /**
     * Get information about the running coinstack
     *
     * @returns {Promise<BaseInfo>} coinstack info
     */
    getInfo(): Promise<BaseInfo>;
    /**
     * Get account details by address or extended public key
     *
     * @param {string} pubkey account address or extended public key
     *
     * @returns {Promise<Account>} account details
     */
    getAccount(pubkey: string): Promise<Account>;
    /**
     * Get transaction history by address or extended public key
     *
     * @param {string} pubkey account address or extended public key
     * @param {string} [cursor] the cursor returned in previous query (base64 encoded json object with a 'page' property)
     * @param {number} [pageSize] page size (10 by default)
     *
     * @returns {Promise<TxHistory>} transaction history
     */
    getTxHistory(pubkey: string, cursor?: string, pageSize?: number): Promise<TxHistory>;
    /**
     * Get all unspent transaction outputs for an address or extended public key
     *
     * @param {string} pubkey account address or extended public key
     *
     * @returns {Promise<Array<Utxo>>} account utxos
     */
    getUtxos(pubkey: string): Promise<Array<Utxo>>;
    /**
     * Get transaction details
     *
     * @param {string} txid transaction hash
     *
     * @returns {Promise<Tx>} transaction payload
     */
    getTransaction(txid: string): Promise<Tx>;
    /**
     * Get raw transaction details directly from the node
     *
     * @param {string} txid transaction hash
     *
     * @returns {Promise<RawTx>} transaction payload
     */
    getRawTransaction(txid: string): Promise<RawTx>;
    /**
     * Sends raw transaction to be broadcast to the node.
     *
     * @param {SendTxBody} body serialized raw transaction hex
     *
     * @returns {Promise<string>} transaction id
     */
    sendTx(body: SendTxBody): Promise<string>;
    /**
     * Get current recommended network fees to use in a transaction
     *
     * @returns {Promise<NetworkFees>} current network fees
     */
    getNetworkFees(): Promise<NetworkFees>;
}
//# sourceMappingURL=controller.d.ts.map