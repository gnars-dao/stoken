"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var UTXO_1;
Object.defineProperty(exports, "__esModule", { value: true });
exports.UTXO = void 0;
const tsoa_1 = require("tsoa");
const NETWORK = process.env.NETWORK;
if (!NETWORK)
    throw new Error('NETWORK env var not set');
let UTXO = UTXO_1 = class UTXO extends tsoa_1.Controller {
    /**
     * Get information about the running coinstack
     *
     * @returns {Promise<BaseInfo>} coinstack info
     */
    async getInfo() {
        return {
            network: NETWORK,
        };
    }
    /**
     * Get account details by address or extended public key
     *
     * @param {string} pubkey account address or extended public key
     *
     * @returns {Promise<Account>} account details
     */
    async getAccount(pubkey) {
        return UTXO_1.service.getAccount(pubkey);
    }
    /**
     * Get transaction history by address or extended public key
     *
     * @param {string} pubkey account address or extended public key
     * @param {string} [cursor] the cursor returned in previous query (base64 encoded json object with a 'page' property)
     * @param {number} [pageSize] page size (10 by default)
     *
     * @returns {Promise<TxHistory>} transaction history
     */
    async getTxHistory(pubkey, cursor, pageSize = 10) {
        return UTXO_1.service.getTxHistory(pubkey, cursor, pageSize);
    }
    /**
     * Get all unspent transaction outputs for an address or extended public key
     *
     * @param {string} pubkey account address or extended public key
     *
     * @returns {Promise<Array<Utxo>>} account utxos
     */
    async getUtxos(pubkey) {
        return UTXO_1.service.getUtxos(pubkey);
    }
    /**
     * Get transaction details
     *
     * @param {string} txid transaction hash
     *
     * @returns {Promise<Tx>} transaction payload
     */
    async getTransaction(txid) {
        return UTXO_1.service.getTransaction(txid);
    }
    /**
     * Get raw transaction details directly from the node
     *
     * @param {string} txid transaction hash
     *
     * @returns {Promise<RawTx>} transaction payload
     */
    async getRawTransaction(txid) {
        return UTXO_1.service.getRawTransaction(txid);
    }
    /**
     * Sends raw transaction to be broadcast to the node.
     *
     * @param {SendTxBody} body serialized raw transaction hex
     *
     * @returns {Promise<string>} transaction id
     */
    async sendTx(body) {
        return UTXO_1.service.sendTx(body);
    }
    /**
     * Get current recommended network fees to use in a transaction
     *
     * @returns {Promise<NetworkFees>} current network fees
     */
    async getNetworkFees() {
        return UTXO_1.service.getNetworkFees();
    }
};
__decorate([
    (0, tsoa_1.Get)('info/')
], UTXO.prototype, "getInfo", null);
__decorate([
    (0, tsoa_1.Response)(400, 'Bad Request'),
    (0, tsoa_1.Response)(422, 'Validation Error'),
    (0, tsoa_1.Response)(500, 'Internal Server Error'),
    (0, tsoa_1.Get)('account/{pubkey}'),
    __param(0, (0, tsoa_1.Path)())
], UTXO.prototype, "getAccount", null);
__decorate([
    (0, tsoa_1.Response)(400, 'Bad Request'),
    (0, tsoa_1.Response)(422, 'Validation Error'),
    (0, tsoa_1.Response)(500, 'Internal Server Error'),
    (0, tsoa_1.Get)('account/{pubkey}/txs'),
    __param(0, (0, tsoa_1.Path)()),
    __param(1, (0, tsoa_1.Query)()),
    __param(2, (0, tsoa_1.Query)())
], UTXO.prototype, "getTxHistory", null);
__decorate([
    (0, tsoa_1.Response)(400, 'Bad Request'),
    (0, tsoa_1.Response)(422, 'Validation Error'),
    (0, tsoa_1.Response)(500, 'Internal Server Error'),
    (0, tsoa_1.Get)('account/{pubkey}/utxos'),
    __param(0, (0, tsoa_1.Path)())
], UTXO.prototype, "getUtxos", null);
__decorate([
    (0, tsoa_1.Response)(400, 'Bad Request'),
    (0, tsoa_1.Response)(422, 'Validation Error'),
    (0, tsoa_1.Response)(500, 'Internal Server Error'),
    (0, tsoa_1.Get)('tx/{txid}'),
    __param(0, (0, tsoa_1.Path)())
], UTXO.prototype, "getTransaction", null);
__decorate([
    (0, tsoa_1.Response)(400, 'Bad Request'),
    (0, tsoa_1.Response)(422, 'Validation Error'),
    (0, tsoa_1.Response)(500, 'Internal Server Error'),
    (0, tsoa_1.Get)('tx/{txid}/raw'),
    __param(0, (0, tsoa_1.Path)())
], UTXO.prototype, "getRawTransaction", null);
__decorate([
    (0, tsoa_1.Response)(400, 'Bad Request'),
    (0, tsoa_1.Response)(422, 'Validation Error'),
    (0, tsoa_1.Response)(500, 'Internal Server Error'),
    (0, tsoa_1.Post)('send/'),
    __param(0, (0, tsoa_1.Body)())
], UTXO.prototype, "sendTx", null);
__decorate([
    (0, tsoa_1.Response)(400, 'Bad Request'),
    (0, tsoa_1.Response)(500, 'Internal Server Error'),
    (0, tsoa_1.Get)('/fees')
], UTXO.prototype, "getNetworkFees", null);
UTXO = UTXO_1 = __decorate([
    (0, tsoa_1.Route)('api/v1'),
    (0, tsoa_1.Tags)('v1')
], UTXO);
exports.UTXO = UTXO;
//# sourceMappingURL=controller.js.map