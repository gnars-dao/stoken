import { ConnectionHandler } from './websocket';
export declare type AddressFormatter = (address: string) => string;
export declare type BlockHandler<T = any, T2 = any> = (block: T) => Promise<{
    txs: T2;
}>;
export declare type TransactionHandler<T = any, T2 = any> = (tx: T) => Promise<{
    addresses: Array<string>;
    tx: T2;
}>;
export interface RegistryArgs {
    addressFormatter?: AddressFormatter;
    blockHandler: BlockHandler;
    transactionHandler: TransactionHandler;
}
/**
 * The registry keeps track of all client websocket connections and their associated addresses that have been registered.
 * Upon receiving new block or transaction messages from the server side websocket connection to the node,
 * unchained transaction payloads will be sent to any clients that have an address registered that was found in the transaction.
 */
export declare class Registry {
    private clients;
    private addresses;
    private handleBlock;
    private handleTransaction;
    private formatAddress;
    private logger;
    constructor(args: RegistryArgs);
    private static toId;
    private static fromId;
    /**
     * Subscribe to new pending/confirmed transactions for addresses by clientId
     *
     * @param clientId unique client uuid
     * @param subscriptionId unique identifier for a set of addresses
     * @param connection websocket client connection
     * @param addresses list of addresses to subscribe to
     */
    subscribe(clientId: string, subscriptionId: string, connection: ConnectionHandler, addresses: Array<string>): void;
    /**
     * Unsubscribe from new pending/confirmed transactions for addresses by clientId
     *
     * @param clientId unique client uuid
     * @param subscriptionId unique identifier for a set of addresses
     * @param addresses list of addresses to unsubscribe (empty array will unsubscribe from all currently registered addresses)
     */
    unsubscribe(clientId: string, subscriptionId: string, addresses: Array<string>): void;
    onBlock(msg: unknown): Promise<void>;
    onTransaction(msg: unknown): Promise<void>;
}
//# sourceMappingURL=registry.d.ts.map