import WebSocket from 'ws';
import { Registry } from './registry';
export interface RequestPayload {
    subscriptionId: string;
    method: 'subscribe' | 'unsubscribe' | 'ping';
    data?: TxsTopicData;
}
export interface ErrorResponse {
    subscriptionId: string;
    type: 'error';
    message: string;
}
export declare type Topics = 'txs';
export interface TxsTopicData {
    topic: 'txs';
    addresses: Array<string>;
}
export interface MessageResponse {
    address: string;
    data: string;
    subscriptionId: string;
}
export interface Methods {
    subscribe: (subscriptionId: string, data?: any) => void;
    unsubscribe: (subscriptionId: string, data?: any) => void;
}
export declare class ConnectionHandler {
    readonly clientId: string;
    private readonly websocket;
    private readonly registry;
    private readonly routes;
    private readonly pingInterval;
    private pingTimeout?;
    private subscriptionIds;
    private logger;
    private constructor();
    static start(websocket: WebSocket, registry: Registry): void;
    private heartbeat;
    private sendError;
    private onMessage;
    private close;
    private handleSubscribeTxs;
    private handleUnsubscribeTxs;
    publish(subscriptionId: string, address: string, data: string): void;
}
//# sourceMappingURL=websocket.d.ts.map