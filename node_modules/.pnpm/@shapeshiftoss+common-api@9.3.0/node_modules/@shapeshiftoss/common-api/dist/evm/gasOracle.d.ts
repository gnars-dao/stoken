import { ethers } from 'ethers';
import { Logger } from '@shapeshiftoss/logger';
import { Fees } from './models';
import { NewBlock } from '@shapeshiftoss/blockbook';
export interface GasOracleArgs {
    logger: Logger;
    provider: ethers.providers.JsonRpcProvider;
    coinstack: string;
    totalBlocks?: number;
}
declare type EstimatedFees = Record<string, Fees>;
export declare class GasOracle {
    readonly coinstack: string;
    private readonly totalBlocks;
    private readonly logger;
    private readonly provider;
    private latestBlockTag;
    private feesByBlock;
    private newBlocksQueue;
    private baseFeePerGas?;
    constructor(args: GasOracleArgs);
    start(): Promise<void>;
    getBaseFeePerGas(): string | undefined;
    estimateFees(percentiles: Array<number>, blockCount?: number): Promise<EstimatedFees>;
    onBlock(newBlock: NewBlock): Promise<void>;
    processBlocks(): Promise<void>;
    private update;
    private sync;
    private averageAtPercentile;
}
export {};
//# sourceMappingURL=gasOracle.d.ts.map