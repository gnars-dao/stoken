"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GasOracle = void 0;
const ethers_1 = require("ethers");
class GasOracle {
    constructor(args) {
        this.feesByBlock = new Map();
        this.newBlocksQueue = [];
        this.logger = args.logger.child({ namespace: ['gasOracle'] });
        this.provider = args.provider;
        this.coinstack = args.coinstack;
        this.totalBlocks = args.totalBlocks ?? 20;
        // specify latestBlockTag as supported by the coinstack node
        switch (args.coinstack) {
            case 'avalanche':
            case 'optimism':
            case 'gnosis':
                this.latestBlockTag = 'latest';
                break;
            case 'ethereum':
            case 'bnbsmartchain':
            case 'polygon':
                this.latestBlockTag = 'pending';
                break;
            default:
                throw new Error(`no coinstack support for: ${args.coinstack}`);
        }
    }
    async start() {
        const height = await this.provider.getBlockNumber();
        const length = this.latestBlockTag === 'pending' ? this.totalBlocks - 1 : this.totalBlocks;
        const startingBlock = height - length;
        const blocks = Array.from({ length }, (_, index) => index + startingBlock + 1);
        // add pending block tag if supported
        this.latestBlockTag === 'pending' && blocks.unshift(this.latestBlockTag);
        // populate initial blocks
        await Promise.all(blocks.map(async (blockNumber) => this.update(blockNumber)));
        // start process blocks thread
        this.processBlocks();
    }
    getBaseFeePerGas() {
        return this.baseFeePerGas;
    }
    // estimate fees based on the current oracle state
    async estimateFees(percentiles, blockCount = 20) {
        // sync oracle state as a safety measure in case websocket updates stop/fail
        await this.sync();
        if (this.feesByBlock.size !== this.totalBlocks) {
            this.logger.error(`oracle is out of sync... (current blocks: ${this.feesByBlock.size}, expected blocks: ${this.totalBlocks})`);
        }
        // get latest X block fees as specified by blockCount
        const blockFees = Array.from(this.feesByBlock.entries())
            .sort(([blockA], [blockB]) => {
            return Number(blockB) - Number(blockA);
        })
            .slice(0, blockCount)
            .map(([, fees]) => fees);
        const estimatedFees = percentiles.reduce((estimatedFees, percentile) => {
            const { gasPrice, maxPriorityFee } = this.averageAtPercentile(blockFees, percentile);
            estimatedFees[percentile.toString()] = {
                gasPrice: gasPrice.toFixed(0),
                ...(this.baseFeePerGas && {
                    maxFeePerGas: (maxPriorityFee + Number(this.baseFeePerGas)).toFixed(0),
                    maxPriorityFeePerGas: maxPriorityFee.toFixed(0),
                }),
            };
            return estimatedFees;
        }, {});
        return estimatedFees;
    }
    // onBlock websocket handler enqueues new blocks
    async onBlock(newBlock) {
        this.newBlocksQueue.push(newBlock);
    }
    // processBlock sequentially processes the newBlocksQueue
    async processBlocks() {
        const newBlock = this.newBlocksQueue.shift();
        // throttle processing on empty newBlocksQueue
        if (!newBlock) {
            setTimeout(() => this.processBlocks(), 1000);
            return;
        }
        try {
            await this.sync();
        }
        catch (err) {
            this.logger.error(err, { block: newBlock }, 'failed to handle block');
        }
        finally {
            this.processBlocks();
        }
    }
    // update oracle state for the specified block
    async update(blockNumber) {
        try {
            const numOrTag = blockNumber === this.latestBlockTag ? blockNumber : ethers_1.ethers.utils.hexValue(blockNumber);
            const block = (await this.provider.send('eth_getBlockByNumber', [numOrTag, true]));
            if (!block)
                throw new Error('no block found');
            const txFees = block.transactions.reduce((txFees, tx) => {
                tx.gasPrice && txFees.gasPrices.push(Number(tx.gasPrice));
                tx.maxPriorityFeePerGas && txFees.maxPriorityFees.push(Number(tx.maxPriorityFeePerGas));
                return txFees;
            }, { gasPrices: [], maxPriorityFees: [] });
            this.feesByBlock.set(Number(block.number).toString(), {
                pending: blockNumber === 'pending',
                baseFeePerGas: block.baseFeePerGas ? Number(block.baseFeePerGas) : undefined,
                gasPrices: txFees.gasPrices.sort((a, b) => a - b),
                maxPriorityFees: txFees.maxPriorityFees.sort((a, b) => a - b),
            });
            // keep track of current baseFeePerGas for latest block tag
            if (blockNumber === this.latestBlockTag) {
                switch (this.coinstack) {
                    // avalanche exposes baseFeePerGas at a different rpc endpoint
                    case 'avalanche': {
                        const baseFee = (await this.provider.send('eth_baseFee', []));
                        this.baseFeePerGas = Number(baseFee).toString();
                        break;
                    }
                    default:
                        this.baseFeePerGas = block.baseFeePerGas ? Number(block.baseFeePerGas).toString() : undefined;
                }
            }
        }
        catch (err) {
            this.logger.error(err, { blockNumber }, 'failed to update');
        }
    }
    // sync oracle state by adding any missing blocks and pruning any excess blocks
    async sync() {
        try {
            const { number } = (await this.provider.send('eth_getBlockByNumber', [this.latestBlockTag, false]));
            const length = this.totalBlocks;
            const latest = Number(number);
            const startingBlock = latest - length;
            const blocks = Array.from({ length }, (_, index) => index + startingBlock + 1);
            // validate oracle state
            await Promise.all(blocks.map(async (block) => {
                const fees = this.feesByBlock.get(block.toString());
                if (fees && (!fees.pending || (this.latestBlockTag === 'pending' && block === latest)))
                    return;
                // add fees for any missing blocks or a pending block that has been confirmed
                await this.update(block === latest ? this.latestBlockTag : block);
            }));
            // prune check
            if (this.feesByBlock.size <= this.totalBlocks)
                return;
            // get sorted list of current blocks in descending order
            const sortedFeesByBlock = Array.from(this.feesByBlock.keys()).sort((a, b) => {
                return Number(b) - Number(a);
            });
            // find the index of what should be the oldest block stored
            const oldestIndex = sortedFeesByBlock.indexOf((Number(sortedFeesByBlock[0]) - this.totalBlocks).toString());
            // prune any blocks older than the oldest block if found
            if (oldestIndex !== -1) {
                sortedFeesByBlock.slice(oldestIndex).forEach((block) => this.feesByBlock.delete(block.toString()));
            }
        }
        catch (err) {
            this.logger.error(err, 'failed to validate');
        }
    }
    averageAtPercentile(blockFees, percentile) {
        const valueAtPercentile = (fees) => {
            if (!fees.length)
                return 0;
            const rank = Math.ceil((percentile / 100) * fees.length);
            const value = fees[rank - 1];
            return value;
        };
        const sum = blockFees.reduce((sum, fees) => {
            sum.gasPrice += valueAtPercentile(fees.gasPrices);
            sum.maxPriorityFee += valueAtPercentile(fees.maxPriorityFees);
            return sum;
        }, { gasPrice: 0, maxPriorityFee: 0 });
        const avg = {
            gasPrice: Math.ceil(sum.gasPrice / blockFees.length),
            maxPriorityFee: Math.ceil(sum.maxPriorityFee / blockFees.length),
        };
        return avg;
    }
}
exports.GasOracle = GasOracle;
//# sourceMappingURL=gasOracle.js.map