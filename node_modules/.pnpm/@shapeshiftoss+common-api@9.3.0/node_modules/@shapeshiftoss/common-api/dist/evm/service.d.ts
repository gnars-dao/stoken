import { ethers } from 'ethers';
import { Blockbook, Tx as BlockbookTx } from '@shapeshiftoss/blockbook';
import { Logger } from '@shapeshiftoss/logger';
import { BaseAPI, SendTxBody } from '../';
import { Account, API, Tx, TxHistory, GasFees, GasEstimate, TokenMetadata, TokenType } from './models';
export interface ServiceArgs {
    blockbook: Blockbook;
    explorerApiKey?: string;
    explorerApiUrl: string;
    logger: Logger;
    provider: ethers.providers.JsonRpcProvider;
    rpcUrl: string;
}
export declare class Service implements Omit<BaseAPI, 'getInfo'>, API {
    private readonly blockbook;
    private readonly explorerApiKey?;
    private readonly explorerApiUrl;
    private readonly logger;
    private readonly provider;
    private readonly rpcUrl;
    private readonly abiInterface;
    constructor(args: ServiceArgs);
    getAccount(pubkey: string): Promise<Account>;
    getTxHistory(pubkey: string, cursor?: string, pageSize?: number): Promise<TxHistory>;
    getTransaction(txid: string): Promise<Tx>;
    estimateGas(data: string, from: string, to: string, value: string): Promise<GasEstimate>;
    getGasFees(): Promise<GasFees>;
    sendTx(body: SendTxBody): Promise<string>;
    handleBlock(hash: string, retryCount?: number): Promise<Array<BlockbookTx>>;
    handleTransaction(tx: BlockbookTx): Tx;
    /**
     * format transaction and call debug_traceTransaction to extract internal transactions on newly confirmed transactions only.
     *
     * __not suitable for use on historical transactions when using a full node as the evm state is purged__
     */
    handleTransactionWithInternalTrace(tx: BlockbookTx): Promise<Tx>;
    private fetchInternalTxsTrace;
    /**
     * format transaction and fetch internal transactions from external explorer api
     *
     * __suitable for use on historical transactions that are unable to be traced on a full node__
     */
    private handleTransactionWithInternal;
    private fetchInternalTxsByTxid;
    private getInternalTxs;
    private fetchInternalTxsByAddress;
    private getTxs;
    getTokenMetadata(address: string, id: string, type: TokenType): Promise<TokenMetadata>;
}
//# sourceMappingURL=service.d.ts.map