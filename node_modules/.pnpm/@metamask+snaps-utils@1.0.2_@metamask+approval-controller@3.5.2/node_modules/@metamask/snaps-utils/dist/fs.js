"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useTemporaryFile = exports.validateDirPath = exports.validateFilePath = exports.validateOutfileName = exports.getOutfilePath = exports.readJsonFile = exports.isFile = exports.isDirectory = void 0;
const fs_1 = require("fs");
const os_1 = __importDefault(require("os"));
const path_1 = __importDefault(require("path"));
const json_1 = require("./json");
const virtual_file_1 = require("./virtual-file");
/**
 * Checks whether the given path string resolves to an existing directory, and
 * optionally creates the directory if it doesn't exist.
 *
 * @param pathString - The path string to check.
 * @param createDir - Whether to create the directory if it doesn't exist.
 * @returns Whether the given path is an existing directory.
 */
async function isDirectory(pathString, createDir) {
    try {
        const stats = await fs_1.promises.stat(pathString);
        return stats.isDirectory();
    }
    catch (error) {
        if (error.code === 'ENOENT') {
            if (!createDir) {
                return false;
            }
            await fs_1.promises.mkdir(pathString, { recursive: true });
            return true;
        }
        return false;
    }
}
exports.isDirectory = isDirectory;
/**
 * Checks whether the given path string resolves to an existing file.
 *
 * @param pathString - The path string to check.
 * @returns Whether the given path is an existing file.
 */
async function isFile(pathString) {
    try {
        const stats = await fs_1.promises.stat(pathString);
        return stats.isFile();
    }
    catch (error) {
        return false;
    }
}
exports.isFile = isFile;
/**
 * Reads a `.json` file, parses its contents, and returns them.
 *
 * @param pathString - The path to the JSON file.
 * @returns The parsed contents of the JSON file.
 */
async function readJsonFile(pathString) {
    if (!pathString.endsWith('.json')) {
        throw new Error('The specified file must be a ".json" file.');
    }
    let file;
    try {
        file = await (0, virtual_file_1.readVirtualFile)(pathString, 'utf8');
    }
    catch (error) {
        if (error.code === 'ENOENT') {
            throw new Error(`Could not find '${pathString}'. Please ensure that the file exists.`);
        }
        throw error;
    }
    file.result = (0, json_1.parseJson)(file.toString());
    return file;
}
exports.readJsonFile = readJsonFile;
/**
 * Gets the complete out file path from an output file name and parent
 * directory path.
 *
 * @param outDir - The path to the out file's parent directory.
 * @param outFileName - The out file's name.
 * @returns The complete path to the out file.
 */
function getOutfilePath(outDir, outFileName) {
    return path_1.default.join(outDir, outFileName || 'bundle.js');
}
exports.getOutfilePath = getOutfilePath;
/**
 * Ensures that the outfile name is just a `.js` file name.
 * Throws on validation failure.
 *
 * @param filename - The file name to validate.
 * @returns `true` if validation succeeded.
 * @throws If the file name is invalid.
 */
function validateOutfileName(filename) {
    if (!filename.endsWith('.js') ||
        filename === '.js' ||
        path_1.default.basename(filename) !== filename) {
        throw new Error(`Invalid outfile name: ${filename}. Must be a .js file`);
    }
    return true;
}
exports.validateOutfileName = validateOutfileName;
/**
 * Validates a file path. Throws on validation failure.
 *
 * @param filePath - The file path to validate.
 * @returns `true` if validation succeeded.
 * @throws If the path does not resolve to a file.
 */
async function validateFilePath(filePath) {
    const exists = await isFile(filePath);
    if (!exists) {
        throw new Error(`Invalid params: '${filePath}' is not a file or does not exist.`);
    }
    return true;
}
exports.validateFilePath = validateFilePath;
/**
 * Validates a directory path. Throws on validation failure.
 *
 * @param dirPath - The directory path to validate.
 * @param createDir - Whether to create the directory if it doesn't exist.
 * @returns `true` if validation succeeded or the directory was created.
 * @throws If the directory does not exist or could not be created.
 */
async function validateDirPath(dirPath, createDir) {
    const exists = await isDirectory(dirPath, createDir);
    if (!exists) {
        throw new Error(`Invalid params: '${dirPath}' is not a directory or could not be created.`);
    }
    return true;
}
exports.validateDirPath = validateDirPath;
/**
 * Creates a temporary file with a given name and content, writes it to disk and calls the provided function.
 * This function handles deletion of the temporary file after usage.
 *
 * @param fileName - The name of the temporary file.
 * @param fileContents - The content of the temporary file.
 * @param fn - The callback function to call when the temporary file has been created.
 */
async function useTemporaryFile(fileName, fileContents, fn) {
    const filePath = path_1.default.join(os_1.default.tmpdir(), fileName);
    await fs_1.promises.mkdir(path_1.default.dirname(filePath), { recursive: true });
    await fs_1.promises.writeFile(filePath, fileContents);
    try {
        await fn(filePath);
    }
    finally {
        if (await isFile(filePath)) {
            await fs_1.promises.unlink(filePath);
        }
    }
}
exports.useTemporaryFile = useTemporaryFile;
//# sourceMappingURL=fs.js.map