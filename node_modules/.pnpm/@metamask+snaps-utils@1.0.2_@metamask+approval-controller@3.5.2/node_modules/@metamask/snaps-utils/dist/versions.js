"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveVersionRange = exports.getTargetVersion = exports.DEFAULT_REQUESTED_SNAP_VERSION = void 0;
const utils_1 = require("@metamask/utils");
const semver_1 = require("semver");
const superstruct_1 = require("superstruct");
exports.DEFAULT_REQUESTED_SNAP_VERSION = '*';
/**
 * Return the highest version in the list that satisfies the range, or `null` if
 * none of them do. For the satisfaction check, pre-release versions will only
 * be checked if no satisfactory non-prerelease version is found first.
 *
 * @param versions - The list of version to check.
 * @param versionRange - The SemVer version range to check against.
 * @returns The highest version in the list that satisfies the range,
 * or `null` if none of them do.
 */
function getTargetVersion(versions, versionRange) {
    const maxSatisfyingNonPreRelease = (0, semver_1.maxSatisfying)(versions, versionRange);
    // By default don't use pre-release versions
    if (maxSatisfyingNonPreRelease) {
        return maxSatisfyingNonPreRelease;
    }
    // If no satisfying release version is found by default, try pre-release versions
    return (0, semver_1.maxSatisfying)(versions, versionRange, {
        includePrerelease: true,
    });
}
exports.getTargetVersion = getTargetVersion;
/**
 * Parse a version received by some subject attempting to access a snap.
 *
 * @param version - The received version value.
 * @returns `*` if the version is `undefined` or `latest", otherwise returns
 * the specified version.
 */
function resolveVersionRange(version) {
    if (version === undefined || version === 'latest') {
        return [undefined, exports.DEFAULT_REQUESTED_SNAP_VERSION];
    }
    return (0, superstruct_1.validate)(version, utils_1.VersionRangeStruct);
}
exports.resolveVersionRange = resolveVersionRange;
//# sourceMappingURL=versions.js.map