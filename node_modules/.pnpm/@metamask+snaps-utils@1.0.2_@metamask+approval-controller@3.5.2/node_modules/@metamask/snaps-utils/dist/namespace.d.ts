import { AssertionErrorConstructor } from '@metamask/utils';
import { Infer } from 'superstruct';
export declare const CHAIN_ID_REGEX: RegExp;
export declare const ACCOUNT_ID_REGEX: RegExp;
/**
 * Parse a chain ID string to an object containing the namespace and reference.
 * This validates the chain ID before parsing it.
 *
 * @param chainId - The chain ID to validate and parse.
 * @returns The parsed chain ID.
 */
export declare function parseChainId(chainId: ChainId): {
    namespace: NamespaceId;
    reference: string;
};
/**
 * Parse an account ID to an object containing the chain, chain ID and address.
 * This validates the account ID before parsing it.
 *
 * @param accountId - The account ID to validate and parse.
 * @returns The parsed account ID.
 */
export declare function parseAccountId(accountId: AccountId): {
    chain: {
        namespace: NamespaceId;
        reference: string;
    };
    chainId: ChainId;
    address: string;
};
/**
 * A helper struct for a string with a minimum length of 1 and a maximum length
 * of 40.
 */
export declare const LimitedString: import("superstruct").Struct<string, null>;
/**
 * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.
 */
export declare const ChainIdStruct: import("superstruct").Struct<string, null>;
export declare type ChainId = `${string}:${string}`;
export declare const AccountIdStruct: import("superstruct").Struct<string, null>;
export declare type AccountId = `${ChainId}:${string}`;
export declare const AccountIdArrayStruct: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
/**
 * A chain descriptor.
 */
export declare const ChainStruct: import("superstruct").Struct<{
    name: string;
    id: string;
}, {
    id: import("superstruct").Struct<string, null>;
    name: import("superstruct").Struct<string, null>;
}>;
export declare type Chain = Infer<typeof ChainStruct>;
export declare const NamespaceStruct: import("superstruct").Struct<{
    chains: {
        name: string;
        id: string;
    }[];
    methods?: string[] | undefined;
    events?: string[] | undefined;
}, {
    /**
     * A list of supported chains in the namespace.
     */
    chains: import("superstruct").Struct<{
        name: string;
        id: string;
    }[], import("superstruct").Struct<{
        name: string;
        id: string;
    }, {
        id: import("superstruct").Struct<string, null>;
        name: import("superstruct").Struct<string, null>;
    }>>;
    /**
     * A list of supported RPC methods on the namespace, that a DApp can call.
     */
    methods: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
    /**
     * A list of supported RPC events on the namespace, that a DApp can listen to.
     */
    events: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
}>;
export declare type Namespace = Infer<typeof NamespaceStruct>;
export declare const RequestNamespaceStruct: import("superstruct").Struct<{
    chains: string[];
    methods?: string[] | undefined;
    events?: string[] | undefined;
}, {
    chains: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
    methods: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
    events: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
}>;
export declare type RequestNamespace = Infer<typeof RequestNamespaceStruct>;
export declare const SessionNamespaceStruct: import("superstruct").Struct<{
    chains: string[];
    accounts: string[];
    methods?: string[] | undefined;
    events?: string[] | undefined;
}, {
    accounts: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
    chains: import("superstruct").Struct<string[], import("superstruct").Struct<string, null>>;
    methods: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
    events: import("superstruct").Struct<string[] | undefined, import("superstruct").Struct<string, null>>;
}>;
export declare type SessionNamespace = Infer<typeof SessionNamespaceStruct>;
/**
 * A CAIP-2 namespace, i.e., the first part of a chain ID.
 */
export declare const NamespaceIdStruct: import("superstruct").Struct<string, null>;
export declare type NamespaceId = Infer<typeof NamespaceIdStruct>;
/**
 * An object mapping CAIP-2 namespaces to their values.
 */
export declare const NamespacesStruct: import("superstruct").Struct<Record<string, {
    chains: {
        name: string;
        id: string;
    }[];
    methods?: string[] | undefined;
    events?: string[] | undefined;
}>, null>;
export declare type Namespaces = Infer<typeof NamespacesStruct>;
export declare const SessionStruct: import("superstruct").Struct<{
    namespaces: Record<string, {
        chains: string[];
        accounts: string[];
        methods?: string[] | undefined;
        events?: string[] | undefined;
    }>;
}, {
    namespaces: import("superstruct").Struct<Record<string, {
        chains: string[];
        accounts: string[];
        methods?: string[] | undefined;
        events?: string[] | undefined;
    }>, null>;
}>;
export declare type Session = Infer<typeof SessionStruct>;
/**
 * Asserts that the given value is a valid {@link Session}.
 *
 * @param value - The value to assert.
 * @throws If the value is not a valid {@link Session}.
 */
export declare function assertIsSession(value: unknown): asserts value is Session;
export declare const ConnectArgumentsStruct: import("superstruct").Struct<{
    requiredNamespaces: Record<string, {
        chains: string[];
        methods?: string[] | undefined;
        events?: string[] | undefined;
    }>;
}, {
    requiredNamespaces: import("superstruct").Struct<Record<string, {
        chains: string[];
        methods?: string[] | undefined;
        events?: string[] | undefined;
    }>, null>;
}>;
export declare type ConnectArguments = Infer<typeof ConnectArgumentsStruct>;
export declare const RequestArgumentsStruct: import("superstruct").Struct<{
    method: string;
    params?: Record<string, import("@metamask/utils").Json> | import("@metamask/utils").Json[] | undefined;
    id?: string | number | null | undefined;
    jsonrpc?: "2.0" | undefined;
}, {
    params: import("superstruct").Struct<Record<string, import("@metamask/utils").Json> | import("@metamask/utils").Json[] | undefined, null>;
    method: import("superstruct").Struct<string, null>;
    id: import("superstruct").Struct<string | number | null | undefined, unknown>;
    jsonrpc: import("superstruct").Struct<"2.0" | undefined, unknown>;
}>;
export declare type RequestArguments = Infer<typeof RequestArgumentsStruct>;
export declare const MultiChainRequestStruct: import("superstruct").Struct<{
    request: {
        method: string;
        params?: Record<string, import("@metamask/utils").Json> | import("@metamask/utils").Json[] | undefined;
        id?: string | number | null | undefined;
        jsonrpc?: "2.0" | undefined;
    };
    chainId: string;
}, {
    chainId: import("superstruct").Struct<string, null>;
    request: import("superstruct").Struct<{
        method: string;
        params?: Record<string, import("@metamask/utils").Json> | import("@metamask/utils").Json[] | undefined;
        id?: string | number | null | undefined;
        jsonrpc?: "2.0" | undefined;
    }, {
        params: import("superstruct").Struct<Record<string, import("@metamask/utils").Json> | import("@metamask/utils").Json[] | undefined, null>;
        method: import("superstruct").Struct<string, null>;
        id: import("superstruct").Struct<string | number | null | undefined, unknown>;
        jsonrpc: import("superstruct").Struct<"2.0" | undefined, unknown>;
    }>;
}>;
export declare type MultiChainRequest = Infer<typeof MultiChainRequestStruct>;
/**
 * Check if the given value is a CAIP-2 namespace ID.
 *
 * @param value - The value to check.
 * @returns Whether the value is a CAIP-2 namespace ID.
 */
export declare function isNamespaceId(value: unknown): value is NamespaceId;
/**
 * Check if the given value is a CAIP-2 chain ID.
 *
 * @param value - The value to check.
 * @returns Whether the value is a CAIP-2 chain ID.
 */
export declare function isChainId(value: unknown): value is ChainId;
/**
 * Check if the given value is a CAIP-10 account ID.
 *
 * @param value - The value to check.
 * @returns Whether the value is a CAIP-10 account ID.
 */
export declare function isAccountId(value: unknown): value is AccountId;
/**
 * Check if the given value is an array of CAIP-10 account IDs.
 *
 * @param value - The value to check.
 * @returns Whether the value is an array of CAIP-10 account IDs.
 */
export declare function isAccountIdArray(value: unknown): value is AccountId[];
/**
 * Check if the given value is a {@link ConnectArguments} object.
 *
 * @param value - The value to check.
 * @returns Whether the value is a valid {@link ConnectArguments} object.
 */
export declare function isConnectArguments(value: unknown): value is ConnectArguments;
/**
 * Assert that the given value is a {@link ConnectArguments} object.
 *
 * @param value - The value to check.
 * @throws If the value is not a valid {@link ConnectArguments} object.
 */
export declare function assertIsConnectArguments(value: unknown): asserts value is ConnectArguments;
/**
 * Check if the given value is a {@link MultiChainRequest} object.
 *
 * @param value - The value to check.
 * @returns Whether the value is a valid {@link MultiChainRequest} object.
 */
export declare function isMultiChainRequest(value: unknown): value is MultiChainRequest;
/**
 * Assert that the given value is a {@link MultiChainRequest} object.
 *
 * @param value - The value to check.
 * @throws If the value is not a valid {@link MultiChainRequest} object.
 */
export declare function assertIsMultiChainRequest(value: unknown): asserts value is MultiChainRequest;
/**
 * Check if a value is a {@link Namespace}.
 *
 * @param value - The value to validate.
 * @returns True if the value is a valid {@link Namespace}.
 */
export declare function isNamespace(value: unknown): value is Namespace;
/**
 * Check if a value is an object containing {@link Namespace}s.
 *
 * @param value - The value to validate.
 * @returns True if the value is a valid object containing namespaces.
 */
export declare function isNamespacesObject(value: unknown): value is Namespaces;
/**
 * Assert that the given value is a {@link Namespaces} object.
 *
 * @param value - The value to check.
 * @param ErrorWrapper - The error wrapper to use. Defaults to
 * {@link AssertionError}.
 * @throws If the value is not a valid {@link Namespaces} object.
 */
export declare function assertIsNamespacesObject(value: unknown, ErrorWrapper?: AssertionErrorConstructor): asserts value is Namespaces;
