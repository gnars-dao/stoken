{"version":3,"file":"path.js","sourceRoot":"","sources":["../src/path.ts"],"names":[],"mappings":";;;AAAA,2CAAyC;AAEzC;;;;;GAKG;AACH,4EAA4E;AAC5E,SAAgB,iBAAiB,CAAC,IAAY;IAC5C,IAAA,cAAM,EAAC,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9B,IAAA,cAAM,EACJ,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,EAC7B,SAAS,IAAI,gDAAgD,CAC9D,CAAC;IAEF,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,EAAE;QACzB,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACtB;IACD,OAAO,IAAI,CAAC;AACd,CAAC;AAXD,8CAWC","sourcesContent":["import { assert } from '@metamask/utils';\n\n/**\n * Normalizes relative paths by optionally removing `./` prefix.\n *\n * @param path - Path to make normalize.\n * @returns The same path, with `./` prefix remove.\n */\n// TODO(ritave): Include NodeJS path polyfill and use path.normalize as well\nexport function normalizeRelative(path: string): string {\n  assert(!path.startsWith('/'));\n  assert(\n    path.search(/:|\\/\\//u) === -1,\n    `Path \"${path}\" potentially an URI instead of local relative`,\n  );\n\n  if (path.startsWith('./')) {\n    return path.slice(2);\n  }\n  return path;\n}\n"]}