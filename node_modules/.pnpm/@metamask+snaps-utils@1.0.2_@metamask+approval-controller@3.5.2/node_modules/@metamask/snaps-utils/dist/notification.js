"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertIsMetaMaskNotification = exports.isMetaMaskNotification = exports.MetaMaskNotificationStruct = exports.assertIsEvent = exports.isEvent = exports.EventStruct = void 0;
const utils_1 = require("@metamask/utils");
const superstruct_1 = require("superstruct");
const namespace_1 = require("./namespace");
exports.EventStruct = (0, superstruct_1.object)({
    name: (0, superstruct_1.string)(),
    data: (0, superstruct_1.unknown)(),
});
/**
 * Check if a value is a SIP-2 event.
 *
 * @param value - The value to check.
 * @returns Whether the value is a SIP-2 event.
 */
function isEvent(value) {
    return (0, superstruct_1.is)(value, exports.EventStruct);
}
exports.isEvent = isEvent;
/**
 * Assert that a value is a SIP-2 event.
 *
 * @param value - The value to check.
 * @throws If the value is not a SIP-2 event.
 */
function assertIsEvent(value) {
    (0, utils_1.assertStruct)(value, exports.EventStruct, 'Invalid event');
}
exports.assertIsEvent = assertIsEvent;
exports.MetaMaskNotificationStruct = (0, superstruct_1.object)({
    method: (0, superstruct_1.literal)('multichainHack_metamask_event'),
    params: (0, superstruct_1.object)({
        chainId: namespace_1.ChainIdStruct,
        event: exports.EventStruct,
    }),
});
/**
 * Check if a value is a SIP-2 notification.
 *
 * @param value - The value to check.
 * @returns Whether the value is a SIP-2 notification.
 */
function isMetaMaskNotification(value) {
    return (0, superstruct_1.is)(value, exports.MetaMaskNotificationStruct);
}
exports.isMetaMaskNotification = isMetaMaskNotification;
/**
 * Assert that a value is a SIP-2 notification.
 *
 * @param value - The value to check.
 * @throws If the value is not a SIP-2 notification.
 */
function assertIsMetaMaskNotification(value) {
    (0, utils_1.assertStruct)(value, exports.MetaMaskNotificationStruct, 'Invalid notification');
}
exports.assertIsMetaMaskNotification = assertIsMetaMaskNotification;
//# sourceMappingURL=notification.js.map