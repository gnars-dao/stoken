"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertIsNamespacesObject = exports.isNamespacesObject = exports.isNamespace = exports.assertIsMultiChainRequest = exports.isMultiChainRequest = exports.assertIsConnectArguments = exports.isConnectArguments = exports.isAccountIdArray = exports.isAccountId = exports.isChainId = exports.isNamespaceId = exports.MultiChainRequestStruct = exports.RequestArgumentsStruct = exports.ConnectArgumentsStruct = exports.assertIsSession = exports.SessionStruct = exports.NamespacesStruct = exports.NamespaceIdStruct = exports.SessionNamespaceStruct = exports.RequestNamespaceStruct = exports.NamespaceStruct = exports.ChainStruct = exports.AccountIdArrayStruct = exports.AccountIdStruct = exports.ChainIdStruct = exports.LimitedString = exports.parseAccountId = exports.parseChainId = exports.ACCOUNT_ID_REGEX = exports.CHAIN_ID_REGEX = void 0;
const utils_1 = require("@metamask/utils");
const superstruct_1 = require("superstruct");
exports.CHAIN_ID_REGEX = /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})$/u;
exports.ACCOUNT_ID_REGEX = /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})):(?<accountAddress>[a-zA-Z0-9]{1,64})$/u;
/**
 * Parse a chain ID string to an object containing the namespace and reference.
 * This validates the chain ID before parsing it.
 *
 * @param chainId - The chain ID to validate and parse.
 * @returns The parsed chain ID.
 */
function parseChainId(chainId) {
    const match = exports.CHAIN_ID_REGEX.exec(chainId);
    if (!match?.groups) {
        throw new Error('Invalid chain ID.');
    }
    return {
        namespace: match.groups.namespace,
        reference: match.groups.reference,
    };
}
exports.parseChainId = parseChainId;
/**
 * Parse an account ID to an object containing the chain, chain ID and address.
 * This validates the account ID before parsing it.
 *
 * @param accountId - The account ID to validate and parse.
 * @returns The parsed account ID.
 */
function parseAccountId(accountId) {
    const match = exports.ACCOUNT_ID_REGEX.exec(accountId);
    if (!match?.groups) {
        throw new Error('Invalid account ID.');
    }
    return {
        address: match.groups.accountAddress,
        chainId: match.groups.chainId,
        chain: {
            namespace: match.groups.namespace,
            reference: match.groups.reference,
        },
    };
}
exports.parseAccountId = parseAccountId;
/**
 * A helper struct for a string with a minimum length of 1 and a maximum length
 * of 40.
 */
exports.LimitedString = (0, superstruct_1.size)((0, superstruct_1.string)(), 1, 40);
/**
 * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.
 */
exports.ChainIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.CHAIN_ID_REGEX);
exports.AccountIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), exports.ACCOUNT_ID_REGEX);
exports.AccountIdArrayStruct = (0, superstruct_1.array)(exports.AccountIdStruct);
/**
 * A chain descriptor.
 */
exports.ChainStruct = (0, superstruct_1.object)({
    id: exports.ChainIdStruct,
    name: exports.LimitedString,
});
exports.NamespaceStruct = (0, superstruct_1.object)({
    /**
     * A list of supported chains in the namespace.
     */
    chains: (0, superstruct_1.array)(exports.ChainStruct),
    /**
     * A list of supported RPC methods on the namespace, that a DApp can call.
     */
    methods: (0, superstruct_1.optional)((0, superstruct_1.array)(exports.LimitedString)),
    /**
     * A list of supported RPC events on the namespace, that a DApp can listen to.
     */
    events: (0, superstruct_1.optional)((0, superstruct_1.array)(exports.LimitedString)),
});
exports.RequestNamespaceStruct = (0, superstruct_1.assign)((0, superstruct_1.omit)(exports.NamespaceStruct, ['chains']), (0, superstruct_1.object)({ chains: (0, superstruct_1.array)(exports.ChainIdStruct) }));
exports.SessionNamespaceStruct = (0, superstruct_1.assign)(exports.RequestNamespaceStruct, (0, superstruct_1.object)({ accounts: (0, superstruct_1.array)(exports.AccountIdStruct) }));
/**
 * A CAIP-2 namespace, i.e., the first part of a chain ID.
 */
exports.NamespaceIdStruct = (0, superstruct_1.pattern)((0, superstruct_1.string)(), /^[-a-z0-9]{3,8}$/u);
/**
 * An object mapping CAIP-2 namespaces to their values.
 */
exports.NamespacesStruct = (0, superstruct_1.record)(exports.NamespaceIdStruct, exports.NamespaceStruct);
exports.SessionStruct = (0, superstruct_1.object)({
    namespaces: (0, superstruct_1.record)(exports.NamespaceIdStruct, exports.SessionNamespaceStruct),
});
/**
 * Asserts that the given value is a valid {@link Session}.
 *
 * @param value - The value to assert.
 * @throws If the value is not a valid {@link Session}.
 */
function assertIsSession(value) {
    (0, utils_1.assertStruct)(value, exports.SessionStruct, 'Invalid session');
}
exports.assertIsSession = assertIsSession;
exports.ConnectArgumentsStruct = (0, superstruct_1.object)({
    requiredNamespaces: (0, superstruct_1.record)(exports.NamespaceIdStruct, exports.RequestNamespaceStruct),
});
exports.RequestArgumentsStruct = (0, superstruct_1.assign)((0, superstruct_1.partial)((0, superstruct_1.pick)(utils_1.JsonRpcRequestStruct, ['id', 'jsonrpc'])), (0, superstruct_1.omit)(utils_1.JsonRpcRequestStruct, ['id', 'jsonrpc']));
exports.MultiChainRequestStruct = (0, superstruct_1.object)({
    chainId: exports.ChainIdStruct,
    request: exports.RequestArgumentsStruct,
});
/**
 * Check if the given value is a CAIP-2 namespace ID.
 *
 * @param value - The value to check.
 * @returns Whether the value is a CAIP-2 namespace ID.
 */
function isNamespaceId(value) {
    return (0, superstruct_1.is)(value, exports.NamespaceIdStruct);
}
exports.isNamespaceId = isNamespaceId;
/**
 * Check if the given value is a CAIP-2 chain ID.
 *
 * @param value - The value to check.
 * @returns Whether the value is a CAIP-2 chain ID.
 */
function isChainId(value) {
    return (0, superstruct_1.is)(value, exports.ChainIdStruct);
}
exports.isChainId = isChainId;
/**
 * Check if the given value is a CAIP-10 account ID.
 *
 * @param value - The value to check.
 * @returns Whether the value is a CAIP-10 account ID.
 */
function isAccountId(value) {
    return (0, superstruct_1.is)(value, exports.AccountIdStruct);
}
exports.isAccountId = isAccountId;
/**
 * Check if the given value is an array of CAIP-10 account IDs.
 *
 * @param value - The value to check.
 * @returns Whether the value is an array of CAIP-10 account IDs.
 */
function isAccountIdArray(value) {
    return (0, superstruct_1.is)(value, exports.AccountIdArrayStruct);
}
exports.isAccountIdArray = isAccountIdArray;
/**
 * Check if the given value is a {@link ConnectArguments} object.
 *
 * @param value - The value to check.
 * @returns Whether the value is a valid {@link ConnectArguments} object.
 */
function isConnectArguments(value) {
    return (0, superstruct_1.is)(value, exports.ConnectArgumentsStruct);
}
exports.isConnectArguments = isConnectArguments;
/**
 * Assert that the given value is a {@link ConnectArguments} object.
 *
 * @param value - The value to check.
 * @throws If the value is not a valid {@link ConnectArguments} object.
 */
function assertIsConnectArguments(value) {
    (0, utils_1.assertStruct)(value, exports.ConnectArgumentsStruct, 'Invalid connect arguments');
}
exports.assertIsConnectArguments = assertIsConnectArguments;
/**
 * Check if the given value is a {@link MultiChainRequest} object.
 *
 * @param value - The value to check.
 * @returns Whether the value is a valid {@link MultiChainRequest} object.
 */
function isMultiChainRequest(value) {
    return (0, superstruct_1.is)(value, exports.MultiChainRequestStruct);
}
exports.isMultiChainRequest = isMultiChainRequest;
/**
 * Assert that the given value is a {@link MultiChainRequest} object.
 *
 * @param value - The value to check.
 * @throws If the value is not a valid {@link MultiChainRequest} object.
 */
function assertIsMultiChainRequest(value) {
    (0, utils_1.assertStruct)(value, exports.MultiChainRequestStruct, 'Invalid request arguments');
}
exports.assertIsMultiChainRequest = assertIsMultiChainRequest;
/**
 * Check if a value is a {@link Namespace}.
 *
 * @param value - The value to validate.
 * @returns True if the value is a valid {@link Namespace}.
 */
function isNamespace(value) {
    return (0, superstruct_1.is)(value, exports.NamespaceStruct);
}
exports.isNamespace = isNamespace;
/**
 * Check if a value is an object containing {@link Namespace}s.
 *
 * @param value - The value to validate.
 * @returns True if the value is a valid object containing namespaces.
 */
function isNamespacesObject(value) {
    return (0, superstruct_1.is)(value, exports.NamespacesStruct);
}
exports.isNamespacesObject = isNamespacesObject;
/**
 * Assert that the given value is a {@link Namespaces} object.
 *
 * @param value - The value to check.
 * @param ErrorWrapper - The error wrapper to use. Defaults to
 * {@link AssertionError}.
 * @throws If the value is not a valid {@link Namespaces} object.
 */
function assertIsNamespacesObject(value, 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper) {
    (0, utils_1.assertStruct)(value, exports.NamespacesStruct, 'Invalid namespaces object', ErrorWrapper);
}
exports.assertIsNamespacesObject = assertIsNamespacesObject;
//# sourceMappingURL=namespace.js.map