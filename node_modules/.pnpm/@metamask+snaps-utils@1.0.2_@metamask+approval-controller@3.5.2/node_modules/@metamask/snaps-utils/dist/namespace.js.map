{"version":3,"file":"namespace.js","sourceRoot":"","sources":["../src/namespace.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  JsonRpcRequestStruct,\n  AssertionErrorConstructor,\n  assertStruct,\n} from '@metamask/utils';\nimport {\n  array,\n  Infer,\n  is,\n  object,\n  optional,\n  pattern,\n  record,\n  size,\n  string,\n  omit,\n  assign,\n  partial,\n  pick,\n} from 'superstruct';\n\nexport const CHAIN_ID_REGEX =\n  /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})$/u;\n\nexport const ACCOUNT_ID_REGEX =\n  /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-a-zA-Z0-9]{1,32})):(?<accountAddress>[a-zA-Z0-9]{1,64})$/u;\n\n/**\n * Parse a chain ID string to an object containing the namespace and reference.\n * This validates the chain ID before parsing it.\n *\n * @param chainId - The chain ID to validate and parse.\n * @returns The parsed chain ID.\n */\nexport function parseChainId(chainId: ChainId): {\n  namespace: NamespaceId;\n  reference: string;\n} {\n  const match = CHAIN_ID_REGEX.exec(chainId);\n  if (!match?.groups) {\n    throw new Error('Invalid chain ID.');\n  }\n\n  return {\n    namespace: match.groups.namespace,\n    reference: match.groups.reference,\n  };\n}\n\n/**\n * Parse an account ID to an object containing the chain, chain ID and address.\n * This validates the account ID before parsing it.\n *\n * @param accountId - The account ID to validate and parse.\n * @returns The parsed account ID.\n */\nexport function parseAccountId(accountId: AccountId): {\n  chain: { namespace: NamespaceId; reference: string };\n  chainId: ChainId;\n  address: string;\n} {\n  const match = ACCOUNT_ID_REGEX.exec(accountId);\n  if (!match?.groups) {\n    throw new Error('Invalid account ID.');\n  }\n\n  return {\n    address: match.groups.accountAddress,\n    chainId: match.groups.chainId as ChainId,\n    chain: {\n      namespace: match.groups.namespace,\n      reference: match.groups.reference,\n    },\n  };\n}\n\n/**\n * A helper struct for a string with a minimum length of 1 and a maximum length\n * of 40.\n */\nexport const LimitedString = size(string(), 1, 40);\n\n/**\n * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.\n */\nexport const ChainIdStruct = pattern(string(), CHAIN_ID_REGEX);\nexport type ChainId = `${string}:${string}`;\n\nexport const AccountIdStruct = pattern(string(), ACCOUNT_ID_REGEX);\nexport type AccountId = `${ChainId}:${string}`;\n\nexport const AccountIdArrayStruct = array(AccountIdStruct);\n\n/**\n * A chain descriptor.\n */\nexport const ChainStruct = object({\n  id: ChainIdStruct,\n  name: LimitedString,\n});\nexport type Chain = Infer<typeof ChainStruct>;\n\nexport const NamespaceStruct = object({\n  /**\n   * A list of supported chains in the namespace.\n   */\n  chains: array(ChainStruct),\n\n  /**\n   * A list of supported RPC methods on the namespace, that a DApp can call.\n   */\n  methods: optional(array(LimitedString)),\n\n  /**\n   * A list of supported RPC events on the namespace, that a DApp can listen to.\n   */\n  events: optional(array(LimitedString)),\n});\nexport type Namespace = Infer<typeof NamespaceStruct>;\n\nexport const RequestNamespaceStruct = assign(\n  omit(NamespaceStruct, ['chains']),\n  object({ chains: array(ChainIdStruct) }),\n);\nexport type RequestNamespace = Infer<typeof RequestNamespaceStruct>;\n\nexport const SessionNamespaceStruct = assign(\n  RequestNamespaceStruct,\n  object({ accounts: array(AccountIdStruct) }),\n);\nexport type SessionNamespace = Infer<typeof SessionNamespaceStruct>;\n\n/**\n * A CAIP-2 namespace, i.e., the first part of a chain ID.\n */\nexport const NamespaceIdStruct = pattern(string(), /^[-a-z0-9]{3,8}$/u);\nexport type NamespaceId = Infer<typeof NamespaceIdStruct>;\n\n/**\n * An object mapping CAIP-2 namespaces to their values.\n */\nexport const NamespacesStruct = record(NamespaceIdStruct, NamespaceStruct);\nexport type Namespaces = Infer<typeof NamespacesStruct>;\n\nexport const SessionStruct = object({\n  namespaces: record(NamespaceIdStruct, SessionNamespaceStruct),\n});\nexport type Session = Infer<typeof SessionStruct>;\n\n/**\n * Asserts that the given value is a valid {@link Session}.\n *\n * @param value - The value to assert.\n * @throws If the value is not a valid {@link Session}.\n */\nexport function assertIsSession(value: unknown): asserts value is Session {\n  assertStruct(value, SessionStruct, 'Invalid session');\n}\n\nexport const ConnectArgumentsStruct = object({\n  requiredNamespaces: record(NamespaceIdStruct, RequestNamespaceStruct),\n});\nexport type ConnectArguments = Infer<typeof ConnectArgumentsStruct>;\n\nexport const RequestArgumentsStruct = assign(\n  partial(pick(JsonRpcRequestStruct, ['id', 'jsonrpc'])),\n  omit(JsonRpcRequestStruct, ['id', 'jsonrpc']),\n);\nexport type RequestArguments = Infer<typeof RequestArgumentsStruct>;\n\nexport const MultiChainRequestStruct = object({\n  chainId: ChainIdStruct,\n  request: RequestArgumentsStruct,\n});\nexport type MultiChainRequest = Infer<typeof MultiChainRequestStruct>;\n\n/**\n * Check if the given value is a CAIP-2 namespace ID.\n *\n * @param value - The value to check.\n * @returns Whether the value is a CAIP-2 namespace ID.\n */\nexport function isNamespaceId(value: unknown): value is NamespaceId {\n  return is(value, NamespaceIdStruct);\n}\n\n/**\n * Check if the given value is a CAIP-2 chain ID.\n *\n * @param value - The value to check.\n * @returns Whether the value is a CAIP-2 chain ID.\n */\nexport function isChainId(value: unknown): value is ChainId {\n  return is(value, ChainIdStruct);\n}\n\n/**\n * Check if the given value is a CAIP-10 account ID.\n *\n * @param value - The value to check.\n * @returns Whether the value is a CAIP-10 account ID.\n */\nexport function isAccountId(value: unknown): value is AccountId {\n  return is(value, AccountIdStruct);\n}\n\n/**\n * Check if the given value is an array of CAIP-10 account IDs.\n *\n * @param value - The value to check.\n * @returns Whether the value is an array of CAIP-10 account IDs.\n */\nexport function isAccountIdArray(value: unknown): value is AccountId[] {\n  return is(value, AccountIdArrayStruct);\n}\n\n/**\n * Check if the given value is a {@link ConnectArguments} object.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link ConnectArguments} object.\n */\nexport function isConnectArguments(value: unknown): value is ConnectArguments {\n  return is(value, ConnectArgumentsStruct);\n}\n\n/**\n * Assert that the given value is a {@link ConnectArguments} object.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid {@link ConnectArguments} object.\n */\nexport function assertIsConnectArguments(\n  value: unknown,\n): asserts value is ConnectArguments {\n  assertStruct(value, ConnectArgumentsStruct, 'Invalid connect arguments');\n}\n\n/**\n * Check if the given value is a {@link MultiChainRequest} object.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link MultiChainRequest} object.\n */\nexport function isMultiChainRequest(\n  value: unknown,\n): value is MultiChainRequest {\n  return is(value, MultiChainRequestStruct);\n}\n\n/**\n * Assert that the given value is a {@link MultiChainRequest} object.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid {@link MultiChainRequest} object.\n */\nexport function assertIsMultiChainRequest(\n  value: unknown,\n): asserts value is MultiChainRequest {\n  assertStruct(value, MultiChainRequestStruct, 'Invalid request arguments');\n}\n\n/**\n * Check if a value is a {@link Namespace}.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid {@link Namespace}.\n */\nexport function isNamespace(value: unknown): value is Namespace {\n  return is(value, NamespaceStruct);\n}\n\n/**\n * Check if a value is an object containing {@link Namespace}s.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid object containing namespaces.\n */\nexport function isNamespacesObject(value: unknown): value is Namespaces {\n  return is(value, NamespacesStruct);\n}\n\n/**\n * Assert that the given value is a {@link Namespaces} object.\n *\n * @param value - The value to check.\n * @param ErrorWrapper - The error wrapper to use. Defaults to\n * {@link AssertionError}.\n * @throws If the value is not a valid {@link Namespaces} object.\n */\nexport function assertIsNamespacesObject(\n  value: unknown,\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  ErrorWrapper?: AssertionErrorConstructor,\n): asserts value is Namespaces {\n  assertStruct(\n    value,\n    NamespacesStruct,\n    'Invalid namespaces object',\n    ErrorWrapper,\n  );\n}\n"]}