{"version":3,"file":"validation.js","sourceRoot":"","sources":["../../src/manifest/validation.ts"],"names":[],"mappings":";;;AAAA,iDAA6D;AAC7D,2CAA8E;AAC9E,6CAkBqB;AAErB,oCAAmC;AACnC,wCAA6D;AAC7D,wCAA6E;AAC7E,0CAA+C;AAC/C,4CAAgD;AAChD,oCAAwD;AAExD,+EAA+E;AAC/E,gCAAgC;AAChC,MAAM,kBAAkB,GAAa;IACnC,2BAAiB;IACjB,sCAA4B;CAC7B,CAAC;AAEW,QAAA,oBAAoB,GAAa,CAAC,EAAE,CAAC,CAAC;AACnD,MAAM,eAAe,GAAe,4BAAoB,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC;IACzE,GAAG;IACH,KAAK;IACL,GAAG,QAAQ,GAAG;CACf,CAAC,CAAC;AAEU,QAAA,eAAe,GAAG,IAAA,oBAAM,EACnC,IAAA,mBAAK,EAAC,IAAA,oBAAM,GAAE,CAAC,EACf,aAAa,EACb,CAAC,IAAc,EAAE,EAAE;IACjB,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;QACrB,OAAO,uDAAuD,CAAC;KAChE;IAED,IAAI,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;QACnB,OAAO,2BAA2B,CAAC;KACpC;IAED,IAAI,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;QACnB,OAAO,6CAA6C,CAAC;KACtD;IAED,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAA,kCAAuB,EAAC,IAAI,CAAC,CAAC,EAAE;QAChE,OAAO,oDAAoD,CAAC;KAC7D;IAED,IAAI,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QACxC,OAAO,gBAAgB,IAAI,CAAC,CAAC,CAAC,0CAA0C,CAAC;KAC1E;IAED,IACE,eAAe,CAAC,IAAI,CAAC,CAAC,aAAa,EAAE,EAAE,CACrC,IAAA,eAAO,EAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,CAAC,MAAM,CAAC,EAAE,aAAa,CAAC,CAC5D,EACD;QACA,OAAO,aAAa,IAAI,CAAC,IAAI,CAC3B,GAAG,CACJ,0CAA0C,CAAC;KAC7C;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CACF,CAAC;AAEK,MAAM,YAAY,GAAG,CAC1B,MAAoB,EACpB,EAAE,CACF,IAAA,oBAAM,EAAC,MAAM,EAAE,gBAAgB,EAAE,CAAC,KAAK,EAAE,EAAE;IACzC,IACE,KAAK,CAAC,KAAK,KAAK,SAAS;QACzB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,EACvD;QACA,OAAO,4CAA4C,CAAC;KACrD;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC,CAAC;AAZQ,QAAA,YAAY,gBAYpB;AAEL,oCAAoC;AACvB,QAAA,kBAAkB,GAAG,IAAA,oBAAY,EAC5C,IAAA,kBAAI,EAAC;IACH,IAAI,EAAE,uBAAe;IACrB,KAAK,EAAE,IAAA,mBAAK,EAAC,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;CACvC,CAAC,CACH,CAAC;AAIW,QAAA,oCAAoC,GAAG,IAAA,kBAAI,EACtD,IAAA,mBAAK,EAAC,0BAAkB,CAAC,EACzB,CAAC,EACD,QAAQ,CACT,CAAC;AAEF,yDAAyD;AAC5C,QAAA,iBAAiB,GAAG,IAAA,kBAAI,EAAC;IACpC,wBAAwB,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IAC9C,0BAA0B,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IAChD,uBAAuB,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IAC7C,+BAA+B,EAAE,IAAA,sBAAQ,EACvC,IAAA,oBAAM,EAAC;QACL,sBAAsB,EAAE,IAAA,sBAAQ,EAAC,IAAA,qBAAO,GAAE,CAAC;KAC5C,CAAC,CACH;IACD,mBAAmB,EAAE,IAAA,sBAAQ,EAC3B,IAAA,oBAAM,EAAC,EAAE,IAAI,EAAE,yCAA+B,EAAE,CAAC,CAClD;IACD,eAAe,EAAE,IAAA,sBAAQ,EAAC,2BAAgB,CAAC;IAC3C,WAAW,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IACjC,eAAe;IACf,YAAY,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IAClC,gBAAgB,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IACtC,WAAW,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IACjC,oBAAoB,EAAE,IAAA,sBAAQ,EAAC,4CAAoC,CAAC;IACpE,sBAAsB,EAAE,IAAA,sBAAQ,EAAC,4CAAoC,CAAC;IACtE,oBAAoB,EAAE,IAAA,sBAAQ,EAC5B,IAAA,kBAAI,EACF,IAAA,mBAAK,EAAC,IAAA,oBAAM,EAAC,EAAE,QAAQ,EAAE,IAAA,kBAAI,EAAC,IAAA,qBAAO,GAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,EAC5D,CAAC,EACD,QAAQ,CACT,CACF;IACD,eAAe,EAAE,IAAA,sBAAQ,EAAC,IAAA,oBAAM,EAAC,EAAE,CAAC,CAAC;IACrC,mBAAmB,EAAE,IAAA,sBAAQ,EAC3B,IAAA,oBAAM,EAAC;QACL,UAAU,EAAE,4BAAgB;KAC7B,CAAC,CACH;CACF,CAAC,CAAC;AAKU,QAAA,kBAAkB,GAAG,IAAA,oBAAM,EAAC;IACvC,OAAO,EAAE,qBAAa;IACtB,WAAW,EAAE,IAAA,kBAAI,EAAC,IAAA,oBAAM,GAAE,EAAE,CAAC,EAAE,GAAG,CAAC;IACnC,YAAY,EAAE,IAAA,kBAAI,EAChB,IAAA,qBAAO,EACL,IAAA,oBAAM,GAAE,EACR,kHAAkH,CACnH,EACD,CAAC,EACD,GAAG,CACJ;IACD,UAAU,EAAE,IAAA,sBAAQ,EAClB,IAAA,oBAAM,EAAC;QACL,IAAI,EAAE,IAAA,kBAAI,EAAC,IAAA,oBAAM,GAAE,EAAE,CAAC,EAAE,QAAQ,CAAC;QACjC,GAAG,EAAE,IAAA,kBAAI,EAAC,IAAA,oBAAM,GAAE,EAAE,CAAC,EAAE,QAAQ,CAAC;KACjC,CAAC,CACH;IACD,MAAM,EAAE,IAAA,oBAAM,EAAC;QACb,MAAM,EAAE,sBAAc;QACtB,QAAQ,EAAE,IAAA,oBAAM,EAAC;YACf,GAAG,EAAE,IAAA,oBAAM,EAAC;gBACV,QAAQ,EAAE,IAAA,kBAAI,EAAC,IAAA,oBAAM,GAAE,EAAE,CAAC,EAAE,QAAQ,CAAC;gBACrC,QAAQ,EAAE,IAAA,sBAAQ,EAAC,IAAA,kBAAI,EAAC,IAAA,oBAAM,GAAE,EAAE,CAAC,EAAE,QAAQ,CAAC,CAAC;gBAC/C,WAAW,EAAE,kBAAU;gBACvB,QAAQ,EAAE,IAAA,mBAAK,EAAC;oBACd,IAAA,qBAAO,EAAC,4BAA4B,CAAC;oBACrC,IAAA,qBAAO,EAAC,6BAA6B,CAAC;iBACvC,CAAC;aACH,CAAC;SACH,CAAC;KACH,CAAC;IACF,kBAAkB,EAAE,yBAAiB;IACrC,eAAe,EAAE,IAAA,qBAAO,EAAC,KAAK,CAAC;CAChC,CAAC,CAAC;AAIH;;;;;GAKG;AACH,SAAgB,cAAc,CAAC,KAAc;IAC3C,OAAO,IAAA,gBAAE,EAAC,KAAK,EAAE,0BAAkB,CAAC,CAAC;AACvC,CAAC;AAFD,wCAEC;AAED;;;;;GAKG;AACH,SAAgB,oBAAoB,CAClC,KAAc;IAEd,IAAA,oBAAY,EACV,KAAK,EACL,0BAAkB,EAClB,IAAI,wBAAgB,CAAC,QAAQ,cAAc,CAC5C,CAAC;AACJ,CAAC;AARD,oDAQC;AAED;;;;;;;GAOG;AACH,SAAgB,kBAAkB,CAAC,KAAc;IAC/C,qEAAqE;IACrE,OAAO,IAAA,oBAAM,EAAC,KAAK,EAAE,0BAAkB,CAAC,CAAC;AAC3C,CAAC;AAHD,gDAGC","sourcesContent":["import { isValidBIP32PathSegment } from '@metamask/key-tree';\nimport { assertStruct, ChecksumStruct, VersionStruct } from '@metamask/utils';\nimport {\n  array,\n  boolean,\n  create,\n  enums,\n  Infer,\n  integer,\n  is,\n  literal,\n  object,\n  optional,\n  pattern,\n  refine,\n  size,\n  string,\n  Struct,\n  type,\n  union,\n} from 'superstruct';\n\nimport { isEqual } from '../array';\nimport { CronjobSpecificationArrayStruct } from '../cronjob';\nimport { SIP_6_MAGIC_VALUE, STATE_ENCRYPTION_MAGIC_VALUE } from '../entropy';\nimport { RpcOriginsStruct } from '../json-rpc';\nimport { NamespacesStruct } from '../namespace';\nimport { NameStruct, NpmSnapFileNames } from '../types';\n\n// BIP-43 purposes that cannot be used for entropy derivation. These are in the\n// string form, ending with `'`.\nconst FORBIDDEN_PURPOSES: string[] = [\n  SIP_6_MAGIC_VALUE,\n  STATE_ENCRYPTION_MAGIC_VALUE,\n];\n\nexport const FORBIDDEN_COIN_TYPES: number[] = [60];\nconst FORBIDDEN_PATHS: string[][] = FORBIDDEN_COIN_TYPES.map((coinType) => [\n  'm',\n  \"44'\",\n  `${coinType}'`,\n]);\n\nexport const Bip32PathStruct = refine(\n  array(string()),\n  'BIP-32 path',\n  (path: string[]) => {\n    if (path.length === 0) {\n      return 'Path must be a non-empty BIP-32 derivation path array';\n    }\n\n    if (path[0] !== 'm') {\n      return 'Path must start with \"m\".';\n    }\n\n    if (path.length < 3) {\n      return 'Paths must have a length of at least three.';\n    }\n\n    if (path.slice(1).some((part) => !isValidBIP32PathSegment(part))) {\n      return 'Path must be a valid BIP-32 derivation path array.';\n    }\n\n    if (FORBIDDEN_PURPOSES.includes(path[1])) {\n      return `The purpose \"${path[1]}\" is not allowed for entropy derivation.`;\n    }\n\n    if (\n      FORBIDDEN_PATHS.some((forbiddenPath) =>\n        isEqual(path.slice(0, forbiddenPath.length), forbiddenPath),\n      )\n    ) {\n      return `The path \"${path.join(\n        '/',\n      )}\" is not allowed for entropy derivation.`;\n    }\n\n    return true;\n  },\n);\n\nexport const bip32entropy = <T extends { path: string[]; curve: string }, S>(\n  struct: Struct<T, S>,\n) =>\n  refine(struct, 'BIP-32 entropy', (value) => {\n    if (\n      value.curve === 'ed25519' &&\n      value.path.slice(1).some((part) => !part.endsWith(\"'\"))\n    ) {\n      return 'Ed25519 does not support unhardened paths.';\n    }\n\n    return true;\n  });\n\n// Used outside @metamask/snap-utils\nexport const Bip32EntropyStruct = bip32entropy(\n  type({\n    path: Bip32PathStruct,\n    curve: enums(['ed25519', 'secp256k1']),\n  }),\n);\n\nexport type Bip32Entropy = Infer<typeof Bip32EntropyStruct>;\n\nexport const SnapGetBip32EntropyPermissionsStruct = size(\n  array(Bip32EntropyStruct),\n  1,\n  Infinity,\n);\n\n/* eslint-disable @typescript-eslint/naming-convention */\nexport const PermissionsStruct = type({\n  'endowment:long-running': optional(object({})),\n  'endowment:network-access': optional(object({})),\n  'endowment:webassembly': optional(object({})),\n  'endowment:transaction-insight': optional(\n    object({\n      allowTransactionOrigin: optional(boolean()),\n    }),\n  ),\n  'endowment:cronjob': optional(\n    object({ jobs: CronjobSpecificationArrayStruct }),\n  ),\n  'endowment:rpc': optional(RpcOriginsStruct),\n  snap_dialog: optional(object({})),\n  // TODO: Remove\n  snap_confirm: optional(object({})),\n  snap_manageState: optional(object({})),\n  snap_notify: optional(object({})),\n  snap_getBip32Entropy: optional(SnapGetBip32EntropyPermissionsStruct),\n  snap_getBip32PublicKey: optional(SnapGetBip32EntropyPermissionsStruct),\n  snap_getBip44Entropy: optional(\n    size(\n      array(object({ coinType: size(integer(), 0, 2 ** 32 - 1) })),\n      1,\n      Infinity,\n    ),\n  ),\n  snap_getEntropy: optional(object({})),\n  'endowment:keyring': optional(\n    object({\n      namespaces: NamespacesStruct,\n    }),\n  ),\n});\n/* eslint-enable @typescript-eslint/naming-convention */\n\nexport type SnapPermissions = Infer<typeof PermissionsStruct>;\n\nexport const SnapManifestStruct = object({\n  version: VersionStruct,\n  description: size(string(), 1, 280),\n  proposedName: size(\n    pattern(\n      string(),\n      /^(?:[A-Za-z0-9-_]+( [A-Za-z0-9-_]+)*)|(?:(?:@[A-Za-z0-9-*~][A-Za-z0-9-*._~]*\\/)?[A-Za-z0-9-~][A-Za-z0-9-._~]*)$/u,\n    ),\n    1,\n    214,\n  ),\n  repository: optional(\n    object({\n      type: size(string(), 1, Infinity),\n      url: size(string(), 1, Infinity),\n    }),\n  ),\n  source: object({\n    shasum: ChecksumStruct,\n    location: object({\n      npm: object({\n        filePath: size(string(), 1, Infinity),\n        iconPath: optional(size(string(), 1, Infinity)),\n        packageName: NameStruct,\n        registry: union([\n          literal('https://registry.npmjs.org'),\n          literal('https://registry.npmjs.org/'),\n        ]),\n      }),\n    }),\n  }),\n  initialPermissions: PermissionsStruct,\n  manifestVersion: literal('0.1'),\n});\n\nexport type SnapManifest = Infer<typeof SnapManifestStruct>;\n\n/**\n * Check if the given value is a valid {@link SnapManifest} object.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid {@link SnapManifest} object.\n */\nexport function isSnapManifest(value: unknown): value is SnapManifest {\n  return is(value, SnapManifestStruct);\n}\n\n/**\n * Assert that the given value is a valid {@link SnapManifest} object.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid {@link SnapManifest} object.\n */\nexport function assertIsSnapManifest(\n  value: unknown,\n): asserts value is SnapManifest {\n  assertStruct(\n    value,\n    SnapManifestStruct,\n    `\"${NpmSnapFileNames.Manifest}\" is invalid`,\n  );\n}\n\n/**\n * Creates a {@link SnapManifest} object from JSON.\n *\n *\n * @param value - The value to check.\n * @throws If the value cannot be coerced to a {@link SnapManifest} object.\n * @returns The created {@link SnapManifest} object.\n */\nexport function createSnapManifest(value: unknown): SnapManifest {\n  // TODO: Add a utility to prefix these errors similar to assertStruct\n  return create(value, SnapManifestStruct);\n}\n"]}