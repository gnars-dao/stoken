"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertIsJsonRpcSuccess = exports.assertIsRpcOrigins = exports.RpcOriginsStruct = void 0;
const utils_1 = require("@metamask/utils");
const superstruct_1 = require("superstruct");
exports.RpcOriginsStruct = (0, superstruct_1.refine)((0, superstruct_1.object)({
    dapps: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
    snaps: (0, superstruct_1.optional)((0, superstruct_1.boolean)()),
}), 'RPC origins', (value) => {
    if (!Object.values(value).some(Boolean)) {
        throw new Error('Must specify at least one JSON-RPC origin');
    }
    return true;
});
/**
 * Asserts that the given value is a valid {@link RpcOrigins} object.
 *
 * @param value - The value to assert.
 * @param ErrorWrapper - An optional error wrapper to use. Defaults to
 * {@link AssertionError}.
 * @throws If the value is not a valid {@link RpcOrigins} object.
 */
function assertIsRpcOrigins(value, 
// eslint-disable-next-line @typescript-eslint/naming-convention
ErrorWrapper) {
    (0, utils_1.assertStruct)(value, exports.RpcOriginsStruct, 'Invalid JSON-RPC origins', ErrorWrapper);
}
exports.assertIsRpcOrigins = assertIsRpcOrigins;
/**
 * Assert that the given value is a successful JSON-RPC response. If the value
 * is not a success response, an error is thrown. If the value is an JSON-RPC
 * error, the error message is included in the thrown error.
 *
 * @param value - The value to check.
 * @throws If the value is not a JSON-RPC success response.
 */
function assertIsJsonRpcSuccess(value) {
    if (!(0, utils_1.isJsonRpcSuccess)(value)) {
        if ((0, utils_1.isJsonRpcFailure)(value)) {
            throw new Error(`JSON-RPC request failed: ${value.error.message}`);
        }
        throw new Error('Invalid JSON-RPC response.');
    }
}
exports.assertIsJsonRpcSuccess = assertIsJsonRpcSuccess;
//# sourceMappingURL=json-rpc.js.map