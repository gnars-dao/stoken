"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Keyring = void 0;
const eventemitter2 = __importStar(require("eventemitter2"));
class Keyring extends eventemitter2.EventEmitter2 {
    constructor() {
        super({ wildcard: true });
        this.wallets = {};
        this.aliases = {};
    }
    add(wallet, deviceID) {
        const id = deviceID || new Date().toString();
        if (!this.wallets[id]) {
            this.wallets[id] = wallet;
            wallet.transport && this.decorateEvents(id, wallet.transport);
            return true;
        }
        return false;
    }
    addAlias(aliasee, alias) {
        this.aliases[alias] = aliasee;
    }
    getAlias(aliasee) {
        const keys = Object.keys(this.aliases);
        const values = Object.values(this.aliases);
        const index = values.indexOf(aliasee);
        if (index !== -1)
            return keys[index];
        return aliasee;
    }
    exec(method, ...args) {
        return __awaiter(this, void 0, void 0, function* () {
            return Promise.all(Object.values(this.wallets).map((w) => {
                const fn = w[method];
                if (typeof fn !== "function")
                    throw new Error(`can't exec non-existent method ${method}`);
                return fn.call(w, ...args);
            })).then((values) => values.reduce((final, response, i) => {
                final[Object.keys(this.wallets)[i]] = response;
                return final;
            }, {}));
        });
    }
    get(deviceID) {
        if (deviceID && this.aliases[deviceID] && this.wallets[this.aliases[deviceID]])
            return this.wallets[this.aliases[deviceID]];
        if (deviceID && this.wallets[deviceID])
            return this.wallets[deviceID];
        if (!!Object.keys(this.wallets).length && !deviceID)
            return Object.values(this.wallets)[0];
        return null;
    }
    remove(deviceID) {
        return __awaiter(this, void 0, void 0, function* () {
            const wallet = this.get(deviceID);
            if (!wallet)
                return;
            try {
                yield wallet.disconnect();
            }
            catch (e) {
                console.error(e);
            }
            finally {
                let aliasee = this.aliases[deviceID];
                if (aliasee) {
                    delete this.aliases[deviceID];
                    delete this.wallets[aliasee];
                }
                else {
                    delete this.wallets[deviceID];
                }
            }
        });
    }
    removeAll() {
        return __awaiter(this, void 0, void 0, function* () {
            yield Promise.all(Object.keys(this.wallets).map(this.remove.bind(this)));
            this.aliases = {};
        });
    }
    disconnectAll() {
        return __awaiter(this, void 0, void 0, function* () {
            const wallets = Object.values(this.wallets);
            for (let i = 0; i < wallets.length; i++) {
                yield wallets[i].disconnect();
            }
        });
    }
    decorateEvents(deviceID, events) {
        const wallet = this.get(deviceID);
        if (!wallet)
            return;
        const vendor = wallet.getVendor();
        events.onAny((e, ...values) => this.emit([vendor, deviceID, (typeof e === "string" ? e : e.join(";"))], [deviceID, ...values]));
    }
}
exports.Keyring = Keyring;
//# sourceMappingURL=keyring.js.map