import { BIP32Path, HDWallet, HDWalletInfo, PathDescription } from "./wallet";
export interface SecretGetAddress {
    addressNList: BIP32Path;
    showDisplay?: boolean;
    testnet?: boolean;
}
export declare namespace Secret {
    export interface Msg {
        type: string;
        value: any;
    }
    export type Coins = Coin[];
    export interface Coin {
        denom: string;
        amount: string;
    }
    export interface StdFee {
        amount: Coins;
        gas: string;
    }
    namespace crypto {
        interface PubKey {
            type: string;
            value: string;
        }
    }
    export interface StdSignature {
        pub_key?: crypto.PubKey;
        signature: string;
    }
    export interface StdTx {
        msg: Msg[];
        fee: StdFee;
        signatures: null | StdSignature[];
        memo: string;
    }
    export {};
}
export interface SecretTx {
    msg: Secret.Msg[];
    fee: Secret.StdFee;
    signatures: null | Secret.StdSignature[];
    memo: string;
}
export interface SecretSignTx {
    addressNList: BIP32Path;
    tx: Secret.StdTx;
    chain_id: string;
    account_number: number;
    sequence: number;
    fee?: number;
    gas?: number;
    testnet?: boolean;
}
export declare type SecretSignedTx = SecretTx;
export interface SecretGetAccountPaths {
    accountIdx: number;
}
export interface SecretAccountPath {
    addressNList: BIP32Path;
}
export interface SecretWalletInfo extends HDWalletInfo {
    readonly _supportsSecretInfo: boolean;
    /**
     * Returns a list of bip32 paths for a given account index in preferred order
     * from most to least preferred.
     */
    secretGetAccountPaths(msg: SecretGetAccountPaths): Array<SecretAccountPath>;
    /**
     * Returns the "next" account path, if any.
     */
    secretNextAccountPath(msg: SecretAccountPath): SecretAccountPath | undefined;
}
export interface SecretWallet extends SecretWalletInfo, HDWallet {
    readonly _supportsSecret: boolean;
    secretGetAddress(msg: SecretGetAddress): Promise<string | null>;
    secretSignTx(msg: SecretSignTx): Promise<SecretSignedTx | null>;
}
export declare function secretDescribePath(path: BIP32Path): PathDescription;
//# sourceMappingURL=secret.d.ts.map