"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.NavigateToDashboard = exports.WebUSBCouldNotPair = exports.WebHIDCouldNotPair = exports.WebUSBCouldNotInitialize = exports.WebHIDCouldNotInitialize = exports.WebUSBNotAvailable = exports.WebHIDNotAvailable = exports.FirmwareUpdateRequired = exports.WrongApp = exports.SelectApp = exports.ConflictingApp = exports.PopupClosedError = exports.DeviceLocked = exports.DisconnectedDeviceDuringOperation = exports.DeviceDisconnected = exports.ActionCancelled = exports.HDWalletError = exports.HDWalletErrorType = void 0;
var HDWalletErrorType;
(function (HDWalletErrorType) {
    HDWalletErrorType["ActionCancelled"] = "ActionCancelled";
    HDWalletErrorType["DeviceDisconnected"] = "DeviceDisconnected";
    HDWalletErrorType["DisconnectedDeviceDuringOperation"] = "DisconnectedDeviceDuringOperation";
    HDWalletErrorType["DeviceLocked"] = "DeviceLocked";
    HDWalletErrorType["PopupClosedError"] = "PopupClosedError";
    HDWalletErrorType["ConflictingApp"] = "ConflictingApp";
    HDWalletErrorType["SelectApp"] = "SelectApp";
    HDWalletErrorType["WrongApp"] = "WrongApp";
    HDWalletErrorType["FirmwareUpdateRequired"] = "FirmwareUpdateRequired";
    HDWalletErrorType["WebHIDNotAvailable"] = "WebHIDNotAvailable";
    HDWalletErrorType["WebHIDCouldNotInitialize"] = "WebHIDCouldNotInitialize";
    HDWalletErrorType["WebHIDCouldNotPair"] = "WebHIDCouldNotPair";
    HDWalletErrorType["WebUSBNotAvailable"] = "WebUSBNotAvailable";
    HDWalletErrorType["WebUSBCouldNotInitialize"] = "WebUSBCouldNotInitialize";
    HDWalletErrorType["WebUSBCouldNotPair"] = "WebUSBCouldNotPair";
    HDWalletErrorType["NavigateToDashboard"] = "NavigateToDashboard";
})(HDWalletErrorType = exports.HDWalletErrorType || (exports.HDWalletErrorType = {}));
class HDWalletError extends Error {
    constructor(message, type) {
        super(message);
        this.name = type;
        this.type = type;
        this.message = message;
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(this, this.constructor);
        }
        else {
            this.stack = new Error(message).stack;
        }
    }
}
exports.HDWalletError = HDWalletError;
class ActionCancelled extends HDWalletError {
    constructor() {
        super("Action cancelled", HDWalletErrorType.ActionCancelled);
    }
}
exports.ActionCancelled = ActionCancelled;
class DeviceDisconnected extends HDWalletError {
    constructor() {
        super("Device disconnected", HDWalletErrorType.DeviceDisconnected);
    }
}
exports.DeviceDisconnected = DeviceDisconnected;
class DisconnectedDeviceDuringOperation extends HDWalletError {
    constructor() {
        super("Ledger device disconnected during operation", HDWalletErrorType.DisconnectedDeviceDuringOperation);
    }
}
exports.DisconnectedDeviceDuringOperation = DisconnectedDeviceDuringOperation;
class DeviceLocked extends HDWalletError {
    constructor() {
        super("Device locked", HDWalletErrorType.DeviceLocked);
    }
}
exports.DeviceLocked = DeviceLocked;
class PopupClosedError extends HDWalletError {
    constructor() {
        super("TrezorConnect popup closed", HDWalletErrorType.PopupClosedError);
    }
}
exports.PopupClosedError = PopupClosedError;
class ConflictingApp extends HDWalletError {
    constructor(model) {
        super(`Conflicting Application: Another wallet is trying to connect with your ${model}.`, HDWalletErrorType.ConflictingApp);
        this.model = model;
    }
}
exports.ConflictingApp = ConflictingApp;
class SelectApp extends HDWalletError {
    constructor(model, app) {
        super(`Please open the ${app} app on your ${model}.`, HDWalletErrorType.SelectApp);
    }
}
exports.SelectApp = SelectApp;
class WrongApp extends HDWalletError {
    constructor(model, app) {
        super(`Wrong app open. Please open the ${app} app on your ${model} and try again.`, HDWalletErrorType.WrongApp);
    }
}
exports.WrongApp = WrongApp;
class FirmwareUpdateRequired extends HDWalletError {
    constructor(model, minVer) {
        super(`Firmware ${minVer} or later is required to use your ${model} with this client. Please update your device.`, HDWalletErrorType.FirmwareUpdateRequired);
    }
}
exports.FirmwareUpdateRequired = FirmwareUpdateRequired;
class WebHIDNotAvailable extends HDWalletError {
    constructor() {
        super(`WebHID is not available in this browser. We recommend trying Chrome.`, HDWalletErrorType.WebHIDNotAvailable);
    }
}
exports.WebHIDNotAvailable = WebHIDNotAvailable;
class WebUSBNotAvailable extends HDWalletError {
    constructor() {
        super(`WebUSB is not available in this browser. We recommend trying Chrome.`, HDWalletErrorType.WebUSBNotAvailable);
    }
}
exports.WebUSBNotAvailable = WebUSBNotAvailable;
class WebHIDCouldNotInitialize extends HDWalletError {
    constructor(model, message) {
        super(`Could not initialize ${model}: ${message}`, HDWalletErrorType.WebHIDCouldNotInitialize);
    }
}
exports.WebHIDCouldNotInitialize = WebHIDCouldNotInitialize;
class WebUSBCouldNotInitialize extends HDWalletError {
    constructor(model, message) {
        super(`Could not initialize ${model}: ${message}`, HDWalletErrorType.WebUSBCouldNotInitialize);
    }
}
exports.WebUSBCouldNotInitialize = WebUSBCouldNotInitialize;
class WebHIDCouldNotPair extends HDWalletError {
    constructor(model, message) {
        super(`Could not pair ${model}: ${message}`, HDWalletErrorType.WebHIDCouldNotPair);
    }
}
exports.WebHIDCouldNotPair = WebHIDCouldNotPair;
class WebUSBCouldNotPair extends HDWalletError {
    constructor(model, message) {
        super(`Could not pair ${model}: ${message}`, HDWalletErrorType.WebUSBCouldNotPair);
    }
}
exports.WebUSBCouldNotPair = WebUSBCouldNotPair;
class NavigateToDashboard extends HDWalletError {
    constructor(model) {
        super(`Please navigate to the dashboard of your ${model}.`, HDWalletErrorType.NavigateToDashboard);
    }
}
exports.NavigateToDashboard = NavigateToDashboard;
//# sourceMappingURL=exceptions.js.map