import { BIP32Path, HDWallet, HDWalletInfo, PathDescription } from "./wallet";
export interface BinanceGetAddress {
    addressNList: BIP32Path;
    showDisplay?: boolean;
}
declare namespace Binance {
    namespace sdk {
        type Coins = Coin[];
        interface Coin {
            denom: string;
            amount: number;
        }
    }
    export interface StdFee {
        amount: sdk.Coins;
        gas: string;
    }
    export interface StdSignature {
        pub_key: string;
        signature: string;
    }
    export interface MsgSend {
        inputs: Array<{
            address: string;
            coins: sdk.Coins;
        }>;
        outputs: Array<{
            address: string;
            coins: sdk.Coins;
        }>;
    }
    export type Msg = MsgSend;
    export {};
}
export interface BinanceTx {
    account_number: string;
    chain_id: string;
    data: string | null;
    memo: string;
    msgs: [Binance.Msg];
    sequence: string;
    source?: string;
}
export declare type BinancePartialTx = Partial<BinanceTx> & Pick<BinanceTx, "msgs">;
export interface BinanceSignTx {
    addressNList: BIP32Path;
    testnet?: boolean;
    tx: BinancePartialTx;
}
export interface BinanceSignedTx extends BinanceTx {
    signatures: {
        pub_key: string;
        signature: string;
    };
    txid: string;
    serialized: string;
}
export interface BinanceGetAccountPaths {
    accountIdx: number;
}
export interface BinanceAccountPath {
    addressNList: BIP32Path;
}
export interface BinanceWalletInfo extends HDWalletInfo {
    readonly _supportsBinanceInfo: boolean;
    /**
     * Returns a list of bip32 paths for a given account index in preferred order
     * from most to least preferred.
     */
    binanceGetAccountPaths(msg: BinanceGetAccountPaths): Array<BinanceAccountPath>;
    /**
     * Returns the "next" account path, if any.
     */
    binanceNextAccountPath(msg: BinanceAccountPath): BinanceAccountPath | undefined;
}
export interface BinanceWallet extends BinanceWalletInfo, HDWallet {
    readonly _supportsBinance: boolean;
    binanceGetAddress(msg: BinanceGetAddress): Promise<string | null>;
    binanceSignTx(msg: BinanceSignTx): Promise<BinanceSignedTx | null>;
}
export declare function binanceDescribePath(path: BIP32Path): PathDescription;
export {};
//# sourceMappingURL=binance.d.ts.map