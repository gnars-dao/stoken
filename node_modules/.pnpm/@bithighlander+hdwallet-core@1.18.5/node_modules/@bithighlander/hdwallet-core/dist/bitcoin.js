"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.segwitNativeAccount = exports.segwitAccount = exports.legacyAccount = exports.describeUTXOPath = exports.unknownUTXOPath = exports.BTCOutputAddressType = exports.BTCOutputScriptType = exports.BTCInputScriptType = void 0;
const ta = __importStar(require("type-assertions"));
const utils_1 = require("./utils");
ta.assert();
// Bech32 info https://en.bitcoin.it/wiki/BIP_0173
var BTCInputScriptType;
(function (BTCInputScriptType) {
    BTCInputScriptType["CashAddr"] = "cashaddr";
    BTCInputScriptType["Bech32"] = "bech32";
    BTCInputScriptType["SpendAddress"] = "p2pkh";
    BTCInputScriptType["SpendMultisig"] = "p2sh";
    BTCInputScriptType["External"] = "external";
    BTCInputScriptType["SpendWitness"] = "p2wpkh";
    BTCInputScriptType["SpendP2SHWitness"] = "p2sh-p2wpkh";
})(BTCInputScriptType = exports.BTCInputScriptType || (exports.BTCInputScriptType = {}));
var BTCOutputScriptType;
(function (BTCOutputScriptType) {
    BTCOutputScriptType["PayToAddress"] = "p2pkh";
    BTCOutputScriptType["PayToMultisig"] = "p2sh";
    BTCOutputScriptType["Bech32"] = "bech32";
    BTCOutputScriptType["PayToWitness"] = "p2wpkh";
    BTCOutputScriptType["PayToP2SHWitness"] = "p2sh-p2wpkh";
})(BTCOutputScriptType = exports.BTCOutputScriptType || (exports.BTCOutputScriptType = {}));
var BTCOutputAddressType;
(function (BTCOutputAddressType) {
    BTCOutputAddressType["Spend"] = "spend";
    BTCOutputAddressType["Transfer"] = "transfer";
    BTCOutputAddressType["Change"] = "change";
    BTCOutputAddressType["Exchange"] = "exchange";
})(BTCOutputAddressType = exports.BTCOutputAddressType || (exports.BTCOutputAddressType = {}));
function unknownUTXOPath(path, coin, scriptType) {
    return {
        verbose: utils_1.addressNListToBIP32(path),
        coin,
        scriptType,
        isKnown: false,
    };
}
exports.unknownUTXOPath = unknownUTXOPath;
function describeUTXOPath(path, coin, scriptType) {
    const unknown = unknownUTXOPath(path, coin, scriptType);
    if (path.length !== 3 && path.length !== 5)
        return unknown;
    if ((path[0] & 0x80000000) >>> 0 !== 0x80000000)
        return unknown;
    let purpose = path[0] & 0x7fffffff;
    if (![44, 49, 84].includes(purpose))
        return unknown;
    if (purpose === 44 && scriptType !== BTCInputScriptType.SpendAddress)
        return unknown;
    if (purpose === 49 && scriptType !== BTCInputScriptType.SpendP2SHWitness)
        return unknown;
    let wholeAccount = path.length === 3;
    let script = {
        [BTCInputScriptType.SpendAddress]: ["Legacy"],
        [BTCInputScriptType.SpendP2SHWitness]: [],
        [BTCInputScriptType.SpendWitness]: ["Segwit"],
        [BTCInputScriptType.Bech32]: ["Segwit Native"],
    }[scriptType];
    let isPrefork = false;
    const slip44 = utils_1.slip44ByCoin(coin);
    if (slip44 === undefined)
        return unknown;
    if (path[1] !== 0x80000000 + slip44) {
        switch (coin) {
            case "BitcoinCash":
            case "BitcoinGold": {
                if (path[1] === 0x80000000 + utils_1.slip44ByCoin("Bitcoin")) {
                    isPrefork = true;
                    break;
                }
                return unknown;
            }
            case "BitcoinSV": {
                if (path[1] === 0x80000000 + utils_1.slip44ByCoin("Bitcoin") || path[1] === 0x80000000 + utils_1.slip44ByCoin("BitcoinCash")) {
                    isPrefork = true;
                    break;
                }
                return unknown;
            }
            default:
                return unknown;
        }
    }
    let attributes = isPrefork ? ["Prefork"] : [];
    switch (coin) {
        case "Bitcoin":
        case "Litecoin":
        case "BitcoinGold":
        case "Testnet": {
            if (script)
                attributes = attributes.concat(script);
            break;
        }
        default:
            break;
    }
    let attr = attributes.length ? ` (${attributes.join(", ")})` : "";
    let accountIdx = path[2] & 0x7fffffff;
    if (wholeAccount) {
        return {
            coin,
            verbose: `${coin} Account #${accountIdx}${attr}`,
            accountIdx,
            wholeAccount: true,
            isKnown: true,
            scriptType,
            isPrefork,
        };
    }
    else {
        let change = path[3] === 1 ? "Change " : "";
        let addressIdx = path[4];
        return {
            coin,
            verbose: `${coin} Account #${accountIdx}, ${change}Address #${addressIdx}${attr}`,
            accountIdx,
            addressIdx,
            wholeAccount: false,
            isKnown: true,
            isChange: path[3] === 1,
            scriptType,
            isPrefork,
        };
    }
}
exports.describeUTXOPath = describeUTXOPath;
function legacyAccount(coin, slip44, accountIdx) {
    return {
        coin,
        scriptType: BTCInputScriptType.SpendAddress,
        addressNList: [0x80000000 + 44, 0x80000000 + slip44, 0x80000000 + accountIdx],
    };
}
exports.legacyAccount = legacyAccount;
function segwitAccount(coin, slip44, accountIdx) {
    return {
        coin,
        scriptType: BTCInputScriptType.SpendP2SHWitness,
        addressNList: [0x80000000 + 49, 0x80000000 + slip44, 0x80000000 + accountIdx],
    };
}
exports.segwitAccount = segwitAccount;
function segwitNativeAccount(coin, slip44, accountIdx) {
    return {
        coin,
        scriptType: BTCInputScriptType.SpendWitness,
        addressNList: [0x80000000 + 84, 0x80000000 + slip44, 0x80000000 + accountIdx],
    };
}
exports.segwitNativeAccount = segwitNativeAccount;
//# sourceMappingURL=bitcoin.js.map