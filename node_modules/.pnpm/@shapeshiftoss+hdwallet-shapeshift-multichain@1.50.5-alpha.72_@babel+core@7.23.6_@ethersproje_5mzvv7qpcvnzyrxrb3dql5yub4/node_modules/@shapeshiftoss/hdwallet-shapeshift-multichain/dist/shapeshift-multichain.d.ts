import * as core from "@shapeshiftoss/hdwallet-core";
import { AddEthereumChainParameter } from "@shapeshiftoss/hdwallet-core";
export declare function isMetaMask(wallet: core.HDWallet): wallet is MetaMaskShapeShiftMultiChainHDWallet;
export declare class MetaMaskShapeShiftMultiChainHDWalletInfo implements core.HDWalletInfo, core.ETHWalletInfo {
    ethGetChainId?(): Promise<number | null>;
    ethSwitchChain?(params: core.AddEthereumChainParameter): Promise<void>;
    ethAddChain?(params: core.AddEthereumChainParameter): Promise<void>;
    readonly _supportsBTCInfo = true;
    readonly _supportsETHInfo = true;
    readonly _supportsCosmosInfo = true;
    readonly _supportsBinanceInfo = false;
    readonly _supportsRippleInfo = false;
    readonly _supportsEosInfo = false;
    readonly _supportsFioInfo = false;
    readonly _supportsThorchainInfo = true;
    getVendor(): string;
    hasOnDevicePinEntry(): boolean;
    hasOnDevicePassphrase(): boolean;
    hasOnDeviceDisplay(): boolean;
    hasOnDeviceRecovery(): boolean;
    hasNativeShapeShift(srcCoin: core.Coin, dstCoin: core.Coin): boolean;
    supportsBip44Accounts(): boolean;
    supportsOfflineSigning(): boolean;
    supportsBroadcast(): boolean;
    describePath(msg: core.DescribePath): core.PathDescription;
    bitcoinSupportsNetwork(chainId?: number): Promise<boolean>;
    bitcoinSupportsSecureTransfer(): Promise<boolean>;
    bitcoinSupportsNativeShapeShift(): boolean;
    bitcoinGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
    bitcoinNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    bitcoinCashSupportsNetwork(chainId?: number): Promise<boolean>;
    bitcoinCashSupportsSecureTransfer(): Promise<boolean>;
    bitcoinCashSupportsNativeShapeShift(): boolean;
    bitcoinCashGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
    bitcoinCashNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    cosmosSupportsNetwork(chainId?: number): Promise<boolean>;
    cosmosSupportsSecureTransfer(): Promise<boolean>;
    cosmosSupportsNativeShapeShift(): boolean;
    cosmosGetAccountPaths(msg: core.CosmosGetAccountPaths): Array<core.CosmosAccountPath>;
    cosmosNextAccountPath(msg: core.CosmosAccountPath): core.CosmosAccountPath | undefined;
    dogecoinSupportsNetwork(chainId?: number): Promise<boolean>;
    dogecoinSupportsSecureTransfer(): Promise<boolean>;
    dogecoinSupportsNativeShapeShift(): boolean;
    dogecoinGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
    dogecoinNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    ethSupportsNetwork(chainId: number): Promise<boolean>;
    ethSupportsSecureTransfer(): Promise<boolean>;
    ethSupportsNativeShapeShift(): boolean;
    ethGetAccountPaths(msg: core.ETHGetAccountPath): Array<core.ETHAccountPath>;
    ethNextAccountPath(msg: core.ETHAccountPath): core.ETHAccountPath | undefined;
    ethSupportsEIP1559(): Promise<boolean>;
    litecoinSupportsNetwork(chainId?: number): Promise<boolean>;
    litecoinSupportsSecureTransfer(): Promise<boolean>;
    litecoinSupportsNativeShapeShift(): boolean;
    litecoinGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
    litecoinNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    thorchainSupportsNetwork(chainId?: number): Promise<boolean>;
    thorchainSupportsSecureTransfer(): Promise<boolean>;
    thorchainSupportsNativeShapeShift(): boolean;
    thorchainGetAccountPaths(msg: core.ThorchainGetAccountPaths): Array<core.ThorchainAccountPath>;
    thorchainNextAccountPath(msg: core.ThorchainAccountPath): core.ThorchainAccountPath | undefined;
}
export declare class MetaMaskShapeShiftMultiChainHDWallet implements core.HDWallet, core.BTCWallet, core.ETHWallet, core.CosmosWallet, core.ThorchainWallet {
    readonly _supportsETH = true;
    readonly _supportsETHInfo = true;
    readonly _supportsBTCInfo = true;
    readonly _supportsBTC = true;
    readonly _supportsCosmosInfo = true;
    readonly _supportsCosmos = true;
    readonly _supportsEthSwitchChain = true;
    readonly _supportsAvalanche = true;
    readonly _supportsOptimism = true;
    readonly _supportsBSC = true;
    readonly _supportsPolygon = true;
    readonly _supportsGnosis = true;
    readonly _supportsOsmosisInfo = true;
    readonly _supportsOsmosis = true;
    readonly _supportsBinanceInfo = false;
    readonly _supportsBinance = false;
    readonly _supportsDebugLink = false;
    readonly _isPortis = false;
    readonly _isMetaMask = true;
    readonly _supportsRippleInfo = false;
    readonly _supportsRipple = false;
    readonly _supportsEosInfo = false;
    readonly _supportsEos = false;
    readonly _supportsFioInfo = false;
    readonly _supportsFio = false;
    readonly _supportsThorchainInfo = true;
    readonly _supportsThorchain = true;
    info: MetaMaskShapeShiftMultiChainHDWalletInfo & core.HDWalletInfo;
    bitcoinAddress?: string | null;
    bitcoinCashAddress?: string | null;
    cosmosAddress?: string | null;
    dogecoinAddress?: string | null;
    ethAddress?: string | null;
    litecoinAddress?: string | null;
    osmosisAddress?: string | null;
    thorchainAddress?: string | null;
    provider: any;
    constructor(provider: unknown);
    ethSignTypedData?(msg: core.ETHSignTypedData): Promise<core.ETHSignedTypedData | null>;
    transport?: core.Transport | undefined;
    getFeatures(): Promise<Record<string, any>>;
    isLocked(): Promise<boolean>;
    getVendor(): string;
    getModel(): Promise<string>;
    getLabel(): Promise<string>;
    initialize(): Promise<void>;
    hasOnDevicePinEntry(): boolean;
    hasOnDevicePassphrase(): boolean;
    hasOnDeviceDisplay(): boolean;
    hasOnDeviceRecovery(): boolean;
    hasNativeShapeShift(srcCoin: core.Coin, dstCoin: core.Coin): boolean;
    supportsBip44Accounts(): boolean;
    supportsOfflineSigning(): boolean;
    supportsBroadcast(): boolean;
    clearSession(): Promise<void>;
    ping(msg: core.Ping): Promise<core.Pong>;
    sendPin(pin: string): Promise<void>;
    sendPassphrase(passphrase: string): Promise<void>;
    sendCharacter(charater: string): Promise<void>;
    sendWord(word: string): Promise<void>;
    cancel(): Promise<void>;
    wipe(): Promise<void>;
    reset(msg: core.ResetDevice): Promise<void>;
    recover(msg: core.RecoverDevice): Promise<void>;
    loadDevice(msg: core.LoadDevice): Promise<void>;
    describePath(msg: core.DescribePath): core.PathDescription;
    publicKeysCache: Map<string, Array<core.PublicKey | null>>;
    getPublicKeys(msg: Array<core.GetPublicKey>): Promise<Array<core.PublicKey | null>>;
    isInitialized(): Promise<boolean>;
    /** INSERT NEW CODE HERE */
    /** BITCOIN */
    btcSupportsSecureTransfer(): Promise<boolean>;
    btcSupportsNativeShapeShift(): boolean;
    btcGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
    btcNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    addressCache: Map<string, string>;
    btcGetAddress(msg: core.BTCGetAddress): Promise<string | null>;
    btcSignTx(msg: core.BTCSignTx): Promise<core.BTCSignedTx | null>;
    btcSignMessage(msg: core.BTCSignMessage): Promise<core.BTCSignedMessage | null>;
    btcVerifyMessage(msg: core.BTCVerifyMessage): Promise<boolean | null>;
    btcSupportsScriptType(coin: string, scriptType?: core.BTCInputScriptType | undefined): Promise<boolean>;
    btcSupportsCoin(coin: core.Coin): Promise<boolean>;
    btcIsSameAccount(msg: core.BTCAccountPath[]): boolean;
    /** BITCOIN CASH */
    bitcoinCashSupportsSecureTransfer(): Promise<boolean>;
    bitcoinCashSupportsNativeShapeShift(): boolean;
    bitcoinCashGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
    bitcoinCashNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    bitcoinCashGetAddress(msg: core.BTCGetAddress): Promise<string | null>;
    bitcoinCashSignTx(msg: core.BTCSignTx): Promise<core.BTCSignedTx | null>;
    /** COSMOS */
    cosmosSupportsSecureTransfer(): Promise<boolean>;
    cosmosSupportsNativeShapeShift(): boolean;
    cosmosGetAccountPaths(msg: core.CosmosGetAccountPaths): Array<core.CosmosAccountPath>;
    cosmosNextAccountPath(msg: core.CosmosAccountPath): core.CosmosAccountPath | undefined;
    cosmosGetAddress(msg: core.CosmosGetAddress): Promise<string | null>;
    cosmosSignTx(msg: core.CosmosSignTx): Promise<core.CosmosSignedTx | null>;
    /** DOGECOIN */
    dogecoinSupportsSecureTransfer(): Promise<boolean>;
    dogecoinSupportsNativeShapeShift(): boolean;
    dogecoinGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
    dogecoinNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    dogecoinGetAddress(msg: core.BTCGetAddress): Promise<string | null>;
    dogecoinSignTx(msg: core.BTCSignTx): Promise<core.BTCSignedTx | null>;
    /** ETHEREUM */
    disconnect(): Promise<void>;
    ethSupportsNetwork(chainId?: number): Promise<boolean>;
    ethGetChainId(): Promise<number | null>;
    ethAddChain(params: AddEthereumChainParameter): Promise<void>;
    ethSwitchChain(params: AddEthereumChainParameter): Promise<void>;
    ethSupportsSecureTransfer(): Promise<boolean>;
    ethSupportsNativeShapeShift(): boolean;
    ethSupportsEIP1559(): Promise<boolean>;
    ethGetAccountPaths(msg: core.ETHGetAccountPath): Array<core.ETHAccountPath>;
    ethNextAccountPath(msg: core.ETHAccountPath): core.ETHAccountPath | undefined;
    ethGetAddress(msg: core.ETHGetAddress): Promise<string | null>;
    ethSignTx(msg: core.ETHSignTx): Promise<core.ETHSignedTx | null>;
    ethSendTx(msg: core.ETHSignTx): Promise<core.ETHTxHash | null>;
    ethSignMessage(msg: core.ETHSignMessage): Promise<core.ETHSignedMessage | null>;
    ethVerifyMessage(msg: core.ETHVerifyMessage): Promise<boolean | null>;
    /** LITECOIN */
    litecoinSupportsSecureTransfer(): Promise<boolean>;
    litecoinSupportsNativeShapeShift(): boolean;
    litecoinGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
    litecoinNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
    litecoinGetAddress(msg: core.BTCGetAddress): Promise<string | null>;
    litecoinSignTx(msg: core.BTCSignTx): Promise<core.BTCSignedTx | null>;
    /** THORCHAIN */
    thorchainSupportsSecureTransfer(): Promise<boolean>;
    thorchainSupportsNativeShapeShift(): boolean;
    thorchainGetAccountPaths(msg: core.ThorchainGetAccountPaths): Array<core.ThorchainAccountPath>;
    thorchainNextAccountPath(msg: core.ThorchainAccountPath): core.ThorchainAccountPath | undefined;
    thorchainGetAddress(msg: core.ThorchainGetAddress): Promise<string | null>;
    thorchainSignTx(msg: core.ThorchainSignTx): Promise<core.ThorchainSignedTx | null>;
    getDeviceID(): Promise<string>;
    getFirmwareVersion(): Promise<string>;
}
//# sourceMappingURL=shapeshift-multichain.d.ts.map