"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.thorchainSignTx = exports.thorchainGetAddress = exports.thorchainNextAccountPath = exports.thorchainGetAccountPaths = void 0;
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const metamask_snaps_adapter_1 = require("@shapeshiftoss/metamask-snaps-adapter");
const common_1 = require("./common");
function thorchainGetAccountPaths(msg) {
    return [
        {
            addressNList: [0x80000000 + 44, 0x80000000 + core.slip44ByCoin("Thorchain"), 0x80000000 + msg.accountIdx, 0, 0],
        },
    ];
}
exports.thorchainGetAccountPaths = thorchainGetAccountPaths;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function thorchainNextAccountPath(msg) {
    // Only support one account for now (like portis).
    return undefined;
}
exports.thorchainNextAccountPath = thorchainNextAccountPath;
function thorchainGetAddress(msg) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0, metamask_snaps_adapter_1.thorchainGetAddress)({ snapId: common_1.SNAP_ID, addressParams: { addressNList: msg.addressNList } });
    });
}
exports.thorchainGetAddress = thorchainGetAddress;
function thorchainSignTx(msg) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0, metamask_snaps_adapter_1.thorchainSignTransaction)({ snapId: common_1.SNAP_ID, transaction: msg });
    });
}
exports.thorchainSignTx = thorchainSignTx;
//# sourceMappingURL=thorchain.js.map