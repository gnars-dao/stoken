"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = void 0;
/*

     Pioneer SDK
        A typescript sdk for integrating cryptocurrency wallets info apps

 */
const TAG = " | Pioneer-sdk | ";
const log = require("@pioneer-platform/loggerdog")();
const swapkit_core_1 = require("@pioneer-platform/swapkit-core");
let { blockchains, getPaths, getPrecision, getExplorerUrl, getExplorerAddressUrl, getExplorerTxUrl, baseAmountToNative, nativeToBaseAmount, getNativeAssetForBlockchain, assetToBase, assetAmount, getSwapProtocals, xpubConvert, addressNListToBIP32, COIN_MAP, COIN_MAP_LONG, COIN_MAP_KEEPKEY_LONG, getRangoBlockchainName } = require('@pioneer-platform/pioneer-coins');
const connect_1 = require("./connect");
const support_1 = require("./support");
// @ts-ignore
const pioneer_client_1 = __importDefault(require("@pioneer-platform/pioneer-client"));
class SDK {
    // public startSocket: () => Promise<any>;
    // public stopSocket: () => any;
    // public sendToAddress: (tx:any) => Promise<any>;
    // public swapQuote: (tx:any) => Promise<any>;
    // public build: (tx:any) => Promise<any>;
    // public sign: (tx:any, wallet:any) => Promise<any>;
    // public broadcast: (tx:any) => Promise<any>;
    constructor(spec, config) {
        this.status = 'preInit';
        this.spec = config.spec || 'https://pioneers.dev/spec/swagger';
        this.wss = config.wss || 'wss://pioneers.dev';
        this.username = config.username; // or generate?
        this.queryKey = config.queryKey; // or generate?
        this.paths = [...config.paths, ...getPaths()];
        this.pubkeys = [];
        this.pioneer = null;
        this.swapKit = null;
        this.context = "";
        this.assetContext = {};
        this.blockchainContext = {};
        this.wallets = [];
        // @ts-ignore
        this.init = async function () {
            let tag = TAG + " | init | ";
            try {
                if (!this.username)
                    throw Error("username required!");
                if (!this.queryKey)
                    throw Error("queryKey required!");
                if (!this.wss)
                    throw Error("wss required!");
                let PioneerClient = new pioneer_client_1.default(config.spec, config);
                this.pioneer = await PioneerClient.init();
                if (!this.pioneer)
                    throw Error("Fialed to init pioneer server!");
                //init wallets
                this.wallets = await (0, connect_1.initializeWallets)();
                log.info("wallets", this.wallets);
                //init swapkit
                this.swapKit = new swapkit_core_1.SwapKitCore();
                log.info(tag, "this.swapKit: ", this.swapKit);
                let ethplorerApiKey = process.env.ETHPLORER_API_KEY || 'EK-xs8Hj-qG4HbLY-LoAu7';
                let covalentApiKey = process.env.COVALENT_API_KEY || 'cqt_rQ6333MVWCVJFVX3DbCCGMVqRH4q';
                let utxoApiKey = process.env.BLOCKCHAIR_API_KEY || 'A___Tcn5B16iC3mMj7QrzZCb2Ho1QBUf';
                let walletConnectProjectId = process.env.WALLET_CONNECT_PROJECT_ID || 'A___Tcn5B16iC3mMj7QrzZCb2Ho1QBUf';
                let stagenet = false;
                await this.swapKit.extend({
                    config: {
                        ethplorerApiKey,
                        covalentApiKey,
                        utxoApiKey,
                        walletConnectProjectId,
                        stagenet,
                    },
                    wallets: [this.wallets[0].wallet],
                });
                //done registering, now get the user
                //this.refresh()
                if (!this.pioneer)
                    throw Error("Failed to init pioneer server!");
                return this.pioneer;
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
        this.pairWallet = async function (wallet) {
            let tag = TAG + " | pairWallet | ";
            try {
                log.debug(tag, "Pairing Wallet");
                if (!wallet)
                    throw Error("Must have wallet to pair!");
                //filter wallets by type
                let walletSelected = this.wallets.filter((w) => w.type === wallet);
                walletSelected = walletSelected[0];
                log.info(tag, "walletSelected: ", walletSelected);
                //supported chains
                let AllChainsSupported = support_1.availableChainsByWallet[walletSelected.type];
                log.info(tag, "walletSelected.wallet.connectMethodName: ", walletSelected);
                log.info(tag, "walletSelected.wallet.connectMethodName: ", walletSelected.wallet.connectMethodName);
                const resultKeepKey = await this.swapKit[walletSelected.wallet.connectMethodName](AllChainsSupported);
                console.log("resultKeepKey: ", resultKeepKey);
                console.log("client: ", this.swapKit);
                return true;
            }
            catch (e) {
                log.error(tag, "e: ", e);
                //response:
                log.error(tag, "e: ", JSON.stringify(e));
                // log.error(tag, "e2: ", e.response)
                // log.error(tag, "e3: ", e.response.data)
            }
        };
    }
}
exports.SDK = SDK;
exports.default = SDK;
