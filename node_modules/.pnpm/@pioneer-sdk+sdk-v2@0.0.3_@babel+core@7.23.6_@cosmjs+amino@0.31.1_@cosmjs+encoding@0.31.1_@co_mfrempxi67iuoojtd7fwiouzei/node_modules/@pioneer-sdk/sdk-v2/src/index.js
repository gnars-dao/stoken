"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SDK = void 0;
/*

     Pioneer SDK
        A typescript sdk for integrating cryptocurrency wallets info apps

 */
const TAG = " | Pioneer-sdk | ";
const log = require("@pioneer-platform/loggerdog")();
let { blockchains, getPaths, getPrecision, getExplorerUrl, getExplorerAddressUrl, getExplorerTxUrl, baseAmountToNative, nativeToBaseAmount, getNativeAssetForBlockchain, assetToBase, assetAmount, getSwapProtocals, xpubConvert, addressNListToBIP32, COIN_MAP, COIN_MAP_LONG, COIN_MAP_KEEPKEY_LONG, getRangoBlockchainName } = require('@pioneer-platform/pioneer-coins');
// @ts-ignore
const pioneer_client_1 = __importDefault(require("@pioneer-platform/pioneer-client"));
class SDK {
    constructor(spec, config) {
        this.status = 'preInit';
        this.spec = config.spec || 'https://pioneers.dev/spec/swagger';
        this.wss = config.wss || 'wss://pioneers.dev';
        this.username = config.username; // or generate?
        this.queryKey = config.queryKey; // or generate?
        this.paths = [...config.paths, ...getPaths()];
        this.pubkeys = [];
        this.context = "";
        this.assetContext = {};
        this.blockchainContext = {};
        this.wallets = [];
        // @ts-ignore
        this.init = async function () {
            let tag = TAG + " | init | ";
            try {
                if (!this.username)
                    throw Error("username required!");
                if (!this.queryKey)
                    throw Error("queryKey required!");
                if (!this.wss)
                    throw Error("wss required!");
                let PioneerClient = new pioneer_client_1.default(config.spec, config);
                this.pioneer = await PioneerClient.init();
                if (!this.pioneer)
                    throw Error("Fialed to init pioneer server!");
                //init swapkit
                //done registering, now get the user
                //this.refresh()
                if (!this.pioneer)
                    throw Error("Failed to init pioneer server!");
                return this.pioneer;
            }
            catch (e) {
                log.error(tag, "e: ", e);
            }
        };
    }
}
exports.SDK = SDK;
exports.default = SDK;
