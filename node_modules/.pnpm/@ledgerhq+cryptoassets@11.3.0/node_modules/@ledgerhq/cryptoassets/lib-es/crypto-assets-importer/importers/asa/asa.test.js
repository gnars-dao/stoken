var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from "axios";
import { importAsaTokens } from ".";
import fs from "fs";
const asa = [["137594422", "HDL", "HEAD", "K3SN", 6, null]];
const mockedAxios = jest.spyOn(axios, "get");
describe("import ASA tokens", () => {
    beforeEach(() => {
        mockedAxios.mockImplementation(() => Promise.resolve({ data: asa }));
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it("should output the file in the correct format", () => __awaiter(void 0, void 0, void 0, function* () {
        const expectedFile = `export type AlgorandASAToken = [
  string, // id
  string, // abbr
  string, // name
  string, // contractAddress
  number, // precision
  boolean?, // enableCountervalues
];

import tokens from "./asa.json";

export default tokens as AlgorandASAToken[];
`;
        const mockedFs = (fs.writeFileSync = jest.fn());
        yield importAsaTokens(".");
        expect(mockedAxios).toHaveBeenCalledWith(expect.stringMatching(/.*\/asa.json/));
        expect(mockedFs).toHaveBeenNthCalledWith(1, "asa.json", JSON.stringify(asa));
        expect(mockedFs).toHaveBeenNthCalledWith(2, "asa.ts", expectedFile);
    }));
});
//# sourceMappingURL=asa.test.js.map