var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fs from "fs";
import { fetchTokens } from "../fetch";
export const importERC20Exchange = (outputDir) => __awaiter(void 0, void 0, void 0, function* () {
    console.log("importing ERC20 exchange...");
    try {
        const erc20Exchange = yield fetchTokens("exchange/erc20.json");
        fs.writeFileSync(`${outputDir}/exchange/erc20.json`, JSON.stringify(erc20Exchange));
        const erc20typeStringified = `export type ERC20Exchange = [string, string, string];`;
        const tokensStringified = `import exchanges from "./erc20.json";`;
        const exportStringified = `export default exchanges as ERC20Exchange[];`;
        fs.writeFileSync(`${outputDir}/exchange/erc20.ts`, `${erc20typeStringified}

${tokensStringified}

${exportStringified}
`);
        console.log("importing ERC20 exchange success");
    }
    catch (err) {
        console.error(err);
    }
});
//# sourceMappingURL=erc20.js.map