var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import fs from "fs";
import path from "path";
import { fetchTokens } from "../../fetch";
export const importSPLTokens = (outputDir) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        console.log("importing spl tokens...");
        const splTokens = yield fetchTokens("spl.json");
        const filePath = path.join(outputDir, "spl");
        const splTypeStringified = `export type SPLToken = [
  number, // chainId
  string, // name
  string, // symbol
  string, // address
  number, // decimals
  boolean?, // enableCountervalues
];`;
        fs.writeFileSync(`${filePath}.json`, JSON.stringify(splTokens));
        fs.writeFileSync(`${filePath}.ts`, `${splTypeStringified}

import tokens from "./spl.json";

export default tokens as SPLToken[];
`);
        console.log("importing spl tokens sucess");
    }
    catch (err) {
        console.error(err);
    }
});
//# sourceMappingURL=index.js.map