var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from "axios";
import { importERC20Signatures } from ".";
import fs from "fs";
const erc20Signatures = "erc20Signature";
describe("import Cardano Native tokens", () => {
    beforeEach(() => {
        const mockedAxios = jest.spyOn(axios, "get");
        mockedAxios.mockImplementation(() => Promise.resolve({ data: erc20Signatures }));
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it("should output the file in the correct format", () => __awaiter(void 0, void 0, void 0, function* () {
        const expectedFile = `export default ${JSON.stringify(erc20Signatures, null, 2)};`;
        const mockedFs = (fs.writeFileSync = jest.fn());
        yield importERC20Signatures(".");
        expect(mockedFs).toHaveBeenNthCalledWith(1, "erc20-signatures.json", JSON.stringify(erc20Signatures));
        expect(mockedFs).toHaveBeenNthCalledWith(2, "erc20-signatures.ts", expectedFile);
    }));
});
//# sourceMappingURL=erc20-signature.test.js.map