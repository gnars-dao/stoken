var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from "axios";
import { importSPLTokens } from ".";
import fs from "fs";
const splTokens = [["chainId", "symbol", "name", "address", 6, null]];
const mockedAxios = jest.spyOn(axios, "get");
describe("import Spl tokens", () => {
    beforeEach(() => {
        mockedAxios.mockImplementation(() => Promise.resolve({ data: splTokens }));
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it("should output the file in the correct format", () => __awaiter(void 0, void 0, void 0, function* () {
        const expectedFile = `export type SPLToken = [
  number, // chainId
  string, // name
  string, // symbol
  string, // address
  number, // decimals
  boolean?, // enableCountervalues
];

import tokens from "./spl.json";

export default tokens as SPLToken[];
`;
        const mockedFs = (fs.writeFileSync = jest.fn());
        yield importSPLTokens(".");
        expect(mockedAxios).toHaveBeenCalledWith(expect.stringMatching(/.*\/spl.json/));
        expect(mockedFs).toHaveBeenNthCalledWith(1, "spl.json", JSON.stringify(splTokens));
        expect(mockedFs).toHaveBeenNthCalledWith(2, "spl.ts", expectedFile);
    }));
});
//# sourceMappingURL=spl.test.js.map