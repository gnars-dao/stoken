var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import axios from "axios";
import { fetchTokens } from ".";
jest.mock("axios");
const mockedAxios = axios;
describe("fetcher", () => {
    afterEach(() => {
        jest.clearAllMocks();
    });
    it("should return data when fetched", () => __awaiter(void 0, void 0, void 0, function* () {
        const response = [{ myToken: { name: "myToken" } }];
        mockedAxios.get.mockImplementation(() => Promise.resolve({ data: response }));
        const tokens = yield fetchTokens("tokens.json");
        expect(tokens).toBe(response);
    }));
    it("should throw error if fetch failed", () => __awaiter(void 0, void 0, void 0, function* () {
        mockedAxios.get.mockImplementation(() => Promise.reject({ message: "could not fetch" }));
        expect(() => __awaiter(void 0, void 0, void 0, function* () {
            yield fetchTokens("tokens.json");
        })).rejects.toThrow();
    }));
});
//# sourceMappingURL=fetch.test.js.map