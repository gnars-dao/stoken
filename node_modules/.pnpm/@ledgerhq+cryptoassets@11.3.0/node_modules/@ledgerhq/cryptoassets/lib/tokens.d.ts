import type { CryptoCurrency, TokenCurrency } from "@ledgerhq/types-cryptoassets";
import { BEP20Token } from "./data/bep20";
import { ERC20Token } from "./data/erc20";
import { PolygonERC20Token } from "./data/polygon-erc20";
type TokensListOptions = {
    withDelisted: boolean;
};
export declare function createTokenHash(token: TokenCurrency): string;
/**
 * Only for jest purpose, clear all the init list
 */
export declare function __clearAllLists(): void;
/**
 *
 */
export declare function listTokens(options?: Partial<TokensListOptions>): TokenCurrency[];
/**
 *
 */
export declare function listTokensForCryptoCurrency(currency: CryptoCurrency, options?: Partial<TokensListOptions>): TokenCurrency[];
/**
 *
 */
export declare function listTokenTypesForCryptoCurrency(currency: CryptoCurrency): string[];
/**
 *
 */
export declare function findTokenByTicker(ticker: string): TokenCurrency | null | undefined;
/**
 *
 */
export declare function findTokenById(id: string): TokenCurrency | null | undefined;
export declare function findTokenByAddress(address: string): TokenCurrency | null | undefined;
export declare function findTokenByAddressInCurrency(address: string, currencyId: string): TokenCurrency | null | undefined;
/**
 *
 */
export declare const hasTokenId: (id: string) => boolean;
/**
 *
 */
export declare function getTokenById(id: string): TokenCurrency;
export declare function addTokens(list: (TokenCurrency | undefined)[]): void;
export declare function convertERC20([parentCurrencyId, token, ticker, magnitude, name, ledgerSignature, contractAddress, disableCountervalue, delisted,]: ERC20Token | PolygonERC20Token): TokenCurrency | undefined;
export declare function convertBEP20([parentCurrencyId, token, ticker, magnitude, name, ledgerSignature, contractAddress, disableCountervalue, delisted,]: BEP20Token): TokenCurrency | undefined;
export {};
//# sourceMappingURL=tokens.d.ts.map