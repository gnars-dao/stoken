"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importEVMTokens = exports.importTokenByChainId = void 0;
const promises_1 = __importDefault(require("fs/promises"));
const fs_1 = require("fs");
const path_1 = __importDefault(require("path"));
const fetch_1 = require("../../fetch");
const currencies_1 = require("../../../currencies");
const chainNames = new Map();
const importTokenByChainId = (outputDir, chainId) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        console.log(`importing chain with chainId: ${chainId}...`);
        const erc20 = yield (0, fetch_1.fetchTokens)(`evm/${chainId}/erc20.json`);
        const erc20Signatures = yield (0, fetch_1.fetchTokens)(`evm/${chainId}/erc20-signatures.json`);
        const indexTsStringified = `import tokens from "./erc20.json";
import signatures from "./erc20-signatures.json";

export default { tokens, signatures };
`;
        if (erc20 && erc20Signatures) {
            const dirPath = path_1.default.join(outputDir, "evm", chainId.toString());
            if (!(0, fs_1.existsSync)(dirPath)) {
                yield promises_1.default.mkdir(dirPath, { recursive: true });
            }
            const [coinName] = erc20[0];
            chainNames.set(chainId, coinName);
            yield promises_1.default.writeFile(path_1.default.join(dirPath, "erc20.json"), JSON.stringify(erc20));
            yield promises_1.default.writeFile(path_1.default.join(dirPath, "erc20-signatures.json"), JSON.stringify(erc20Signatures));
            yield promises_1.default.writeFile(path_1.default.join(dirPath, "index.ts"), indexTsStringified);
            console.log(`importing chain with chainId: ${chainId} (${coinName}) success`);
        }
    }
    catch (err) {
        console.error(err);
    }
});
exports.importTokenByChainId = importTokenByChainId;
const importEVMTokens = (outputDir) => __awaiter(void 0, void 0, void 0, function* () {
    console.log("Importing evm tokens...");
    const supportedChainIds = Object.values(currencies_1.cryptocurrenciesById)
        .filter(cryptocurrency => { var _a; return (_a = cryptocurrency.ethereumLikeInfo) === null || _a === void 0 ? void 0 : _a.chainId; })
        .map(cryptocurrency => cryptocurrency.ethereumLikeInfo.chainId)
        .sort((a, b) => a - b);
    yield Promise.allSettled(supportedChainIds.map(chainId => (0, exports.importTokenByChainId)(outputDir, chainId)));
    const rootIndexStringified = `${supportedChainIds
        .map(chainId => chainNames.has(chainId)
        ? `import ${chainNames.get(chainId)}_tokens from "./${chainId}/erc20.json"`
        : null)
        .filter(Boolean)
        .join(";" + String.fromCharCode(10))};

${supportedChainIds
        .map(chainId => chainNames.has(chainId)
        ? `import ${chainNames.get(chainId)}_signatures from "./${chainId}/erc20-signatures.json"`
        : null)
        .filter(Boolean)
        .join(";" + String.fromCharCode(10))};

export const tokens = {
${supportedChainIds
        .map(chainId => chainNames.has(chainId) ? `  ${chainId}: ${chainNames.get(chainId)}_tokens` : null)
        .filter(Boolean)
        .join("," + String.fromCharCode(10))},
};

export const signatures = {
${supportedChainIds
        .map(chainId => chainNames.has(chainId) ? `  ${chainId}: ${chainNames.get(chainId)}_signatures` : null)
        .filter(Boolean)
        .join("," + String.fromCharCode(10))},
};

export default {
  tokens,
  signatures,
};
`;
    yield promises_1.default.writeFile(`${outputDir}/evm/index.ts`, rootIndexStringified);
    console.log("Importing evm tokens success");
});
exports.importEVMTokens = importEVMTokens;
//# sourceMappingURL=index.js.map