"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const _1 = require(".");
const fs_1 = __importDefault(require("fs"));
const poylgonErc20 = [
    [
        "polygon",
        "(del)",
        "DEL",
        18,
        "(DEL)",
        "ledgerSignature",
        "0xcontractAddress",
        false,
        false,
        null,
    ],
];
const mockedAxios = jest.spyOn(axios_1.default, "get");
describe("import poylgon erc20", () => {
    beforeEach(() => {
        mockedAxios.mockImplementation(() => Promise.resolve({ data: poylgonErc20 }));
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it("should output the file in the correct format", () => __awaiter(void 0, void 0, void 0, function* () {
        const expectedFile = `export type PolygonERC20Token = [
  string, // parent currency id
  string, // token
  string, // ticker
  number, // precision
  string, // name
  string, // ledgerSignature
  string, // contract address
  boolean, // disabled counter value
  boolean, // delisted
  (string | null)?, // legacy
  (string | null)?, // legacy
];

import tokens from "./polygon-erc20.json";

export default tokens as PolygonERC20Token[];
`;
        const mockedFs = (fs_1.default.writeFileSync = jest.fn());
        yield (0, _1.importPolygonTokens)(".");
        expect(mockedAxios).toHaveBeenCalledWith(expect.stringMatching(/.*\/polygon-erc20.json/));
        expect(mockedFs).toHaveBeenNthCalledWith(1, "polygon-erc20.json", JSON.stringify(poylgonErc20));
        expect(mockedFs).toHaveBeenNthCalledWith(2, "polygon-erc20.ts", expectedFile);
    }));
});
//# sourceMappingURL=polygon.test.js.map