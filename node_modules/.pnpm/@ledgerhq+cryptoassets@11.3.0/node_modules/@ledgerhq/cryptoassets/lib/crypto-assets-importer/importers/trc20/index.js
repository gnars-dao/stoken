"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importTRC20Tokens = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const fetch_1 = require("../../fetch");
const importTRC20Tokens = (outputDir) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        console.log("importing trc20 tokens...");
        const trc20tokens = yield (0, fetch_1.fetchTokens)("trc20.json");
        const filePath = path_1.default.join(outputDir, "trc20");
        const trc20TypeStringified = `export type TRC20Token = [
  string, // id
  string, // abbr
  string, // name
  string, // contractAddress
  number, // precision
  boolean?, // delisted
  string?, // ledgerSignature
  boolean?, // enableCountervalues
];`;
        fs_1.default.writeFileSync(`${filePath}.json`, JSON.stringify(trc20tokens));
        fs_1.default.writeFileSync(`${filePath}.ts`, `${trc20TypeStringified}

import tokens from "./trc20.json";

export default tokens as TRC20Token[];
`);
        console.log("importing trc20 tokens sucess");
    }
    catch (err) {
        console.error(err);
    }
});
exports.importTRC20Tokens = importTRC20Tokens;
//# sourceMappingURL=index.js.map