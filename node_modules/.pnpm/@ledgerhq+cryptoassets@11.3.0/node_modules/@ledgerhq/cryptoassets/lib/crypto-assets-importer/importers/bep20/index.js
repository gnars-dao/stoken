"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.importBEP20 = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const fetch_1 = require("../../fetch");
const importBEP20 = (outputDir) => __awaiter(void 0, void 0, void 0, function* () {
    try {
        console.log("import BEP 20 tokens...");
        const bep20 = yield (0, fetch_1.fetchTokens)("bep20.json");
        const filePath = path_1.default.join(outputDir, "bep20");
        if (bep20) {
            fs_1.default.writeFileSync(`${filePath}.json`, JSON.stringify(bep20));
            fs_1.default.writeFileSync(`${filePath}.ts`, `export type BEP20Token = [
  string, // parent currency id
  string, // token
  string, // ticker
  number, // precision
  string, // name
  string, // ledgerSignature
  string, // contract address
  boolean, // disabled counter value
  boolean, // delisted
  (string | null)?, // legacy
];

import tokens from "./bep20.json";

export default tokens as BEP20Token[];
`);
            console.log("import BEP 20 tokens success");
        }
    }
    catch (err) {
        console.error(err);
    }
});
exports.importBEP20 = importBEP20;
//# sourceMappingURL=index.js.map