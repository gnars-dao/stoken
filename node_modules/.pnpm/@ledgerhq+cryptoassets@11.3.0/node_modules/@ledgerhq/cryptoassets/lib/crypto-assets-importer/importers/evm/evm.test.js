"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const axios_1 = __importDefault(require("axios"));
const _1 = require(".");
const promises_1 = __importDefault(require("fs/promises"));
const evmToken = [
    ["ethereum", "$aapl", "$AAPL", 18, "$AAPL", "signature", "address", true, false, null],
];
const evmTokenSignature = "signature";
describe("import EVM Token", () => {
    beforeEach(() => {
        const mockedAxios = jest.spyOn(axios_1.default, "get");
        mockedAxios.mockImplementation(url => {
            if (url.endsWith("erc20.json")) {
                return Promise.resolve({ data: evmToken });
            }
            else if (url.endsWith("erc20-signatures.json")) {
                return Promise.resolve({ data: evmTokenSignature });
            }
            return Promise.reject("Unexpected route call");
        });
    });
    afterEach(() => {
        jest.clearAllMocks();
    });
    it("should output the file in the correct format", () => __awaiter(void 0, void 0, void 0, function* () {
        const mockedFs = (promises_1.default.writeFile = jest.fn());
        yield (0, _1.importTokenByChainId)(".", 1);
        const expectedIndex = `import tokens from "./erc20.json";
import signatures from "./erc20-signatures.json";

export default { tokens, signatures };
`;
        expect(mockedFs).toHaveBeenNthCalledWith(1, "evm/1/erc20.json", JSON.stringify(evmToken));
        expect(mockedFs).toHaveBeenNthCalledWith(2, "evm/1/erc20-signatures.json", JSON.stringify(evmTokenSignature));
        expect(mockedFs).toHaveBeenNthCalledWith(3, "evm/1/index.ts", expectedIndex);
    }));
});
//# sourceMappingURL=evm.test.js.map