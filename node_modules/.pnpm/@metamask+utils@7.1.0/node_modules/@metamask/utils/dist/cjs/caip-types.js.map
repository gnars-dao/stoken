{"version":3,"sources":["../../src/caip-types.ts"],"sourcesContent":["import type { Infer } from 'superstruct';\nimport { is, pattern, string } from 'superstruct';\n\nexport const CAIP_CHAIN_ID_REGEX =\n  /^(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})$/u;\n\nexport const CAIP_NAMESPACE_REGEX = /^[-a-z0-9]{3,8}$/u;\n\nexport const CAIP_REFERENCE_REGEX = /^[-_a-zA-Z0-9]{1,32}$/u;\n\nexport const CAIP_ACCOUNT_ID_REGEX =\n  /^(?<chainId>(?<namespace>[-a-z0-9]{3,8}):(?<reference>[-_a-zA-Z0-9]{1,32})):(?<accountAddress>[-.%a-zA-Z0-9]{1,128})$/u;\n\nexport const CAIP_ACCOUNT_ADDRESS_REGEX = /^[-.%a-zA-Z0-9]{1,128}$/u;\n\n/**\n * A CAIP-2 chain ID, i.e., a human-readable namespace and reference.\n */\nexport const CaipChainIdStruct = pattern(string(), CAIP_CHAIN_ID_REGEX);\nexport type CaipChainId = `${string}:${string}`;\n\n/**\n * A CAIP-2 namespace, i.e., the first part of a CAIP chain ID.\n */\nexport const CaipNamespaceStruct = pattern(string(), CAIP_NAMESPACE_REGEX);\nexport type CaipNamespace = Infer<typeof CaipNamespaceStruct>;\n\n/**\n * A CAIP-2 reference, i.e., the second part of a CAIP chain ID.\n */\nexport const CaipReferenceStruct = pattern(string(), CAIP_REFERENCE_REGEX);\nexport type CaipReference = Infer<typeof CaipReferenceStruct>;\n\n/**\n * A CAIP-10 account ID, i.e., a human-readable namespace, reference, and account address.\n */\nexport const CaipAccountIdStruct = pattern(string(), CAIP_ACCOUNT_ID_REGEX);\nexport type CaipAccountId = `${string}:${string}:${string}`;\n\n/**\n * A CAIP-10 account address, i.e., the third part of the CAIP account ID.\n */\nexport const CaipAccountAddressStruct = pattern(\n  string(),\n  CAIP_ACCOUNT_ADDRESS_REGEX,\n);\nexport type CaipAccountAddress = Infer<typeof CaipAccountAddressStruct>;\n\n/**\n * Check if the given value is a {@link CaipChainId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipChainId}.\n */\nexport function isCaipChainId(value: unknown): value is CaipChainId {\n  return is(value, CaipChainIdStruct);\n}\n\n/**\n * Check if the given value is a {@link CaipNamespace}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipNamespace}.\n */\nexport function isCaipNamespace(value: unknown): value is CaipNamespace {\n  return is(value, CaipNamespaceStruct);\n}\n\n/**\n * Check if the given value is a {@link CaipReference}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipReference}.\n */\nexport function isCaipReference(value: unknown): value is CaipReference {\n  return is(value, CaipReferenceStruct);\n}\n\n/**\n * Check if the given value is a {@link CaipAccountId}.\n *\n * @param value - The value to check.\n * @returns Whether the value is a {@link CaipAccountId}.\n */\nexport function isCaipAccountId(value: unknown): value is CaipAccountId {\n  return is(value, CaipAccountIdStruct);\n}\n\n/**\n * Check if a value is a {@link CaipAccountAddress}.\n *\n * @param value - The value to validate.\n * @returns True if the value is a valid {@link CaipAccountAddress}.\n */\nexport function isCaipAccountAddress(\n  value: unknown,\n): value is CaipAccountAddress {\n  return is(value, CaipAccountAddressStruct);\n}\n\n/**\n * Parse a CAIP-2 chain ID to an object containing the namespace and reference.\n * This validates the CAIP-2 chain ID before parsing it.\n *\n * @param caipChainId - The CAIP-2 chain ID to validate and parse.\n * @returns The parsed CAIP-2 chain ID.\n */\nexport function parseCaipChainId(caipChainId: CaipChainId): {\n  namespace: CaipNamespace;\n  reference: CaipReference;\n} {\n  const match = CAIP_CHAIN_ID_REGEX.exec(caipChainId);\n  if (!match?.groups) {\n    throw new Error('Invalid CAIP chain ID.');\n  }\n\n  return {\n    namespace: match.groups.namespace as CaipNamespace,\n    reference: match.groups.reference as CaipReference,\n  };\n}\n\n/**\n * Parse an CAIP-10 account ID to an object containing the chain ID, parsed chain ID, and account address.\n * This validates the CAIP-10 account ID before parsing it.\n *\n * @param caipAccountId - The CAIP-10 account ID to validate and parse.\n * @returns The parsed CAIP-10 account ID.\n */\nexport function parseCaipAccountId(caipAccountId: CaipAccountId): {\n  address: CaipAccountAddress;\n  chainId: CaipChainId;\n  chain: { namespace: CaipNamespace; reference: CaipReference };\n} {\n  const match = CAIP_ACCOUNT_ID_REGEX.exec(caipAccountId);\n  if (!match?.groups) {\n    throw new Error('Invalid CAIP account ID.');\n  }\n\n  return {\n    address: match.groups.accountAddress as CaipAccountAddress,\n    chainId: match.groups.chainId as CaipChainId,\n    chain: {\n      namespace: match.groups.namespace as CaipNamespace,\n      reference: match.groups.reference as CaipReference,\n    },\n  };\n}\n"],"names":["CAIP_CHAIN_ID_REGEX","CAIP_NAMESPACE_REGEX","CAIP_REFERENCE_REGEX","CAIP_ACCOUNT_ID_REGEX","CAIP_ACCOUNT_ADDRESS_REGEX","CaipChainIdStruct","CaipNamespaceStruct","CaipReferenceStruct","CaipAccountIdStruct","CaipAccountAddressStruct","isCaipChainId","isCaipNamespace","isCaipReference","isCaipAccountId","isCaipAccountAddress","parseCaipChainId","parseCaipAccountId","pattern","string","value","is","caipChainId","match","exec","groups","Error","namespace","reference","caipAccountId","address","accountAddress","chainId","chain"],"mappings":";;;;;;;;;;;IAGaA,mBAAmB;eAAnBA;;IAGAC,oBAAoB;eAApBA;;IAEAC,oBAAoB;eAApBA;;IAEAC,qBAAqB;eAArBA;;IAGAC,0BAA0B;eAA1BA;;IAKAC,iBAAiB;eAAjBA;;IAMAC,mBAAmB;eAAnBA;;IAMAC,mBAAmB;eAAnBA;;IAMAC,mBAAmB;eAAnBA;;IAMAC,wBAAwB;eAAxBA;;IAYGC,aAAa;eAAbA;;IAUAC,eAAe;eAAfA;;IAUAC,eAAe;eAAfA;;IAUAC,eAAe;eAAfA;;IAUAC,oBAAoB;eAApBA;;IAaAC,gBAAgB;eAAhBA;;IAsBAC,kBAAkB;eAAlBA;;;6BAhIoB;AAE7B,MAAMhB,sBACX;AAEK,MAAMC,uBAAuB;AAE7B,MAAMC,uBAAuB;AAE7B,MAAMC,wBACX;AAEK,MAAMC,6BAA6B;AAKnC,MAAMC,oBAAoBY,IAAAA,oBAAO,EAACC,IAAAA,mBAAM,KAAIlB;AAM5C,MAAMM,sBAAsBW,IAAAA,oBAAO,EAACC,IAAAA,mBAAM,KAAIjB;AAM9C,MAAMM,sBAAsBU,IAAAA,oBAAO,EAACC,IAAAA,mBAAM,KAAIhB;AAM9C,MAAMM,sBAAsBS,IAAAA,oBAAO,EAACC,IAAAA,mBAAM,KAAIf;AAM9C,MAAMM,2BAA2BQ,IAAAA,oBAAO,EAC7CC,IAAAA,mBAAM,KACNd;AAUK,SAASM,cAAcS,KAAc;IAC1C,OAAOC,IAAAA,eAAE,EAACD,OAAOd;AACnB;AAQO,SAASM,gBAAgBQ,KAAc;IAC5C,OAAOC,IAAAA,eAAE,EAACD,OAAOb;AACnB;AAQO,SAASM,gBAAgBO,KAAc;IAC5C,OAAOC,IAAAA,eAAE,EAACD,OAAOZ;AACnB;AAQO,SAASM,gBAAgBM,KAAc;IAC5C,OAAOC,IAAAA,eAAE,EAACD,OAAOX;AACnB;AAQO,SAASM,qBACdK,KAAc;IAEd,OAAOC,IAAAA,eAAE,EAACD,OAAOV;AACnB;AASO,SAASM,iBAAiBM,WAAwB;IAIvD,MAAMC,QAAQtB,oBAAoBuB,IAAI,CAACF;IACvC,IAAI,CAACC,OAAOE,QAAQ;QAClB,MAAM,IAAIC,MAAM;IAClB;IAEA,OAAO;QACLC,WAAWJ,MAAME,MAAM,CAACE,SAAS;QACjCC,WAAWL,MAAME,MAAM,CAACG,SAAS;IACnC;AACF;AASO,SAASX,mBAAmBY,aAA4B;IAK7D,MAAMN,QAAQnB,sBAAsBoB,IAAI,CAACK;IACzC,IAAI,CAACN,OAAOE,QAAQ;QAClB,MAAM,IAAIC,MAAM;IAClB;IAEA,OAAO;QACLI,SAASP,MAAME,MAAM,CAACM,cAAc;QACpCC,SAAST,MAAME,MAAM,CAACO,OAAO;QAC7BC,OAAO;YACLN,WAAWJ,MAAME,MAAM,CAACE,SAAS;YACjCC,WAAWL,MAAME,MAAM,CAACG,SAAS;QACnC;IACF;AACF"}