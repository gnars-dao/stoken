{"version":3,"sources":["../../src/coercers.ts"],"sourcesContent":["import type { Infer } from 'superstruct';\nimport {\n  bigint,\n  coerce,\n  create,\n  instance,\n  number,\n  string,\n  StructError,\n  union,\n} from 'superstruct';\n\nimport { assert } from './assert';\nimport { bytesToHex, hexToBytes } from './bytes';\nimport type { Hex } from './hex';\nimport { StrictHexStruct } from './hex';\n\nconst NumberLikeStruct = union([number(), bigint(), string(), StrictHexStruct]);\nconst NumberCoercer = coerce(number(), NumberLikeStruct, Number);\nconst BigIntCoercer = coerce(bigint(), NumberLikeStruct, BigInt);\n\nconst BytesLikeStruct = union([StrictHexStruct, instance(Uint8Array)]);\nconst BytesCoercer = coerce(\n  instance(Uint8Array),\n  union([StrictHexStruct]),\n  hexToBytes,\n);\n\nconst HexCoercer = coerce(StrictHexStruct, instance(Uint8Array), bytesToHex);\n\nexport type NumberLike = Infer<typeof NumberLikeStruct>;\nexport type BytesLike = Infer<typeof BytesLikeStruct>;\n\n/**\n * Create a number from a number-like value.\n *\n * - If the value is a number, it is returned as-is.\n * - If the value is a `bigint`, it is converted to a number.\n * - If the value is a string, it is interpreted as a decimal number.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number.\n *\n * This validates that the value is a number-like value, and that the resulting\n * number is not `NaN` or `Infinity`.\n *\n * @example\n * ```typescript\n * const value = createNumber('0x010203');\n * console.log(value); // 66051\n *\n * const otherValue = createNumber(123n);\n * console.log(otherValue); // 123\n * ```\n * @param value - The value to create the number from.\n * @returns The created number.\n * @throws If the value is not a number-like value, or if the resulting number\n * is `NaN` or `Infinity`.\n */\nexport function createNumber(value: NumberLike): number {\n  try {\n    const result = create(value, NumberCoercer);\n\n    assert(\n      Number.isFinite(result),\n      `Expected a number-like value, got \"${value}\".`,\n    );\n\n    return result;\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(`Expected a number-like value, got \"${value}\".`);\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n\n/**\n * Create a `bigint` from a number-like value.\n *\n * - If the value is a number, it is converted to a `bigint`.\n * - If the value is a `bigint`, it is returned as-is.\n * - If the value is a string, it is interpreted as a decimal number and\n * converted to a `bigint`.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is\n * interpreted as a hexadecimal number and converted to a `bigint`.\n *\n * @example\n * ```typescript\n * const value = createBigInt('0x010203');\n * console.log(value); // 16909060n\n *\n * const otherValue = createBigInt(123);\n * console.log(otherValue); // 123n\n * ```\n * @param value - The value to create the bigint from.\n * @returns The created bigint.\n * @throws If the value is not a number-like value.\n */\nexport function createBigInt(value: NumberLike): bigint {\n  try {\n    // The `BigInt` constructor throws if the value is not a number-like value.\n    // There is no need to validate the value manually.\n    return create(value, BigIntCoercer);\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(\n        `Expected a number-like value, got \"${String(error.value)}\".`,\n      );\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n\n/**\n * Create a byte array from a bytes-like value.\n *\n * - If the value is a byte array, it is returned as-is.\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is interpreted\n * as a hexadecimal number and converted to a byte array.\n *\n * @example\n * ```typescript\n * const value = createBytes('0x010203');\n * console.log(value); // Uint8Array [ 1, 2, 3 ]\n *\n * const otherValue = createBytes('0x010203');\n * console.log(otherValue); // Uint8Array [ 1, 2, 3 ]\n * ```\n * @param value - The value to create the byte array from.\n * @returns The created byte array.\n * @throws If the value is not a bytes-like value.\n */\nexport function createBytes(value: BytesLike): Uint8Array {\n  if (typeof value === 'string' && value.toLowerCase() === '0x') {\n    return new Uint8Array();\n  }\n\n  try {\n    return create(value, BytesCoercer);\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(\n        `Expected a bytes-like value, got \"${String(error.value)}\".`,\n      );\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n\n/**\n * Create a hexadecimal string from a bytes-like value.\n *\n * - If the value is a hex string (i.e., it starts with \"0x\"), it is returned\n * as-is.\n * - If the value is a `Uint8Array`, it is converted to a hex string.\n *\n * @example\n * ```typescript\n * const value = createHex(new Uint8Array([1, 2, 3]));\n * console.log(value); // '0x010203'\n *\n * const otherValue = createHex('0x010203');\n * console.log(otherValue); // '0x010203'\n * ```\n * @param value - The value to create the hex string from.\n * @returns The created hex string.\n * @throws If the value is not a bytes-like value.\n */\nexport function createHex(value: BytesLike): Hex {\n  if (\n    (value instanceof Uint8Array && value.length === 0) ||\n    (typeof value === 'string' && value.toLowerCase() === '0x')\n  ) {\n    return '0x';\n  }\n\n  try {\n    return create(value, HexCoercer);\n  } catch (error) {\n    if (error instanceof StructError) {\n      throw new Error(\n        `Expected a bytes-like value, got \"${String(error.value)}\".`,\n      );\n    }\n\n    /* istanbul ignore next */\n    throw error;\n  }\n}\n"],"names":["createNumber","createBigInt","createBytes","createHex","NumberLikeStruct","union","number","bigint","string","StrictHexStruct","NumberCoercer","coerce","Number","BigIntCoercer","BigInt","BytesLikeStruct","instance","Uint8Array","BytesCoercer","hexToBytes","HexCoercer","bytesToHex","value","result","create","assert","isFinite","error","StructError","Error","String","toLowerCase","length"],"mappings":";;;;;;;;;;;IA0DgBA,YAAY;eAAZA;;IA0CAC,YAAY;eAAZA;;IAoCAC,WAAW;eAAXA;;IAsCAC,SAAS;eAATA;;;6BApKT;wBAEgB;uBACgB;qBAEP;AAEhC,MAAMC,mBAAmBC,IAAAA,kBAAK,EAAC;IAACC,IAAAA,mBAAM;IAAIC,IAAAA,mBAAM;IAAIC,IAAAA,mBAAM;IAAIC,oBAAe;CAAC;AAC9E,MAAMC,gBAAgBC,IAAAA,mBAAM,EAACL,IAAAA,mBAAM,KAAIF,kBAAkBQ;AACzD,MAAMC,gBAAgBF,IAAAA,mBAAM,EAACJ,IAAAA,mBAAM,KAAIH,kBAAkBU;AAEzD,MAAMC,kBAAkBV,IAAAA,kBAAK,EAAC;IAACI,oBAAe;IAAEO,IAAAA,qBAAQ,EAACC;CAAY;AACrE,MAAMC,eAAeP,IAAAA,mBAAM,EACzBK,IAAAA,qBAAQ,EAACC,aACTZ,IAAAA,kBAAK,EAAC;IAACI,oBAAe;CAAC,GACvBU,iBAAU;AAGZ,MAAMC,aAAaT,IAAAA,mBAAM,EAACF,oBAAe,EAAEO,IAAAA,qBAAQ,EAACC,aAAaI,iBAAU;AA8BpE,SAASrB,aAAasB,KAAiB;IAC5C,IAAI;QACF,MAAMC,SAASC,IAAAA,mBAAM,EAACF,OAAOZ;QAE7Be,IAAAA,cAAM,EACJb,OAAOc,QAAQ,CAACH,SAChB,CAAC,mCAAmC,EAAED,MAAM,EAAE,CAAC;QAGjD,OAAOC;IACT,EAAE,OAAOI,OAAO;QACd,IAAIA,iBAAiBC,wBAAW,EAAE;YAChC,MAAM,IAAIC,MAAM,CAAC,mCAAmC,EAAEP,MAAM,EAAE,CAAC;QACjE;QAEA,wBAAwB,GACxB,MAAMK;IACR;AACF;AAwBO,SAAS1B,aAAaqB,KAAiB;IAC5C,IAAI;QACF,2EAA2E;QAC3E,mDAAmD;QACnD,OAAOE,IAAAA,mBAAM,EAACF,OAAOT;IACvB,EAAE,OAAOc,OAAO;QACd,IAAIA,iBAAiBC,wBAAW,EAAE;YAChC,MAAM,IAAIC,MACR,CAAC,mCAAmC,EAAEC,OAAOH,MAAML,KAAK,EAAE,EAAE,CAAC;QAEjE;QAEA,wBAAwB,GACxB,MAAMK;IACR;AACF;AAqBO,SAASzB,YAAYoB,KAAgB;IAC1C,IAAI,OAAOA,UAAU,YAAYA,MAAMS,WAAW,OAAO,MAAM;QAC7D,OAAO,IAAId;IACb;IAEA,IAAI;QACF,OAAOO,IAAAA,mBAAM,EAACF,OAAOJ;IACvB,EAAE,OAAOS,OAAO;QACd,IAAIA,iBAAiBC,wBAAW,EAAE;YAChC,MAAM,IAAIC,MACR,CAAC,kCAAkC,EAAEC,OAAOH,MAAML,KAAK,EAAE,EAAE,CAAC;QAEhE;QAEA,wBAAwB,GACxB,MAAMK;IACR;AACF;AAqBO,SAASxB,UAAUmB,KAAgB;IACxC,IACE,AAACA,iBAAiBL,cAAcK,MAAMU,MAAM,KAAK,KAChD,OAAOV,UAAU,YAAYA,MAAMS,WAAW,OAAO,MACtD;QACA,OAAO;IACT;IAEA,IAAI;QACF,OAAOP,IAAAA,mBAAM,EAACF,OAAOF;IACvB,EAAE,OAAOO,OAAO;QACd,IAAIA,iBAAiBC,wBAAW,EAAE;YAChC,MAAM,IAAIC,MACR,CAAC,kCAAkC,EAAEC,OAAOH,MAAML,KAAK,EAAE,EAAE,CAAC;QAEhE;QAEA,wBAAwB,GACxB,MAAMK;IACR;AACF"}