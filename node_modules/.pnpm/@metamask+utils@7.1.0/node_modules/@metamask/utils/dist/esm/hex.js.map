{"version":3,"sources":["../../src/hex.ts"],"sourcesContent":["import { keccak_256 as keccak256 } from '@noble/hashes/sha3';\nimport type { Struct } from 'superstruct';\nimport { is, pattern, string } from 'superstruct';\n\nimport { assert } from './assert';\nimport { bytesToHex } from './bytes';\n\nexport type Hex = `0x${string}`;\n\nexport const HexStruct = pattern(string(), /^(?:0x)?[0-9a-f]+$/iu);\nexport const StrictHexStruct = pattern(string(), /^0x[0-9a-f]+$/iu) as Struct<\n  Hex,\n  null\n>;\nexport const HexAddressStruct = pattern(\n  string(),\n  /^0x[0-9a-f]{40}$/u,\n) as Struct<Hex, null>;\nexport const HexChecksumAddressStruct = pattern(\n  string(),\n  /^0x[0-9a-fA-F]{40}$/u,\n) as Struct<Hex, null>;\n\n/**\n * Check if a string is a valid hex string.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nexport function isHexString(value: unknown): value is string {\n  return is(value, HexStruct);\n}\n\n/**\n * Strictly check if a string is a valid hex string. A valid hex string must\n * start with the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @returns Whether the value is a valid hex string.\n */\nexport function isStrictHexString(value: unknown): value is Hex {\n  return is(value, StrictHexStruct);\n}\n\n/**\n * Assert that a value is a valid hex string.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nexport function assertIsHexString(value: unknown): asserts value is string {\n  assert(isHexString(value), 'Value must be a hexadecimal string.');\n}\n\n/**\n * Assert that a value is a valid hex string. A valid hex string must start with\n * the \"0x\"-prefix.\n *\n * @param value - The value to check.\n * @throws If the value is not a valid hex string.\n */\nexport function assertIsStrictHexString(value: unknown): asserts value is Hex {\n  assert(\n    isStrictHexString(value),\n    'Value must be a hexadecimal string, starting with \"0x\".',\n  );\n}\n\n/**\n * Validate that the passed prefixed hex string is an all-lowercase\n * hex address, or a valid mixed-case checksum address.\n *\n * @param possibleAddress - Input parameter to check against.\n * @returns Whether or not the input is a valid hex address.\n */\nexport function isValidHexAddress(possibleAddress: Hex) {\n  return (\n    is(possibleAddress, HexAddressStruct) ||\n    isValidChecksumAddress(possibleAddress)\n  );\n}\n\n/**\n * Encode a passed hex string as an ERC-55 mixed-case checksum address.\n *\n * @param address - The hex address to encode.\n * @returns The address encoded according to ERC-55.\n * @see https://eips.ethereum.org/EIPS/eip-55\n */\nexport function getChecksumAddress(address: Hex) {\n  assert(is(address, HexChecksumAddressStruct), 'Invalid hex address.');\n  const unPrefixed = remove0x(address.toLowerCase());\n  const unPrefixedHash = remove0x(bytesToHex(keccak256(unPrefixed)));\n  return `0x${unPrefixed\n    .split('')\n    .map((character, nibbleIndex) => {\n      const hashCharacter = unPrefixedHash[nibbleIndex];\n      assert(is(hashCharacter, string()), 'Hash shorter than address.');\n      return parseInt(hashCharacter, 16) > 7\n        ? character.toUpperCase()\n        : character;\n    })\n    .join('')}`;\n}\n\n/**\n * Validate that the passed hex string is a valid ERC-55 mixed-case\n * checksum address.\n *\n * @param possibleChecksum - The hex address to check.\n * @returns True if the address is a checksum address.\n */\nexport function isValidChecksumAddress(possibleChecksum: Hex) {\n  if (!is(possibleChecksum, HexChecksumAddressStruct)) {\n    return false;\n  }\n\n  return getChecksumAddress(possibleChecksum) === possibleChecksum;\n}\n\n/**\n * Add the `0x`-prefix to a hexadecimal string. If the string already has the\n * prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to add the prefix to.\n * @returns The prefixed hexadecimal string.\n */\nexport function add0x(hexadecimal: string): Hex {\n  if (hexadecimal.startsWith('0x')) {\n    return hexadecimal as Hex;\n  }\n\n  if (hexadecimal.startsWith('0X')) {\n    return `0x${hexadecimal.substring(2)}`;\n  }\n\n  return `0x${hexadecimal}`;\n}\n\n/**\n * Remove the `0x`-prefix from a hexadecimal string. If the string doesn't have\n * the prefix, it is returned as-is.\n *\n * @param hexadecimal - The hexadecimal string to remove the prefix from.\n * @returns The un-prefixed hexadecimal string.\n */\nexport function remove0x(hexadecimal: string): string {\n  if (hexadecimal.startsWith('0x') || hexadecimal.startsWith('0X')) {\n    return hexadecimal.substring(2);\n  }\n\n  return hexadecimal;\n}\n"],"names":["keccak_256","keccak256","is","pattern","string","assert","bytesToHex","HexStruct","StrictHexStruct","HexAddressStruct","HexChecksumAddressStruct","isHexString","value","isStrictHexString","assertIsHexString","assertIsStrictHexString","isValidHexAddress","possibleAddress","isValidChecksumAddress","getChecksumAddress","address","unPrefixed","remove0x","toLowerCase","unPrefixedHash","split","map","character","nibbleIndex","hashCharacter","parseInt","toUpperCase","join","possibleChecksum","add0x","hexadecimal","startsWith","substring"],"mappings":"AAAA,SAASA,cAAcC,SAAS,QAAQ,qBAAqB;AAE7D,SAASC,EAAE,EAAEC,OAAO,EAAEC,MAAM,QAAQ,cAAc;AAElD,SAASC,MAAM,QAAQ,WAAW;AAClC,SAASC,UAAU,QAAQ,UAAU;AAIrC,OAAO,MAAMC,YAAYJ,QAAQC,UAAU,wBAAwB;AACnE,OAAO,MAAMI,kBAAkBL,QAAQC,UAAU,mBAG/C;AACF,OAAO,MAAMK,mBAAmBN,QAC9BC,UACA,qBACqB;AACvB,OAAO,MAAMM,2BAA2BP,QACtCC,UACA,wBACqB;AAEvB;;;;;CAKC,GACD,OAAO,SAASO,YAAYC,KAAc;IACxC,OAAOV,GAAGU,OAAOL;AACnB;AAEA;;;;;;CAMC,GACD,OAAO,SAASM,kBAAkBD,KAAc;IAC9C,OAAOV,GAAGU,OAAOJ;AACnB;AAEA;;;;;CAKC,GACD,OAAO,SAASM,kBAAkBF,KAAc;IAC9CP,OAAOM,YAAYC,QAAQ;AAC7B;AAEA;;;;;;CAMC,GACD,OAAO,SAASG,wBAAwBH,KAAc;IACpDP,OACEQ,kBAAkBD,QAClB;AAEJ;AAEA;;;;;;CAMC,GACD,OAAO,SAASI,kBAAkBC,eAAoB;IACpD,OACEf,GAAGe,iBAAiBR,qBACpBS,uBAAuBD;AAE3B;AAEA;;;;;;CAMC,GACD,OAAO,SAASE,mBAAmBC,OAAY;IAC7Cf,OAAOH,GAAGkB,SAASV,2BAA2B;IAC9C,MAAMW,aAAaC,SAASF,QAAQG,WAAW;IAC/C,MAAMC,iBAAiBF,SAAShB,WAAWL,UAAUoB;IACrD,OAAO,CAAC,EAAE,EAAEA,WACTI,KAAK,CAAC,IACNC,GAAG,CAAC,CAACC,WAAWC;QACf,MAAMC,gBAAgBL,cAAc,CAACI,YAAY;QACjDvB,OAAOH,GAAG2B,eAAezB,WAAW;QACpC,OAAO0B,SAASD,eAAe,MAAM,IACjCF,UAAUI,WAAW,KACrBJ;IACN,GACCK,IAAI,CAAC,IAAI,CAAC;AACf;AAEA;;;;;;CAMC,GACD,OAAO,SAASd,uBAAuBe,gBAAqB;IAC1D,IAAI,CAAC/B,GAAG+B,kBAAkBvB,2BAA2B;QACnD,OAAO;IACT;IAEA,OAAOS,mBAAmBc,sBAAsBA;AAClD;AAEA;;;;;;CAMC,GACD,OAAO,SAASC,MAAMC,WAAmB;IACvC,IAAIA,YAAYC,UAAU,CAAC,OAAO;QAChC,OAAOD;IACT;IAEA,IAAIA,YAAYC,UAAU,CAAC,OAAO;QAChC,OAAO,CAAC,EAAE,EAAED,YAAYE,SAAS,CAAC,GAAG,CAAC;IACxC;IAEA,OAAO,CAAC,EAAE,EAAEF,YAAY,CAAC;AAC3B;AAEA;;;;;;CAMC,GACD,OAAO,SAASb,SAASa,WAAmB;IAC1C,IAAIA,YAAYC,UAAU,CAAC,SAASD,YAAYC,UAAU,CAAC,OAAO;QAChE,OAAOD,YAAYE,SAAS,CAAC;IAC/B;IAEA,OAAOF;AACT"}