{"version":3,"sources":["../../../src/utils/buffer.ts"],"names":["keccak_256","hexToBytes","utf8ToBytes","keccak256","data","encoding","toBuffer","startsWith","substring"],"mappings":"AAAA,SAASA,UAAT,QAA2B,oBAA3B;AACA,SAASC,UAAT,EAAqBC,WAArB,QAAwC,qBAAxC;AAMA,OAAO,MAAMC,SAAS,GAAG,CAACC,IAAD,EAA4BC,QAA5B,KAAsE;AAC7F,MAAI,OAAOD,IAAP,KAAgB,QAAhB,IAA4BC,QAAQ,KAAK,MAA7C,EAAqD;AACnD,WAAOL,UAAU,CAACM,QAAQ,CAACF,IAAD,EAAOC,QAAP,CAAT,CAAjB;AACD;;AAED,SAAOL,UAAU,CAACI,IAAD,CAAjB;AACD,CANM;AAYP,OAAO,MAAME,QAAQ,GAAG,CAACF,IAAD,EAAeC,QAAwB,GAAG,KAA1C,KAAgE;AACtF,MAAIA,QAAQ,KAAK,KAAjB,EAAwB;AACtB,QAAID,IAAI,CAACG,UAAL,CAAgB,IAAhB,CAAJ,EAA2B;AACzB,aAAON,UAAU,CAACG,IAAI,CAACI,SAAL,CAAe,CAAf,CAAD,CAAjB;AACD;;AAED,WAAOP,UAAU,CAACG,IAAD,CAAjB;AACD;;AAED,SAAOF,WAAW,CAACE,IAAD,CAAlB;AACD,CAVM","sourcesContent":["import { keccak_256 } from '@noble/hashes/sha3';\nimport { hexToBytes, utf8ToBytes } from '@noble/hashes/utils';\n\n/**\n * Hashes the data with the optional encoding specified. If no encoding is specified, it is assumed that the data is\n * already a Buffer.\n */\nexport const keccak256 = (data: string | Uint8Array, encoding?: 'utf8' | 'hex'): Uint8Array => {\n  if (typeof data === 'string' && encoding === 'utf8') {\n    return keccak_256(toBuffer(data, encoding));\n  }\n\n  return keccak_256(data);\n};\n\n/**\n * Get a string as Buffer, with the optional encoding specified. If no encoding is specified, it is assumed that the\n * data is a hexadecimal string. The string can optionally contain the 0x prefix.\n */\nexport const toBuffer = (data: string, encoding: 'utf8' | 'hex' = 'hex'): Uint8Array => {\n  if (encoding === 'hex') {\n    if (data.startsWith('0x')) {\n      return hexToBytes(data.substring(2));\n    }\n\n    return hexToBytes(data);\n  }\n\n  return utf8ToBytes(data);\n};\n"],"file":"buffer.js"}