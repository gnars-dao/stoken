{"version":3,"sources":["../../src/options.ts"],"names":["boolean","create","defaulted","object","string","OPTIONS_TYPE","domain","verifyDomain","getOptions","options"],"mappings":"AAAA,SAASA,OAAT,EAAkBC,MAAlB,EAA0BC,SAA1B,EAA4CC,MAA5C,EAAoDC,MAApD,QAAkE,aAAlE;AAEA,OAAO,MAAMC,YAAY,GAAGF,MAAM,CAAC;AAMjCG,EAAAA,MAAM,EAAEJ,SAAS,CAACE,MAAM,EAAP,EAAW,cAAX,CANgB;AAcjCG,EAAAA,YAAY,EAAEL,SAAS,CAACF,OAAO,EAAR,EAAY,IAAZ;AAdU,CAAD,CAA3B;AAmBP,OAAO,MAAMQ,UAAU,GAAIC,OAAD,IAAyC;AACjE,SAAOR,MAAM,CAACQ,OAAO,IAAI,EAAZ,EAAgBJ,YAAhB,CAAb;AACD,CAFM","sourcesContent":["import { boolean, create, defaulted, Infer, object, string } from 'superstruct';\n\nexport const OPTIONS_TYPE = object({\n  /**\n   * The name of the domain struct.\n   *\n   * Default: \"EIP712Domain\"\n   */\n  domain: defaulted(string(), 'EIP712Domain'),\n\n  /**\n   * Whether to verify if the domain matches the EIP-712 specification. When this is disabled, you can use any arbitrary\n   * fields in the domain.\n   *\n   * Default: true\n   */\n  verifyDomain: defaulted(boolean(), true)\n});\n\nexport type Options = Partial<Infer<typeof OPTIONS_TYPE>>;\n\nexport const getOptions = (options: unknown): Required<Options> => {\n  return create(options ?? {}, OPTIONS_TYPE);\n};\n"],"file":"options.js"}