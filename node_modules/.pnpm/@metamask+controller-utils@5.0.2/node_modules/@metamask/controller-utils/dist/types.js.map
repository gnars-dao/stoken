{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACU,QAAA,iBAAiB,GAAG;IAC/B,OAAO,EAAE,SAAS;IAClB,MAAM,EAAE,QAAQ;IAChB,OAAO,EAAE,SAAS;IAClB,cAAc,EAAE,cAAc;IAC9B,eAAe,EAAE,eAAe;CACxB,CAAC;AAKX;;GAEG;AACU,QAAA,WAAW,GAAG,gCACtB,yBAAiB,KACpB,GAAG,EAAE,KAAK,GACF,CAAC;AAIX;;;;;GAKG;AACH,SAAgB,aAAa,CAAC,GAAQ;IACpC,OAAO,MAAM,CAAC,MAAM,CAAC,mBAAW,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;AAClD,CAAC;AAFD,sCAEC;AAED;;;;GAIG;AACH,IAAY,kBAOX;AAPD,WAAY,kBAAkB;IAC5B,yCAAmB,CAAA;IACnB,uCAAiB,CAAA;IACjB,yCAAmB,CAAA;IACnB,kDAA4B,CAAA;IAC5B,oDAA8B,CAAA;IAC9B,uCAAiB,CAAA;AACnB,CAAC,EAPW,kBAAkB,GAAlB,0BAAkB,KAAlB,0BAAkB,QAO7B;AAED;;;;GAIG;AACU,QAAA,OAAO,GAAG;IACrB,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,KAAK;IACnC,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,KAAK;IAClC,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,UAAU;IACxC,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,YAAY;IACzC,CAAC,kBAAkB,CAAC,WAAW,CAAC,EAAE,QAAQ;IAC1C,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAAE,QAAQ,EAAE,eAAe;CACpD,CAAC;AAGX,IAAY,cAOX;AAPD,WAAY,cAAc;IACxB,iCAAe,CAAA;IACf,sCAAoB,CAAA;IACpB,wCAAsB,CAAA;IACtB,2CAA2B,CAAA;IAC3B,uCAAuB,CAAA;IACvB,0BAAQ,CAAA;AACV,CAAC,EAPW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAOzB","sourcesContent":["/**\n * The names of built-in Infura networks\n */\nexport const InfuraNetworkType = {\n  mainnet: 'mainnet',\n  goerli: 'goerli',\n  sepolia: 'sepolia',\n  'linea-goerli': 'linea-goerli',\n  'linea-mainnet': 'linea-mainnet',\n} as const;\n\nexport type InfuraNetworkType =\n  (typeof InfuraNetworkType)[keyof typeof InfuraNetworkType];\n\n/**\n * The \"network type\"; either the name of a built-in network, or \"rpc\" for custom networks.\n */\nexport const NetworkType = {\n  ...InfuraNetworkType,\n  rpc: 'rpc',\n} as const;\n\nexport type NetworkType = (typeof NetworkType)[keyof typeof NetworkType];\n\n/**\n * A helper to determine whether a given input is NetworkType.\n *\n * @param val - the value to check whether it is NetworkType or not.\n * @returns boolean indicating whether or not the argument is NetworkType.\n */\nexport function isNetworkType(val: any): val is NetworkType {\n  return Object.values(NetworkType).includes(val);\n}\n\n/**\n * Names of networks built into the wallet.\n *\n * This includes both Infura and non-Infura networks.\n */\nexport enum BuiltInNetworkName {\n  Mainnet = 'mainnet',\n  Goerli = 'goerli',\n  Sepolia = 'sepolia',\n  LineaGoerli = 'linea-goerli',\n  LineaMainnet = 'linea-mainnet',\n  Aurora = 'aurora',\n}\n\n/**\n * Decimal string chain IDs of built-in networks, by name.\n *\n * `toHex` not invoked to avoid cyclic dependency\n */\nexport const ChainId = {\n  [BuiltInNetworkName.Mainnet]: '0x1', // toHex(1)\n  [BuiltInNetworkName.Goerli]: '0x5', // toHex(5)\n  [BuiltInNetworkName.Sepolia]: '0xaa36a7', // toHex(11155111)\n  [BuiltInNetworkName.Aurora]: '0x4e454152', // toHex(1313161554)\n  [BuiltInNetworkName.LineaGoerli]: '0xe704', // toHex(59140)\n  [BuiltInNetworkName.LineaMainnet]: '0xe708', // toHex(59144)\n} as const;\nexport type ChainId = (typeof ChainId)[keyof typeof ChainId];\n\nexport enum NetworksTicker {\n  mainnet = 'ETH',\n  goerli = 'GoerliETH',\n  sepolia = 'SepoliaETH',\n  'linea-goerli' = 'LineaETH',\n  'linea-mainnet' = 'ETH',\n  rpc = '',\n}\n"]}