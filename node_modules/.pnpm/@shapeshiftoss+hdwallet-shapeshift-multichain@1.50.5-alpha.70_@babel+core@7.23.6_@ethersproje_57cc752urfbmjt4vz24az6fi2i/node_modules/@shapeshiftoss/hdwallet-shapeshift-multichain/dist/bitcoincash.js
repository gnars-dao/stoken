"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.bitcoinCashSignTx = exports.bitcoinCashGetPublicKeys = exports.bitcoinCashGetAddress = exports.bitcoinCashNextAccountPath = exports.bitcoinCashGetAccountPaths = void 0;
const metamask_snaps_adapter_1 = require("@shapeshiftoss/metamask-snaps-adapter");
const common_1 = require("./common");
const utxo_1 = require("./utxo");
function bitcoinCashGetAccountPaths(msg) {
    return (0, utxo_1.utxoGetAccountPaths)(msg);
}
exports.bitcoinCashGetAccountPaths = bitcoinCashGetAccountPaths;
// eslint-disable-next-line @typescript-eslint/no-unused-vars
function bitcoinCashNextAccountPath(msg) {
    // Only support one account for now (like portis).
    return undefined;
}
exports.bitcoinCashNextAccountPath = bitcoinCashNextAccountPath;
function bitcoinCashGetAddress(msg) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0, metamask_snaps_adapter_1.BCHGetAddress)({ snapId: common_1.SNAP_ID, addressParams: msg });
    });
}
exports.bitcoinCashGetAddress = bitcoinCashGetAddress;
function bitcoinCashGetPublicKeys(msg) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0, metamask_snaps_adapter_1.BCHGetPublicKeys)({ snapId: common_1.SNAP_ID, addressParams: msg });
    });
}
exports.bitcoinCashGetPublicKeys = bitcoinCashGetPublicKeys;
function bitcoinCashSignTx(msg) {
    return __awaiter(this, void 0, void 0, function* () {
        return yield (0, metamask_snaps_adapter_1.BCHSignTransaction)({ snapId: common_1.SNAP_ID, transaction: msg });
    });
}
exports.bitcoinCashSignTx = bitcoinCashSignTx;
//# sourceMappingURL=bitcoincash.js.map