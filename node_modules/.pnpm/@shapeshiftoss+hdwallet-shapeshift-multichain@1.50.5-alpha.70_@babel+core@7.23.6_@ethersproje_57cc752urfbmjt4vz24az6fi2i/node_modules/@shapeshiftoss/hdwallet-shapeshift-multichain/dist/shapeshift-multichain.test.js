"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const _1 = require(".");
describe("HDWalletInfo", () => {
    const info = new _1.MetaMaskShapeShiftMultiChainHDWalletInfo();
    it("should have correct metadata", () => __awaiter(void 0, void 0, void 0, function* () {
        expect(info.getVendor()).toBe("MetaMask");
        expect(info.hasOnDevicePinEntry()).toBe(false);
        expect(info.hasOnDevicePassphrase()).toBe(true);
        expect(info.hasOnDeviceDisplay()).toBe(true);
        expect(info.hasOnDeviceRecovery()).toBe(true);
        expect(yield info.ethSupportsNetwork(1)).toBe(true);
        expect(yield info.ethSupportsSecureTransfer()).toBe(false);
        expect(info.ethSupportsNativeShapeShift()).toBe(false);
        expect(yield info.ethSupportsEIP1559()).toBe(true);
        expect(yield info.supportsOfflineSigning()).toBe(false);
        expect(yield info.supportsBroadcast()).toBe(true);
    }));
});
describe("MetaMaskShapeShiftMultiChainHDWallet", () => {
    let wallet;
    beforeEach(() => {
        wallet = new _1.MetaMaskShapeShiftMultiChainHDWallet(core.untouchable("MetaMaskShapeShiftMultiChainHDWallet:provider"));
        wallet.ethAddress = "0x73d0385F4d8E00C5e6504C6030F47BF6212736A8";
    });
    it("should match the metadata", () => __awaiter(void 0, void 0, void 0, function* () {
        expect(wallet.getVendor()).toBe("MetaMask");
        expect(wallet.hasOnDevicePinEntry()).toBe(false);
        expect(wallet.hasOnDevicePassphrase()).toBe(true);
        expect(wallet.hasOnDeviceDisplay()).toBe(true);
        expect(wallet.hasOnDeviceRecovery()).toBe(true);
        expect(yield wallet.ethSupportsNetwork(1)).toBe(true);
        expect(yield wallet.ethSupportsSecureTransfer()).toBe(false);
        expect(wallet.ethSupportsNativeShapeShift()).toBe(false);
        expect(yield wallet.ethSupportsEIP1559()).toBe(true);
        expect(yield wallet.supportsOfflineSigning()).toBe(false);
        expect(wallet.supportsBip44Accounts()).toBe(false);
        expect(yield wallet.supportsBroadcast()).toBe(true);
    }));
    it("should test ethSignMessage", () => __awaiter(void 0, void 0, void 0, function* () {
        wallet.provider = {
            request: jest.fn().mockReturnValue(`Object {
          "address": "0x73d0385F4d8E00C5e6504C6030F47BF6212736A8",
          "signature": "0x05f51140905ffa33ffdc57f46b0b8d8fbb1d2a99f8cd843ca27893c01c31351c08b76d83dce412731c846e3b50649724415deb522d00950fbf4f2c1459c2b70b1b",
        }`),
        };
        const msg = "super secret message";
        expect(yield wallet.ethSignMessage({
            addressNList: core.bip32ToAddressNList("m/44'/60'/0'/0/0"),
            message: msg,
        })).toMatchInlineSnapshot(`
    Object {
      "address": "0x73d0385F4d8E00C5e6504C6030F47BF6212736A8",
      "signature": "Object {
              \\"address\\": \\"0x73d0385F4d8E00C5e6504C6030F47BF6212736A8\\",
              \\"signature\\": \\"0x05f51140905ffa33ffdc57f46b0b8d8fbb1d2a99f8cd843ca27893c01c31351c08b76d83dce412731c846e3b50649724415deb522d00950fbf4f2c1459c2b70b1b\\",
            }",
    }
  `);
    }));
    it("ethSignMessage returns null on error", () => __awaiter(void 0, void 0, void 0, function* () {
        wallet.provider = {
            request: jest.fn().mockRejectedValue(new Error("An Error has occurred")),
        };
        const msg = "super secret message";
        const sig = yield wallet.ethSignMessage({
            addressNList: core.bip32ToAddressNList("m/44'/60'/0'/0/0"),
            message: msg,
        });
        expect(sig).toBe(null);
    }));
    it("ethGetAddress returns a valid address", () => __awaiter(void 0, void 0, void 0, function* () {
        wallet.provider = {
            request: jest.fn().mockReturnValue(["0x73d0385F4d8E00C5e6504C6030F47BF6212736A8"]),
        };
        const msg = "super secret message";
        const sig = yield wallet.ethSignMessage({
            addressNList: core.bip32ToAddressNList("m/44'/60'/0'/0/0"),
            message: msg,
        });
        expect(sig).toMatchObject({
            address: "0x73d0385F4d8E00C5e6504C6030F47BF6212736A8",
            signature: ["0x73d0385F4d8E00C5e6504C6030F47BF6212736A8"],
        });
    }));
    it("ethSendTx returns a valid hash", () => __awaiter(void 0, void 0, void 0, function* () {
        wallet.provider = {
            request: jest.fn().mockReturnValue("0x123"),
        };
        const hash = yield wallet.ethSendTx({
            addressNList: core.bip32ToAddressNList("m/44'/60'/0'/0/0"),
            nonce: "0xDEADBEEF",
            gasPrice: "0xDEADBEEF",
            gasLimit: "0xDEADBEEF",
            to: "0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF",
            value: "0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF",
            data: "0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF",
            chainId: 1,
        });
        expect(wallet.provider.request).toHaveBeenCalled();
        expect(hash).toMatchObject({ hash: "0x123" });
    }));
    it("ethSendTx returns a valid hash if maxFeePerGas is present in msg", () => __awaiter(void 0, void 0, void 0, function* () {
        wallet.provider = {
            request: jest.fn().mockReturnValue("0x123"),
        };
        const hash = yield wallet.ethSendTx({
            addressNList: core.bip32ToAddressNList("m/44'/60'/0'/0/0"),
            nonce: "0xDEADBEEF",
            gasLimit: "0xDEADBEEF",
            maxFeePerGas: "0xDEADBEEF",
            to: "0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF",
            value: "0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF",
            data: "0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF",
            chainId: 1,
        });
        expect(wallet.provider.request).toHaveBeenCalled();
        expect(hash).toMatchObject({ hash: "0x123" });
    }));
    it("ethSendTx returns null on error", () => __awaiter(void 0, void 0, void 0, function* () {
        wallet.provider = {
            request: jest.fn().mockRejectedValue(new Error("An Error has occurred")),
        };
        const hash = yield wallet.ethSendTx({
            addressNList: core.bip32ToAddressNList("m/44'/60'/0'/0/0"),
            nonce: "0xDEADBEEF",
            gasPrice: "0xDEADBEEF",
            gasLimit: "0xDEADBEEF",
            to: "0xDEADBEEFDEADBEEFDEADBEEFDEADBEEFDEADBEEF",
            value: "0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF",
            data: "0xDEADBEEFDEADBEEFDEADBEEFDEADBEEF",
            chainId: 1,
        });
        expect(wallet.provider.request).toHaveBeenCalled();
        expect(hash).toBe(null);
    }));
    it("ethVerifyMessage returns null as its not implemented", () => __awaiter(void 0, void 0, void 0, function* () {
        wallet.provider = {
            request: jest.fn().mockReturnValue("0x3f2329C9ADFbcCd9A84f52c906E936A42dA18CB8"),
        };
        expect(yield wallet.ethVerifyMessage({
            address: "0x3f2329C9ADFbcCd9A84f52c906E936A42dA18CB8",
            message: "hello world",
            signature: "0x29f7212ecc1c76cea81174af267b67506f754ea8c73f144afa900a0d85b24b21319621aeb062903e856352f38305710190869c3ce5a1425d65ef4fa558d0fc251b",
        })).toEqual(null);
    }));
});
//# sourceMappingURL=shapeshift-multichain.test.js.map