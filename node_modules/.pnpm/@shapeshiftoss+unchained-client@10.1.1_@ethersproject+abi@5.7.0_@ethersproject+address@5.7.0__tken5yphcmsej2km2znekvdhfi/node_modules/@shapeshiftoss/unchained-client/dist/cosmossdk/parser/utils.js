"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.metaData = void 0;
const logger_1 = require("@shapeshiftoss/logger");
const logger = new logger_1.Logger({
    namespace: ['unchained-client', 'cosmossdk', 'parser', 'utils'],
    level: process.env.LOG_LEVEL,
});
// TODO: break out metadata by parser category to allow more explicit metadata types and pull out chain specific logic to appropriate chain parser
const metaData = (msg, assetId) => {
    var _a, _b, _c, _d;
    if (!msg)
        return;
    switch (msg.type) {
        case 'delegate':
        case 'begin_unbonding':
            return {
                parser: 'cosmos',
                method: msg.type,
                delegator: msg.from,
                destinationValidator: msg.to,
                value: (_a = msg === null || msg === void 0 ? void 0 : msg.value) === null || _a === void 0 ? void 0 : _a.amount,
            };
        case 'begin_redelegate':
            return {
                parser: 'cosmos',
                method: msg.type,
                sourceValidator: msg.from,
                delegator: msg.origin,
                destinationValidator: msg.to,
                value: (_b = msg === null || msg === void 0 ? void 0 : msg.value) === null || _b === void 0 ? void 0 : _b.amount,
                assetId,
            };
        case 'withdraw_delegator_reward':
            return {
                parser: 'cosmos',
                method: msg.type,
                destinationValidator: msg.to,
                value: (_c = msg === null || msg === void 0 ? void 0 : msg.value) === null || _c === void 0 ? void 0 : _c.amount,
                assetId,
            };
        case 'transfer':
        case 'recv_packet':
            return {
                parser: 'cosmos',
                method: 'ibc_transfer',
                ibcDestination: msg.to,
                ibcSource: msg.from,
                assetId,
                value: (_d = msg === null || msg === void 0 ? void 0 : msg.value) === null || _d === void 0 ? void 0 : _d.amount,
            };
        case 'swap_exact_amount_in':
            // TODO: parse applicable metadata
            return;
        case 'send':
            // known message types with no applicable metadata
            return;
        default:
            logger.warn(`unsupported message type: ${msg.type}`);
            return;
    }
};
exports.metaData = metaData;
