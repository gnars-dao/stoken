"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Parser = void 0;
const caip_1 = require("@shapeshiftoss/caip");
const sdk_1 = require("@yfi/sdk");
const ethers_1 = require("ethers");
const parser_1 = require("../../parser");
const shapeShiftRouter_1 = __importDefault(require("./abi/shapeShiftRouter"));
const yearnVault_1 = __importDefault(require("./abi/yearnVault"));
const constants_1 = require("./constants");
class Parser {
    constructor(args) {
        this.shapeShiftInterface = new ethers_1.ethers.utils.Interface(shapeShiftRouter_1.default);
        this.yearnInterface = new ethers_1.ethers.utils.Interface(yearnVault_1.default);
        this.supportedYearnFunctions = {
            approveSigHash: this.yearnInterface.getSighash('approve'),
            depositSigHash: this.yearnInterface.getSighash('deposit()'),
            depositAmountSigHash: this.yearnInterface.getSighash('deposit(uint256)'),
            depositAmountAndRecipientSigHash: this.yearnInterface.getSighash('deposit(uint256,address)'),
            withdrawSigHash: this.yearnInterface.getSighash('withdraw(uint256,address)'),
        };
        this.supportedShapeShiftFunctions = {
            depositSigHash: this.shapeShiftInterface.getSighash('deposit(address,address,uint256,uint256)'),
        };
        this.provider = args.provider;
        this.chainId = args.chainId;
        // The only Yearn-supported chain we currently support is mainnet
        if (args.chainId === 'eip155:1') {
            // 1 for EthMain (@yfi/sdk/dist/chain.d.ts)
            this.yearnSdk = new sdk_1.Yearn(1, { provider: this.provider });
        }
    }
    async parse(tx) {
        var _a, _b;
        if (!tx.inputData)
            return;
        const txSigHash = (0, parser_1.getSigHash)(tx.inputData);
        const supportedSigHashes = [
            ...Object.values(this.supportedShapeShiftFunctions),
            ...Object.values(this.supportedYearnFunctions),
        ];
        if (!supportedSigHashes.some((hash) => hash === txSigHash))
            return;
        const abiInterface = this.getAbiInterface(txSigHash);
        if (!abiInterface)
            return;
        if (!this.yearnTokenVaultAddresses) {
            const vaults = await ((_a = this.yearnSdk) === null || _a === void 0 ? void 0 : _a.vaults.get());
            this.yearnTokenVaultAddresses = vaults === null || vaults === void 0 ? void 0 : vaults.map((vault) => vault.address);
        }
        const decoded = abiInterface.parseTransaction({ data: tx.inputData });
        // failed to decode input data
        if (!decoded)
            return;
        const data = {
            method: decoded.name,
            parser: 'yearn',
        };
        switch (txSigHash) {
            case this.supportedYearnFunctions.approveSigHash:
                if (decoded.args._spender !== constants_1.SHAPE_SHIFT_ROUTER_CONTRACT)
                    return;
                return {
                    data: {
                        ...data,
                        assetId: (0, caip_1.toAssetId)({
                            chainId: this.chainId,
                            assetNamespace: 'erc20',
                            assetReference: tx.to,
                        }),
                        value: decoded.args._value.toString(),
                    },
                };
            case this.supportedShapeShiftFunctions.depositSigHash:
                if (tx.to !== constants_1.SHAPE_SHIFT_ROUTER_CONTRACT)
                    return;
                return { data };
            case this.supportedYearnFunctions.depositAmountAndRecipientSigHash:
                if (tx.to && !((_b = this.yearnTokenVaultAddresses) === null || _b === void 0 ? void 0 : _b.includes(tx.to)))
                    return;
                return { data };
            case this.supportedYearnFunctions.withdrawSigHash:
            case this.supportedYearnFunctions.depositSigHash:
            case this.supportedYearnFunctions.depositAmountSigHash:
            default:
                return { data };
        }
    }
    getAbiInterface(txSigHash) {
        if (Object.values(this.supportedYearnFunctions).some((abi) => abi === txSigHash))
            return this.yearnInterface;
        if (Object.values(this.supportedShapeShiftFunctions).some((abi) => abi === txSigHash))
            return this.shapeShiftInterface;
        return undefined;
    }
}
exports.Parser = Parser;
