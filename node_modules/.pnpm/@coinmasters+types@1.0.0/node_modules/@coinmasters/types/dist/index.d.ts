/// <reference types="node" />

import type { FixedNumber } from 'ethers';

export declare type AddChainWalletParams = {
    chain: Chain;
    wallet: ChainWallet;
    walletMethods: any;
};

export declare const AGG_SWAP: QuoteMode[];

export declare class ApiError extends Error {
    readonly status: number;
    readonly revision: string;
    readonly type?: ERROR_TYPE;
    readonly module: ERROR_MODULE;
    readonly code: ERROR_CODE;
    readonly message: string;
    readonly display: string;
    readonly stack?: string;
    readonly options: ApiErrorOptions;
    readonly displayMessageParams?: string[];
    constructor({ status, revision, module, code, message, type, options: { shouldLog, shouldThrow, shouldTrace }, displayMessageParams, }: ErrorInfo);
    static fromErrorInfo(errorInfo: ErrorInfo): ApiError;
    toErrorInfo(): ErrorInfo;
    get identifier(): string;
    get displayMessage(): string;
    handle(): ErrorInfo;
}

export declare type ApiErrorOptions = {
    shouldLog?: boolean;
    shouldTrace?: boolean;
    shouldThrow?: boolean;
};

declare type ApisType = {
    [key in UTXOChain]?: string | any;
} & {
    [key in EVMChain]?: string | any;
} & {
    [key in CosmosChain]?: string;
};

export declare enum ApiUrl {
    Cosmos = "https://node-router.thorswap.net/cosmos/rest",
    MayanodeMainnet = "https://mayanode.mayachain.info",
    MayanodeStagenet = "https://stagenet.mayanode.mayachain.info",
    ThornodeMainnet = "https://thornode.thorswap.net",
    ThornodeStagenet = "https://stagenet-thornode.ninerealms.com",
    ThorswapApi = "https://api.thorswap.finance",
    ThorswapStatic = "https://static.thorswap.net"
}

export declare type Asset = {
    chain: Chain;
    symbol: string;
    ticker: string;
    synth?: boolean;
};

export declare enum BaseDecimal {
    ARB = 18,
    AVAX = 18,
    BCH = 8,
    BNB = 8,
    BSC = 18,
    BTC = 8,
    DASH = 8,
    DOGE = 8,
    ETH = 18,
    GAIA = 6,
    KUJI = 6,
    LTC = 8,
    MATIC = 18,
    MAYA = 10,
    OP = 18,
    THOR = 8
}

export declare enum Chain {
    Arbitrum = "ARB",
    Avalanche = "AVAX",
    Binance = "BNB",
    BinanceSmartChain = "BSC",
    Bitcoin = "BTC",
    BitcoinCash = "BCH",
    Cosmos = "GAIA",
    Dogecoin = "DOGE",
    Ethereum = "ETH",
    Litecoin = "LTC",
    Maya = "MAYA",
    Optimism = "OP",
    Polygon = "MATIC",
    THORChain = "THOR"
}

export declare enum ChainId {
    Arbitrum = "42161",
    ArbitrumHex = "0xa4b1",
    Avalanche = "43114",
    AvalancheHex = "0xa86a",
    Binance = "Binance-Chain-Tigris",
    BinanceSmartChain = "56",
    BinanceSmartChainHex = "0x38",
    Bitcoin = "bitcoin",
    BitcoinCash = "bitcoincash",
    Cosmos = "cosmoshub-4",
    Dogecoin = "dogecoin",
    Ethereum = "1",
    EthereumHex = "0x1",
    Litecoin = "litecoin",
    Maya = "mayachain-mainnet-v1",
    MayaStagenet = "mayachain-stagenet-v1",
    Optimism = "10",
    OptimismHex = "0xa",
    Polygon = "137",
    PolygonHex = "0x89",
    THORChain = "thorchain-mainnet-v1",
    THORChainStagenet = "thorchain-stagenet-v2"
}

export declare const ChainIdToChain: Record<ChainId, Chain>;

export declare const ChainToChainId: {
    ARB: ChainId;
    AVAX: ChainId;
    BNB: ChainId;
    BSC: ChainId;
    BTC: ChainId;
    BCH: ChainId;
    GAIA: ChainId;
    DOGE: ChainId;
    ETH: ChainId;
    LTC: ChainId;
    MAYA: ChainId;
    OP: ChainId;
    MATIC: ChainId;
    THOR: ChainId;
};

export declare const ChainToExplorerUrl: Record<Chain, string>;

export declare const ChainToHexChainId: {
    ARB: ChainId;
    AVAX: ChainId;
    BNB: ChainId;
    BSC: ChainId;
    BTC: ChainId;
    BCH: ChainId;
    GAIA: ChainId;
    DOGE: ChainId;
    ETH: ChainId;
    LTC: ChainId;
    MAYA: ChainId;
    OP: ChainId;
    MATIC: ChainId;
    THOR: ChainId;
};

export declare const ChainToRPC: {
    ARB: RPCUrl;
    AVAX: RPCUrl;
    BNB: RPCUrl;
    BSC: RPCUrl;
    BTC: RPCUrl;
    BCH: RPCUrl;
    GAIA: RPCUrl;
    DOGE: RPCUrl;
    ETH: RPCUrl;
    LTC: RPCUrl;
    MAYA: RPCUrl;
    OP: RPCUrl;
    MATIC: RPCUrl;
    THOR: RPCUrl;
};

declare type ChainWallet = {
    address: string;
    balance: any[];
    walletType: WalletOption;
};

export declare type ConnectConfig = {
    stagenet?: boolean;
    /**
     * @required for AVAX & BSC
     */
    covalentApiKey?: string;
    /**
     * @required for ETH
     */
    ethplorerApiKey?: string;
    /**
     * @required for BTC, LTC, DOGE & BCH
     */
    utxoApiKey?: string;
    /**
     * @required for Walletconnect
     */
    walletConnectProjectId?: string;
    /**
     * @optional for Trezor config
     */
    trezorManifest?: {
        email: string;
        appUrl: string;
    };
};

declare type ConnectMethodNames = 'connectEVMWallet' | 'connectKeplr' | 'connectKeystore' | 'connectKeepkey' | 'connectLedger' | 'connectOkx' | 'connectTrezor' | 'connectWalletconnect' | 'connectXDEFI';

export declare type ConnectWalletParams = {
    addChain: (params: AddChainWalletParams) => void;
    config: ConnectConfig;
    rpcUrls: {
        [chain in Chain]?: string;
    };
    apis: ApisType;
};

export declare enum ContractAddress {
    ARB = "0x0000000000000000000000000000000000000000",
    AVAX = "0x0000000000000000000000000000000000000000",
    ETH = "0x0000000000000000000000000000000000000000",
    BSC = "0x0000000000000000000000000000000000000000",
    MATIC = "0x0000000000000000000000000000000000001010",
    OP = "0x4200000000000000000000000000000000000042"
}

export declare type CosmosChain = Chain.Cosmos | Chain.THORChain | Chain.Binance;

export declare const CosmosChainList: CosmosChain[];

export declare enum DerivationPath {
    ARB = "m/44'/60'/0'/0",
    AVAX = "m/44'/60'/0'/0",
    BCH = "m/44'/145'/0'/0",
    BNB = "m/44'/714'/0'/0",
    BSC = "m/44'/60'/0'/0",
    BTC = "m/84'/0'/0'/0",
    DOGE = "m/44'/3'/0'/0",
    ETH = "m/44'/60'/0'/0",
    GAIA = "m/44'/118'/0'/0",
    LTC = "m/84'/2'/0'/0",
    MATIC = "m/44'/60'/0'/0",
    MAYA = "m/44'/931'/0'/0",
    OP = "m/44'/60'/0'/0",
    THOR = "m/44'/931'/0'/0"
}

export declare type DerivationPathArray = [number, number, number, number, number];

export declare const erc20ABI: ({
    inputs: never[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
    name?: undefined;
    outputs?: undefined;
} | {
    anonymous: boolean;
    inputs: {
        indexed: boolean;
        internalType: string;
        name: string;
        type: string;
    }[];
    name: string;
    type: string;
    stateMutability?: undefined;
    outputs?: undefined;
} | {
    inputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    name: string;
    outputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
})[];

export declare enum ERROR_CODE {
    INVALID_INPUT_PARAMETERS = "1000",
    UNKNOWN_PROVIDERS = "1001",
    CANNOT_FIND_INBOUND_ADDRESS = "1002",
    NO_INBOUND_ADDRESSES = "1003",
    CHAIN_HALTED_OR_UNSUPPORTED = "1004",
    MISSING_INPUT_PARAMETER = "1005",
    INVALID_TYPE_GENERIC = "1100",
    INVALID_NUMBER_STRING = "1101",
    INVALID_NUMBER = "1102",
    INVALID_BOOLEAN = "1103",
    INVALID_OBJECT = "1104",
    INVALID_ARRAY = "1105",
    SELL_AMOUNT_MUST_BE_POSITIVE_INTEGER = "2000",
    SELL_BUY_ASSETS_ARE_THE_SAME = "2001",
    MISSING_SOURCE_ADDRESS_FOR_SYNTH = "2002",
    AFF_ADDRESS_AND_BPS_OR_NEITHER = "2003",
    AFF_ADDRESS_TOO_LONG = "2004",
    AFF_BPS_INTEGER_0_100 = "2005",
    SOURCE_ADDRESS_INVALID_FOR_SELL_CHAIN = "2006",
    DESTINATION_ADDRESS_INVALID_FOR_BUY_CHAIN = "2007",
    PREFERRED_PROFVIDER_NOT_SUPPORTED = "2008",
    DESTINATION_ADDRESS_SMART_CONTRACT = "2009",
    BUY_AMOUNT_MUST_BE_POSITIVE_INTEGER = "2010",
    SOURCE_ADDRESS_SMART_CONTRACT = "2011",
    INVALID_PROVIDER = "2100",
    MISSING_CROSS_CHAIN_PROVIDER = "2101",
    MISSING_AVAX_PROVIDER = "2102",
    MISSING_BSC_PROVIDER = "2103",
    MISSING_ETH_PROVIDER = "2104",
    INVALID_PROVIDER_FOR_SWAP_OUT = "2105",
    MISSING_ARB_PROVIDER = "2106",
    INVALID_CHAIN = "2200",
    INVALID_ASSET = "2201",
    INVALID_ASSET_IDENTIFIER = "2202",
    UNSUPPORTED_CHAIN = "2204",
    UNSUPPORTED_ASSET = "2203",
    UNSUPPORTED_ASSET_FOR_SWAPOUT = "2205",
    INVALID_SOURCE_ADDRESS = "2300",
    INVALID_DESTINATION_ADDRESS = "2301",
    THORNODE_QUOTE_GENERIC_ERROR = "3000",
    NOT_ENOUGH_SYNTH_BALANCE = "3001",
    SYNTH_MINTING_CAP_REACHED = "3002",
    INVALID_QUOTE_MODE = "4000",
    NO_QUOTES = "4001",
    SERVICE_UNAVAILABLE_GENERIC = "5000",
    MISSING_GAS_DATA_GENERIC = "5100",
    MISSING_TOKEN_INFO_GENERIC = "5200",
    CANT_FIND_TOKEN_LIST = "5201",
    NO_PRICE = "5202",
    PRICE_IS_STALE = "5203",
    ADDRESS_NOT_WHITELISTED = "6000",
    ADDRESS_ALREADY_CLAIMED = "6001",
    TEMPORARY_ERROR = "9999"
}

export declare enum ERROR_MODULE {
    HEALTH_CONTROLLER = "1000",
    LIQUIDITY_CONTROLLER = "1001",
    PROVIDER_CONTROLLER = "1002",
    QUOTE_CONTROLLER = "1003",
    SWAP_CONTROLLER = "1004",
    UTIL_CONTROLLER = "1005",
    AIRDROP_CONTROLLER = "1006",
    PROVIDER = "2000",
    ASSET = "2001",
    TOKEN_LIST = "2002",
    QUOTE = "2100",
    QUOTE_TXN_DETAILS = "2101",
    THORCHAIN_PROVIDER = "3000",
    UNISWAPV2_ETH_PROVIDER = "3001",
    UNISWAPV3_ETH_PROVIDER = "3002",
    SUSHISWAP_ETH_PROVIDER = "3003",
    PANCAKESWAP_BSC_PROVIDER = "3004",
    PANCAKESWAP_ETH_PROVIDER = "3005",
    ONEINCH_ETH_PROVIDER = "3006",
    ONEINCH_BSC_PROVIDER = "3007",
    ONEINCH_AVAX_PROVIDER = "3008",
    ZEROX_ETH_PROVIDER = "3009",
    WOOFI_AVAX_PROVIDER = "3010",
    PANGOLIN_AVAX_PROVIDER = "3011",
    TRADERJOE_AVAX_PROVIDER = "3012",
    KYBER_ETH_PROVIDER = "3013",
    KYBER_AVAX_PROVIDER = "3014",
    WOOFI_BSC_PROVIDER = "3015",
    STARGATE_PROVIDER = "3016",
    PROVIDER_UTIL = "4000",
    TXN_DETAILS = "5000",
    AIRDROP_UTIL = "6000"
}

export declare enum ERROR_TYPE {
    VALIDATION_ERROR = "VALIDATION_ERROR",
    REQUEST_PARAMETER_ERROR = "REQUEST_PARAMETER_ERROR",
    RESPONSE_PARSING_ERROR = "RESPONSE_PARSING_ERROR",
    UNSUPPORTED = "UNSUPPORTED",
    NOT_IMPLEMENTED = "NOT_IMPLEMENTED",
    INCOMPATIBLE_ASSETS_OPERATIONS = "INCOMPATIBLE_ASSETS_OPERATIONS",
    SERVICE_UNAVAILABLE = "SERVICE_UNAVAILABLE",
    DOWN_FOR_MAINTENANCE = "DOWN_FOR_MAINTENANCE",
    MISSING_INBOUND_INFO = "MISSING_INBOUND_INFO",
    QUOTE_FETCHING_ERROR = "QUOTE_FETCHING_ERROR",
    AIRDROP_ERROR = "AIRDROP_ERROR",
    UNHANDLED_ERROR = "UNHANDLED_ERROR"
}

export declare enum ErrorCode {
    NoError = 36864
}

export declare type ErrorInfo = {
    status: number;
    revision: string;
    type?: ERROR_TYPE;
    module: ERROR_MODULE;
    code: ERROR_CODE;
    message?: string | undefined;
    stack?: string;
    identifier?: string;
    options?: ApiErrorOptions;
    displayMessageParams?: string[];
};

export declare type EVMChain = Chain.Ethereum | Chain.Avalanche | Chain.BinanceSmartChain | Chain.Arbitrum | Chain.Optimism | Chain.Polygon;

export declare const EVMChainList: EVMChain[];

export declare type EVMTxBaseParams<T = bigint> = {
    to?: string;
    from?: string;
    nonce?: number;
    gasLimit?: T;
    data?: string;
    value?: T;
    chainId?: T;
};

export declare type EVMWalletOptions = WalletOption.BRAVE | WalletOption.METAMASK | WalletOption.TRUSTWALLET_WEB | WalletOption.COINBASE_WEB;

export declare type ExtendParams<WalletConnectMethodNames = ''> = {
    excludedChains?: Chain[];
    config?: ConnectConfig;
    rpcUrls?: {
        [chain in Chain]?: string;
    };
    apis?: ApisType;
    wallets: {
        connectMethodName: ConnectMethodNames | WalletConnectMethodNames;
        connect: (params: ConnectWalletParams) => (...params: any) => Promise<any>;
    }[];
};

export declare enum FeeOption {
    Average = "average",
    Fast = "fast",
    Fastest = "fastest"
}

export declare type FixedNumberish = string | number | FixedNumber;

export declare type GetAddressAndPubKeyResponse = {
    bech32_address: string;
    compressed_pk: any;
    error_message: string;
    return_code: number;
};

export declare enum MemoType {
    BOND = "BOND",
    DEPOSIT = "+",
    LEAVE = "LEAVE",
    THORNAME_REGISTER = "~",
    UNBOND = "UNBOND",
    WITHDRAW = "-",
    OPEN_LOAN = "$+",
    CLOSE_LOAN = "$-"
}

export declare const NetworkDerivationPath: Record<Chain, DerivationPathArray>;

export declare enum NetworkId {
    Ethereum = 60,
    Binance = 714,
    THORChain = 931
}

export declare enum QuoteMode {
    TC_SUPPORTED_TO_TC_SUPPORTED = "TC-TC",
    TC_SUPPORTED_TO_ETH = "TC-ERC20",
    TC_SUPPORTED_TO_AVAX = "TC-ARC20",
    TC_SUPPORTED_TO_BSC = "TC-BEP20",
    ETH_TO_TC_SUPPORTED = "ERC20-TC",
    ETH_TO_ETH = "ERC20-ERC20",
    ETH_TO_AVAX = "ERC20-ARC20",
    ETH_TO_BSC = "ERC20-BEP20",
    AVAX_TO_TC_SUPPORTED = "ARC20-TC",
    AVAX_TO_ETH = "ARC20-ERC20",
    AVAX_TO_AVAX = "ARC20-ARC20",
    AVAX_TO_BSC = "ARC20-BEP20",
    BSC_TO_TC_SUPPORTED = "BEP20-TC",
    BSC_TO_ETH = "BEP20-ERC20",
    BSC_TO_AVAX = "BEP20-ARC20",
    BSC_TO_BSC = "BEP20-BEP20"
}

export declare enum RPCUrl {
    Arbitrum = "https://arb1.arbitrum.io/rpc",
    Avalanche = "https://node-router.thorswap.net/avalanche-c",
    Binance = "",
    BinanceSmartChain = "https://bsc-dataseed.binance.org",
    Bitcoin = "https://node-router.thorswap.net/bitcoin",
    BitcoinCash = "https://node-router.thorswap.net/bitcoin-cash",
    Cosmos = "https://node-router.thorswap.net/cosmos/rpc",
    Dogecoin = "https://node-router.thorswap.net/dogecoin",
    Ethereum = "https://node-router.thorswap.net/ethereum",
    Litecoin = "https://node-router.thorswap.net/litecoin",
    Maya = "https://tendermint.mayachain.info",
    MayaStagenet = "https://stagenet.tendermint.mayachain.info",
    Optimism = "https://mainnet.optimism.io",
    Polygon = "https://polygon-rpc.com",
    THORChain = "https://rpc.thorswap.net",
    THORChainStagenet = "https://stagenet-rpc.ninerealms.com"
}

export declare type Signature = {
    pub_key: {
        type: string;
        value: string;
    };
    sequence: string;
    signature: string;
};

export declare const SWAP_IN: QuoteMode[];

export declare const SWAP_OUT: QuoteMode[];

export declare const TCAvalancheDepositABI: ({
    inputs: never[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
    name?: undefined;
    outputs?: undefined;
} | {
    anonymous: boolean;
    inputs: ({
        indexed: boolean;
        internalType: string;
        name: string;
        type: string;
        components?: undefined;
    } | {
        components: {
            internalType: string;
            name: string;
            type: string;
        }[];
        indexed: boolean;
        internalType: string;
        name: string;
        type: string;
    })[];
    name: string;
    type: string;
    stateMutability?: undefined;
    outputs?: undefined;
} | {
    inputs: ({
        internalType: string;
        name: string;
        type: string;
        components?: undefined;
    } | {
        components: {
            internalType: string;
            name: string;
            type: string;
        }[];
        internalType: string;
        name: string;
        type: string;
    })[];
    name: string;
    outputs: never[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
} | {
    inputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    name: string;
    outputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
})[];

export declare const TCBscDepositABI: ({
    inputs: never[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
    name?: undefined;
    outputs?: undefined;
} | {
    anonymous: boolean;
    inputs: ({
        indexed: boolean;
        internalType: string;
        name: string;
        type: string;
        components?: undefined;
    } | {
        components: {
            internalType: string;
            name: string;
            type: string;
        }[];
        indexed: boolean;
        internalType: string;
        name: string;
        type: string;
    })[];
    name: string;
    type: string;
    stateMutability?: undefined;
    outputs?: undefined;
} | {
    inputs: ({
        internalType: string;
        name: string;
        type: string;
        components?: undefined;
    } | {
        components: {
            internalType: string;
            name: string;
            type: string;
        }[];
        internalType: string;
        name: string;
        type: string;
    })[];
    name: string;
    outputs: never[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
} | {
    inputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    name: string;
    outputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
})[];

export declare const TCEthereumVaultAbi: ({
    inputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
    name?: undefined;
    outputs?: undefined;
} | {
    anonymous: boolean;
    inputs: ({
        indexed: boolean;
        internalType: string;
        name: string;
        type: string;
        components?: undefined;
    } | {
        components: {
            internalType: string;
            name: string;
            type: string;
        }[];
        indexed: boolean;
        internalType: string;
        name: string;
        type: string;
    })[];
    name: string;
    type: string;
    stateMutability?: undefined;
    outputs?: undefined;
} | {
    inputs: ({
        internalType: string;
        name: string;
        type: string;
        components?: undefined;
    } | {
        components: {
            internalType: string;
            name: string;
            type: string;
        }[];
        internalType: string;
        name: string;
        type: string;
    })[];
    name: string;
    outputs: never[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
} | {
    inputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    name: string;
    outputs: {
        internalType: string;
        name: string;
        type: string;
    }[];
    stateMutability: string;
    type: string;
    anonymous?: undefined;
})[];

export declare type UTXOChain = Chain.Bitcoin | Chain.BitcoinCash | Chain.Dogecoin | Chain.Litecoin;

export declare const UTXOChainList: Chain[];

export declare enum WalletOption {
    'KEYSTORE' = "KEYSTORE",
    'KEEPKEY' = "KEEPKEY",
    'XDEFI' = "XDEFI",
    'METAMASK' = "METAMASK",
    'COINBASE_WEB' = "COINBASE_WEB",
    'TREZOR' = "TREZOR",
    'TRUSTWALLET_WEB' = "TRUSTWALLET_WEB",
    'LEDGER' = "LEDGER",
    'KEPLR' = "KEPLR",
    'OKX' = "OKX",
    'BRAVE' = "BRAVE",
    'WALLETCONNECT' = "WALLETCONNECT"
}

export declare type WalletTxParams = {
    feeOptionKey?: FeeOption;
    from?: string;
    memo?: string;
    recipient: string;
};

export declare type Witness = {
    value: number;
    script: Buffer;
};

export { }
