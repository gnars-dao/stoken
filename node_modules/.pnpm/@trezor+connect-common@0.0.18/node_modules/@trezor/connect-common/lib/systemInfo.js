"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getSystemInfo = exports.getInstallerPackage = void 0;
var env_utils_1 = require("@trezor/env-utils");
var getInstallerPackage = function () {
    var agent = (0, env_utils_1.getUserAgent)();
    switch ((0, env_utils_1.getOsFamily)()) {
        case 'MacOS':
            return 'mac';
        case 'Windows': {
            var arch = agent.match(/(Win64|WOW64)/) ? '64' : '32';
            return "win".concat(arch);
        }
        case 'Linux': {
            var isRpm = agent.match(/CentOS|Fedora|Mandriva|Mageia|Red Hat|Scientific|SUSE/)
                ? 'rpm'
                : 'deb';
            var is64x = agent.match(/Linux i[3456]86/) ? '32' : '64';
            return "".concat(isRpm).concat(is64x);
        }
        default:
    }
};
exports.getInstallerPackage = getInstallerPackage;
var getSystemInfo = function (supportedBrowsers) {
    var browserName = (0, env_utils_1.getBrowserName)();
    var browserVersion = (0, env_utils_1.getBrowserVersion)();
    var supportedBrowser = browserName ? supportedBrowsers[browserName.toLowerCase()] : undefined;
    var outdatedBrowser = supportedBrowser
        ? supportedBrowser.version > parseInt(browserVersion, 10)
        : false;
    var mobile = (0, env_utils_1.getDeviceType)() === 'mobile';
    var supportedMobile = mobile ? 'usb' in navigator : true;
    var supported = !!(supportedBrowser && !outdatedBrowser && supportedMobile);
    return {
        os: {
            family: (0, env_utils_1.getOsFamily)(),
            mobile: mobile,
        },
        browser: {
            supported: supported,
            outdated: outdatedBrowser,
        },
    };
};
exports.getSystemInfo = getSystemInfo;
//# sourceMappingURL=systemInfo.js.map