{"version":3,"file":"rango-sdk.cjs.production.min.js","sources":["../src/services/client.ts","../../../node_modules/rango-types/src/api/shared/type-gaurds.ts"],"sourcesContent":["import uuid from 'uuid-random'\nimport {\n  MetaRequest,\n  MetaResponse,\n  BestRouteRequest,\n  BestRouteResponse,\n  CheckApprovalResponse,\n  CheckTxStatusRequest,\n  TransactionStatusResponse,\n  CreateTransactionRequest,\n  CreateTransactionResponse,\n  ReportTransactionRequest,\n  WalletDetailsResponse,\n  RequestOptions,\n  BlockchainMeta,\n  SwapperMeta,\n  CompactMetaResponse,\n  CompactToken,\n  Token,\n} from '../types'\nimport axios, { AxiosInstance } from 'axios'\n\ntype WalletAddresses = { blockchain: string; address: string }[]\n\nexport class RangoClient {\n  private readonly deviceId: string\n  private readonly apiKey: string\n  private readonly apiUrl: string\n  private readonly httpService: AxiosInstance\n\n  constructor(apiKey: string, apiUrl?: string) {\n    this.apiUrl = apiUrl || 'https://api.rango.exchange'\n    this.apiKey = apiKey\n    try {\n      if (typeof window !== 'undefined') {\n        const deviceId = localStorage.getItem('deviceId')\n        if (deviceId) {\n          this.deviceId = deviceId\n        } else {\n          const generatedId = uuid()\n          localStorage.setItem('deviceId', generatedId)\n          this.deviceId = generatedId\n        }\n      } else {\n        this.deviceId = uuid()\n      }\n    } catch (e) {\n      this.deviceId = uuid()\n    }\n    this.httpService = axios.create({\n      baseURL: this.apiUrl,\n    })\n  }\n\n  public async getAllMetadata(\n    metaRequest?: MetaRequest,\n    options?: RequestOptions\n  ): Promise<MetaResponse> {\n    const params = {\n      ...metaRequest,\n      blockchains: metaRequest?.blockchains?.join(),\n      swappers: metaRequest?.swappers?.join(),\n      swappersGroups: metaRequest?.swappersGroups?.join(),\n      transactionTypes: metaRequest?.transactionTypes?.join(),\n    }\n    const axiosResponse = await this.httpService.get<CompactMetaResponse>(\n      `/meta/compact?apiKey=${this.apiKey}`,\n      {\n        params,\n        ...options,\n      }\n    )\n    const reformatTokens = (tokens: CompactToken[]): Token[] =>\n      tokens.map((tm) => ({\n        blockchain: tm.b,\n        symbol: tm.s,\n        image: tm.i,\n        address: tm.a || null,\n        usdPrice: tm.p || null,\n        isSecondaryCoin: tm.is || false,\n        coinSource: tm.c || null,\n        coinSourceUrl: tm.cu || null,\n        name: tm.n || null,\n        decimals: tm.d,\n        isPopular: tm.ip || false,\n        supportedSwappers: tm.ss || [],\n      }))\n\n    const tokens = reformatTokens(axiosResponse.data.tokens)\n    const popularTokens = reformatTokens(axiosResponse.data.popularTokens)\n    return { ...axiosResponse.data, tokens, popularTokens }\n  }\n\n  public async getBlockchains(\n    options?: RequestOptions\n  ): Promise<BlockchainMeta[]> {\n    const axiosResponse = await this.httpService.get<BlockchainMeta[]>(\n      `/meta/blockchains?apiKey=${this.apiKey}`,\n      { ...options }\n    )\n    return axiosResponse.data\n  }\n\n  public async getSwappers(options?: RequestOptions): Promise<SwapperMeta[]> {\n    const axiosResponse = await this.httpService.get<SwapperMeta[]>(\n      `/meta/swappers?apiKey=${this.apiKey}`,\n      { ...options }\n    )\n    return axiosResponse.data\n  }\n\n  public async getBestRoute(\n    requestBody: BestRouteRequest,\n    options?: RequestOptions\n  ): Promise<BestRouteResponse> {\n    const axiosResponse = await this.httpService.post<BestRouteResponse>(\n      `/routing/best?apiKey=${this.apiKey}`,\n      requestBody,\n      { headers: { 'X-Rango-Id': this.deviceId }, ...options }\n    )\n    return axiosResponse.data\n  }\n\n  public async checkApproval(\n    requestId: string,\n    txId?: string,\n    options?: RequestOptions\n  ): Promise<CheckApprovalResponse> {\n    const axiosResponse = await this.httpService.get<CheckApprovalResponse>(\n      `/tx/${requestId}/check-approval?apiKey=${this.apiKey}`,\n      { params: { txId }, ...options }\n    )\n    return axiosResponse.data\n  }\n\n  public async checkStatus(\n    requestBody: CheckTxStatusRequest,\n    options?: RequestOptions\n  ): Promise<TransactionStatusResponse> {\n    const axiosResponse =\n      await this.httpService.post<TransactionStatusResponse>(\n        `/tx/check-status?apiKey=${this.apiKey}`,\n        requestBody,\n        { ...options }\n      )\n    return axiosResponse.data\n  }\n\n  public async createTransaction(\n    requestBody: CreateTransactionRequest,\n    options?: RequestOptions\n  ): Promise<CreateTransactionResponse> {\n    const axiosResponse =\n      await this.httpService.post<CreateTransactionResponse>(\n        `/tx/create?apiKey=${this.apiKey}`,\n        requestBody,\n        { ...options }\n      )\n    return axiosResponse.data\n  }\n\n  public async reportFailure(\n    requestBody: ReportTransactionRequest,\n    options?: RequestOptions\n  ): Promise<void> {\n    await this.httpService.post(\n      `/tx/report-tx?apiKey=${this.apiKey}`,\n      requestBody,\n      {\n        ...options,\n      }\n    )\n  }\n\n  public async getWalletsDetails(\n    walletAddresses: WalletAddresses,\n    options?: RequestOptions\n  ): Promise<WalletDetailsResponse> {\n    let walletAddressesQueryParams = ''\n    for (let i = 0; i < walletAddresses.length; i++) {\n      const walletAddress = walletAddresses[i]\n      walletAddressesQueryParams += `&address=${walletAddress.blockchain}.${walletAddress.address}`\n    }\n    const axiosResponse = await this.httpService.get<WalletDetailsResponse>(\n      `/wallets/details?apiKey=${this.apiKey}${walletAddressesQueryParams}`,\n      { ...options }\n    )\n    return axiosResponse.data\n  }\n}\n","import {\n  BlockchainMeta,\n  CosmosBlockchainMeta,\n  EvmBlockchainMeta,\n  SolanaBlockchainMeta,\n  StarkNetBlockchainMeta,\n  TonBlockchainMeta,\n  TransferBlockchainMeta,\n  TronBlockchainMeta,\n} from './meta.js'\n\nexport const isEvmBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is EvmBlockchainMeta => blockchainMeta.type === 'EVM'\n\nexport const isCosmosBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is CosmosBlockchainMeta => blockchainMeta.type === 'COSMOS'\n\nexport const isSolanaBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is SolanaBlockchainMeta => blockchainMeta.type === 'SOLANA'\n\nexport const isTronBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is TronBlockchainMeta => blockchainMeta.type === 'TRON'\n\nexport const isTransferBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is TransferBlockchainMeta =>\n  blockchainMeta.type === 'TRANSFER'\n\nexport const isStarknetBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is StarkNetBlockchainMeta =>\n  blockchainMeta.type === 'STARKNET'\n\nexport const isTonBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is TonBlockchainMeta => blockchainMeta.type === 'TON'\n\nexport const evmBlockchains = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isEvmBlockchain)\n\nexport const solanaBlockchain = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isSolanaBlockchain)\n\nexport const starknetBlockchain = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isStarknetBlockchain)\n\nexport const tronBlockchain = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isTronBlockchain)\n\nexport const cosmosBlockchains = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isCosmosBlockchain)\n\nexport const transferBlockchains = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isTransferBlockchain)\n\nexport const tonBlockchain = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isTonBlockchain)\n"],"names":["RangoClient","apiKey","apiUrl","this","window","deviceId","localStorage","getItem","generatedId","uuid","setItem","e","httpService","axios","create","baseURL","_proto","prototype","getAllMetadata","_getAllMetadata","_asyncToGenerator","_regeneratorRuntime","mark","_callee","metaRequest","options","_metaRequest$blockcha","_metaRequest$swappers","_metaRequest$swappers2","_metaRequest$transact","params","axiosResponse","reformatTokens","tokens","popularTokens","wrap","_context","prev","next","_extends","blockchains","join","swappers","swappersGroups","transactionTypes","get","map","tm","blockchain","b","symbol","s","image","i","address","a","usdPrice","p","isSecondaryCoin","is","coinSource","c","coinSourceUrl","cu","name","n","decimals","d","isPopular","ip","supportedSwappers","ss","sent","data","abrupt","stop","_x","_x2","apply","arguments","getBlockchains","_getBlockchains","_callee2","_context2","_x3","getSwappers","_getSwappers","_callee3","_context3","_x4","getBestRoute","_getBestRoute","_callee4","requestBody","_context4","post","headers","X-Rango-Id","_x5","_x6","checkApproval","_checkApproval","_callee5","requestId","txId","_context5","_x7","_x8","_x9","checkStatus","_checkStatus","_callee6","_context6","_x10","_x11","createTransaction","_createTransaction","_callee7","_context7","_x12","_x13","reportFailure","_reportFailure","_callee8","_context8","_x14","_x15","getWalletsDetails","_getWalletsDetails","_callee9","walletAddresses","walletAddressesQueryParams","walletAddress","_context9","length","_x16","_x17","blockchainMeta"],"mappings":"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"}