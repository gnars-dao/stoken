import { MetaRequest, MetaResponse, BestRouteRequest, BestRouteResponse, CheckApprovalResponse, CheckTxStatusRequest, TransactionStatusResponse, CreateTransactionRequest, CreateTransactionResponse, ReportTransactionRequest, WalletDetailsResponse, RequestOptions, BlockchainMeta, SwapperMeta } from '../types';
declare type WalletAddresses = {
    blockchain: string;
    address: string;
}[];
export declare class RangoClient {
    private readonly deviceId;
    private readonly apiKey;
    private readonly apiUrl;
    private readonly httpService;
    constructor(apiKey: string, apiUrl?: string);
    getAllMetadata(metaRequest?: MetaRequest, options?: RequestOptions): Promise<MetaResponse>;
    getBlockchains(options?: RequestOptions): Promise<BlockchainMeta[]>;
    getSwappers(options?: RequestOptions): Promise<SwapperMeta[]>;
    getBestRoute(requestBody: BestRouteRequest, options?: RequestOptions): Promise<BestRouteResponse>;
    checkApproval(requestId: string, txId?: string, options?: RequestOptions): Promise<CheckApprovalResponse>;
    checkStatus(requestBody: CheckTxStatusRequest, options?: RequestOptions): Promise<TransactionStatusResponse>;
    createTransaction(requestBody: CreateTransactionRequest, options?: RequestOptions): Promise<CreateTransactionResponse>;
    reportFailure(requestBody: ReportTransactionRequest, options?: RequestOptions): Promise<void>;
    getWalletsDetails(walletAddresses: WalletAddresses, options?: RequestOptions): Promise<WalletDetailsResponse>;
}
export {};
//# sourceMappingURL=client.d.ts.map