{"version":3,"file":"rango-sdk.esm.js","sources":["../src/services/client.ts","../../../node_modules/rango-types/src/api/shared/type-gaurds.ts","../../../node_modules/rango-types/src/api/shared/routing.ts","../../../node_modules/rango-types/src/api/shared/transactions.ts","../../../node_modules/rango-types/src/api/shared/txs/ton.ts"],"sourcesContent":["import uuid from 'uuid-random'\nimport {\n  MetaRequest,\n  MetaResponse,\n  BestRouteRequest,\n  BestRouteResponse,\n  CheckApprovalResponse,\n  CheckTxStatusRequest,\n  TransactionStatusResponse,\n  CreateTransactionRequest,\n  CreateTransactionResponse,\n  ReportTransactionRequest,\n  WalletDetailsResponse,\n  RequestOptions,\n  BlockchainMeta,\n  SwapperMeta,\n  CompactMetaResponse,\n  CompactToken,\n  Token,\n} from '../types'\nimport axios, { AxiosInstance } from 'axios'\n\ntype WalletAddresses = { blockchain: string; address: string }[]\n\nexport class RangoClient {\n  private readonly deviceId: string\n  private readonly apiKey: string\n  private readonly apiUrl: string\n  private readonly httpService: AxiosInstance\n\n  constructor(apiKey: string, apiUrl?: string) {\n    this.apiUrl = apiUrl || 'https://api.rango.exchange'\n    this.apiKey = apiKey\n    try {\n      if (typeof window !== 'undefined') {\n        const deviceId = localStorage.getItem('deviceId')\n        if (deviceId) {\n          this.deviceId = deviceId\n        } else {\n          const generatedId = uuid()\n          localStorage.setItem('deviceId', generatedId)\n          this.deviceId = generatedId\n        }\n      } else {\n        this.deviceId = uuid()\n      }\n    } catch (e) {\n      this.deviceId = uuid()\n    }\n    this.httpService = axios.create({\n      baseURL: this.apiUrl,\n    })\n  }\n\n  public async getAllMetadata(\n    metaRequest?: MetaRequest,\n    options?: RequestOptions\n  ): Promise<MetaResponse> {\n    const params = {\n      ...metaRequest,\n      blockchains: metaRequest?.blockchains?.join(),\n      swappers: metaRequest?.swappers?.join(),\n      swappersGroups: metaRequest?.swappersGroups?.join(),\n      transactionTypes: metaRequest?.transactionTypes?.join(),\n    }\n    const axiosResponse = await this.httpService.get<CompactMetaResponse>(\n      `/meta/compact?apiKey=${this.apiKey}`,\n      {\n        params,\n        ...options,\n      }\n    )\n    const reformatTokens = (tokens: CompactToken[]): Token[] =>\n      tokens.map((tm) => ({\n        blockchain: tm.b,\n        symbol: tm.s,\n        image: tm.i,\n        address: tm.a || null,\n        usdPrice: tm.p || null,\n        isSecondaryCoin: tm.is || false,\n        coinSource: tm.c || null,\n        coinSourceUrl: tm.cu || null,\n        name: tm.n || null,\n        decimals: tm.d,\n        isPopular: tm.ip || false,\n        supportedSwappers: tm.ss || [],\n      }))\n\n    const tokens = reformatTokens(axiosResponse.data.tokens)\n    const popularTokens = reformatTokens(axiosResponse.data.popularTokens)\n    return { ...axiosResponse.data, tokens, popularTokens }\n  }\n\n  public async getBlockchains(\n    options?: RequestOptions\n  ): Promise<BlockchainMeta[]> {\n    const axiosResponse = await this.httpService.get<BlockchainMeta[]>(\n      `/meta/blockchains?apiKey=${this.apiKey}`,\n      { ...options }\n    )\n    return axiosResponse.data\n  }\n\n  public async getSwappers(options?: RequestOptions): Promise<SwapperMeta[]> {\n    const axiosResponse = await this.httpService.get<SwapperMeta[]>(\n      `/meta/swappers?apiKey=${this.apiKey}`,\n      { ...options }\n    )\n    return axiosResponse.data\n  }\n\n  public async getBestRoute(\n    requestBody: BestRouteRequest,\n    options?: RequestOptions\n  ): Promise<BestRouteResponse> {\n    const axiosResponse = await this.httpService.post<BestRouteResponse>(\n      `/routing/best?apiKey=${this.apiKey}`,\n      requestBody,\n      { headers: { 'X-Rango-Id': this.deviceId }, ...options }\n    )\n    return axiosResponse.data\n  }\n\n  public async checkApproval(\n    requestId: string,\n    txId?: string,\n    options?: RequestOptions\n  ): Promise<CheckApprovalResponse> {\n    const axiosResponse = await this.httpService.get<CheckApprovalResponse>(\n      `/tx/${requestId}/check-approval?apiKey=${this.apiKey}`,\n      { params: { txId }, ...options }\n    )\n    return axiosResponse.data\n  }\n\n  public async checkStatus(\n    requestBody: CheckTxStatusRequest,\n    options?: RequestOptions\n  ): Promise<TransactionStatusResponse> {\n    const axiosResponse =\n      await this.httpService.post<TransactionStatusResponse>(\n        `/tx/check-status?apiKey=${this.apiKey}`,\n        requestBody,\n        { ...options }\n      )\n    return axiosResponse.data\n  }\n\n  public async createTransaction(\n    requestBody: CreateTransactionRequest,\n    options?: RequestOptions\n  ): Promise<CreateTransactionResponse> {\n    const axiosResponse =\n      await this.httpService.post<CreateTransactionResponse>(\n        `/tx/create?apiKey=${this.apiKey}`,\n        requestBody,\n        { ...options }\n      )\n    return axiosResponse.data\n  }\n\n  public async reportFailure(\n    requestBody: ReportTransactionRequest,\n    options?: RequestOptions\n  ): Promise<void> {\n    await this.httpService.post(\n      `/tx/report-tx?apiKey=${this.apiKey}`,\n      requestBody,\n      {\n        ...options,\n      }\n    )\n  }\n\n  public async getWalletsDetails(\n    walletAddresses: WalletAddresses,\n    options?: RequestOptions\n  ): Promise<WalletDetailsResponse> {\n    let walletAddressesQueryParams = ''\n    for (let i = 0; i < walletAddresses.length; i++) {\n      const walletAddress = walletAddresses[i]\n      walletAddressesQueryParams += `&address=${walletAddress.blockchain}.${walletAddress.address}`\n    }\n    const axiosResponse = await this.httpService.get<WalletDetailsResponse>(\n      `/wallets/details?apiKey=${this.apiKey}${walletAddressesQueryParams}`,\n      { ...options }\n    )\n    return axiosResponse.data\n  }\n}\n","import {\n  BlockchainMeta,\n  CosmosBlockchainMeta,\n  EvmBlockchainMeta,\n  SolanaBlockchainMeta,\n  StarkNetBlockchainMeta,\n  TonBlockchainMeta,\n  TransferBlockchainMeta,\n  TronBlockchainMeta,\n} from './meta.js'\n\nexport const isEvmBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is EvmBlockchainMeta => blockchainMeta.type === 'EVM'\n\nexport const isCosmosBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is CosmosBlockchainMeta => blockchainMeta.type === 'COSMOS'\n\nexport const isSolanaBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is SolanaBlockchainMeta => blockchainMeta.type === 'SOLANA'\n\nexport const isTronBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is TronBlockchainMeta => blockchainMeta.type === 'TRON'\n\nexport const isTransferBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is TransferBlockchainMeta =>\n  blockchainMeta.type === 'TRANSFER'\n\nexport const isStarknetBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is StarkNetBlockchainMeta =>\n  blockchainMeta.type === 'STARKNET'\n\nexport const isTonBlockchain = (\n  blockchainMeta: BlockchainMeta\n): blockchainMeta is TonBlockchainMeta => blockchainMeta.type === 'TON'\n\nexport const evmBlockchains = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isEvmBlockchain)\n\nexport const solanaBlockchain = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isSolanaBlockchain)\n\nexport const starknetBlockchain = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isStarknetBlockchain)\n\nexport const tronBlockchain = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isTronBlockchain)\n\nexport const cosmosBlockchains = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isCosmosBlockchain)\n\nexport const transferBlockchains = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isTransferBlockchain)\n\nexport const tonBlockchain = (blockchains: BlockchainMeta[]) =>\n  blockchains.filter(isTonBlockchain)\n","/**\n * Routing Result Type\n *\n */\nexport enum RoutingResultType {\n  OK = 'OK',\n  HIGH_IMPACT = 'HIGH_IMPACT',\n  NO_ROUTE = 'NO_ROUTE',\n  INPUT_LIMIT_ISSUE = 'INPUT_LIMIT_ISSUE',\n}\n","/**\n * The type of transaction\n */\nexport enum TransactionType {\n  EVM = 'EVM',\n  TRANSFER = 'TRANSFER',\n  COSMOS = 'COSMOS',\n  SOLANA = 'SOLANA',\n  TRON = 'TRON',\n  STARKNET = 'STARKNET',\n  TON = 'TON',\n}\n\n/**\n * The type of transaction\n * @deprecated use TransactionType instead\n */\nexport enum GenericTransactionType {\n  EVM = 'EVM',\n  TRANSFER = 'TRANSFER',\n  COSMOS = 'COSMOS',\n  SOLANA = 'SOLANA',\n}\n\n/**\n * A transaction's url that can be displayed to advanced user to track the progress\n *\n * @property {string} url - Url of the transaction in blockchain explorer. example: https://etherscan.io/tx/0xa1a3...\n * @property {string | null} description - A custom display name to help user distinguish the transactions from each\n * other. Example: Inbound, Outbound, Bridge, or null\n *\n */\nexport type SwapExplorerUrl = {\n  description: string | null\n  url: string\n}\n\n/**\n * APIErrorCode\n *\n * Error code of a swap failure\n *\n */\nexport type APIErrorCode =\n  | 'TX_FAIL'\n  | 'TX_EXPIRED'\n  | 'FETCH_TX_FAILED'\n  | 'USER_REJECT'\n  | 'USER_CANCEL'\n  | 'USER_CANCELED_TX'\n  | 'CALL_WALLET_FAILED'\n  | 'SEND_TX_FAILED'\n  | 'CALL_OR_SEND_FAILED'\n  | 'TX_FAILED_IN_BLOCKCHAIN'\n  | 'CLIENT_UNEXPECTED_BEHAVIOUR'\n  | 'INSUFFICIENT_APPROVE'\n\n/**\n * The function checks if a given string value is a valid API error code.\n * @param {string} value - a string that represents a possible API error code.\n * @returns A boolean value is being returned, indicating whether the input `value` is of type\n * `APIErrorCode` or not.\n */\nexport function isAPIErrorCode(value: string): value is APIErrorCode {\n  return [\n    'TX_FAIL',\n    'TX_EXPIRED',\n    'FETCH_TX_FAILED',\n    'USER_REJECT',\n    'USER_CANCEL',\n    'USER_CANCELED_TX',\n    'CALL_WALLET_FAILED',\n    'SEND_TX_FAILED',\n    'CALL_OR_SEND_FAILED',\n    'TX_FAILED_IN_BLOCKCHAIN',\n    'CLIENT_UNEXPECTED_BEHAVIOUR',\n    'INSUFFICIENT_APPROVE',\n  ].includes(value)\n}\n\n/**\n * ReportTransactionRequest\n *\n * It should be used when an error happened in client and we want to inform server that transaction failed,\n * E.g. user rejected the transaction dialog or and an RPC error raised during signing tx by user.\n *\n * @property {string} requestId - The requestId from best route endpoint\n * @property {APIErrorCode} eventType - Type of the event that happened, example: USER_REJECT\n * @property {number} [step] - Step number in which failure happened\n * @property {string} [reason] - Reason or message for the error\n * @property {[key: string]: string} [data] - A list of key-value for extra details\n * @property {wallet?: string, errorCode? string} [tags] - A list of key-value for pre-defined tags\n *\n */\nexport type ReportTransactionRequest = {\n  requestId: string\n  eventType: APIErrorCode\n  step?: number\n  reason?: string\n  data?: { [key: string]: string }\n  tags?: { wallet?: string; errorCode?: string }\n}\n\n/**\n * The status of transaction in tracking\n */\nexport enum TransactionStatus {\n  FAILED = 'failed',\n  RUNNING = 'running',\n  SUCCESS = 'success',\n}\n\n/**\n * Response body of check-approval\n * You could stop check approval if:\n *  1- approved successfully\n *  => isApproved = true\n *  2- approval transaction failed\n *  => isApproved = false && txStatus === 'failed'\n *  3- approval transaction succeeded but currentApprovedAmount is still less than requiredApprovedAmount\n *  (e.g. user changed transaction data and enter another approve amount in MetaMask)\n *  => isApproved = false && txStatus == 'success'\n *\n * @property {boolean} isApproved - A flag which indicates that the approve tx is done or not\n * @property {TransactionStatus | null} txStatus - Status of approve transaction in blockchain,\n * if isArppoved is false and txStatus is failed, it seems that approve transaction failed in blockchain\n * @property {string | null} requiredApprovedAmount - required amount to be approved by user\n * @property {string | null} currentApprovedAmount - current approved amount by user\n *\n */\nexport type CheckApprovalResponse = {\n  isApproved: boolean\n  txStatus: TransactionStatus | null\n  requiredApprovedAmount: string | null\n  currentApprovedAmount: string | null\n}\n","import { TransactionType } from '../index.js'\nimport { BaseTransaction } from './base.js'\n\nexport enum TonChainID {\n  MAINNET = '-239',\n  TESTNET = '-3',\n}\n\n/**\n * @property {string} address - Receiver's address\n * @property {string} amount - Amount to send in nanoTon\n * @property {string} [stateInit] - Contract specific data to add to the transaction\n * @property {string} [payload] - Contract specific data to add to the transaction\n */\nexport interface TonMessage {\n  address: string\n  amount: string\n  stateInit?: string\n  payload?: string\n}\n\n/**\n * This type of transaction is used for all Ton transactions\n *\n * @property {TransactionType} type - This field equals to TON for all Ton transactions\n * @property {number} validUntil - Sending transaction deadline in unix epoch seconds\n * @property {TonChainID} [network] - The network (mainnet or testnet) where DApp intends to send the transaction. If not set, the transaction is sent to the network currently set in the wallet, but this is not safe and DApp should always strive to set the network. If the network parameter is set, but the wallet has a different network set, the wallet should show an alert and DO NOT ALLOW TO SEND this transaction\n * @property {string} [from] - The sender address in '<wc>:<hex>' format from which DApp intends to send the transaction. Current account.address by default\n * @property {TonMessage[]} messages - Messages to send: min is 1, max is 4\n */\nexport interface TonTransaction extends BaseTransaction {\n  type: TransactionType.TON\n  validUntil: number\n  network?: TonChainID\n  from?: string\n  messages: TonMessage[]\n}\n\nexport const isTonTransaction = (transaction: {\n  type: TransactionType\n}): transaction is TonTransaction => transaction.type === TransactionType.TON\n"],"names":["RangoClient","apiKey","apiUrl","window","deviceId","localStorage","getItem","generatedId","uuid","setItem","e","httpService","axios","create","baseURL","_proto","prototype","getAllMetadata","_getAllMetadata","_asyncToGenerator","_regeneratorRuntime","mark","_callee","metaRequest","options","_metaRequest$blockcha","_metaRequest$swappers","_metaRequest$swappers2","_metaRequest$transact","params","axiosResponse","reformatTokens","tokens","popularTokens","wrap","_callee$","_context","prev","next","_extends","blockchains","join","swappers","swappersGroups","transactionTypes","get","sent","map","tm","blockchain","b","symbol","s","image","i","address","a","usdPrice","p","isSecondaryCoin","is","coinSource","c","coinSourceUrl","cu","name","n","decimals","d","isPopular","ip","supportedSwappers","ss","data","abrupt","stop","_x","_x2","apply","arguments","getBlockchains","_getBlockchains","_callee2","_callee2$","_context2","_x3","getSwappers","_getSwappers","_callee3","_callee3$","_context3","_x4","getBestRoute","_getBestRoute","_callee4","requestBody","_callee4$","_context4","post","headers","_x5","_x6","checkApproval","_checkApproval","_callee5","requestId","txId","_callee5$","_context5","_x7","_x8","_x9","checkStatus","_checkStatus","_callee6","_callee6$","_context6","_x10","_x11","createTransaction","_createTransaction","_callee7","_callee7$","_context7","_x12","_x13","reportFailure","_reportFailure","_callee8","_callee8$","_context8","_x14","_x15","getWalletsDetails","_getWalletsDetails","_callee9","walletAddresses","walletAddressesQueryParams","walletAddress","_callee9$","_context9","length","_x16","_x17","isEvmBlockchain","blockchainMeta"],"mappings":"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"}