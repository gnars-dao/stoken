'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var uuid = _interopDefault(require('uuid-random'));
var axios = _interopDefault(require('axios'));

function _regeneratorRuntime() {
  _regeneratorRuntime = function () {
    return exports;
  };
  var exports = {},
    Op = Object.prototype,
    hasOwn = Op.hasOwnProperty,
    defineProperty = Object.defineProperty || function (obj, key, desc) {
      obj[key] = desc.value;
    },
    $Symbol = "function" == typeof Symbol ? Symbol : {},
    iteratorSymbol = $Symbol.iterator || "@@iterator",
    asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator",
    toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  function define(obj, key, value) {
    return Object.defineProperty(obj, key, {
      value: value,
      enumerable: !0,
      configurable: !0,
      writable: !0
    }), obj[key];
  }
  try {
    define({}, "");
  } catch (err) {
    define = function (obj, key, value) {
      return obj[key] = value;
    };
  }
  function wrap(innerFn, outerFn, self, tryLocsList) {
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator,
      generator = Object.create(protoGenerator.prototype),
      context = new Context(tryLocsList || []);
    return defineProperty(generator, "_invoke", {
      value: makeInvokeMethod(innerFn, self, context)
    }), generator;
  }
  function tryCatch(fn, obj, arg) {
    try {
      return {
        type: "normal",
        arg: fn.call(obj, arg)
      };
    } catch (err) {
      return {
        type: "throw",
        arg: err
      };
    }
  }
  exports.wrap = wrap;
  var ContinueSentinel = {};
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}
  var IteratorPrototype = {};
  define(IteratorPrototype, iteratorSymbol, function () {
    return this;
  });
  var getProto = Object.getPrototypeOf,
    NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
  var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function (method) {
      define(prototype, method, function (arg) {
        return this._invoke(method, arg);
      });
    });
  }
  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if ("throw" !== record.type) {
        var result = record.arg,
          value = result.value;
        return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
          invoke("next", value, resolve, reject);
        }, function (err) {
          invoke("throw", err, resolve, reject);
        }) : PromiseImpl.resolve(value).then(function (unwrapped) {
          result.value = unwrapped, resolve(result);
        }, function (error) {
          return invoke("throw", error, resolve, reject);
        });
      }
      reject(record.arg);
    }
    var previousPromise;
    defineProperty(this, "_invoke", {
      value: function (method, arg) {
        function callInvokeWithMethodAndArg() {
          return new PromiseImpl(function (resolve, reject) {
            invoke(method, arg, resolve, reject);
          });
        }
        return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
      }
    });
  }
  function makeInvokeMethod(innerFn, self, context) {
    var state = "suspendedStart";
    return function (method, arg) {
      if ("executing" === state) throw new Error("Generator is already running");
      if ("completed" === state) {
        if ("throw" === method) throw arg;
        return {
          value: void 0,
          done: !0
        };
      }
      for (context.method = method, context.arg = arg;;) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }
        if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) {
          if ("suspendedStart" === state) throw state = "completed", context.arg;
          context.dispatchException(context.arg);
        } else "return" === context.method && context.abrupt("return", context.arg);
        state = "executing";
        var record = tryCatch(innerFn, self, context);
        if ("normal" === record.type) {
          if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue;
          return {
            value: record.arg,
            done: context.done
          };
        }
        "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
      }
    };
  }
  function maybeInvokeDelegate(delegate, context) {
    var methodName = context.method,
      method = delegate.iterator[methodName];
    if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel;
    var record = tryCatch(method, delegate.iterator, context.arg);
    if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel;
    var info = record.arg;
    return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
  }
  function pushTryEntry(locs) {
    var entry = {
      tryLoc: locs[0]
    };
    1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry);
  }
  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal", delete record.arg, entry.completion = record;
  }
  function Context(tryLocsList) {
    this.tryEntries = [{
      tryLoc: "root"
    }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0);
  }
  function values(iterable) {
    if (iterable || "" === iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) return iteratorMethod.call(iterable);
      if ("function" == typeof iterable.next) return iterable;
      if (!isNaN(iterable.length)) {
        var i = -1,
          next = function next() {
            for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next;
            return next.value = undefined, next.done = !0, next;
          };
        return next.next = next;
      }
    }
    throw new TypeError(typeof iterable + " is not iterable");
  }
  return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
    value: GeneratorFunctionPrototype,
    configurable: !0
  }), defineProperty(GeneratorFunctionPrototype, "constructor", {
    value: GeneratorFunction,
    configurable: !0
  }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
    var ctor = "function" == typeof genFun && genFun.constructor;
    return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
  }, exports.mark = function (genFun) {
    return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun;
  }, exports.awrap = function (arg) {
    return {
      __await: arg
    };
  }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
    return this;
  }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    void 0 === PromiseImpl && (PromiseImpl = Promise);
    var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
    return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
      return result.done ? result.value : iter.next();
    });
  }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
    return this;
  }), define(Gp, "toString", function () {
    return "[object Generator]";
  }), exports.keys = function (val) {
    var object = Object(val),
      keys = [];
    for (var key in object) keys.push(key);
    return keys.reverse(), function next() {
      for (; keys.length;) {
        var key = keys.pop();
        if (key in object) return next.value = key, next.done = !1, next;
      }
      return next.done = !0, next;
    };
  }, exports.values = values, Context.prototype = {
    constructor: Context,
    reset: function (skipTempReset) {
      if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
    },
    stop: function () {
      this.done = !0;
      var rootRecord = this.tryEntries[0].completion;
      if ("throw" === rootRecord.type) throw rootRecord.arg;
      return this.rval;
    },
    dispatchException: function (exception) {
      if (this.done) throw exception;
      var context = this;
      function handle(loc, caught) {
        return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught;
      }
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i],
          record = entry.completion;
        if ("root" === entry.tryLoc) return handle("end");
        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc"),
            hasFinally = hasOwn.call(entry, "finallyLoc");
          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
          } else {
            if (!hasFinally) throw new Error("try statement without catch or finally");
            if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
          }
        }
      }
    },
    abrupt: function (type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }
      finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
      var record = finallyEntry ? finallyEntry.completion : {};
      return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record);
    },
    complete: function (record, afterLoc) {
      if ("throw" === record.type) throw record.arg;
      return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel;
    },
    finish: function (finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel;
      }
    },
    catch: function (tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if ("throw" === record.type) {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }
      throw new Error("illegal catch attempt");
    },
    delegateYield: function (iterable, resultName, nextLoc) {
      return this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      }, "next" === this.method && (this.arg = undefined), ContinueSentinel;
    }
  }, exports;
}
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }
  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}
function _asyncToGenerator(fn) {
  return function () {
    var self = this,
      args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);
      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }
      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }
      _next(undefined);
    });
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}

var RangoClient = /*#__PURE__*/function () {
  function RangoClient(apiKey, apiUrl) {
    this.apiUrl = apiUrl || 'https://api.rango.exchange';
    this.apiKey = apiKey;
    try {
      if (typeof window !== 'undefined') {
        var deviceId = localStorage.getItem('deviceId');
        if (deviceId) {
          this.deviceId = deviceId;
        } else {
          var generatedId = uuid();
          localStorage.setItem('deviceId', generatedId);
          this.deviceId = generatedId;
        }
      } else {
        this.deviceId = uuid();
      }
    } catch (e) {
      this.deviceId = uuid();
    }
    this.httpService = axios.create({
      baseURL: this.apiUrl
    });
  }
  var _proto = RangoClient.prototype;
  _proto.getAllMetadata = /*#__PURE__*/function () {
    var _getAllMetadata = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(metaRequest, options) {
      var _metaRequest$blockcha, _metaRequest$swappers, _metaRequest$swappers2, _metaRequest$transact;
      var params, axiosResponse, reformatTokens, tokens, popularTokens;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            params = _extends({}, metaRequest, {
              blockchains: metaRequest == null || (_metaRequest$blockcha = metaRequest.blockchains) == null ? void 0 : _metaRequest$blockcha.join(),
              swappers: metaRequest == null || (_metaRequest$swappers = metaRequest.swappers) == null ? void 0 : _metaRequest$swappers.join(),
              swappersGroups: metaRequest == null || (_metaRequest$swappers2 = metaRequest.swappersGroups) == null ? void 0 : _metaRequest$swappers2.join(),
              transactionTypes: metaRequest == null || (_metaRequest$transact = metaRequest.transactionTypes) == null ? void 0 : _metaRequest$transact.join()
            });
            _context.next = 3;
            return this.httpService.get("/meta/compact?apiKey=" + this.apiKey, _extends({
              params: params
            }, options));
          case 3:
            axiosResponse = _context.sent;
            reformatTokens = function reformatTokens(tokens) {
              return tokens.map(function (tm) {
                return {
                  blockchain: tm.b,
                  symbol: tm.s,
                  image: tm.i,
                  address: tm.a || null,
                  usdPrice: tm.p || null,
                  isSecondaryCoin: tm.is || false,
                  coinSource: tm.c || null,
                  coinSourceUrl: tm.cu || null,
                  name: tm.n || null,
                  decimals: tm.d,
                  isPopular: tm.ip || false,
                  supportedSwappers: tm.ss || []
                };
              });
            };
            tokens = reformatTokens(axiosResponse.data.tokens);
            popularTokens = reformatTokens(axiosResponse.data.popularTokens);
            return _context.abrupt("return", _extends({}, axiosResponse.data, {
              tokens: tokens,
              popularTokens: popularTokens
            }));
          case 8:
          case "end":
            return _context.stop();
        }
      }, _callee, this);
    }));
    function getAllMetadata(_x, _x2) {
      return _getAllMetadata.apply(this, arguments);
    }
    return getAllMetadata;
  }();
  _proto.getBlockchains = /*#__PURE__*/function () {
    var _getBlockchains = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(options) {
      var axiosResponse;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return this.httpService.get("/meta/blockchains?apiKey=" + this.apiKey, _extends({}, options));
          case 2:
            axiosResponse = _context2.sent;
            return _context2.abrupt("return", axiosResponse.data);
          case 4:
          case "end":
            return _context2.stop();
        }
      }, _callee2, this);
    }));
    function getBlockchains(_x3) {
      return _getBlockchains.apply(this, arguments);
    }
    return getBlockchains;
  }();
  _proto.getSwappers = /*#__PURE__*/function () {
    var _getSwappers = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(options) {
      var axiosResponse;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            _context3.next = 2;
            return this.httpService.get("/meta/swappers?apiKey=" + this.apiKey, _extends({}, options));
          case 2:
            axiosResponse = _context3.sent;
            return _context3.abrupt("return", axiosResponse.data);
          case 4:
          case "end":
            return _context3.stop();
        }
      }, _callee3, this);
    }));
    function getSwappers(_x4) {
      return _getSwappers.apply(this, arguments);
    }
    return getSwappers;
  }();
  _proto.getBestRoute = /*#__PURE__*/function () {
    var _getBestRoute = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(requestBody, options) {
      var axiosResponse;
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            _context4.next = 2;
            return this.httpService.post("/routing/best?apiKey=" + this.apiKey, requestBody, _extends({
              headers: {
                'X-Rango-Id': this.deviceId
              }
            }, options));
          case 2:
            axiosResponse = _context4.sent;
            return _context4.abrupt("return", axiosResponse.data);
          case 4:
          case "end":
            return _context4.stop();
        }
      }, _callee4, this);
    }));
    function getBestRoute(_x5, _x6) {
      return _getBestRoute.apply(this, arguments);
    }
    return getBestRoute;
  }();
  _proto.checkApproval = /*#__PURE__*/function () {
    var _checkApproval = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(requestId, txId, options) {
      var axiosResponse;
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            _context5.next = 2;
            return this.httpService.get("/tx/" + requestId + "/check-approval?apiKey=" + this.apiKey, _extends({
              params: {
                txId: txId
              }
            }, options));
          case 2:
            axiosResponse = _context5.sent;
            return _context5.abrupt("return", axiosResponse.data);
          case 4:
          case "end":
            return _context5.stop();
        }
      }, _callee5, this);
    }));
    function checkApproval(_x7, _x8, _x9) {
      return _checkApproval.apply(this, arguments);
    }
    return checkApproval;
  }();
  _proto.checkStatus = /*#__PURE__*/function () {
    var _checkStatus = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(requestBody, options) {
      var axiosResponse;
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            _context6.next = 2;
            return this.httpService.post("/tx/check-status?apiKey=" + this.apiKey, requestBody, _extends({}, options));
          case 2:
            axiosResponse = _context6.sent;
            return _context6.abrupt("return", axiosResponse.data);
          case 4:
          case "end":
            return _context6.stop();
        }
      }, _callee6, this);
    }));
    function checkStatus(_x10, _x11) {
      return _checkStatus.apply(this, arguments);
    }
    return checkStatus;
  }();
  _proto.createTransaction = /*#__PURE__*/function () {
    var _createTransaction = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(requestBody, options) {
      var axiosResponse;
      return _regeneratorRuntime().wrap(function _callee7$(_context7) {
        while (1) switch (_context7.prev = _context7.next) {
          case 0:
            _context7.next = 2;
            return this.httpService.post("/tx/create?apiKey=" + this.apiKey, requestBody, _extends({}, options));
          case 2:
            axiosResponse = _context7.sent;
            return _context7.abrupt("return", axiosResponse.data);
          case 4:
          case "end":
            return _context7.stop();
        }
      }, _callee7, this);
    }));
    function createTransaction(_x12, _x13) {
      return _createTransaction.apply(this, arguments);
    }
    return createTransaction;
  }();
  _proto.reportFailure = /*#__PURE__*/function () {
    var _reportFailure = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(requestBody, options) {
      return _regeneratorRuntime().wrap(function _callee8$(_context8) {
        while (1) switch (_context8.prev = _context8.next) {
          case 0:
            _context8.next = 2;
            return this.httpService.post("/tx/report-tx?apiKey=" + this.apiKey, requestBody, _extends({}, options));
          case 2:
          case "end":
            return _context8.stop();
        }
      }, _callee8, this);
    }));
    function reportFailure(_x14, _x15) {
      return _reportFailure.apply(this, arguments);
    }
    return reportFailure;
  }();
  _proto.getWalletsDetails = /*#__PURE__*/function () {
    var _getWalletsDetails = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(walletAddresses, options) {
      var walletAddressesQueryParams, i, walletAddress, axiosResponse;
      return _regeneratorRuntime().wrap(function _callee9$(_context9) {
        while (1) switch (_context9.prev = _context9.next) {
          case 0:
            walletAddressesQueryParams = '';
            for (i = 0; i < walletAddresses.length; i++) {
              walletAddress = walletAddresses[i];
              walletAddressesQueryParams += "&address=" + walletAddress.blockchain + "." + walletAddress.address;
            }
            _context9.next = 4;
            return this.httpService.get("/wallets/details?apiKey=" + this.apiKey + walletAddressesQueryParams, _extends({}, options));
          case 4:
            axiosResponse = _context9.sent;
            return _context9.abrupt("return", axiosResponse.data);
          case 6:
          case "end":
            return _context9.stop();
        }
      }, _callee9, this);
    }));
    function getWalletsDetails(_x16, _x17) {
      return _getWalletsDetails.apply(this, arguments);
    }
    return getWalletsDetails;
  }();
  return RangoClient;
}();

var isEvmBlockchain = function isEvmBlockchain(blockchainMeta) {
  return blockchainMeta.type === 'EVM';
};
var isCosmosBlockchain = function isCosmosBlockchain(blockchainMeta) {
  return blockchainMeta.type === 'COSMOS';
};
var isSolanaBlockchain = function isSolanaBlockchain(blockchainMeta) {
  return blockchainMeta.type === 'SOLANA';
};
var isTronBlockchain = function isTronBlockchain(blockchainMeta) {
  return blockchainMeta.type === 'TRON';
};
var isTransferBlockchain = function isTransferBlockchain(blockchainMeta) {
  return blockchainMeta.type === 'TRANSFER';
};
var isStarknetBlockchain = function isStarknetBlockchain(blockchainMeta) {
  return blockchainMeta.type === 'STARKNET';
};
var isTonBlockchain = function isTonBlockchain(blockchainMeta) {
  return blockchainMeta.type === 'TON';
};
var evmBlockchains = function evmBlockchains(blockchains) {
  return blockchains.filter(isEvmBlockchain);
};
var solanaBlockchain = function solanaBlockchain(blockchains) {
  return blockchains.filter(isSolanaBlockchain);
};
var starknetBlockchain = function starknetBlockchain(blockchains) {
  return blockchains.filter(isStarknetBlockchain);
};
var tronBlockchain = function tronBlockchain(blockchains) {
  return blockchains.filter(isTronBlockchain);
};
var cosmosBlockchains = function cosmosBlockchains(blockchains) {
  return blockchains.filter(isCosmosBlockchain);
};
var transferBlockchains = function transferBlockchains(blockchains) {
  return blockchains.filter(isTransferBlockchain);
};
var tonBlockchain = function tonBlockchain(blockchains) {
  return blockchains.filter(isTonBlockchain);
};

/**
 * Routing Result Type
 *
 */
(function (RoutingResultType) {
  RoutingResultType["OK"] = "OK";
  RoutingResultType["HIGH_IMPACT"] = "HIGH_IMPACT";
  RoutingResultType["NO_ROUTE"] = "NO_ROUTE";
  RoutingResultType["INPUT_LIMIT_ISSUE"] = "INPUT_LIMIT_ISSUE";
})(exports.RoutingResultType || (exports.RoutingResultType = {}));

/**
 * The type of transaction
 */
(function (TransactionType) {
  TransactionType["EVM"] = "EVM";
  TransactionType["TRANSFER"] = "TRANSFER";
  TransactionType["COSMOS"] = "COSMOS";
  TransactionType["SOLANA"] = "SOLANA";
  TransactionType["TRON"] = "TRON";
  TransactionType["STARKNET"] = "STARKNET";
  TransactionType["TON"] = "TON";
})(exports.TransactionType || (exports.TransactionType = {}));
(function (GenericTransactionType) {
  GenericTransactionType["EVM"] = "EVM";
  GenericTransactionType["TRANSFER"] = "TRANSFER";
  GenericTransactionType["COSMOS"] = "COSMOS";
  GenericTransactionType["SOLANA"] = "SOLANA";
})(exports.GenericTransactionType || (exports.GenericTransactionType = {}));
(function (TransactionStatus) {
  TransactionStatus["FAILED"] = "failed";
  TransactionStatus["RUNNING"] = "running";
  TransactionStatus["SUCCESS"] = "success";
})(exports.TransactionStatus || (exports.TransactionStatus = {}));

var isCosmosTransaction = function isCosmosTransaction(transaction) {
  return transaction.type === exports.TransactionType.COSMOS;
};

var isSolanaTransaction = function isSolanaTransaction(transaction) {
  return transaction.type === exports.TransactionType.SOLANA;
};

var isTransferTransaction = function isTransferTransaction(transaction) {
  return transaction.type === exports.TransactionType.TRANSFER;
};

var isStarknetTransaction = function isStarknetTransaction(transaction) {
  return transaction.type === exports.TransactionType.STARKNET;
};

var isTronTransaction = function isTronTransaction(transaction) {
  return transaction.type === exports.TransactionType.TRON;
};

(function (TonChainID) {
  TonChainID["MAINNET"] = "-239";
  TonChainID["TESTNET"] = "-3";
})(exports.TonChainID || (exports.TonChainID = {}));
var isTonTransaction = function isTonTransaction(transaction) {
  return transaction.type === exports.TransactionType.TON;
};

var isEvmTransaction = function isEvmTransaction(transaction) {
  return transaction.type === exports.TransactionType.EVM;
};

exports.RangoClient = RangoClient;
exports.cosmosBlockchains = cosmosBlockchains;
exports.evmBlockchains = evmBlockchains;
exports.isCosmosBlockchain = isCosmosBlockchain;
exports.isCosmosTransaction = isCosmosTransaction;
exports.isEvmBlockchain = isEvmBlockchain;
exports.isEvmTransaction = isEvmTransaction;
exports.isSolanaBlockchain = isSolanaBlockchain;
exports.isSolanaTransaction = isSolanaTransaction;
exports.isStarknetBlockchain = isStarknetBlockchain;
exports.isStarknetTransaction = isStarknetTransaction;
exports.isTonBlockchain = isTonBlockchain;
exports.isTonTransaction = isTonTransaction;
exports.isTransferBlockchain = isTransferBlockchain;
exports.isTransferTransaction = isTransferTransaction;
exports.isTronBlockchain = isTronBlockchain;
exports.isTronTransaction = isTronTransaction;
exports.solanaBlockchain = solanaBlockchain;
exports.starknetBlockchain = starknetBlockchain;
exports.tonBlockchain = tonBlockchain;
exports.transferBlockchains = transferBlockchains;
exports.tronBlockchain = tronBlockchain;
//# sourceMappingURL=rango-sdk.cjs.development.js.map
