"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractMethod_1 = require("../core/AbstractMethod");
const paramsValidator_1 = require("./common/paramsValidator");
const coinInfo_1 = require("../data/coinInfo");
const pathUtils_1 = require("../utils/pathUtils");
const cardanoAddressParameters_1 = require("./cardano/cardanoAddressParameters");
const constants_1 = require("../constants");
const events_1 = require("../events");
class CardanoGetAddress extends AbstractMethod_1.AbstractMethod {
    constructor() {
        super(...arguments);
        this.progress = 0;
    }
    init() {
        this.requiredPermissions = ['read'];
        this.firmwareRange = (0, paramsValidator_1.getFirmwareRange)(this.name, (0, coinInfo_1.getMiscNetwork)('Cardano'), this.firmwareRange);
        this.hasBundle = !!this.payload.bundle;
        const payload = !this.payload.bundle
            ? { ...this.payload, bundle: [this.payload] }
            : this.payload;
        (0, paramsValidator_1.validateParams)(payload, [
            { name: 'bundle', type: 'array' },
            { name: 'useEventListener', type: 'boolean' },
        ]);
        this.params = payload.bundle.map(batch => {
            (0, paramsValidator_1.validateParams)(batch, [
                { name: 'addressParameters', type: 'object', required: true },
                { name: 'networkId', type: 'number', required: true },
                { name: 'protocolMagic', type: 'number', required: true },
                { name: 'derivationType', type: 'number' },
                { name: 'address', type: 'string' },
                { name: 'showOnTrezor', type: 'boolean' },
            ]);
            (0, cardanoAddressParameters_1.validateAddressParameters)(batch.addressParameters);
            return {
                address_parameters: (0, cardanoAddressParameters_1.addressParametersToProto)(batch.addressParameters),
                address: batch.address,
                protocol_magic: batch.protocolMagic,
                network_id: batch.networkId,
                derivation_type: typeof batch.derivationType !== 'undefined'
                    ? batch.derivationType
                    : constants_1.PROTO.CardanoDerivationType.ICARUS_TREZOR,
                show_display: typeof batch.showOnTrezor === 'boolean' ? batch.showOnTrezor : true,
            };
        });
        const useEventListener = payload.useEventListener &&
            this.params.length === 1 &&
            typeof this.params[0].address === 'string' &&
            this.params[0].show_display;
        this.confirmed = useEventListener;
        this.useUi = !useEventListener;
        if (this.params.length === 1) {
            this.info = `Export Cardano address for account #${(0, pathUtils_1.fromHardened)(this.params[0].address_parameters.address_n[2]) + 1}`;
        }
        else {
            this.info = 'Export multiple Cardano addresses';
        }
    }
    getButtonRequestData(code) {
        if (code === 'ButtonRequest_Address') {
            return {
                type: 'address',
                serializedPath: (0, pathUtils_1.getSerializedPath)(this.params[this.progress].address_parameters.address_n),
                address: this.params[this.progress].address || 'not-set',
            };
        }
    }
    async confirmation() {
        if (this.confirmed)
            return true;
        await this.getPopupPromise().promise;
        const uiPromise = this.createUiPromise(events_1.UI.RECEIVE_CONFIRMATION);
        this.postMessage((0, events_1.createUiMessage)(events_1.UI.REQUEST_CONFIRMATION, {
            view: 'export-address',
            label: this.info,
        }));
        const uiResp = await uiPromise.promise;
        this.confirmed = uiResp.payload;
        return this.confirmed;
    }
    async noBackupConfirmation() {
        await this.getPopupPromise().promise;
        const uiPromise = this.createUiPromise(events_1.UI.RECEIVE_CONFIRMATION);
        this.postMessage((0, events_1.createUiMessage)(events_1.UI.REQUEST_CONFIRMATION, {
            view: 'no-backup',
        }));
        const uiResp = await uiPromise.promise;
        return uiResp.payload;
    }
    async _call({ address_parameters, protocol_magic, network_id, derivation_type, show_display, }) {
        const cmd = this.device.getCommands();
        const response = await cmd.typedCall('CardanoGetAddress', 'CardanoAddress', {
            address_parameters,
            protocol_magic,
            network_id,
            derivation_type,
            show_display,
        });
        return response.message;
    }
    _ensureFirmwareSupportsBatch(batch) {
        const SCRIPT_ADDRESSES_TYPES = [
            constants_1.PROTO.CardanoAddressType.BASE_SCRIPT_KEY,
            constants_1.PROTO.CardanoAddressType.BASE_KEY_SCRIPT,
            constants_1.PROTO.CardanoAddressType.BASE_SCRIPT_SCRIPT,
            constants_1.PROTO.CardanoAddressType.POINTER_SCRIPT,
            constants_1.PROTO.CardanoAddressType.ENTERPRISE_SCRIPT,
            constants_1.PROTO.CardanoAddressType.REWARD_SCRIPT,
        ];
        if (SCRIPT_ADDRESSES_TYPES.includes(batch.address_parameters.address_type)) {
            if (!this.device.atLeast(['0', '2.4.3'])) {
                throw constants_1.ERRORS.TypedError('Method_InvalidParameter', `Address type not supported by device firmware`);
            }
        }
    }
    async run() {
        const responses = [];
        for (let i = 0; i < this.params.length; i++) {
            const batch = this.params[i];
            this._ensureFirmwareSupportsBatch(batch);
            batch.address_parameters = (0, cardanoAddressParameters_1.modifyAddressParametersForBackwardsCompatibility)(this.device, batch.address_parameters);
            if (batch.show_display) {
                const silent = await this._call({
                    ...batch,
                    show_display: false,
                });
                if (typeof batch.address === 'string') {
                    if (batch.address !== silent.address) {
                        throw constants_1.ERRORS.TypedError('Method_AddressNotMatch');
                    }
                }
                else {
                    batch.address = silent.address;
                }
            }
            const response = await this._call(batch);
            responses.push({
                addressParameters: (0, cardanoAddressParameters_1.addressParametersFromProto)(batch.address_parameters),
                protocolMagic: batch.protocol_magic,
                networkId: batch.network_id,
                serializedPath: (0, pathUtils_1.getSerializedPath)(batch.address_parameters.address_n),
                serializedStakingPath: (0, pathUtils_1.getSerializedPath)(batch.address_parameters.address_n_staking),
                address: response.address,
            });
            if (this.hasBundle) {
                this.postMessage((0, events_1.createUiMessage)(events_1.UI.BUNDLE_PROGRESS, {
                    progress: i,
                    response,
                }));
            }
            this.progress++;
        }
        return this.hasBundle ? responses : responses[0];
    }
}
exports.default = CardanoGetAddress;
//# sourceMappingURL=cardanoGetAddress.js.map