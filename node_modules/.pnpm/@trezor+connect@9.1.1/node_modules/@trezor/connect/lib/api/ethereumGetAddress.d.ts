import { AbstractMethod } from '../core/AbstractMethod';
import { PROTO } from '../constants';
import type { EthereumNetworkInfo } from '../types';
type Params = PROTO.EthereumGetAddress & {
    address?: string;
    network?: EthereumNetworkInfo;
    encoded_network?: ArrayBuffer;
};
export default class EthereumGetAddress extends AbstractMethod<'ethereumGetAddress', Params[]> {
    hasBundle?: boolean;
    progress: number;
    confirmed?: boolean;
    init(): void;
    getButtonRequestData(code: string): {
        type: "address";
        serializedPath: string;
        address: string;
    } | undefined;
    confirmation(): Promise<boolean>;
    noBackupConfirmation(): Promise<boolean>;
    _call({ address_n, show_display, encoded_network }: Params): Promise<{
        path: number[];
        serializedPath: string;
        address: string;
    }>;
    run(): Promise<import("../types").Address | import("../types").Address[]>;
}
export {};
//# sourceMappingURL=ethereumGetAddress.d.ts.map