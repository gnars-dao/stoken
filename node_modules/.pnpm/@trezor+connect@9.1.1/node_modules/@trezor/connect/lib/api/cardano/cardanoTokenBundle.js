"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.tokenBundleToProto = void 0;
const paramsValidator_1 = require("../common/paramsValidator");
const validateTokens = (tokenAmounts) => {
    tokenAmounts.forEach(tokenAmount => {
        (0, paramsValidator_1.validateParams)(tokenAmount, [
            { name: 'assetNameBytes', type: 'string', required: true },
            { name: 'amount', type: 'uint' },
            { name: 'mintAmount', type: 'uint', allowNegative: true },
        ]);
    });
};
const validateTokenBundle = (tokenBundle) => {
    tokenBundle.forEach(tokenGroup => {
        (0, paramsValidator_1.validateParams)(tokenGroup, [
            { name: 'policyId', type: 'string', required: true },
            { name: 'tokenAmounts', type: 'array', required: true },
        ]);
        validateTokens(tokenGroup.tokenAmounts);
    });
};
const tokenAmountsToProto = (tokenAmounts) => tokenAmounts.map(tokenAmount => ({
    asset_name_bytes: tokenAmount.assetNameBytes,
    amount: tokenAmount.amount,
    mint_amount: tokenAmount.mintAmount,
}));
const tokenBundleToProto = (tokenBundle) => {
    validateTokenBundle(tokenBundle);
    return tokenBundle.map(tokenGroup => ({
        policyId: tokenGroup.policyId,
        tokens: tokenAmountsToProto(tokenGroup.tokenAmounts),
    }));
};
exports.tokenBundleToProto = tokenBundleToProto;
//# sourceMappingURL=cardanoTokenBundle.js.map