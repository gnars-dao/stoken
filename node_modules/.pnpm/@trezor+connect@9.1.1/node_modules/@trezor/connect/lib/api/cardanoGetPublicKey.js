"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const AbstractMethod_1 = require("../core/AbstractMethod");
const paramsValidator_1 = require("./common/paramsValidator");
const coinInfo_1 = require("../data/coinInfo");
const pathUtils_1 = require("../utils/pathUtils");
const events_1 = require("../events");
class CardanoGetPublicKey extends AbstractMethod_1.AbstractMethod {
    init() {
        this.requiredPermissions = ['read'];
        this.firmwareRange = (0, paramsValidator_1.getFirmwareRange)(this.name, (0, coinInfo_1.getMiscNetwork)('Cardano'), this.firmwareRange);
        this.info = 'Export Cardano public key';
        this.hasBundle = !!this.payload.bundle;
        const payload = !this.payload.bundle
            ? { ...this.payload, bundle: [this.payload] }
            : this.payload;
        (0, paramsValidator_1.validateParams)(payload, [{ name: 'bundle', type: 'array' }]);
        this.params = payload.bundle.map(batch => {
            (0, paramsValidator_1.validateParams)(batch, [
                { name: 'path', required: true },
                { name: 'derivationType', type: 'number' },
                { name: 'showOnTrezor', type: 'boolean' },
            ]);
            const path = (0, pathUtils_1.validatePath)(batch.path, 3);
            return {
                address_n: path,
                derivation_type: typeof batch.derivationType !== 'undefined'
                    ? batch.derivationType
                    : constants_1.PROTO.CardanoDerivationType.ICARUS_TREZOR,
                show_display: typeof batch.showOnTrezor === 'boolean' ? batch.showOnTrezor : false,
            };
        });
    }
    async confirmation() {
        if (this.confirmed)
            return true;
        await this.getPopupPromise().promise;
        const uiPromise = this.createUiPromise(events_1.UI.RECEIVE_CONFIRMATION);
        let label;
        if (this.params.length > 1) {
            label = 'Export multiple Cardano public keys';
        }
        else {
            label = `Export Cardano public key for account #${(0, pathUtils_1.fromHardened)(this.params[0].address_n[2]) + 1}`;
        }
        this.postMessage((0, events_1.createUiMessage)(events_1.UI.REQUEST_CONFIRMATION, {
            view: 'export-xpub',
            label,
        }));
        const uiResp = await uiPromise.promise;
        this.confirmed = uiResp.payload;
        return this.confirmed;
    }
    async noBackupConfirmation() {
        await this.getPopupPromise().promise;
        const uiPromise = this.createUiPromise(events_1.UI.RECEIVE_CONFIRMATION);
        this.postMessage((0, events_1.createUiMessage)(events_1.UI.REQUEST_CONFIRMATION, {
            view: 'get-public-key-no-backup',
        }));
        const uiResp = await uiPromise.promise;
        return uiResp.payload;
    }
    async run() {
        const responses = [];
        const cmd = this.device.getCommands();
        for (let i = 0; i < this.params.length; i++) {
            const batch = this.params[i];
            const { message } = await cmd.typedCall('CardanoGetPublicKey', 'CardanoPublicKey', batch);
            responses.push({
                path: batch.address_n,
                serializedPath: (0, pathUtils_1.getSerializedPath)(batch.address_n),
                publicKey: message.xpub,
                node: message.node,
            });
            if (this.hasBundle) {
                this.postMessage((0, events_1.createUiMessage)(events_1.UI.BUNDLE_PROGRESS, {
                    progress: i,
                    response: message,
                }));
            }
        }
        return this.hasBundle ? responses : responses[0];
    }
}
exports.default = CardanoGetPublicKey;
//# sourceMappingURL=cardanoGetPublicKey.js.map