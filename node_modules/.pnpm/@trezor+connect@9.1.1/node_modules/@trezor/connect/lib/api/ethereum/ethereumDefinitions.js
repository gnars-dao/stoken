"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getEthereumDefinitions = void 0;
const tslib_1 = require("tslib");
const cross_fetch_1 = tslib_1.__importDefault(require("cross-fetch"));
const getEthereumDefinitions = async ({ chainId, slip44, contractAddress, }) => {
    const definitions = {};
    if (!chainId && !slip44) {
        throw new Error('argument chainId or slip44 is required');
    }
    try {
        const networkDefinitionUrl = `https://data.trezor.io/firmware/eth-definitions/${chainId ? 'chain-id' : 'slip44'}/${chainId !== null && chainId !== void 0 ? chainId : slip44}/network.dat`;
        const networkDefinition = await (0, cross_fetch_1.default)(networkDefinitionUrl);
        if (networkDefinition.status === 200) {
            definitions.encoded_network = await networkDefinition.arrayBuffer();
        }
        else if (networkDefinition.status !== 404) {
            throw new Error(`unexpected status: $${networkDefinition.status}`);
        }
    }
    catch (err) {
        console.warn(`unable to download or parse ${chainId} definition. detail: ${err.message}`);
    }
    try {
        if (contractAddress) {
            const lowerCaseContractAddress = contractAddress.toLowerCase();
            const tokenDefinitionUrl = `https://data.trezor.io/firmware/eth-definitions/${chainId ? 'chain-id' : 'slip44'}/${chainId !== null && chainId !== void 0 ? chainId : slip44}/token-${lowerCaseContractAddress}.dat`;
            const tokenDefinition = await (0, cross_fetch_1.default)(tokenDefinitionUrl);
            if (tokenDefinition.status === 200) {
                definitions.encoded_token = await tokenDefinition.arrayBuffer();
            }
            else if (tokenDefinition.status !== 404) {
                throw new Error(`unexpected status: $${tokenDefinition.status}`);
            }
        }
    }
    catch (err) {
        console.warn(`unable to download or parse ${chainId}/${contractAddress} definition. detail: ${err.message}`);
    }
    return definitions;
};
exports.getEthereumDefinitions = getEthereumDefinitions;
//# sourceMappingURL=ethereumDefinitions.js.map