"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../constants");
const AbstractMethod_1 = require("../core/AbstractMethod");
const paramsValidator_1 = require("./common/paramsValidator");
const coinInfo_1 = require("../data/coinInfo");
const pathUtils_1 = require("../utils/pathUtils");
class CardanoGetNativeScriptHash extends AbstractMethod_1.AbstractMethod {
    init() {
        this.requiredPermissions = ['read'];
        this.firmwareRange = (0, paramsValidator_1.getFirmwareRange)(this.name, (0, coinInfo_1.getMiscNetwork)('Cardano'), this.firmwareRange);
        this.info = 'Get Cardano native script hash';
        const { payload } = this;
        (0, paramsValidator_1.validateParams)(payload, [
            { name: 'script', type: 'object', required: true },
            { name: 'displayFormat', type: 'number', required: true },
            { name: 'derivationType', type: 'number' },
        ]);
        this.validateScript(payload.script);
        this.params = {
            script: this.scriptToProto(payload.script),
            display_format: payload.displayFormat,
            derivation_type: typeof payload.derivationType !== 'undefined'
                ? payload.derivationType
                : constants_1.PROTO.CardanoDerivationType.ICARUS_TREZOR,
        };
    }
    validateScript(script) {
        (0, paramsValidator_1.validateParams)(script, [
            { name: 'type', type: 'number', required: true },
            { name: 'scripts', type: 'array', allowEmpty: true },
            { name: 'keyHash', type: 'string' },
            { name: 'requiredSignaturesCount', type: 'number' },
            { name: 'invalidBefore', type: 'uint' },
            { name: 'invalidHereafter', type: 'uint' },
        ]);
        if (script.keyPath) {
            (0, pathUtils_1.validatePath)(script.keyPath, 3);
        }
        if (script.scripts) {
            script.scripts.forEach(nestedScript => {
                this.validateScript(nestedScript);
            });
        }
    }
    scriptToProto(script) {
        let scripts = [];
        if (script.scripts) {
            scripts = script.scripts.map(nestedScript => this.scriptToProto(nestedScript));
        }
        let keyPath = [];
        if (script.keyPath) {
            keyPath = (0, pathUtils_1.validatePath)(script.keyPath, 3);
        }
        return {
            type: script.type,
            scripts,
            key_hash: script.keyHash,
            key_path: keyPath,
            required_signatures_count: script.requiredSignaturesCount,
            invalid_before: script.invalidBefore,
            invalid_hereafter: script.invalidHereafter,
        };
    }
    async run() {
        const { message } = await this.device
            .getCommands()
            .typedCall('CardanoGetNativeScriptHash', 'CardanoNativeScriptHash', {
            script: this.params.script,
            display_format: this.params.display_format,
            derivation_type: this.params.derivation_type,
        });
        return {
            scriptHash: message.script_hash,
        };
    }
}
exports.default = CardanoGetNativeScriptHash;
//# sourceMappingURL=cardanoGetNativeScriptHash.js.map