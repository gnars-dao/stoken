"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeeLevels = void 0;
const tslib_1 = require("tslib");
const bignumber_js_1 = tslib_1.__importDefault(require("bignumber.js"));
const BLOCKS = {
    btc: {
        high: 1,
        normal: 6,
        economy: 36,
        low: 144,
    },
    bch: {
        high: 1,
        normal: 5,
        economy: 10,
        low: 10,
    },
    btg: {
        high: 1,
        normal: 5,
        economy: 10,
        low: 10,
    },
    dgb: {
        high: 1,
        normal: 15,
        economy: 30,
        low: 60,
    },
};
const getDefaultBlocks = (shortcut, label) => BLOCKS[shortcut] && BLOCKS[shortcut][label] ? BLOCKS[shortcut][label] : -1;
const feePerKB = (fee) => {
    const bn = new bignumber_js_1.default(fee);
    if (bn.isNaN() || bn.lte('0'))
        return;
    return bn.div(1000).integerValue(bignumber_js_1.default.ROUND_HALF_CEIL).toString();
};
const fillGap = (from, step, size) => {
    const fill = [];
    for (let i = from + step; i <= from + size; i += step) {
        fill.push(i);
    }
    return fill;
};
const findLowest = (blocks) => {
    const unique = [];
    blocks.forEach(item => {
        if (typeof item === 'string' && unique.indexOf(item) < 0) {
            unique.push(item);
        }
    });
    return unique[unique.length - 1];
};
const findNearest = (requested, blocks) => {
    const len = blocks.length;
    const knownValue = blocks[requested];
    if (typeof knownValue === 'string')
        return knownValue;
    const lastKnownValue = blocks
        .slice()
        .reverse()
        .find(item => typeof item === 'string');
    if (!lastKnownValue)
        return;
    const lastKnownIndex = blocks.indexOf(lastKnownValue);
    if (requested >= lastKnownIndex) {
        return lastKnownValue;
    }
    let index = requested;
    while (typeof blocks[index] !== 'string' && index < len) {
        index++;
    }
    return blocks[index];
};
const findBlocksForFee = (feePerUnit, blocks) => {
    const bn = new bignumber_js_1.default(feePerUnit);
    const lower = blocks.find(b => typeof b === 'string' && bn.gte(b));
    if (!lower)
        return -1;
    return blocks.indexOf(lower);
};
class FeeLevels {
    constructor(coinInfo) {
        this.blocks = [];
        this.coinInfo = coinInfo;
        const shortcut = coinInfo.shortcut.toLowerCase();
        if (coinInfo.type === 'ethereum') {
            this.levels = coinInfo.defaultFees.map(level => ({
                ...level,
                blocks: -1,
            }));
            return;
        }
        const keys = Object.keys(coinInfo.defaultFees);
        this.levels = keys
            .sort((levelA, levelB) => coinInfo.defaultFees[levelB] - coinInfo.defaultFees[levelA])
            .map(level => {
            const label = level.toLowerCase();
            const blocks = getDefaultBlocks(shortcut, label);
            return {
                label,
                feePerUnit: coinInfo.defaultFees[level].toString(),
                blocks,
            };
        });
    }
    async loadMisc(blockchain) {
        try {
            const [response] = await blockchain.estimateFee({ blocks: [1] });
            this.levels[0] = {
                ...this.levels[0],
                ...response,
                feePerUnit: Math.min(this.coinInfo.maxFee, Math.max(this.coinInfo.minFee, parseInt(response.feePerUnit, 10))).toString(),
            };
        }
        catch (error) {
        }
        return this.levels;
    }
    async load(blockchain) {
        if (this.coinInfo.type !== 'bitcoin')
            return this.loadMisc(blockchain);
        let blocks = fillGap(0, 1, 10);
        if (this.levels.length > 1) {
            blocks = this.levels
                .map(l => l.blocks)
                .reduce((result, bl) => {
                if (result.length === 0)
                    return result.concat([bl]);
                const from = result[result.length - 1];
                const gap = bl - from;
                const incr = gap <= 30 ? 1 : 6;
                const fill = fillGap(from, incr, gap);
                return result.concat(fill);
            }, []);
        }
        try {
            const response = await blockchain.estimateFee({ blocks });
            response.forEach((r, i) => {
                this.blocks[blocks[i]] = feePerKB(r.feePerUnit);
            });
            if (this.levels.length === 1) {
                const lowest = findLowest(this.blocks);
                if (typeof lowest === 'string') {
                    this.levels[0].blocks = this.blocks.indexOf(lowest);
                    this.levels[0].feePerUnit = lowest;
                }
            }
            else {
                this.levels.forEach(l => {
                    const updatedValue = findNearest(l.blocks, this.blocks);
                    if (typeof updatedValue === 'string') {
                        l.blocks = this.blocks.indexOf(updatedValue);
                        l.feePerUnit = updatedValue;
                    }
                });
            }
        }
        catch (error) {
        }
        return this.levels;
    }
    updateCustomFee(feePerUnit) {
        this.levels = this.levels.filter(l => l.label !== 'custom');
        const blocks = findBlocksForFee(feePerUnit, this.blocks);
        this.levels.push({
            label: 'custom',
            feePerUnit,
            blocks,
        });
    }
}
exports.FeeLevels = FeeLevels;
//# sourceMappingURL=Fees.js.map