import { ComposeInput, ComposeOutput, ComposeResult } from '@trezor/utxo-lib';
import { FeeLevels } from './Fees';
import { Blockchain } from '../../backend/BlockchainLink';
import type { BitcoinNetworkInfo } from '../../types';
import type { DiscoveryAccount, SelectFeeLevel } from '../../types/account';
import type { PrecomposeParams } from '../../types/api/composeTransaction';
type Options = {
    account: DiscoveryAccount;
    utxo: PrecomposeParams['account']['utxo'];
    outputs: ComposeOutput[];
    coinInfo: BitcoinNetworkInfo;
    baseFee?: number;
    skipPermutation?: boolean;
};
export declare class TransactionComposer {
    account: DiscoveryAccount;
    utxos: ComposeInput[];
    outputs: ComposeOutput[];
    coinInfo: BitcoinNetworkInfo;
    blockHeight: number;
    baseFee: number;
    skipPermutation: boolean;
    feeLevels: FeeLevels;
    composed: {
        [key: string]: ComposeResult;
    };
    constructor(options: Options);
    init(blockchain: Blockchain): Promise<void>;
    composeAllFeeLevels(): boolean;
    composeCustomFee(fee: string): void;
    getFeeLevelList(): SelectFeeLevel[];
    compose(feeRate: string): ComposeResult;
    dispose(): void;
}
export {};
//# sourceMappingURL=TransactionComposer.d.ts.map