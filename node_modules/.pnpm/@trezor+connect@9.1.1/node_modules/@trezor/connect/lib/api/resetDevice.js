"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractMethod_1 = require("../core/AbstractMethod");
const events_1 = require("../events");
const paramsValidator_1 = require("./common/paramsValidator");
class ResetDevice extends AbstractMethod_1.AbstractMethod {
    init() {
        this.allowDeviceMode = [events_1.UI.INITIALIZE, events_1.UI.SEEDLESS];
        this.useDeviceState = false;
        this.requiredPermissions = ['management'];
        this.firmwareRange = (0, paramsValidator_1.getFirmwareRange)(this.name, null, this.firmwareRange);
        this.info = 'Setup device';
        const { payload } = this;
        (0, paramsValidator_1.validateParams)(payload, [
            { name: 'display_random', type: 'boolean' },
            { name: 'strength', type: 'number' },
            { name: 'passphrase_protection', type: 'boolean' },
            { name: 'pin_protection', type: 'boolean' },
            { name: 'language', type: 'string' },
            { name: 'label', type: 'string' },
            { name: 'u2f_counter', type: 'number' },
            { name: 'skip_backup', type: 'boolean' },
            { name: 'no_backup', type: 'boolean' },
            { name: 'backup_type', type: 'number' },
        ]);
        this.params = {
            display_random: payload.display_random,
            strength: payload.strength || 256,
            passphrase_protection: payload.passphrase_protection,
            pin_protection: payload.pin_protection,
            language: payload.language,
            label: payload.label,
            u2f_counter: payload.u2f_counter || Math.floor(Date.now() / 1000),
            skip_backup: payload.skip_backup,
            no_backup: payload.no_backup,
            backup_type: payload.backup_type,
        };
    }
    async confirmation() {
        if (this.confirmed)
            return true;
        await this.getPopupPromise().promise;
        const uiPromise = this.createUiPromise(events_1.UI.RECEIVE_CONFIRMATION);
        this.postMessage((0, events_1.createUiMessage)(events_1.UI.REQUEST_CONFIRMATION, {
            view: 'device-management',
            label: 'Do you really you want to create a new wallet?',
        }));
        const uiResp = await uiPromise.promise;
        this.confirmed = uiResp.payload;
        return this.confirmed;
    }
    async run() {
        const cmd = this.device.getCommands();
        const response = await cmd.typedCall('ResetDevice', 'Success', this.params);
        return response.message;
    }
}
exports.default = ResetDevice;
//# sourceMappingURL=resetDevice.js.map