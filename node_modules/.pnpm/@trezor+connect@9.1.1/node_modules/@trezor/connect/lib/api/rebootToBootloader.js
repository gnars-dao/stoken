"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractMethod_1 = require("../core/AbstractMethod");
const paramsValidator_1 = require("./common/paramsValidator");
const events_1 = require("../events");
class RebootToBootloader extends AbstractMethod_1.AbstractMethod {
    init() {
        this.allowDeviceMode = [events_1.UI.INITIALIZE, events_1.UI.SEEDLESS];
        this.skipFinalReload = true;
        this.keepSession = false;
        this.requiredPermissions = ['management'];
        this.info = 'Reboot to bootloader';
        this.useDeviceState = false;
        this.firmwareRange = (0, paramsValidator_1.getFirmwareRange)(this.name, null, {
            1: { min: '1.10.0', max: '0' },
            2: { min: '2.6.0', max: '0' },
        });
    }
    async confirmation() {
        if (this.confirmed)
            return true;
        await this.getPopupPromise().promise;
        const uiPromise = this.createUiPromise(events_1.UI.RECEIVE_CONFIRMATION);
        this.postMessage((0, events_1.createUiMessage)(events_1.UI.REQUEST_CONFIRMATION, {
            view: 'device-management',
            customConfirmButton: {
                className: 'confirm',
                label: `Reboot`,
            },
            label: 'Are you sure you want to reboot to bootloader?',
        }));
        const uiResp = await uiPromise.promise;
        this.confirmed = uiResp.payload;
        return this.confirmed;
    }
    async run() {
        const cmd = this.device.getCommands();
        const response = await cmd.typedCall('RebootToBootloader', 'Success');
        return response.message;
    }
}
exports.default = RebootToBootloader;
//# sourceMappingURL=rebootToBootloader.js.map