"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractMethod_1 = require("../core/AbstractMethod");
const paramsValidator_1 = require("./common/paramsValidator");
const pathUtils_1 = require("../utils/pathUtils");
const ethereumUtils_1 = require("../utils/ethereumUtils");
const coinInfo_1 = require("../data/coinInfo");
const formatUtils_1 = require("../utils/formatUtils");
const constants_1 = require("../constants");
const events_1 = require("../events");
const ethereumDefinitions_1 = require("./ethereum/ethereumDefinitions");
class EthereumGetAddress extends AbstractMethod_1.AbstractMethod {
    constructor() {
        super(...arguments);
        this.progress = 0;
    }
    init() {
        this.requiredPermissions = ['read'];
        this.hasBundle = !!this.payload.bundle;
        const payload = !this.payload.bundle
            ? { ...this.payload, bundle: [this.payload] }
            : this.payload;
        (0, paramsValidator_1.validateParams)(payload, [
            { name: 'bundle', type: 'array' },
            { name: 'useEventListener', type: 'boolean' },
        ]);
        this.params = payload.bundle.map(batch => {
            (0, paramsValidator_1.validateParams)(batch, [
                { name: 'path', required: true },
                { name: 'address', type: 'string' },
                { name: 'showOnTrezor', type: 'boolean' },
            ]);
            const path = (0, pathUtils_1.validatePath)(batch.path, 3);
            const network = (0, coinInfo_1.getEthereumNetwork)(path);
            this.firmwareRange = (0, paramsValidator_1.getFirmwareRange)(this.name, network, this.firmwareRange);
            return {
                address_n: path,
                show_display: typeof batch.showOnTrezor === 'boolean' ? batch.showOnTrezor : true,
                address: batch.address,
                network,
            };
        });
        if (this.params.length === 1) {
            this.info = (0, ethereumUtils_1.getNetworkLabel)('Export #NETWORK address', this.params[0].network);
        }
        else {
            const requestedNetworks = this.params.map(b => b.network);
            const uniqNetworks = (0, coinInfo_1.getUniqueNetworks)(requestedNetworks);
            if (uniqNetworks.length === 1 && uniqNetworks[0]) {
                this.info = (0, ethereumUtils_1.getNetworkLabel)('Export multiple #NETWORK addresses', uniqNetworks[0]);
            }
            else {
                this.info = 'Export multiple addresses';
            }
        }
        const useEventListener = payload.useEventListener &&
            this.params.length === 1 &&
            typeof this.params[0].address === 'string' &&
            this.params[0].show_display;
        this.confirmed = useEventListener;
        this.useUi = !useEventListener;
    }
    getButtonRequestData(code) {
        if (code === 'ButtonRequest_Address') {
            return {
                type: 'address',
                serializedPath: (0, pathUtils_1.getSerializedPath)(this.params[this.progress].address_n),
                address: this.params[this.progress].address || 'not-set',
            };
        }
    }
    async confirmation() {
        if (this.confirmed)
            return true;
        await this.getPopupPromise().promise;
        const uiPromise = this.createUiPromise(events_1.UI.RECEIVE_CONFIRMATION);
        this.postMessage((0, events_1.createUiMessage)(events_1.UI.REQUEST_CONFIRMATION, {
            view: 'export-address',
            label: this.info,
        }));
        const uiResp = await uiPromise.promise;
        this.confirmed = uiResp.payload;
        return this.confirmed;
    }
    async noBackupConfirmation() {
        await this.getPopupPromise().promise;
        const uiPromise = this.createUiPromise(events_1.UI.RECEIVE_CONFIRMATION);
        this.postMessage((0, events_1.createUiMessage)(events_1.UI.REQUEST_CONFIRMATION, {
            view: 'no-backup',
        }));
        const uiResp = await uiPromise.promise;
        return uiResp.payload;
    }
    _call({ address_n, show_display, encoded_network }) {
        const cmd = this.device.getCommands();
        return cmd.ethereumGetAddress({
            address_n,
            show_display,
            encoded_network,
        });
    }
    async run() {
        var _a;
        const responses = [];
        for (let i = 0; i < this.params.length; i++) {
            const batch = this.params[i];
            const slip44 = (0, pathUtils_1.getSlip44ByPath)(batch.address_n);
            const definitions = await (0, ethereumDefinitions_1.getEthereumDefinitions)({
                chainId: (_a = batch === null || batch === void 0 ? void 0 : batch.network) === null || _a === void 0 ? void 0 : _a.chainId,
                slip44,
            });
            const definitionParams = {
                ...(definitions.encoded_network && {
                    encoded_network: definitions.encoded_network,
                }),
            };
            if (batch.show_display) {
                const silent = await this._call({
                    ...batch,
                    ...definitionParams,
                    show_display: false,
                });
                if (typeof batch.address === 'string') {
                    if ((0, formatUtils_1.stripHexPrefix)(batch.address).toLowerCase() !==
                        (0, formatUtils_1.stripHexPrefix)(silent.address).toLowerCase()) {
                        throw constants_1.ERRORS.TypedError('Method_AddressNotMatch');
                    }
                }
                else {
                    batch.address = silent.address;
                }
            }
            const response = await this._call({
                ...batch,
                ...definitionParams,
            });
            responses.push(response);
            if (this.hasBundle) {
                this.postMessage((0, events_1.createUiMessage)(events_1.UI.BUNDLE_PROGRESS, {
                    progress: i,
                    response,
                }));
            }
            this.progress++;
        }
        return this.hasBundle ? responses : responses[0];
    }
}
exports.default = EthereumGetAddress;
//# sourceMappingURL=ethereumGetAddress.js.map