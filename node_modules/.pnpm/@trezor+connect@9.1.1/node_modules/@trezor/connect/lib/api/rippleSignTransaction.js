"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const AbstractMethod_1 = require("../core/AbstractMethod");
const paramsValidator_1 = require("./common/paramsValidator");
const coinInfo_1 = require("../data/coinInfo");
const pathUtils_1 = require("../utils/pathUtils");
class RippleSignTransaction extends AbstractMethod_1.AbstractMethod {
    init() {
        this.requiredPermissions = ['read', 'write'];
        this.firmwareRange = (0, paramsValidator_1.getFirmwareRange)(this.name, (0, coinInfo_1.getMiscNetwork)('Ripple'), this.firmwareRange);
        this.info = 'Sign Ripple transaction';
        const { payload } = this;
        (0, paramsValidator_1.validateParams)(payload, [
            { name: 'path', required: true },
            { name: 'transaction', required: true },
        ]);
        const path = (0, pathUtils_1.validatePath)(payload.path, 5);
        const { transaction } = payload;
        (0, paramsValidator_1.validateParams)(transaction, [
            { name: 'fee', type: 'uint' },
            { name: 'flags', type: 'number' },
            { name: 'sequence', type: 'number' },
            { name: 'maxLedgerVersion', type: 'number' },
            { name: 'payment', type: 'object' },
        ]);
        (0, paramsValidator_1.validateParams)(transaction.payment, [
            { name: 'amount', type: 'uint', required: true },
            { name: 'destination', type: 'string', required: true },
            { name: 'destinationTag', type: 'number' },
        ]);
        this.params = {
            address_n: path,
            fee: transaction.fee,
            flags: transaction.flags,
            sequence: transaction.sequence,
            last_ledger_sequence: transaction.maxLedgerVersion,
            payment: {
                amount: transaction.payment.amount,
                destination: transaction.payment.destination,
                destination_tag: transaction.payment.destinationTag,
            },
        };
    }
    async run() {
        const cmd = this.device.getCommands();
        const { message } = await cmd.typedCall('RippleSignTx', 'RippleSignedTx', this.params);
        return {
            serializedTx: message.serialized_tx,
            signature: message.signature,
        };
    }
}
exports.default = RippleSignTransaction;
//# sourceMappingURL=rippleSignTransaction.js.map