import { AbstractMethod } from '../core/AbstractMethod';
import type { CertificateWithPoolOwnersAndRelays } from './cardano/cardanoCertificate';
import { Path, InputWithPath, CollateralInputWithPath } from './cardano/cardanoInputs';
import type { OutputWithData } from './cardano/cardanoOutputs';
import { PROTO } from '../constants';
import type { CardanoSignedTxData } from '../types/api/cardano';
import type { AssetGroupWithTokens } from './cardano/cardanoTokenBundle';
declare const CardanoSignTransactionFeatures: Readonly<{
    TransactionStreaming: string[];
    TokenMinting: string[];
    Multisig: string[];
    NetworkIdInTxBody: string[];
    OutputDatumHash: string[];
    ScriptDataHash: string[];
    Plutus: string[];
    KeyHashStakeCredential: string[];
    Babbage: string[];
    CIP36Registration: string[];
    CIP36RegistrationExternalPaymentAddress: string[];
}>;
export type CardanoSignTransactionParams = {
    signingMode: PROTO.CardanoTxSigningMode;
    inputsWithPath: InputWithPath[];
    outputsWithData: OutputWithData[];
    fee: PROTO.UintType;
    ttl?: PROTO.UintType;
    certificatesWithPoolOwnersAndRelays: CertificateWithPoolOwnersAndRelays[];
    withdrawals: PROTO.CardanoTxWithdrawal[];
    mint: AssetGroupWithTokens[];
    auxiliaryData?: PROTO.CardanoTxAuxiliaryData;
    validityIntervalStart?: PROTO.UintType;
    scriptDataHash?: string;
    collateralInputsWithPath: CollateralInputWithPath[];
    requiredSigners: PROTO.CardanoTxRequiredSigner[];
    collateralReturnWithData?: OutputWithData;
    totalCollateral?: PROTO.UintType;
    referenceInputs: PROTO.CardanoTxReferenceInput[];
    protocolMagic: number;
    networkId: number;
    witnessPaths: Path[];
    additionalWitnessRequests: Path[];
    derivationType: PROTO.CardanoDerivationType;
    includeNetworkId?: boolean;
};
export default class CardanoSignTransaction extends AbstractMethod<'cardanoSignTransaction', CardanoSignTransactionParams> {
    init(): void;
    _isFeatureSupported(feature: keyof typeof CardanoSignTransactionFeatures): boolean;
    _ensureFeatureIsSupported(feature: keyof typeof CardanoSignTransactionFeatures): void;
    _ensureFirmwareSupportsParams(): void;
    _sign_tx(): Promise<CardanoSignedTxData>;
    run(): Promise<CardanoSignedTxData>;
}
export {};
//# sourceMappingURL=cardanoSignTransaction.d.ts.map