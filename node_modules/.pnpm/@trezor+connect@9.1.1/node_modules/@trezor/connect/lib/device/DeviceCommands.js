"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DeviceCommands = void 0;
const tslib_1 = require("tslib");
const randombytes_1 = tslib_1.__importDefault(require("randombytes"));
const constants_1 = require("../constants");
const events_1 = require("../events");
const hdnodeUtils = tslib_1.__importStar(require("../utils/hdnodeUtils"));
const pathUtils_1 = require("../utils/pathUtils");
const accountUtils_1 = require("../utils/accountUtils");
const versionUtils_1 = require("../utils/versionUtils");
const coinInfo_1 = require("../data/coinInfo");
const debug_1 = require("../utils/debug");
const logger = (0, debug_1.initLog)('DeviceCommands');
const assertType = (res, resType) => {
    const splitResTypes = Array.isArray(resType) ? resType : resType.split('|');
    if (!splitResTypes.includes(res.type)) {
        throw constants_1.ERRORS.TypedError('Runtime', `assertType: Response of unexpected type: ${res.type}. Should be ${resType}`);
    }
};
const generateEntropy = (len) => {
    try {
        return (0, randombytes_1.default)(len);
    }
    catch (err) {
        throw constants_1.ERRORS.TypedError('Runtime', 'generateEntropy: Environment does not support crypto random');
    }
};
const filterForLog = (type, msg) => {
    const blacklist = {};
    if (type in blacklist) {
        return { ...msg, ...blacklist[type] };
    }
    return msg;
};
class DeviceCommands {
    constructor(device, transport, sessionId) {
        this.device = device;
        this.transport = transport;
        this.sessionId = sessionId;
        this.disposed = false;
    }
    dispose() {
        this.disposed = true;
        this._cancelableRequest = undefined;
    }
    isDisposed() {
        return this.disposed;
    }
    unlockPath(params) {
        return this.typedCall('UnlockPath', 'UnlockedPathRequest', params);
    }
    async getPublicKey(params, unlockPath) {
        if (unlockPath) {
            await this.unlockPath(unlockPath);
        }
        const response = await this.typedCall('GetPublicKey', 'PublicKey', {
            address_n: params.address_n,
            coin_name: params.coin_name || 'Bitcoin',
            script_type: params.script_type,
            show_display: params.show_display,
            ignore_xpub_magic: params.ignore_xpub_magic,
            ecdsa_curve_name: params.ecdsa_curve_name,
        });
        return response.message;
    }
    async getHDNode(params, options = {}) {
        const path = params.address_n;
        const { coinInfo, unlockPath } = options;
        const validation = typeof options.validation === 'boolean' ? options.validation : true;
        if (!this.device.atLeast(['1.7.2', '2.0.10']) || !coinInfo) {
            return this.getBitcoinHDNode(path, coinInfo);
        }
        let network = null;
        if (!params.script_type) {
            params.script_type = (0, pathUtils_1.getScriptType)(path);
        }
        if (params.script_type === 'SPENDP2SHWITNESS') {
            network = (0, coinInfo_1.getSegwitNetwork)(coinInfo);
        }
        else if (params.script_type === 'SPENDWITNESS') {
            network = (0, coinInfo_1.getBech32Network)(coinInfo);
        }
        if (!network) {
            network = coinInfo.network;
        }
        if (!params.coin_name) {
            params.coin_name = coinInfo.name;
        }
        let publicKey;
        if (params.show_display || !validation) {
            publicKey = await this.getPublicKey(params, unlockPath);
        }
        else {
            const suffix = 0;
            const childPath = path.concat([suffix]);
            const resKey = await this.getPublicKey(params, unlockPath);
            const childKey = await this.getPublicKey({ ...params, address_n: childPath }, unlockPath);
            publicKey = hdnodeUtils.xpubDerive(resKey, childKey, suffix, network, coinInfo.network);
        }
        const response = {
            path,
            serializedPath: (0, pathUtils_1.getSerializedPath)(path),
            childNum: publicKey.node.child_num,
            xpub: publicKey.xpub,
            chainCode: publicKey.node.chain_code,
            publicKey: publicKey.node.public_key,
            fingerprint: publicKey.node.fingerprint,
            depth: publicKey.node.depth,
        };
        if (network !== coinInfo.network) {
            response.xpubSegwit = response.xpub;
            response.xpub = hdnodeUtils.convertXpub(publicKey.xpub, network, coinInfo.network);
        }
        if ((0, pathUtils_1.isTaprootPath)(path)) {
            const fingerprint = Number(publicKey.root_fingerprint || 0)
                .toString(16)
                .padStart(8, '0');
            const descriptorPath = `${fingerprint}${response.serializedPath.substring(1)}`;
            response.xpubSegwit = `tr([${descriptorPath}]${response.xpub}/<0;1>/*)`;
        }
        return response;
    }
    async getBitcoinHDNode(path, coinInfo, validation = true) {
        let publicKey;
        if (!validation) {
            publicKey = await this.getPublicKey({ address_n: path });
        }
        else {
            const suffix = 0;
            const childPath = path.concat([suffix]);
            const resKey = await this.getPublicKey({ address_n: path });
            const childKey = await this.getPublicKey({ address_n: childPath });
            publicKey = hdnodeUtils.xpubDerive(resKey, childKey, suffix);
        }
        const response = {
            path,
            serializedPath: (0, pathUtils_1.getSerializedPath)(path),
            childNum: publicKey.node.child_num,
            xpub: coinInfo
                ? hdnodeUtils.convertBitcoinXpub(publicKey.xpub, coinInfo.network)
                : publicKey.xpub,
            chainCode: publicKey.node.chain_code,
            publicKey: publicKey.node.public_key,
            fingerprint: publicKey.node.fingerprint,
            depth: publicKey.node.depth,
        };
        if (coinInfo) {
            const bech32Network = (0, coinInfo_1.getBech32Network)(coinInfo);
            const segwitNetwork = (0, coinInfo_1.getSegwitNetwork)(coinInfo);
            if (bech32Network && (0, pathUtils_1.isBech32Path)(path)) {
                response.xpubSegwit = hdnodeUtils.convertBitcoinXpub(publicKey.xpub, bech32Network);
            }
            else if (segwitNetwork && (0, pathUtils_1.isSegwitPath)(path)) {
                response.xpubSegwit = hdnodeUtils.convertBitcoinXpub(publicKey.xpub, segwitNetwork);
            }
        }
        return response;
    }
    async getAddress({ address_n, show_display, multisig, script_type }, coinInfo) {
        if (!script_type) {
            script_type = (0, pathUtils_1.getScriptType)(address_n);
            if (script_type === 'SPENDMULTISIG' && !multisig) {
                script_type = 'SPENDADDRESS';
            }
        }
        if (multisig && multisig.pubkeys) {
            multisig.pubkeys.forEach(pk => {
                if (typeof pk.node === 'string') {
                    pk.node = hdnodeUtils.xpubToHDNodeType(pk.node, coinInfo.network);
                }
            });
        }
        const response = await this.typedCall('GetAddress', 'Address', {
            address_n,
            coin_name: coinInfo.name,
            show_display,
            multisig,
            script_type: script_type || 'SPENDADDRESS',
        });
        return {
            path: address_n,
            serializedPath: (0, pathUtils_1.getSerializedPath)(address_n),
            address: response.message.address,
        };
    }
    async ethereumGetAddress({ address_n, show_display, encoded_network, }) {
        const response = await this.typedCall('EthereumGetAddress', 'EthereumAddress', {
            address_n,
            show_display,
            encoded_network,
        });
        return {
            path: address_n,
            serializedPath: (0, pathUtils_1.getSerializedPath)(address_n),
            address: response.message.address,
        };
    }
    async ethereumGetPublicKey({ address_n, show_display, }) {
        if (!this.device.atLeast(['1.8.1', '2.1.0'])) {
            return this.getHDNode({ address_n });
        }
        const suffix = 0;
        const childPath = address_n.concat([suffix]);
        const resKey = await this.typedCall('EthereumGetPublicKey', 'EthereumPublicKey', {
            address_n,
            show_display,
        });
        const childKey = await this.typedCall('EthereumGetPublicKey', 'EthereumPublicKey', {
            address_n: childPath,
            show_display: false,
        });
        const publicKey = hdnodeUtils.xpubDerive(resKey.message, childKey.message, suffix);
        return {
            path: address_n,
            serializedPath: (0, pathUtils_1.getSerializedPath)(address_n),
            childNum: publicKey.node.child_num,
            xpub: publicKey.xpub,
            chainCode: publicKey.node.chain_code,
            publicKey: publicKey.node.public_key,
            fingerprint: publicKey.node.fingerprint,
            depth: publicKey.node.depth,
        };
    }
    async preauthorize(throwError) {
        try {
            await this.typedCall('DoPreauthorized', 'PreauthorizedRequest', {});
            return true;
        }
        catch (error) {
            if (throwError)
                throw error;
            return false;
        }
    }
    getDeviceState(networkType) {
        if (!this.device.atLeast('2.4.3')) {
            return this._getAddressForNetworkType(networkType);
        }
        return this._getAddressForNetworkType();
    }
    async call(type, msg = {}) {
        logger.debug('Sending', type, filterForLog(type, msg));
        this.callPromise = this.transport.call({
            session: this.sessionId,
            name: type,
            data: msg,
        });
        const res = await this.callPromise.promise;
        this.callPromise = undefined;
        if (!res.success) {
            logger.warn('Received error', res.error);
            throw new Error(res.error);
        }
        logger.debug('Received', res.payload.type, filterForLog(res.payload.type, res.payload.message));
        return res.payload;
    }
    async typedCall(type, resType, msg) {
        if (this.disposed) {
            throw constants_1.ERRORS.TypedError('Runtime', 'typedCall: DeviceCommands already disposed');
        }
        const response = await this._commonCall(type, msg);
        try {
            assertType(response, resType);
        }
        catch (error) {
            await this.transport.receive({ session: this.sessionId });
            throw error;
        }
        return response;
    }
    async _commonCall(type, msg) {
        const resp = await this.call(type, msg);
        if (this.disposed) {
            throw constants_1.ERRORS.TypedError('Runtime', 'typedCall: DeviceCommands already disposed');
        }
        return this._filterCommonTypes(resp);
    }
    _filterCommonTypes(res) {
        this._cancelableRequestBySend = false;
        if (res.type === 'Failure') {
            const { code } = res.message;
            let { message } = res.message;
            if (code === 'Failure_FirmwareError' && !message) {
                message = 'Firmware installation failed';
            }
            if (code === 'Failure_ActionCancelled' && !message) {
                message = 'Action cancelled by user';
            }
            return Promise.reject(new constants_1.ERRORS.TrezorError(code || 'Failure_UnknownCode', message || 'Failure_UnknownMessage'));
        }
        if (res.type === 'Features') {
            return Promise.resolve(res);
        }
        if (res.type === 'ButtonRequest') {
            this._cancelableRequestBySend = true;
            if (res.message.code === '_Deprecated_ButtonRequest_PassphraseType') {
                res.message.code = 'ButtonRequest_PassphraseType';
            }
            if (res.message.code === 'ButtonRequest_PassphraseEntry') {
                this.device.emit(events_1.DEVICE.PASSPHRASE_ON_DEVICE);
            }
            else {
                this.device.emit(events_1.DEVICE.BUTTON, this.device, res.message);
            }
            return this._commonCall('ButtonAck', {});
        }
        if (res.type === 'EntropyRequest') {
            return this._commonCall('EntropyAck', {
                entropy: generateEntropy(32).toString('hex'),
            });
        }
        if (res.type === 'PinMatrixRequest') {
            return this._promptPin(res.message.type).then(pin => this._commonCall('PinMatrixAck', { pin }), () => this._commonCall('Cancel', {}));
        }
        if (res.type === 'PassphraseRequest') {
            const state = this.device.getInternalState();
            const legacy = this.device.useLegacyPassphrase();
            const legacyT1 = legacy && this.device.isT1();
            if (legacyT1 && typeof state === 'string') {
                return this._commonCall('PassphraseAck', { passphrase: state });
            }
            if (legacy && res.message._on_device) {
                this.device.emit(events_1.DEVICE.PASSPHRASE_ON_DEVICE);
                return this._commonCall('PassphraseAck', { _state: state });
            }
            return this._promptPassphrase().then(response => {
                const { passphrase, passphraseOnDevice, cache } = response;
                if (legacyT1) {
                    this.device.setInternalState(cache ? passphrase : undefined);
                    return this._commonCall('PassphraseAck', { passphrase });
                }
                if (legacy) {
                    return this._commonCall('PassphraseAck', { passphrase, _state: state });
                }
                return !passphraseOnDevice
                    ? this._commonCall('PassphraseAck', { passphrase })
                    : this._commonCall('PassphraseAck', { on_device: true });
            }, err => this._commonCall('Cancel', {}).catch((e) => {
                throw err || e;
            }));
        }
        if (res.type === 'Deprecated_PassphraseStateRequest') {
            const { state } = res.message;
            this.device.setInternalState(state);
            return this._commonCall('Deprecated_PassphraseStateAck', {});
        }
        if (res.type === 'WordRequest') {
            return this._promptWord(res.message.type).then(word => this._commonCall('WordAck', { word }), () => this._commonCall('Cancel', {}));
        }
        return Promise.resolve(res);
    }
    async _getAddressForNetworkType(networkType) {
        switch (networkType) {
            case constants_1.NETWORK.TYPES.cardano: {
                const { message } = await this.typedCall('CardanoGetAddress', 'CardanoAddress', {
                    address_parameters: {
                        address_type: 8,
                        address_n: [(0, pathUtils_1.toHardened)(44), (0, pathUtils_1.toHardened)(1815), (0, pathUtils_1.toHardened)(0), 0, 0],
                        address_n_staking: [],
                    },
                    protocol_magic: 42,
                    network_id: 0,
                    derivation_type: 2,
                });
                return message.address;
            }
            default: {
                const { message } = await this.typedCall('GetAddress', 'Address', {
                    address_n: [(0, pathUtils_1.toHardened)(44), (0, pathUtils_1.toHardened)(1), (0, pathUtils_1.toHardened)(0), 0, 0],
                    coin_name: 'Testnet',
                    script_type: 'SPENDADDRESS',
                });
                return message.address;
            }
        }
    }
    _promptPin(type) {
        return new Promise((resolve, reject) => {
            if (this.device.listenerCount(events_1.DEVICE.PIN) > 0) {
                this._cancelableRequest = reject;
                this.device.emit(events_1.DEVICE.PIN, this.device, type, (err, pin) => {
                    this._cancelableRequest = undefined;
                    if (err || pin == null) {
                        reject(err);
                    }
                    else {
                        resolve(pin);
                    }
                });
            }
            else {
                console.warn('[DeviceCommands] [call] PIN callback not configured, cancelling request');
                reject(constants_1.ERRORS.TypedError('Runtime', '_promptPin: PIN callback not configured'));
            }
        });
    }
    _promptPassphrase() {
        return new Promise((resolve, reject) => {
            if (this.device.listenerCount(events_1.DEVICE.PASSPHRASE) > 0) {
                this._cancelableRequest = reject;
                this.device.emit(events_1.DEVICE.PASSPHRASE, this.device, (response, error) => {
                    this._cancelableRequest = undefined;
                    if (error) {
                        reject(error);
                    }
                    else {
                        resolve(response);
                    }
                });
            }
            else {
                console.warn('[DeviceCommands] [call] Passphrase callback not configured, cancelling request');
                reject(constants_1.ERRORS.TypedError('Runtime', '_promptPassphrase: Passphrase callback not configured'));
            }
        });
    }
    _promptWord(type) {
        return new Promise((resolve, reject) => {
            this._cancelableRequest = reject;
            this.device.emit(events_1.DEVICE.WORD, this.device, type, (err, word) => {
                this._cancelableRequest = undefined;
                if (err || word == null) {
                    reject(err);
                }
                else {
                    resolve(word.toLocaleLowerCase());
                }
            });
        });
    }
    async getAccountDescriptor(coinInfo, indexOrPath, derivationType) {
        const address_n = Array.isArray(indexOrPath)
            ? indexOrPath
            : (0, accountUtils_1.getAccountAddressN)(coinInfo, indexOrPath);
        if (coinInfo.type === 'bitcoin') {
            const resp = await this.getHDNode({ address_n }, { coinInfo, validation: false });
            return {
                descriptor: resp.xpubSegwit || resp.xpub,
                legacyXpub: resp.xpub,
                address_n,
            };
        }
        if (coinInfo.type === 'ethereum') {
            const resp = await this.ethereumGetAddress({ address_n });
            return {
                descriptor: resp.address,
                address_n,
            };
        }
        if (coinInfo.shortcut === 'ADA' || coinInfo.shortcut === 'tADA') {
            if (typeof derivationType === 'undefined')
                throw new Error('Derivation type is not specified');
            const { message } = await this.typedCall('CardanoGetPublicKey', 'CardanoPublicKey', {
                address_n,
                derivation_type: derivationType,
            });
            return {
                descriptor: message.xpub,
                address_n,
            };
        }
        if (coinInfo.shortcut === 'XRP' || coinInfo.shortcut === 'tXRP') {
            const { message } = await this.typedCall('RippleGetAddress', 'RippleAddress', {
                address_n,
            });
            return {
                descriptor: message.address,
                address_n,
            };
        }
        throw constants_1.ERRORS.TypedError('Runtime', 'DeviceCommands.getAccountDescriptor: unsupported coinInfo.type');
    }
    async cancel() {
        if (this._cancelableRequest) {
            this._cancelableRequest();
            this._cancelableRequest = undefined;
            return;
        }
        if (this.disposed) {
            return;
        }
        this.dispose();
        if (!this._cancelableRequestBySend) {
            if (this.callPromise) {
                await this.callPromise.promise;
            }
            return;
        }
        const { name, version } = this.transport;
        if (name === 'BridgeTransport' && (0, versionUtils_1.versionCompare)(version, '2.0.28') < 1) {
            try {
                await this.device.legacyForceRelease();
            }
            catch (err) {
            }
        }
        else {
            await this.transport.send({
                session: this.sessionId,
                name: 'Cancel',
                data: {},
            }).promise;
            if (this.callPromise) {
                await this.callPromise.promise;
            }
        }
    }
}
exports.DeviceCommands = DeviceCommands;
//# sourceMappingURL=DeviceCommands.js.map