"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.versionCompare = exports.versionSplit = exports.normalizeVersionArray = exports.isVersionArray = exports.isValidVersionArray = exports.isValidVersionString = void 0;
const VER_NUMS = 3;
const versionRegex = new RegExp(/^[0-9]{1,3}(\.[0-9]{1,3}){0,2}$/);
const isValidVersionString = (version) => versionRegex.test(version);
exports.isValidVersionString = isValidVersionString;
const isValidVersionArray = (version) => {
    if (!Array.isArray(version)) {
        return false;
    }
    if (version.length === 0 || version.length > VER_NUMS) {
        return false;
    }
    if (version[0] === 0) {
        return false;
    }
    for (let i = 0; i < version.length; i++) {
        const versionNumber = version[i];
        if (typeof versionNumber !== 'number' || versionNumber === null || versionNumber < 0) {
            return false;
        }
    }
    return true;
};
exports.isValidVersionArray = isValidVersionArray;
const isVersionArray = (arr) => (0, exports.isValidVersionArray)(arr);
exports.isVersionArray = isVersionArray;
const normalizeVersionArray = (version) => {
    if (version.length === VER_NUMS) {
        return version;
    }
    const partialVersion = [...version];
    for (let i = version.length; i < VER_NUMS; i++) {
        partialVersion.push(0);
    }
    return partialVersion;
};
exports.normalizeVersionArray = normalizeVersionArray;
const versionSplit = (version) => {
    if (!(0, exports.isValidVersionString)(version)) {
        return [0, 0, 0];
    }
    return version.split('.').map(v => Number(v));
};
exports.versionSplit = versionSplit;
const versionCompare = (a, b) => {
    if (typeof a === 'string' && typeof b === 'string' && a === b) {
        return 0;
    }
    const pa = typeof a === 'string' ? (0, exports.versionSplit)(a) : a;
    const pb = typeof b === 'string' ? (0, exports.versionSplit)(b) : b;
    const vpa = (0, exports.isValidVersionArray)(pa);
    const vpb = (0, exports.isValidVersionArray)(pb);
    if (!vpa && !vpb) {
        return 0;
    }
    if (!vpa && vpb) {
        return -1;
    }
    if (vpa && !vpb) {
        return 1;
    }
    const npa = (0, exports.normalizeVersionArray)(pa);
    const npb = (0, exports.normalizeVersionArray)(pb);
    for (let i = 0; i < VER_NUMS; i++) {
        if (npa[i] > npb[i])
            return 1;
        if (npb[i] > npa[i])
            return -1;
    }
    return 0;
};
exports.versionCompare = versionCompare;
//# sourceMappingURL=versionUtils.js.map