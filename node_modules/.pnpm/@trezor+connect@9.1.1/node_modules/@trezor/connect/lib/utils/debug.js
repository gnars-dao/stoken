"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getLog = exports.enableLogByPrefix = exports.enableLog = exports.initLog = void 0;
const colors = {
    '@trezor/connect': 'color: #f4a742; background: #000;',
    IFrame: 'color: #f4a742; background: #000;',
    Core: 'color: #f4a742; background: #000;',
    DescriptorStream: 'color: #77ab59; background: #000;',
    DeviceList: 'color: #77ab59; background: #000;',
    Device: 'color: #bada55; background: #000;',
    DeviceCommands: 'color: #bada55; background: #000;',
    '@trezor/transport': 'color: #bada55; background: #000;',
};
const MAX_ENTRIES = 100;
class Log {
    constructor(prefix, enabled) {
        this.prefix = prefix;
        this.enabled = enabled;
        this.messages = [];
        this.css = typeof window !== 'undefined' && colors[prefix] ? colors[prefix] : '';
    }
    addMessage(level, prefix, ...args) {
        this.messages.push({
            level,
            prefix,
            message: args,
            timestamp: Date.now(),
        });
        if (this.messages.length > MAX_ENTRIES) {
            this.messages.shift();
        }
    }
    log(...args) {
        this.addMessage('log', this.prefix, ...args);
        if (this.enabled) {
            console.log(this.prefix, ...args);
        }
    }
    error(...args) {
        this.addMessage('error', this.prefix, ...args);
        if (this.enabled) {
            console.error(this.prefix, ...args);
        }
    }
    warn(...args) {
        this.addMessage('warn', this.prefix, ...args);
        if (this.enabled) {
            console.warn(this.prefix, ...args);
        }
    }
    debug(...args) {
        this.addMessage('debug', this.prefix, ...args);
        if (this.enabled) {
            if (this.css) {
                console.log(`%c${this.prefix}`, this.css, ...args);
            }
            else {
                console.log(this.prefix, ...args);
            }
        }
    }
}
const _logs = {};
const initLog = (prefix, enabled) => {
    const instance = new Log(prefix, !!enabled);
    _logs[prefix] = instance;
    return instance;
};
exports.initLog = initLog;
const enableLog = (enabled) => {
    Object.keys(_logs).forEach(key => {
        _logs[key].enabled = !!enabled;
    });
};
exports.enableLog = enableLog;
const enableLogByPrefix = (prefix, enabled) => {
    if (_logs[prefix]) {
        _logs[prefix].enabled = enabled;
    }
};
exports.enableLogByPrefix = enableLogByPrefix;
const getLog = () => {
    let logs = [];
    Object.keys(_logs).forEach(key => {
        logs = logs.concat(_logs[key].messages);
    });
    logs.sort((a, b) => a.timestamp - b.timestamp);
    return logs;
};
exports.getLog = getLog;
//# sourceMappingURL=debug.js.map