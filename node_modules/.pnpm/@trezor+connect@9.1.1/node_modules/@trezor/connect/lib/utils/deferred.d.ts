export type Deferred<T, I = any, D = any> = {
    id?: I;
    data?: D;
    promise: Promise<T>;
    resolve: (t: T) => void;
    reject: (e: Error) => void;
};
export type AsyncDeferred<T> = {
    promise: Promise<T>;
    resolve: (t: T) => void;
    reject: (e: Error) => void;
    run: (...args: any[]) => any;
};
export declare function create<T, I = any, D = any>(arg?: I, data?: D): Deferred<T, I, D>;
export declare function createAsync<T>(innerFn: (...args: any[]) => any): AsyncDeferred<T>;
export declare function resolveTimeoutPromise<T>(delay: number, result: T): Promise<T>;
export declare const rejectTimeoutPromise: (delay: number, error: Error) => Promise<any>;
//# sourceMappingURL=deferred.d.ts.map