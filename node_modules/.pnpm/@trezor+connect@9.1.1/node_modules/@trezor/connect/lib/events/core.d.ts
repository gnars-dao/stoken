import type { BlockchainEventMessage } from './blockchain';
import type { IFrameCallMessage, MethodResponseMessage } from './call';
import type { DeviceEventMessage } from './device';
import type { IFrameEventMessage } from './iframe';
import type { PopupEventMessage } from './popup';
import type { TransportEventMessage } from './transport';
import type { UiEventMessage } from './ui-request';
import type { UiResponseMessage } from './ui-response';
import type { Unsuccessful } from '../types/params';
export declare const CORE_EVENT = "CORE_EVENT";
export type CoreMessage = {
    id?: number;
    success?: boolean;
} & (BlockchainEventMessage | DeviceEventMessage | TransportEventMessage | UiEventMessage | UiResponseMessage | IFrameCallMessage | MethodResponseMessage | IFrameEventMessage | PopupEventMessage);
export type PostMessageEvent = MessageEvent<CoreMessage>;
export type PostMessage = (message: CoreMessage) => void;
export declare const parseMessage: (messageData: any) => CoreMessage;
export declare const createErrorMessage: (error: Error & {
    code?: string;
}) => Unsuccessful;
//# sourceMappingURL=core.d.ts.map