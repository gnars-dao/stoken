import { UI_EVENT } from './ui-request';
import type { TransportInfo } from './transport';
import type { ConnectSettings, SystemInfo } from '../types';
import type { MessageFactoryFn } from '../types/utils';
export declare const POPUP: {
    readonly BOOTSTRAP: "popup-bootstrap";
    readonly LOADED: "popup-loaded";
    readonly INIT: "popup-init";
    readonly ERROR: "popup-error";
    readonly EXTENSION_USB_PERMISSIONS: "open-usb-permissions";
    readonly HANDSHAKE: "popup-handshake";
    readonly CLOSED: "popup-closed";
    readonly CANCEL_POPUP_REQUEST: "ui-cancel-popup-request";
    readonly CLOSE_WINDOW: "window.close";
};
export interface PopupInit {
    type: typeof POPUP.INIT;
    payload: {
        settings: ConnectSettings;
        useBroadcastChannel: boolean;
        systemInfo: SystemInfo;
    };
}
export interface PopupHandshake {
    type: typeof POPUP.HANDSHAKE;
    payload: {
        settings: ConnectSettings;
        method?: string;
        transport?: TransportInfo;
    };
}
export interface PopupError {
    type: typeof POPUP.ERROR;
    payload: {
        error: string;
    };
}
export interface PopupClosedMessage {
    type: typeof POPUP.CLOSED;
    payload: {
        error: any;
    } | null;
}
export type PopupEvent = {
    type: typeof POPUP.LOADED | typeof POPUP.CANCEL_POPUP_REQUEST;
    payload?: typeof undefined;
} | PopupInit | PopupHandshake | PopupError | PopupClosedMessage;
export type PopupEventMessage = PopupEvent & {
    event: typeof UI_EVENT;
};
export declare const createPopupMessage: MessageFactoryFn<typeof UI_EVENT, PopupEvent>;
//# sourceMappingURL=popup.d.ts.map