export declare const ERROR_CODES: {
    Init_NotInitialized: string;
    Init_AlreadyInitialized: string;
    Init_IframeBlocked: string;
    Init_IframeTimeout: string;
    Init_ManifestMissing: string;
    Popup_ConnectionMissing: string;
    Transport_Missing: string;
    Transport_InvalidProtobuf: string;
    Method_InvalidPackage: string;
    Method_InvalidParameter: string;
    Method_NotAllowed: string;
    Method_PermissionsNotGranted: string;
    Method_Cancel: string;
    Method_Interrupted: string;
    Method_UnknownCoin: string;
    Method_AddressNotMatch: string;
    Method_FirmwareUpdate_DownloadFailed: string;
    Method_Discovery_BundleException: string;
    Method_Override: string;
    Method_NoResponse: string;
    Backend_NotSupported: string;
    Backend_WorkerMissing: string;
    Backend_Disconnected: string;
    Backend_Invalid: string;
    Backend_Error: string;
    Runtime: string;
    Device_NotFound: string;
    Device_InitializeFailed: string;
    Device_FwException: string;
    Device_ModeException: string;
    Device_Disconnected: string;
    Device_UsedElsewhere: string;
    Device_InvalidState: string;
    Device_CallInProgress: string;
};
export declare class TrezorError extends Error {
    code: string;
    message: string;
    constructor(code: string, message: string);
}
export declare const TypedError: (id: keyof typeof ERROR_CODES, message?: string) => TrezorError;
export declare const serializeError: (payload: any) => any;
export declare const LIBUSB_ERROR_MESSAGE = "LIBUSB_ERROR";
//# sourceMappingURL=errors.d.ts.map