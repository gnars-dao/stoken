{"version":3,"file":"verify.js","sourceRoot":"","sources":["../src/verify.ts"],"names":[],"mappings":";;;AAAA,2CAMyB;AACzB,gDAI0B;AAC1B,6CAAsE;AAEzD,QAAA,eAAe,GAAG,IAAA,oBAAM,EAAC;IACpC,SAAS,EAAE,IAAA,qBAAO,EAAC,IAAA,oBAAM,GAAE,EAAE,kBAAkB,CAAC;IAChD,KAAK,EAAE,IAAA,qBAAO,EAAC,WAAW,CAAC;IAC3B,MAAM,EAAE,IAAA,qBAAO,EAAC,KAAK,CAAC;CACvB,CAAC,CAAC;AAUH;;;;;;;;;GASG;AACI,KAAK,UAAU,MAAM,CAAC,EAC3B,QAAQ,EACR,SAAS,EACT,SAAS,GACE;IACX,IAAA,oBAAY,EAAC,SAAS,EAAE,uBAAe,EAAE,0BAA0B,CAAC,CAAC;IAErE,MAAM,cAAc,GAAG,IAAA,kBAAU,EAAC,SAAS,CAAC,CAAC;IAE7C,OAAO,IAAA,kBAAW,EAChB,qBAAc,CAAC,OAAO,CAAC,IAAA,gBAAQ,EAAC,SAAS,CAAC,SAAS,CAAC,CAAC,EACrD,MAAM,iBAAK,CAAC,MAAM,CAAC,IAAA,qBAAa,EAAC,QAAQ,CAAC,CAAC,EAC3C,cAAc,CACf,CAAC;AACJ,CAAC;AAdD,wBAcC","sourcesContent":["import {\n  remove0x,\n  stringToBytes,\n  Hex,\n  assertStruct,\n  hexToBytes,\n} from '@metamask/utils';\nimport {\n  verify as nobleVerify,\n  utils,\n  Signature as NobleSignature,\n} from '@noble/secp256k1';\nimport { Infer, literal, object, pattern, string } from 'superstruct';\n\nexport const SignatureStruct = object({\n  signature: pattern(string(), /0x[0-9a-f]{140}/u),\n  curve: literal('secp256k1'),\n  format: literal('DER'),\n});\n\ntype Signature = Infer<typeof SignatureStruct>;\n\ntype VerifyArgs = {\n  registry: string;\n  signature: Signature;\n  publicKey: Hex;\n};\n\n/**\n * Verifies that the Snap Registry is properly signed using a cryptographic key.\n *\n * @param options - Parameters for signing.\n * @param options.registry - Raw text of the registry.json file.\n * @param options.signature - Hex-encoded encoded signature.\n * @param options.publicKey - Hex-encoded or Uint8Array public key to compare\n * the signature to.\n * @returns Whether the signature is valid.\n */\nexport async function verify({\n  registry,\n  signature,\n  publicKey,\n}: VerifyArgs): Promise<boolean> {\n  assertStruct(signature, SignatureStruct, 'Invalid signature object');\n\n  const publicKeyBytes = hexToBytes(publicKey);\n\n  return nobleVerify(\n    NobleSignature.fromHex(remove0x(signature.signature)),\n    await utils.sha256(stringToBytes(registry)),\n    publicKeyBytes,\n  );\n}\n"]}