import * as core from "@shapeshiftoss/hdwallet-core";
import * as Isolation from "./crypto/isolation";
import { NativeHDWalletBase } from "./native";
export declare function MixinNativeArkeoWalletInfo<TBase extends core.Constructor<core.HDWalletInfo>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsArkeoInfo: true;
        arkeoSupportsNetwork(): Promise<boolean>;
        arkeoSupportsSecureTransfer(): Promise<boolean>;
        arkeoSupportsNativeShapeShift(): boolean;
        arkeoGetAccountPaths(msg: core.ArkeoGetAccountPaths): Array<core.ArkeoAccountPath>;
        arkeoNextAccountPath(msg: core.ArkeoAccountPath): core.ArkeoAccountPath | undefined;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        hasNativeShapeShift(srcCoin: string, dstCoin: string): boolean;
        supportsBip44Accounts(): boolean;
        supportsOfflineSigning(): boolean;
        supportsBroadcast(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
export declare function MixinNativeArkeoWallet<TBase extends core.Constructor<NativeHDWalletBase>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsArkeo: true;
        "__#1@#masterKey": Isolation.Core.BIP32.Node | undefined;
        arkeoInitializeWallet(masterKey: Isolation.Core.BIP32.Node): Promise<void>;
        arkeoWipe(): void;
        arkeoBech32ify(address: ArrayLike<number>, prefix: string): string;
        createArkeoAddress(publicKey: string): string;
        arkeoGetAddress(msg: core.ArkeoGetAddress): Promise<string | null>;
        arkeoSignTx(msg: core.ArkeoSignTx): Promise<core.CosmosSignedTx | null>;
        readonly "__#11@#events": import("eventemitter2").EventEmitter2;
        readonly events: import("eventemitter2").EventEmitter2;
        needsMnemonic<T>(hasMnemonic: boolean, callback: () => T): T | null;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        hasNativeShapeShift(): boolean;
        supportsBip44Accounts(): boolean;
        supportsOfflineSigning(): boolean;
        supportsBroadcast(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
//# sourceMappingURL=arkeo.d.ts.map