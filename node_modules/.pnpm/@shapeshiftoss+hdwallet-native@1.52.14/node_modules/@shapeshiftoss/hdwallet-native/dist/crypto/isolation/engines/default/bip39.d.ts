import type { Seed as SeedType } from "../../core/bip32";
import type { Mnemonic as Bip39Mnemonic } from "../../core/bip39";
export * from "../../core/bip39";
declare const Mnemonic_base: {
    new (...args: any[]): {
        readonly "__#16@#revokers": Set<() => void>;
        "__#16@#revoked": boolean;
        readonly revoke: () => void;
        readonly addRevoker: (revoker: () => void) => void;
    };
} & {
    new (): {};
};
export declare class Mnemonic extends Mnemonic_base implements Bip39Mnemonic {
    #private;
    protected constructor(mnemonic: string);
    static create(mnemonic: string): Promise<Bip39Mnemonic>;
    toSeed(passphrase?: string): Promise<SeedType>;
}
//# sourceMappingURL=bip39.d.ts.map