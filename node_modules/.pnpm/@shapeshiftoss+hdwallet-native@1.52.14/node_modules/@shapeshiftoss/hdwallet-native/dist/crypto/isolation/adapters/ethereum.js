"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SignerAdapter = void 0;
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const eip_712_1 = require("eip-712");
const ethers_1 = require("ethers");
const utils_js_1 = require("ethers/lib/utils.js");
const util_1 = require("../../../util");
const core_1 = require("../core");
function ethSigFromRecoverableSig(x) {
    const sig = core_1.SecP256K1.RecoverableSignature.sig(x);
    const recoveryParam = core_1.SecP256K1.RecoverableSignature.recoveryParam(x);
    return (0, utils_js_1.splitSignature)(core.compatibleBufferConcat([sig, Buffer.from([recoveryParam])]));
}
class SignerAdapter {
    constructor(nodeAdapter, provider) {
        this.nodeAdapter = nodeAdapter;
        this.provider = provider;
    }
    // This throws (as allowed by ethers.Signer) to avoid having to return an object which is initialized asynchronously
    // from a synchronous function. Because all the (other) methods on SignerAdapter are async, one could construct a
    // wrapper that deferred its initialization and awaited it before calling through to a "real" method, but that's
    // a lot of complexity just to implement this one method we don't actually use.
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    connect(_provider) {
        throw new Error("changing providers on a SignerAdapter is unsupported");
    }
    getAddress(addressNList) {
        return __awaiter(this, void 0, void 0, function* () {
            const nodeAdapter = yield this.nodeAdapter.derivePath(core.addressNListToBIP32(addressNList));
            return (0, utils_js_1.computeAddress)(core_1.SecP256K1.UncompressedPoint.from(nodeAdapter.getPublicKey()));
        });
    }
    signDigest(digest, addressNList) {
        return __awaiter(this, void 0, void 0, function* () {
            const nodeAdapter = yield this.nodeAdapter.derivePath(core.addressNListToBIP32(addressNList));
            const recoverableSig = yield core_1.SecP256K1.RecoverableSignature.signCanonically(nodeAdapter.node, null, digest instanceof Uint8Array ? digest : (0, utils_js_1.arrayify)(digest));
            const sig = core_1.SecP256K1.RecoverableSignature.sig(recoverableSig);
            const recoveryParam = core_1.SecP256K1.RecoverableSignature.recoveryParam(recoverableSig);
            return (0, utils_js_1.splitSignature)(core.compatibleBufferConcat([sig, Buffer.from([recoveryParam])]));
        });
    }
    signTransaction(transaction, addressNList) {
        return __awaiter(this, void 0, void 0, function* () {
            const tx = yield (0, utils_js_1.resolveProperties)(transaction);
            if (tx.from != null) {
                if ((0, utils_js_1.getAddress)(tx.from) !== (yield this.getAddress(addressNList))) {
                    throw new Error("transaction from address mismatch");
                }
                delete tx.from;
            }
            const unsignedTx = Object.assign(Object.assign({}, tx), { nonce: tx.nonce !== undefined ? ethers_1.BigNumber.from(tx.nonce).toNumber() : undefined });
            const nodeAdapter = yield this.nodeAdapter.derivePath(core.addressNListToBIP32(addressNList));
            const txBuf = (0, utils_js_1.arrayify)((0, utils_js_1.serializeTransaction)(unsignedTx));
            const rawSig = yield core_1.SecP256K1.RecoverableSignature.signCanonically(nodeAdapter.node, "keccak256", txBuf);
            return (0, utils_js_1.serializeTransaction)(unsignedTx, ethSigFromRecoverableSig(rawSig));
        });
    }
    signMessage(messageData, addressNList) {
        return __awaiter(this, void 0, void 0, function* () {
            const messageBuf = (0, util_1.buildMessage)(messageData);
            const nodeAdapter = yield this.nodeAdapter.derivePath(core.addressNListToBIP32(addressNList));
            const rawSig = yield core_1.SecP256K1.RecoverableSignature.signCanonically(nodeAdapter.node, "keccak256", messageBuf);
            return (0, utils_js_1.joinSignature)(ethSigFromRecoverableSig(rawSig));
        });
    }
    signTypedData(typedData, addressNList) {
        return __awaiter(this, void 0, void 0, function* () {
            const address = yield this.getAddress(addressNList);
            const messageArray = (0, eip_712_1.getMessage)(typedData);
            const nodeAdapter = yield this.nodeAdapter.derivePath(core.addressNListToBIP32(addressNList));
            const rawSig = yield core_1.SecP256K1.RecoverableSignature.signCanonically(nodeAdapter.node, "keccak256", messageArray);
            const signature = (0, utils_js_1.joinSignature)(ethSigFromRecoverableSig(rawSig));
            return { address, signature };
        });
    }
}
exports.SignerAdapter = SignerAdapter;
exports.default = SignerAdapter;
//# sourceMappingURL=ethereum.js.map