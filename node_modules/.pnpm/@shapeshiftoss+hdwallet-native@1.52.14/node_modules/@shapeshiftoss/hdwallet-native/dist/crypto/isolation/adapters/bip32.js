"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BIP32Adapter = void 0;
const hdwallet_core_1 = require("@shapeshiftoss/hdwallet-core");
const bip32 = __importStar(require("bip32"));
const bs58check_1 = __importDefault(require("bs58check"));
const p_lazy_1 = __importDefault(require("p-lazy"));
const core_1 = require("../core");
const types_1 = require("../core/bip32/types");
const bitcoin_1 = require("./bitcoin");
let btccryptoInstance;
const btccryptoReady = p_lazy_1.default.from(() => __awaiter(void 0, void 0, void 0, function* () {
    btccryptoInstance = (yield Promise.resolve().then(() => __importStar(require("@shapeshiftoss/bitcoinjs-lib")))).crypto;
}));
class BIP32Adapter extends bitcoin_1.ECPairAdapter {
    /**
     * If you're inheriting from this class, be sure to call `await BIP32Adapter.prepare()` in your `create()` overload.
     */
    constructor(node, chainCode, publicKey, networkOrParent, index) {
        super(node, publicKey, networkOrParent instanceof BIP32Adapter ? networkOrParent.network : networkOrParent);
        this._children = new Map();
        this.node = node;
        this._chainCode = chainCode;
        this._publicKey = publicKey;
        this.index = index !== null && index !== void 0 ? index : 0;
        if (networkOrParent instanceof BIP32Adapter)
            this._parent = networkOrParent;
        if (node.explicitPath) {
            types_1.Path.assert(node.explicitPath);
            this._explicitPath = node.explicitPath;
        }
    }
    static prepare() {
        return __awaiter(this, void 0, void 0, function* () {
            // Must await superclass's prepare() so it can do its lazy-loading.
            yield Promise.all([yield btccryptoReady, bitcoin_1.ECPairAdapter.prepare()]);
        });
    }
    static create(isolatedNode, networkOrParent, index) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.prepare();
            return new BIP32Adapter(isolatedNode, yield isolatedNode.getChainCode(), yield isolatedNode.getPublicKey(), networkOrParent, index);
        });
    }
    get depth() {
        return this.path ? (0, hdwallet_core_1.bip32ToAddressNList)(this.path).length : 0;
    }
    get chainCode() {
        return Buffer.from(this._chainCode);
    }
    getChainCode() {
        return this.chainCode;
    }
    get identifier() {
        var _a;
        return (this._identifier =
            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
            (_a = this._identifier) !== null && _a !== void 0 ? _a : btccryptoInstance.hash160(Buffer.from(core_1.SecP256K1.CompressedPoint.from(this.publicKey))));
    }
    get fingerprint() {
        return this.identifier.slice(0, 4);
    }
    get parentFingerprint() {
        return this._parent ? this._parent.fingerprint.readUInt32BE(0) : 0;
    }
    get path() {
        var _a;
        if (this._explicitPath)
            return this._explicitPath;
        if (!this._parent)
            return "";
        let parentPath = (_a = this._parent.path) !== null && _a !== void 0 ? _a : "";
        if (parentPath === "")
            parentPath = "m";
        const hardened = this.index >= 0x80000000;
        const index = hardened ? this.index - 0x80000000 : this.index;
        return `${parentPath}/${index}${hardened ? "'" : ""}`;
    }
    get publicKey() {
        return Buffer.from(core_1.SecP256K1.CompressedPoint.from(this._publicKey));
    }
    getPublicKey() {
        return this.publicKey;
    }
    isNeutered() {
        return false;
    }
    neutered() {
        if (!this._base58) {
            const xpub = Buffer.alloc(78);
            xpub.writeUInt32BE(this.network.bip32.public, 0);
            xpub.writeUInt8(this.depth, 4);
            xpub.writeUInt32BE(this.parentFingerprint, 5);
            xpub.writeUInt32BE(this.index, 9);
            xpub.set(this.chainCode, 13);
            xpub.set(this.publicKey, 45);
            this._base58 = bs58check_1.default.encode(xpub);
        }
        return bip32.fromBase58(this._base58, this.network);
    }
    toBase58() {
        throw new core_1.IsolationError("xprv");
    }
    derive(index) {
        return __awaiter(this, void 0, void 0, function* () {
            let out = this._children.get(index);
            if (!out) {
                out = (yield BIP32Adapter.create(yield this.node.derive(index), this, index));
                this._children.set(index, out);
            }
            return out;
        });
    }
    deriveHardened(index) {
        return __awaiter(this, void 0, void 0, function* () {
            return yield this.derive(index + 0x80000000);
        });
    }
    derivePath(path) {
        return __awaiter(this, void 0, void 0, function* () {
            /**
             * If a non-root explicit path has been set, we cannot construct
             * a full representation of the BIP32 key tree and therefore may
             * only derive keys for nodes that are children of this one.
             */
            if (this._explicitPath) {
                if (!(path.startsWith(this._explicitPath) && path.length >= this._explicitPath.length)) {
                    throw new Error("path is not a child of this node");
                }
            }
            const ownPath = this.path;
            if (path.startsWith(ownPath))
                path = path.slice(ownPath.length);
            if (path.startsWith("/"))
                path = path.slice(1);
            if (/^m/.test(path) && this._parent)
                throw new Error("expected master, got child");
            return yield core_1.BIP32.derivePath(this, path);
        });
    }
}
exports.BIP32Adapter = BIP32Adapter;
exports.default = BIP32Adapter;
//# sourceMappingURL=bip32.js.map