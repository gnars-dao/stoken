/// <reference types="node" />
import type { crypto as bcrypto, ECPairInterface, Network, SignerAsync } from "@shapeshiftoss/bitcoinjs-lib";
import { SecP256K1 } from "../core";
import { ByteArray } from "../types";
export type ECPairInterfaceAsync = Omit<ECPairInterface, "sign"> & Pick<SignerAsync, "sign">;
export declare class ECPairAdapter implements SignerAsync, ECPairInterfaceAsync {
    protected readonly _isolatedKey: SecP256K1.ECDSAKey;
    readonly _publicKey: SecP256K1.CurvePoint;
    readonly _network: Network | undefined;
    compressed: boolean;
    lowR: boolean;
    protected constructor(isolatedKey: SecP256K1.ECDSAKey, publicKey: SecP256K1.CurvePoint, network?: Network);
    /**
     * If you're inheriting from this class, be sure to call `await ECPairAdapter.prepare()` in your `create()` overload.
     */
    protected static prepare(): Promise<void>;
    static create(isolatedKey: SecP256K1.ECDSAKey, network?: Network): Promise<ECPairAdapter>;
    get network(): Network;
    get ecdsaSign(): {
        (digestAlgorithm: null, message: ByteArray<32>): Promise<NonNullable<Uint8Array & {
            length: 64;
        }>>;
        (digestAlgorithm: null, message: ByteArray<32>, counter: number): Promise<NonNullable<Uint8Array & {
            length: 64;
        }> | undefined>;
        (digestAlgorithm: "sha256" | "hash256" | "keccak256", message: Uint8Array): Promise<NonNullable<Uint8Array & {
            length: 64;
        }>>;
        (digestAlgorithm: "sha256" | "hash256" | "keccak256", message: Uint8Array, counter: number): Promise<NonNullable<Uint8Array & {
            length: 64;
        }> | undefined>;
    };
    get ecdh(): any;
    get ecdhRaw(): any;
    sign(hash: bcrypto.NonDigest | bcrypto.Digest<"hash256">, lowR?: boolean): Promise<Buffer>;
    get publicKey(): Buffer & SecP256K1.CurvePoint;
    getPublicKey(): Buffer & SecP256K1.CurvePoint;
    toWIF(): never;
    verify(hash: Uint8Array, signature: Uint8Array): boolean;
}
export default ECPairAdapter;
//# sourceMappingURL=bitcoin.d.ts.map