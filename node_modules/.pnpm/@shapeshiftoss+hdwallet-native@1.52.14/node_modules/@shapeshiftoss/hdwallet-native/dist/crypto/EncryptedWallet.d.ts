import { CryptoEngine } from "./engines";
export declare class EncryptedWallet {
    #private;
    constructor(engine: CryptoEngine);
    /**
     * Whether or not the wallet has been initialized with an email and password
     */
    get isInitialized(): boolean;
    /**
     * The email provided to the `init` function
     */
    get email(): string | undefined;
    /**
     * A hash derived from the email and password to be used for authentication
     */
    get passwordHash(): string | undefined;
    /**
     * A string representation of the encrypted seed phrase
     */
    get encryptedWallet(): string | undefined;
    /**
     * Set the encrypted wallet by providing a string representation
     * @throws {Error} throws if `wallet` is not a valid encrypted wallet string
     */
    set encryptedWallet(wallet: string | undefined);
    /**
     * Get an ID based on the mnemonic
     * Calling `decrypt` will set this value after decryption is successful
     */
    get deviceId(): string | undefined;
    /**
     * Initialize the wallet with and email and password
     *
     * This cannot be done in the constructor because it performs async operations
     */
    init(email: string, password: string, encryptedWallet?: string): Promise<EncryptedWallet>;
    /**
     * Generate a new mnemonic and encrypt it with the email and password
     */
    createWallet(mnemonic?: string): Promise<this>;
    /**
     * Decrypt the encrypted wallet
     * @throws {Error} if the wallet hasn't been initialized or doesn't have an encryptedWallet
     */
    decrypt(encryptedWallet?: string | undefined): Promise<string>;
    /**
     * Clear all private data to allow it to be garbage collected
     */
    reset(): void;
}
//# sourceMappingURL=EncryptedWallet.d.ts.map