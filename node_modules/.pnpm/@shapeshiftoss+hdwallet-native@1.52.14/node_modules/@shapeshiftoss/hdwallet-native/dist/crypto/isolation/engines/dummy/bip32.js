"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Seed = exports.Node = void 0;
const hdwallet_core_1 = require("@shapeshiftoss/hdwallet-core");
const bip32crypto = __importStar(require("bip32/src/crypto"));
const tinyecc = __importStar(require("tiny-secp256k1"));
const core_1 = require("../../core");
const types_1 = require("../../types");
const types_2 = require("./types");
__exportStar(require("../../core/bip32"), exports);
class Node {
    constructor(xpubTree) {
        this.xpubTree = xpubTree;
    }
    static create(xpubTree) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Node(xpubTree);
        });
    }
    getPublicKey() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.xpubTree.publicKey;
        });
    }
    getChainCode() {
        return __awaiter(this, void 0, void 0, function* () {
            return this.xpubTree.chainCode;
        });
    }
    ecdsaSign() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new types_2.DummyEngineError();
        });
    }
    ecdsaSignRecoverable() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new types_2.DummyEngineError();
        });
    }
    derive(index) {
        return __awaiter(this, void 0, void 0, function* () {
            types_1.Uint32.assert(index);
            const child = (() => {
                const existingChild = this.xpubTree.children.get(index);
                if (existingChild)
                    return existingChild;
                if (index >= 0x80000000)
                    throw new types_2.DummyEngineError();
                const serP = Buffer.alloc(37);
                serP.set(this.xpubTree.publicKey, 0);
                serP.writeUInt32BE(index, 33);
                const I = bip32crypto.hmacSHA512((0, types_1.safeBufferFrom)(this.xpubTree.chainCode), serP);
                const IL = I.slice(0, 32);
                const IR = I.slice(32, 64);
                const Ki = tinyecc.pointAddScalar((0, types_1.safeBufferFrom)(this.xpubTree.publicKey), IL);
                if (Ki === null)
                    throw new Error("Ki is null; this should be cryptographically impossible");
                const newChild = {
                    version: this.xpubTree.version,
                    depth: this.xpubTree.depth + 1,
                    parentFp: this.xpubTree.fingerprint,
                    childNum: index,
                    chainCode: (0, types_1.checkType)(core_1.BIP32.ChainCode, IR),
                    publicKey: (0, types_1.checkType)(core_1.SecP256K1.CompressedPoint, Ki),
                    fingerprint: new DataView((0, hdwallet_core_1.toArrayBuffer)(core_1.Digest.Algorithms.hash160(Ki))).getUint32(0),
                    children: new Map(),
                };
                this.xpubTree.children.set(index, newChild);
                return newChild;
            })();
            const out = yield Node.create(child);
            return out;
        });
    }
    ecdh() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new types_2.DummyEngineError();
        });
    }
    ecdhRaw() {
        return __awaiter(this, void 0, void 0, function* () {
            throw new types_2.DummyEngineError();
        });
    }
}
exports.Node = Node;
class Seed {
    constructor(xpubTree) {
        this.xpubTree = xpubTree;
    }
    static create(xpubTree) {
        return __awaiter(this, void 0, void 0, function* () {
            return new Seed(xpubTree);
        });
    }
    toMasterKey(hmacKey) {
        return __awaiter(this, void 0, void 0, function* () {
            if (hmacKey !== undefined)
                throw new Error("bad hmacKey type");
            return yield Node.create(this.xpubTree);
        });
    }
}
exports.Seed = Seed;
//# sourceMappingURL=bip32.js.map