/// <reference types="node" />
import { BIP32, Digest, SecP256K1 } from "../../core";
import { ByteArray, Uint32 } from "../../types";
export * from "../../core/bip32";
declare const Node_base: {
    new (...args: any[]): {
        readonly "__#16@#revokers": Set<() => void>;
        "__#16@#revoked": boolean;
        readonly revoke: () => void;
        readonly addRevoker: (revoker: () => void) => void;
    };
} & {
    new (): {};
};
export declare class Node extends Node_base implements BIP32.Node, SecP256K1.ECDSARecoverableKey, SecP256K1.ECDHKey {
    #private;
    readonly chainCode: Buffer & BIP32.ChainCode;
    readonly explicitPath?: string;
    static requirePreimage: boolean;
    protected constructor(privateKey: Uint8Array, chainCode: Uint8Array, explicitPath?: string);
    static create(privateKey: Uint8Array, chainCode: Uint8Array, explicitPath?: string): Promise<BIP32.Node>;
    getPublicKey(): Promise<SecP256K1.CompressedPoint>;
    getChainCode(): Promise<Buffer & Uint8Array & {
        length: 32;
    }>;
    ecdsaSign(digestAlgorithm: null, msg: ByteArray<32>, counter?: Uint32): Promise<SecP256K1.Signature>;
    ecdsaSign(digestAlgorithm: Digest.AlgorithmName<32>, msg: Uint8Array, counter?: Uint32): Promise<SecP256K1.Signature>;
    ecdsaSignRecoverable(digestAlgorithm: null, msg: ByteArray<32>, counter?: Uint32): Promise<SecP256K1.RecoverableSignature>;
    ecdsaSignRecoverable(digestAlgorithm: Digest.AlgorithmName<32>, msg: Uint8Array, counter?: Uint32): Promise<SecP256K1.RecoverableSignature>;
    derive(index: Uint32): Promise<this>;
    ecdh(publicKey: SecP256K1.CurvePoint, digestAlgorithm?: Digest.AlgorithmName<32>): Promise<ByteArray<32>>;
    ecdhRaw(publicKey: SecP256K1.CurvePoint): Promise<SecP256K1.UncompressedPoint>;
    private _ecdh;
}
declare const Seed_base: {
    new (...args: any[]): {
        readonly "__#16@#revokers": Set<() => void>;
        "__#16@#revoked": boolean;
        readonly revoke: () => void;
        readonly addRevoker: (revoker: () => void) => void;
    };
} & {
    new (): {};
};
export declare class Seed extends Seed_base implements BIP32.Seed {
    #private;
    protected constructor(seed: Uint8Array);
    static create(seed: Uint8Array): Promise<BIP32.Seed>;
    toMasterKey(hmacKey?: string | Uint8Array): Promise<BIP32.Node>;
}
//# sourceMappingURL=bip32.d.ts.map