"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Mnemonic = void 0;
const hdwallet_core_1 = require("@shapeshiftoss/hdwallet-core");
const bs58check = __importStar(require("bs58check"));
const BIP32 = __importStar(require("../../core/bip32"));
const Digest = __importStar(require("../../core/digest"));
const SecP256K1 = __importStar(require("../../core/secp256k1"));
const types_1 = require("../../types");
const BIP32Engine = __importStar(require("./bip32"));
__exportStar(require("../../core/bip39"), exports);
class Mnemonic {
    constructor(xpubTree) {
        this.xpubTree = xpubTree;
    }
    static create(xpubList) {
        return __awaiter(this, void 0, void 0, function* () {
            const parsedXpubs = xpubList.split(" ").map((xpub) => {
                const xpubBuf = bs58check.decode(xpub);
                if (xpubBuf.length !== 78)
                    throw new Error("Isolation.Engine.Dummy.BIP39.create - Invalid xpub");
                const xpubView = new DataView((0, hdwallet_core_1.toArrayBuffer)(xpubBuf));
                const pk = (0, types_1.checkType)(SecP256K1.CompressedPoint, xpubBuf.slice(45));
                return {
                    version: xpubView.getUint32(0),
                    depth: xpubView.getUint8(4),
                    parentFp: xpubView.getUint32(5),
                    childNum: xpubView.getUint32(9),
                    chainCode: (0, types_1.checkType)(BIP32.ChainCode, xpubBuf.slice(13, 45)),
                    publicKey: pk,
                    fingerprint: new DataView((0, hdwallet_core_1.toArrayBuffer)(Digest.Algorithms.hash160(pk))).getUint32(0),
                    children: new Map(),
                };
            });
            const tree = (() => {
                const rootXpubs = parsedXpubs.filter((x) => x.parentFp === 0x00000000);
                if (rootXpubs.length === 0)
                    throw new Error("can't find root xpub");
                if (rootXpubs.length > 1)
                    throw new Error("more than one root xpub");
                return rootXpubs[0];
            })();
            const xpubsByFp = parsedXpubs
                .map((xpub) => {
                return [xpub.fingerprint, xpub];
            })
                .reduce((a, [k, v]) => {
                if (k in a)
                    throw new Error("key fingerprint collision");
                a[k] = v;
                return a;
            }, {});
            for (const xpub of parsedXpubs.filter((x) => x !== tree)) {
                if (!(xpub.parentFp in xpubsByFp))
                    throw new Error("found xpub, but not its parent");
                xpubsByFp[xpub.parentFp].children.set(xpub.childNum, xpub);
            }
            return new Mnemonic(tree);
        });
    }
    toSeed(passphrase) {
        return __awaiter(this, void 0, void 0, function* () {
            if (passphrase !== undefined && passphrase !== "")
                throw new Error("bad passphrase type");
            return yield BIP32Engine.Seed.create(this.xpubTree);
        });
    }
}
exports.Mnemonic = Mnemonic;
//# sourceMappingURL=bip39.js.map