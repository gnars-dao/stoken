"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _EncryptedWallet_engine, _EncryptedWallet_helper, _EncryptedWallet_deviceId, _EncryptedWallet_email, _EncryptedWallet_encryptedWallet, _EncryptedWallet_key, _EncryptedWallet_password;
Object.defineProperty(exports, "__esModule", { value: true });
exports.EncryptedWallet = void 0;
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const bip39 = __importStar(require("bip39"));
const classes_1 = require("./classes");
const CryptoHelper_1 = __importDefault(require("./CryptoHelper"));
const utils = __importStar(require("./utils"));
class EncryptedWallet {
    constructor(engine) {
        _EncryptedWallet_engine.set(this, void 0);
        _EncryptedWallet_helper.set(this, void 0);
        _EncryptedWallet_deviceId.set(this, void 0);
        _EncryptedWallet_email.set(this, void 0);
        _EncryptedWallet_encryptedWallet.set(this, void 0);
        _EncryptedWallet_key.set(this, void 0);
        _EncryptedWallet_password.set(this, void 0);
        if (!engine) {
            throw new Error("Missing cryptography engine");
        }
        __classPrivateFieldSet(this, _EncryptedWallet_engine, engine, "f");
        __classPrivateFieldSet(this, _EncryptedWallet_helper, new CryptoHelper_1.default(__classPrivateFieldGet(this, _EncryptedWallet_engine, "f")), "f");
    }
    /**
     * Whether or not the wallet has been initialized with an email and password
     */
    get isInitialized() {
        return Boolean(__classPrivateFieldGet(this, _EncryptedWallet_email, "f") && __classPrivateFieldGet(this, _EncryptedWallet_password, "f") && __classPrivateFieldGet(this, _EncryptedWallet_key, "f"));
    }
    /**
     * The email provided to the `init` function
     */
    get email() {
        return __classPrivateFieldGet(this, _EncryptedWallet_email, "f");
    }
    /**
     * A hash derived from the email and password to be used for authentication
     */
    get passwordHash() {
        var _a;
        return (_a = __classPrivateFieldGet(this, _EncryptedWallet_key, "f")) === null || _a === void 0 ? void 0 : _a.hashKeyB64;
    }
    /**
     * A string representation of the encrypted seed phrase
     */
    get encryptedWallet() {
        return __classPrivateFieldGet(this, _EncryptedWallet_encryptedWallet, "f");
    }
    /**
     * Set the encrypted wallet by providing a string representation
     * @throws {Error} throws if `wallet` is not a valid encrypted wallet string
     */
    set encryptedWallet(wallet) {
        if (wallet === undefined)
            throw new Error("Invalid cipher string");
        __classPrivateFieldSet(this, _EncryptedWallet_encryptedWallet, new classes_1.CipherString(wallet).encryptedString, "f");
    }
    /**
     * Get an ID based on the mnemonic
     * Calling `decrypt` will set this value after decryption is successful
     */
    get deviceId() {
        return __classPrivateFieldGet(this, _EncryptedWallet_deviceId, "f");
    }
    /**
     * Initialize the wallet with and email and password
     *
     * This cannot be done in the constructor because it performs async operations
     */
    init(email, password, encryptedWallet) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!(email && typeof email === "string" && email.length > 0)) {
                throw new Error("Invalid email address");
            }
            if (!(password && typeof password === "string" && password.length > 0)) {
                throw new Error("Invalid password");
            }
            __classPrivateFieldSet(this, _EncryptedWallet_email, email.normalize("NFKC").trim().toLowerCase(), "f");
            __classPrivateFieldSet(this, _EncryptedWallet_password, password.normalize("NFKC"), "f");
            __classPrivateFieldSet(this, _EncryptedWallet_key, yield __classPrivateFieldGet(this, _EncryptedWallet_helper, "f").makeKey(__classPrivateFieldGet(this, _EncryptedWallet_password, "f"), __classPrivateFieldGet(this, _EncryptedWallet_email, "f")), "f");
            if (encryptedWallet) {
                this.encryptedWallet = encryptedWallet;
            }
            return this;
        });
    }
    /**
     * Generate a new mnemonic and encrypt it with the email and password
     */
    createWallet(mnemonic) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isInitialized)
                throw new Error("Wallet is not initialized");
            mnemonic = mnemonic !== null && mnemonic !== void 0 ? mnemonic : (yield __classPrivateFieldGet(this, _EncryptedWallet_helper, "f").generateMnemonic());
            if (!bip39.validateMnemonic(mnemonic)) {
                throw new Error("Invalid mnemonic");
            }
            if (!__classPrivateFieldGet(this, _EncryptedWallet_key, "f"))
                throw new Error("Wallet does not contain a key");
            __classPrivateFieldSet(this, _EncryptedWallet_encryptedWallet, (yield __classPrivateFieldGet(this, _EncryptedWallet_helper, "f").aesEncrypt(core.toArrayBuffer(utils.fromUtf8ToArray(mnemonic)), __classPrivateFieldGet(this, _EncryptedWallet_key, "f"))).toString(), "f");
            return this;
        });
    }
    /**
     * Decrypt the encrypted wallet
     * @throws {Error} if the wallet hasn't been initialized or doesn't have an encryptedWallet
     */
    decrypt(encryptedWallet = __classPrivateFieldGet(this, _EncryptedWallet_encryptedWallet, "f")) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.isInitialized)
                throw new Error("Wallet is not initialized");
            if (!encryptedWallet)
                throw new Error("Wallet does not contain an encrypted wallet");
            if (!__classPrivateFieldGet(this, _EncryptedWallet_key, "f"))
                throw new Error("Wallet does not contain a key");
            const decrypted = yield __classPrivateFieldGet(this, _EncryptedWallet_helper, "f").decrypt(new classes_1.CipherString(encryptedWallet), __classPrivateFieldGet(this, _EncryptedWallet_key, "f"));
            if (typeof decrypted === "string" && decrypted.length > 0) {
                __classPrivateFieldSet(this, _EncryptedWallet_deviceId, yield __classPrivateFieldGet(this, _EncryptedWallet_helper, "f").getDeviceId(decrypted), "f");
                return decrypted;
            }
            throw new Error("Decryption failed");
        });
    }
    /**
     * Clear all private data to allow it to be garbage collected
     */
    reset() {
        __classPrivateFieldSet(this, _EncryptedWallet_deviceId, undefined, "f");
        __classPrivateFieldSet(this, _EncryptedWallet_email, undefined, "f");
        __classPrivateFieldSet(this, _EncryptedWallet_encryptedWallet, undefined, "f");
        __classPrivateFieldSet(this, _EncryptedWallet_key, undefined, "f");
        __classPrivateFieldSet(this, _EncryptedWallet_password, undefined, "f");
    }
}
exports.EncryptedWallet = EncryptedWallet;
_EncryptedWallet_engine = new WeakMap(), _EncryptedWallet_helper = new WeakMap(), _EncryptedWallet_deviceId = new WeakMap(), _EncryptedWallet_email = new WeakMap(), _EncryptedWallet_encryptedWallet = new WeakMap(), _EncryptedWallet_key = new WeakMap(), _EncryptedWallet_password = new WeakMap();
//# sourceMappingURL=EncryptedWallet.js.map