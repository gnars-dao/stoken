import { CipherString, EncryptedObject, SymmetricCryptoKey } from "./classes";
import { CryptoEngine } from "./engines";
/**
 * This class is only intended to be used by the EncryptedWallet class
 */
export default class CryptoHelper {
    #private;
    constructor(engine: CryptoEngine);
    compare(a: ArrayBuffer, b: ArrayBuffer): Promise<boolean>;
    aesEncrypt(data: ArrayBuffer | Uint8Array, key: SymmetricCryptoKey): Promise<EncryptedObject>;
    aesDecrypt(data: ArrayBuffer | Uint8Array, iv: ArrayBuffer | Uint8Array, mac: ArrayBuffer | Uint8Array, key: SymmetricCryptoKey): Promise<ArrayBuffer>;
    hkdfExpand(prk: ArrayBuffer, info: Uint8Array, size: number): Promise<Uint8Array>;
    pbkdf2(password: string | ArrayBuffer, salt: string | ArrayBuffer, iterations: number): Promise<ArrayBuffer>;
    makeKey(password: string, email: string): Promise<SymmetricCryptoKey>;
    decrypt(cipherString: CipherString, key: SymmetricCryptoKey): Promise<string>;
    generateMnemonic(strength?: number): Promise<string>;
    /**
     * Generates a base64 hash based on the provided data
     * Should be used to calculate a device ID for the wallet based on the mnemonic
     */
    getDeviceId(data: string): Promise<string>;
}
//# sourceMappingURL=CryptoHelper.d.ts.map