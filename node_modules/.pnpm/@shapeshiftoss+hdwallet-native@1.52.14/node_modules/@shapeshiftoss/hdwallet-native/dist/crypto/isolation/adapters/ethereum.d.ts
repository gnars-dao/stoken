import * as core from "@shapeshiftoss/hdwallet-core";
import { TypedData } from "eip-712";
import { BytesLike, providers, Signature } from "ethers";
import { Deferrable } from "ethers/lib/utils.js";
import { Isolation } from "../..";
export declare class SignerAdapter {
    protected readonly nodeAdapter: Isolation.Adapters.BIP32;
    readonly provider?: providers.Provider;
    constructor(nodeAdapter: Isolation.Adapters.BIP32, provider?: providers.Provider);
    connect(_provider: providers.Provider): never;
    getAddress(addressNList: core.BIP32Path): Promise<string>;
    signDigest(digest: BytesLike, addressNList: core.BIP32Path): Promise<Signature>;
    signTransaction(transaction: Deferrable<providers.TransactionRequest>, addressNList: core.BIP32Path): Promise<string>;
    signMessage(messageData: BytesLike, addressNList: core.BIP32Path): Promise<string>;
    signTypedData(typedData: TypedData, addressNList: core.BIP32Path): Promise<core.ETHSignedTypedData>;
}
export default SignerAdapter;
//# sourceMappingURL=ethereum.d.ts.map