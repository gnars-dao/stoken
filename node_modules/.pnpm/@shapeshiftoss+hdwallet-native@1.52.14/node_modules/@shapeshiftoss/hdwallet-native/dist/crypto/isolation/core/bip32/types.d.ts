import { Static } from "funtypes";
declare const chainCodeBase: import("funtypes").Intersect<[import("funtypes").InstanceOf<Uint8Array>, import("funtypes/lib/types/Object").Object<{
    length: import("funtypes").Literal<32>;
}, false>]>;
export type ChainCode = Static<typeof chainCodeBase>;
declare const chainCode: import("funtypes").Intersect<[import("funtypes").InstanceOf<Uint8Array>, import("funtypes/lib/types/Object").Object<{
    length: import("funtypes").Literal<32>;
}, false>]>;
export declare const ChainCode: typeof chainCode;
declare const pathBase: import("funtypes").Constraint<import("funtypes").String, string, unknown> & {
    regex: RegExp;
};
export type Path = Static<typeof pathBase>;
declare const path: import("funtypes").Constraint<import("funtypes").String, string, unknown> & {
    regex: RegExp;
};
export declare const Path: typeof path;
export {};
//# sourceMappingURL=types.d.ts.map