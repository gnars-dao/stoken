"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WebCryptoEngine = void 0;
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const scryptJs = __importStar(require("scrypt-js"));
const types_1 = require("./types");
class WebCryptoEngine {
    decrypt(data, key, iv) {
        return __awaiter(this, void 0, void 0, function* () {
            const impKey = yield globalThis.crypto.subtle.importKey("raw", key, { name: "AES-CBC" }, false, ["decrypt"]);
            return globalThis.crypto.subtle.decrypt({ name: "AES-CBC", iv }, impKey, data);
        });
    }
    digest(algorithm, data) {
        return __awaiter(this, void 0, void 0, function* () {
            const alg = algorithm === types_1.DigestAlgorithm.SHA512 ? "SHA-512" : "SHA-256";
            return globalThis.crypto.subtle.digest(alg, data);
        });
    }
    encrypt(data, key, iv) {
        return __awaiter(this, void 0, void 0, function* () {
            const impKey = yield globalThis.crypto.subtle.importKey("raw", key, { name: "AES-CBC" }, false, ["encrypt"]);
            return globalThis.crypto.subtle.encrypt({ name: "AES-CBC", iv }, impKey, data);
        });
    }
    hmac(value, key) {
        return __awaiter(this, void 0, void 0, function* () {
            const signingAlgorithm = {
                name: "HMAC",
                hash: { name: "SHA-256" },
            };
            const impKey = yield globalThis.crypto.subtle.importKey("raw", key, signingAlgorithm, false, ["sign"]);
            return globalThis.crypto.subtle.sign(signingAlgorithm, impKey, value);
        });
    }
    pbkdf2(password, salt, options) {
        return __awaiter(this, void 0, void 0, function* () {
            const pbkdf2Params = Object.assign({ name: "PBKDF2", salt: new Uint8Array(salt), hash: { name: "SHA-256" } }, options);
            const impKey = yield globalThis.crypto.subtle.importKey("raw", password, { name: "PBKDF2" }, false, ["deriveBits"]);
            return globalThis.crypto.subtle.deriveBits(pbkdf2Params, impKey, 256);
        });
    }
    randomBytes(size) {
        return __awaiter(this, void 0, void 0, function* () {
            return core.toArrayBuffer(globalThis.crypto.getRandomValues(new Uint8Array(size)));
        });
    }
    scrypt(password, salt, params) {
        return __awaiter(this, void 0, void 0, function* () {
            return core.toArrayBuffer(yield scryptJs.scrypt(new Uint8Array(password), new Uint8Array(salt), params.iterations, params.blockSize, params.parallelism, params.keyLength));
        });
    }
}
exports.WebCryptoEngine = WebCryptoEngine;
//# sourceMappingURL=web-crypto.js.map