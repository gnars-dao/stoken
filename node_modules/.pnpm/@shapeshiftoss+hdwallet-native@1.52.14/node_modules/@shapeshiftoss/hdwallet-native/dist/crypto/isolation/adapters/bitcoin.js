"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ECPairAdapter = void 0;
const p_lazy_1 = __importDefault(require("p-lazy"));
const core_1 = require("../core");
const types_1 = require("../types");
let networksInstance;
const networksReady = p_lazy_1.default.from(() => __awaiter(void 0, void 0, void 0, function* () {
    networksInstance = (yield Promise.resolve().then(() => __importStar(require("@shapeshiftoss/bitcoinjs-lib")))).networks;
}));
class ECPairAdapter {
    constructor(isolatedKey, publicKey, network) {
        this.compressed = false;
        this.lowR = false;
        this._isolatedKey = isolatedKey;
        this._publicKey = publicKey;
        this._network = network;
    }
    /**
     * If you're inheriting from this class, be sure to call `await ECPairAdapter.prepare()` in your `create()` overload.
     */
    static prepare() {
        return __awaiter(this, void 0, void 0, function* () {
            yield networksReady;
        });
    }
    static create(isolatedKey, network) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.prepare();
            return new ECPairAdapter(isolatedKey, yield isolatedKey.getPublicKey(), network);
        });
    }
    get network() {
        var _a;
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return (_a = this._network) !== null && _a !== void 0 ? _a : networksInstance.bitcoin;
    }
    get ecdsaSign() {
        return this._isolatedKey.ecdsaSign.bind(this._isolatedKey);
    }
    get ecdh() {
        const isolatedKey = this._isolatedKey;
        if (!("ecdh" in isolatedKey && typeof isolatedKey.ecdh === "function"))
            return undefined;
        return isolatedKey.ecdh.bind(isolatedKey);
    }
    get ecdhRaw() {
        const isolatedKey = this._isolatedKey;
        if (!("ecdhRaw" in isolatedKey && typeof isolatedKey.ecdhRaw === "function"))
            return undefined;
        return isolatedKey.ecdhRaw.bind(isolatedKey);
    }
    sign(hash, lowR) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, types_1.assertType)((0, types_1.ByteArray)(), hash);
            lowR = lowR !== null && lowR !== void 0 ? lowR : this.lowR;
            const sig = yield (() => __awaiter(this, void 0, void 0, function* () {
                if (!hash.algorithm) {
                    (0, types_1.assertType)((0, types_1.ByteArray)(32), hash);
                    return !lowR
                        ? yield this._isolatedKey.ecdsaSign(null, hash)
                        : yield core_1.SecP256K1.Signature.signCanonically(this._isolatedKey, null, hash);
                }
                else {
                    return !lowR
                        ? yield this._isolatedKey.ecdsaSign(hash.algorithm, hash.preimage)
                        : yield core_1.SecP256K1.Signature.signCanonically(this._isolatedKey, hash.algorithm, hash.preimage);
                }
            }))();
            return Buffer.from(sig);
        });
    }
    get publicKey() {
        return this.getPublicKey();
    }
    getPublicKey() {
        const publicKey = this._publicKey;
        const key = this.compressed
            ? core_1.SecP256K1.CompressedPoint.from(publicKey)
            : core_1.SecP256K1.UncompressedPoint.from(publicKey);
        return Buffer.from(key);
    }
    toWIF() {
        throw new core_1.IsolationError("WIF");
    }
    verify(hash, signature) {
        core_1.SecP256K1.Signature.assert(signature);
        return core_1.SecP256K1.Signature.verify(signature, null, hash, this._publicKey);
    }
}
exports.ECPairAdapter = ECPairAdapter;
exports.default = ECPairAdapter;
//# sourceMappingURL=bitcoin.js.map