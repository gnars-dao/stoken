"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OfflineDirectSignerAdapter = void 0;
const bech32 = __importStar(require("bech32"));
const p_lazy_1 = __importDefault(require("p-lazy"));
const core_1 = require("../core");
const cosmJsProtoSigning = p_lazy_1.default.from(() => Promise.resolve().then(() => __importStar(require("@cosmjs/proto-signing"))));
class OfflineDirectSignerAdapter {
    constructor(isolatedKey, pubkey, address) {
        this._isolatedKey = isolatedKey;
        this._pubkey = pubkey;
        this.address = address;
    }
    static create(isolatedKey, prefix) {
        return __awaiter(this, void 0, void 0, function* () {
            const pubkey = yield isolatedKey.getPublicKey();
            const address = bech32.encode(prefix, bech32.toWords(core_1.Digest.Algorithms.ripemd160(core_1.Digest.Algorithms.sha256(yield isolatedKey.getPublicKey()))));
            return new OfflineDirectSignerAdapter(isolatedKey, pubkey, address);
        });
    }
    getAccounts() {
        return __awaiter(this, void 0, void 0, function* () {
            return [
                {
                    address: this.address,
                    algo: "secp256k1",
                    pubkey: this._pubkey,
                },
            ];
        });
    }
    signDirect(signerAddress, signDoc) {
        return __awaiter(this, void 0, void 0, function* () {
            if (signerAddress !== this.address)
                throw new Error("signerAddress mismatch");
            const signBytes = (yield cosmJsProtoSigning).makeSignBytes(signDoc);
            const signatureBytes = yield this._isolatedKey.ecdsaSign("sha256", signBytes);
            return {
                signed: signDoc,
                signature: {
                    pub_key: {
                        type: "tendermint/PubKeySecp256k1",
                        value: Buffer.from(this._pubkey).toString("base64"),
                    },
                    signature: Buffer.from(signatureBytes).toString("base64"),
                },
            };
        });
    }
}
exports.OfflineDirectSignerAdapter = OfflineDirectSignerAdapter;
exports.default = OfflineDirectSignerAdapter;
//# sourceMappingURL=cosmosDirect.js.map