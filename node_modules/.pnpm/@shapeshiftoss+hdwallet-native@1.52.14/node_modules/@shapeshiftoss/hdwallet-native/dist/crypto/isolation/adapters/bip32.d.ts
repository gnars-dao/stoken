/// <reference types="node" />
import type { Network, SignerAsync } from "@shapeshiftoss/bitcoinjs-lib";
import * as bip32 from "bip32";
import { BIP32, SecP256K1 } from "../core";
import { ECPairAdapter } from "./bitcoin";
export type BIP32InterfaceAsync = Omit<bip32.BIP32Interface, "sign" | "derive" | "deriveHardened" | "derivePath"> & Pick<SignerAsync, "sign"> & {
    derive(index: number): Promise<BIP32InterfaceAsync>;
    deriveHardened(index: number): Promise<BIP32InterfaceAsync>;
    derivePath(path: string): Promise<BIP32InterfaceAsync>;
};
export declare class BIP32Adapter extends ECPairAdapter implements BIP32InterfaceAsync {
    readonly node: BIP32.Node;
    readonly _chainCode: BIP32.ChainCode;
    readonly _publicKey: SecP256K1.CurvePoint;
    readonly index: number;
    readonly _parent?: BIP32Adapter;
    readonly _children: Map<number, this>;
    readonly _explicitPath?: string;
    _identifier?: Buffer;
    _base58?: string;
    /**
     * If you're inheriting from this class, be sure to call `await BIP32Adapter.prepare()` in your `create()` overload.
     */
    protected constructor(node: BIP32.Node, chainCode: BIP32.ChainCode, publicKey: SecP256K1.CurvePoint, networkOrParent?: BIP32Adapter | Network, index?: number);
    protected static prepare(): Promise<void>;
    static create(isolatedNode: BIP32.Node, networkOrParent?: BIP32Adapter | Network, index?: number): Promise<BIP32Adapter>;
    get depth(): number;
    get chainCode(): Buffer & Uint8Array & {
        length: 32;
    };
    getChainCode(): Buffer & Uint8Array & {
        length: 32;
    };
    get identifier(): Buffer;
    get fingerprint(): Buffer;
    get parentFingerprint(): number;
    get path(): string;
    get publicKey(): Buffer & Uint8Array & {
        length: 33;
    } & {
        0: 2 | 3;
    };
    getPublicKey(): Buffer & Uint8Array & {
        length: 33;
    } & {
        0: 2 | 3;
    };
    isNeutered(): boolean;
    neutered(): bip32.BIP32Interface;
    toBase58(): never;
    derive(index: number): Promise<this>;
    deriveHardened(index: number): Promise<BIP32Adapter>;
    derivePath(path: string): Promise<BIP32Adapter>;
}
export default BIP32Adapter;
//# sourceMappingURL=bip32.d.ts.map