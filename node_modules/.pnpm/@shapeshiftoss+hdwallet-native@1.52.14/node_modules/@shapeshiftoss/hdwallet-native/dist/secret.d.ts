import * as core from "@shapeshiftoss/hdwallet-core";
import * as Isolation from "./crypto/isolation";
import { NativeHDWalletBase } from "./native";
export declare function MixinNativeSecretWalletInfo<TBase extends core.Constructor<core.HDWalletInfo>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsSecretInfo: true;
        secretSupportsNetwork(): Promise<boolean>;
        secretSupportsSecureTransfer(): Promise<boolean>;
        secretSupportsNativeShapeShift(): boolean;
        secretGetAccountPaths(msg: core.SecretGetAccountPaths): Array<core.SecretAccountPath>;
        secretNextAccountPath(msg: core.SecretAccountPath): core.SecretAccountPath | undefined;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        hasNativeShapeShift(srcCoin: string, dstCoin: string): boolean;
        supportsBip44Accounts(): boolean;
        supportsOfflineSigning(): boolean;
        supportsBroadcast(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
export declare function MixinNativeSecretWallet<TBase extends core.Constructor<NativeHDWalletBase>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsSecret: true;
        "__#8@#masterKey": Isolation.Core.BIP32.Node | undefined;
        secretInitializeWallet(masterKey: Isolation.Core.BIP32.Node): Promise<void>;
        secretWipe(): void;
        secretBech32ify(address: ArrayLike<number>, prefix: string): string;
        createSecretAddress(publicKey: string): string;
        secretGetAddress(msg: core.SecretGetAddress): Promise<string | null>;
        secretSignTx(msg: core.SecretSignTx): Promise<any | null>;
        readonly "__#11@#events": import("eventemitter2").EventEmitter2;
        readonly events: import("eventemitter2").EventEmitter2;
        needsMnemonic<T>(hasMnemonic: boolean, callback: () => T): T | null;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        hasNativeShapeShift(): boolean;
        supportsBip44Accounts(): boolean;
        supportsOfflineSigning(): boolean;
        supportsBroadcast(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
//# sourceMappingURL=secret.d.ts.map