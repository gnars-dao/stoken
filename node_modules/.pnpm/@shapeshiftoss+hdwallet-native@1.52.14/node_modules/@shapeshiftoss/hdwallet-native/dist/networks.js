"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getNetwork = void 0;
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const bip32BTC = {
    p2sh: {
        bip32: {
            public: 0x0488b21e,
            private: 0x0488ade4,
        },
    },
    p2pkh: {
        bip32: {
            public: 0x0488b21e,
            private: 0x0488ade4,
        },
    },
    "p2sh-p2wpkh": {
        bip32: {
            public: 0x049d7cb2,
            private: 0x049d7878,
        },
    },
    p2wpkh: {
        bip32: {
            public: 0x04b24746,
            private: 0x04b2430c,
        },
    },
};
const networks = {
    bitcoin: Object.assign({ base: {
            messagePrefix: "\x18Bitcoin Signed Message:\n",
            bech32: "bc",
            pubKeyHash: 0x00,
            scriptHash: 0x05,
            wif: 0x80,
        } }, bip32BTC),
    dash: {
        base: {
            messagePrefix: "unused",
            bech32: "",
            pubKeyHash: 0x4c,
            scriptHash: 0x10,
            wif: 0xcc,
        },
        p2sh: bip32BTC.p2sh,
        p2pkh: bip32BTC.p2pkh,
    },
    digibyte: Object.assign({ base: {
            messagePrefix: "\x19Digibyte Signed Message:\n",
            bech32: "dgb",
            pubKeyHash: 0x1e,
            scriptHash: 0x3f,
            wif: 0x80,
        } }, bip32BTC),
    dogecoin: {
        base: {
            messagePrefix: "\x19Dogecoin Signed Message:\n",
            bech32: "",
            pubKeyHash: 0x1e,
            scriptHash: 0x16,
            wif: 0x9e,
        },
        p2sh: {
            bip32: {
                public: 0x02facafd,
                private: 0x02fac398,
            },
        },
        p2pkh: {
            bip32: {
                public: 0x02facafd,
                private: 0x02fac398,
            },
        },
    },
    litecoin: {
        base: {
            messagePrefix: "\x19Litecoin Signed Message:\n",
            bech32: "ltc",
            pubKeyHash: 0x30,
            scriptHash: 0x32,
            wif: 0xb0,
        },
        p2sh: {
            bip32: {
                public: 0x019da462,
                private: 0x019d9cfe,
            },
        },
        p2pkh: {
            bip32: {
                public: 0x019da462,
                private: 0x019d9cfe,
            },
        },
        "p2sh-p2wpkh": {
            bip32: {
                public: 0x01b26ef6,
                private: 0x01b26792,
            },
        },
        p2wpkh: bip32BTC.p2wpkh,
    },
    testnet: {
        base: {
            messagePrefix: "\x18Bitcoin Signed Message:\n",
            bech32: "tb",
            pubKeyHash: 0x6f,
            scriptHash: 0xc4,
            wif: 0xef,
        },
        p2sh: {
            bip32: {
                public: 0x043587cf,
                private: 0x04358394,
            },
        },
        p2pkh: {
            bip32: {
                public: 0x043587cf,
                private: 0x04358394,
            },
        },
        "p2sh-p2wpkh": {
            bip32: {
                public: 0x044a5262,
                private: 0x044a4e28,
            },
        },
        p2wpkh: {
            bip32: {
                public: 0x045f1cf6,
                private: 0x045f18bc,
            },
        },
    },
};
//TODO: all below are missing network data
for (const coin of [
    "bitcoincash",
    "thorchain",
    "secret",
    "terra",
    "kava",
    "cardano",
    "cosmos",
    "osmosis",
    "binance",
    "ethereum",
    "arkeo",
])
    networks[coin] = networks.bitcoin;
function getNetwork(coin, scriptType) {
    coin = coin.toLowerCase();
    scriptType = scriptType || core.BTCOutputScriptType.PayToMultisig;
    if (!(coin in networks))
        throw new Error(`${coin} network not supported`);
    const network = networks[coin];
    const bip32 = network[scriptType];
    if (!bip32) {
        throw new Error(`${scriptType} not supported for ${coin} network`);
    }
    return Object.assign(Object.assign({}, network.base), bip32);
}
exports.getNetwork = getNetwork;
//# sourceMappingURL=networks.js.map