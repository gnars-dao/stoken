/// <reference types="node" />
import * as bitcoin from "@shapeshiftoss/bitcoinjs-lib";
import * as core from "@shapeshiftoss/hdwallet-core";
import * as Isolation from "./crypto/isolation";
import { NativeHDWalletBase } from "./native";
export type BTCScriptType = core.BTCInputScriptType | core.BTCOutputScriptType;
type NonWitnessUtxo = Buffer;
type WitnessUtxo = {
    script: Buffer;
    amount: number;
};
type UtxoData = NonWitnessUtxo | WitnessUtxo;
type ScriptData = {
    redeemScript?: Buffer;
    witnessScript?: Buffer;
};
type BchInputData = {
    sighashType?: number;
};
type InputData = UtxoData | ScriptData | BchInputData;
export declare function MixinNativeBTCWalletInfo<TBase extends core.Constructor<core.HDWalletInfo>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsBTCInfo: true;
        btcSupportsCoinSync(coin: core.Coin): boolean;
        btcSupportsCoin(coin: core.Coin): Promise<boolean>;
        btcSupportsScriptTypeSync(coin: core.Coin, scriptType?: core.BTCInputScriptType): boolean;
        btcSupportsScriptType(coin: core.Coin, scriptType: core.BTCInputScriptType): Promise<boolean>;
        btcSupportsSecureTransfer(): Promise<boolean>;
        btcSupportsNativeShapeShift(): boolean;
        btcGetAccountPaths(msg: core.BTCGetAccountPaths): Array<core.BTCAccountPath>;
        btcIsSameAccount(msg: Array<core.BTCAccountPath>): boolean;
        btcNextAccountPath(msg: core.BTCAccountPath): core.BTCAccountPath | undefined;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        hasNativeShapeShift(srcCoin: string, dstCoin: string): boolean;
        supportsBip44Accounts(): boolean;
        supportsOfflineSigning(): boolean;
        supportsBroadcast(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
export declare function MixinNativeBTCWallet<TBase extends core.Constructor<NativeHDWalletBase>>(Base: TBase): {
    new (...args: any[]): {
        readonly _supportsBTC: true;
        "__#13@#masterKey": Isolation.Core.BIP32.Node | undefined;
        btcInitializeWallet(masterKey: Isolation.Core.BIP32.Node): Promise<void>;
        btcWipe(): void;
        createPayment(pubkey: Buffer, scriptType?: BTCScriptType, network?: bitcoin.Network): bitcoin.Payment;
        validateVoutOrdering(msg: core.BTCSignTxNative, tx: bitcoin.Transaction): boolean;
        buildInput(coin: core.Coin, input: core.BTCSignTxInputNative): Promise<InputData | null>;
        btcGetAddress(msg: core.BTCGetAddress): Promise<string | null>;
        btcSignTx(msg: core.BTCSignTxNative): Promise<core.BTCSignedTx | null>;
        btcSignMessage(msg: core.BTCSignMessage): Promise<core.BTCSignedMessage>;
        btcVerifyMessage(msg: core.BTCVerifyMessage): Promise<boolean>;
        readonly "__#11@#events": import("eventemitter2").EventEmitter2;
        readonly events: import("eventemitter2").EventEmitter2;
        needsMnemonic<T>(hasMnemonic: boolean, callback: () => T): T | null;
        getVendor(): string;
        hasOnDevicePinEntry(): boolean;
        hasOnDevicePassphrase(): boolean;
        hasOnDeviceDisplay(): boolean;
        hasOnDeviceRecovery(): boolean;
        hasNativeShapeShift(): boolean;
        supportsBip44Accounts(): boolean;
        supportsOfflineSigning(): boolean;
        supportsBroadcast(): boolean;
        describePath(msg: core.DescribePath): core.PathDescription;
    };
} & TBase;
export {};
//# sourceMappingURL=bitcoin.d.ts.map