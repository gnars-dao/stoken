"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MixinNativeBinanceWallet = exports.MixinNativeBinanceWalletInfo = void 0;
const core = __importStar(require("@shapeshiftoss/hdwallet-core"));
const bech32 = __importStar(require("bech32"));
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const crypto_js_1 = __importDefault(require("crypto-js"));
const p_lazy_1 = __importDefault(require("p-lazy"));
const Isolation = __importStar(require("./crypto/isolation"));
const util = __importStar(require("./util"));
const bnbSdk = p_lazy_1.default.from(() => Promise.resolve().then(() => __importStar(require("bnb-javascript-sdk-nobroadcast"))));
function MixinNativeBinanceWalletInfo(Base) {
    // eslint-disable-next-line @typescript-eslint/no-shadow
    return class MixinNativeBinanceWalletInfo extends Base {
        constructor() {
            super(...arguments);
            this._supportsBinanceInfo = true;
        }
        binanceSupportsNetwork() {
            return __awaiter(this, void 0, void 0, function* () {
                return true;
            });
        }
        binanceSupportsSecureTransfer() {
            return __awaiter(this, void 0, void 0, function* () {
                return false;
            });
        }
        binanceSupportsNativeShapeShift() {
            return false;
        }
        binanceGetAccountPaths(msg) {
            const slip44 = core.slip44ByCoin("Binance");
            return [
                {
                    addressNList: [0x80000000 + 44, 0x80000000 + slip44, 0x80000000 + msg.accountIdx, 0, 0],
                },
            ];
        }
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        binanceNextAccountPath(msg) {
            // Only support one account for now (like portis).
            return undefined;
        }
    };
}
exports.MixinNativeBinanceWalletInfo = MixinNativeBinanceWalletInfo;
function MixinNativeBinanceWallet(Base) {
    var _MixinNativeBinanceWallet_masterKey, _a;
    // eslint-disable-next-line @typescript-eslint/no-shadow
    return _a = class MixinNativeBinanceWallet extends Base {
            constructor() {
                super(...arguments);
                this._supportsBinance = true;
                _MixinNativeBinanceWallet_masterKey.set(this, void 0);
            }
            binanceInitializeWallet(masterKey) {
                return __awaiter(this, void 0, void 0, function* () {
                    __classPrivateFieldSet(this, _MixinNativeBinanceWallet_masterKey, masterKey, "f");
                });
            }
            binanceWipe() {
                __classPrivateFieldSet(this, _MixinNativeBinanceWallet_masterKey, undefined, "f");
            }
            binanceBech32ify(address, prefix) {
                const words = bech32.toWords(address);
                return bech32.encode(prefix, words);
            }
            createBinanceAddress(publicKey, testnet) {
                const message = crypto_js_1.default.SHA256(crypto_js_1.default.enc.Hex.parse(publicKey));
                const hash = crypto_js_1.default.RIPEMD160(message).toString();
                const address = Buffer.from(hash, `hex`);
                return this.binanceBech32ify(address, `${testnet ? "t" : ""}bnb`);
            }
            binanceGetAddress(msg) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.needsMnemonic(!!__classPrivateFieldGet(this, _MixinNativeBinanceWallet_masterKey, "f"), () => __awaiter(this, void 0, void 0, function* () {
                        var _b;
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        const keyPair = yield util.getKeyPair(__classPrivateFieldGet(this, _MixinNativeBinanceWallet_masterKey, "f"), msg.addressNList, "binance");
                        return this.createBinanceAddress(keyPair.publicKey.toString("hex"), (_b = msg.testnet) !== null && _b !== void 0 ? _b : false);
                    }));
                });
            }
            binanceSignTx(msg) {
                return __awaiter(this, void 0, void 0, function* () {
                    return this.needsMnemonic(!!__classPrivateFieldGet(this, _MixinNativeBinanceWallet_masterKey, "f"), () => __awaiter(this, void 0, void 0, function* () {
                        var _b, _c, _d, _e, _f, _g;
                        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                        const keyPair = yield util.getKeyPair(__classPrivateFieldGet(this, _MixinNativeBinanceWallet_masterKey, "f"), msg.addressNList, "binance");
                        const tx = Object.assign({}, msg.tx);
                        if (!tx.data)
                            tx.data = null;
                        if (!tx.memo)
                            tx.memo = "";
                        if (!tx.sequence)
                            tx.sequence = "0";
                        if (!tx.source)
                            tx.source = "0";
                        const client = new (yield bnbSdk).BncClient(msg.testnet ? "https://testnet-dex.binance.org" : "https://dex.binance.org"); // broadcast not used but available
                        yield client.chooseNetwork(msg.testnet ? "testnet" : "mainnet");
                        const haveAccountNumber = !!msg.tx.account_number && Number.isInteger(Number(msg.tx.account_number));
                        if (haveAccountNumber)
                            yield client.setAccountNumber(Number(msg.tx.account_number));
                        client.setSigningDelegate(yield Isolation.Adapters.Binance.create(keyPair.node));
                        yield client.initChain();
                        if (!tx.chain_id) {
                            const { chainId } = client;
                            if (!chainId)
                                throw new Error("unable to load chain id");
                            tx.chain_id = chainId;
                        }
                        if (!tx.account_number) {
                            const { account_number } = client;
                            if (account_number)
                                tx.account_number = account_number.toString();
                        }
                        if (((_b = tx.msgs) === null || _b === void 0 ? void 0 : _b.length) !== 1 ||
                            ((_c = tx.msgs[0].inputs) === null || _c === void 0 ? void 0 : _c.length) !== 1 ||
                            ((_d = tx.msgs[0].inputs[0].coins) === null || _d === void 0 ? void 0 : _d.length) !== 1 ||
                            ((_e = tx.msgs[0].outputs) === null || _e === void 0 ? void 0 : _e.length) !== 1 ||
                            ((_f = tx.msgs[0].outputs[0].coins) === null || _f === void 0 ? void 0 : _f.length) !== 1)
                            throw new Error("malformed or unsupported tx message");
                        const addressTo = tx.msgs[0].outputs[0].address;
                        const addressFrom = tx.msgs[0].inputs[0].address;
                        const addressFromVerify = this.createBinanceAddress(keyPair.publicKey.toString("hex"), !!msg.testnet);
                        if (addressFrom !== addressFromVerify)
                            throw Error("Invalid permissions to sign for address");
                        if (!tx.account_number) {
                            const { result, status } = core.mustBeDefined(yield client.getAccount(addressFrom));
                            if (!(status === 200 && "account_number" in result && typeof result.account_number === "number"))
                                throw new Error("unable to load account number");
                            tx.account_number = result.account_number.toString();
                        }
                        // The Binance SDK takes amounts as decimal strings.
                        const amount = new bignumber_js_1.default(tx.msgs[0].inputs[0].coins[0].amount);
                        if (!amount.isInteger())
                            throw new Error("amount must be an integer");
                        if (!amount.isEqualTo(tx.msgs[0].outputs[0].coins[0].amount))
                            throw new Error("amount in input and output must be equal");
                        const asset = tx.msgs[0].inputs[0].coins[0].denom;
                        if (asset !== tx.msgs[0].outputs[0].coins[0].denom)
                            throw new Error("denomination in input and output must be the same");
                        const result = (yield client.transfer(addressFrom, addressTo, amount.shiftedBy(-8).toString(), asset, tx.memo, (_g = Number(tx.sequence)) !== null && _g !== void 0 ? _g : null));
                        const serialized = result.serialize();
                        const aminoPubKey = result.signatures[0].pub_key;
                        const signature = Buffer.from(result.signatures[0].signature, "base64").toString("base64");
                        // The BNB SDK returns public keys serialized in its own format. The first four bytes are a type
                        // tag, and the fifth is the length of the rest of the data, which is always exactly 33 bytes.
                        if (aminoPubKey.length !== 38 ||
                            aminoPubKey.readUInt32BE(0) !== 0xeb5ae987 ||
                            aminoPubKey.readUInt8(4) !== 33) {
                            throw new Error("Binance SDK returned public key in an incorrect format");
                        }
                        const pub_key = aminoPubKey.slice(5).toString("base64");
                        return Object.assign({
                            account_number: result.accountNumber,
                        }, tx, {
                            // msgs: result.msgs,
                            signatures: {
                                pub_key,
                                signature,
                            },
                            serialized,
                            txid: crypto_js_1.default.SHA256(crypto_js_1.default.enc.Hex.parse(serialized)).toString(),
                        });
                    }));
                });
            }
        },
        _MixinNativeBinanceWallet_masterKey = new WeakMap(),
        _a;
}
exports.MixinNativeBinanceWallet = MixinNativeBinanceWallet;
//# sourceMappingURL=binance.js.map