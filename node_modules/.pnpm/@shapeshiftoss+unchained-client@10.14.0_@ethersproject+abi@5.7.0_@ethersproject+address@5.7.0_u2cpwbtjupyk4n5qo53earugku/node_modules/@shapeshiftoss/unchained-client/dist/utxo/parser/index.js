"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseTransactionParser = void 0;
const bignumber_js_1 = require("bignumber.js");
const types_1 = require("../../types");
const utils_1 = require("../../utils");
class BaseTransactionParser {
    constructor(args) {
        this.chainId = args.chainId;
    }
    async parse(tx, address) {
        const parsedTx = {
            address,
            blockHash: tx.blockHash,
            blockHeight: tx.blockHeight,
            blockTime: tx.timestamp,
            chainId: this.chainId,
            confirmations: tx.confirmations,
            status: tx.confirmations > 0 ? types_1.TxStatus.Confirmed : types_1.TxStatus.Pending,
            transfers: [],
            txid: tx.txid,
        };
        tx.vin.forEach((vin) => {
            var _a, _b, _c, _d, _e, _f, _g;
            if ((_a = vin.addresses) === null || _a === void 0 ? void 0 : _a.includes(address)) {
                // send amount
                const sendValue = new bignumber_js_1.BigNumber((_b = vin.value) !== null && _b !== void 0 ? _b : 0);
                if (sendValue.gt(0)) {
                    parsedTx.transfers = (0, utils_1.aggregateTransfer)(parsedTx.transfers, types_1.TransferType.Send, this.assetId, (_d = (_c = vin.addresses) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : '', (_f = (_e = tx.vout[0].addresses) === null || _e === void 0 ? void 0 : _e[0]) !== null && _f !== void 0 ? _f : '', sendValue.toString(10));
                }
                // network fee
                const fees = new bignumber_js_1.BigNumber((_g = tx.fee) !== null && _g !== void 0 ? _g : 0);
                if (fees.gt(0)) {
                    parsedTx.fee = { assetId: this.assetId, value: fees.toString(10) };
                }
            }
        });
        tx.vout.forEach((vout) => {
            var _a, _b, _c, _d, _e, _f;
            if ((_a = vout.addresses) === null || _a === void 0 ? void 0 : _a.includes(address)) {
                // receive amount
                const receiveValue = new bignumber_js_1.BigNumber((_b = vout.value) !== null && _b !== void 0 ? _b : 0);
                if (receiveValue.gt(0)) {
                    parsedTx.transfers = (0, utils_1.aggregateTransfer)(parsedTx.transfers, types_1.TransferType.Receive, this.assetId, (_d = (_c = tx.vin[0].addresses) === null || _c === void 0 ? void 0 : _c[0]) !== null && _d !== void 0 ? _d : '', (_f = (_e = vout.addresses) === null || _e === void 0 ? void 0 : _e[0]) !== null && _f !== void 0 ? _f : '', receiveValue.toString(10));
                }
            }
        });
        return parsedTx;
    }
}
exports.BaseTransactionParser = BaseTransactionParser;
